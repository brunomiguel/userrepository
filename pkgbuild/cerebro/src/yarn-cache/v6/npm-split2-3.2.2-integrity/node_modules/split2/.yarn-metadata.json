{
  "manifest": {
    "name": "split2",
    "version": "3.2.2",
    "description": "split a Text Stream into a Line Stream, using Stream 3",
    "main": "index.js",
    "scripts": {
      "lint": "standard --verbose",
      "unit": "nyc --lines 100 --branches 100 --functions 100 --check-coverage --reporter=text tape test.js",
      "coverage": "nyc --reporter=html --reporter=cobertura --reporter=text tape test/test.js",
      "test:report": "npm run lint && npm run unit:report",
      "test": "npm run lint && npm run unit",
      "legacy": "tape test.js"
    },
    "pre-commit": [
      "test"
    ],
    "website": "https://github.com/mcollina/split2",
    "repository": {
      "type": "git",
      "url": "https://github.com/mcollina/split2.git"
    },
    "bugs": {
      "url": "http://github.com/mcollina/split2/issues"
    },
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "license": "ISC",
    "devDependencies": {
      "binary-split": "^1.0.3",
      "callback-stream": "^1.1.0",
      "fastbench": "^1.0.0",
      "nyc": "^15.0.1",
      "pre-commit": "^1.1.2",
      "safe-buffer": "^5.1.1",
      "standard": "^14.0.0",
      "tape": "^5.0.0"
    },
    "dependencies": {
      "readable-stream": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-split2-3.2.2-integrity/node_modules/split2/package.json",
    "readmeFilename": "README.md",
    "readme": "# Split2(matcher, mapper, options)\n\n![ci](https://github.com/mcollina/split2/workflows/ci/badge.svg)\n\nBreak up a stream and reassemble it so that each line is a chunk.\n`split2` is inspired by [@dominictarr](https://github.com/dominictarr) [`split`](https://github.com/dominictarr/split) module,\nand it is totally API compatible with it.\nHowever, it is based on Node.js core [`Transform`](https://nodejs.org/api/stream.html#stream_new_stream_transform_options) via [`readable-stream`](https://github.com/nodejs/readable-stream)\n\n`matcher` may be a `String`, or a `RegExp`. Example, read every line in a file ...\n\n``` js\n  fs.createReadStream(file)\n    .pipe(split2())\n    .on('data', function (line) {\n      //each chunk now is a separate line!\n    })\n\n```\n\n`split` takes the same arguments as `string.split` except it defaults to '/\\r?\\n/', and the optional `limit` paremeter is ignored.\n[String#split](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/split)\n\n`split` takes an optional options object on it's third argument, which\nis directly passed as a\n[Transform](https://nodejs.org/api/stream.html#stream_new_stream_transform_options)\noption.\n\nAdditionally, the `.maxLength` and `.skipOverflow` options are implemented, which set limits on the internal\nbuffer size and the stream's behavior when the limit is exceeded. There is no limit unless `maxLength` is set. When\nthe internal buffer size exceeds `maxLength`, the stream emits an error by default. You may also set `skipOverflow` to\ntrue to suppress the error and instead skip past any lines that cause the internal buffer to exceed `maxLength`.\n\nCalling `.destroy` will make the stream emit `close`. Use this to perform cleanup logic\n\n``` js\nvar splitFile = function(filename) {\n  var file = fs.createReadStream(filename)\n\n  return file\n    .pipe(split2())\n    .on('close', function() {\n      // destroy the file stream in case the split stream was destroyed\n      file.destroy()\n    })\n}\n\nvar stream = splitFile('my-file.txt')\n\nstream.destroy() // will destroy the input file stream\n```\n\n# NDJ - Newline Delimited Json\n\n`split2` accepts a function which transforms each line.\n\n``` js\nfs.createReadStream(file)\n  .pipe(split2(JSON.parse))\n  .on('data', function (obj) {\n    //each chunk now is a js object\n  })\n  .on(\"error\", function(error) => {\n    //handling parsing errors\n  })\n```\n\nHowever, in [@dominictarr](https://github.com/dominictarr) [`split`](https://github.com/dominictarr/split) the mapper\nis wrapped in a try-catch, while here it is not: if your parsing logic can throw, wrap it yourself. Otherwise, you can also use the stream error handling when mapper function throw.\n\n# Benchmark\n\n```bash\n$ node bench.js\nbenchSplit*10000: 1484.983ms\nbenchBinarySplit*10000: 1484.080ms\nbenchSplit*10000: 1407.334ms\nbenchBinarySplit*10000: 1500.281ms\n```\n\nBenchmark taken on Node 8.11.3, on a Macbook i5 2018.\n\n# License\n\nCopyright (c) 2014-2018, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
    "licenseText": "Copyright (c) 2014-2018, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/split2/-/split2-3.2.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/split2/-/split2-3.2.2.tgz",
    "hash": "",
    "integrity": "sha512-9NThjpgZnifTkJpzTZ7Eue85S49QwpNhZTq6GRJwObb6jnLFNGB7Qm73V5HewTROPyxD0C29xqmaI68bQtV+hg==",
    "registry": "npm",
    "packageName": "split2",
    "cacheIntegrity": "sha512-9NThjpgZnifTkJpzTZ7Eue85S49QwpNhZTq6GRJwObb6jnLFNGB7Qm73V5HewTROPyxD0C29xqmaI68bQtV+hg== sha1-vyzyo32DgxLCSciSBv16F90SNl8="
  },
  "registry": "npm",
  "hash": "f4d4e18e98199e27d3909a734d9ec4b9ef394b8f50c29361653aba19127039b6fa8e72c534607b426ef75791dec1344e3f2c43d02dbdc6a99a23af1b42d57e86"
}