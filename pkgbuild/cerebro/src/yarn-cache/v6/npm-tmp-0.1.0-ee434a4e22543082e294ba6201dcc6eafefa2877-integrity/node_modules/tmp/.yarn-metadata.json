{
  "manifest": {
    "name": "tmp",
    "version": "0.1.0",
    "description": "Temporary file and directory creator",
    "author": {
      "name": "KARASZI IstvÃ¡n",
      "email": "github@spam.raszi.hu",
      "url": "http://raszi.hu/"
    },
    "keywords": [
      "temporary",
      "tmp",
      "temp",
      "tempdir",
      "tempfile",
      "tmpdir",
      "tmpfile"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/raszi/node-tmp.git"
    },
    "homepage": "http://github.com/raszi/node-tmp",
    "bugs": {
      "url": "http://github.com/raszi/node-tmp/issues"
    },
    "engines": {
      "node": ">=6"
    },
    "dependencies": {
      "rimraf": "^2.6.3"
    },
    "devDependencies": {
      "eslint": "^4.19.1",
      "eslint-plugin-mocha": "^5.0.0",
      "istanbul": "^0.4.5",
      "mocha": "^5.1.1"
    },
    "main": "lib/tmp.js",
    "files": [
      "lib/"
    ],
    "scripts": {
      "lint": "eslint lib --env mocha test",
      "clean": "rm -Rf ./coverage",
      "test": "npm run clean && istanbul cover ./node_modules/mocha/bin/_mocha --report none --print none --dir ./coverage/json -u exports -R test/*-test.js && istanbul report --root ./coverage/json html && istanbul report text-summary",
      "doc": "jsdoc -c .jsdoc.json"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tmp-0.1.0-ee434a4e22543082e294ba6201dcc6eafefa2877-integrity/node_modules/tmp/package.json",
    "readmeFilename": "README.md",
    "readme": "# Tmp\n\nA simple temporary file and directory creator for [node.js.][1]\n\n[![Build Status](https://travis-ci.org/raszi/node-tmp.svg?branch=master)](https://travis-ci.org/raszi/node-tmp)\n[![Dependencies](https://david-dm.org/raszi/node-tmp.svg)](https://david-dm.org/raszi/node-tmp)\n[![npm version](https://badge.fury.io/js/tmp.svg)](https://badge.fury.io/js/tmp)\n[![API documented](https://img.shields.io/badge/API-documented-brightgreen.svg)](https://raszi.github.io/node-tmp/)\n[![Known Vulnerabilities](https://snyk.io/test/npm/tmp/badge.svg)](https://snyk.io/test/npm/tmp)\n\n## About\n\nThis is a [widely used library][2] to create temporary files and directories\nin a [node.js][1] environment.\n\nTmp offers both an asynchronous and a synchronous API. For all API calls, all\nthe parameters are optional. There also exists a promisified version of the\nAPI, see [tmp-promise][5].\n\nTmp uses crypto for determining random file names, or, when using templates,\na six letter random identifier. And just in case that you do not have that much\nentropy left on your system, Tmp will fall back to pseudo random numbers.\n\nYou can set whether you want to remove the temporary file on process exit or\nnot.\n\nIf you do not want to store your temporary directories and files in the\nstandard OS temporary directory, then you are free to override that as well.\n\n## An Important Note on Compatibility\n\n### Version 0.1.0\n\nSince version 0.1.0, all support for node versions < 0.10.0 has been dropped.\n\nMost importantly, any support for earlier versions of node-tmp was also dropped.\n\nIf you still require node versions < 0.10.0, then you must limit your node-tmp\ndependency to versions below 0.1.0.\n\n### Version 0.0.33\n\nSince version 0.0.33, all support for node versions < 0.8 has been dropped.\n\nIf you still require node version 0.8, then you must limit your node-tmp\ndependency to version 0.0.33.\n\nFor node versions < 0.8 you must limit your node-tmp dependency to\nversions < 0.0.33.\n\n### Node Versions < 8.12.0\n\nThe SIGINT handler will not work correctly with versions of NodeJS < 8.12.0.\n\n### Windows\n\nSignal handlers for SIGINT will not work. Pressing CTRL-C will leave behind\ntemporary files and directories.\n\n## How to install\n\n```bash\nnpm install tmp\n```\n\n## Usage\n\nPlease also check [API docs][4].\n\n### Asynchronous file creation\n\nSimple temporary file creation, the file will be closed and unlinked on process exit.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.file(function _tempFileCreated(err, path, fd, cleanupCallback) {\n  if (err) throw err;\n\n  console.log('File: ', path);\n  console.log('Filedescriptor: ', fd);\n  \n  // If we don't need the file anymore we could manually call the cleanupCallback\n  // But that is not necessary if we didn't pass the keep option because the library\n  // will clean after itself.\n  cleanupCallback();\n});\n```\n\n### Synchronous file creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp');\n\nvar tmpobj = tmp.fileSync();\nconsole.log('File: ', tmpobj.name);\nconsole.log('Filedescriptor: ', tmpobj.fd);\n  \n// If we don't need the file anymore we could manually call the removeCallback\n// But that is not necessary if we didn't pass the keep option because the library\n// will clean after itself.\ntmpobj.removeCallback();\n```\n\nNote that this might throw an exception if either the maximum limit of retries\nfor creating a temporary name fails, or, in case that you do not have the permission\nto write to the directory where the temporary file should be created in.\n\n### Asynchronous directory creation\n\nSimple temporary directory creation, it will be removed on process exit.\n\nIf the directory still contains items on process exit, then it won't be removed.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.dir(function _tempDirCreated(err, path, cleanupCallback) {\n  if (err) throw err;\n\n  console.log('Dir: ', path);\n  \n  // Manual cleanup\n  cleanupCallback();\n});\n```\n\nIf you want to cleanup the directory even when there are entries in it, then\nyou can pass the `unsafeCleanup` option when creating it.\n\n### Synchronous directory creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp');\n\nvar tmpobj = tmp.dirSync();\nconsole.log('Dir: ', tmpobj.name);\n// Manual cleanup\ntmpobj.removeCallback();\n```\n\nNote that this might throw an exception if either the maximum limit of retries\nfor creating a temporary name fails, or, in case that you do not have the permission\nto write to the directory where the temporary directory should be created in.\n\n### Asynchronous filename generation\n\nIt is possible with this library to generate a unique filename in the specified\ndirectory.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.tmpName(function _tempNameGenerated(err, path) {\n    if (err) throw err;\n\n    console.log('Created temporary filename: ', path);\n});\n```\n\n### Synchronous filename generation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp');\n\nvar name = tmp.tmpNameSync();\nconsole.log('Created temporary filename: ', name);\n```\n\n## Advanced usage\n\n### Asynchronous file creation\n\nCreates a file with mode `0644`, prefix will be `prefix-` and postfix will be `.txt`.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.file({ mode: 0644, prefix: 'prefix-', postfix: '.txt' }, function _tempFileCreated(err, path, fd) {\n  if (err) throw err;\n\n  console.log('File: ', path);\n  console.log('Filedescriptor: ', fd);\n});\n```\n\n### Synchronous file creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp');\n\nvar tmpobj = tmp.fileSync({ mode: 0644, prefix: 'prefix-', postfix: '.txt' });\nconsole.log('File: ', tmpobj.name);\nconsole.log('Filedescriptor: ', tmpobj.fd);\n```\n\n### Controlling the Descriptor\n\nAs a side effect of creating a unique file `tmp` gets a file descriptor that is\nreturned to the user as the `fd` parameter.  The descriptor may be used by the\napplication and is closed when the `removeCallback` is invoked.\n\nIn some use cases the application does not need the descriptor, needs to close it\nwithout removing the file, or needs to remove the file without closing the\ndescriptor.  Two options control how the descriptor is managed:\n\n* `discardDescriptor` - if `true` causes `tmp` to close the descriptor after the file\n  is created.  In this case the `fd` parameter is undefined.\n* `detachDescriptor` - if `true` causes `tmp` to return the descriptor in the `fd`\n  parameter, but it is the application's responsibility to close it when it is no\n  longer needed.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.file({ discardDescriptor: true }, function _tempFileCreated(err, path, fd, cleanupCallback) {\n  if (err) throw err;\n  // fd will be undefined, allowing application to use fs.createReadStream(path)\n  // without holding an unused descriptor open.\n});\n```\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.file({ detachDescriptor: true }, function _tempFileCreated(err, path, fd, cleanupCallback) {\n  if (err) throw err;\n\n  cleanupCallback();\n  // Application can store data through fd here; the space used will automatically\n  // be reclaimed by the operating system when the descriptor is closed or program\n  // terminates.\n});\n```\n\n### Asynchronous directory creation\n\nCreates a directory with mode `0755`, prefix will be `myTmpDir_`.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.dir({ mode: 0750, prefix: 'myTmpDir_' }, function _tempDirCreated(err, path) {\n  if (err) throw err;\n\n  console.log('Dir: ', path);\n});\n```\n\n### Synchronous directory creation\n\nAgain, a synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp');\n\nvar tmpobj = tmp.dirSync({ mode: 0750, prefix: 'myTmpDir_' });\nconsole.log('Dir: ', tmpobj.name);\n```\n\n### mkstemp like, asynchronously\n\nCreates a new temporary directory with mode `0700` and filename like `/tmp/tmp-nk2J1u`.\n\nIMPORTANT NOTE: template no longer accepts a path. Use the dir option instead if you\nrequire tmp to create your temporary filesystem object in a different place than the\ndefault `tmp.tmpdir`.\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.dir({ template: 'tmp-XXXXXX' }, function _tempDirCreated(err, path) {\n  if (err) throw err;\n\n  console.log('Dir: ', path);\n});\n```\n\n### mkstemp like, synchronously\n\nThis will behave similarly to the asynchronous version.\n\n```javascript\nvar tmp = require('tmp');\n\nvar tmpobj = tmp.dirSync({ template: 'tmp-XXXXXX' });\nconsole.log('Dir: ', tmpobj.name);\n```\n\n### Asynchronous filename generation\n\nUsing `tmpName()` you can create temporary file names asynchronously.\nThe function accepts all standard options, e.g. `prefix`, `postfix`, `dir`, and so on.\n\nYou can also leave out the options altogether and just call the function with a callback as first parameter.\n\n```javascript\nvar tmp = require('tmp');\n\nvar options = {};\n\ntmp.tmpName(options, function _tempNameGenerated(err, path) {\n    if (err) throw err;\n\n    console.log('Created temporary filename: ', path);\n});\n```\n\n### Synchronous filename generation\n\nThe `tmpNameSync()` function works similarly to `tmpName()`.\nAgain, you can leave out the options altogether and just invoke the function without any parameters.\n\n```javascript\nvar tmp = require('tmp');\nvar options = {};\nvar tmpname = tmp.tmpNameSync(options);\nconsole.log('Created temporary filename: ', tmpname);\n```\n\n## Graceful cleanup\n\nOne may want to cleanup the temporary files even when an uncaught exception\noccurs. To enforce this, you can call the `setGracefulCleanup()` method:\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.setGracefulCleanup();\n```\n\n## Options\n\nAll options are optional :)\n\n  * `mode`: the file mode to create with, it fallbacks to `0600` on file creation and `0700` on directory creation\n  * `prefix`: the optional prefix, fallbacks to `tmp-` if not provided\n  * `postfix`: the optional postfix, fallbacks to `.tmp` on file creation\n  * `template`: [`mkstemp`][3] like filename template, no default\n  * `dir`: the optional temporary directory, fallbacks to system default (guesses from environment)\n  * `tries`: how many times should the function try to get a unique filename before giving up, default `3`\n  * `keep`: signals that the temporary file or directory should not be deleted on exit, default is `false`\n    * In order to clean up, you will have to call the provided `cleanupCallback` function manually.\n  * `unsafeCleanup`: recursively removes the created temporary directory, even when it's not empty. default is `false`\n\n[1]: http://nodejs.org/\n[2]: https://www.npmjs.com/browse/depended/tmp\n[3]: http://www.kernel.org/doc/man-pages/online/pages/man3/mkstemp.3.html\n[4]: https://raszi.github.io/node-tmp/\n[5]: https://github.com/benjamingr/tmp-promise\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 KARASZI IstvÃ¡n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tmp/-/tmp-0.1.0.tgz#ee434a4e22543082e294ba6201dcc6eafefa2877",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tmp/-/tmp-0.1.0.tgz",
    "hash": "ee434a4e22543082e294ba6201dcc6eafefa2877",
    "integrity": "sha512-J7Z2K08jbGcdA1kkQpJSqLF6T0tdQqpR2pnSUXsIchbPdTI9v3e85cLW0d6WDhwuAleOV71j2xWs8qMPfK7nKw==",
    "registry": "npm",
    "packageName": "tmp",
    "cacheIntegrity": "sha512-J7Z2K08jbGcdA1kkQpJSqLF6T0tdQqpR2pnSUXsIchbPdTI9v3e85cLW0d6WDhwuAleOV71j2xWs8qMPfK7nKw== sha1-7kNKTiJUMILilLpiAdzG6v76KHc="
  },
  "registry": "npm",
  "hash": "ee434a4e22543082e294ba6201dcc6eafefa2877"
}