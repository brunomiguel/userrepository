{
  "manifest": {
    "name": "ts-morph",
    "version": "8.2.0",
    "description": "TypeScript compiler wrapper for static analysis and code manipulation.",
    "main": "dist/ts-morph.js",
    "typings": "lib/ts-morph.d.ts",
    "scripts": {
      "dopublish": "yarn type-check-docs && yarn package && yarn publish-code-verification && echo \"Run: npm publish --otp\"",
      "build": "rimraf dist && rollup --config && yarn build:declarations",
      "build:declarations": "ts-node --transpile-only scripts/generation/main create-declaration-file",
      "test": "cross-env TS_NODE_COMPILER=\"ttypescript\" TS_NODE_TRANSPILE_ONLY=\"true\" mocha",
      "test:debug": "yarn test --inspect-brk",
      "test:watch": "yarn test --watch-extensions ts --watch",
      "test:ci": "yarn run test:coverage && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
      "test:ts-versions": "ts-node --transpile-only scripts/test/testTypeScriptVersions",
      "test:coverage": "cross-env TS_NODE_COMPILER=\"ttypescript\" TS_NODE_TRANSPILE_ONLY=\"true\" nyc --reporter=lcov mocha",
      "test:performance": "yarn build && node ./dist/tests/performance/run.js",
      "test:performance-save": "yarn test:performance --save",
      "type-check-library": "ts-node --transpile-only scripts/typeCheckLibrary",
      "type-check-scripts": "tsc --noEmit --project scripts/tsconfig.json",
      "code-generate": "ts-node --transpile-only --compiler ttypescript scripts/generation/main",
      "refactor": "ts-node --transpile-only scripts/refactor",
      "output-wrapped-nodes": "ts-node --transpile-only scripts/generation/outputWrappedNodesInfo",
      "package": "yarn build",
      "publish-code-verification": "yarn code-verification && yarn ensure-no-declaration-file-errors",
      "code-verification": "ts-node --transpile-only scripts/verification/main ensure-structures-match-classes ensure-overload-structures-match ensure-array-inputs-readonly ensure-classes-implement-structure-methods ensure-mixin-not-applied-multiple-times validate-public-api-class-member-names validate-compiler-node-to-wrapped-type validate-code-fences",
      "ensure-structures-match-classes": "ts-node --transpile-only scripts/verification/main ensure-structures-match-classes",
      "ensure-overload-structures-match": "ts-node --transpile-only scripts/verification/main ensure-overload-structures-match",
      "ensure-no-project-compile-errors": "ts-node --transpile-only scripts/verification/ensureNoProjectCompileErrors",
      "ensure-no-declaration-file-errors": "ts-node --transpile-only scripts/verification/ensureNoDeclarationFileErrors",
      "ensure-array-inputs-readonly": "ts-node --transpile-only scripts/verification/main ensure-array-inputs-readonly",
      "ensure-or-throw-exists": "ts-node --transpile-only scripts/verification/main ensure-or-throw-exists",
      "type-check-docs": "ts-node --transpile-only scripts/typeCheckDocumentation.ts"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dsherret/ts-morph.git"
    },
    "keywords": [
      "typescript",
      "ast",
      "static analysis",
      "code generation",
      "code refactor"
    ],
    "author": {
      "name": "David Sherret"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dsherret/ts-morph/issues"
    },
    "homepage": "https://github.com/dsherret/ts-morph#readme",
    "nyc": {
      "extension": [
        ".ts",
        ".tsx"
      ],
      "include": [
        "src/**/*.ts",
        "!src/tests/**/*.ts",
        "!src/structures/utils/forEachStructureChild.ts"
      ],
      "reporter": [
        "html"
      ],
      "all": true
    },
    "dependencies": {
      "@dsherret/to-absolute-glob": "^2.0.2",
      "@ts-morph/common": "~0.6.0",
      "code-block-writer": "^10.1.0"
    },
    "devDependencies": {
      "@types/chai": "^4.2.12",
      "@types/diff": "^4.0.2",
      "@types/mocha": "^8.0.3",
      "@types/node": "^14.6.0",
      "@types/ts-nameof": "^4.2.1",
      "@ts-morph/scripts": "~0.2.0",
      "chai": "^4.2.0",
      "conditional-type-checks": "^1.0.5",
      "coveralls": "^3.1.0",
      "cross-env": "^7.0.2",
      "diff": "^4.0.2",
      "mocha": "8.1.1",
      "nyc": "15.1.0",
      "rimraf": "^3.0.2",
      "rollup": "^2.26.4",
      "rollup-plugin-typescript2": "^0.27.2",
      "shelljs": "^0.8.4",
      "shx": "^0.3.2",
      "ts-nameof": "^5.0.0",
      "ts-node": "8.10.2",
      "ttypescript": "1.5.10",
      "typescript": "~4.0.2"
    },
    "standard-version": {
      "tagPrefix": "",
      "skip": {
        "tag": true,
        "commit": true
      }
    },
    "browser": {
      "fs": false,
      "os": false,
      "fs.realpath": false,
      "fs-extra": false,
      "dir-glob": false,
      "graceful-fs": false,
      "fast-glob": false,
      "source-map-support": false,
      "glob-parent": false,
      "glob": false
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-ts-morph-8.2.0-41d83cd501cbd897eb029ac489d6d5b927555c57-integrity/node_modules/ts-morph/package.json",
    "readmeFilename": "readme.md",
    "readme": "ï»¿# ts-morph\n\n[![npm version](https://badge.fury.io/js/ts-morph.svg)](https://badge.fury.io/js/ts-morph)\n[![Build Status](https://travis-ci.org/dsherret/ts-morph.svg?branch=latest)](https://travis-ci.org/dsherret/ts-morph)\n[![Coverage Status](https://coveralls.io/repos/dsherret/ts-morph/badge.svg?branch=latest&service=github)](https://coveralls.io/github/dsherret/ts-morph?branch=latest)\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n[TypeScript](https://github.com/Microsoft/TypeScript) Compiler API wrapper. Provides an easier way to programmatically navigate and manipulate TypeScript and JavaScript code.\n\nFormerly `ts-simple-ast`.\n\n## Overview\n\n- [Documentation](https://ts-morph.com/)\n- [Declaration file](lib/ts-morph.d.ts)\n\n## Main Features\n\n1. Wraps the compiler API objects to provide helper methods for getting information and programmatically changing files.\n2. Allows falling back to the compiler API objects if necessary (ex. `classDeclaration.compilerNode` or `typeChecker.compilerObject`).\n3. All changes are kept in memory (including file and directory moves) until specifying to save to the underlying file system.\n4. Changes are made to the text and wrapped nodes can be held onto between manipulations.\n\n## Getting Started\n\n1. [Installing](https://ts-morph.com/)\n2. [Instantiating](https://ts-morph.com/setup/)\n3. [Adding source files](https://ts-morph.com/setup/adding-source-files)\n4. [Getting source files](https://ts-morph.com/navigation/getting-source-files)\n5. [Navigating](https://ts-morph.com/navigation/example)\n6. [Manipulating](https://ts-morph.com/manipulation/)\n\n## Library Progress\n\nThis library is still under active development. Most common code manipulation/generation use cases are implemented, but there's still a lot of work to do. Please open an issue if you find a feature missing, bug, or question that isn't in the issue tracker.\n\n- [Breaking changes](https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/breaking-changes.md)\n- [Change log](https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/CHANGELOG.md)\n- [Wrapped nodes progress report](https://github.com/dsherret/ts-morph/blob/latest/packages/ts-morph/wrapped-nodes.md)\n\n## Example\n\n<!-- dprint-ignore -->\n```ts\nimport { Project, StructureKind } from \"ts-morph\";\n\n// initialize\nconst project = new Project({\n    // Optionally specify compiler options, tsconfig.json, in-memory file system, and more here.\n    // If you initialize with a tsconfig.json, then it will automatically populate the project\n    // with the associated source files.\n    // Read more: https://ts-morph.com/setup/\n});\n\n// add source files\nproject.addSourceFilesAtPaths(\"src/**/*.ts\");\nconst myClassFile = project.createSourceFile(\"src/MyClass.ts\", \"export class MyClass {}\");\nconst myEnumFile = project.createSourceFile(\"src/MyEnum.ts\", {\n    statements: [{\n        kind: StructureKind.Enum,\n        name: \"MyEnum\",\n        isExported: true,\n        members: [{ name: \"member\" }],\n    }],\n});\n\n// get information\nconst myClass = myClassFile.getClassOrThrow(\"MyClass\");\nmyClass.getName();          // returns: \"MyClass\"\nmyClass.hasExportKeyword(); // returns: true\nmyClass.isDefaultExport();  // returns: false\n\n// manipulate\nconst myInterface = myClassFile.addInterface({\n    name: \"IMyInterface\",\n    isExported: true,\n    properties: [{\n        name: \"myProp\",\n        type: \"number\",\n    }],\n});\n\nmyClass.rename(\"NewName\");\nmyClass.addImplements(myInterface.getName());\nmyClass.addProperty({\n    name: \"myProp\",\n    initializer: \"5\",\n});\n\nproject.getSourceFileOrThrow(\"src/ExistingFile.ts\").delete();\n\n// asynchronously save all the changes above\nawait project.save();\n\n// get underlying compiler node from the typescript AST from any node\nconst compilerNode = myClassFile.compilerNode;\n```\n\nOr navigate existing compiler nodes created with the TypeScript compiler (the `ts` named export is the TypeScript compiler):\n\n```ts ignore-error: 1109\nimport { createWrappedNode, ClassDeclaration, ts } from \"ts-morph\";\n\n// some code that creates a class declaration using the ts object\nconst classNode: ts.ClassDeclaration = ...;\n\n// create and use a wrapped node\nconst classDec = createWrappedNode(classNode) as ClassDeclaration;\nconst firstProperty = classDec.getProperties()[0];\n\n// ... do more stuff here ...\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 David Sherret\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ts-morph/-/ts-morph-8.2.0.tgz#41d83cd501cbd897eb029ac489d6d5b927555c57",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ts-morph/-/ts-morph-8.2.0.tgz",
    "hash": "41d83cd501cbd897eb029ac489d6d5b927555c57",
    "integrity": "sha512-NHHWu+7I2/AOZiTni5w3f+xCfIxrkzPCcQbTGa81Yk3pr23a4h9xLLEE6tIGuYIubWjkjr9QVC3ITqgmA5touQ==",
    "registry": "npm",
    "packageName": "ts-morph",
    "cacheIntegrity": "sha512-NHHWu+7I2/AOZiTni5w3f+xCfIxrkzPCcQbTGa81Yk3pr23a4h9xLLEE6tIGuYIubWjkjr9QVC3ITqgmA5touQ== sha1-Qdg81QHL2JfrAprEidbVuSdVXFc="
  },
  "registry": "npm",
  "hash": "41d83cd501cbd897eb029ac489d6d5b927555c57"
}