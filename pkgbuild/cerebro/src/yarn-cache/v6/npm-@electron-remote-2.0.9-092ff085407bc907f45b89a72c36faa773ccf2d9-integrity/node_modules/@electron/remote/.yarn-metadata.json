{
  "manifest": {
    "name": "@electron/remote",
    "version": "2.0.9",
    "main": "renderer/index.js",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/electron/remote"
    },
    "peerDependencies": {
      "electron": ">= 13.0.0"
    },
    "devDependencies": {
      "@continuous-auth/semantic-release-npm": "^3.0.0",
      "@types/chai": "^4.2.11",
      "@types/chai-as-promised": "^7.1.2",
      "@types/dirty-chai": "^2.0.2",
      "@types/mocha": "^7.0.2",
      "@types/node": "^14.17.0",
      "chai": "^4.2.0",
      "chai-as-promised": "^7.1.1",
      "dirty-chai": "^2.0.1",
      "electron": "22.x",
      "mocha": "^10.1.0",
      "mocha-junit-reporter": "^1.23.3",
      "mocha-multi-reporters": "^1.1.7",
      "ts-node": "^8.10.2",
      "typescript": "^4.1.3",
      "walkdir": "^0.4.1",
      "yargs": "^15.3.1"
    },
    "scripts": {
      "prepare": "tsc",
      "test": "electron test --extension=ts --require=ts-node/register --exit --js-flags=--expose_gc",
      "test:ci": "yarn test --reporter=mocha-multi-reporters --reporter-options=configFile=.circleci/mocha-reporter-config.json"
    },
    "files": [
      "README.md",
      "package.json",
      "main",
      "renderer",
      "dist/src",
      "index.d.ts"
    ],
    "types": "index.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@electron-remote-2.0.9-092ff085407bc907f45b89a72c36faa773ccf2d9-integrity/node_modules/@electron/remote/package.json",
    "readmeFilename": "README.md",
    "readme": "# @electron/remote\n\n`@electron/remote` is an [Electron](https://electronjs.org) module that bridges\nJavaScript objects from the main process to the renderer process. This lets you\naccess main-process-only objects as if they were available in the renderer\nprocess.\n\n> ⚠️ **Warning!** This module has [many subtle\n> pitfalls][remote-considered-harmful]. There is almost always a better way to\n> accomplish your task than using this module. For example, [`ipcRenderer.invoke`](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args) can serve many common use cases.\n\n`@electron/remote` is a replacement for the built-in `remote` module in\nElectron, which is deprecated and will eventually be removed.\n\n## Migrating from `remote`\n\n> **NOTE:** `@electron/remote` requires Electron 10 or higher.\n\nThere are three things you need to do to migrate from the built-in `remote`\nmodule to `@electron/remote`.\n\nFirst, you need to install it from NPM:\n\n```shell\n$ npm install --save @electron/remote\n```\n\nSecond, `@electron/remote/main` must be initialized in the main\nprocess before it can be used from the renderer:\n\n```javascript\n// in the main process:\nrequire('@electron/remote/main').initialize()\n```\n\nThird, `require('electron').remote` in the renderer process must be\nreplaced with `require('@electron/remote')`.\n\n```javascript\n// in the renderer process:\n\n// Before\nconst { BrowserWindow } = require('electron').remote\n\n// After\nconst { BrowserWindow } = require('@electron/remote')\n```\n\n**Note:** Since this is requiring a module through npm rather than a built-in\nmodule, if you're using `remote` from a sandboxed process, you'll need to\nconfigure your bundler appropriately to package the code of `@electron/remote`\nin the preload script. Of course, [using `@electron/remote` makes the sandbox\nmuch less effective][remote-considered-harmful].\n\n**Note:** In `electron >= 14.0.0`, you must use the new `enable` API to enable the remote module for each desired `WebContents` separately: `require(\"@electron/remote/main\").enable(webContents)`.\n\nIn `electron < 14.0.0`, `@electron/remote` respects the `enableRemoteModule` WebPreferences\nvalue. You must pass `{ webPreferences: { enableRemoteModule: true } }` to\nthe constructor of `BrowserWindow`s that should be granted permission to use\n`@electron/remote`.\n\n# API Reference\n\nThe `remote` module provides a simple way to do inter-process communication\n(IPC) between the renderer process (web page) and the main process.\n\nIn Electron, GUI-related modules (such as `dialog`, `menu` etc.) are only\navailable in the main process, not in the renderer process. In order to use them\nfrom the renderer process, the `ipc` module is necessary to send inter-process\nmessages to the main process. With the `remote` module, you can invoke methods\nof the main process object without explicitly sending inter-process messages,\nsimilar to Java's [RMI][rmi]. An example of creating a browser window from a\nrenderer process:\n\n```javascript\nconst { BrowserWindow } = require('@electron/remote')\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n\nIn order for this to work, you first need to initialize the main-process side\nof the remote module:\n\n```javascript\n// in the main process:\nrequire('@electron/remote/main').initialize()\n```\n\n**Note:** In `electron >= 14.0.0` the remote module is disabled by default for any `WebContents` instance and is only enabled for specified `WebContents` after explicitly calling `require(\"@electron/remote/main\").enable(webContents)`.\n\nIn `electron < 14.0.0` the remote module can be disabled for security reasons in the following contexts:\n- [`BrowserWindow`](browser-window.md) - by setting the `enableRemoteModule` option to `false`.\n- [`<webview>`](webview-tag.md) - by setting the `enableremotemodule` attribute to `false`.\n\n## Remote Objects\n\nEach object (including functions) returned by the `remote` module represents an\nobject in the main process (we call it a remote object or remote function).\nWhen you invoke methods of a remote object, call a remote function, or create\na new object with the remote constructor (function), you are actually sending\nsynchronous inter-process messages.\n\nIn the example above, both `BrowserWindow` and `win` were remote objects and\n`new BrowserWindow` didn't create a `BrowserWindow` object in the renderer\nprocess. Instead, it created a `BrowserWindow` object in the main process and\nreturned the corresponding remote object in the renderer process, namely the\n`win` object.\n\n**Note:** Only [enumerable properties][enumerable-properties] which are present\nwhen the remote object is first referenced are accessible via remote.\n\n**Note:** Arrays and Buffers are copied over IPC when accessed via the `remote`\nmodule. Modifying them in the renderer process does not modify them in the main\nprocess and vice versa.\n\n## Lifetime of Remote Objects\n\nElectron makes sure that as long as the remote object in the renderer process\nlives (in other words, has not been garbage collected), the corresponding object\nin the main process will not be released. When the remote object has been\ngarbage collected, the corresponding object in the main process will be\ndereferenced.\n\nIf the remote object is leaked in the renderer process (e.g. stored in a map but\nnever freed), the corresponding object in the main process will also be leaked,\nso you should be very careful not to leak remote objects.\n\nPrimary value types like strings and numbers, however, are sent by copy.\n\n## Passing callbacks to the main process\n\nCode in the main process can accept callbacks from the renderer - for instance\nthe `remote` module - but you should be extremely careful when using this\nfeature.\n\nFirst, in order to avoid deadlocks, the callbacks passed to the main process\nare called asynchronously. You should not expect the main process to\nget the return value of the passed callbacks.\n\nFor instance you can't use a function from the renderer process in an\n`Array.map` called in the main process:\n\n```javascript\n// main process mapNumbers.js\nexports.withRendererCallback = (mapper) => {\n  return [1, 2, 3].map(mapper)\n}\n\nexports.withLocalCallback = () => {\n  return [1, 2, 3].map(x => x + 1)\n}\n```\n\n```javascript\n// renderer process\nconst mapNumbers = require('@electron/remote').require('./mapNumbers')\nconst withRendererCb = mapNumbers.withRendererCallback(x => x + 1)\nconst withLocalCb = mapNumbers.withLocalCallback()\n\nconsole.log(withRendererCb, withLocalCb)\n// [undefined, undefined, undefined], [2, 3, 4]\n```\n\nAs you can see, the renderer callback's synchronous return value was not as\nexpected, and didn't match the return value of an identical callback that lives\nin the main process.\n\nSecond, the callbacks passed to the main process will persist until the\nmain process garbage-collects them.\n\nFor example, the following code seems innocent at first glance. It installs a\ncallback for the `close` event on a remote object:\n\n```javascript\nrequire('@electron/remote').getCurrentWindow().on('close', () => {\n  // window was closed...\n})\n```\n\nBut remember the callback is referenced by the main process until you\nexplicitly uninstall it. If you do not, each time you reload your window the\ncallback will be installed again, leaking one callback for each restart.\n\nTo make things worse, since the context of previously installed callbacks has\nbeen released, exceptions will be raised in the main process when the `close`\nevent is emitted.\n\nTo avoid this problem, ensure you clean up any references to renderer callbacks\npassed to the main process. This involves cleaning up event handlers, or\nensuring the main process is explicitly told to dereference callbacks that came\nfrom a renderer process that is exiting.\n\n## Accessing built-in modules in the main process\n\nThe built-in modules in the main process are added as getters in the `remote`\nmodule, so you can use them directly like the `electron` module.\n\n```javascript\nconst app = require('@electron/remote').app\nconsole.log(app)\n```\n\n## Methods\n\nThe `remote` module has the following methods:\n\n### `remote.require(module)`\n\n* `module` String\n\nReturns `any` - The object returned by `require(module)` in the main process.\nModules specified by their relative path will resolve relative to the entrypoint\nof the main process.\n\ne.g.\n\n```sh\nproject/\n├── main\n│   ├── foo.js\n│   └── index.js\n├── package.json\n└── renderer\n    └── index.js\n```\n\n```js\n// main process: main/index.js\nconst { app } = require('@electron/remote')\napp.whenReady().then(() => { /* ... */ })\n```\n\n```js\n// some relative module: main/foo.js\nmodule.exports = 'bar'\n```\n\n```js\n// renderer process: renderer/index.js\nconst foo = require('@electron/remote').require('./foo') // bar\n```\n\n### `remote.getCurrentWindow()`\n\nReturns `BrowserWindow` - The window to which this web page belongs.\n\n**Note:** Do not use `removeAllListeners` on `BrowserWindow`.  Use of this can\nremove all [`blur`](https://developer.mozilla.org/en-US/docs/Web/Events/blur)\nlisteners, disable click events on touch bar buttons, and other unintended\nconsequences.\n\n### `remote.getCurrentWebContents()`\n\nReturns `WebContents` - The web contents of this web page.\n\n### `remote.getGlobal(name)`\n\n* `name` String\n\nReturns `any` - The global variable of `name` (e.g. `global[name]`) in the main\nprocess.\n\n## Properties\n\n### `remote.process` _Readonly_\n\nA `NodeJS.Process` object.  The `process` object in the main process. This is the same as\n`remote.getGlobal('process')` but is cached.\n\n# Overriding exposed objects\n\nWithout filtering, `@electron/remote` will provide access to any JavaScript\nobject that any renderer requests. In order to control what can be accessed,\n`@electron/remote` provides an opportunity to the app to return a custom result\nfor any of `getGlobal`, `require`, `getCurrentWindow`, `getCurrentWebContents`,\nor any of the builtin module properties.\n\nThe following events will be emitted first on the `app` Electron module, and\nthen on the specific `WebContents` which requested the object. When emitted on\nthe `app` module, the first parameter after the `Event` object will be the\n`WebContents` which originated the request. If any handler calls\n`preventDefault`, the request will be denied. If a `returnValue` parameter is\nset on the result, then that value will be returned to the renderer instead of\nthe default.\n\n## Events\n\n### Event: 'remote-require'\n\nReturns:\n\n* `event` Event\n* `moduleName` String\n\nEmitted when `remote.require()` is called in the renderer process of `webContents`.\nCalling `event.preventDefault()` will prevent the module from being returned.\nCustom value can be returned by setting `event.returnValue`.\n\n### Event: 'remote-get-global'\n\nReturns:\n\n* `event` Event\n* `globalName` String\n\nEmitted when `remote.getGlobal()` is called in the renderer process of `webContents`.\nCalling `event.preventDefault()` will prevent the global from being returned.\nCustom value can be returned by setting `event.returnValue`.\n\n### Event: 'remote-get-builtin'\n\nReturns:\n\n* `event` Event\n* `moduleName` String\n\nEmitted when `remote.getBuiltin()` is called in the renderer process of\n`webContents`, including when a builtin module is accessed as a property (e.g.\n`require(\"@electron/remote\").BrowserWindow`).\nCalling `event.preventDefault()` will prevent the module from being returned.\nCustom value can be returned by setting `event.returnValue`.\n\n### Event: 'remote-get-current-window'\n\nReturns:\n\n* `event` Event\n\nEmitted when `remote.getCurrentWindow()` is called in the renderer process of `webContents`.\nCalling `event.preventDefault()` will prevent the object from being returned.\nCustom value can be returned by setting `event.returnValue`.\n\n### Event: 'remote-get-current-web-contents'\n\nReturns:\n\n* `event` Event\n\nEmitted when `remote.getCurrentWebContents()` is called in the renderer process of `webContents`.\nCalling `event.preventDefault()` will prevent the object from being returned.\nCustom value can be returned by setting `event.returnValue`.\n\n[rmi]: https://en.wikipedia.org/wiki/Java_remote_method_invocation\n[enumerable-properties]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\n[remote-considered-harmful]: https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31",
    "description": "`@electron/remote` is an [Electron](https://electronjs.org) module that bridges JavaScript objects from the main process to the renderer process. This lets you access main-process-only objects as if they were available in the renderer process.",
    "licenseText": "Copyright (c) 2019-2022 Electron contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@electron/remote/-/remote-2.0.9.tgz#092ff085407bc907f45b89a72c36faa773ccf2d9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@electron/remote/-/remote-2.0.9.tgz",
    "hash": "092ff085407bc907f45b89a72c36faa773ccf2d9",
    "integrity": "sha512-LR0W0ID6WAKHaSs0x5LX9aiG+5pFBNAJL6eQAJfGkCuZPUa6nZz+czZLdlTDETG45CgF/0raSvCtYOYUpr6c+A==",
    "registry": "npm",
    "packageName": "@electron/remote",
    "cacheIntegrity": "sha512-LR0W0ID6WAKHaSs0x5LX9aiG+5pFBNAJL6eQAJfGkCuZPUa6nZz+czZLdlTDETG45CgF/0raSvCtYOYUpr6c+A== sha1-CS/whUB7yQf0W4mnLDb6p3PM8tk="
  },
  "registry": "npm",
  "hash": "092ff085407bc907f45b89a72c36faa773ccf2d9"
}