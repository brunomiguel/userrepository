{
  "manifest": {
    "name": "url-parse",
    "version": "1.4.7",
    "description": "Small footprint URL parser that works seamlessly across Node.js and browser environments",
    "main": "index.js",
    "scripts": {
      "browserify": "rm -rf dist && mkdir -p dist && browserify index.js -s URLParse -o dist/url-parse.js",
      "minify": "uglifyjs dist/url-parse.js --source-map -cm -o dist/url-parse.min.js",
      "test": "nyc --reporter=html --reporter=text mocha test/test.js",
      "test-browser": "node test/browser.js",
      "prepublishOnly": "npm run browserify && npm run minify",
      "watch": "mocha --watch test/test.js"
    },
    "files": [
      "index.js",
      "dist"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/unshiftio/url-parse.git"
    },
    "keywords": [
      "URL",
      "parser",
      "uri",
      "url",
      "parse",
      "query",
      "string",
      "querystring",
      "stringify"
    ],
    "author": {
      "name": "Arnout Kazemier"
    },
    "license": "MIT",
    "dependencies": {
      "querystringify": "^2.1.1",
      "requires-port": "^1.0.0"
    },
    "devDependencies": {
      "assume": "^2.2.0",
      "browserify": "^16.2.3",
      "mocha": "^6.1.4",
      "nyc": "^14.0.0",
      "pre-commit": "^1.2.2",
      "sauce-browsers": "^2.0.0",
      "sauce-test": "^1.3.3",
      "uglify-js": "^3.5.7"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-url-parse-1.4.7-a8a83535e8c00a316e403a5db4ac1b9b853ae278-integrity/node_modules/url-parse/package.json",
    "readmeFilename": "README.md",
    "readme": "# url-parse\n\n[![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](https://img.shields.io/npm/v/url-parse.svg?style=flat-square)](https://www.npmjs.com/package/url-parse)[![Build Status](https://img.shields.io/travis/unshiftio/url-parse/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/url-parse)[![Dependencies](https://img.shields.io/david/unshiftio/url-parse.svg?style=flat-square)](https://david-dm.org/unshiftio/url-parse)[![Coverage Status](https://img.shields.io/coveralls/unshiftio/url-parse/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/url-parse?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=unshift)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/url-parse.svg)](https://saucelabs.com/u/url-parse)\n\nThe `url-parse` method exposes two different API interfaces. The\n[`url`](https://nodejs.org/api/url.html) interface that you know from Node.js\nand the new [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL)\ninterface that is available in the latest browsers.\n\nIn version `0.1` we moved from a DOM based parsing solution, using the `<a>`\nelement, to a full Regular Expression solution. The main reason for this was\nto make the URL parser available in different JavaScript environments as you\ndon't always have access to the DOM. An example of such environment is the\n[`Worker`](https://developer.mozilla.org/en/docs/Web/API/Worker) interface.\nThe RegExp based solution didn't work well as it required a lot of lookups\ncausing major problems in FireFox. In version `1.0.0` we ditched the RegExp\nbased solution in favor of a pure string parsing solution which chops up the\nURL into smaller pieces. This module still has a really small footprint as it\nhas been designed to be used on the client side.\n\nIn addition to URL parsing we also expose the bundled `querystringify` module.\n\n## Installation\n\nThis module is designed to be used using either browserify or Node.js it's\nreleased in the public npm registry and can be installed using:\n\n```\nnpm install url-parse\n```\n\n## Usage\n\nAll examples assume that this library is bootstrapped using:\n\n```js\n'use strict';\n\nvar Url = require('url-parse');\n```\n\nTo parse an URL simply call the `URL` method with the URL that needs to be\ntransformed into an object.\n\n```js\nvar url = new Url('https://github.com/foo/bar');\n```\n\nThe `new` keyword is optional but it will save you an extra function invocation.\nThe constructor takes the following arguments:\n\n- `url` (`String`): A string representing an absolute or relative URL.\n- `baseURL` (`Object` | `String`): An object or string representing\n  the base URL to use in case `url` is a relative URL. This argument is\n  optional and defaults to [`location`](https://developer.mozilla.org/en-US/docs/Web/API/Location)\n  in the browser.\n- `parser` (`Boolean` | `Function`): This argument is optional and specifies\n  how to parse the query string. By default it is `false` so the query string\n  is not parsed. If you pass `true` the query string is parsed using the\n  embedded `querystringify` module. If you pass a function the query string\n  will be parsed using this function.\n\nAs said above we also support the Node.js interface so you can also use the\nlibrary in this way:\n\n```js\n'use strict';\n\nvar parse = require('url-parse')\n  , url = parse('https://github.com/foo/bar', true);\n```\n\nThe returned `url` instance contains the following properties:\n\n- `protocol`: The protocol scheme of the URL (e.g. `http:`).\n- `slashes`: A boolean which indicates whether the `protocol` is followed by two\n  forward slashes (`//`).\n- `auth`: Authentication information portion (e.g. `username:password`).\n- `username`: Username of basic authentication.\n- `password`: Password of basic authentication.\n- `host`: Host name with port number.\n- `hostname`: Host name without port number.\n- `port`: Optional port number.\n- `pathname`: URL path.\n- `query`: Parsed object containing query string, unless parsing is set to false.\n- `hash`: The \"fragment\" portion of the URL including the pound-sign (`#`).\n- `href`: The full URL.\n- `origin`: The origin of the URL.\n\nNote that when `url-parse` is used in a browser environment, it will default to\nusing the browser's current window location as the base URL when parsing all\ninputs. To parse an input independently of the browser's current URL (e.g. for\nfunctionality parity with the library in a Node environment), pass an empty\nlocation object as the second parameter:\n\n```js\nvar parse = require('url-parse');\nparse('hostname', {});\n```\n\n### Url.set(key, value)\n\nA simple helper function to change parts of the URL and propagating it through\nall properties. When you set a new `host` you want the same value to be applied\nto `port` if has a different port number, `hostname` so it has a correct name\nagain and `href` so you have a complete URL.\n\n```js\nvar parsed = parse('http://google.com/parse-things');\n\nparsed.set('hostname', 'yahoo.com');\nconsole.log(parsed.href); // http://yahoo.com/parse-things\n```\n\nIt's aware of default ports so you cannot set a port 80 on an URL which has\n`http` as protocol.\n\n### Url.toString()\n\nThe returned `url` object comes with a custom `toString` method which will\ngenerate a full URL again when called. The method accepts an extra function\nwhich will stringify the query string for you. If you don't supply a function we\nwill use our default method.\n\n```js\nvar location = url.toString(); // http://example.com/whatever/?qs=32\n```\n\nYou would rarely need to use this method as the full URL is also available as\n`href` property. If you are using the `URL.set` method to make changes, this\nwill automatically update.\n\n## Testing\n\nThe testing of this module is done in 3 different ways:\n\n1. We have unit tests that run under Node.js. You can run these tests with the\n  `npm test` command.\n2. Code coverage can be run manually using `npm run coverage`.\n3. For browser testing we use Sauce Labs and `zuul`. You can run browser tests\n  using the `npm run test-browser` command.\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Unshift.io, Arnout Kazemier,  the Contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/url-parse/-/url-parse-1.4.7.tgz#a8a83535e8c00a316e403a5db4ac1b9b853ae278",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/url-parse/-/url-parse-1.4.7.tgz",
    "hash": "a8a83535e8c00a316e403a5db4ac1b9b853ae278",
    "integrity": "sha512-d3uaVyzDB9tQoSXFvuSUNFibTd9zxd2bkVrDRvF5TmvWWQwqE4lgYJ5m+x1DbecWkw+LK4RNl2CU1hHuOKPVlg==",
    "registry": "npm",
    "packageName": "url-parse",
    "cacheIntegrity": "sha512-d3uaVyzDB9tQoSXFvuSUNFibTd9zxd2bkVrDRvF5TmvWWQwqE4lgYJ5m+x1DbecWkw+LK4RNl2CU1hHuOKPVlg== sha1-qKg1NejACjFuQDpdtKwbm4U64ng="
  },
  "registry": "npm",
  "hash": "a8a83535e8c00a316e403a5db4ac1b9b853ae278"
}