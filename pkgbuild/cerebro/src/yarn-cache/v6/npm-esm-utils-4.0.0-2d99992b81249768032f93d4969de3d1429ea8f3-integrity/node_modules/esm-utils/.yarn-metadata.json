{
  "manifest": {
    "name": "esm-utils",
    "version": "4.0.0",
    "description": "Utilities you'll need when migrating to ESModule.",
    "homepage": "https://github.com/fisker/esm-utils#readme",
    "bugs": {
      "url": "https://github.com/fisker/esm-utils/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/fisker/esm-utils.git"
    },
    "funding": "https://github.com/fisker/esm-utils?sponsor=1",
    "license": "MIT",
    "author": {
      "name": "fisker Cheung",
      "email": "lionkay@gmail.com",
      "url": "https://www.fiskercheung.com/"
    },
    "sideEffects": false,
    "type": "module",
    "exports": "./index.js",
    "typings": "./index.d.ts",
    "files": [
      "index.js",
      "lib",
      "index.d.ts"
    ],
    "scripts": {
      "build": "run-p \"build:*\"",
      "build:js": "echo no need",
      "clean": "run-p \"clean:*\"",
      "clean:dist": "del-cli dist",
      "dist": "run-p \"dist:*\"",
      "dist:npm": "np --yolo --no-yarn",
      "format": "run-p \"format:*\"",
      "format:eslint": "yarn lint:eslint --fix",
      "format:markdown": "markdownlint-cli2-fix",
      "format:package-json": "sort-package-json \"package.json\" \"packages/*/package.json\"",
      "format:prettier": "yarn lint:prettier --write",
      "lint": "run-p \"lint:*\"",
      "lint:eslint": "eslint \"**/*.{js,jsx,mjs,cjs,vue}\"",
      "lint:markdown": "markdownlint-cli2",
      "lint:package-json": "yarn run format:package-json --check",
      "lint:prettier": "prettier . --check",
      "prepare": "husky install",
      "release": "run-s lint build format test dist",
      "test": "ava",
      "test-coverage": "c8 yarn test"
    },
    "ava": {
      "files": [
        "!test/fixture.js"
      ],
      "verbose": true
    },
    "c8": {
      "reporter": [
        "lcov",
        "text"
      ]
    },
    "dependencies": {
      "import-meta-resolve": "1.1.1",
      "url-or-path": "2.1.0"
    },
    "devDependencies": {
      "@fisker/eslint-config": "10.1.4",
      "@fisker/eslint-config-ava": "2.0.5",
      "@fisker/husky-config": "4.1.2",
      "@fisker/lint-staged-config": "3.1.5",
      "@fisker/markdownlint-cli2-config": "0.0.3",
      "@fisker/prettier-config": "5.0.6",
      "ava": "4.2.0",
      "c8": "7.11.2",
      "cz-conventional-changelog": "3.3.0",
      "del-cli": "4.0.1",
      "eslint": "8.14.0",
      "husky": "7.0.4",
      "lint-staged": "12.4.1",
      "markdownlint-cli2": "0.4.0",
      "npm-run-all": "4.1.5",
      "prettier": "2.6.2",
      "sort-package-json": "1.57.0"
    },
    "packageManager": "yarn@3.2.0",
    "publishConfig": {
      "access": "public",
      "registry": "https://registry.npmjs.org/"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-esm-utils-4.0.0-2d99992b81249768032f93d4969de3d1429ea8f3-integrity/node_modules/esm-utils/package.json",
    "readmeFilename": "readme.md",
    "readme": "# esm-utils\n\n[![Build Status][github_actions_badge]][github_actions_link]\n[![Coverage][coveralls_badge]][coveralls_link]\n[![Npm Version][package_version_badge]][package_link]\n[![MIT License][license_badge]][license_link]\n\n[github_actions_badge]: https://img.shields.io/github/workflow/status/fisker/esm-utils/CI/main?style=flat-square\n[github_actions_link]: https://github.com/fisker/esm-utils/actions?query=branch%3Amain\n[coveralls_badge]: https://img.shields.io/coveralls/github/fisker/esm-utils/main?style=flat-square\n[coveralls_link]: https://coveralls.io/github/fisker/esm-utils?branch=main\n[license_badge]: https://img.shields.io/npm/l/esm-utils.svg?style=flat-square\n[license_link]: https://github.com/fisker/esm-utils/blob/main/license\n[package_version_badge]: https://img.shields.io/npm/v/esm-utils.svg?style=flat-square\n[package_link]: https://www.npmjs.com/package/esm-utils\n\n> Utilities you'll need when migrating to ESModule.\n\n## Install\n\n```bash\nyarn add esm-utils\n```\n\n## Usage\n\n<!-- prettier-ignore -->\n```js\nimport createEsmUtils from 'esm-utils'\n\nconst {\n  dirname,\n  filename,\n  require,\n  importModule,\n  resolve,\n  readJson,\n  readJsonSync,\n} = createEsmUtils(import.meta)\n```\n\n```js\n/* Those named exports only accept absolute path or URL */\nimport {\n  importModule,\n  readJson,\n  loadJson,\n  readJsonSync,\n  loadJsonSync,\n} from 'esm-utils'\n```\n\n## API\n\n### `createEsmUtils(import.meta | URL | 'string')`\n\nReturns an `object` with the following properties:\n\n- `dirname` (alias `__dirname`)\n- `filename` (alias `__filename`)\n- `require`\n- `importModule` (alias `import`)\n- `resolve`\n- `readJson` (alias `loadJson`)\n- `readJsonSync` (alias `loadJsonSync`)\n\n**Please read [this note](#you-dont-need-dirname-and-filename) before you use `dirname` and `filename`**\n\nSync version of `readJson`.\n\n### `utils.importModule(string | URL, options?)`\n\nSame as `import()`, but accepts absolute path (on Windows, `import('C:\\\\foo.js')` error throws when pass a absolute path starts with a drive letter).\n\n#### `options.traceSyntaxError`\n\ntype: `boolean`\\\ndefault: `false`\n\nDue to [this Node.js issue](https://github.com/nodejs/modules/issues/471), Node.js does not emit the location of the syntax error in the error thrown in dynamic `import()`.\n\nWhen set `traceSyntaxError: true`, we'll try to get a better error message by running `node <file>` in a child process.\n\n### `utils.readJson(string | URL)`\n\nReturns `Promise<jsonObject>`.\n\n### `utils.readJsonSync(string | URL)`\n\nSync version of `utils.readJson`\n\n### `utils.resolve(string | URL)`\n\nPonyfill for [`import.meta.resolve`](https://nodejs.org/api/esm.html#esm_import_meta_resolve_specifier_parent).\n\nIf `import.meta.resolve` exits, use it directly, otherwise returns a simple wrapper of [import-meta-resolve](https://github.com/wooorm/import-meta-resolve).\n\n## Import json file\n\nWith [`Import Assertions`](https://github.com/tc39/proposal-import-assertions)\n\n```js\nimport foo from './foo.json' assert {type: 'json'}\n```\n\n```json\nawait import('./foo.json', {assert: {type: 'json'}})\n```\n\nWith `require`, like CommonJS\n\n```js\nimport createEsmUtils from 'esm-utils'\n\nconst {require} = createEsmUtils(import.meta)\nconst foo = require('./foo.json')\n```\n\nWith `readJson` or `readJsonSync`\n\n```js\nimport createEsmUtils from 'esm-utils'\n\nconst {readJson} = createEsmUtils(import.meta)\nconst foo = await readJson('./foo.json')\n```\n\n```js\nimport createEsmUtils from 'esm-utils'\n\nconst {readJsonSync} = createEsmUtils(import.meta)\nconst foo = readJsonSync('./foo.json')\n```\n\n## `importModule()`\n\nSame as `utils.importModule()`, but only accept absolute path or URL.\n\n## `readJson()` (alias `loadJson`)\n\nSame as `utils.readJson()`, but only accept absolute path or URL.\n\n## `readJsonSync()` (alias `loadJsonSync`)\n\nSame as `utils.readJsonSync()`, but only accept absolute path or URL.\n\n## You don't need `dirname` and `filename`\n\nThe `dirname` and `filename` supposed to be a quick solution when migrating to ES Modules. In most cases, you don't need them, because many APIs accept `URL` directly.\n\n<!-- prettier-ignore -->\n```js\n/* BAD */\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\nimport createEsmUtils from 'esm-utils'\n\nconst {dirname} = createEsmUtils(import.meta)\nconst buffer = await fs.readFile(\n  path.join(dirname, './path/to/file')\n)\n```\n\n<!-- prettier-ignore -->\n```js\n/* GOOD */\nimport fs from 'node:fs/promises'\n\nconst buffer = await fs.readFile(\n  new URL('./path/to/file', import.meta.url)\n)\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) fisker Cheung <lionkay@gmail.com> (https://www.fiskercheung.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/esm-utils/-/esm-utils-4.0.0.tgz#2d99992b81249768032f93d4969de3d1429ea8f3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/esm-utils/-/esm-utils-4.0.0.tgz",
    "hash": "2d99992b81249768032f93d4969de3d1429ea8f3",
    "integrity": "sha512-1x5H25/8BQWV94T8+KRb1gcSdVQ3g+8P0NikggAujVaurUa0cOoR+UO8ie3y29iQO70HjNA93c9ie+qqI/8zzw==",
    "registry": "npm",
    "packageName": "esm-utils",
    "cacheIntegrity": "sha512-1x5H25/8BQWV94T8+KRb1gcSdVQ3g+8P0NikggAujVaurUa0cOoR+UO8ie3y29iQO70HjNA93c9ie+qqI/8zzw== sha1-LZmZK4Ekl2gDL5PUlp3j0UKeqPM="
  },
  "registry": "npm",
  "hash": "2d99992b81249768032f93d4969de3d1429ea8f3"
}