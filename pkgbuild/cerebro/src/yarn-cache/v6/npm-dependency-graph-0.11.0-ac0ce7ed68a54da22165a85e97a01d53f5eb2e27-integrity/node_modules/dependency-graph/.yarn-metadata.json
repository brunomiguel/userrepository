{
  "manifest": {
    "name": "dependency-graph",
    "description": "Simple dependency graph.",
    "version": "0.11.0",
    "author": {
      "name": "Jim Riecken",
      "email": "jriecken@gmail.com"
    },
    "keywords": [
      "dependency",
      "graph"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/jriecken/dependency-graph.git"
    },
    "bugs": {
      "url": "http://github.com/jriecken/dependency-graph/issues"
    },
    "main": "./lib/dep_graph.js",
    "scripts": {
      "test": "jasmine specs/**/*.js"
    },
    "dependencies": {},
    "optionalDependencies": {},
    "devDependencies": {
      "jasmine": "3.5.0"
    },
    "engines": {
      "node": ">= 0.6.0"
    },
    "types": "./lib/index.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dependency-graph-0.11.0-ac0ce7ed68a54da22165a85e97a01d53f5eb2e27-integrity/node_modules/dependency-graph/package.json",
    "readmeFilename": "README.md",
    "readme": "# Dependency Graph\n\nSimple dependency graph\n\n## Overview\n\nThis is a simple dependency graph useful for determining the order to do a list of things that depend on certain items being done before they are.\n\nTo use, `npm install dependency-graph` and then `require('dependency-graph').DepGraph`\n\n## API\n\n### DepGraph\n\nNodes in the graph are just simple strings with optional data associated with them.\n\n - `addNode(name, data)` - add a node in the graph with optional data. If `data` is not given, `name` will be used as data\n - `removeNode(name)` - remove a node from the graph\n - `hasNode(name)` - check if a node exists in the graph\n - `size()` - return the number of nodes in the graph\n - `getNodeData(name)` - get the data associated with a node (will throw an `Error` if the node does not exist)\n - `setNodeData(name, data)` - set the data for an existing node (will throw an `Error` if the node does not exist)\n - `addDependency(from, to)` - add a dependency between two nodes (will throw an `Error` if one of the nodes does not exist)\n - `removeDependency(from, to)` - remove a dependency between two nodes\n - `clone()` - return a clone of the graph. Any data attached to the nodes will only be *shallow-copied*\n - `dependenciesOf(name, leavesOnly)` - get an array containing the nodes that the specified node depends on (transitively). If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned in the array.\n - `dependantsOf(name, leavesOnly)` (aliased as `dependentsOf`) - get an array containing the nodes that depend on the specified node (transitively). If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n - `directDependenciesOf(name)` - get an array containing the direct dependencies of the specified node\n - `directDependantsOf(name)` (aliased as `directDependentsOf`) - get an array containing the nodes that directly depend on the specified node\n - `overallOrder(leavesOnly)` - construct the overall processing order for the dependency graph. If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n - `entryNodes()` - array of nodes that have no dependants (i.e. nothing depends on them).\n\nDependency Cycles are detected when running `dependenciesOf`, `dependantsOf`, and `overallOrder` and if one is found, a `DepGraphCycleError` will be thrown that includes what the cycle was in the message as well as the `cyclePath` property: e.g. `Dependency Cycle Found: a -> b -> c -> a`. If you wish to silence this error, pass `circular: true` when instantiating `DepGraph` (more below).\n\n## Examples\n\n    var DepGraph = require('dependency-graph').DepGraph;\n\n    var graph = new DepGraph();\n    graph.addNode('a');\n    graph.addNode('b');\n    graph.addNode('c');\n\n    graph.size() // 3\n\n    graph.addDependency('a', 'b');\n    graph.addDependency('b', 'c');\n\n    graph.dependenciesOf('a'); // ['c', 'b']\n    graph.dependenciesOf('b'); // ['c']\n    graph.dependantsOf('c'); // ['a', 'b']\n\n    graph.overallOrder(); // ['c', 'b', 'a']\n    graph.overallOrder(true); // ['c']\n    graph.entryNodes(); // ['a']\n\n    graph.addNode('d', 'data');\n\n    graph.getNodeData('d'); // 'data'\n\n    graph.setNodeData('d', 'newData');\n\n    graph.getNodeData('d'); // 'newData'\n\n    var circularGraph = new DepGraph({ circular: true });\n\n    circularGraph.addNode('a');\n    circularGraph.addNode('b');\n    circularGraph.addNode('c');\n    circularGraph.addNode('d');\n\n    circularGraph.addDependency('a', 'b');\n    circularGraph.addDependency('b', 'c'); // b depends on c\n    circularGraph.addDependency('c', 'a'); // c depends on a, which depends on b\n    circularGraph.addDependency('d', 'a');\n\n    circularGraph.dependenciesOf('b'); // ['a', 'c']\n    circularGraph.overallOrder(); // ['c', 'b', 'a', 'd']\n",
    "licenseText": "Copyright (C) 2013-2020 by Jim Riecken\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dependency-graph/-/dependency-graph-0.11.0.tgz#ac0ce7ed68a54da22165a85e97a01d53f5eb2e27",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dependency-graph/-/dependency-graph-0.11.0.tgz",
    "hash": "ac0ce7ed68a54da22165a85e97a01d53f5eb2e27",
    "integrity": "sha512-JeMq7fEshyepOWDfcfHK06N3MhyPhz++vtqWhMT5O9A3K42rdsEDpfdVqjaqaAhsw6a+ZqeDvQVtD0hFHQWrzg==",
    "registry": "npm",
    "packageName": "dependency-graph",
    "cacheIntegrity": "sha512-JeMq7fEshyepOWDfcfHK06N3MhyPhz++vtqWhMT5O9A3K42rdsEDpfdVqjaqaAhsw6a+ZqeDvQVtD0hFHQWrzg== sha1-rAzn7WilTaIhZahel6AdU/XrLic="
  },
  "registry": "npm",
  "hash": "ac0ce7ed68a54da22165a85e97a01d53f5eb2e27"
}