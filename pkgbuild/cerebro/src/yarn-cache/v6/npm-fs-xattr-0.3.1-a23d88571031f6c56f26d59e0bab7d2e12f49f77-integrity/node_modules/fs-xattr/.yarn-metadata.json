{
  "manifest": {
    "name": "fs-xattr",
    "version": "0.3.1",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/LinusU/fs-xattr.git"
    },
    "files": [
      "binding.gyp",
      "index.d.ts",
      "index.js",
      "src/"
    ],
    "scripts": {
      "test": "standard && mocha && ts-readme-generator --check",
      "lint": "standard",
      "install": "node-gyp rebuild"
    },
    "devDependencies": {
      "fs-temp": "^1.1.2",
      "mocha": "^6.2.2",
      "standard": "^14.3.1",
      "ts-readme-generator": "^0.4.3"
    },
    "engines": {
      "node": ">=8.6.0"
    },
    "os": [
      "!win32"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-fs-xattr-0.3.1-a23d88571031f6c56f26d59e0bab7d2e12f49f77-integrity/node_modules/fs-xattr/package.json",
    "readmeFilename": "readme.md",
    "readme": "# fs-xattr\n\nNode.js module for manipulating extended attributes.\n\nThere are already some libraries for this, why use `fs-xattr`?\n\n- Very useful errors\n- No limits on value size\n- Clean and easy api\n- Proper asynchronous implementation\n\n## Installation\n\n```sh\nnpm install --save fs-xattr\n```\n\n## Usage\n\n```javascript\nconst xattr = require('fs-xattr')\n\nawait xattr.set('index.js', 'com.linusu.test', 'Hello, World!')\n\nconsole.log(await xattr.get('index.js', 'com.linusu.test'))\n//=> Hello, World!\n```\n\n## API\n\n### `get(path, attr)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n- returns `Promise<Buffer>` - a `Promise` that will resolve with the value of the attribute.\n\nGet extended attribute `attr` from file at `path`.\n\n### `getSync(path, attr)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n- returns `Buffer`\n\nSynchronous version of `get`.\n\n### `set(path, attr, value)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n- `value` (`Buffer` or `string`, required)\n- returns `Promise<void>` - a `Promise` that will resolve when the value has been set.\n\nSet extended attribute `attr` to `value` on file at `path`.\n\n### `setSync(path, attr, value)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n- `value` (`Buffer` or `string`, required)\n\nSynchronous version of `set`.\n\n### `remove(path, attr)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n- returns `Promise<void>` - a `Promise` that will resolve when the value has been removed.\n\nRemove extended attribute `attr` on file at `path`.\n\n### `removeSync(path, attr)`\n\n- `path` (`string`, required)\n- `attr` (`string`, required)\n\nSynchronous version of `remove`.\n\n### `list(path)`\n\n- `path` (`string`, required)\n- returns `Promise<Array<string>>` - a `Promise` that will resolve with an array of strings, e.g. `['com.linusu.test', 'com.apple.FinderInfo']`.\n\nList all attributes on file at `path`.\n\n### `listSync(path)`\n\n- `path` (`string`, required)\n- returns `Array<string>`\n\nSynchronous version of `list`.\n",
    "description": "Node.js module for manipulating extended attributes.",
    "licenseText": "MIT License\n\nCopyright (c) 2013-2020 Linus Unneb√§ck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fs-xattr/-/fs-xattr-0.3.1.tgz#a23d88571031f6c56f26d59e0bab7d2e12f49f77",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fs-xattr/-/fs-xattr-0.3.1.tgz",
    "hash": "a23d88571031f6c56f26d59e0bab7d2e12f49f77",
    "integrity": "sha512-UVqkrEW0GfDabw4C3HOrFlxKfx0eeigfRne69FxSBdHIP8Qt5Sq6Pu3RM9KmMlkygtC4pPKkj5CiPO5USnj2GA==",
    "registry": "npm",
    "packageName": "fs-xattr",
    "cacheIntegrity": "sha512-UVqkrEW0GfDabw4C3HOrFlxKfx0eeigfRne69FxSBdHIP8Qt5Sq6Pu3RM9KmMlkygtC4pPKkj5CiPO5USnj2GA== sha1-oj2IVxAx9sVvJtWeC6t9LhL0n3c="
  },
  "registry": "npm",
  "hash": "a23d88571031f6c56f26d59e0bab7d2e12f49f77"
}