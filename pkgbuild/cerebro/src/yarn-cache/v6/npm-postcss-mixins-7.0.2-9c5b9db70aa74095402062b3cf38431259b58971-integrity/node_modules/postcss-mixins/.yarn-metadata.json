{
  "manifest": {
    "name": "postcss-mixins",
    "version": "7.0.2",
    "description": "PostCSS plugin for mixins",
    "keywords": [
      "postcss",
      "css",
      "postcss-plugin",
      "mixins",
      "sass"
    ],
    "author": {
      "name": "Andrey Sitnik",
      "email": "andrey@sitnik.ru"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-mixins.git"
    },
    "engines": {
      "node": ">=10.0"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    "peerDependencies": {
      "postcss": "^8.2.0"
    },
    "dependencies": {
      "globby": "^11.0.1",
      "postcss-js": "^3.0.3",
      "postcss-simple-vars": "^6.0.1",
      "sugarss": "^3.0.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-mixins-7.0.2-9c5b9db70aa74095402062b3cf38431259b58971-integrity/node_modules/postcss-mixins/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Mixins\n\n<img align=\"right\" width=\"135\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"https://postcss.org/logo-leftp.svg\">\n\n[PostCSS] plugin for mixins.\n\nNote, that you must set this plugin before [postcss-simple-vars]\nand [postcss-nested].\n\n```css\n@define-mixin icon $network, $color: blue {\n    .icon.is-$(network) {\n        color: $color;\n        @mixin-content;\n    }\n    .icon.is-$(network):hover {\n        color: white;\n        background: $color;\n    }\n}\n\n@mixin icon twitter {\n    background: url(twt.png);\n}\n@mixin icon youtube, red {\n    background: url(youtube.png);\n}\n```\n\n```css\n.icon.is-twitter {\n    color: blue;\n    background: url(twt.png);\n}\n.icon.is-twitter:hover {\n    color: white;\n    background: blue;\n}\n.icon.is-youtube {\n    color: red;\n    background: url(youtube.png);\n}\n.icon.is-youtube:hover {\n    color: white;\n    background: red;\n}\n```\n\n[postcss-utilities] collection is better for `clearfix` and other popular hacks.\nFor simple cases you can use [postcss-define-property].\n\n[postcss-define-property]: https://github.com/daleeidd/postcss-define-property\n[postcss-utilities]:       https://github.com/ismamz/postcss-utilities\n[postcss-simple-vars]:     https://github.com/postcss/postcss-simple-vars\n[postcss-nested]:          https://github.com/postcss/postcss-nested\n[PostCSS]:                 https://github.com/postcss/postcss\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-mixins\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n\n## Usage\n\n**Step 1:** Install plugin:\n\n```sh\nnpm install --save-dev postcss postcss-mixins\n```\n\n**Step 2:** Check you project for existed PostCSS config: `postcss.config.js`\nin the project root, `\"postcss\"` section in `package.json`\nor `postcss` in bundle config.\n\nIf you do not use PostCSS, add it according to [official docs]\nand set this plugin in settings.\n\n**Step 3:** Add the plugin to plugins list:\n\n```diff\nmodule.exports = {\n  plugins: [\n+   require('postcss-mixins'),\n    require('autoprefixer')\n  ]\n}\n```\n\n\n### CSS Mixin\n\nSimple template defined directly in CSS to prevent repeating yourself.\n\nSee [postcss-simple-vars] docs for arguments syntax.\n\nYou can use it with [postcss-nested] plugin:\n\n```css\n@define-mixin icon $name {\n    padding-left: 16px;\n    &::after {\n        content: \"\";\n        background: url(/icons/$(name).png);\n    }\n}\n\n.search {\n    @mixin icon search;\n}\n```\n\nUnlike Sass, PostCSS has no `if` or `while` statements. If you need some\ncomplicated logic, you should use function mixin.\n\n[postcss-nested]:      https://github.com/postcss/postcss-nested\n[postcss-simple-vars]: https://github.com/postcss/postcss-simple-vars\n\n\n### Function Mixin\n\nThis type of mixin gives you full power of JavaScript.\nYou can define this mixins in `mixins` option.\n\nThis type is ideal for CSS hacks or business logic.\n\nAlso you should use function mixin if you need to change property names\nin mixin, because [postcss-simple-vars] doesn’t support variables\nin properties yet.\n\nFirst argument will be `@mixin` node, that called this mixin.\nYou can insert your declarations or rule before or after this node.\nOther arguments will be taken from at-rule parameters.\n\nSee [PostCSS API] about nodes API.\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        icons: function (mixin, dir) {\n            fs.readdirSync('/images/' + dir).forEach(function (file) {\n                var icon = file.replace(/\\.svg$/, '');\n                var rule = postcss.rule({ selector: '.icon.icon-' + icon });\n                rule.append({\n                    prop:  'background',\n                    value: 'url(' + dir + '/' + file + ')'\n                });\n                mixin.replaceWith(rule);\n            });\n        }\n    }\n});\n```\n\n```css\n@mixin icons signin;\n```\n\n```css\n.icon.icon-back { background: url(signin/back.svg) }\n.icon.icon-secret { background: url(signin/secret.svg) }\n```\n\nYou can also return an object if you don’t want to create each node manually:\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        image: function (mixin, path) {\n            return {\n                '&': {\n                    background: 'url(' + path + ')'\n                },\n                '@media (min-resolution: 120dpi)': {\n                    '&': {\n                        background: 'url(' + path + '@2x)'\n                    }\n                }\n            }\n        }\n    }\n});\n```\n\nMixin body will be in `mixin.nodes`:\n\n```js\nvar postcss = require('postcss');\n\nrequire('postcss-mixins')({\n    mixins: {\n        hover: function (mixin) {\n            let rule = postcss.rule({ selector: '&:hover, &.hover' });\n            rule.append(mixin.nodes);\n            mixin.replaceWith(rule);\n        }\n    }\n});\n```\n\nOr you can use object instead of function:\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        clearfix: {\n            '&::after': {\n                content: '\"\"',\n                display: 'table',\n                clear: 'both'\n            }\n        }\n    }\n});\n```\n\n### Mixin Content\n\n`@mixin-context` at-rule will be replaced with mixin `@mixin` children.\nFor exampel, CSS mixins:\n\n```SCSS\n@define-mixin isIE {\n    .isIE & {\n        @mixin-content;\n    }\n}\n```\n\nor JS mixins:\n\n```js\nrequire('postcss-mixins')({\n    mixins: {\n        isIe: function () {\n            '@mixin-content': {},\n        }\n    }\n});\n```\n\ncould be used like this:\n\n```scss\n.foo {\n    color: blue;\n\n    @mixin isIE {\n        color: red;\n    }\n}\n\n// output\n.foo { color: blue; }\n.isIE .foo { color: red; }\n```\n\n\n### Migration from Sass\n\nIf you need to use Sass and PostCSS mixins together\n(for example, while migration), you could use `@add-mixin`,\ninstead of `@mixin`. Just put PostCSS after Sass.\n\n```sass\n// Legacy SCSS\n@mixin old {\n    …\n}\n@include old;\n\n// New code\n@define-mixin new {\n    …\n}\n@add-mixin new;\n```\n\n## Options\n\nCall plugin function to set options:\n\n```js\npostcss([ require('postcss-mixins')({ mixins: { … } }) ])\n```\n\n### `mixins`\n\nType: `Object`\n\nObject of function mixins.\n\n### `mixinsDir`\n\nType: `string|string[]`\n\nAutoload all mixins from one or more dirs. Mixin name will be taken from file\nname.\n\n```js\n// gulpfile.js\n\nrequire('postcss-mixins')({\n    mixinsDir: path.join(__dirname, 'mixins')\n})\n\n// mixins/clearfix.js\n\nmodule.exports = {\n    '&::after': {\n        content: '\"\"',\n        display: 'table',\n        clear: 'both'\n    }\n}\n\n// mixins/size.pcss\n\n@define-mixin size $size {\n    width: $size;\n    height: $size;\n}\n\n// mixins/circle.sss\n\n@define-mixin circle $size\n  border-radius: 50%\n  width: $size\n  height: $size\n```\n\n### `mixinsFiles`\n\nType: `string|string[]`\n\nSimilar to [`mixinsDir`](#mixinsdir); except, you can provide\n[fast-glob](https://github.com/mrmlnc/fast-glob) syntax to target or not target\nspecific files.\n\n```js\nrequire('postcss-mixins')({\n    mixinsFiles: path.join(__dirname, 'mixins', '!(*.spec.js)')\n})\n```\n\n### `silent`\n\nRemove unknown mixins and do not throw a error. Default is `false`.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2015 Andrey Sitnik <andrey@sitnik.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-mixins/-/postcss-mixins-7.0.2.tgz#9c5b9db70aa74095402062b3cf38431259b58971",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-mixins/-/postcss-mixins-7.0.2.tgz",
    "hash": "9c5b9db70aa74095402062b3cf38431259b58971",
    "integrity": "sha512-er22AZ/2C1P+jZOL4ZExVEz0XuPWJWWy7SySbb2HWFmAgXG8F4qaOmMaRTdLfSK1AbgWxRT+KQ8GQ2i5kOn1aw==",
    "registry": "npm",
    "packageName": "postcss-mixins",
    "cacheIntegrity": "sha512-er22AZ/2C1P+jZOL4ZExVEz0XuPWJWWy7SySbb2HWFmAgXG8F4qaOmMaRTdLfSK1AbgWxRT+KQ8GQ2i5kOn1aw== sha1-nFudtwqnQJVAIGKzzzhDElm1iXE="
  },
  "registry": "npm",
  "hash": "9c5b9db70aa74095402062b3cf38431259b58971"
}