{
  "manifest": {
    "name": "array-sort",
    "description": "Fast and powerful array sorting. Sort an array of objects by one or more properties. Any number of nested properties or custom comparison functions may be used.",
    "version": "1.0.0",
    "homepage": "https://github.com/jonschlinkert/array-sort",
    "author": {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    },
    "contributors": [
      {
        "name": "Brian Woodward",
        "url": "https://twitter.com/doowb"
      },
      {
        "name": "Jan Stola",
        "url": "https://github.com/iamstolis"
      },
      {
        "name": "Jon Schlinkert",
        "url": "http://twitter.com/jonschlinkert"
      },
      {
        "name": "Kevin Ward",
        "url": "https://github.com/wkevina"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/jonschlinkert/array-sort.git"
    },
    "bugs": {
      "url": "https://github.com/jonschlinkert/array-sort/issues"
    },
    "license": "MIT",
    "files": [
      "index.js"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "dependencies": {
      "default-compare": "^1.0.0",
      "get-value": "^2.0.6",
      "kind-of": "^5.0.2"
    },
    "devDependencies": {
      "ansi-bold": "^0.1.1",
      "benchmarked": "^0.1.5",
      "glob": "^7.0.3",
      "gulp-format-md": "^0.1.8",
      "lodash.sortbyorder": "^3.4.4",
      "mocha": "^2.4.5",
      "should": "^8.3.1"
    },
    "keywords": [
      "arr",
      "array",
      "asc",
      "ascend",
      "ascending",
      "desc",
      "descend",
      "descending",
      "dot",
      "element",
      "elements",
      "get",
      "multiple",
      "nested",
      "obj",
      "object",
      "order",
      "ordered",
      "path",
      "prop",
      "properties",
      "property",
      "sort",
      "sorted",
      "sorting"
    ],
    "verb": {
      "reflinks": [
        "verb"
      ],
      "related": {
        "list": [
          "get-value",
          "set-value",
          "sort-asc",
          "sort-desc",
          "sort-object"
        ]
      },
      "toc": false,
      "layout": "default",
      "tasks": [
        "readme"
      ],
      "plugins": [
        "gulp-format-md"
      ],
      "lint": {
        "reflinks": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-array-sort-1.0.0-e4c05356453f56f53512a7d1d6123f2c54c0a88a-integrity/node_modules/array-sort/package.json",
    "readmeFilename": "README.md",
    "readme": "# array-sort [![NPM version](https://img.shields.io/npm/v/array-sort.svg?style=flat)](https://www.npmjs.com/package/array-sort) [![NPM monthly downloads](https://img.shields.io/npm/dm/array-sort.svg?style=flat)](https://npmjs.org/package/array-sort)  [![NPM total downloads](https://img.shields.io/npm/dt/array-sort.svg?style=flat)](https://npmjs.org/package/array-sort) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/array-sort.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/array-sort) [![Windows Build Status](https://img.shields.io/appveyor/ci/jonschlinkert/array-sort.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/jonschlinkert/array-sort)\n\n> Fast and powerful array sorting. Sort an array of objects by one or more properties. Any number of nested properties or custom comparison functions may be used.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save array-sort\n```\n\nInstall with [yarn](https://yarnpkg.com):\n\n```sh\n$ yarn add array-sort\n```\n\n## Usage\n\nSort an array by the given object property:\n\n```js\nvar arraySort = require('array-sort');\n\narraySort([{foo: 'y'}, {foo: 'z'}, {foo: 'x'}], 'foo');\n//=> [{foo: 'x'}, {foo: 'y'}, {foo: 'z'}]\n```\n\n**Reverse order**\n\n```js\narraySort([{foo: 'y'}, {foo: 'z'}, {foo: 'x'}], 'foo', {reverse: true});\n//=> [{foo: 'z'}, {foo: 'y'}, {foo: 'x'}]\n```\n\n## Params\n\n```js\narraySort(array, comparisonArgs);\n```\n\n* `array`: **{Array}** The array to sort\n* `comparisonArgs`: **{Function|String|Array}**: One or more functions or object paths to use for sorting.\n\n## Examples\n\n**[Sort blog posts](examples/blog-posts.js)**\n\n```js\nvar arraySort = require('array-sort');\n\nvar posts = [\n  { path: 'c.md', locals: { date: '2014-01-09' } },\n  { path: 'a.md', locals: { date: '2014-01-02' } },\n  { path: 'b.md', locals: { date: '2013-05-06' } },\n];\n\n// sort by `locals.date`\nconsole.log(arraySort(posts, 'locals.date'));\n\n// sort by `path`\nconsole.log(arraySort(posts, 'path'));\n```\n\n**[Sort by multiple properties](examples/multiple-props.js)**\n\n```js\nvar arraySort = require('array-sort');\n\nvar posts = [\n  { locals: { foo: 'bbb', date: '2013-05-06' }},\n  { locals: { foo: 'aaa', date: '2012-01-02' }},\n  { locals: { foo: 'ccc', date: '2014-01-02' }},\n  { locals: { foo: 'ccc', date: '2015-01-02' }},\n  { locals: { foo: 'bbb', date: '2014-06-01' }},\n  { locals: { foo: 'aaa', date: '2014-02-02' }},\n];\n\n// sort by `locals.foo`, then `locals.date`\nvar result = arraySort(posts, ['locals.foo', 'locals.date']);\n\nconsole.log(result);\n// [ { locals: { foo: 'aaa', date: '2012-01-02' } },\n//   { locals: { foo: 'aaa', date: '2014-02-02' } },\n//   { locals: { foo: 'bbb', date: '2013-05-06' } },\n//   { locals: { foo: 'bbb', date: '2014-06-01' } },\n//   { locals: { foo: 'ccc', date: '2014-01-02' } },\n//   { locals: { foo: 'ccc', date: '2015-01-02' } } ]\n```\n\n**[Custom function](examples/custom-function.js)**\n\nIf custom functions are supplied, array elements are sorted according to the return value of the compare function. See the [docs for ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)`Array.sort()` for more details.\n\n```js\nvar arr = [\n  {one: 'w', two: 'b'},\n  {one: 'z', two: 'a'},\n  {one: 'x', two: 'c'},\n  {one: 'y', two: 'd'},\n];\n\nfunction compare(prop) {\n  return function (a, b) {\n    return a[prop].localeCompare(b[prop]);\n  };\n}\n\nvar result = arraySort(arr, function (a, b) {\n  return a.two.localeCompare(b.two);\n});\n\nconsole.log(result);\n// [ { one: 'z', two: 'a' },\n//   { one: 'w', two: 'b' },\n//   { one: 'x', two: 'c' },\n//   { one: 'y', two: 'd' } ]\n```\n\n**[Multiple custom functions](examples/custom-functions.js)**\n\n```js\nvar arr = [\n  {foo: 'w', bar: 'y', baz: 'w'},\n  {foo: 'x', bar: 'y', baz: 'w'},\n  {foo: 'x', bar: 'y', baz: 'z'},\n  {foo: 'x', bar: 'x', baz: 'w'},\n];\n\n// reusable compare function\nfunction compare(prop) {\n  return function (a, b) {\n    return a[prop].localeCompare(b[prop]);\n  };\n}\n\n// the `compare` functions can be a list or array\nvar result = arraySort(arr, compare('foo'), compare('bar'), compare('baz'));\n\nconsole.log(result);\n// [ { foo: 'w', bar: 'y', baz: 'w' },\n//   { foo: 'x', bar: 'x', baz: 'w' },\n//   { foo: 'x', bar: 'y', baz: 'w' },\n//   { foo: 'x', bar: 'y', baz: 'z' } ]\n```\n\n## About\n\n### Related projects\n\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value \"Use property paths (`a.b.c`) to get a nested value from an object.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [sort-asc](https://www.npmjs.com/package/sort-asc): Sort array elements in ascending order. | [homepage](https://github.com/jonschlinkert/sort-asc \"Sort array elements in ascending order.\")\n* [sort-desc](https://www.npmjs.com/package/sort-desc): Sort array elements in descending order. | [homepage](https://github.com/jonschlinkert/sort-desc \"Sort array elements in descending order.\")\n* [sort-object](https://www.npmjs.com/package/sort-object): Sort the keys in an object. | [homepage](https://github.com/doowb/sort-object \"Sort the keys in an object.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 10 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 4  | [doowb](https://github.com/doowb) |  \n| 1  | [iamstolis](https://github.com/iamstolis) |  \n| 1  | [wkevina](https://github.com/wkevina) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on September 11, 2017._",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2017, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/array-sort/-/array-sort-1.0.0.tgz#e4c05356453f56f53512a7d1d6123f2c54c0a88a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/array-sort/-/array-sort-1.0.0.tgz",
    "hash": "e4c05356453f56f53512a7d1d6123f2c54c0a88a",
    "integrity": "sha512-ihLeJkonmdiAsD7vpgN3CRcx2J2S0TiYW+IS/5zHBI7mKUq3ySvBdzzBfD236ubDBQFiiyG3SWCPc+msQ9KoYg==",
    "registry": "npm",
    "packageName": "array-sort",
    "cacheIntegrity": "sha512-ihLeJkonmdiAsD7vpgN3CRcx2J2S0TiYW+IS/5zHBI7mKUq3ySvBdzzBfD236ubDBQFiiyG3SWCPc+msQ9KoYg== sha1-5MBTVkU/VvU1EqfR1hI/LFTAqIo="
  },
  "registry": "npm",
  "hash": "e4c05356453f56f53512a7d1d6123f2c54c0a88a"
}