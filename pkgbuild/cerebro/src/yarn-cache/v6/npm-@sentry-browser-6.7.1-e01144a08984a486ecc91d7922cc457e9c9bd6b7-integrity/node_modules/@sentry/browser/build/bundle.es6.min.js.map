{"version":3,"file":"bundle.es6.min.js","sources":["../../types/src/loglevel.ts","../../types/src/session.ts","../../types/src/severity.ts","../../types/src/status.ts","../../types/src/transaction.ts","../../utils/src/is.ts","../../utils/src/browser.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/dsn.ts","../../utils/src/node.ts","../../utils/src/string.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/memo.ts","../../utils/src/stacktrace.ts","../../utils/src/object.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../utils/src/syncpromise.ts","../../utils/src/promisebuffer.ts","../../utils/src/time.ts","../../hub/src/scope.ts","../../hub/src/session.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/request.ts","../../core/src/version.ts","../../core/src/integrations/functiontostring.ts","../../core/src/integrations/inboundfilters.ts","../src/tracekit.ts","../src/parsers.ts","../src/eventbuilder.ts","../src/transports/base.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/backend.ts","../src/helpers.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/useragent.ts","../src/client.ts","../src/sdk.ts","../src/index.ts","../src/version.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","import { User } from './user';\n\n/**\n * @inheritdoc\n */\nexport interface Session extends SessionContext {\n  /** JSDoc */\n  update(context?: SessionContext): void;\n\n  /** JSDoc */\n  close(status?: SessionStatus): void;\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  };\n}\n\nexport interface RequestSession {\n  status?: RequestSessionStatus;\n}\n\n/**\n * Session Context\n */\nexport interface SessionContext {\n  sid?: string;\n  did?: string;\n  init?: boolean;\n  // seconds since the UNIX epoch\n  timestamp?: number;\n  // seconds since the UNIX epoch\n  started?: number;\n  duration?: number;\n  status?: SessionStatus;\n  release?: string;\n  environment?: string;\n  userAgent?: string;\n  ipAddress?: string;\n  errors?: number;\n  user?: User | null;\n  ignoreDuration?: boolean;\n}\n\n/**\n * Session Status\n */\nexport enum SessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Exited = 'exited',\n  /** JSDoc */\n  Crashed = 'crashed',\n  /** JSDoc */\n  Abnormal = 'abnormal',\n}\n\nexport enum RequestSessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Errored = 'errored',\n  /** JSDoc */\n  Crashed = 'crashed',\n}\n\n/** JSDoc */\nexport interface SessionAggregates {\n  attrs?: {\n    environment?: string;\n    release?: string;\n  };\n  aggregates: Array<AggregationCounts>;\n}\n\nexport interface SessionFlusherLike {\n  /**\n   * Increments the Session Status bucket in SessionAggregates Object corresponding to the status of the session\n   * captured\n   */\n  incrementSessionStatusCount(): void;\n\n  /** Submits the aggregates request mode sessions to Sentry */\n  sendSessionAggregates(sessionAggregates: SessionAggregates): void;\n\n  /** Empties Aggregate Buckets and Sends them to Transport Buffer */\n  flush(): void;\n\n  /** Clears setInterval and calls flush */\n  close(): void;\n}\n\nexport interface AggregationCounts {\n  started: string;\n  errored?: number;\n  exited?: number;\n  crashed?: number;\n}\n","/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","import { ExtractedNodeRequestData, Primitive, WorkerLocation } from './misc';\nimport { Span, SpanContext } from './span';\n\n/**\n * Interface holding Transaction-specific properties\n */\nexport interface TransactionContext extends SpanContext {\n  /**\n   * Human-readable identifier for the transaction\n   */\n  name: string;\n\n  /**\n   * If true, sets the end timestamp of the transaction to the highest timestamp of child spans, trimming\n   * the duration of the transaction. This is useful to discard extra time in the transaction that is not\n   * accounted for in child spans, like what happens in the idle transaction Tracing integration, where we finish the\n   * transaction after a given \"idle time\" and we don't want this \"idle time\" to be part of the transaction.\n   */\n  trimEnd?: boolean;\n\n  /**\n   * If this transaction has a parent, the parent's sampling decision\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Metadata associated with the transaction, for internal SDK use.\n   */\n  metadata?: TransactionMetadata;\n}\n\n/**\n * Data pulled from a `sentry-trace` header\n */\nexport type TraceparentData = Pick<TransactionContext, 'traceId' | 'parentSpanId' | 'parentSampled'>;\n\n/**\n * Transaction \"Class\", inherits Span only has `setName`\n */\nexport interface Transaction extends TransactionContext, Span {\n  /**\n   * @inheritDoc\n   */\n  spanId: string;\n\n  /**\n   * @inheritDoc\n   */\n  traceId: string;\n\n  /**\n   * @inheritDoc\n   */\n  startTimestamp: number;\n\n  /**\n   * @inheritDoc\n   */\n  tags: { [key: string]: Primitive };\n\n  /**\n   * @inheritDoc\n   */\n  data: { [key: string]: any };\n\n  /**\n   * Metadata about the transaction\n   */\n  metadata: TransactionMetadata;\n\n  /**\n   * Set the name of the transaction\n   */\n  setName(name: string): void;\n\n  /** Returns the current transaction properties as a `TransactionContext` */\n  toContext(): TransactionContext;\n\n  /** Updates the current transaction with a new `TransactionContext` */\n  updateWithContext(transactionContext: TransactionContext): this;\n}\n\n/**\n * Context data passed by the user when starting a transaction, to be used by the tracesSampler method.\n */\nexport interface CustomSamplingContext {\n  [key: string]: any;\n}\n\n/**\n * Data passed to the `tracesSampler` function, which forms the basis for whatever decisions it might make.\n *\n * Adds default data to data provided by the user. See {@link Hub.startTransaction}\n */\nexport interface SamplingContext extends CustomSamplingContext {\n  /**\n   * Context data with which transaction being sampled was created\n   */\n  transactionContext: TransactionContext;\n\n  /**\n   * Sampling decision from the parent transaction, if any.\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Object representing the URL of the current page or worker script. Passed by default when using the `BrowserTracing`\n   * integration.\n   */\n  location?: WorkerLocation;\n\n  /**\n   * Object representing the incoming request to a node server. Passed by default when using the TracingHandler.\n   */\n  request?: ExtractedNodeRequestData;\n}\n\nexport type Measurements = Record<string, { value: number }>;\n\nexport enum TransactionSamplingMethod {\n  Explicit = 'explicitly_set',\n  Sampler = 'client_sampler',\n  Rate = 'client_rate',\n  Inheritance = 'inheritance',\n}\n\nexport interface TransactionMetadata {\n  transactionSampling?: { rate?: number; method?: string };\n\n  /** The two halves (sentry and third-party) of a transaction's tracestate header, used for dynamic sampling */\n  tracestate?: {\n    sentry?: string;\n    thirdparty?: string;\n  };\n\n  /** For transactions tracing server-side request handling, the path of the request being tracked. */\n  requestPath?: string;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttr?: string): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttr);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttr?: string): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  const keyAttrValue = keyAttr ? elem.getAttribute(keyAttr) : null;\n  if (keyAttrValue) {\n    out.push(`[${keyAttr}=\"${keyAttrValue}\"]`);\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key (deprecated, renamed to publicKey). */\n  public user!: string;\n  /** Public authorization key. */\n  public publicKey!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, publicKey } = this;\n    return (\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore Mechanism has no index signature\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","const defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n  if (typeof value === 'symbol') {\n    return `[${String(value)}]`;\n  }\n\n  if (typeof value === 'bigint') {\n    return `[BigInt: ${String(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input: any, depth?: number): any {\n  try {\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(originalAddEventListener: AddEventListener): AddEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    done: boolean;\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        void SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        done: false,\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve((val as unknown) as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    done: boolean;\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler.done) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        if (handler.onfulfilled) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler.onfulfilled((this._value as unknown) as any);\n        }\n      }\n\n      if (this._state === States.REJECTED) {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      }\n\n      handler.done = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    void task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      void SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          void (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  SessionContext,\n  SessionStatus,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalObject, isNodeEnv, logger, uuid4 } from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { Session } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @hidden\n * @deprecated Can be removed once `Hub.getActiveDomain` is removed.\n */\nexport interface DomainAsCarrier extends Carrier {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  members: { [key: string]: any }[];\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    this.bindClient(client);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    this.getStackTop()\n      ?.scope?.getSession()\n      ?.close();\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    this.getStackTop()?.scope?.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n    const session = new Session({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === SessionStatus.Ok) {\n        currentSession.update({ status: SessionStatus.Exited });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession && scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const { scope, client } = this.getStackTop();\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (client as any)[method](...args, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n * @deprecated No longer used; remove in v7\n * @returns The domain, or undefined if there is no active domain\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  logger.warn('Function `getActiveDomain` is deprecated and will be removed in a future version.');\n\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const activeDomain = getMainCarrier().__SENTRY__?.extensions?.domain?.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","import { DsnLike, SdkMetadata } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this.getDsn();\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    if (this.forceEnvelope()) {\n      return this._tunnel as string;\n    }\n\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this.getDsn();\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    const dsn = this.getDsn();\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.publicKey}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this.getDsn();\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    if (this._tunnel) {\n      return this._tunnel;\n    }\n    const base = this.getBaseApiEndpoint();\n    const dsn = this.getDsn();\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this.getDsn();\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  SessionStatus,\n  Severity,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of call being processed */\n  protected _processing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!(typeof session.release === 'string')) {\n      logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(ready => {\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    let userAgent;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    const user = event.user;\n    if (!session.userAgent) {\n      const headers = event.request ? event.request.headers : {};\n      for (const key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update({\n      ...(crashed && { status: SessionStatus.Crashed }),\n      user,\n      userAgent,\n      errors: session.errors + Number(errored || crashed),\n    });\n    this.captureSession(session);\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        if (typeof beforeSendResult === 'undefined') {\n          throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n        } else if (isThenable(beforeSendResult)) {\n          return (beforeSendResult as PromiseLike<Event | null>).then(\n            event => event,\n            e => {\n              throw new SentryError(`beforeSend rejected with ${e}`);\n            },\n          );\n        }\n        return beforeSendResult;\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._processing += 1;\n    void promise.then(\n      value => {\n        this._processing -= 1;\n        return value;\n      },\n      reason => {\n        this._processing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    void this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    void this._transport.sendSession(session).then(null, reason => {\n      logger.error(`Error while sending session: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { Event, SdkInfo, SentryRequest, SentryRequestType, Session, SessionAggregates } from '@sentry/types';\n\nimport { API } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: API): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n  });\n  // I know this is hacky but we don't want to add `session` to request type since it's never rate limited\n  const type: SentryRequestType = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n  const itemHeaders = JSON.stringify({\n    type,\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type,\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || api.forceEnvelope();\n\n  const { transactionSampling, ...metadata } = event.debug_meta || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n  if (Object.keys(metadata).length === 0) {\n    delete event.debug_meta;\n  } else {\n    event.debug_meta = metadata;\n  }\n\n  const req: SentryRequest = {\n    body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    type: eventType,\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n    });\n    const itemHeaders = JSON.stringify({\n      type: eventType,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","export const SDK_VERSION = '6.7.1';\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        // This checks prevents most of the occurrences of the bug linked below:\n        // https://github.com/getsentry/sentry-javascript/issues/2622\n        // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.\n        // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),\n        // as we cannot force people using multiple instances in their apps to sync SDK versions.\n        const options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};\n        if (typeof self._shouldDropEvent !== 'function') {\n          return event;\n        }\n        return self._shouldDropEvent(event, options) ? null : event;\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n\n      // Arpad: Working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n      // prefix here seems like the quickest solution for now.\n      let url = parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2];\n\n      // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n      // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n      let func = parts[1] || UNKNOWN_FUNCTION;\n      const isSafariExtension = func.indexOf('safari-extension') !== -1;\n      const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n      if (isSafariExtension || isSafariWebExtension) {\n        func = func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION;\n        url = isSafariExtension ? `safari-extension:${url}` : `safari-web-extension:${url}`;\n      }\n\n      element = {\n        url,\n        func,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event, {\n    handled: true,\n    type: 'generic',\n  });\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name, code, and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { API } from '@sentry/core';\nimport {\n  Event,\n  Response as SentryResponse,\n  SentryRequestType,\n  Status,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport { logger, parseRetryAfterHeader, PromiseBuffer, SentryError } from '@sentry/utils';\n\nconst CATEGORY_MAPPING: {\n  [key in SentryRequestType]: string;\n} = {\n  event: 'error',\n  transaction: 'transaction',\n  session: 'session',\n  attachment: 'attachment',\n};\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected readonly _rateLimits: Record<string, Date> = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = Status.fromHttpCode(response.status);\n    /**\n     * \"The name is case-insensitive.\"\n     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n     */\n    const limited = this._handleRateLimit(headers);\n    if (limited) logger.warn(`Too many requests, backing off until: ${this._disabledUntil(requestType)}`);\n\n    if (status === Status.Success) {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = CATEGORY_MAPPING[requestType];\n    return this._rateLimits[category] || this._rateLimits.all;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    return this._disabledUntil(requestType) > new Date(Date.now());\n  }\n\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n  protected _handleRateLimit(headers: Record<string, string | null>): boolean {\n    const now = Date.now();\n    const rlHeader = headers['x-sentry-rate-limits'];\n    const raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      // rate limit headers are of the form\n      //     <header>,<header>,..\n      // where each <header> is of the form\n      //     <retry_after>: <categories>: <scope>: <reason_code>\n      // where\n      //     <retry_after> is a delay in ms\n      //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n      //         <category>;<category>;...\n      //     <scope> is what's being limited (org, project, or key) - ignored by SDK\n      //     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n      for (const limit of rlHeader.trim().split(',')) {\n        const parameters = limit.split(':', 2);\n        const headerDelay = parseInt(parameters[0], 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        for (const category of parameters[1].split(';')) {\n          this._rateLimits[category || 'all'] = new Date(now + delay);\n        }\n      }\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader));\n      return true;\n    }\n    return false;\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { getGlobalObject, isNativeFetch, logger, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\ntype FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction getNativeFetchImplementation(): FetchImpl {\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  const global = getGlobalObject<Window>();\n  if (isNativeFetch(global.fetch)) {\n    return global.fetch.bind(global);\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof document?.createElement === `function`) {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        fetchImpl = sandbox.contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return fetchImpl.bind(global);\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        void this._fetch(sentryRequest.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({\n              requestType: sentryRequest.type,\n              response,\n              headers,\n              resolve,\n              reject,\n            });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = (): void => {\n          if (request.readyState === 4) {\n            const headers = {\n              'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': request.getResponseHeader('Retry-After'),\n            };\n            this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n          }\n        };\n\n        request.open('POST', sentryRequest.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryRequest.body);\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, logger } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  (document.head || document.body).appendChild(script);\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = (fn as unknown) as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler?.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    const keyAttr = typeof this._options.dom === 'object' ? this._options.dom.serializeAttribute : undefined;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttr)\n        : htmlTreeAsString((handlerData.event as unknown) as Node, keyAttr);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (typeof hub.startSession !== 'function' || typeof hub.captureSession !== 'function') {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler({\n    callback: ({ from, to }) => {\n      // Don't create an additional session for the initial route or if the location did not change\n      if (from === undefined || from === to) {\n        return;\n      }\n      hub.startSession({ ignoreDuration: true });\n      hub.captureSession();\n    },\n    type: 'history',\n  });\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata\nexport const SDK_NAME = 'sentry.javascript.browser';\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  hub.getScope()?.update(options.initialScope);\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["LogLevel","SessionStatus","RequestSessionStatus","Severity","Status","TransactionSamplingMethod","isError","wat","Object","prototype","toString","call","isInstanceOf","Error","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","htmlTreeAsString","elem","keyAttr","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrValue","getAttribute","id","split","allowedAttrs","level","Debug","Info","Warning","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","__proto__","Array","obj","proto","prop","hasOwnProperty","SentryError","[object Object]","message","super","this","name","constructor","DSN_REGEX","ERROR_MESSAGE","Dsn","from","_fromString","_fromComponents","_validate","withPassword","host","path","pass","port","projectId","protocol","publicKey","str","match","exec","lastPath","slice","pop","projectMatch","components","user","forEach","component","isNaN","parseInt","isNodeEnv","process","truncate","max","substr","safeJoin","input","delimiter","isArray","output","value","String","e","isMatchingPattern","pattern","test","indexOf","fallbackGlobalObject","getGlobalObject","global","window","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","url","query","fragment","relative","getEventDescription","event","exception","values","type","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","__sentry_original__","result","keys","addExceptionTypeValue","addExceptionMechanism","mechanism","defaultRetryAfter","PREFIX","__SENTRY__","logger","_enabled","args","log","warn","error","Memo","_hasWeakSet","WeakSet","_inner","has","add","delete","splice","defaultFunctionName","getFunctionName","fn","fill","source","replacementFactory","original","wrapped","defineProperties","enumerable","_Oo","getWalkSource","err","stack","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","_events","document","walk","Infinity","memo","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","parse","extractExceptionKeysForMessage","maxLength","sort","includedKeys","dropUndefinedKeys","val","rv","map","supportsFetch","Headers","Request","Response","isNativeFetch","func","supportsReferrerPolicy","referrerPolicy","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","apply","instrumentConsole","triggerDOMHandler","bind","globalDOMEventHandler","makeDOMEventHandler","addEventListener","originalAddEventListener","listener","options","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","undefined","instrumentDOM","requestKeys","requestValues","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","requestPos","body","endTimestamp","Date","now","startTimestamp","onreadystatechange","readyStateArgs","originalSend","instrumentXHR","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","lastHref","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","data","fetchArgs","debounceDuration","debounceTimerID","lastCapturedEvent","globalListener","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","setTimeout","States","SyncPromise","executor","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","_handlers","concat","cachedHandlers","done","onfulfilled","onrejected","resolve","_","reject","collection","TypeError","counter","resolvedCollection","item","index","_attachHandler","onfinally","isRejected","PromiseBuffer","_limit","task","isReady","_buffer","remove","timeout","capturedSetTimeout","all","dateTimestampSource","nowSeconds","platformPerformance","mod","module","request","require","performance","getNodePerformance","timeOrigin","getBrowserPerformance","timestampSource","dateTimestampInSeconds","timestampInSeconds","MAX_BREADCRUMBS","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","Scope","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","_requestSession","_scopeListeners","update","_notifyScopeListeners","requestSession","tags","extras","extra","fingerprint","setTransactionName","context","span","getSpan","transaction","spanRecorder","spans","session","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","maxCrumbs","min","mergedBreadcrumb","timestamp","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","processor","final","_notifyingListeners","globalEventProcessors","addGlobalEventProcessor","Session","Ok","startingTime","started","ip_address","ipAddress","did","email","username","ignoreDuration","sid","init","duration","release","environment","userAgent","errors","Exited","toISOString","attrs","user_agent","API_VERSION","DEFAULT_BREADCRUMBS","Hub","client","_version","getStackTop","bindClient","version","setupIntegrations","clone","getScope","getStack","getClient","pushScope","popScope","_stack","eventId","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","beforeBreadcrumb","getOptions","finalBreadcrumb","addBreadcrumb","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","_callExtensionMethod","customSamplingContext","endSession","_sendSessionUpdate","getSession","close","setSession","getUser","currentSession","captureSession","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","activeDomain","domain","active","registryHubTopStack","getHubFromActiveDomain","callOnHub","captureException","withScope","SENTRY_API_VERSION","API","dsn","metadata","tunnel","_dsnObject","_tunnel","getDsn","_getIngestEndpoint","getStoreEndpoint","_encodedAuth","forceEnvelope","_getEnvelopeEndpoint","clientName","clientVersion","header","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","getBaseApiEndpoint","encodedOptions","encodeURIComponent","auth","sentry_key","sentry_version","installedIntegrations","filterDuplicates","integrations","reduce","every","accIntegration","defaultIntegrations","userIntegrations","filter","userIntegration","integrationsNames","getIntegrationsToSetup","setupOnce","setupIntegration","BaseClient","backendClass","_backend","_options","_dsn","_process","_getBackend","eventFromException","_captureEvent","promisedEvent","eventFromMessage","_sendSession","_isClientProcessing","ready","getTransport","transportFlushed","flush","enabled","_isEnabled","_integrations","crashed","errored","exceptions","ex","handled","headers","Crashed","Number","sendSession","ticked","interval","setInterval","_processing","clearInterval","normalizeDepth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","applyToEvent","evt","_normalizeEvent","b","dist","maxValueLength","integrationsArray","sdk","sendEvent","_processEvent","finalEvent","beforeSend","sampleRate","isTransaction","_prepareEvent","__sentry__","beforeSendResult","processedEvent","_updateSessionFromEvent","_sendEvent","promise","NoopTransport","Skipped","BaseBackend","_transport","_setupTransport","_exception","_hint","_message","getSdkMetadataForEnvelopeHeader","api","enhanceEventWithSdkInfo","sdkInfo","packages","sessionToSentryRequest","sent_at","getEnvelopeEndpointWithUrlEncodedAuth","eventToSentryRequest","eventType","useEnvelope","_a","transactionSampling","samplingMethod","rate","debug_meta","req","getStoreEndpointWithUrlEncodedAuth","envelope","sample_rates","SDK_VERSION","originalFunctionToString","FunctionToString","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","stacktrace","frames","filename","UNKNOWN_FUNCTION","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","popSize","framesToPop","opera10Regex","opera11Regex","lines","parts","element","extractMessage","computeStackTraceFromStacktraceProp","popFrames","isEval","submatch","isNative","isSafariExtension","isSafariWebExtension","columnNumber","computeStackTraceFromStackProp","failed","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","eventFromUnknownInput","attachStacktrace","eventFromString","domException","DOMException.code","rejection","__serialized__","eventFromPlainObject","synthetic","CATEGORY_MAPPING","attachment","BaseTransport","_api","_metadata","drain","requestType","fromHttpCode","_handleRateLimit","_disabledUntil","category","_rateLimits","rlHeader","raHeader","limit","trim","parameters","headerDelay","delay","headerDate","parseRetryAfterHeader","FetchTransport","fetchImpl","getNativeFetchImplementation","_fetch","_sendRequest","sentryRequest","originalPayload","_isRateLimited","Promise","fetchParameters","assign","x-sentry-rate-limits","get","retry-after","_handleResponse","catch","XHRTransport","getResponseHeader","open","setRequestHeader","send","BrowserBackend","transportOptions","Mt","transport","ignoreOnError","shouldIgnoreOnError","wrap","before","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","handleEvent","addEventProcessor","property","defineProperty","getOwnPropertyDescriptor","configurable","injectReportDialog","script","async","src","getReportDialogEndpoint","onLoad","onload","GlobalHandlers","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","captureEvent","_onUnhandledRejectionHandlerInstalled","_eventFromRejectionWithPrimitive","ERROR_TYPES_RE","groups","getLocationHref","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","originalCallback","eventName","wrappedEventHandler","originalEventHandler","wrapOptions","Breadcrumbs","dom","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","fromString","serializeAttribute","parsedLoc","parsedFrom","parsedTo","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","referrer","Referer","User-Agent","BrowserClient","platform","addSentryBreadcrumb","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","SENTRY_RELEASE","autoSessionTracking","clientClass","debug","enable","initialScope","initAndBind","startSession","startSessionTracking","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}