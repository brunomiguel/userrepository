{
  "manifest": {
    "name": "y18n",
    "version": "5.0.5",
    "description": "the bare-bones internationalization library used by yargs",
    "exports": {
      ".": [
        {
          "import": "./index.mjs",
          "require": "./build/index.cjs"
        },
        "./build/index.cjs"
      ]
    },
    "type": "module",
    "module": "./build/lib/index.js",
    "keywords": [
      "i18n",
      "internationalization",
      "yargs"
    ],
    "homepage": "https://github.com/yargs/y18n",
    "bugs": {
      "url": "https://github.com/yargs/y18n/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/yargs/y18n.git"
    },
    "license": "ISC",
    "author": {
      "name": "Ben Coe",
      "email": "bencoe@gmail.com"
    },
    "main": "./build/index.cjs",
    "scripts": {
      "check": "standardx '**/*.ts' '**/*.cjs' '**/*.mjs'",
      "fix": "standardx --fix '**/*.ts' '**/*.cjs' '**/*.mjs'",
      "pretest": "rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs",
      "test": "c8 --reporter=text --reporter=html mocha test/*.cjs",
      "test:esm": "c8 --reporter=text --reporter=html mocha test/esm/*.mjs",
      "posttest": "npm run check",
      "coverage": "c8 report --check-coverage",
      "precompile": "rimraf build",
      "compile": "tsc",
      "postcompile": "npm run build:cjs",
      "build:cjs": "rollup -c",
      "prepare": "npm run compile"
    },
    "devDependencies": {
      "@types/node": "^14.6.4",
      "@wessberg/rollup-plugin-ts": "^1.3.1",
      "c8": "^7.3.0",
      "chai": "^4.0.1",
      "cross-env": "^7.0.2",
      "gts": "^3.0.0",
      "mocha": "^8.0.0",
      "rimraf": "^3.0.2",
      "rollup": "^2.26.10",
      "standardx": "^5.0.0",
      "ts-transform-default-export": "^1.0.2",
      "typescript": "^4.0.0"
    },
    "files": [
      "build",
      "index.mjs",
      "!*.d.ts"
    ],
    "engines": {
      "node": ">=10"
    },
    "standardx": {
      "ignore": [
        "build"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-y18n-5.0.5-8769ec08d03b1ea2df2500acef561743bbb9ab18-integrity/node_modules/y18n/package.json",
    "readmeFilename": "README.md",
    "readme": "# y18n\n\n[![NPM version][npm-image]][npm-url]\n[![js-standard-style][standard-image]][standard-url]\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n\nThe bare-bones internationalization library used by yargs.\n\nInspired by [i18n](https://www.npmjs.com/package/i18n).\n\n## Examples\n\n_simple string translation:_\n\n```js\nconst __ = require('y18n')().__;\n\nconsole.log(__('my awesome string %s', 'foo'));\n```\n\noutput:\n\n`my awesome string foo`\n\n_using tagged template literals_\n\n```js\nconst __ = require('y18n')().__;\n\nconst str = 'foo';\n\nconsole.log(__`my awesome string ${str}`);\n```\n\noutput:\n\n`my awesome string foo`\n\n_pluralization support:_\n\n```js\nconst __n = require('y18n')().__n;\n\nconsole.log(__n('one fish %s', '%d fishes %s', 2, 'foo'));\n```\n\noutput:\n\n`2 fishes foo`\n\n## Deno Example\n\nAs of `v5` `y18n` supports [Deno](https://github.com/denoland/deno):\n\n```typescript\nimport y18n from \"https://deno.land/x/y18n/deno.ts\";\n\nconst __ = y18n({\n  locale: 'pirate',\n  directory: './test/locales'\n}).__\n\nconsole.info(__`Hi, ${'Ben'} ${'Coe'}!`)\n```\n\nYou will need to run with `--allow-read` to load alternative locales.\n\n## JSON Language Files\n\nThe JSON language files should be stored in a `./locales` folder.\nFile names correspond to locales, e.g., `en.json`, `pirate.json`.\n\nWhen strings are observed for the first time they will be\nadded to the JSON file corresponding to the current locale.\n\n## Methods\n\n### require('y18n')(config)\n\nCreate an instance of y18n with the config provided, options include:\n\n* `directory`: the locale directory, default `./locales`.\n* `updateFiles`: should newly observed strings be updated in file, default `true`.\n* `locale`: what locale should be used.\n* `fallbackToLanguage`: should fallback to a language-only file (e.g. `en.json`)\n  be allowed if a file matching the locale does not exist (e.g. `en_US.json`),\n  default `true`.\n\n### y18n.\\_\\_(str, arg, arg, arg)\n\nPrint a localized string, `%s` will be replaced with `arg`s.\n\nThis function can also be used as a tag for a template literal. You can use it\nlike this: <code>__&#96;hello ${'world'}&#96;</code>. This will be equivalent to\n`__('hello %s', 'world')`.\n\n### y18n.\\_\\_n(singularString, pluralString, count, arg, arg, arg)\n\nPrint a localized string with appropriate pluralization. If `%d` is provided\nin the string, the `count` will replace this placeholder.\n\n### y18n.setLocale(str)\n\nSet the current locale being used.\n\n### y18n.getLocale()\n\nWhat locale is currently being used?\n\n### y18n.updateLocale(obj)\n\nUpdate the current locale with the key value pairs in `obj`.\n\n## Supported Node.js Versions\n\nLibraries in this ecosystem make a best effort to track\n[Node.js' release schedule](https://nodejs.org/en/about/releases/). Here's [a\npost on why we think this is important](https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a).\n\n## License\n\nISC\n\n[npm-url]: https://npmjs.org/package/y18n\n[npm-image]: https://img.shields.io/npm/v/y18n.svg\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n[standard-url]: https://github.com/feross/standard\n",
    "licenseText": "Copyright (c) 2015, Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/y18n/-/y18n-5.0.5.tgz#8769ec08d03b1ea2df2500acef561743bbb9ab18",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/y18n/-/y18n-5.0.5.tgz",
    "hash": "8769ec08d03b1ea2df2500acef561743bbb9ab18",
    "integrity": "sha512-hsRUr4FFrvhhRH12wOdfs38Gy7k2FFzB9qgN9v3aLykRq0dRcdcpz5C9FxdS2NuhOrI/628b/KSTJ3rwHysYSg==",
    "registry": "npm",
    "packageName": "y18n",
    "cacheIntegrity": "sha512-hsRUr4FFrvhhRH12wOdfs38Gy7k2FFzB9qgN9v3aLykRq0dRcdcpz5C9FxdS2NuhOrI/628b/KSTJ3rwHysYSg== sha1-h2nsCNA7HqLfJQCs71YXQ7u5qxg="
  },
  "registry": "npm",
  "hash": "8769ec08d03b1ea2df2500acef561743bbb9ab18"
}