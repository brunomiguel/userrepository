{
  "manifest": {
    "name": "css-loader",
    "version": "5.0.1",
    "description": "css loader module for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/css-loader.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/css-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/css-loader/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "validate:runtime": "es-check es5 \"dist/runtime/**/*.js\"",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "postbuild": "npm run validate:runtime",
      "commitlint": "commitlint --from=master",
      "security": "npm audit",
      "lint:prettier": "prettier --list-different .",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "npm run build",
      "release": "standard-version",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.27.0 || ^5.0.0"
    },
    "dependencies": {
      "camelcase": "^6.2.0",
      "cssesc": "^3.0.0",
      "icss-utils": "^5.0.0",
      "loader-utils": "^2.0.0",
      "postcss": "^8.1.4",
      "postcss-modules-extract-imports": "^3.0.0",
      "postcss-modules-local-by-default": "^4.0.0",
      "postcss-modules-scope": "^3.0.0",
      "postcss-modules-values": "^4.0.0",
      "postcss-value-parser": "^4.1.0",
      "schema-utils": "^3.0.0",
      "semver": "^7.3.2"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.1",
      "@babel/core": "^7.12.3",
      "@babel/preset-env": "^7.12.1",
      "@commitlint/cli": "^11.0.0",
      "@commitlint/config-conventional": "^11.0.0",
      "@webpack-contrib/defaults": "^6.3.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^26.6.3",
      "cross-env": "^7.0.2",
      "del": "^6.0.0",
      "del-cli": "^3.0.1",
      "es-check": "^5.1.2",
      "eslint": "^7.12.1",
      "eslint-config-prettier": "^6.15.0",
      "eslint-plugin-import": "^2.22.1",
      "file-loader": "^6.2.0",
      "husky": "^4.3.0",
      "jest": "^26.6.3",
      "less": "^3.12.2",
      "less-loader": "^7.0.2",
      "lint-staged": "^10.5.1",
      "memfs": "^3.2.0",
      "mini-css-extract-plugin": "^1.2.1",
      "npm-run-all": "^4.1.5",
      "postcss-loader": "^4.0.4",
      "postcss-preset-env": "^6.7.0",
      "prettier": "^2.1.2",
      "sass": "^1.28.0",
      "sass-loader": "^10.0.5",
      "standard-version": "^9.0.0",
      "strip-ansi": "^6.0.0",
      "style-loader": "^2.0.0",
      "stylus": "^0.54.8",
      "stylus-loader": "^4.2.0",
      "url-loader": "^4.1.1",
      "webpack": "^5.4.0"
    },
    "keywords": [
      "webpack",
      "css",
      "loader",
      "url",
      "import"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-css-loader-5.0.1-9e4de0d6636a6266a585bd0900b422c85539d25f-integrity/node_modules/css-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <img width=\"180\" height=\"180\" vspace=\"20\"\n    src=\"https://cdn.worldvectorlogo.com/logos/css-3.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# css-loader\n\nThe `css-loader` interprets `@import` and `url()` like `import/require()` and will resolve them.\n\n## Getting Started\n\nTo begin, you'll need to install `css-loader`:\n\n```console\nnpm install --save-dev css-loader\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**file.js**\n\n```js\nimport css from 'file.css';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\nGood loaders for requiring your assets are the [file-loader](https://github.com/webpack/file-loader) and the [url-loader](https://github.com/webpack/url-loader) which you should specify in your config (see [below](https://github.com/webpack-contrib/css-loader#assets)).\n\nAnd run `webpack` via your preferred method.\n\n### `toString`\n\nYou can also use the css-loader results directly as a string, such as in Angular's component style.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['to-string-loader', 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\nor\n\n```js\nconst css = require('./test.css').toString();\n\nconsole.log(css); // {String}\n```\n\nIf there are SourceMaps, they will also be included in the result string.\n\nIf, for one reason or another, you need to extract CSS as a\nplain string resource (i.e. not wrapped in a JS module) you\nmight want to check out the [extract-loader](https://github.com/peerigon/extract-loader).\nIt's useful when you, for instance, need to post process the CSS as a string.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\n          'handlebars-loader', // handlebars loader expects raw resource string\n          'extract-loader',\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Options\n\n|                 Name                  |            Type             |      Default       | Description                                                            |\n| :-----------------------------------: | :-------------------------: | :----------------: | :--------------------------------------------------------------------- |\n|           **[`url`](#url)**           |    `{Boolean\\|Function}`    |       `true`       | Enables/Disables `url`/`image-set` functions handling                  |\n|        **[`import`](#import)**        |    `{Boolean\\|Function}`    |       `true`       | Enables/Disables `@import` at-rules handling                           |\n|       **[`modules`](#modules)**       | `{Boolean\\|String\\|Object}` |   `{auto: true}`   | Enables/Disables CSS Modules and their configuration                   |\n|     **[`sourceMap`](#sourcemap)**     |         `{Boolean}`         | `compiler.devtool` | Enables/Disables generation of source maps                             |\n| **[`importLoaders`](#importloaders)** |         `{Number}`          |        `0`         | Enables/Disables or setups number of loaders applied before CSS loader |\n|      **[`esModule`](#esmodule)**      |         `{Boolean}`         |       `true`       | Use ES modules syntax                                                  |\n\n### `url`\n\nType: `Boolean|Function`\nDefault: `true`\n\nEnables/Disables `url`/`image-set` functions handling.\nControl `url()` resolving. Absolute URLs are not resolving.\n\nExamples resolutions:\n\n```\nurl(image.png) => require('./image.png')\nurl('image.png') => require('./image.png')\nurl(./image.png) => require('./image.png')\nurl('./image.png') => require('./image.png')\nurl('http://dontwritehorriblecode.com/2112.png') => require('http://dontwritehorriblecode.com/2112.png')\nimage-set(url('image2x.png') 1x, url('image1x.png') 2x) => require('./image1x.png') and require('./image2x.png')\n```\n\nTo import assets from a `node_modules` path (include `resolve.modules`) and for `alias`, prefix it with a `~`:\n\n```\nurl(~module/image.png) => require('module/image.png')\nurl('~module/image.png') => require('module/image.png')\nurl(~aliasDirectory/image.png) => require('otherDirectory/image.png')\n```\n\n#### `Boolean`\n\nEnable/disable `url()` resolving.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          url: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllow to filter `url()`. All filtered `url()` will not be resolved (left in the code as they were written).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          url: (url, resourcePath) => {\n            // resourcePath - path to css file\n\n            // Don't handle `img.png` urls\n            if (url.includes('img.png')) {\n              return false;\n            }\n\n            return true;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `import`\n\nType: `Boolean|Function`\nDefault: `true`\n\nEnables/Disables `@import` at-rules handling.\nControl `@import` resolving. Absolute urls in `@import` will be moved in runtime code.\n\nExamples resolutions:\n\n```\n@import 'style.css' => require('./style.css')\n@import url(style.css) => require('./style.css')\n@import url('style.css') => require('./style.css')\n@import './style.css' => require('./style.css')\n@import url(./style.css) => require('./style.css')\n@import url('./style.css') => require('./style.css')\n@import url('http://dontwritehorriblecode.com/style.css') => @import url('http://dontwritehorriblecode.com/style.css') in runtime\n```\n\nTo import styles from a `node_modules` path (include `resolve.modules`) and for `alias`, prefix it with a `~`:\n\n```\n@import url(~module/style.css) => require('module/style.css')\n@import url('~module/style.css') => require('module/style.css')\n@import url(~aliasDirectory/style.css) => require('otherDirectory/style.css')\n```\n\n#### `Boolean`\n\nEnable/disable `@import` resolving.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          import: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllow to filter `@import`. All filtered `@import` will not be resolved (left in the code as they were written).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          import: (url, media, resourcePath) => {\n            // resourcePath - path to css file\n\n            // Don't handle `style.css` import\n            if (url.includes('style.css')) {\n              return false;\n            }\n\n            return true;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `modules`\n\nType: `Boolean|String|Object`\nDefault: based on filename, `true` for all files matching `/\\.module\\.\\w+$/i.test(filename)` regular expression, more information you can read [here](https://github.com/webpack-contrib/css-loader#auto)\n\nEnables/Disables CSS Modules and their configuration.\n\nThe `modules` option enables/disables the **[CSS Modules](https://github.com/css-modules/css-modules)** specification and setup basic behaviour.\n\nUsing `false` value increase performance because we avoid parsing **CSS Modules** features, it will be useful for developers who use vanilla css or use other technologies.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Features`\n\n##### `Scope`\n\nUsing `local` value requires you to specify `:global` classes.\nUsing `global` value requires you to specify `:local` classes.\nUsing `pure` value requires selectors must contain at least one local class or id.\n\nYou can find more information [here](https://github.com/css-modules/css-modules).\n\nStyles can be locally scoped to avoid globally scoping styles.\n\nThe syntax `:local(.className)` can be used to declare `className` in the local scope. The local identifiers are exported by the module.\n\nWith `:local` (without brackets) local mode can be switched on for this selector.\nThe `:global(.className)` notation can be used to declare an explicit global selector.\nWith `:global` (without brackets) global mode can be switched on for this selector.\n\nThe loader replaces local selectors with unique identifiers. The chosen unique identifiers are exported by the module.\n\n```css\n:local(.className) {\n  background: red;\n}\n:local .className {\n  color: green;\n}\n:local(.className .subClass) {\n  color: green;\n}\n:local .className .subClass :global(.global-class-name) {\n  color: blue;\n}\n```\n\n```css\n._23_aKvs-b8bW2Vg3fwHozO {\n  background: red;\n}\n._23_aKvs-b8bW2Vg3fwHozO {\n  color: green;\n}\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 {\n  color: green;\n}\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name {\n  color: blue;\n}\n```\n\n> ℹ️ Identifiers are exported\n\n```js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1',\n};\n```\n\nCamelCase is recommended for local selectors. They are easier to use within the imported JS module.\n\nYou can use `:local(#someId)`, but this is not recommended. Use classes instead of ids.\n\n##### `Composing`\n\nWhen declaring a local classname you can compose a local class from another local classname.\n\n```css\n:local(.className) {\n  background: red;\n  color: yellow;\n}\n\n:local(.subClass) {\n  composes: className;\n  background: blue;\n}\n```\n\nThis doesn't result in any change to the CSS itself but exports multiple classnames.\n\n```js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO',\n};\n```\n\n```css\n._23_aKvs-b8bW2Vg3fwHozO {\n  background: red;\n  color: yellow;\n}\n\n._13LGdX8RMStbBE9w-t0gZ1 {\n  background: blue;\n}\n```\n\n##### `Importing`\n\nTo import a local classname from another module.\n\n> i We strongly recommend that you specify the extension when importing a file, since it is possible to import a file with any extension and it is not known in advance which file to use.\n\n```css\n:local(.continueButton) {\n  composes: button from 'library/button.css';\n  background: red;\n}\n```\n\n```css\n:local(.nameEdit) {\n  composes: edit highlight from './edit.css';\n  background: red;\n}\n```\n\nTo import from multiple modules use multiple `composes:` rules.\n\n```css\n:local(.className) {\n  composes: edit hightlight from './edit.css';\n  composes: button from 'module/button.css';\n  composes: classFromThisModule;\n  background: red;\n}\n```\n\n##### `Values`\n\nYou can use `@value` to specific values to be reused throughout a document.\n\nWe recommend use prefix `v-` for values, `s-` for selectors and `m-` for media at-rules.\n\n```css\n@value v-primary: #BF4040;\n@value s-black: black-selector;\n@value m-large: (min-width: 960px);\n\n.header {\n  color: v-primary;\n  padding: 0 10px;\n}\n\n.s-black {\n  color: black;\n}\n\n@media m-large {\n  .header {\n    padding: 0 20px;\n  }\n}\n```\n\n#### `Boolean`\n\nEnable **CSS Modules** features.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `String`\n\nEnable **CSS Modules** features and setup `mode`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          // Using `local` value has same effect like using `modules: true`\n          modules: 'global',\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Object`\n\nEnable **CSS Modules** features and setup options for them.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            compileType: 'module',\n            mode: 'local',\n            auto: true,\n            exportGlobals: true,\n            localIdentName: '[path][name]__[local]--[hash:base64:5]',\n            localIdentContext: path.resolve(__dirname, 'src'),\n            localIdentHashPrefix: 'my-custom-hash',\n            namedExport: true,\n            exportLocalsConvention: 'camelCase',\n            exportOnlyLocals: false,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `compileType`\n\nType: `'module' | 'icss'`\nDefault: `'module'`\n\nControls the level of compilation applied to the input styles.\n\nThe `module` handles `class` and `id` scoping and `@value` values.\nThe `icss` will only compile the low level `Interoperable CSS` format for declaring `:import` and `:export` dependencies between CSS and other languages.\n\nICSS underpins CSS Module support, and provides a low level syntax for other tools to implement CSS-module variations of their own.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            compileType: 'icss',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `auto`\n\nType: `Boolean|RegExp|Function`\nDefault: `'true'`\n\nAllows auto enable CSS modules based on filename.\n\n###### `Boolean`\n\nPossible values:\n\n- `true` - enable css modules for all files for which `/\\.module\\.\\w+$/i.test(filename)` return true\n- `false` - disable css modules\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            auto: true,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n###### `RegExp`\n\nEnable css modules for files based on the filename satisfying your regex check.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            auto: /\\.custom-module\\.\\w+$/i,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n###### `Function`\n\nEnable css modules for files based on the filename satisfying your filter function check.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            auto: (resourcePath) => resourcePath.endsWith('.custom-module.css'),\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `mode`\n\nType: `String|Function`\nDefault: `'local'`\n\nSetup `mode` option. You can omit the value when you want `local` mode.\n\n###### `String`\n\nPossible values - `local`, `global`, and `pure`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            mode: 'global',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n###### `Function`\n\nAllows set different values for the `mode` option based on a filename\n\nPossible return values - `local`, `global`, and `pure`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            // Callback must return \"local\", \"global\", or \"pure\" values\n            mode: (resourcePath) => {\n              if (/pure.css$/i.test(resourcePath)) {\n                return 'pure';\n              }\n\n              if (/global.css$/i.test(resourcePath)) {\n                return 'global';\n              }\n\n              return 'local';\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `localIdentName`\n\nType: `String`\nDefault: `'[hash:base64]'`\n\nAllows to configure the generated local ident name.\nSee [loader-utils's documentation](https://github.com/webpack/loader-utils#interpolatename) for more information on options.\n\nRecommendations:\n\n- use `'[path][name]__[local]'` for development\n- use `'[hash:base64]'` for production\n\nThe `[local]` placeholder contains original class.\n\n**Note:** all reserved (`<>:\"/\\|?*`) and control filesystem characters (excluding characters in the `[local]` placeholder) will be converted to `-`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            localIdentName: '[path][name]__[local]--[hash:base64:5]',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `localIdentContext`\n\nType: `String`\nDefault: `compiler.context`\n\nAllows to redefine basic loader context for local ident name.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            localIdentContext: path.resolve(__dirname, 'src'),\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `localIdentHashPrefix`\n\nType: `String`\nDefault: `undefined`\n\nAllows to add custom hash to generate more unique classes.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            localIdentHashPrefix: 'hash',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `localIdentRegExp`\n\nType: `String|RegExp`\nDefault: `undefined`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            localIdentRegExp: /page-(.*)\\.css/i,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `getLocalIdent`\n\nType: `Function`\nDefault: `undefined`\n\nAllows to specify a function to generate the classname.\nBy default we use built-in function to generate a classname.\nIf the custom function returns `null` or `undefined`, we fallback to the\nbuilt-in function to generate the classname.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            getLocalIdent: (context, localIdentName, localName, options) => {\n              return 'whatever_random_class_name';\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `namedExport`\n\nType: `Boolean`\nDefault: `false`\n\nEnables/disables ES modules named export for locals.\n\n> ⚠ Names of locals are converted to camelcase, i.e. the `exportLocalsConvention` option has `camelCaseOnly` value by default.\n\n> ⚠ It is not allowed to use JavaScript reserved words in css class names.\n\n**styles.css**\n\n```css\n.foo-baz {\n  color: red;\n}\n.bar {\n  color: blue;\n}\n```\n\n**index.js**\n\n```js\nimport { fooBaz, bar } from './styles.css';\n\nconsole.log(fooBaz, bar);\n```\n\nYou can enable a ES module named export using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          esModule: true,\n          modules: {\n            namedExport: true,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `exportGlobals`\n\nType: `Boolean`\nDefault: `false`\n\nAllow `css-loader` to export names from global class or id, so you can use that as local name.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            exportGlobals: true,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `exportLocalsConvention`\n\nType: `String`\nDefault: based on the `modules.namedExport` option value, if `true` - `camelCaseOnly`, otherwise `asIs`\n\nStyle of exported class names.\n\nBy default, the exported JSON keys mirror the class names (i.e `asIs` value).\n\n> ⚠ Only `camelCaseOnly` value allowed if you set the `namedExport` value to `true`.\n\n|         Name          |    Type    | Description                                                                                      |\n| :-------------------: | :--------: | :----------------------------------------------------------------------------------------------- |\n|     **`'asIs'`**      | `{String}` | Class names will be exported as is.                                                              |\n|   **`'camelCase'`**   | `{String}` | Class names will be camelized, the original class name will not to be removed from the locals    |\n| **`'camelCaseOnly'`** | `{String}` | Class names will be camelized, the original class name will be removed from the locals           |\n|    **`'dashes'`**     | `{String}` | Only dashes in class names will be camelized                                                     |\n|  **`'dashesOnly'`**   | `{String}` | Dashes in class names will be camelized, the original class name will be removed from the locals |\n\n**file.css**\n\n```css\n.class-name {\n}\n```\n\n**file.js**\n\n```js\nimport { className } from 'file.css';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          mode: 'local',\n          localsConvention: 'camelCase',\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `exportOnlyLocals`\n\nType: `Boolean`\nDefault: `false`\n\nExport only locals.\n\n**Useful** when you use **css modules** for pre-rendering (for example SSR).\nFor pre-rendering with `mini-css-extract-plugin` you should use this option instead of `style-loader!css-loader` **in the pre-rendering bundle**.\nIt doesn't embed CSS but only exports the identifier mappings.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          modules: {\n            exportOnlyLocals: true,\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType: `Boolean`\nDefault: depends on the `compiler.devtool` value\n\nBy default generation of source maps depends on the [`devtool`](https://webpack.js.org/configuration/devtool/) option. All values enable source map generation except `eval` and `false` value.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          sourceMap: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n### `importLoaders`\n\nType: `Number`\nDefault: `0`\n\nEnables/Disables or setups number of loaders applied before CSS loader.\n\nThe option `importLoaders` allows you to configure how many loaders before `css-loader` should be applied to `@import`ed resources.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 2,\n              // 0 => no loaders (default);\n              // 1 => postcss-loader;\n              // 2 => postcss-loader, sass-loader\n            },\n          },\n          'postcss-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\nThis may change in the future when the module system (i. e. webpack) supports loader matching by origin.\n\n### `esModule`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, `css-loader` generates JS modules that use the ES modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\n\nYou can enable a CommonJS modules syntax using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        loader: 'css-loader',\n        options: {\n          esModule: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Assets\n\nThe following `webpack.config.js` can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as [Data URLs](https://tools.ietf.org/html/rfc2397) and copy larger files to the output directory.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i,\n        loader: 'url-loader',\n        options: {\n          limit: 8192,\n        },\n      },\n    ],\n  },\n};\n```\n\n### Extract\n\nFor production builds it's recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on.\n\n- This can be achieved by using the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to extract the CSS when running in production mode.\n\n- As an alternative, if seeking better development performance and css outputs that mimic production. [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin) offers a hot module reload friendly, extended version of mini-css-extract-plugin. HMR real CSS files in dev, works like mini-css in non-dev\n\n### Pure CSS, CSS modules and PostCSS\n\nWhen you have pure CSS (without CSS modules), CSS modules and PostCSS in your project you can use this setup:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        // For pure CSS - /\\.css$/i,\n        // For Sass/SCSS - /\\.((c|sa|sc)ss)$/i,\n        // For Less - /\\.((c|le)ss)$/i,\n        test: /\\.((c|sa|sc)ss)$/i,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              // Run `postcss-loader` on each CSS `@import`, do not forget that `sass-loader` compile non CSS `@import`'s into a single file\n              // If you need run `sass-loader` and `postcss-loader` on each CSS `@import` please set it to `2`\n              importLoaders: 1,\n              // Automatically enable css modules for files satisfying `/\\.module\\.\\w+$/i` RegExp.\n              modules: { auto: true },\n            },\n          },\n          {\n            loader: 'postcss-loader',\n            options: { plugins: () => [postcssPresetEnv({ stage: 0 })] },\n          },\n          // Can be `less-loader`\n          {\n            loader: 'sass-loader',\n          },\n        ],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$/i,\n        loader: 'url-loader',\n        options: {\n          limit: 8192,\n        },\n      },\n    ],\n  },\n};\n```\n\n### Resolve unresolved URLs using an alias\n\n**index.css**\n\n```css\n.class {\n  background: url(/assets/unresolved/img.png);\n}\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  resolve: {\n    alias: {\n      '/assets/unresolved/img.png': path.resolve(\n        __dirname,\n        'assets/real-path-to-img/img.png'\n      ),\n    },\n  },\n};\n```\n\n### Separating `Interoperable CSS`-only and `CSS Module` features\n\nThe following setup is an example of allowing `Interoperable CSS` features only (such as `:import` and `:export`) without using further `CSS Module` functionality by setting `compileType` option for all files that do not match `*.module.scss` naming convention. This is for reference as having `ICSS` features applied to all files was default `css-loader` behavior before v4.\nMeanwhile all files matching `*.module.scss` are treated as `CSS Modules` in this example.\n\nAn example case is assumed where a project requires canvas drawing variables to be synchronized with CSS - canvas drawing uses the same color (set by color name in JavaScript) as HTML background (set by class name in CSS).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      // ...\n      // --------\n      // SCSS ALL EXCEPT MODULES\n      {\n        test: /\\.scss$/,\n        exclude: /\\.module\\.scss$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: {\n                compileType: 'icss'\n              }\n            }\n          },\n          {\n            loader: 'sass-loader'\n          },\n        ],\n      },\n      // --------\n      // SCSS MODULES\n      {\n        test: /\\.module\\.scss$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: {\n                compileType: 'module'\n              }\n            }\n          },\n          {\n            loader: 'sass-loader'\n          },\n        ],\n      },\n      // --------\n      // ...\n  },\n};\n```\n\n**variables.scss**\n\nFile treated as `ICSS`-only.\n\n```scss\n$colorBackground: red;\n:export {\n  colorBackgroundCanvas: $colorBackground;\n}\n```\n\n**Component.module.scss**\n\nFile treated as `CSS Module`.\n\n```scss\n@import 'variables.scss';\n.componentClass {\n  background-color: $colorBackground;\n}\n```\n\n**Component.jsx**\n\nUsing both `CSS Module` functionality as well as SCSS variables directly in JavaScript.\n\n```jsx\nimport svars from 'variables.scss';\nimport styles from 'Component.module.scss';\n\n// Render DOM with CSS modules class name\n// <div className={styles.componentClass}>\n//   <canvas ref={mountsCanvas}/>\n// </div>\n\n// Somewhere in JavaScript canvas drawing code use the variable directly\n// const ctx = mountsCanvas.current.getContext('2d',{alpha: false});\nctx.fillStyle = `${svars.colorBackgroundCanvas}`;\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/css-loader.svg\n[npm-url]: https://npmjs.com/package/css-loader\n[node]: https://img.shields.io/node/v/css-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/css-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/css-loader\n[tests]: https://github.com/webpack-contrib/css-loader/workflows/css-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/css-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/css-loader\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=css-loader\n[size-url]: https://packagephobia.now.sh/result?p=css-loader\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/css-loader/-/css-loader-5.0.1.tgz#9e4de0d6636a6266a585bd0900b422c85539d25f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/css-loader/-/css-loader-5.0.1.tgz",
    "hash": "9e4de0d6636a6266a585bd0900b422c85539d25f",
    "integrity": "sha512-cXc2ti9V234cq7rJzFKhirb2L2iPy8ZjALeVJAozXYz9te3r4eqLSixNAbMDJSgJEQywqXzs8gonxaboeKqwiw==",
    "registry": "npm",
    "packageName": "css-loader",
    "cacheIntegrity": "sha512-cXc2ti9V234cq7rJzFKhirb2L2iPy8ZjALeVJAozXYz9te3r4eqLSixNAbMDJSgJEQywqXzs8gonxaboeKqwiw== sha1-nk3g1mNqYmalhb0JALQiyFU50l8="
  },
  "registry": "npm",
  "hash": "9e4de0d6636a6266a585bd0900b422c85539d25f"
}