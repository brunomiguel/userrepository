import React, { ComponentProps, FC } from 'react';
import { SidebarAction } from './SidebarActions';
declare const TopBar: FC<{
    className: string;
}> & {
    Section: typeof TopBarSection;
    ToolBox: typeof TopBarToolBox;
    Avatar: typeof TopBarAvatar;
    Actions: typeof TopBarActions;
    Action: typeof TopBarAction;
    Divider: typeof TopBarDivider;
    Title: typeof TopBarTitle;
    Wrapper: typeof TopBarWrapper;
};
declare const TopBarWrapper: FC;
export declare const TopBarToolBox: FC<{
    className: string;
}>;
export declare const TopBarSection: FC<{
    className: string;
}>;
export declare const TopBarAvatar: {
    size: string;
};
export declare const TopBarActions: React.FC<{
    is?: React.ElementType<any> | undefined;
    className?: string | (<T extends readonly unknown[]>(...args: T) => string) | (string | (<T extends readonly unknown[]>(...args: T) => string))[] | undefined;
    style?: React.CSSProperties | undefined;
    border?: import("csstype").Property.Border<string | number> | undefined;
    borderBlock?: import("csstype").Property.BorderBlock<string | number> | undefined;
    borderBlockStart?: import("csstype").Property.BorderBlockStart<string | number> | undefined;
    borderBlockEnd?: import("csstype").Property.BorderBlockEnd<string | number> | undefined;
    borderInline?: import("csstype").Property.BorderInline<string | number> | undefined;
    borderInlineStart?: import("csstype").Property.BorderInlineStart<string | number> | undefined;
    borderInlineEnd?: import("csstype").Property.BorderInlineEnd<string | number> | undefined;
    borderWidth?: import("csstype").Property.BorderWidth<string | number> | undefined;
    borderBlockWidth?: import("csstype").Property.BorderBlockWidth<string | number> | undefined;
    borderBlockStartWidth?: import("csstype").Property.BorderBlockStartWidth<string | number> | undefined;
    borderBlockEndWidth?: import("csstype").Property.BorderBlockEndWidth<string | number> | undefined;
    borderInlineWidth?: import("csstype").Property.BorderInlineWidth<string | number> | undefined;
    borderInlineStartWidth?: import("csstype").Property.BorderInlineStartWidth<string | number> | undefined;
    borderInlineEndWidth?: import("csstype").Property.BorderInlineEndWidth<string | number> | undefined;
    borderStyle?: import("csstype").Property.BorderStyle | undefined;
    borderBlockStyle?: import("csstype").Property.BorderBlockStyle | undefined;
    borderBlockStartStyle?: import("csstype").Property.BorderBlockStartStyle | undefined;
    borderBlockEndStyle?: import("csstype").Property.BorderBlockEndStyle | undefined;
    borderInlineStyle?: import("csstype").Property.BorderInlineStyle | undefined;
    borderInlineStartStyle?: import("csstype").Property.BorderInlineStartStyle | undefined;
    borderInlineEndStyle?: import("csstype").Property.BorderInlineEndStyle | undefined;
    borderColor?: import("csstype").Property.BorderColor | undefined;
    borderBlockColor?: import("csstype").Property.BorderBlockColor | undefined;
    borderBlockStartColor?: import("csstype").Property.BorderBlockStartColor | undefined;
    borderBlockEndColor?: import("csstype").Property.BorderBlockEndColor | undefined;
    borderInlineColor?: import("csstype").Property.BorderInlineColor | undefined;
    borderInlineStartColor?: import("csstype").Property.BorderInlineStartColor | undefined;
    borderInlineEndColor?: import("csstype").Property.BorderInlineEndColor | undefined;
    borderRadius?: import("csstype").Property.BorderRadius<string | number> | undefined;
    borderStartStartRadius?: import("csstype").Property.BorderStartStartRadius<string | number> | undefined;
    borderStartEndRadius?: import("csstype").Property.BorderStartEndRadius<string | number> | undefined;
    borderEndStartRadius?: import("csstype").Property.BorderEndStartRadius<string | number> | undefined;
    borderEndEndRadius?: import("csstype").Property.BorderEndEndRadius<string | number> | undefined;
    color?: import("csstype").Property.Color | undefined;
    backgroundColor?: import("csstype").Property.BackgroundColor | undefined;
    bg?: import("csstype").Property.BackgroundColor | undefined;
    opacity?: import("csstype").Property.Opacity | undefined;
    alignItems?: import("csstype").Property.AlignItems | undefined;
    alignContent?: import("csstype").Property.AlignContent | undefined;
    justifyItems?: import("csstype").Property.JustifyItems | undefined;
    justifyContent?: import("csstype").Property.JustifyContent | undefined;
    flexWrap?: import("csstype").Property.FlexWrap | undefined;
    flexDirection?: import("csstype").Property.FlexDirection | undefined;
    flexGrow?: import("csstype").Property.FlexGrow | undefined;
    flexShrink?: import("csstype").Property.FlexShrink | undefined;
    flexBasis?: import("csstype").Property.FlexBasis<string | number> | undefined;
    justifySelf?: import("csstype").Property.JustifySelf | undefined;
    alignSelf?: import("csstype").Property.AlignSelf | undefined;
    order?: import("csstype").Property.Order | undefined;
    w?: import("csstype").Property.Width<string | number> | undefined;
    width?: import("csstype").Property.Width<string | number> | undefined;
    minWidth?: import("csstype").Property.MinWidth<string | number> | undefined;
    maxWidth?: import("csstype").Property.MaxWidth<string | number> | undefined;
    h?: import("csstype").Property.Height<string | number> | undefined;
    height?: import("csstype").Property.Height<string | number> | undefined;
    minHeight?: import("csstype").Property.MinHeight<string | number> | undefined;
    maxHeight?: import("csstype").Property.MaxHeight<string | number> | undefined;
    display?: import("csstype").Property.Display | undefined;
    verticalAlign?: import("csstype").Property.VerticalAlign<string | number> | undefined;
    overflow?: import("csstype").Property.Overflow | undefined;
    overflowX?: import("csstype").Property.OverflowX | undefined;
    overflowY?: import("csstype").Property.OverflowY | undefined;
    position?: import("csstype").Property.Position | undefined;
    zIndex?: import("csstype").Property.ZIndex | undefined;
    inset?: import("csstype").Property.Inset<string | number> | undefined;
    insetBlock?: import("csstype").Property.InsetBlock<string | number> | undefined;
    insetBlockStart?: import("csstype").Property.InsetBlockStart<string | number> | undefined;
    insetBlockEnd?: import("csstype").Property.InsetBlockEnd<string | number> | undefined;
    insetInline?: import("csstype").Property.InsetInline<string | number> | undefined;
    insetInlineStart?: import("csstype").Property.InsetInlineStart<string | number> | undefined;
    insetInlineEnd?: import("csstype").Property.InsetInlineEnd<string | number> | undefined;
    m?: import("csstype").Property.Margin<string | number> | undefined;
    margin?: import("csstype").Property.Margin<string | number> | undefined;
    mb?: import("csstype").Property.MarginBlock<string | number> | undefined;
    marginBlock?: import("csstype").Property.MarginBlock<string | number> | undefined;
    mbs?: import("csstype").Property.MarginBlockStart<string | number> | undefined;
    marginBlockStart?: import("csstype").Property.MarginBlockStart<string | number> | undefined;
    mbe?: import("csstype").Property.MarginBlockEnd<string | number> | undefined;
    marginBlockEnd?: import("csstype").Property.MarginBlockEnd<string | number> | undefined;
    mi?: import("csstype").Property.MarginInline<string | number> | undefined;
    marginInline?: import("csstype").Property.MarginInline<string | number> | undefined;
    mis?: import("csstype").Property.MarginInlineStart<string | number> | undefined;
    marginInlineStart?: import("csstype").Property.MarginInlineStart<string | number> | undefined;
    mie?: import("csstype").Property.MarginInlineEnd<string | number> | undefined;
    marginInlineEnd?: import("csstype").Property.MarginInlineEnd<string | number> | undefined;
    p?: import("csstype").Property.Padding<string | number> | undefined;
    padding?: import("csstype").Property.Padding<string | number> | undefined;
    pb?: import("csstype").Property.PaddingBlock<string | number> | undefined;
    paddingBlock?: import("csstype").Property.PaddingBlock<string | number> | undefined;
    pbs?: import("csstype").Property.PaddingBlockStart<string | number> | undefined;
    paddingBlockStart?: import("csstype").Property.PaddingBlockStart<string | number> | undefined;
    pbe?: import("csstype").Property.PaddingBlockEnd<string | number> | undefined;
    paddingBlockEnd?: import("csstype").Property.PaddingBlockEnd<string | number> | undefined;
    pi?: import("csstype").Property.PaddingInline<string | number> | undefined;
    paddingInline?: import("csstype").Property.PaddingInline<string | number> | undefined;
    pis?: import("csstype").Property.PaddingInlineStart<string | number> | undefined;
    paddingInlineStart?: import("csstype").Property.PaddingInlineStart<string | number> | undefined;
    pie?: import("csstype").Property.PaddingInlineEnd<string | number> | undefined;
    paddingInlineEnd?: import("csstype").Property.PaddingInlineEnd<string | number> | undefined;
    fontFamily?: import("csstype").Property.FontFamily | ("hero" | "h1" | "h2" | "h3" | "h4" | "h5" | "p1" | "p1m" | "p1b" | "p2" | "p2m" | "p2b" | "c1" | "c2" | "micro") | undefined;
    fontSize?: string | number | (string & {}) | undefined;
    fontStyle?: import("csstype").Property.FontStyle | undefined;
    fontWeight?: ("hero" | "h1" | "h2" | "h3" | "h4" | "h5" | "p1" | "p1m" | "p1b" | "p2" | "p2m" | "p2b" | "c1" | "c2" | "micro") | import("csstype").Property.FontWeight | undefined;
    letterSpacing?: string | number | undefined;
    lineHeight?: string | number | (string & {}) | (number & {}) | undefined;
    textAlign?: import("csstype").Property.TextAlign | undefined;
    textTransform?: import("csstype").Property.TextTransform | undefined;
    textDecorationLine?: import("csstype").Property.TextDecorationLine | undefined;
    elevation?: "0" | "1" | "2" | undefined;
    invisible?: boolean | undefined;
    withRichContent?: string | boolean | undefined;
    withTruncatedText?: boolean | undefined;
    size?: import("csstype").Property.BlockSize<string | number> | undefined;
    minSize?: import("csstype").Property.BlockSize<string | number> | undefined;
    maxSize?: import("csstype").Property.BlockSize<string | number> | undefined;
    fontScale?: ("hero" | "h1" | "h2" | "h3" | "h4" | "h5" | "p1" | "p1m" | "p1b" | "p2" | "p2m" | "p2b" | "c1" | "c2" | "micro") | undefined;
} & {
    children?: React.ReactNode;
} & Omit<React.AllHTMLAttributes<HTMLOrSVGElement>, "className"> & Omit<React.SVGAttributes<SVGElement>, keyof React.AllHTMLAttributes<HTMLOrSVGElement>> & React.RefAttributes<unknown> & {
    align?: "start" | "end" | "center" | undefined;
    stretch?: boolean | undefined;
    wrap?: boolean | undefined;
    vertical?: boolean | undefined;
    small?: boolean | undefined;
    medium?: boolean | undefined;
}>;
export declare const TopBarAction: FC<ComponentProps<typeof SidebarAction>>;
export declare const TopBarDivider: FC;
export declare const TopBarTitle: FC;
export default TopBar;
//# sourceMappingURL=TopBar.d.ts.map