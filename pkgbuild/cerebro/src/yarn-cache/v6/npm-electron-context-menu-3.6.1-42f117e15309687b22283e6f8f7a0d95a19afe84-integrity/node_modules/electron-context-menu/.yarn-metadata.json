{
  "manifest": {
    "name": "electron-context-menu",
    "version": "3.6.1",
    "description": "Context menu for your Electron app",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/electron-context-menu.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "scripts": {
      "start": "electron fixtures/fixture.js",
      "test": "xo && ava && tsd",
      "start-fixture2": "electron fixtures/fixture-menu.js",
      "start-fixture3": "electron fixtures/fixture-toggle.js"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "electron",
      "app",
      "context",
      "right-click",
      "menu",
      "extensible",
      "save",
      "image",
      "spellchecking",
      "spellcheck",
      "spelling",
      "spell",
      "check",
      "correct",
      "word",
      "words",
      "dictionary"
    ],
    "dependencies": {
      "cli-truncate": "^2.1.0",
      "electron-dl": "^3.2.1",
      "electron-is-dev": "^2.0.0"
    },
    "devDependencies": {
      "@types/node": "^15.0.1",
      "ava": "^2.4.0",
      "electron": "^12.0.6",
      "tsd": "^0.14.0",
      "xo": "^0.39.1"
    },
    "xo": {
      "envs": [
        "node",
        "browser"
      ]
    },
    "tsd": {
      "compilerOptions": {
        "lib": [
          "es2019",
          "dom"
        ]
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-context-menu-3.6.1-42f117e15309687b22283e6f8f7a0d95a19afe84-integrity/node_modules/electron-context-menu/package.json",
    "readmeFilename": "readme.md",
    "readme": "# electron-context-menu\n\n> Context menu for your [Electron](https://electronjs.org) app\n\n<img src=\"screenshot.png\" width=\"125\" align=\"right\">\n\nElectron doesn't have a built-in context menu. You're supposed to handle that yourself. But it's both tedious and hard to get right. This module gives you a nice extensible context menu with spellchecking and items like `Cut`/`Copy`/`Paste` for text, `Save Image` for images, and `Copy Link` for links. It also adds an `Inspect Element` menu item when in development to quickly view items in the inspector like in Chrome.\n\nThis package can only be used in the main process.\n\n## Install\n\n```\n$ npm install electron-context-menu\n```\n\n*Requires Electron 10 or later.*\n\n## Usage\n\n```js\nconst {app, BrowserWindow} = require('electron');\nconst contextMenu = require('electron-context-menu');\n\ncontextMenu({\n\tshowSaveImageAs: true\n});\n\nlet mainWindow;\n(async () => {\n\tawait app.whenReady();\n\n\tmainWindow = new BrowserWindow({\n\t\twebPreferences: {\n\t\t\tspellcheck: true\n\t\t}\n\t});\n})();\n```\n\nAdvanced example:\n\n```js\nconst {app, BrowserWindow, shell} = require('electron');\nconst contextMenu = require('electron-context-menu');\n\ncontextMenu({\n\tprepend: (defaultActions, parameters, browserWindow) => [\n\t\t{\n\t\t\tlabel: 'Rainbow',\n\t\t\t// Only show it when right-clicking images\n\t\t\tvisible: parameters.mediaType === 'image'\n\t\t},\n\t\t{\n\t\t\tlabel: 'Search Google for “{selection}”',\n\t\t\t// Only show it when right-clicking text\n\t\t\tvisible: parameters.selectionText.trim().length > 0,\n\t\t\tclick: () => {\n\t\t\t\tshell.openExternal(`https://google.com/search?q=${encodeURIComponent(parameters.selectionText)}`);\n\t\t\t}\n\t\t}\n\t]\n});\n\nlet mainWindow;\n(async () => {\n\tawait app.whenReady();\n\n\tmainWindow = new BrowserWindow({\n\t\twebPreferences: {\n\t\t\tspellcheck: true\n\t\t}\n\t});\n})();\n```\n\nThe return value of `contextMenu()` is a function that disposes of the created event listeners:\n\n```js\nconst dispose = contextMenu();\n\ndispose();\n```\n\n## API\n\n### contextMenu(options?)\n\nCreates a context menu and returns a dispose function.\n\n### options\n\nType: `object`\n\n#### window\n\nType: `BrowserWindow | BrowserView | WebViewTag | WebContents`\n\nWindow or WebView to add the context menu to.\n\nWhen not specified, the context menu will be added to all existing and new windows.\n\n#### prepend\n\nType: `Function`\n\nShould return an array of [MenuItem](https://electronjs.org/docs/api/menu-item/)'s to be prepended to the context menu.\n\nThe first argument is an array of default actions that can be used. The second argument is [this `parameters` object](https://electronjs.org/docs/api/web-contents/#event-context-menu). The third argument is the [BrowserWindow](https://electronjs.org/docs/api/browser-window/) the context menu was requested for. The fourth argument is the context menu event.\n\n`MenuItem` labels may contain the placeholder `{selection}` which will be replaced by the currently selected text as described in [`options.labels`](#labels).\n\n#### append\n\nType: `Function`\n\nShould return an array of [MenuItem](https://electronjs.org/docs/api/menu-item/)'s to be appended to the context menu.\n\nThe first argument is an array of default actions that can be used. The second argument is [this `parameters` object](https://electronjs.org/docs/api/web-contents/#event-context-menu). The third argument is the [BrowserWindow](https://electronjs.org/docs/api/browser-window/) the context menu was requested for. The fourth argument is the context menu event.\n\n`MenuItem` labels may contain the placeholder `{selection}` which will be replaced by the currently selected text as described in [`options.labels`](#labels).\n\n#### showLearnSpelling\n\nType: `boolean`\\\nDefault: `true`\n\nShow the `Learn Spelling {selection}` menu item when right-clicking text.\n\nEven if `true`, the `spellcheck` preference in browser window must still be enabled. It will also only show when right-clicking misspelled words.\n\n#### showLookUpSelection\n\nType: `boolean`\\\nDefault: `true`\n\nShow the `Look Up {selection}` menu item when right-clicking text.\n\n#### showSearchWithGoogle\n\nType: `boolean`\\\nDefault: `true`\n\nShow the `Search with Google` menu item when right-clicking text.\n\n#### showSelectAll\n\nType: `boolean`\\\nDefault: `false` on macOS, `true` on Windows and Linux\n\nShow the `Select All` menu item when right-clicking in a window.\n\n#### showCopyImage\n\nType: `boolean`\\\nDefault: `true`\n\nShow the `Copy Image` menu item when right-clicking on an image.\n\n#### showCopyImageAddress\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Copy Image Address` menu item when right-clicking on an image.\n\n#### showSaveImage\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Save Image` menu item when right-clicking on an image.\n\n#### showSaveImageAs\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Save Image As…` menu item when right-clicking on an image.\n\n#### showCopyVideoAddress\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Copy Video Address` menu item when right-clicking on a video.\n\n#### showSaveVideo\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Save Video` menu item when right-clicking on a video.\n\n#### showSaveVideoAs\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Save Video As…` menu item when right-clicking on a video.\n\n#### showCopyLink\n\nType: `boolean`\\\nDefault: `true`\n\nShow the `Copy Link` menu item when right-clicking on a link.\n\n#### showSaveLinkAs\n\nType: `boolean`\\\nDefault: `false`\n\nShow the `Save Link As…` menu item when right-clicking on a link.\n\n#### showInspectElement\n\nType: `boolean`\\\nDefault: [Only in development](https://github.com/sindresorhus/electron-is-dev)\n\nForce enable or disable the `Inspect Element` menu item.\n\n#### showServices\n\nType: `boolean`\\\nDefault: `false`\n\nShow the system `Services` submenu when right-clicking text on macOS.\n\nNote: Due to [a bug in the Electron implementation](https://github.com/electron/electron/issues/18476), this menu is not identical to the \"Services\" submenu in the context menus of native apps. Instead, it looks the same as the \"Services\" menu in the main App Menu. For this reason, it is currently disabled by default.\n\n#### labels\n\nType: `object`\\\nDefault: `{}`\n\nOverride labels for the default menu items. Useful for i18n.\n\nThe placeholder `{selection}` may be used in any label, and will be replaced by the currently selected text, trimmed to a maximum of 25 characters length. This is useful when localizing the `Look Up “{selection}”` menu item, but can also be used in custom menu items, for example, to implement a `Search Google for “{selection}”` menu item. If there is no selection, the `{selection}` placeholder will be replaced by an empty string. Normally this placeholder is only useful for menu items which will only be shown when there is text selected. This can be checked using `visible: parameters.selectionText.trim().length > 0` when implementing a custom menu item, as shown in the usage example above.\n\nFormat:\n\n```js\n{\n\tlabels: {\n\t\tcopy: 'Copiar',\n\t\tsaveImageAs: 'Guardar imagen como…',\n\t\tlookUpSelection: 'Consultar “{selection}”'\n\t}\n}\n```\n\n#### shouldShowMenu\n\nType: `Function`\n\nDetermines whether or not to show the menu. Can be useful if you for example have other code presenting a context menu in some contexts.\n\nThe second argument is [this `parameters` object](https://electronjs.org/docs/api/web-contents#event-context-menu).\n\nExample:\n\n```js\n{\n\t// Doesn't show the menu if the element is editable\n\tshouldShowMenu: (event, parameters) => !parameters.isEditable\n}\n```\n\n#### menu\n\nType: `Function`\n\nThis option lets you manually pick what menu items to include. It's meant for advanced needs. The default menu with the other options should be enough for most use-cases, and it ensures correct behavior, for example, correct order of menu items. So prefer the `append` and `prepend` option instead of `menu` whenever possible.\n\nThe function passed to this option is expected to return [`MenuItem[]`](https://electronjs.org/docs/api/menu-item/). The first argument the function receives is an array of default actions that can be used. These actions are functions that can take an object with a transform property (except for `separator` and `inspect`). The transform function will be passed the content of the action and can modify it if needed. If you use `transform` on `cut`, `copy`, or `paste`, they will convert rich text to plain text. The second argument is [this `parameters` object](https://electronjs.org/docs/api/web-contents/#event-context-menu). The third argument is the [BrowserWindow](https://electronjs.org/docs/api/browser-window/) the context menu was requested for. The fourth argument is an Array of menu items for dictionary suggestions. This should be used if you wish to implement spellcheck in your custom menu. The last argument is the context menu event.\n\nEven though you include an action, it will still only be shown/enabled when appropriate. For example, the `saveImage` action is only shown when right-clicking an image.\n\n`MenuItem` labels may contain the placeholder `{selection}` which will be replaced by the currently selected text as described in [`options.labels`](#labels).\n\nTo get spellchecking, “Correct Automatically”, and “Learn Spelling” in the menu, please enable the `spellcheck` preference in browser window: `new BrowserWindow({webPreferences: {spellcheck: true}})`\n\nThe following options are ignored when `menu` is used:\n\n- `showLookUpSelection`\n- `showSearchWithGoogle`\n- `showSelectAll`\n- `showCopyImage`\n- `showCopyImageAddress`\n- `showSaveImageAs`\n- `showCopyVideoAddress`\n- `showSaveVideo`\n- `showSaveVideoAs`\n- `showCopyLink`\n- `showSaveLinkAs`\n- `showInspectElement`\n- `showServices`\n\nDefault actions:\n\n- `spellCheck`\n- `learnSpelling`\n- `separator`\n- `lookUpSelection`\n- `searchWithGoogle`\n- `cut`\n- `copy`\n- `paste`\n- `selectAll`\n- `saveImage`\n- `saveImageAs`\n- `saveVideo`\n- `saveVideoAs`\n- `copyImage`\n- `copyImageAddress`\n- `copyVideoAddress`\n- `copyLink`\n- `saveLinkAs`\n- `inspect`\n- `services`\n\nExample for actions:\n\n```js\n{\n\tmenu: (actions, props, browserWindow, dictionarySuggestions) => [\n\t\t...dictionarySuggestions,\n\t\tactions.separator(),\n\t\tactions.copyLink({\n\t\t\ttransform: content => `modified_link_${content}`\n\t\t}),\n\t\tactions.separator(),\n\t\t{\n\t\t\tlabel: 'Unicorn'\n\t\t},\n\t\tactions.separator(),\n\t\tactions.copy({\n\t\t\ttransform: content => `modified_copy_${content}`\n\t\t}),\n\t\t{\n\t\t\tlabel: 'Invisible',\n\t\t\tvisible: false\n\t\t},\n\t\tactions.paste({\n\t\t\ttransform: content => `modified_paste_${content}`\n\t\t})\n\t]\n}\n```\n\n#### onShow\n\nType: `Function`\n\nCalled when the context menu is shown.\n\nThe function receives an [`Event` object](https://developer.mozilla.org/en-US/docs/Web/API/Event).\n\n#### onClose\n\nType: `Function`\n\nCalled when the context menu is closed.\n\nThe function receives an [`Event` object](https://developer.mozilla.org/en-US/docs/Web/API/Event).\n\n## Related\n\n- [electron-util](https://github.com/sindresorhus/electron-util) - Useful utilities for developing Electron apps and modules\n- [electron-debug](https://github.com/sindresorhus/electron-debug) - Adds useful debug features to your Electron app\n- [electron-store](https://github.com/sindresorhus/electron-store) - Save and load data like user preferences, app state, cache, etc\n- [electron-reloader](https://github.com/sindresorhus/electron-reloader) - Simple auto-reloading for Electron apps during development\n- [electron-serve](https://github.com/sindresorhus/electron-serve) - Static file serving for Electron apps\n- [electron-unhandled](https://github.com/sindresorhus/electron-unhandled) - Catch unhandled errors and promise rejections in your Electron app\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-context-menu/-/electron-context-menu-3.6.1.tgz#42f117e15309687b22283e6f8f7a0d95a19afe84",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-context-menu/-/electron-context-menu-3.6.1.tgz",
    "hash": "42f117e15309687b22283e6f8f7a0d95a19afe84",
    "integrity": "sha512-lcpO6tzzKUROeirhzBjdBWNqayEThmdW+2I2s6H6QMrwqTVyT3EK47jW3Nxm60KTxl5/bWfEoIruoUNn57/QkQ==",
    "registry": "npm",
    "packageName": "electron-context-menu",
    "cacheIntegrity": "sha512-lcpO6tzzKUROeirhzBjdBWNqayEThmdW+2I2s6H6QMrwqTVyT3EK47jW3Nxm60KTxl5/bWfEoIruoUNn57/QkQ== sha1-QvEX4VMJaHsiKD5vj3oNlaGa/oQ="
  },
  "registry": "npm",
  "hash": "42f117e15309687b22283e6f8f7a0d95a19afe84"
}