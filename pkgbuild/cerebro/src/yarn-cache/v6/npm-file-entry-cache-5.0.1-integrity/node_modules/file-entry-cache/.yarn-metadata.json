{
  "manifest": {
    "name": "file-entry-cache",
    "version": "5.0.1",
    "description": "Super simple cache for file metadata, useful for process that work o a given series of files and that only need to repeat the job on the changed ones since the previous run of the process",
    "repository": {
      "type": "git",
      "url": "https://github.com/royriojas/file-entry-cache.git"
    },
    "license": "MIT",
    "author": {
      "name": "Roy Riojas",
      "url": "http://royriojas.com"
    },
    "main": "cache.js",
    "files": [
      "cache.js"
    ],
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "beautify": "esbeautifier 'cache.js' 'test/**/*.js' 'perf.js'",
      "beautify-check": "npm run beautify -- -k",
      "eslint": "eslinter 'cache.js' 'specs/**/*.js' 'perf.js'",
      "lint": "npm run beautify && npm run eslint",
      "verify": "npm run beautify-check && npm run eslint",
      "install-hooks": "prepush install && changelogx install-hook && precommit install",
      "changelog": "changelogx -f markdown -o ./changelog.md",
      "do-changelog": "npm run changelog && git add ./changelog.md && git commit -m 'DOC: Generate changelog' --no-verify",
      "pre-v": "npm run test",
      "post-v": "npm run do-changelog && git push --no-verify && git push --tags --no-verify",
      "bump-major": "npm run pre-v && npm version major -m 'BLD: Release v%s' && npm run post-v",
      "bump-minor": "npm run pre-v && npm version minor -m 'BLD: Release v%s' && npm run post-v",
      "bump-patch": "npm run pre-v && npm version patch -m 'BLD: Release v%s' && npm run post-v",
      "test": "npm run verify --silent && mocha -R spec test/specs",
      "perf": "node perf.js",
      "cover": "istanbul cover test/runner.js html text-summary",
      "watch": "watch-run -i -p 'test/specs/**/*.js' istanbul cover test/runner.js html text-summary"
    },
    "prepush": [
      "npm run verify"
    ],
    "precommit": [
      "npm run verify"
    ],
    "keywords": [
      "file cache",
      "task cache files",
      "file cache",
      "key par",
      "key value",
      "cache"
    ],
    "changelogx": {
      "ignoreRegExp": [
        "BLD: Release",
        "DOC: Generate Changelog",
        "Generated Changelog"
      ],
      "issueIDRegExp": "#(\\d+)",
      "commitURL": "https://github.com/royriojas/file-entry-cache/commit/{0}",
      "authorURL": "https://github.com/{0}",
      "issueIDURL": "https://github.com/royriojas/file-entry-cache/issues/{0}",
      "projectName": "file-entry-cache"
    },
    "devDependencies": {
      "chai": "^3.2.0",
      "changelogx": "3.0.0",
      "commander": "^2.6.0",
      "del": "^2.0.2",
      "esbeautifier": "^4.2.11",
      "eslinter": "^2.3.3",
      "glob-expand": "^0.1.0",
      "istanbul": "^0.3.6",
      "mocha": "^2.1.0",
      "precommit": "^1.1.5",
      "prepush": "^3.1.4",
      "proxyquire": "^1.3.1",
      "sinon": "^1.12.2",
      "sinon-chai": "^2.7.0",
      "watch-run": "^1.2.1",
      "write": "^0.3.1"
    },
    "dependencies": {
      "flat-cache": "^2.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-file-entry-cache-5.0.1-integrity/node_modules/file-entry-cache/package.json",
    "readmeFilename": "README.md",
    "readme": "# file-entry-cache\n> Super simple cache for file metadata, useful for process that work o a given series of files\n> and that only need to repeat the job on the changed ones since the previous run of the process â€” Edit\n\n[![NPM Version](http://img.shields.io/npm/v/file-entry-cache.svg?style=flat)](https://npmjs.org/package/file-entry-cache)\n[![Build Status](http://img.shields.io/travis/royriojas/file-entry-cache.svg?style=flat)](https://travis-ci.org/royriojas/file-entry-cache)\n\n## install\n\n```bash\nnpm i --save file-entry-cache\n```\n\n## Usage\n\nThe module exposes two functions `create` and `createFromFile`.\n\n## `create(cacheName, [directory, useCheckSum])`\n- **cacheName**: the name of the cache to be created\n- **directory**: Optional the directory to load the cache from\n- **usecheckSum**: Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file.\n\n## `createFromFile(pathToCache, [useCheckSum])`\n- **pathToCache**: the path to the cache file (this combines the cache name and directory)\n- **useCheckSum**: Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file.\n\n```js\n// loads the cache, if one does not exists for the given\n// Id a new one will be prepared to be created\nvar fileEntryCache = require('file-entry-cache');\n\nvar cache = fileEntryCache.create('testCache');\n\nvar files = expand('../fixtures/*.txt');\n\n// the first time this method is called, will return all the files\nvar oFiles = cache.getUpdatedFiles(files);\n\n// this will persist this to disk checking each file stats and\n// updating the meta attributes `size` and `mtime`.\n// custom fields could also be added to the meta object and will be persisted\n// in order to retrieve them later\ncache.reconcile();\n\n// use this if you want the non visited file entries to be kept in the cache\n// for more than one execution\n//\n// cache.reconcile( true /* noPrune */)\n\n// on a second run\nvar cache2 = fileEntryCache.create('testCache');\n\n// will return now only the files that were modified or none\n// if no files were modified previous to the execution of this function\nvar oFiles = cache.getUpdatedFiles(files);\n\n// if you want to prevent a file from being considered non modified\n// something useful if a file failed some sort of validation\n// you can then remove the entry from the cache doing\ncache.removeEntry('path/to/file'); // path to file should be the same path of the file received on `getUpdatedFiles`\n// that will effectively make the file to appear again as modified until the validation is passed. In that\n// case you should not remove it from the cache\n\n// if you need all the files, so you can determine what to do with the changed ones\n// you can call\nvar oFiles = cache.normalizeEntries(files);\n\n// oFiles will be an array of objects like the following\nentry = {\n  key: 'some/name/file', the path to the file\n  changed: true, // if the file was changed since previous run\n  meta: {\n    size: 3242, // the size of the file\n    mtime: 231231231, // the modification time of the file\n    data: {} // some extra field stored for this file (useful to save the result of a transformation on the file\n  }\n}\n\n```\n\n## Motivation for this module\n\nI needed a super simple and dumb **in-memory cache** with optional disk persistence (write-back cache) in order to make\na script that will beautify files with `esformatter` to execute only on the files that were changed since the last run.\n\nIn doing so the process of beautifying files was reduced from several seconds to a small fraction of a second.\n\nThis module uses [flat-cache](https://www.npmjs.com/package/flat-cache) a super simple `key/value` cache storage with\noptional file persistance.\n\nThe main idea is to read the files when the task begins, apply the transforms required, and if the process succeed,\nthen store the new state of the files. The next time this module request for `getChangedFiles` will return only\nthe files that were modified. Making the process to end faster.\n\nThis module could also be used by processes that modify the files applying a transform, in that case the result of the\ntransform could be stored in the `meta` field, of the entries. Anything added to the meta field will be persisted.\nThose processes won't need to call `getChangedFiles` they will instead call `normalizeEntries` that will return the\nentries with a `changed` field that can be used to determine if the file was changed or not. If it was not changed\nthe transformed stored data could be used instead of actually applying the transformation, saving time in case of only\na few files changed.\n\nIn the worst case scenario all the files will be processed. In the best case scenario only a few of them will be processed.\n\n## Important notes\n- The values set on the meta attribute of the entries should be `stringify-able` ones if possible, flat-cache uses `circular-json` to try to persist circular structures, but this should be considered experimental. The best results are always obtained with non circular values\n- All the changes to the cache state are done to memory first and only persisted after reconcile.\n\n## License\n\nMIT\n\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Roy Riojas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
    "hash": "",
    "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
    "registry": "npm",
    "packageName": "file-entry-cache",
    "cacheIntegrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g== sha1-yg9u+m3T1WEzP7FFFQZcL6/fQ5w="
  },
  "registry": "npm",
  "hash": "6c2836f6272db8168a530c00acae28b826aa0e02d9732b0214b98cfd89ff143a2a9dd87ff6f36e41f5d10ef4ee5ca2f17c3fc9b594062854fc30670904aeb8e2"
}