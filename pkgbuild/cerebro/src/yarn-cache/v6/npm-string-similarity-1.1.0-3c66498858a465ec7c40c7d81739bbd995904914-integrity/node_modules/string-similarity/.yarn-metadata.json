{
  "manifest": {
    "name": "string-similarity",
    "version": "1.1.0",
    "description": "Finds degree of similarity between strings, based on Dice's Coefficient, which is mostly better than Levenshtein distance.",
    "main": "compare-strings.js",
    "scripts": {
      "test": "gulp test"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/aceakash/string-similarity.git"
    },
    "keywords": [
      "strings",
      "similar",
      "difference",
      "similarity",
      "compare",
      "comparison",
      "degree",
      "match",
      "matching",
      "dice",
      "levenshtein"
    ],
    "author": {
      "name": "Akash Kurdekar",
      "email": "npm@kurdekar.com",
      "url": "http://untilfalse.com/"
    },
    "license": "ISC",
    "devDependencies": {
      "gulp": "^3.9.1",
      "gulp-jasmine": "^2.3.0",
      "gulp-watch": "^4.3.6"
    },
    "dependencies": {
      "lodash": "^4.13.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-string-similarity-1.1.0-3c66498858a465ec7c40c7d81739bbd995904914-integrity/node_modules/string-similarity/package.json",
    "readmeFilename": "README.md",
    "readme": "string-similarity\n=================\n\nFinds degree of similarity between two strings, based on [Dice's Coefficient](http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient), which is mostly better than [Levenshtein distance](http://en.wikipedia.org/wiki/Levenshtein_distance).\n\n## Usage\nInstall using:\n\n```shell\nnpm install string-similarity --save\n```\n\nIn your code:\n\n```javascript\nvar stringSimilarity = require('string-similarity');\n\nvar similarity = stringSimilarity.compareTwoStrings('healed', 'sealed'); \n\nvar matches = stringSimilarity.findBestMatch('healed', ['edward', 'sealed', 'theatre']);\n```\n## API\n\nRequiring the module gives an object with two methods:\n\n### compareTwoStrings(string1, string2)\n\nReturns a fraction between 0 and 1, which indicates the degree of similarity between the two strings. 0 indicates completely different strings, 1 indicates identical strings. The comparison is case-insensitive.\n\n##### Arguments\n  \n1. string1 (string): The first string\n2. string2 (string): The second string\n  \nOrder does not make a difference.\n  \n##### Returns\n  \n(number): A fraction from 0 to 1, both inclusive. Higher number indicates more similarity.\n\n##### Examples\n  \n```javascript\nstringSimilarity.compareTwoStrings('healed', 'sealed');\n// → 0.8\n\nstringSimilarity.compareTwoStrings('Olive-green table for sale, in extremely good condition.', \n  'For sale: table in very good  condition, olive green in colour.');\n// → 0.7073170731707317\n\nstringSimilarity.compareTwoStrings('Olive-green table for sale, in extremely good condition.', \n  'For sale: green Subaru Impreza, 210,000 miles');\n// → 0.3013698630136986\n\nstringSimilarity.compareTwoStrings('Olive-green table for sale, in extremely good condition.', \n  'Wanted: mountain bike with at least 21 gears.');\n// → 0.11267605633802817\n```\n\n### findBestMatch(mainString, targetStrings)\n\nCompares `mainString` against each string in `targetStrings`.\n\n##### Arguments\n\n1. mainString (string): The string to match each target string against.\n2. targetStrings (Array): Each string in this array will be matched against the main string.\n\n##### Returns\n(Object): An object with a `ratings` property, which gives a similarity rating for each target string, and a `bestMatch` property, which specifies which target string was most similar to the main string.\n\n##### Examples\n```javascript\nstringSimilarity.findBestMatch('Olive-green table for sale, in extremely good condition.', [\n  'For sale: green Subaru Impreza, 210,000 miles', \n  'For sale: table in very good condition, olive green in colour.', \n  'Wanted: mountain bike with at least 21 gears.'\n]);\n// → \n{ ratings:\n   [ { target: 'For sale: green Subaru Impreza, 210,000 miles',\n       rating: 0.3013698630136986 },\n     { target: 'For sale: table in very good condition, olive green in colour.',\n       rating: 0.7073170731707317 },\n     { target: 'Wanted: mountain bike with at least 21 gears.',\n       rating: 0.11267605633802817 } ],\n  bestMatch:\n   { target: 'For sale: table in very good condition, olive green in colour.',\n     rating: 0.7073170731707317 } }\n```\n\n##Build Status\n![Build status](https://codeship.com/projects/2aa453d0-0959-0134-8a76-4abcb29fe9b4/status?branch=master)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/string-similarity/-/string-similarity-1.1.0.tgz#3c66498858a465ec7c40c7d81739bbd995904914",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/string-similarity/-/string-similarity-1.1.0.tgz",
    "hash": "3c66498858a465ec7c40c7d81739bbd995904914",
    "integrity": "sha512-x+Ul/yDujT1PIgcKuP6NP71VgoB+NKY8ccoH2nrfnFcYH2gtoRE0XLpUaHBIx4ZdpIWnYzWAsjp2QO+ZRC3Fjg==",
    "registry": "npm",
    "packageName": "string-similarity",
    "cacheIntegrity": "sha512-x+Ul/yDujT1PIgcKuP6NP71VgoB+NKY8ccoH2nrfnFcYH2gtoRE0XLpUaHBIx4ZdpIWnYzWAsjp2QO+ZRC3Fjg== sha1-PGZJiFikZex8QMfYFzm72ZWQSRQ="
  },
  "registry": "npm",
  "hash": "3c66498858a465ec7c40c7d81739bbd995904914"
}