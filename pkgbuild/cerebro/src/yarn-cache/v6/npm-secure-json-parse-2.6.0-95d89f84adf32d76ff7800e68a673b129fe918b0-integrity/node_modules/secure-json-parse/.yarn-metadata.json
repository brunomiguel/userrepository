{
  "manifest": {
    "name": "secure-json-parse",
    "version": "2.6.0",
    "description": "JSON parse with prototype poisoning protection",
    "main": "index.js",
    "types": "types/index.d.ts",
    "scripts": {
      "benchmark": "cd benchmarks && npm install && npm run all",
      "lint": "standard",
      "test": "nyc npm run test:unit && npm run test:typescript",
      "test:unit": "tape \"test/*.test.js\"",
      "test:typescript": "tsd",
      "test:browser": "airtap test/*.test.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/fastify/secure-json-parse.git"
    },
    "keywords": [
      "JSON",
      "parse",
      "safe",
      "security",
      "prototype",
      "pollution"
    ],
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/fastify/secure-json-parse/issues"
    },
    "homepage": "https://github.com/fastify/secure-json-parse#readme",
    "devDependencies": {
      "airtap": "^4.0.1",
      "airtap-playwright": "^1.0.1",
      "nyc": "^14.1.1",
      "playwright": "^1.7.1",
      "standard": "^17.0.0",
      "tape": "^5.1.1",
      "tsd": "^0.24.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-secure-json-parse-2.6.0-95d89f84adf32d76ff7800e68a673b129fe918b0-integrity/node_modules/secure-json-parse/package.json",
    "readmeFilename": "README.md",
    "readme": "# secure-json-parse\n\n![CI](https://github.com/fastify/secure-json-parse/workflows/CI/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/secure-json-parse.svg?style=flat)](https://www.npmjs.com/package/secure-json-parse)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\n`JSON.parse()` drop-in replacement with prototype poisoning protection.\n\n## Introduction\n\nConsider this:\n\n```js\n> const a = '{\"__proto__\":{ \"b\":5}}';\n'{\"__proto__\":{ \"b\":5}}'\n\n> const b = JSON.parse(a);\n{ __proto__: { b: 5 } }\n\n> b.b;\nundefined\n\n> const c = Object.assign({}, b);\n{}\n\n> c.b\n5\n```\n\nThe problem is that `JSON.parse()` retains the `__proto__` property as a plain object key. By\nitself, this is not a security issue. However, as soon as that object is assigned to another or\niterated on and values copied, the `__proto__` property leaks and becomes the object's prototype.\n\n## Install\n```\nnpm i secure-json-parse\n```\n\n## Usage\n\nPass the option object as a second (or third) parameter for configuring the action to take in case of a bad JSON, if nothing is configured, the default is to throw a `SyntaxError`.<br/>\nYou can choose which action to perform in case `__proto__` is present, and in case `constructor.prototype` is present.\n\n```js\nconst sjson = require('secure-json-parse')\n\nconst goodJson = '{ \"a\": 5, \"b\": 6 }'\nconst badJson = '{ \"a\": 5, \"b\": 6, \"__proto__\": { \"x\": 7 }, \"constructor\": {\"prototype\": {\"bar\": \"baz\"} } }'\n\nconsole.log(JSON.parse(goodJson), sjson.parse(goodJson, { protoAction: 'remove', constructorAction: 'remove' }))\nconsole.log(JSON.parse(badJson), sjson.parse(badJson, { protoAction: 'remove', constructorAction: 'remove' }))\n```\n\n## API\n\n### `sjson.parse(text, [reviver], [options])`\n\nParses a given JSON-formatted text into an object where:\n- `text` - the JSON text string.\n- `reviver` - the `JSON.parse()` optional `reviver` argument.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the result object.\n        - `'ignore'` - skips all validation (same as calling `JSON.parse()` directly).\n    - `constructorAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `constructor.prototype` key is found. This is the default value.\n        - `'remove'` - deletes any `constructor` keys from the result object.\n        - `'ignore'` - skips all validation (same as calling `JSON.parse()` directly).\n\n### `sjson.scan(obj, [options])`\n\nScans a given object for prototype properties where:\n- `obj` - the object being scanned.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the input `obj`.\n    - `constructorAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `constructor.prototype` key is found. This is the default value.\n        - `'remove'` - deletes any `constructor` keys from the input `obj`.\n\n## Benchmarks\n\nMachine: 2,7 GHz Quad-Core Intel Core i7\n\n```\nv14.8.0\n\n> node ignore.js\n\nJSON.parse x 679,376 ops/sec ±1.15% (84 runs sampled)\nsecure-json-parse x 649,605 ops/sec ±0.58% (87 runs sampled)\nreviver x 244,414 ops/sec ±1.05% (88 runs sampled)\nFastest is JSON.parse\n\n> node no__proto__.js\n\nJSON.parse x 652,190 ops/sec ±0.67% (86 runs sampled)\nsecure-json-parse x 589,785 ops/sec ±1.01% (88 runs sampled)\nreviver x 218,075 ops/sec ±1.58% (87 runs sampled)\nFastest is JSON.parse\n\n> node remove.js\n\nJSON.parse x 683,527 ops/sec ±0.62% (88 runs sampled)\nsecure-json-parse x 316,926 ops/sec ±0.63% (87 runs sampled)\nreviver x 214,167 ops/sec ±0.63% (86 runs sampled)\nFastest is JSON.parse\n\n> node throw.js\n\nJSON.parse x 682,548 ops/sec ±0.60% (88 runs sampled)\nJSON.parse error x 170,716 ops/sec ±0.93% (87 runs sampled)\nsecure-json-parse x 104,483 ops/sec ±0.62% (87 runs sampled)\nreviver x 114,197 ops/sec ±0.63% (87 runs sampled)\nFastest is JSON.parse\n```\n\n# Acknowledgements\nThis project has been forked from [hapijs/bourne](https://github.com/hapijs/bourne).\nAll the credits before the commit [4690682](https://github.com/hapijs/bourne/commit/4690682c6cdaa06590da7b2485d5df91c09da889) goes to the hapijs/bourne project contributors.\nAfter, the project will be maintained by the Fastify team.\n\n# License\nLicensed under BSD-3-Clause.\n",
    "licenseText": "Copyright (c) 2019 The Fastify Team\nCopyright (c) 2019, Sideway Inc, and project contributors  \nAll rights reserved.\n\nThe complete list of contributors can be found at:\n- https://github.com/hapijs/bourne/graphs/contributors\n- https://github.com/fastify/secure-json-parse/graphs/contributors\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/secure-json-parse/-/secure-json-parse-2.6.0.tgz#95d89f84adf32d76ff7800e68a673b129fe918b0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/secure-json-parse/-/secure-json-parse-2.6.0.tgz",
    "hash": "95d89f84adf32d76ff7800e68a673b129fe918b0",
    "integrity": "sha512-B9osKohb6L+EZ6Kve3wHKfsAClzOC/iISA2vSuCe5Jx5NAKiwitfxx8ZKYapHXr0sYRj7UZInT7pLb3rp2Yx6A==",
    "registry": "npm",
    "packageName": "secure-json-parse",
    "cacheIntegrity": "sha512-B9osKohb6L+EZ6Kve3wHKfsAClzOC/iISA2vSuCe5Jx5NAKiwitfxx8ZKYapHXr0sYRj7UZInT7pLb3rp2Yx6A== sha1-ldifhK3zLXb/eADmimc7Ep/pGLA="
  },
  "registry": "npm",
  "hash": "95d89f84adf32d76ff7800e68a673b129fe918b0"
}