{
  "manifest": {
    "name": "fast-redact",
    "version": "3.1.2",
    "description": "very fast object redaction",
    "main": "index.js",
    "scripts": {
      "test": "tap test",
      "posttest": "standard index.js 'lib/*.js' 'example/*.js' benchmark/index.js test/index.js | snazzy",
      "cov": "tap --cov test",
      "cov-ui": "tap --coverage-report=html test",
      "ci": "tap --cov --100 test",
      "bench": "node benchmark"
    },
    "keywords": [
      "redact",
      "censor",
      "performance",
      "performant",
      "gdpr",
      "fast",
      "speed",
      "serialize",
      "stringify"
    ],
    "author": {
      "name": "David Mark Clements",
      "email": "david.clements@nearform.com"
    },
    "license": "MIT",
    "devDependencies": {
      "fastbench": "^1.0.1",
      "pino-noir": "^2.2.1",
      "snazzy": "^8.0.0",
      "standard": "^12.0.1",
      "tap": "^12.5.2"
    },
    "engines": {
      "node": ">=6"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidmarkclements/fast-redact.git"
    },
    "bugs": {
      "url": "https://github.com/davidmarkclements/fast-redact/issues"
    },
    "homepage": "https://github.com/davidmarkclements/fast-redact#readme",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-fast-redact-3.1.2-d58e69e9084ce9fa4c1a6fa98a3e1ecf5d7839aa-integrity/node_modules/fast-redact/package.json",
    "readmeFilename": "readme.md",
    "readme": "# fast-redact\n\nvery fast object redaction\n\n[![Build Status](https://travis-ci.org/davidmarkclements/fast-redact.svg?branch=master)](https://travis-ci.org/davidmarkclements/fast-redact)\n\n## Default Usage\n\nBy default, `fast-redact` serializes an object with `JSON.stringify`, censoring any \ndata at paths specified:\n\n```js\nconst fastRedact = require('fast-redact')\nconst fauxRequest = {\n  headers: {\n    host: 'http://example.com',\n    cookie: `oh oh we don't want this exposed in logs in etc.`,\n    referer: `if we're cool maybe we'll even redact this`\n  }\n}\nconst redact = fastRedact({\n  paths: ['headers.cookie', 'headers.referer']\n})\n\nconsole.log(redact(fauxRequest))\n// {\"headers\":{\"host\":\"http://example.com\",\"cookie\":\"[REDACTED]\",\"referer\":\"[REDACTED]\"}}\n```\n\n## API\n\n### `require('fast-redact')({paths, censor, serialize}) => Function`\n\nWhen called without any options, or with a zero length `paths` array, \n`fast-redact` will return  `JSON.stringify` or the `serialize` option, if set.\n\n#### `paths` – `Array`\n\nAn array of strings describing the nested location of a key in an object.\n\nThe syntax follows that of the EcmaScript specification, that is any JavaScript\npath is accepted – both bracket and dot notation is supported. For instance in \neach of the following cases, the `c` property will be redacted: `a.b.c`,`a['b'].c`, \n`a[\"b\"].c`, `a[``b``].c`. Since bracket notation is supported, array indices are also\nsupported `a[0].b` would redact the `b` key in the first object of the `a` array. \n\nLeading brackets are also allowed, for instance `[\"a\"].b.c` will work.\n\n##### Wildcards\n\nIn addition to static paths, asterisk wildcards are also supported.\n\nWhen an asterisk is place in the final position it will redact all keys within the\nparent object. For instance `a.b.*` will redact all keys in the `b` object. Similarly\nfor arrays `a.b[*]` will redact all elements of an array (in truth it actually doesn't matter \nwhether `b` is in an object or array in either case, both notation styles will work).\n\nWhen an asterisk is in an intermediate or first position, the paths following the asterisk will \nbe redacted for every object within the parent.\n\nFor example:\n\n```js\nconst fastRedact = require('fast-redact')\nconst redact = fastRedact({paths: ['*.c.d']})\nconst obj = {\n  x: {c: {d: 'hide me', e: 'leave me be'}},\n  y: {c: {d: 'and me', f: 'I want to live'}},\n  z: {c: {d: 'and also I', g: 'I want to run in a stream'}}\n}\nconsole.log(redact(obj)) \n// {\"x\":{\"c\":{\"d\":\"[REDACTED]\",\"e\":\"leave me be\"}},\"y\":{\"c\":{\"d\":\"[REDACTED]\",\"f\":\"I want to live\"}},\"z\":{\"c\":{\"d\":\"[REDACTED]\",\"g\":\"I want to run in a stream\"}}}\n```\n\nAnother example with a nested array:\n\n```js\nconst fastRedact = require('..')\nconst redact = fastRedact({paths: ['a[*].c.d']})\nconst obj = {\n  a: [\n    {c: {d: 'hide me', e: 'leave me be'}},\n    {c: {d: 'and me', f: 'I want to live'}},\n    {c: {d: 'and also I', g: 'I want to run in a stream'}}\n  ]\n}\nconsole.log(redact(obj)) \n// {\"a\":[{\"c\":{\"d\":\"[REDACTED]\",\"e\":\"leave me be\"}},{\"c\":{\"d\":\"[REDACTED]\",\"f\":\"I want to live\"}},{\"c\":{\"d\":\"[REDACTED]\",\"g\":\"I want to run in a stream\"}}]}\n```\n\n#### `remove` - `Boolean` - `[false]`\n\nThe `remove` option, when set to `true` will cause keys to be removed from the \nserialized output. \n\nSince the implementation exploits the fact that `undefined` keys are ignored\nby `JSON.stringify` the `remove` option may *only* be used when `JSON.stringify`\nis the serializer (this is the default) – otherwise `fast-redact` will throw. \n\nIf supplying a custom serializer that has the same behavior (removing keys \nwith `undefined` values), this restriction can be bypassed by explicitly setting \nthe `censor` to `undefined`.\n\n\n#### `censor` – `<Any type>` – `('[REDACTED]')`\n\nThis is the value which overwrites redacted properties. \n\nSetting `censor` to `undefined` will cause properties to removed as long as this is \nthe behavior of the `serializer` – which defaults to `JSON.stringify`, which does \nremove `undefined` properties.\n\nSetting `censor` to a function will cause `fast-redact` to invoke it with the original \nvalue. The output of the `censor` function sets the redacted value.\nPlease note that asynchronous functions are not supported. \n\n#### `serialize` – `Function | Boolean` – `(JSON.stringify)`\n\nThe `serialize` option may either be a function or a boolean. If a function is supplied, this\nwill be used to `serialize` the redacted object. It's important to understand that for \nperformance reasons `fast-redact` *mutates* the original object, then serializes, then \nrestores the original values. So the object passed to the serializer is the exact same\nobject passed to the redacting function. \n\nThe `serialize` option as a function example:\n\n```js\nconst fastRedact = require('fast-redact')\nconst redact = fastRedact({\n  paths: ['a'], \n  serialize: (o) => JSON.stringify(o, 0, 2)\n})\nconsole.log(redact({a: 1, b: 2}))\n// {\n//   \"a\": \"[REDACTED]\",\n//   \"b\": 2\n// }\n```\n\nFor advanced usage the `serialize` option can be set to `false`. When `serialize` is set to `false`,\ninstead of the serialized object, the output of the redactor function will be the mutated object \nitself (this is the exact same as the object passed in). In addition a `restore` method is supplied\non the redactor function allowing the redacted keys to be restored with the original data. \n\n```js\nconst fastRedact = require('fast-redact')\nconst redact = fastRedact({\n  paths: ['a'], \n  serialize: false\n})\nconst o = {a: 1, b: 2}\nconsole.log(redact(o) === o) // true\nconsole.log(o) // { a: '[REDACTED]', b: 2 }\nconsole.log(redact.restore(o) === o) // true\nconsole.log(o) // { a: 1, b: 2 }\n```\n\n#### `strict` – `Boolean` - `[true]`\nThe `strict` option, when set to `true`, will cause the redactor function to throw if instead \nof an object it finds a primitive. When `strict` is set to `false`, the redactor function \nwill treat the primitive value as having already been redacted, and return it serialized (with\n`JSON.stringify` or the user's custom `serialize` function), or as-is if the `serialize` option\nwas set to false.\n\n## Approach\n\nIn order to achieve lowest cost/highest performance redaction `fast-redact`\ncreates and compiles a function (using the `Function` constructor) on initialization.\nIt's important to distinguish this from the dangers of a runtime eval, no user input \nis involved in creating the string that compiles into the function. This is as safe \nas writing code normally and having it compiled by V8 in the usual way.\n\nThanks to changes in V8 in recent years, state can be injected into compiled functions\nusing `bind` at very low cost (whereas `bind` used to be expensive, and getting state\ninto a compiled function by any means was difficult without a performance penalty).\n\nFor static paths, this function simply checks that the path exists and then overwrites\nwith the censor. Wildcard paths are processed with normal functions that iterate over \nthe object redacting values as necessary.\n\nIt's important to note, that the original object is mutated – for performance reasons\na copy is not made. See [rfdc](https://github.com/davidmarkclements/rfdc) (Really Fast \nDeep Clone) for the fastest known way to clone – it's not nearly close enough  in speed\nto editing the original object, serializing and then restoring values. \n\nA `restore` function is also created and compiled to put the original state back on\nto the object after redaction. This means that in the default usage case, the operation \nis essentially atomic - the object is mutated, serialized and restored internally which \navoids any state management issues.\n\n## Caveat\n\nAs mentioned in approach, the `paths` array input is dynamically compiled into a function\nat initialization time. While the `paths` array is vigourously tested for any developer \nerrors, it's strongly recommended against allowing user input to directly supply any \npaths to redact. It can't be guaranteed that allowing user input for `paths` couldn't\nfeasibly expose an attack vector.  \n\n## Benchmarks\n\nThe fastest known predecessor to `fast-redact` is the non-generic [`pino-noir`](http://npm.im/pino-noir) \nlibrary (which was also written by myself).\n\nIn the direct calling case, `fast-redact` is ~30x faster than `pino-noir`, however a more realistic\ncomparison is overhead on `JSON.stringify`. \n\nFor a static redaction case (no wildcards) `pino-noir` adds ~25% overhead on top of `JSON.stringify`\nwhereas `fast-redact` adds ~1% overhead.\n\nIn the basic last-position wildcard case,`fast-redact` is ~12% faster than `pino-noir`.\n\nThe `pino-noir` module does not support intermediate wildcards, but `fast-redact` does,\nthe cost of an intermediate wildcard that results in two keys over two nested objects \nbeing redacted is about 25% overhead on `JSON.stringify`. The cost of an intermediate \nwildcard that results in four keys across two objects being redacted is about 55% overhead \non `JSON.stringify` and ~50% more expensive that explicitly declaring the keys.  \n\n```sh\nnpm run bench \n```\n\n```\nbenchNoirV2*500: 59.108ms\nbenchFastRedact*500: 2.483ms\nbenchFastRedactRestore*500: 10.904ms\nbenchNoirV2Wild*500: 91.399ms\nbenchFastRedactWild*500: 21.200ms\nbenchFastRedactWildRestore*500: 27.304ms\nbenchFastRedactIntermediateWild*500: 92.304ms\nbenchFastRedactIntermediateWildRestore*500: 107.047ms\nbenchJSONStringify*500: 210.573ms\nbenchNoirV2Serialize*500: 281.148ms\nbenchFastRedactSerialize*500: 215.845ms\nbenchNoirV2WildSerialize*500: 281.168ms\nbenchFastRedactWildSerialize*500: 247.140ms\nbenchFastRedactIntermediateWildSerialize*500: 333.722ms\nbenchFastRedactIntermediateWildMatchWildOutcomeSerialize*500: 463.667ms\nbenchFastRedactStaticMatchWildOutcomeSerialize*500: 239.293ms\n```\n\n## Tests\n\n```\nnpm test  \n```\n\n```\n  224 passing (499.544ms)\n```\n\n### Coverage\n\n```\nnpm run cov \n```\n\n```\n-----------------|----------|----------|----------|----------|-------------------|\nFile             |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\n-----------------|----------|----------|----------|----------|-------------------|\nAll files        |      100 |      100 |      100 |      100 |                   |\n fast-redact     |      100 |      100 |      100 |      100 |                   |\n  index.js       |      100 |      100 |      100 |      100 |                   |\n fast-redact/lib |      100 |      100 |      100 |      100 |                   |\n  modifiers.js   |      100 |      100 |      100 |      100 |                   |\n  parse.js       |      100 |      100 |      100 |      100 |                   |\n  redactor.js    |      100 |      100 |      100 |      100 |                   |\n  restorer.js    |      100 |      100 |      100 |      100 |                   |\n  rx.js          |      100 |      100 |      100 |      100 |                   |\n  state.js       |      100 |      100 |      100 |      100 |                   |\n  validator.js   |      100 |      100 |      100 |      100 |                   |\n-----------------|----------|----------|----------|----------|-------------------|\n```\n\n## License\n\nMIT\n\n## Acknowledgements\n\nSponsored by [nearForm](http://www.nearform.com)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019-2020 David Mark Clements\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-redact/-/fast-redact-3.1.2.tgz#d58e69e9084ce9fa4c1a6fa98a3e1ecf5d7839aa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-redact/-/fast-redact-3.1.2.tgz",
    "hash": "d58e69e9084ce9fa4c1a6fa98a3e1ecf5d7839aa",
    "integrity": "sha512-+0em+Iya9fKGfEQGcd62Yv6onjBmmhV1uh86XVfOU8VwAe6kaFdQCWI9s0/Nnugx5Vd9tdbZ7e6gE2tR9dzXdw==",
    "registry": "npm",
    "packageName": "fast-redact",
    "cacheIntegrity": "sha512-+0em+Iya9fKGfEQGcd62Yv6onjBmmhV1uh86XVfOU8VwAe6kaFdQCWI9s0/Nnugx5Vd9tdbZ7e6gE2tR9dzXdw== sha1-1Y5p6QhM6fpMGm+pij4ez114Oao="
  },
  "registry": "npm",
  "hash": "d58e69e9084ce9fa4c1a6fa98a3e1ecf5d7839aa"
}