{
  "manifest": {
    "name": "pluralize",
    "version": "8.0.0",
    "description": "Pluralize and singularize any word",
    "main": "pluralize.js",
    "files": [
      "pluralize.js"
    ],
    "scripts": {
      "lint": "semistandard",
      "test-spec": "mocha -R spec --bail",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec --bail",
      "test": "npm run lint && npm run test-cov"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/blakeembrey/pluralize.git"
    },
    "keywords": [
      "plural",
      "plurals",
      "pluralize",
      "singular",
      "singularize",
      "inflection"
    ],
    "author": {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com",
      "url": "http://blakeembrey.me"
    },
    "license": "MIT",
    "readmeFilename": "Readme.md",
    "engines": {
      "node": ">=4"
    },
    "devDependencies": {
      "chai": "^4.0.0",
      "istanbul": "^0.4.5",
      "mocha": "^5.0.0",
      "semistandard": "^12.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pluralize-8.0.0-1a6fa16a38d12a1901e0320fa017051c539ce3b1-integrity/node_modules/pluralize/package.json",
    "readme": "# Pluralize\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n![File Size][filesize-url]\n[![CDNJS][cdnjs-image]][cdnjs-url]\n\n> Pluralize and singularize any word.\n\n## Installation\n\n```\nnpm install pluralize --save\nyarn add pluralize\nbower install pluralize --save\n```\n\n### Node\n\n```javascript\nvar pluralize = require('pluralize')\n```\n\n### AMD\n\n```javascript\ndefine(function (require, exports, module) {\n  var pluralize = require('pluralize')\n})\n```\n\n### `<script>` tag\n\n```html\n<script src=\"pluralize.js\"></script>\n```\n\n## Why?\n\nThis module uses a pre-defined list of rules, applied in order, to singularize or pluralize a given word. There are many cases where this is useful, such as any automation based on user input. For applications where the word(s) are known ahead of time, you can use a simple ternary (or function) which would be a much lighter alternative.\n\n## Usage\n\n* `word: string` The word to pluralize\n* `count: number` How many of the word exist\n* `inclusive: boolean` Whether to prefix with the number (e.g. 3 ducks)\n\nExamples:\n\n```javascript\npluralize('test') //=> \"tests\"\npluralize('test', 0) //=> \"tests\"\npluralize('test', 1) //=> \"test\"\npluralize('test', 5) //=> \"tests\"\npluralize('test', 1, true) //=> \"1 test\"\npluralize('test', 5, true) //=> \"5 tests\"\npluralize('蘋果', 2, true) //=> \"2 蘋果\"\n\n// Example of new plural rule:\npluralize.plural('regex') //=> \"regexes\"\npluralize.addPluralRule(/gex$/i, 'gexii')\npluralize.plural('regex') //=> \"regexii\"\n\n// Example of new singular rule:\npluralize.singular('singles') //=> \"single\"\npluralize.addSingularRule(/singles$/i, 'singular')\npluralize.singular('singles') //=> \"singular\"\n\n// Example of new irregular rule, e.g. \"I\" -> \"we\":\npluralize.plural('irregular') //=> \"irregulars\"\npluralize.addIrregularRule('irregular', 'regular')\npluralize.plural('irregular') //=> \"regular\"\n\n// Example of uncountable rule (rules without singular/plural in context):\npluralize.plural('paper') //=> \"papers\"\npluralize.addUncountableRule('paper')\npluralize.plural('paper') //=> \"paper\"\n\n// Example of asking whether a word looks singular or plural:\npluralize.isPlural('test') //=> false\npluralize.isSingular('test') //=> true\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/pluralize.svg?style=flat\n[npm-url]: https://npmjs.org/package/pluralize\n[downloads-image]: https://img.shields.io/npm/dm/pluralize.svg?style=flat\n[downloads-url]: https://npmjs.org/package/pluralize\n[travis-image]: https://img.shields.io/travis/blakeembrey/pluralize.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/pluralize\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/pluralize.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/pluralize?branch=master\n[filesize-url]: https://img.shields.io/github/size/blakeembrey/pluralize/pluralize.js.svg?style=flat\n[cdnjs-image]: https://img.shields.io/cdnjs/v/pluralize.svg\n[cdnjs-url]: https://cdnjs.com/libraries/pluralize\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Blake Embrey (hello@blakeembrey.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pluralize/-/pluralize-8.0.0.tgz#1a6fa16a38d12a1901e0320fa017051c539ce3b1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pluralize/-/pluralize-8.0.0.tgz",
    "hash": "1a6fa16a38d12a1901e0320fa017051c539ce3b1",
    "integrity": "sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA==",
    "registry": "npm",
    "packageName": "pluralize",
    "cacheIntegrity": "sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA== sha1-Gm+hajjRKhkB4DIPoBcFHFOc47E="
  },
  "registry": "npm",
  "hash": "1a6fa16a38d12a1901e0320fa017051c539ce3b1"
}