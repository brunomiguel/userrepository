"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Icns = void 0;
const icns_file_header_1 = require("./icns-file-header");
const icns_image_1 = require("./icns-image");
class Icns {
    constructor(fileHeader = new icns_file_header_1.IcnsFileHeader(), images = []) {
        this._fileHeader = fileHeader;
        this._images = images;
    }
    /**
     * Create ICNS from the icon buffer.
     * @param buffer The ICNS icon buffer.
     */
    static from(buffer) {
        const fileHeader = icns_file_header_1.IcnsFileHeader.from(buffer);
        let pos = fileHeader.data.length;
        const images = [];
        while (pos < fileHeader.bytes) {
            const image = icns_image_1.IcnsImage.from(buffer.slice(pos));
            images.push(image);
            pos += image.data.length;
        }
        return new Icns(fileHeader, images);
    }
    get fileHeader() {
        return this._fileHeader;
    }
    get images() {
        return this._images;
    }
    set images(images) {
        this._images = images;
        const bytes = this._fileHeader.data.length +
            this._images.reduce((carry, image) => carry + image.bytes, 0);
        this._fileHeader = new icns_file_header_1.IcnsFileHeader('icns', bytes);
    }
    get data() {
        const buffers = [
            this._fileHeader.data,
            ...this._images.map((image) => image.data),
        ];
        return Buffer.concat(buffers);
    }
    /**
     * Adds ICNS image at the end.
     * @param image The ICNS Image to append.
     */
    append(image) {
        this.images = [...this.images, image];
    }
    /**
     * Inserts ICNS image at the specified position.
     * @param image The ICNS Image to insert.
     * @param index The position at which to insert the ICNS Image.
     */
    insert(image, index) {
        this.images = [
            ...this.images.slice(0, index),
            image,
            ...this.images.slice(index + 1),
        ];
    }
    /**
     * Removes ICNS image at the specified position.
     * @param index The position of the ICNS Image to remove.
     */
    remove(index) {
        this.images = [
            ...this.images.slice(0, index),
            ...this.images.slice(index + 1),
        ];
    }
}
exports.Icns = Icns;
Icns.supportedIconTypes = [
    { osType: 'is32', size: 16, format: 'RGB' },
    { osType: 'il32', size: 32, format: 'RGB' },
    { osType: 'ih32', size: 48, format: 'RGB' },
    { osType: 'it32', size: 128, format: 'RGB' },
    { osType: 's8mk', size: 16, format: 'MASK' },
    { osType: 'l8mk', size: 32, format: 'MASK' },
    { osType: 'h8mk', size: 48, format: 'MASK' },
    { osType: 't8mk', size: 128, format: 'MASK' },
    { osType: 'ic04', size: 16, format: 'ARGB' },
    { osType: 'ic05', size: 32, format: 'ARGB' },
    { osType: 'icp4', size: 16, format: 'PNG' },
    { osType: 'icp5', size: 32, format: 'PNG' },
    { osType: 'icp6', size: 64, format: 'PNG' },
    { osType: 'ic07', size: 128, format: 'PNG' },
    { osType: 'ic08', size: 256, format: 'PNG' },
    { osType: 'ic09', size: 512, format: 'PNG' },
    { osType: 'ic10', size: 1024, format: 'PNG' },
    { osType: 'ic11', size: 32, format: 'PNG' },
    { osType: 'ic12', size: 64, format: 'PNG' },
    { osType: 'ic13', size: 256, format: 'PNG' },
    { osType: 'ic14', size: 512, format: 'PNG' },
];
