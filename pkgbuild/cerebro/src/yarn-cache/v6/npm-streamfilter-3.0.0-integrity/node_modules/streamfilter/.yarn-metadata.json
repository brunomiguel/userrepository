{
  "manifest": {
    "name": "streamfilter",
    "version": "3.0.0",
    "description": "Filtering streams.",
    "main": "src/index.js",
    "metapak": {
      "configs": [
        "main",
        "readme",
        "jsdocs",
        "eslint",
        "mocha",
        "codeclimate",
        "travis"
      ],
      "data": {
        "files": "src/*.js tests/*.mocha.js",
        "testsFiles": "tests/*.mocha.js"
      }
    },
    "scripts": {
      "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
      "cli": "env NODE_ENV=${NODE_ENV:-cli}",
      "cover": "nyc npm test && nyc report --reporter=html --reporter=text",
      "coveralls": "nyc npm test && nyc report --reporter=text-lcov | coveralls && rm -rf ./coverage",
      "cz": "env NODE_ENV=${NODE_ENV:-cli} git cz",
      "doc": "echo \"# API\" > API.md; jsdoc2md src/*.js tests/*.mocha.js >> API.md && git add API.md",
      "lint": "eslint src/*.js tests/*.mocha.js",
      "metapak": "metapak",
      "mocha": "mocha tests/*.mocha.js",
      "precz": "npm t && npm run lint && npm run doc && npm run metapak -- -s",
      "prettier": "prettier --write src/*.js tests/*.mocha.js",
      "preversion": "npm t && npm run lint && npm run doc && npm run metapak -- -s",
      "test": "npm run mocha",
      "version": "npm run changelog && git add CHANGELOG.md"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:nfroidure/streamfilter.git"
    },
    "keywords": [
      "assert",
      "deepEqual",
      "neat"
    ],
    "author": {
      "name": "Nicolas Froidure",
      "email": "nicolas.froidure@insertafter.com",
      "url": "http://insertafter.com/en/index.html"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/nfroidure/streamfilter/issues"
    },
    "homepage": "https://github.com/nfroidure/streamfilter",
    "devDependencies": {
      "commitizen": "^3.0.4",
      "conventional-changelog-cli": "^2.0.11",
      "coveralls": "^3.0.2",
      "cz-conventional-changelog": "^2.1.0",
      "eslint": "^5.8.0",
      "eslint-plugin-prettier": "^3.0.0",
      "jsdoc-to-markdown": "^4.0.1",
      "metapak": "^2.0.0",
      "metapak-nfroidure": "^9.0.2",
      "mocha": "^5.2.0",
      "nyc": "^13.0.1",
      "prettier": "^1.14.3",
      "streamtest": "^1.2.4"
    },
    "dependencies": {
      "readable-stream": "^3.0.6"
    },
    "engines": {
      "node": ">=8.12.0"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "contributors": [],
    "files": [
      "src/**/*.js",
      "LICENSE",
      "README.md",
      "CHANGELOG.md"
    ],
    "eslintConfig": {
      "extends": [
        "eslint:recommended"
      ],
      "parserOptions": {
        "sourceType": "script",
        "modules": true
      },
      "env": {
        "es6": true,
        "node": true,
        "jest": true,
        "mocha": true
      },
      "plugins": [
        "prettier"
      ],
      "rules": {
        "prettier/prettier": "error"
      }
    },
    "prettier": {
      "semi": true,
      "printWidth": 80,
      "singleQuote": true,
      "trailingComma": "es5",
      "proseWrap": "always"
    },
    "greenkeeper": {
      "ignore": [
        "commitizen",
        "cz-conventional-changelog",
        "conventional-changelog-cli",
        "jsdoc-to-markdown",
        "eslint",
        "eslint-config-prettier",
        "prettier",
        "mocha",
        "coveralls",
        "nyc"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-streamfilter-3.0.0-integrity/node_modules/streamfilter/package.json",
    "readmeFilename": "README.md",
    "readme": "[//]: # ( )\n[//]: # (This file is automatically generated by a `metapak`)\n[//]: # (module. Do not change it  except between the)\n[//]: # (`content:start/end` flags, your changes would)\n[//]: # (be overridden.)\n[//]: # ( )\n# streamfilter\n> Filtering streams.\n\n[![Build status](https://secure.travis-ci.org/nfroidure/streamfilter.svg)](https://travis-ci.org/nfroidure/streamfilter)\n[![Coverage Status](https://coveralls.io/repos/nfroidure/streamfilter/badge.svg?branch=master)](https://coveralls.io/r/nfroidure/streamfilter?branch=master)\n[![NPM version](https://badge.fury.io/js/streamfilter.svg)](https://npmjs.org/package/streamfilter)\n[![Dependency Status](https://david-dm.org/nfroidure/streamfilter.svg)](https://david-dm.org/nfroidure/streamfilter)\n[![devDependency Status](https://david-dm.org/nfroidure/streamfilter/dev-status.svg)](https://david-dm.org/nfroidure/streamfilter#info=devDependencies)\n[![Dependency Status](https://dependencyci.com/github/nfroidure/streamfilter/badge)](https://dependencyci.com/github/nfroidure/streamfilter)\n[![Package Quality](http://npm.packagequality.com/shield/streamfilter.svg)](http://packagequality.com/#?package=streamfilter)\n[![Code Climate](https://codeclimate.com/github/nfroidure/streamfilter.svg)](https://codeclimate.com/github/nfroidure/streamfilter)\n\n\n[//]: # (::contents:start)\n\n`streamfilter` is a function based filter for streams inspired per gulp-filter\n but no limited to Gulp nor to objectMode streams.\n\n## Installation\n\nFirst, install `streamfilter` in your project:\n```sh\nnpm install --save streamfilter\n```\n\n## Getting started\n\nThere are 3 common usages:\n\n### Simple filter\n\n```js\nimport FilterStream from 'streamfilter';\n\nconst filter = new FilterStream((chunk, encoding, cb) => {\n  const mustBeFiltered = chunk.length() > 128;\n  if(mustBeFiltered) {\n    cb(true);\n    return;\n  }\n  cb(false);\n});\n\n// Print to stdout a filtered stdin\nprocess.stdin\n  .pipe(filter)\n  .pipe(process.stdout);\n```\n\n### Filter and restore\n\n```js\nimport FilterStream from 'streamfilter';\n\nconst filter = new FilterStream((chunk, encoding, cb) => {\n  const mustBeFiltered = chunk.length() > 128;\n  if(mustBeFiltered) {\n    cb(true);\n    return;\n  }\n  cb(false);\n}, {\n  restore: true\n});\n\n// Print accepted chunks in stdout\nfilter.pipe(process.stdout);\n\n// Print filtered one to stderr\nfilter.restore.pipe(process.stderr);\n```\n\n### Filter and restore as a passthrough stream\nLet's reach total hype!\n\n```js\nimport FilterStream from 'streamfilter';\nimport { Transform } from 'stream';\n\n// Filter values\nconst filter = new FilterStream((chunk, encoding, cb) => {\n  const mustBeFiltered = chunk.length() > 128;\n  if(mustBeFiltered) {\n    cb(true);\n    return;\n  }\n  cb(false);\n}, {\n  restore: true,\n  passthrough: true\n});\n\n// Uppercase strings\nconst mySuperTransformStream = new Transform({\n  transform: (chunk, encoding, cb) => cb(\n    null,\n    Buffer.from(\n      chunk.toString(encoding).toUpperCase(),\n      encoding,\n    ),\n  ),\n});\n\n// Pipe stdin\nprocess.stdin.pipe(filter)\n  // Edit kept chunks\n  .pipe(mySuperTransformStream)\n  // Restore filtered chunks\n  .pipe(filter.restore)\n  // and output!\n  .pipe(process.stdout)\n```\n\nNote that in this case, this is *your* responsibility to end the restore stream\n by piping in another stream or ending him manually.\n\n[//]: # (::contents:end)\n\n# API\n<a name=\"StreamFilter\"></a>\n\n## StreamFilter(filterCallback, options) ⇒ <code>Stream</code>\nFilter piped in streams according to the given `filterCallback` that takes the\n following arguments: `chunk` the actual chunk, `encoding` the chunk encoding,\n filterResultCallback` the function to call as the result of the filtering\nprocess with `true` in argument to filter her or `false` otherwise.\n\nOptions are passed in as is in the various stream instances spawned by this\n module. So, to use the objectMode, simply pass in the `options.objectMode`\n value set to `true`.\n\n**Kind**: global function  \n**Returns**: <code>Stream</code> - The filtering stream  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| filterCallback | <code>function</code> | Callback applying the filters |\n| options | <code>Object</code> | Filtering options |\n| options.passthrough | <code>boolean</code> | Set to `true`, this option change the restore stream nature from a readable  stream to a passthrough one, allowing you to reuse the filtered chunks in an  existing pipeline. |\n| options.restore | <code>boolean</code> | Set to `true`, this option create a readable stream allowing you to use the  filtered chunks elsewhere. The restore stream is exposed in the `FilterStream`  instance as a `restore` named property. |\n\n\n# Authors\n- [Nicolas Froidure](http://insertafter.com/en/index.html)\n\n# License\n[MIT](https://github.com/nfroidure/streamfilter/blob/master/LICENSE)\n",
    "licenseText": "The MIT License (MIT)\nCopyright © 2017 Nicolas Froidure\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/streamfilter/-/streamfilter-3.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/streamfilter/-/streamfilter-3.0.0.tgz",
    "hash": "",
    "integrity": "sha512-kvKNfXCmUyC8lAXSSHCIXBUlo/lhsLcCU/OmzACZYpRUdtKIH68xYhm/+HI15jFJYtNJGYtCgn2wmIiExY1VwA==",
    "registry": "npm",
    "packageName": "streamfilter",
    "cacheIntegrity": "sha512-kvKNfXCmUyC8lAXSSHCIXBUlo/lhsLcCU/OmzACZYpRUdtKIH68xYhm/+HI15jFJYtNJGYtCgn2wmIiExY1VwA== sha1-jGGwgXmmwzbG78zF3zCGG3qWdec="
  },
  "registry": "npm",
  "hash": "92f28d7d70a65320bc9405d24870885c1525a3f961b0b70253f3a6cc009962945476d2881faf316219bff87235e6314962d349198b42827db0988884c58d55c0"
}