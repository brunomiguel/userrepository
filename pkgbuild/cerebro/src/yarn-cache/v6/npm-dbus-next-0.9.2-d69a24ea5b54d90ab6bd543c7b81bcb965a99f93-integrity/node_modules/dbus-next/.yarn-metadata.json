{
  "manifest": {
    "name": "dbus-next",
    "version": "0.9.2",
    "keywords": [
      "dbus",
      "dcop",
      "d-bus",
      "rpc",
      "gnome",
      "kde"
    ],
    "description": "The next great DBus library for Node",
    "files": [
      "lib/*",
      "index.js",
      "package.json",
      "types.d.ts"
    ],
    "main": "index.js",
    "types": "types.d.ts",
    "maintainers": [
      {
        "name": "Tony Crisci",
        "email": "tony@dubstepdish.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "http://github.com/dbusjs/node-dbus-next.git"
    },
    "dependencies": {
      "event-stream": "3.3.4",
      "hexy": "^0.2.10",
      "jsbi": "^2.0.5",
      "long": "^4.0.0",
      "@nornagon/put": "0.0.8",
      "safe-buffer": "^5.1.1",
      "xml2js": "^0.4.17"
    },
    "optionalDependencies": {
      "abstract-socket": "^2.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.1.5",
      "@babel/plugin-proposal-class-properties": "^7.1.0",
      "@babel/plugin-proposal-decorators": "^7.1.2",
      "@babel/plugin-syntax-bigint": "^7.2.0",
      "@babel/plugin-transform-async-to-generator": "^7.3.4",
      "babel-core": "^7.0.0-bridge.0",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^26.6.3",
      "babel-plugin-syntax-async-functions": "^6.13.0",
      "babel-plugin-transform-async-to-generator": "^6.24.1",
      "commander": "^2.19.0",
      "handlebars": "^4.1.0",
      "jest": "^24.1.0",
      "jsdoc": "^3.6.3",
      "semistandard": "^16.0.0"
    },
    "scripts": {
      "integration": "dbus-run-session -- jest ./test/integration",
      "coverage": "dbus-run-session -- jest --coverage",
      "unit": "jest ./test/*.test.js",
      "test": "dbus-run-session -- jest",
      "doc": "jsdoc --verbose -c jsdoc.conf --readme README.md -r lib index.js -d doc",
      "format": "cd lib && semistandard --global BigInt --fix && cd ../test && semistandard --env jest --parser babel-eslint --global BigInt --fix"
    },
    "jest": {
      "testEnvironment": "node",
      "bail": true
    },
    "standard": {
      "parser": "babel-eslint",
      "globals": [
        "BigInt"
      ]
    },
    "engine": {
      "node": ">=6.3.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dbus-next-0.9.2-d69a24ea5b54d90ab6bd543c7b81bcb965a99f93-integrity/node_modules/dbus-next/package.json",
    "readmeFilename": "README.md",
    "readme": "# dbus-next\n\nThe next great DBus library for NodeJS.\n\n[Documentation](https://acrisci.github.io/doc/node-dbus-next/)\n\n[Chat](https://discord.gg/UdbXHVX)\n\n## About\n\ndbus-next is a fully featured high level library for DBus geared primarily towards integration of applications into Linux desktop and mobile environments.\n\nDesktop application developers can use this library for integrating their applications into desktop environments by implementing common DBus standard interfaces or creating custom plugin interfaces.\n\nDesktop users can use this library to create their own scripts and utilities to interact with those interfaces for customization of their desktop environment.\n\n## Node Compatibility\n\nAs of now, dbus-next targets the latest features of JavaScript. The earliest version supported is `6.3.0`. However, the library uses `BigInt` by default for the long integer types which was introduced in `10.8.0`. If you need to support versions earlier than this, set BigInt compatibility mode. This will configure the library to use [JSBI](https://github.com/GoogleChromeLabs/jsbi) as a polyfill for long types.\n\n```javascript\nconst dbus = require('dbus-next');\ndbus.setBigIntCompat(true);\n```\n\n## The Client Interface\n\nYou can get a proxy object for a name on the bus with the `bus.getProxyObject()` function, passing the name and the path. The proxy object contains introspection data about the object including a list of nodes and interfaces. You can get an interface with the `object.getInterface()` function passing the name of the interface.\n\nThe interface object has methods you can call that correspond to the methods in the introspection data. Pass normal JavaScript objects to the parameters of the function and they will automatically be converted into the advertised DBus type. However, you must use the `Variant` class to represent DBus variants.\n\nMethods will similarly return JavaScript objects converted from the advertised DBus type, with the `Variant` class used to represent returned variants. If the method returns multiple values, they will be returned within an array.\n\nThe interface object is an event emitter that will emit the name of a signal when it is emitted on the bus. Arguments to the callback should correspond to the arguments of the signal.\n\nThis is a brief example of using a proxy object with the [MPRIS](https://specifications.freedesktop.org/mpris-spec/latest/Player_Interface.html) media player interface.\n\n```js\nlet dbus = require('dbus-next');\nlet bus = dbus.sessionBus();\nlet Variant = dbus.Variant;\n\n// getting an object introspects it on the bus and creates the interfaces\nlet obj = await bus.getProxyObject('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2');\n\n// the interfaces are the primary way of interacting with objects on the bus\nlet player = obj.getInterface('org.mpris.MediaPlayer2.Player');\nlet properties = obj.getInterface('org.freedesktop.DBus.Properties');\n\n// call methods on the interface\nawait player.Play()\n\n// get properties with the properties interface (this returns a variant)\nlet volumeVariant = await properties.Get('org.mpris.MediaPlayer2.Player', 'Volume');\nconsole.log('current volume: ' + volumeVariant.value);\n\n// set properties with the properties interface using a variant\nawait properties.Set('org.mpris.MediaPlayer2.Player', 'Volume', new Variant('d', volumeVariant.value + 0.05));\n\n// listen to signals\nproperties.on('PropertiesChanged', (iface, changed, invalidated) => {\n  for (let prop of Object.keys(changed)) {\n    console.log(`property changed: ${prop}`);\n  }\n});\n```\n\nFor a complete example, see the [MPRIS client](https://github.com/dbusjs/node-dbus-next/blob/master/examples/mpris.js) example which can be used to control media players on the command line.\n\n## The Service Interface\n\nYou can use the `Interface` class to define your interfaces. This interfaces uses the proposed [decorators syntax](https://github.com/tc39/proposal-decorators) which is not yet part of the ECMAScript standard, but should be included one day. Unfortunately, you'll need a [Babel plugin](https://www.npmjs.com/package/@babel/plugin-proposal-decorators) to make this code work for now.\n\n```js\nlet dbus = require('dbus-next');\nlet Variant = dbus.Variant;\n\nlet {\n  Interface, property, method, signal, DBusError,\n  ACCESS_READ, ACCESS_WRITE, ACCESS_READWRITE\n} = dbus.interface;\n\nlet bus = dbus.sessionBus();\n\nclass ExampleInterface extends Interface {\n  @property({signature: 's', access: ACCESS_READWRITE})\n  SimpleProperty = 'foo';\n\n  _MapProperty = {\n    'foo': new Variant('s', 'bar'),\n    'bat': new Variant('i', 53)\n  };\n\n  @property({signature: 'a{sv}'})\n  get MapProperty() {\n    return this._MapProperty;\n  }\n\n  set MapProperty(value) {\n    this._MapProperty = value;\n\n    Interface.emitPropertiesChanged(this, {\n      MapProperty: value\n    });\n  }\n\n  @method({inSignature: 's', outSignature: 's'})\n  Echo(what) {\n    return what;\n  }\n\n  @method({inSignature: 'ss', outSignature: 'vv'})\n  ReturnsMultiple(what, what2) {\n    return [\n      new Variant('s', what),\n      new Variant('s', what2)\n    ];\n  }\n\n  @method({inSignature: '', outSignature: ''})\n  ThrowsError() {\n    // the error is returned to the client\n    throw new DBusError('org.test.iface.Error', 'something went wrong');\n  }\n\n  @method({inSignature: '', outSignature: '', noReply: true})\n  NoReply() {\n    // by setting noReply to true, dbus-next will NOT send a return reply through dbus \n    // after the method is called.\n  }\n\n  @signal({signature: 's'})\n  HelloWorld(value) {\n    return value;\n  }\n\n  @signal({signature: 'ss'})\n  SignalMultiple(x) {\n    return [\n      'hello',\n      'world'\n    ];\n  }\n}\n\nlet example = new ExampleInterface('org.test.iface');\n\nsetTimeout(() => {\n  // emit the HelloWorld signal by calling the method with the parameters to\n  // send to the listeners\n  example.HelloWorld('hello');\n}, 500);\n\nasync function main() {\n  // make a request for the name on the bus\n  await bus.requestName('org.test.name');\n  // export the interface on the path\n  bus.export('/org/test/path', example);\n}\n\nmain().catch((err) => {\n  console.log('Error: ' + err);\n});\n```\n\nInterfaces extend the `Interface` class. Declare service methods, properties, and signals with the decorators provided from the library. You can optionally request a name on the bus with `bus.requestName()` so clients have a well-known name to connect to. Then call `bus.export()` with the path and interface to expose this interface on the bus.\n\nMethods are called when a DBus client calls that method on the server. Properties can be gotten and set with the `org.freedesktop.DBus.Properties` interface and are included in the introspection xml.\n\nTo emit a signal, just call the method marked with the `signal` decorator and the signal will be emitted with the returned value.\n\nIf you have an interface xml description, which can be gotten from the `org.freedesktop.DBus.Introspect` method on an exported interface, you can generate dbus-next JavaScript classes from the xml file with the `bin/generate-interfaces.js` utility.\n\n## The Low-Level Interface\n\nThe low-level interface can be used to interact with messages directly. Create new messages with the `Message` class to be sent on the bus as method calls, signals, method returns, or errors. Method calls can be called with the `call()` method of the `MessageBus` to await a reply and `send()` can be use for messages that don't expect a reply.\n\n```js\nlet dbus = require('dbus-next');\nlet Message = dbus.Message;\n\nlet bus = dbus.sessionBus();\n\n// send a method call to list the names on the bus\nlet methodCall = new Message({\n  destination: 'org.freedesktop.DBus',\n  path: '/org/freedesktop/DBus',\n  interface: 'org.freedesktop.DBus',\n  member: 'ListNames'\n});\n\nlet reply = await bus.call(methodCall);\nconsole.log('names on the bus: ', reply.body[0]);\n\n// add a custom handler for a particular method\nbus.addMethodHandler((msg) => {\n  if (msg.path === '/org/test/path' &&\n      msg.interface === 'org.test.interface'\n      && msg.member === 'SomeMethod') {\n    // handle the method by sending a reply\n    let someMethodReply = Message.newMethodReturn(msg, 's', ['hello']);\n    bus.send(someMethodReply);\n    return true;\n  }\n});\n\n// listen to any messages that are sent to the bus\nbus.on('message', (msg) => {\n  console.log('got a message: ', msg);\n});\n```\n\nFor a complete example of how to use the low-level interface to send messages, see the `dbus-next-send.js` script in the `bin` directory.\n\n## The Type System\n\nValues that are sent or received over the message bus always have an associated signature that specifies the types of those values. For the high-level client and service, these signatures are specified in XML data which is advertised in a [standard DBus interface](https://dbus.freedesktop.org/doc/dbus-specification.html#introspection-format). The high-level client dynamically creates classes based on this introspection data with methods and signals with arguments based on the type signature. The high-level service does the inverse by introspecting the class to create the introspection XML data which is advertised on the bus for clients.\n\nEach code in the signature is mapped to a JavaScript type as shown in the table below.\n\n| Name        | Code | JS Type | Notes                                                              |\n|-------------|------|---------|--------------------------------------------------------------------|\n| BYTE        | y    | number  |                                                                    |\n| BOOLEAN     | b    | boolean |                                                                    |\n| INT16       | n    | number  |                                                                    |\n| UINT16      | q    | number  |                                                                    |\n| INT32       | i    | number  |                                                                    |\n| UINT32      | u    | number  |                                                                    |\n| INT64       | x    | BigInt  | Use `dbus.setBigIntCompat(true)` to use `JSBI`                     |\n| UINT64      | t    | BigInt  | Use `dbus.setBigIntCompat(true)` to use `JSBI`                     |\n| DOUBLE      | d    | number  |                                                                    |\n| STRING      | s    | string  |                                                                    |\n| OBJECT_PATH | o    | string  | Must be a valid object path                                        |\n| SIGNATURE   | g    | string  | Must be a valid signature                                          |\n| ARRAY       | a    | Array   | Must be followed by a complete type which specifies the child type |\n| STRUCT      | (    | Array   | Types in the JS Array must match the types between the parens      |\n| VARIANT     | v    | Variant | This class is provided by the library.                             |\n| DICT_ENTRY  | {    | Object  | Must be included in an array type to be an object.                 |\n\nThe types `a`, `(`, `v`, and `{` are container types that hold other values. Examples of container types and JavaScript examples are in the table below.\n\n| Signature | Example                                | Notes                                                                                                                                     |\n|-----------|----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| `(su)`    | `[ 'foo', 5 ]`                         | Each element in the array must match the corresponding type of the struct member.                                                         |\n| `as`      | `[ 'foo', 'bar' ]`                     | The child type comes immediately after the `a`. The array can have any number of elements, but they all must match the child type.        |\n| `a{su}`   | `{ 'foo': 5 }`                         | An \"array of dict entries\" is represented by an Object. The type after `{` is the key type and the type before the `}` is the value type. |\n| `ay`      | `Buffer.from([0x62, 0x75, 0x66])`      | Special case: an array of bytes is represented by a Node `Buffer`.                                                                        |\n| `v`       | `new Variant('s', 'hello')`            | Signature must be a single type. Value may be a container type.                                                                           |\n| `(asv)`   | `[ ['foo'], new Variant('s', 'bar') ]` | Containers may be nested.                                                                                                                 |\n\nFor more information on the DBus type system, see [the specification](https://dbus.freedesktop.org/doc/dbus-specification.html#type-system).\n\n## Contributing\n\nContributions are welcome. Development happens on [Github](https://github.com/dbusjs/node-dbus-next).\n\n## Similar Projects\n\ndbus-next is a fork of [dbus-native](https://github.com/sidorares/dbus-native) library. While this library is great, it has many bugs which I don't think can be fixed without completely redesigning the user API. Another library exists [node-dbus](https://github.com/Shouqun/node-dbus) which is similar, but also not provide enough features to create full-featured DBus services.\n\n## Copyright\n\nYou can use this code under an MIT license (see LICENSE).\n\n© 2012, Andrey Sidorov\n\n© 2018, Tony Crisci\n",
    "licenseText": "This software is released under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dbus-next/-/dbus-next-0.9.2.tgz#d69a24ea5b54d90ab6bd543c7b81bcb965a99f93",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dbus-next/-/dbus-next-0.9.2.tgz",
    "hash": "d69a24ea5b54d90ab6bd543c7b81bcb965a99f93",
    "integrity": "sha512-tzQq/+wrTZ2yU+U5PoeXc97KABhX2v55C/T0finH3tSKYuI8H/SqppIFymBBrUHcK13LvEGY3vdj3ikPPenL5g==",
    "registry": "npm",
    "packageName": "dbus-next",
    "cacheIntegrity": "sha512-tzQq/+wrTZ2yU+U5PoeXc97KABhX2v55C/T0finH3tSKYuI8H/SqppIFymBBrUHcK13LvEGY3vdj3ikPPenL5g== sha1-1pok6ltU2Qq2vVQ8e4G8uWWpn5M="
  },
  "registry": "npm",
  "hash": "d69a24ea5b54d90ab6bd543c7b81bcb965a99f93"
}