{
  "manifest": {
    "name": "gensync",
    "version": "1.0.0-beta.2",
    "license": "MIT",
    "description": "Allows users to use generators in order to write common functions that can be both sync or async.",
    "main": "index.js",
    "author": {
      "name": "Logan Smyth",
      "email": "loganfsmyth@gmail.com"
    },
    "homepage": "https://github.com/loganfsmyth/gensync",
    "repository": {
      "type": "git",
      "url": "https://github.com/loganfsmyth/gensync.git"
    },
    "scripts": {
      "test": "jest"
    },
    "engines": {
      "node": ">=6.9.0"
    },
    "keywords": [
      "async",
      "sync",
      "generators",
      "async-await",
      "callbacks"
    ],
    "devDependencies": {
      "babel-core": "^6.26.3",
      "babel-preset-env": "^1.6.1",
      "eslint": "^4.19.1",
      "eslint-config-prettier": "^2.9.0",
      "eslint-plugin-node": "^6.0.1",
      "eslint-plugin-prettier": "^2.6.0",
      "flow-bin": "^0.71.0",
      "jest": "^22.4.3",
      "prettier": "^1.12.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-gensync-1.0.0-beta.2-integrity/node_modules/gensync/package.json",
    "readmeFilename": "README.md",
    "readme": "# gensync\n\nThis module allows for developers to write common code that can share\nimplementation details, hiding whether an underlying request happens\nsynchronously or asynchronously. This is in contrast with many current Node\nAPIs which explicitly implement the same API twice, once with calls to\nsynchronous functions, and once with asynchronous functions.\n\nTake for example `fs.readFile` and `fs.readFileSync`, if you're writing an API\nthat loads a file and then performs a synchronous operation on the data, it\ncan be frustrating to maintain two parallel functions.\n\n\n## Example\n\n```js\nconst fs = require(\"fs\");\nconst gensync = require(\"gensync\");\n\nconst readFile = gensync({\n  sync: fs.readFileSync,\n  errback: fs.readFile,\n});\n\nconst myOperation = gensync(function* (filename) {\n  const code = yield* readFile(filename, \"utf8\");\n\n  return \"// some custom prefix\\n\" + code;\n});\n\n// Load and add the prefix synchronously:\nconst result = myOperation.sync(\"./some-file.js\");\n\n// Load and add the prefix asynchronously with promises:\nmyOperation.async(\"./some-file.js\").then(result => {\n\n});\n\n// Load and add the prefix asynchronously with promises:\nmyOperation.errback(\"./some-file.js\", (err, result) => {\n\n});\n```\n\nThis could even be exposed as your official API by doing\n```js\n// Using the common 'Sync' suffix for sync functions, and 'Async' suffix for\n// promise-returning versions.\nexports.myOperationSync = myOperation.sync;\nexports.myOperationAsync = myOperation.async;\nexports.myOperation = myOperation.errback;\n```\nor potentially expose one of the async versions as the default, with a\n`.sync` property on the function to expose the synchronous version.\n```js\nmodule.exports = myOperation.errback;\nmodule.exports.sync = myOperation.sync;\n````\n\n\n## API\n\n### gensync(generatorFnOrOptions)\n\nReturns a function that can be \"await\"-ed in another `gensync` generator\nfunction, or executed via\n\n* `.sync(...args)` - Returns the computed value, or throws.\n* `.async(...args)` - Returns a promise for the computed value.\n* `.errback(...args, (err, result) => {})` - Calls the callback with the computed value, or error.\n\n\n#### Passed a generator\n\nWraps the generator to populate the `.sync`/`.async`/`.errback` helpers above to\nallow for evaluation of the generator for the final value.\n\n##### Example\n\n```js\nconst readFile = function* () {\n  return 42;\n};\n\nconst readFileAndMore = gensync(function* (){\n  const val = yield* readFile();\n  return 42 + val;\n});\n\n// In general cases\nconst code = readFileAndMore.sync(\"./file.js\", \"utf8\");\nreadFileAndMore.async(\"./file.js\", \"utf8\").then(code => {})\nreadFileAndMore.errback(\"./file.js\", \"utf8\", (err, code) => {});\n\n// In a generator being called indirectly with .sync/.async/.errback\nconst code = yield* readFileAndMore(\"./file.js\", \"utf8\");\n```\n\n\n#### Passed an options object\n\n* `opts.sync`\n\n  Example: `(...args) => 4`\n\n  A function that will be called when `.sync()` is called on the `gensync()`\n  result, or when the result is passed to `yield*` in another generator that\n  is being run synchronously.\n\n  Also called for `.async()` calls if no async handlers are provided.\n\n* `opts.async`\n\n  Example: `async (...args) => 4`\n\n  A function that will be called when `.async()` or `.errback()` is called on\n  the `gensync()` result, or when the result is passed to `yield*` in another\n  generator that is being run asynchronously.\n\n* `opts.errback`\n\n  Example: `(...args, cb) => cb(null, 4)`\n\n  A function that will be called when `.async()` or `.errback()` is called on\n  the `gensync()` result, or when the result is passed to `yield*` in another\n  generator that is being run asynchronously.\n\n  This option allows for simpler compatibility with many existing Node APIs,\n  and also avoids introducing the extra even loop turns that promises introduce\n  to access the result value.\n\n* `opts.name`\n\n  Example: `\"readFile\"`\n\n  A string name to apply to the returned function. If no value is provided,\n  the name of `errback`/`async`/`sync` functions will be used, with any\n  `Sync` or `Async` suffix stripped off. If the callback is simply named\n  with ES6 inference (same name as the options property), the name is ignored.\n\n* `opts.arity`\n\n  Example: `4`\n\n  A number for the length to set on the returned function. If no value\n  is provided, the length will be carried over from the `sync` function's\n  `length` value.\n\n##### Example\n\n```js\nconst readFile = gensync({\n  sync: fs.readFileSync,\n  errback: fs.readFile,\n});\n\nconst code = readFile.sync(\"./file.js\", \"utf8\");\nreadFile.async(\"./file.js\", \"utf8\").then(code => {})\nreadFile.errback(\"./file.js\", \"utf8\", (err, code) => {});\n```\n\n\n### gensync.all(iterable)\n\n`Promise.all`-like combinator that works with an iterable of generator objects\nthat could be passed to `yield*` within a gensync generator.\n\n#### Example\n\n```js\nconst loadFiles = gensync(function* () {\n  return yield* gensync.all([\n    readFile(\"./one.js\"),\n    readFile(\"./two.js\"),\n    readFile(\"./three.js\"),\n  ]);\n});\n```\n\n\n### gensync.race(iterable)\n\n`Promise.race`-like combinator that works with an iterable of generator objects\nthat could be passed to `yield*` within a gensync generator.\n\n#### Example\n\n```js\nconst loadFiles = gensync(function* () {\n  return yield* gensync.race([\n    readFile(\"./one.js\"),\n    readFile(\"./two.js\"),\n    readFile(\"./three.js\"),\n  ]);\n});\n```\n",
    "licenseText": "Copyright 2018 Logan Smyth <loganfsmyth@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
    "hash": "",
    "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
    "registry": "npm",
    "packageName": "gensync",
    "cacheIntegrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg== sha1-MqbudsPX9S1GsrGuXZP+qFgKJeA="
  },
  "registry": "npm",
  "hash": "de137b35ab2462f3032d0639e609d6dcd43e99eb0401ea53aa583e5446e3ef3cea10c055361cdc19861ea85a3f4e5633e9e42215ca751dcb0264efa71a04bcce"
}