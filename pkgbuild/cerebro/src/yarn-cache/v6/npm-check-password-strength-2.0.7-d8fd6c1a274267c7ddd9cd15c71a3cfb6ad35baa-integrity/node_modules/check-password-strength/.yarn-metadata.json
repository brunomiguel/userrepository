{
  "manifest": {
    "name": "check-password-strength",
    "version": "2.0.7",
    "description": "A NPM Password strength checker based from Javascript RegExp. Check passphrase if it's \"Too weak\", \"Weak\", \"Medium\" or \"Strong\"",
    "main": "index.js",
    "browser": "dist/umd.js",
    "module": "dist/es.js",
    "types": "index.d.ts",
    "scripts": {
      "build": "rollup -c",
      "test": "jest",
      "test:types": "tsd"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/deanilvincent/check-password-strength.git"
    },
    "keywords": [
      "npm",
      "password",
      "strength",
      "checker",
      "check password strength",
      "password strength checker",
      "strength checker",
      "password checker",
      "password checker strength",
      "strength password checker",
      "check-password-strength",
      "password-strength-checker",
      "strength-checker",
      "password-checker",
      "password-checker-strength",
      "strength-password-checker",
      "pass-strength"
    ],
    "author": {
      "name": "deanilvincent"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/deanilvincent/check-password-strength/issues"
    },
    "homepage": "https://github.com/deanilvincent/check-password-strength#readme",
    "devDependencies": {
      "jest": "^26.4.2",
      "rollup": "^2.77.0",
      "tsd": "^0.14.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-check-password-strength-2.0.7-d8fd6c1a274267c7ddd9cd15c71a3cfb6ad35baa-integrity/node_modules/check-password-strength/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# Overview\n\nA simple way to check that password strength of a certain passphrase. A password strength checker based from [Javascript RegEx](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n[![Build Status](https://travis-ci.org/deanilvincent/check-password-strength.svg?branch=master)](https://travis-ci.org/deanilvincent/check-password-strength)\n[![npm](https://img.shields.io/npm/dm/check-password-strength.svg)](https://img.shields.io/npm/dm/check-password-strength.svg)\n\n[![Downloads](https://img.shields.io/npm/dt/check-password-strength.svg)](https://img.shields.io/npm/dt/check-password-strength.svg)\n\n[DEMO 1](https://svelte.dev/repl/b5bf5871c99742e584da244b4bfeac92?version=3.44.3) by [@Ennoriel](https://github.com/Ennoriel)\n\n[DEMO 2](https://check-password-strength.netlify.app/)\n\n## Installation\n\n### Install via Package Manager\n\n`npm i check-password-strength --save`\n\n### Install via Browser Script Tag using [UNPKG](https://unpkg.com/)\n\n`<script src=\"https://unpkg.com/check-password-strength/dist/umd.js\"></script>`\n\n## Setup & Basic Usage\n```javascript\nconst { passwordStrength } = require('check-password-strength')\n// OR\nimport { passwordStrength } from 'check-password-strength'\n\nconsole.log(passwordStrength('asdfasdf').value)\n// Too weak (It will return Too weak if the value doesn't match the RegEx conditions)\n\nconsole.log(passwordStrength('asdf1234').value)\n// Weak\n\nconsole.log(passwordStrength('Asd1234!').value)\n// Medium\n\nconsole.log(passwordStrength('A@2asdF2020!!*').value)\n// Strong\n```\n## Migration from 1.x.x to 2.0.0\n\n```javascript\n// 1.x.x\nconst whateEverYourFunctionNameWasBefore = require(\"./index\");\n\n// 'contains' attribute of the response object format was\nresponse.contains = [{'message': 'lowercase'}, ...]\n```\n\n```javascript\n// 2.0.0\nconst { passwordStrength : whateEverYourFunctionNameWasBefore } = require(\"./index\");\n\n// 'contains' attribute of the response object format is now\nresponse.contains = ['lowercase', ...]\n```\n## Additional Info\n\n### Object Result\n| Property | Desc.                                                           |\n| -------- | --------------------------------------------------------------- |\n| id       | **0** = Too weak, **1** = Weak & **2** = Medium, **3** = Strong |\n| value    | Too weak, Weak, Medium & Strong                                 |\n| contains | lowercase, uppercase, symbol and/or number                      |\n| length   | length of the password                                          |\n\n### Password Length Default Options\n| Name     | Mininum Diversity | Mininum Length |\n| -------- | ----------------- | -------------- |\n| Too weak | 0                 | 0              |\n| Weak     | 2                 | 6              |\n| Medium   | 4                 | 8              |\n| Strong   | 4                 | 10             |\n\n```javascript\nconsole.log(passwordStrength('@Sdfasd2020!@#$'))\n// output \n{ \n    \"id\": 1, \n    \"value\": \"Strong\",\n    \"contains\": ['lowercase', 'uppercase', 'symbol', 'number'],\n    \"length\": 15\n}\n```\n\n### Default Options\n\nThe default symbols are based from **Password Special Characters [OWASP](https://owasp.org/www-community/password-special-characters)** list (except for the space)\n```\n!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n```\nThanks for [jlherren](https://github.com/jlherren) & [Ennoriel](https://github.com/Ennoriel) for this suggestion! üë®üèª‚Äçüíªüë®üèª‚Äçüíª\n\nThe default options can be required:\n```javascript\nconst { defaultOptions } = require(\"./index\");\n```\n\ndefault options:\n```javascript\n[\n  {\n    id: 0,\n    value: \"Too weak\",\n    minDiversity: 0,\n    minLength: 0\n  },\n  {\n    id: 1,\n    value: \"Weak\",\n    minDiversity: 2,\n    minLength: 6\n  },\n  {\n    id: 2,\n    value: \"Medium\",\n    minDiversity: 4,\n    minLength: 8\n  },\n  {\n    id: 3,\n    value: \"Strong\",\n    minDiversity: 4,\n    minLength: 10\n  }\n]\n```\n\nTo override the default options, simply pass your custom array as the second argument:\n\n  - id: correspond to the return id attribute.\n  - value: correspond to the return value attribute.\n  - minDiversity: between 0 and 4, correspond to the minimum of different criterias ('lowercase', 'uppercase', 'symbol', 'number') that should be met to pass the password strength\n  - minLength: minimum length of the password that should be met to pass the password strength\n\nThe `minDiversity` and `minLength` parameters of the first element cannot be overriden (set to 0 at the beginning of the method). Therefore, the first element should always correspond to a \"too weak\" option.\n\n```javascript\npasswordStrength('myPassword', yourCustomOptions)\n```\n### RegEx\n**Strong**\n```\n ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\"'()+,-./:;<=>?[\\]^_`{|}~])(?=.{10,})\n ```\n\n**Medium Password RegEx used:** \n```\n ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\"'()+,-./:;<=>?[\\]^_`{|}~])(?=.{8,})\n ```\n\n| RegEx                                     | Desc.                                                               |\n| ----------------------------------------- | ------------------------------------------------------------------- |\n| ^                                         | The password string will start this way                             |\n| (?=.*[a-z])                               | The string must contain at least 1 lowercase alphabetical character |\n| (?=.*[A-Z])                               | The string must contain at least 1 uppercase alphabetical character |\n| (?=.*[0-9])                               | The string must contain at least 1 numeric character                |\n| (?=.[!\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{\\|}~])) | The string must contain at least one special character              |\n| (?=.{10,})                                | The string must be eight characters or longer for Strong strength   |\n| (?=.{8,})                                 | The string must be eight characters or longer for Medium strength   |\n| (?=.{6,})                                 | Mininum of 6 characters for Weak strength                           |\n\n## TypeScript type declarations &#9745; \nAvailable starting version `v2.0.3` and above. (Thanks to [@Mesoptier!](https://github.com/Mesoptier))\n\n## Other resources\n\n##### For .NET Project\nIf you're working with .net core project, I've created a simple nuget package with same RegEx strings to validate a password strength.\n\nYou can easily install via Nuget Package Manager or .NET CLI ([Check.Password.Strength](https://github.com/deanilvincent/Check.Password.Strength)). This package uses Regular Expression `new Regex()` derives from `System.Text.RegularExpressions`. You can use this especially if you want to validate the passcode strength on backend services or web apis of your project.\n\n##### Other NPM RegEx validator\nI also made another NPM package ([hey-regex](https://www.npmjs.com/package/hey-regex)) that checks common inputs like numbers (whole number and decimal), alpha numeric, email and url. This package only returns `true` or `false` based from the selected function (with RegEx `.test()` inside).\n\nReference [blog](https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/).\n\n### Contribute\n\nFeel free to clone or fork this project:  `https://github.com/deanilvincent/check-password-strength.git`\n\nContributions & pull requests are welcome!\n\nI'll be glad if you give this project a ‚òÖ on [Github](https://github.com/deanilvincent/check-password-strength) :)\n\n***\nKudos to [@Ennoriel](https://github.com/Ennoriel) and his efforts for making v2.x.x possible!\n### License\nThis project is licensed under the MIT License - see the [LICENSE.md](https://github.com/deanilvincent/check-password-strength/blob/master/LICENSE.md/) file for details.",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Mark Deanil Vicente\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/check-password-strength/-/check-password-strength-2.0.7.tgz#d8fd6c1a274267c7ddd9cd15c71a3cfb6ad35baa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/check-password-strength/-/check-password-strength-2.0.7.tgz",
    "hash": "d8fd6c1a274267c7ddd9cd15c71a3cfb6ad35baa",
    "integrity": "sha512-VyklBkB6dOKnCIh63zdVr7QKVMN9/npwUqNAXxWrz8HabVZH/n/d+lyNm1O/vbXFJlT/Hytb5ouYKYGkoeZirQ==",
    "registry": "npm",
    "packageName": "check-password-strength",
    "cacheIntegrity": "sha512-VyklBkB6dOKnCIh63zdVr7QKVMN9/npwUqNAXxWrz8HabVZH/n/d+lyNm1O/vbXFJlT/Hytb5ouYKYGkoeZirQ== sha1-2P1sGidCZ8fd2c0Vxxo8+2rTW6o="
  },
  "registry": "npm",
  "hash": "d8fd6c1a274267c7ddd9cd15c71a3cfb6ad35baa"
}