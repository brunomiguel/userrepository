{
  "manifest": {
    "name": "cacheable-request",
    "version": "10.2.4",
    "description": "Wrap native HTTP requests with RFC compliant cache support",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/jaredwray/cacheable-request.git"
    },
    "author": {
      "name": "Jared Wray",
      "email": "me@jaredwray.com",
      "url": "http://jaredwray.com"
    },
    "type": "module",
    "exports": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "engines": {
      "node": ">=14.16"
    },
    "scripts": {
      "test": "xo && NODE_OPTIONS=--experimental-vm-modules jest --coverage ",
      "prepare": "npm run build",
      "build": "tsc --project tsconfig.build.json",
      "clean": "rm -rf node_modules && rm -rf ./coverage && rm -rf ./package-lock.json && rm -rf ./test/testdb.sqlite && rm -rf ./dist"
    },
    "files": [
      "dist"
    ],
    "keywords": [
      "HTTP",
      "HTTPS",
      "cache",
      "caching",
      "layer",
      "cacheable",
      "RFC 7234",
      "RFC",
      "7234",
      "compliant"
    ],
    "dependencies": {
      "get-stream": "^6.0.1",
      "http-cache-semantics": "^4.1.0",
      "keyv": "^4.5.2",
      "mimic-response": "^4.0.0",
      "normalize-url": "^8.0.0",
      "responselike": "^3.0.0"
    },
    "devDependencies": {
      "@keyv/sqlite": "^3.6.4",
      "@types/http-cache-semantics": "^4.0.1",
      "@types/delay": "^3.1.0",
      "@types/get-stream": "^3.0.2",
      "@types/jest": "^29.2.4",
      "@types/node": "^18.11.17",
      "@types/responselike": "^1.0.0",
      "@types/sqlite3": "^3.1.8",
      "body-parser": "^1.20.1",
      "delay": "^5.0.0",
      "eslint-plugin-jest": "^27.1.7",
      "express": "^4.18.2",
      "jest": "^29.3.1",
      "pify": "^6.1.0",
      "sqlite3": "^5.1.4",
      "ts-jest": "^29.0.3",
      "ts-jest-resolver": "^2.0.0",
      "ts-node": "^10.9.1",
      "typescript": "^4.9.4",
      "xo": "^0.53.1"
    },
    "jest": {
      "collectCoverageFrom": [
        "src/**/*.{ts,js}"
      ],
      "extensionsToTreatAsEsm": [
        ".ts"
      ],
      "resolver": "ts-jest-resolver",
      "moduleFileExtensions": [
        "ts",
        "js"
      ],
      "transform": {
        "^.+\\.(ts|tsx)$": [
          "ts-jest",
          {
            "tsconfig": "./tsconfig.build.json",
            "useESM": true
          }
        ]
      },
      "testMatch": [
        "**/test/*.test.(ts|js)"
      ],
      "testEnvironment": "node"
    },
    "xo": {
      "plugins": [
        "jest"
      ],
      "extends": [
        "plugin:jest/recommended"
      ],
      "rules": {
        "@typescript-eslint/triple-slash-reference": 0,
        "@typescript-eslint/no-namespace": 0,
        "@typescript-eslint/no-unsafe-assignment": 0,
        "@typescript-eslint/no-unsafe-call": 0,
        "@typescript-eslint/ban-types": 0,
        "@typescript-eslint/restrict-template-expressions": 0,
        "@typescript-eslint/no-unsafe-return": 0,
        "new-cap": 0,
        "unicorn/no-abusive-eslint-disable": 0,
        "@typescript-eslint/restrict-plus-operands": 0,
        "@typescript-eslint/no-implicit-any-catch": 0,
        "@typescript-eslint/consistent-type-imports": 0,
        "@typescript-eslint/consistent-type-definitions": 0,
        "n/prefer-global/url": 0
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cacheable-request-10.2.4-9b9700f9f71b281d5f0e99b514fc9a94e3fbb589-integrity/node_modules/cacheable-request/package.json",
    "readmeFilename": "README.md",
    "readme": "# cacheable-request\n\n> Wrap native HTTP requests with RFC compliant cache support\n\n[![tests](https://github.com/jaredwray/cacheable-request/actions/workflows/tests.yaml/badge.svg)](https://github.com/jaredwray/cacheable-request/actions/workflows/tests.yaml)\n[![codecov](https://codecov.io/gh/jaredwray/cacheable-request/branch/master/graph/badge.svg?token=LDLaqe4PsI)](https://codecov.io/gh/jaredwray/cacheable-request)\n[![npm](https://img.shields.io/npm/dm/cacheable-request.svg)](https://www.npmjs.com/package/cacheable-request)\n[![npm](https://img.shields.io/npm/v/cacheable-request.svg)](https://www.npmjs.com/package/cacheable-request)\n\n[RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching for native Node.js HTTP/HTTPS requests. Caching works out of the box in memory or is easily pluggable with a wide range of storage adapters.\n\n**Note:** This is a low level wrapper around the core HTTP modules, it's not a high level request library.\n\n# Table of Contents\n* [Latest Changes](#latest-changes)\n* [Features](#features)\n* [Install and Usage](#install-and-usage)\n* [Storage Adapters](#storage-adapters)\n* [API](#api)\n* [Using Hooks](#using-hooks)\n* [Contributing](#contributing)\n* [Ask a Question](#ask-a-question)\n* [License](#license) (MIT)\n\n# Latest Changes\n\n## Breaking Changes with v10.0.0\nThis release contains breaking changes. This is the new way to use this package.\n\n### Usage Before v10\n```js\nimport http from 'http';\nimport CacheableRequest from 'cacheable-request';\n\n// Then instead of\nconst req = http.request('http://example.com', cb);\nreq.end();\n\n// You can do\nconst cacheableRequest = new CacheableRequest(http.request);\nconst cacheReq = cacheableRequest('http://example.com', cb);\ncacheReq.on('request', req => req.end());\n// Future requests to 'example.com' will be returned from cache if still valid\n\n// You pass in any other http.request API compatible method to be wrapped with cache support:\nconst cacheableRequest = new CacheableRequest(https.request);\nconst cacheableRequest = new CacheableRequest(electron.net);\n```\n\n### Usage After v10.1.0\n```js\n\nimport CacheableRequest from 'cacheable-request';\n\n// Now You can do\nconst cacheableRequest = new CacheableRequest(http.request).request();\nconst cacheReq = cacheableRequest('http://example.com', cb);\ncacheReq.on('request', req => req.end());\n// Future requests to 'example.com' will be returned from cache if still valid\n\n// You pass in any other http.request API compatible method to be wrapped with cache support:\nconst cacheableRequest = new CacheableRequest(https.request).request();\nconst cacheableRequest = new CacheableRequest(electron.net).request();\n```\n\nThe biggest change is that when you do a `new` CacheableRequest you now want to call `request` method will give you the instance to use. \n\n```diff\n- const cacheableRequest = new CacheableRequest(http.request);\n+ const cacheableRequest = new CacheableRequest(http.request).request();\n```\n\n### ESM Support in version 9 and higher. \n\nWe are now using pure esm support in our package. If you need to use commonjs you can use v8 or lower. To learn more about using ESM please read this from `sindresorhus`: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n## Features\n\n- Only stores cacheable responses as defined by RFC 7234\n- Fresh cache entries are served directly from cache\n- Stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers\n- 304 responses from revalidation requests use cached body\n- Updates `Age` header on cached responses\n- Can completely bypass cache on a per request basis\n- In memory cache by default\n- Official support for Redis, Memcache, Etcd, MongoDB, SQLite, PostgreSQL and MySQL storage adapters\n- Easily plug in your own or third-party storage adapters\n- If DB connection fails, cache is automatically bypassed ([disabled by default](#optsautomaticfailover))\n- Adds cache support to any existing HTTP code with minimal changes\n- Uses [http-cache-semantics](https://github.com/pornel/http-cache-semantics) internally for HTTP RFC 7234 compliance\n\n## Install and Usage\n\n```shell\nnpm install cacheable-request\n```\n\n```js\nimport http from 'http';\nimport CacheableRequest from 'cacheable-request';\n\n// Then instead of\nconst req = http.request('http://example.com', cb);\nreq.end();\n\n// You can do\nconst cacheableRequest = new CacheableRequest(http.request).createCacheableRequest();\nconst cacheReq = cacheableRequest('http://example.com', cb);\ncacheReq.on('request', req => req.end());\n// Future requests to 'example.com' will be returned from cache if still valid\n\n// You pass in any other http.request API compatible method to be wrapped with cache support:\nconst cacheableRequest = new CacheableRequest(https.request).createCacheableRequest();\nconst cacheableRequest = new CacheableRequest(electron.net).createCacheableRequest();\n```\n\n## Storage Adapters\n\n`cacheable-request` uses [Keyv](https://github.com/jaredwray/keyv) to support a wide range of storage adapters.\n\nFor example, to use Redis as a cache backend, you just need to install the official Redis Keyv storage adapter:\n\n```\nnpm install @keyv/redis\n```\n\nAnd then you can pass `CacheableRequest` your connection string:\n\n```js\nconst cacheableRequest = new CacheableRequest(http.request, 'redis://user:pass@localhost:6379').createCacheableRequest();\n```\n\n[View all official Keyv storage adapters.](https://github.com/jaredwray/keyv#official-storage-adapters)\n\nKeyv also supports anything that follows the Map API so it's easy to write your own storage adapter or use a third-party solution.\n\ne.g The following are all valid storage adapters\n\n```js\nconst storageAdapter = new Map();\n// or\nconst storageAdapter = require('./my-storage-adapter');\n// or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({ maxSize: 1000 });\n\nconst cacheableRequest = new CacheableRequest(http.request, storageAdapter).createCacheableRequest();\n```\n\nView the [Keyv docs](https://github.com/jaredwray/keyv) for more information on how to use storage adapters.\n\n## API\n\n### new cacheableRequest(request, [storageAdapter])\n\nReturns the provided request function wrapped with cache support.\n\n#### request\n\nType: `function`\n\nRequest function to wrap with cache support. Should be [`http.request`](https://nodejs.org/api/http.html#http_http_request_options_callback) or a similar API compatible request function.\n\n#### storageAdapter\n\nType: `Keyv storage adapter`<br>\nDefault: `new Map()`\n\nA [Keyv](https://github.com/jaredwray/keyv) storage adapter instance, or connection string if using with an official Keyv storage adapter.\n\n### Instance\n\n#### cacheableRequest(opts, [cb])\n\nReturns an event emitter.\n\n##### opts\n\nType: `object`, `string`\n\n- Any of the default request functions options.\n- Any [`http-cache-semantics`](https://github.com/kornelski/http-cache-semantics#constructor-options) options.\n- Any of the following:\n\n###### opts.cache\n\nType: `boolean`<br>\nDefault: `true`\n\nIf the cache should be used. Setting this to false will completely bypass the cache for the current request.\n\n###### opts.strictTtl\n\nType: `boolean`<br>\nDefault: `false`\n\nIf set to `true` once a cached resource has expired it is deleted and will have to be re-requested.\n\nIf set to `false` (default), after a cached resource's TTL expires it is kept in the cache and will be revalidated on the next request with `If-None-Match`/`If-Modified-Since` headers.\n\n###### opts.maxTtl\n\nType: `number`<br>\nDefault: `undefined`\n\nLimits TTL. The `number` represents milliseconds.\n\n###### opts.automaticFailover\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen set to `true`, if the DB connection fails we will automatically fallback to a network request. DB errors will still be emitted to notify you of the problem even though the request callback may succeed.\n\n###### opts.forceRefresh\n\nType: `boolean`<br>\nDefault: `false`\n\nForces refreshing the cache. If the response could be retrieved from the cache, it will perform a new request and override the cache instead.\n\n##### cb\n\nType: `function`\n\nThe callback function which will receive the response as an argument.\n\nThe response can be either a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage) or a [responselike object](https://github.com/lukechilds/responselike). The response will also have a `fromCache` property set with a boolean value.\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Note:** This event will only fire if an HTTP request is actually made, not when a response is retrieved from cache. However, you should always handle the `request` event to end the request and handle any potential request errors.\n\n##### .on('response', response)\n\n`response` event to get the response object from the HTTP request or cache.\n\n##### .on('error', error)\n\n`error` event emitted in case of an error with the cache.\n\nErrors emitted here will be an instance of `CacheableRequest.RequestError` or `CacheableRequest.CacheError`. You will only ever receive a `RequestError` if the request function throws (normally caused by invalid user input). Normal request errors should be handled inside the `request` event.\n\nTo properly handle all error scenarios you should use the following pattern:\n\n```js\ncacheableRequest('example.com', cb)\n  .on('error', err => {\n    if (err instanceof CacheableRequest.CacheError) {\n      handleCacheError(err); // Cache error\n    } else if (err instanceof CacheableRequest.RequestError) {\n      handleRequestError(err); // Request function thrown\n    }\n  })\n  .on('request', req => {\n    req.on('error', handleRequestError); // Request error emitted\n    req.end();\n  });\n```\n**Note:** Database connection errors are emitted here, however `cacheable-request` will attempt to re-request the resource and bypass the cache on a connection error. Therefore a database connection error doesn't necessarily mean the request won't be fulfilled.\n\n\n## Using Hooks\nHooks have been implemented since version `v9` and are very useful to modify response before saving it in cache. You can use hooks to modify response before saving it in cache. You can also use hooks to modify response before returning it to user.\n\n### Add Hooks\n\nThe hook will pre compute response right before saving it in cache. You can include many hooks and it will run in order you add hook on response object.\n\n```js\nimport http from 'http';\nimport CacheableRequest from 'cacheable-request';\n\nconst cacheableRequest = new CacheableRequest(request, cache).request();\n\n// adding a hook to decompress response\ncacheableRequest.addHook('onResponse', async (value: CacheValue, response: any) => {\n  const buffer = await pm(gunzip)(value.body);\n  value.body = buffer.toString();\n  return value;\n});\n```\n\nhere is also an example of how to add in the remote address\n\n```js\nimport CacheableRequest, {CacheValue} from 'cacheable-request';\n\nconst cacheableRequest = new CacheableRequest(request, cache).request();\ncacheableRequest.addHook('onResponse', (value: CacheValue, response: any) => {\n  if (response.connection) {\n    value.remoteAddress = response.connection.remoteAddress;\n  }\n\n  return value;\n});\n```\n\n### Remove Hooks\n\nYou can also remove hook by using below\n\n```js\nCacheableRequest.removeHook('onResponse');\n```\n\n## How to Contribute\n\nCacheable-Request is an open source package and community driven that is maintained regularly. In addtion we have a couple of other guidelines for review:\n\n* [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) - Our code of conduct\n* [CONTRIBUTING.md](CONTRIBUTING.md) - How to contribute to this project\n* [SECURITY.md](SECURITY.md) - Security guidelines and supported versions \n\n## Post an Issue\n\nTo post an issue, navigate to the \"Issues\" tab in the main repository, and then select \"New Issue.\" Enter a clear title describing the issue, as well as a description containing additional relevant information. Also select the label that best describes your issue type. For a bug report, for example, create an issue with the label \"bug.\" In the description field, Be sure to include replication steps, as well as any relevant error messages.\n\nIf you're reporting a security violation, be sure to check out the project's [security policy](SECURITY.md).\n\nPlease also refer to our [Code of Conduct](CODE_OF_CONDUCT.md) for more information on how to report issues.\n\n## Ask a Question\n\nTo ask a question, create an issue with the label \"question.\" In the issue description, include the related code and any context that can help us answer your question.\n\n## License\n\nThis project is under the [MIT](LICENSE) license. \n\nMIT © Luke Childs 2017-2021\nMIT © Jared Wray 2022\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017-2021 Luke Childs\nCopyright (c) 2022 Jared Wray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cacheable-request/-/cacheable-request-10.2.4.tgz#9b9700f9f71b281d5f0e99b514fc9a94e3fbb589",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cacheable-request/-/cacheable-request-10.2.4.tgz",
    "hash": "9b9700f9f71b281d5f0e99b514fc9a94e3fbb589",
    "integrity": "sha512-IWIea8ei1Ht4dBqvlvh7Gs7EYlMyBhlJybLDUB9sadEqHqftmdNieMLIR5ia3vs8gbjj9t8hXLBpUVg3vcQNbg==",
    "registry": "npm",
    "packageName": "cacheable-request",
    "cacheIntegrity": "sha512-IWIea8ei1Ht4dBqvlvh7Gs7EYlMyBhlJybLDUB9sadEqHqftmdNieMLIR5ia3vs8gbjj9t8hXLBpUVg3vcQNbg== sha1-m5cA+fcbKB1fDpm1FPyalOP7tYk="
  },
  "registry": "npm",
  "hash": "9b9700f9f71b281d5f0e99b514fc9a94e3fbb589"
}