{
  "manifest": {
    "name": "cargo-cp-artifact",
    "version": "0.1.7",
    "description": "Copies compiler artifacts emitted by rustc by parsing Cargo metadata",
    "main": "src/index.js",
    "files": [
      "bin",
      "src"
    ],
    "bin": {
      "cargo-cp-artifact": "bin/cargo-cp-artifact.js"
    },
    "scripts": {
      "test": "mocha test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/neon-bindings/neon.git"
    },
    "keywords": [
      "cargo",
      "rust",
      "neon"
    ],
    "author": {
      "name": "K.J. Valencik"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/neon-bindings/neon/issues"
    },
    "homepage": "https://github.com/neon-bindings/neon/tree/main/pkgs/cargo-cp-artifact",
    "devDependencies": {
      "mocha": "^10.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cargo-cp-artifact-0.1.7-1181b9d6e71f00f17c068c05e3cd1b0864783341-integrity/node_modules/cargo-cp-artifact/package.json",
    "readmeFilename": "README.md",
    "readme": "# cargo-cp-artifact\n\n`cargo-cp-artifact` is a small command line utility for parsing cargo metadata output and copying a compiler artifact to a desired location.\n\n## Installation\n\n```sh\nnpm install -g cargo-cp-artifact\n```\n\n## Usage\n\n```\ncargo-cp-artifact --artifact artifact-kind crate-name output-file -- wrapped-command\n```\n\n`cargo-cp-artifact` accepts a list of crate name and artifact kind to output file mappings and a command to wrap.`cargo-cp-artifact` will read `stdout` of the wrapped command and parse it as [cargo metadata](https://doc.rust-lang.org/cargo/reference/external-tools.html#json-messages). Compiler artifacts that match arguments provided will be copied to the target destination.\n\nWhen wrapping a `cargo` command, it is necessary to include a `json` format to `--message-format`.\n\n### Arguments\n\nMultiple arguments are allowed to copy multiple build artifacts.\n\n#### `--artifact`\n\n_Alias: `-a`_\n\nFollowed by *three* arguments: `artifact-kind crate-name output-file`\n\n#### `--npm`\n\n_Alias: `-n`_\n\nFollowed by *two* arguments: `artifact-kind output-file`\n\nThe crate name will be read from the `npm_package_name` environment variable. If the package name includes a namespace (`@namespace/package`), the namespace will be removed when matching the crate name (`package`).\n\n### Artifact Kind\n\nValid artifact kinds are `bin`, `cdylib`, and `dylib`. They may be abbreviated as `b`, `c`, and `d` respectively.\n\nFor example, `-ac` is the equivalent of `--artifact cdylib`.\n\n## Examples\n\n### Wrapping cargo\n\n```sh\ncargo-cp-artifact -a cdylib my-crate lib/index.node -- cargo build --message-format=json-render-diagnostics\n```\n\n### Parsing a file\n\n```sh\ncargo-cp-artifact -a cdylib my-crate lib/index.node -- cat build-output.txt\n```\n\n### `npm` script\n\n`package.json`\n```json\n{\n    \"name\": \"my-crate\",\n    \"scripts\": {\n        \"build\": \"cargo-cp-artifact -nc lib/index.node -- cargo build --message-format=json-render-diagnostics\"\n    }\n}\n```\n\n```sh\nnpm run build\n\n# Additional arguments may be passed\nnpm run build -- --feature=serde\n```\n\n## Why does this exist?\n\nAt the time of writing, `cargo` does not include a configuration for outputting a library or binary to a specified location. An `--out-dir` option [exists on nightly](https://github.com/rust-lang/cargo/issues/6790), but does not allow specifying the name of the file.\n\nIt surprisingly difficult to reliably find the location of a cargo compiler artifact. It is impacted by many parameters, including:\n\n* Build profile\n* Target, default or specified\n* Crate name and name transforms\n\nHowever, `cargo` can emit metadata on `stdout` while continuing to provide human readable diagnostics on `stderr`. The metadata may be parsed to more easily and reliably find the location of compiler artifacts.\n\n`cargo-cp-artifact` chooses to wrap a command as a child process instead of reading `stdin` for two reasons:\n\n1. Removes the need for `-o pipefile` when integrating with build tooling which may need to be platform agnostic.\n2. Allows additional arguments to be provided when used in an [`npm` script](https://docs.npmjs.com/cli/v6/using-npm/scripts).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 The Neon Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cargo-cp-artifact/-/cargo-cp-artifact-0.1.7.tgz#1181b9d6e71f00f17c068c05e3cd1b0864783341",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cargo-cp-artifact/-/cargo-cp-artifact-0.1.7.tgz",
    "hash": "1181b9d6e71f00f17c068c05e3cd1b0864783341",
    "integrity": "sha512-pxEV9p1on8vu3BOKstVisF9TwMyGKCBRvzaVpQHuU2sLULCKrn3MJWx/4XlNzmG6xNCTPf78DJ7WCGgr2mOzjg==",
    "registry": "npm",
    "packageName": "cargo-cp-artifact",
    "cacheIntegrity": "sha512-pxEV9p1on8vu3BOKstVisF9TwMyGKCBRvzaVpQHuU2sLULCKrn3MJWx/4XlNzmG6xNCTPf78DJ7WCGgr2mOzjg== sha1-EYG51ucfAPF8BowF480bCGR4M0E="
  },
  "registry": "npm",
  "hash": "1181b9d6e71f00f17c068c05e3cd1b0864783341"
}