{
  "manifest": {
    "name": "@commitlint/config-conventional",
    "version": "17.2.0",
    "description": "Shareable commitlint config enforcing conventional commits",
    "files": [
      "index.js"
    ],
    "scripts": {
      "deps": "dep-check",
      "pkg": "pkg-check"
    },
    "publishConfig": {
      "access": "public"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/conventional-changelog/commitlint.git",
      "directory": "@commitlint/config-conventional"
    },
    "keywords": [
      "conventional-changelog",
      "commitlint",
      "commitlint-config",
      "angular"
    ],
    "author": {
      "name": "Mario Nebl",
      "email": "hello@herebecode.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/conventional-changelog/commitlint/issues"
    },
    "homepage": "https://commitlint.js.org/",
    "engines": {
      "node": ">=v14"
    },
    "devDependencies": {
      "@commitlint/lint": "^17.2.0",
      "@commitlint/utils": "^17.0.0"
    },
    "dependencies": {
      "conventional-changelog-conventionalcommits": "^5.0.0"
    },
    "gitHead": "a2fab85ec0668b112f43073c766a2a8545a55497",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@commitlint-config-conventional-17.2.0-245086582cb02901eb4beaa52bc87d138238178f-integrity/node_modules/@commitlint/config-conventional/package.json",
    "readmeFilename": "README.md",
    "readme": "> Lint your conventional commits\n\n# @commitlint/config-conventional\n\nShareable `commitlint` config enforcing [conventional commits](https://conventionalcommits.org/).\nUse with [@commitlint/cli](https://npm.im/@commitlint/cli) and [@commitlint/prompt-cli](https://npm.im/@commitlint/prompt-cli).\n\n## Getting started\n\n```sh\nnpm install --save-dev @commitlint/config-conventional @commitlint/cli\necho \"module.exports = {extends: ['@commitlint/config-conventional']};\" > commitlint.config.js\n```\n\n## Rules\n\n### Problems\n\nThe following rules are considered problems for `@commitlint/config-conventional` and will yield a non-zero exit code when not met.\n\nConsult [docs/rules](https://conventional-changelog.github.io/commitlint/#/reference-rules) for a list of available rules.\n\n#### type-enum\n\n- **condition**: `type` is found in value\n- **rule**: `always`\n- **level**: `error`\n- **value**\n\n  ```\n  [\n    'build',\n    'chore',\n    'ci',\n    'docs',\n    'feat',\n    'fix',\n    'perf',\n    'refactor',\n    'revert',\n    'style',\n    'test'\n  ];\n  ```\n\n```sh\necho \"foo: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n#### type-case\n\n- **description**: `type` is in case `value`\n- **rule**: `always`\n- **level**: `error`\n- **value**\n  ```\n  'lowerCase'\n  ```\n\n```sh\necho \"FIX: some message\" # fails\necho \"fix: some message\" # passes\n```\n\n#### type-empty\n\n- **condition**: `type` is empty\n- **rule**: `never`\n- **level**: `error`\n\n```sh\necho \": some message\" # fails\necho \"fix: some message\" # passes\n```\n\n#### subject-case\n\n- **condition**: `subject` is in one of the cases `['sentence-case', 'start-case', 'pascal-case', 'upper-case']`\n- **rule**: `never`\n- **level**: `error`\n\n```sh\necho \"fix(SCOPE): Some message\" # fails\necho \"fix(SCOPE): Some Message\" # fails\necho \"fix(SCOPE): SomeMessage\" # fails\necho \"fix(SCOPE): SOMEMESSAGE\" # fails\necho \"fix(scope): some message\" # passes\necho \"fix(scope): some Message\" # passes\n```\n\n#### subject-empty\n\n- **condition**: `subject` is empty\n- **rule**: `never`\n- **level**: `error`\n\n```sh\necho \"fix:\" # fails\necho \"fix: some message\" # passes\n```\n\n#### subject-full-stop\n\n- **condition**: `subject` ends with `value`\n- **rule**: `never`\n- **level**: `error`\n- **value**\n\n```\n'.'\n```\n\n```sh\necho \"fix: some message.\" # fails\necho \"fix: some message\" # passes\n```\n\n#### header-max-length\n\n- **condition**: `header` has `value` or less characters\n- **rule**: `always`\n- **level**: `error`\n- **value**\n\n```\n100\n```\n\n```sh\necho \"fix: some message that is way too long and breaks the line max-length by several characters\" # fails\necho \"fix: some message\" # passes\n```\n\n#### footer-leading-blank\n\n- **condition**: `footer` should have a leading blank line\n- **rule**: `always`\n- level: `warning`\n\n```sh\necho \"fix: some message\nBREAKING CHANGE: It will be significant\" # warning\n\necho \"fix: some message\n\nBREAKING CHANGE: It will be significant\" # passes\n```\n\n#### footer-max-line-length\n\n- **condition**: `footer` each line has `value` or less characters\n- **rule**: `always`\n- level: `error`\n- **value**\n\n```\n100\n```\n\n```sh\necho \"fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nhas a message that is way too long and will break the line rule 'line-max-length' by several characters\" # fails\n\necho \"fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nbut still no line is too long\" # passes\n```\n\n#### body-leading-blank\n\n- **condition**: `body` should have a leading blank line\n- **rule**: `always`\n- level: `warning`\n\n```sh\necho \"fix: some message\nbody\" # warning\n\necho \"fix: some message\n\nbody\" # passes\n```\n\n#### body-max-line-length\n\n- **condition**: `body` each line has `value` or less characters\n- **rule**: `always`\n- level: `error`\n- **value**\n\n```\n100\n```\n\n```sh\necho \"fix: some message\n\nbody with multiple lines\nhas a message that is way too long and will break the line rule 'line-max-length' by several characters\" # fails\n\necho \"fix: some message\n\nbody with multiple lines\nbut still no line is too long\" # passes\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 - present Mario Nebl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@commitlint/config-conventional/-/config-conventional-17.2.0.tgz#245086582cb02901eb4beaa52bc87d138238178f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@commitlint/config-conventional/-/config-conventional-17.2.0.tgz",
    "hash": "245086582cb02901eb4beaa52bc87d138238178f",
    "integrity": "sha512-g5hQqRa80f++SYS233dbDSg16YdyounMTAhVcmqtInNeY/GF3aA4st9SVtJxpeGrGmueMrU4L+BBb+6Vs5wrcg==",
    "registry": "npm",
    "packageName": "@commitlint/config-conventional",
    "cacheIntegrity": "sha512-g5hQqRa80f++SYS233dbDSg16YdyounMTAhVcmqtInNeY/GF3aA4st9SVtJxpeGrGmueMrU4L+BBb+6Vs5wrcg== sha1-JFCGWCywKQHrS+qlK8h9E4I4F48="
  },
  "registry": "npm",
  "hash": "245086582cb02901eb4beaa52bc87d138238178f"
}