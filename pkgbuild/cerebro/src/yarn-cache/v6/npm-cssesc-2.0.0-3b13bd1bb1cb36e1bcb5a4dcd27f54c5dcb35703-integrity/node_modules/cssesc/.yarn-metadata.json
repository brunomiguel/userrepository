{
  "manifest": {
    "name": "cssesc",
    "version": "2.0.0",
    "description": "A JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output.",
    "homepage": "https://mths.be/cssesc",
    "engines": {
      "node": ">=4"
    },
    "main": "cssesc.js",
    "bin": {
      "cssesc": "bin/cssesc"
    },
    "man": [
      "man/cssesc.1"
    ],
    "keywords": [
      "css",
      "escape",
      "identifier",
      "string",
      "tool"
    ],
    "license": "MIT",
    "author": {
      "name": "Mathias Bynens",
      "url": "https://mathiasbynens.be/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mathiasbynens/cssesc.git"
    },
    "bugs": {
      "url": "https://github.com/mathiasbynens/cssesc/issues"
    },
    "files": [
      "LICENSE-MIT.txt",
      "cssesc.js",
      "bin/",
      "man/"
    ],
    "scripts": {
      "build": "grunt template && babel cssesc.js -o cssesc.js",
      "test": "mocha tests",
      "cover": "istanbul cover --report html node_modules/.bin/_mocha tests -- -u exports -R spec"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-preset-env": "^1.6.1",
      "codecov": "^1.0.1",
      "grunt": "^1.0.1",
      "grunt-template": "^1.0.0",
      "istanbul": "^0.4.4",
      "mocha": "^2.5.3",
      "regenerate": "^1.2.1",
      "requirejs": "^2.1.16"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cssesc-2.0.0-3b13bd1bb1cb36e1bcb5a4dcd27f54c5dcb35703-integrity/node_modules/cssesc/package.json",
    "readmeFilename": "README.md",
    "readme": "# cssesc [![Build status](https://travis-ci.org/mathiasbynens/cssesc.svg?branch=master)](https://travis-ci.org/mathiasbynens/cssesc) [![Code coverage status](https://img.shields.io/codecov/c/github/mathiasbynens/cssesc.svg)](https://codecov.io/gh/mathiasbynens/cssesc)\n\nA JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output.\n\nThis is a JavaScript library for [escaping text for use in CSS strings or identifiers](https://mathiasbynens.be/notes/css-escapes) while generating the shortest possible valid ASCII-only output. [Here‚Äôs an online demo.](https://mothereff.in/css-escapes)\n\n[A polyfill for the CSSOM `CSS.escape()` method is available in a separate repository.](https://mths.be/cssescape) (In comparison, _cssesc_ is much more powerful.)\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [npm](https://www.npmjs.com/):\n\n```bash\nnpm install cssesc\n```\n\nIn a browser:\n\n```html\n<script src=\"cssesc.js\"></script>\n```\n\nIn [Node.js](https://nodejs.org/):\n\n```js\nconst cssesc = require('cssesc');\n```\n\nIn Ruby using [the `ruby-cssesc` wrapper gem](https://github.com/borodean/ruby-cssesc):\n\n```bash\ngem install ruby-cssesc\n```\n\n```ruby\nrequire 'ruby-cssesc'\nCSSEsc.escape('I ‚ô• Ruby', is_identifier: true)\n```\n\nIn Sass using [`sassy-escape`](https://github.com/borodean/sassy-escape):\n\n```bash\ngem install sassy-escape\n```\n\n```scss\nbody {\n  content: escape('I ‚ô• Sass', $is-identifier: true);\n}\n```\n\n## API\n\n### `cssesc(value, options)`\n\nThis function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in CSS strings or identifiers](https://mathiasbynens.be/notes/css-escapes).\n\n```js\ncssesc('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\2665  B\\\\FC cher'\n\ncssesc('foo ùåÜ bar');\n// ‚Üí 'foo \\\\1D306  bar'\n```\n\nBy default, `cssesc` returns a string that can be used as part of a CSS string. If the target is a CSS identifier rather than a CSS string, use the `isIdentifier: true` setting (see below).\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `isIdentifier`\n\nThe default value for the `isIdentifier` option is `false`. This means that the input text will be escaped for use in a CSS string literal. If you want to use the result as a CSS identifier instead (in a selector, for example), set this option to `true`.\n\n```js\ncssesc('123a2b');\n// ‚Üí '123a2b'\n\ncssesc('123a2b', {\n  'isIdentifier': true\n});\n// ‚Üí '\\\\31 23a2b'\n```\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input text will be escaped as `\\'`, so that the output can be used in a CSS string literal wrapped in single quotes.\n\n```js\ncssesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n\ncssesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a CSS string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\ncssesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid CSS string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\ncssesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\ncssesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\ncssesc('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\6C\\\\6F\\\\6C\\\\77\\\\61\\\\74\\\\\"\\\\66\\\\6F\\\\6F\\\\\\'\\\\62\\\\61\\\\72'\n// ‚Üí \"\\\\6C\\\\6F\\\\6C\\\\77\\\\61\\\\74\\\\\\\"\\\\66\\\\6F\\\\6F\\\\'\\\\62\\\\61\\\\72\"\n```\n\n#### Overriding the default options globally\n\nThe global default settings can be overridden by modifying the `css.options` object. This saves you from passing in an `options` object for every call to `encode` if you want to use the non-default setting.\n\n```js\n// Read the global default setting for `escapeEverything`:\ncssesc.options.escapeEverything;\n// ‚Üí `false` by default\n\n// Override the global default setting for `escapeEverything`:\ncssesc.options.escapeEverything = true;\n\n// Using the global default setting for `escapeEverything`, which is now `true`:\ncssesc('foo ¬© bar ‚â† baz ùåÜ qux');\n// ‚Üí '\\\\66\\\\6F\\\\6F\\\\ \\\\A9\\\\ \\\\62\\\\61\\\\72\\\\ \\\\2260\\\\ \\\\62\\\\61\\\\7A\\\\ \\\\1D306\\\\ \\\\71\\\\75\\\\78'\n```\n\n### `cssesc.version`\n\nA string representing the semantic version number.\n\n### Using the `cssesc` binary\n\nTo use the `cssesc` binary in your shell, simply install cssesc globally using npm:\n\n```bash\nnpm install -g cssesc\n```\n\nAfter that you will be able to escape text for use in CSS strings or identifiers from the command line:\n\n```bash\n$ cssesc 'f√∂o ‚ô• b√•r ùåÜ baz'\nf\\F6o \\2665  b\\E5r \\1D306  baz\n```\n\nIf the output needs to be a CSS identifier rather than part of a string literal, use the `-i`/`--identifier` option:\n\n```bash\n$ cssesc --identifier 'f√∂o ‚ô• b√•r ùåÜ baz'\nf\\F6o\\ \\2665\\ b\\E5r\\ \\1D306\\ baz\n```\n\nSee `cssesc --help` for the full list of options.\n\n## Support\n\nThis library supports the Node.js and browser versions mentioned in [`.babelrc`](https://github.com/mathiasbynens/cssesc/blob/master/.babelrc). For a version that supports a wider variety of legacy browsers and environments out-of-the-box, [see v0.1.0](https://github.com/mathiasbynens/cssesc/releases/tag/v0.1.0).\n\n## Author\n\n| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](https://mathiasbynens.be/) |\n\n## License\n\nThis library is available under the [MIT](https://mths.be/mit) license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cssesc/-/cssesc-2.0.0.tgz#3b13bd1bb1cb36e1bcb5a4dcd27f54c5dcb35703",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cssesc/-/cssesc-2.0.0.tgz",
    "hash": "3b13bd1bb1cb36e1bcb5a4dcd27f54c5dcb35703",
    "integrity": "sha512-MsCAG1z9lPdoO/IUMLSBWBSVxVtJ1395VGIQ+Fc2gNdkQ1hNDnQdw3YhA71WJCBW1vdwA0cAnk/DnW6bqoEUYg==",
    "registry": "npm",
    "packageName": "cssesc",
    "cacheIntegrity": "sha512-MsCAG1z9lPdoO/IUMLSBWBSVxVtJ1395VGIQ+Fc2gNdkQ1hNDnQdw3YhA71WJCBW1vdwA0cAnk/DnW6bqoEUYg== sha1-OxO9G7HLNuG8taTc0n9UxdyzVwM="
  },
  "registry": "npm",
  "hash": "3b13bd1bb1cb36e1bcb5a4dcd27f54c5dcb35703"
}