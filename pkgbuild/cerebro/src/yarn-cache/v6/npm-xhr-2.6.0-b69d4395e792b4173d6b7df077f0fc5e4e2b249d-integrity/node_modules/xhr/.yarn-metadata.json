{
  "manifest": {
    "name": "xhr",
    "version": "2.6.0",
    "description": "small xhr abstraction",
    "keywords": [
      "xhr",
      "http",
      "xmlhttprequest",
      "xhr2",
      "browserify"
    ],
    "author": {
      "name": "Raynos",
      "email": "raynos2@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/naugtur/xhr.git"
    },
    "main": "index",
    "homepage": "https://github.com/naugtur/xhr",
    "contributors": [
      {
        "name": "Jake Verbaten"
      },
      {
        "name": "Zbyszek Tenerowicz",
        "email": "naugtur@gmail.com"
      }
    ],
    "bugs": {
      "url": "https://github.com/naugtur/xhr/issues",
      "email": "naugtur@gmail.com"
    },
    "typings": "./index.d.ts",
    "dependencies": {
      "global": "~4.4.0",
      "is-function": "^1.0.1",
      "parse-headers": "^2.0.0",
      "xtend": "^4.0.0"
    },
    "devDependencies": {
      "for-each": "^0.3.2",
      "pre-commit": "1.2.2",
      "run-browser": "naugtur/run-browser",
      "tap-spec": "^4.0.2",
      "tape": "^4.0.0"
    },
    "license": "MIT",
    "scripts": {
      "test": "run-browser test/index.js -b -m test/mock-server.js | tap-spec",
      "browser": "run-browser -m test/mock-server.js test/index.js"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-xhr-2.6.0-b69d4395e792b4173d6b7df077f0fc5e4e2b249d-integrity/node_modules/xhr/package.json",
    "readmeFilename": "README.md",
    "readme": "# xhr\n\n[![Join the chat at https://gitter.im/naugtur-xhr/Lobby](https://badges.gitter.im/naugtur-xhr/Lobby.svg)](https://gitter.im/naugtur-xhr/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n\nA small XMLHttpRequest wrapper. Designed for use with [browserify](http://browserify.org/), [webpack](https://webpack.github.io/) etc.\n\nAPI is a subset of [request](https://github.com/request/request) so you can write code that works in both node.js and the browser by using `require('request')` in your code and telling your browser bundler to load `xhr` instead of `request`.\n\nFor browserify, add a [browser](https://github.com/substack/node-browserify#browser-field) field to your `package.json`:\n\n```\n\"browser\": {\n  \"request\": \"xhr\"\n}\n```\n\nFor webpack, add a [resolve.alias](http://webpack.github.io/docs/configuration.html#resolve-alias) field to your configuration:\n\n```\n\"resolve\": {\n  \"alias\": {\n    \"request$\": \"xhr\"\n  }\n}\n```\n\nBrowser support: IE8+ and everything else.\n\n## Installation\n\n```\nnpm install xhr\n```\n\n## Example\n\n```js\nvar xhr = require(\"xhr\")\n\nxhr({\n    method: \"post\",\n    body: someJSONString,\n    uri: \"/foo\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n}, function (err, resp, body) {\n    // check resp.statusCode\n})\n```\n\n## `var req = xhr(options, callback)`\n\n```js\ntype XhrOptions = String | {\n    useXDR: Boolean?,\n    sync: Boolean?,\n    uri: String,\n    url: String,\n    method: String?,\n    timeout: Number?,\n    headers: Object?,\n    body: String? | Object?,\n    json: Boolean? | Object?,\n    username: String?,\n    password: String?,\n    withCredentials: Boolean?,\n    responseType: String?,\n    beforeSend: Function?\n}\nxhr := (XhrOptions, Callback<Response>) => Request\n```\nthe returned object is either an [`XMLHttpRequest`][3] instance\n    or an [`XDomainRequest`][4] instance (if on IE8/IE9 &&\n    `options.useXDR` is set to `true`)\n\nYour callback will be called once with the arguments\n    ( [`Error`][5], `response` , `body` ) where the response is an object:\n```js\n{\n    body: Object||String,\n    statusCode: Number,\n    method: String,\n    headers: {},\n    url: String,\n    rawRequest: xhr\n}\n```\n - `body`: HTTP response body - [`XMLHttpRequest.response`][6], [`XMLHttpRequest.responseText`][7] or\n    [`XMLHttpRequest.responseXML`][8] depending on the request type.\n - `rawRequest`: Original  [`XMLHttpRequest`][3] instance\n    or [`XDomainRequest`][4] instance (if on IE8/IE9 &&\n    `options.useXDR` is set to `true`)\n - `headers`: A collection of headers where keys are header names converted to lowercase\n\n\nYour callback will be called with an [`Error`][5] if there is an error in the browser that prevents sending the request.\nA HTTP 500 response is not going to cause an error to be returned.\n\n## Other signatures\n\n* `var req = xhr(url, callback)` -\na simple string instead of the options. In this case, a GET request will be made to that url.\n\n* `var req = xhr(url, options, callback)` -\nthe above may also be called with the standard set of options.\n\n### Convience methods\n* `var req = xhr.{post, put, patch, del, head, get}(url, callback)`\n* `var req = xhr.{post, put, patch, del, head, get}(options, callback)`\n* `var req = xhr.{post, put, patch, del, head, get}(url, options, callback)`\n\nThe `xhr` module has convience functions attached that will make requests with the given method.\nEach function is named after its method, with the exception of `DELETE` which is called `xhr.del` for compatibility.\n\nThe method shorthands may be combined with the url-first form of `xhr` for succinct and descriptive requests. For example,\n\n```js\nxhr.post('/post-to-me', function(err, resp) {\n  console.log(resp.body)\n})\n```\n\nor\n\n```js\nxhr.del('/delete-me', { headers: { my: 'auth' } }, function (err, resp) {\n  console.log(resp.statusCode);\n})\n```\n\n## Options\n\n### `options.method`\n\nSpecify the method the [`XMLHttpRequest`][3] should be opened\n    with. Passed to [`XMLHttpRequest.open`][2]. Defaults to \"GET\"\n\n### `options.useXDR`\n\nSpecify whether this is a cross origin (CORS) request for IE<10.\n    Switches IE to use [`XDomainRequest`][4] instead of `XMLHttpRequest`.\n    Ignored in other browsers.\n\nNote that headers cannot be set on an XDomainRequest instance.\n\n### `options.sync`\n\nSpecify whether this is a synchrounous request. Note that when\n    this is true the callback will be called synchronously. In\n    most cases this option should not be used. Only use if you\n    know what you are doing!\n\n### `options.body`\n\nPass in body to be send across the [`XMLHttpRequest`][3].\n    Generally should be a string. But anything that's valid as\n    a parameter to [`XMLHttpRequest.send`][1] should work  (Buffer for file, etc.).\n\nIf `options.json` is `true`, then this must be a JSON-serializable object. `options.body` is passed to `JSON.stringify` and sent.\n\n### `options.uri` or `options.url`\n\nThe uri to send a request to. Passed to [`XMLHttpRequest.open`][2]. `options.url` and `options.uri` are aliases for each other.\n\n### `options.headers`\n\nAn object of headers that should be set on the request. The\n    key, value pair is passed to [`XMLHttpRequest.setRequestHeader`][9]\n\n### `options.timeout`\n\nNumber of miliseconds to wait for response. Defaults to 0 (no timeout). Ignored when `options.sync` is true.\n\n### `options.json`\n\nSet to `true` to send request as `application/json` (see `options.body`) and parse response from JSON.\n\nFor backwards compatibility `options.json` can also be a valid JSON-serializable value to be sent to the server. Additionally the response body is still parsed as JSON\n\nFor sending booleans as JSON body see FAQ\n\n### `options.withCredentials`\n\nSpecify whether user credentials are to be included in a cross-origin\n    request. Sets [`XMLHttpRequest.withCredentials`][10]. Defaults to false.\n\nA wildcard `*` cannot be used in the `Access-Control-Allow-Origin` header when `withCredentials` is true.\n    The header needs to specify your origin explicitly or browser will abort the request.\n\n### `options.responseType`\n\nDetermines the data type of the `response`. Sets [`XMLHttpRequest.responseType`][11]. For example, a `responseType` of `document` will return a parsed `Document` object as the `response.body` for an XML resource.\n\n### `options.beforeSend`\n\nA function being called right before the `send` method of the `XMLHttpRequest` or `XDomainRequest` instance is called. The `XMLHttpRequest` or `XDomainRequest` instance is passed as an argument.\n\n### `options.xhr`\n\nPass an `XMLHttpRequest` object (or something that acts like one) to use instead of constructing a new one using the `XMLHttpRequest` or `XDomainRequest` constructors. Useful for testing.\n\n## FAQ\n\n- Why is my server's JSON response not parsed? I returned the right content-type.\n  - See `options.json` - you can set it to `true` on a GET request to tell `xhr` to parse the response body.\n  - Without `options.json` body is returned as-is (a string or when `responseType` is set and the browser supports it - a result of parsing JSON or XML)\n- How do I send an object or array as POST body?\n  - `options.body` should be a string. You need to serialize your object before passing to `xhr` for sending.\n  - To serialize to JSON you can use\n   `options.json:true` with `options.body` for convenience - then `xhr` will do the serialization and set content-type accordingly.\n- Where's stream API? `.pipe()` etc.\n  - Not implemented. You can't reasonably have that in the browser.\n- Why can't I send `\"true\"` as body by passing it as `options.json` anymore?\n  - Accepting `true` as a value was a bug. Despite what `JSON.stringify` does, the string `\"true\"` is not valid JSON. If you're sending booleans as JSON, please consider wrapping them in an object or array to save yourself from more trouble in the future. To bring back the old behavior, hardcode `options.json` to `true` and set `options.body` to your boolean value.\n- How do I add an `onprogress` listener?\n  - use `beforeSend` function for non-standard things that are browser specific. In this case:\n  ```js\n  xhr({\n    ...\n    beforeSend: function(xhrObject){\n      xhrObject.onprogress = function(){}\n    }\n  })\n  ```\n\n## Mocking Requests\nYou can override the constructor used to create new requests for testing. When you're making a new request:\n\n```js\nxhr({ xhr: new MockXMLHttpRequest() })\n```\n\nor you can override the constructors used to create requests at the module level:\n\n```js\nxhr.XMLHttpRequest = MockXMLHttpRequest\nxhr.XDomainRequest = MockXDomainRequest\n```\n\n## MIT Licenced\n\n  [1]: http://xhr.spec.whatwg.org/#the-send()-method\n  [2]: http://xhr.spec.whatwg.org/#the-open()-method\n  [3]: http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  [4]: http://msdn.microsoft.com/en-us/library/ie/cc288060(v=vs.85).aspx\n  [5]: http://es5.github.com/#x15.11\n  [6]: http://xhr.spec.whatwg.org/#the-response-attribute\n  [7]: http://xhr.spec.whatwg.org/#the-responsetext-attribute\n  [8]: http://xhr.spec.whatwg.org/#the-responsexml-attribute\n  [9]: http://xhr.spec.whatwg.org/#the-setrequestheader()-method\n  [10]: http://xhr.spec.whatwg.org/#the-withcredentials-attribute\n  [11]: https://xhr.spec.whatwg.org/#the-responsetype-attribute\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xhr/-/xhr-2.6.0.tgz#b69d4395e792b4173d6b7df077f0fc5e4e2b249d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xhr/-/xhr-2.6.0.tgz",
    "hash": "b69d4395e792b4173d6b7df077f0fc5e4e2b249d",
    "integrity": "sha512-/eCGLb5rxjx5e3mF1A7s+pLlR6CGyqWN91fv1JgER5mVWg1MZmlhBvy9kjcsOdRk8RrIujotWyJamfyrp+WIcA==",
    "registry": "npm",
    "packageName": "xhr",
    "cacheIntegrity": "sha512-/eCGLb5rxjx5e3mF1A7s+pLlR6CGyqWN91fv1JgER5mVWg1MZmlhBvy9kjcsOdRk8RrIujotWyJamfyrp+WIcA== sha1-tp1DleeStBc9a33wd/D8Xk4rJJ0="
  },
  "registry": "npm",
  "hash": "b69d4395e792b4173d6b7df077f0fc5e4e2b249d"
}