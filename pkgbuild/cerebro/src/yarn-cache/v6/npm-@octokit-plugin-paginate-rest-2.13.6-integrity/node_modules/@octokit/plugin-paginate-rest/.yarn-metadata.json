{
  "manifest": {
    "name": "@octokit/plugin-paginate-rest",
    "description": "Octokit plugin to paginate REST API endpoint responses",
    "version": "2.13.6",
    "license": "MIT",
    "files": [
      "dist-*/",
      "bin/"
    ],
    "pika": true,
    "sideEffects": false,
    "keywords": [
      "github",
      "api",
      "sdk",
      "toolkit"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/octokit/plugin-paginate-rest.js.git"
    },
    "dependencies": {
      "@octokit/types": "^6.17.3"
    },
    "peerDependencies": {
      "@octokit/core": ">=2"
    },
    "devDependencies": {
      "@octokit/core": "^3.0.0",
      "@octokit/plugin-rest-endpoint-methods": "^5.0.0",
      "@pika/pack": "^0.5.0",
      "@pika/plugin-build-node": "^0.9.0",
      "@pika/plugin-build-web": "^0.9.0",
      "@pika/plugin-ts-standard-pkg": "^0.9.0",
      "@types/fetch-mock": "^7.3.1",
      "@types/jest": "^26.0.0",
      "@types/node": "^14.0.4",
      "fetch-mock": "^9.0.0",
      "github-openapi-graphql-query": "^1.0.4",
      "jest": "^27.0.0",
      "npm-run-all": "^4.1.5",
      "prettier": "2.3.2",
      "semantic-release": "^17.0.0",
      "semantic-release-plugin-update-version-in-files": "^1.0.0",
      "ts-jest": "^27.0.0-next.12",
      "typescript": "^4.0.2"
    },
    "publishConfig": {
      "access": "public"
    },
    "source": "dist-src/index.js",
    "types": "dist-types/index.d.ts",
    "main": "dist-node/index.js",
    "module": "dist-web/index.js",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@octokit-plugin-paginate-rest-2.13.6-integrity/node_modules/@octokit/plugin-paginate-rest/package.json",
    "readmeFilename": "README.md",
    "readme": "# plugin-paginate-rest.js\n\n> Octokit plugin to paginate REST API endpoint responses\n\n[![@latest](https://img.shields.io/npm/v/@octokit/plugin-paginate-rest.svg)](https://www.npmjs.com/package/@octokit/plugin-paginate-rest)\n[![Build Status](https://github.com/octokit/plugin-paginate-rest.js/workflows/Test/badge.svg)](https://github.com/octokit/plugin-paginate-rest.js/actions?workflow=Test)\n\n## Usage\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nBrowsers\n</th><td width=100%>\n\nLoad `@octokit/plugin-paginate-rest` and [`@octokit/core`](https://github.com/octokit/core.js) (or core-compatible module) directly from [cdn.skypack.dev](https://cdn.skypack.dev)\n\n```html\n<script type=\"module\">\n  import { Octokit } from \"https://cdn.skypack.dev/@octokit/core\";\n  import {\n    paginateRest,\n    composePaginateRest,\n  } from \"https://cdn.skypack.dev/@octokit/plugin-paginate-rest\";\n</script>\n```\n\n</td></tr>\n<tr><th>\nNode\n</th><td>\n\nInstall with `npm install @octokit/core @octokit/plugin-paginate-rest`. Optionally replace `@octokit/core` with a core-compatible module\n\n```js\nconst { Octokit } = require(\"@octokit/core\");\nconst {\n  paginateRest,\n  composePaginateRest,\n} = require(\"@octokit/plugin-paginate-rest\");\n```\n\n</td></tr>\n</tbody>\n</table>\n\n```js\nconst MyOctokit = Octokit.plugin(paginateRest);\nconst octokit = new MyOctokit({ auth: \"secret123\" });\n\n// See https://developer.github.com/v3/issues/#list-issues-for-a-repository\nconst issues = await octokit.paginate(\"GET /repos/{owner}/{repo}/issues\", {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  since: \"2010-10-01\",\n  per_page: 100,\n});\n```\n\nIf you want to utilize the pagination methods in another plugin, use `composePaginateRest`.\n\n```js\nfunction myPlugin(octokit, options) {\n  return {\n    allStars({owner, repo}) => {\n      return composePaginateRest(\n        octokit,\n        \"GET /repos/{owner}/{repo}/stargazers\",\n        {owner, repo }\n      )\n    }\n  }\n}\n```\n\n## `octokit.paginate()`\n\nThe `paginateRest` plugin adds a new `octokit.paginate()` method which accepts the same parameters as [`octokit.request`](https://github.com/octokit/request.js#request). Only \"List ...\" endpoints such as [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository) are supporting pagination. Their [response includes a Link header](https://developer.github.com/v3/issues/#response-1). For other endpoints, `octokit.paginate()` behaves the same as `octokit.request()`.\n\nThe `per_page` parameter is usually defaulting to `30`, and can be set to up to `100`, which helps retrieving a big amount of data without hitting the rate limits too soon.\n\nAn optional `mapFunction` can be passed to map each page response to a new value, usually an array with only the data you need. This can help to reduce memory usage, as only the relevant data has to be kept in memory until the pagination is complete.\n\n```js\nconst issueTitles = await octokit.paginate(\n  \"GET /repos/{owner}/{repo}/issues\",\n  {\n    owner: \"octocat\",\n    repo: \"hello-world\",\n    since: \"2010-10-01\",\n    per_page: 100,\n  },\n  (response) => response.data.map((issue) => issue.title)\n);\n```\n\nThe `mapFunction` gets a 2nd argument `done` which can be called to end the pagination early.\n\n```js\nconst issues = await octokit.paginate(\n  \"GET /repos/{owner}/{repo}/issues\",\n  {\n    owner: \"octocat\",\n    repo: \"hello-world\",\n    since: \"2010-10-01\",\n    per_page: 100,\n  },\n  (response, done) => {\n    if (response.data.find((issues) => issue.title.includes(\"something\"))) {\n      done();\n    }\n    return response.data;\n  }\n);\n```\n\nAlternatively you can pass a `request` method as first argument. This is great when using in combination with [`@octokit/plugin-rest-endpoint-methods`](https://github.com/octokit/plugin-rest-endpoint-methods.js/):\n\n```js\nconst issues = await octokit.paginate(octokit.rest.issues.listForRepo, {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  since: \"2010-10-01\",\n  per_page: 100,\n});\n```\n\n## `octokit.paginate.iterator()`\n\nIf your target runtime environments supports async iterators (such as most modern browsers and Node 10+), you can iterate through each response\n\n```js\nconst parameters = {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  since: \"2010-10-01\",\n  per_page: 100,\n};\nfor await (const response of octokit.paginate.iterator(\n  \"GET /repos/{owner}/{repo}/issues\",\n  parameters\n)) {\n  // do whatever you want with each response, break out of the loop, etc.\n  const issues = response.data;\n  console.log(\"%d issues found\", issues.length);\n}\n```\n\nAlternatively you can pass a `request` method as first argument. This is great when using in combination with [`@octokit/plugin-rest-endpoint-methods`](https://github.com/octokit/plugin-rest-endpoint-methods.js/):\n\n```js\nconst parameters = {\n  owner: \"octocat\",\n  repo: \"hello-world\",\n  since: \"2010-10-01\",\n  per_page: 100,\n};\nfor await (const response of octokit.paginate.iterator(\n  octokit.rest.issues.listForRepo,\n  parameters\n)) {\n  // do whatever you want with each response, break out of the loop, etc.\n  const issues = response.data;\n  console.log(\"%d issues found\", issues.length);\n}\n```\n\n## `composePaginateRest` and `composePaginateRest.iterator`\n\nThe `compose*` methods work just like their `octokit.*` counterparts described above, with the differenct that both methods require an `octokit` instance to be passed as first argument\n\n## How it works\n\n`octokit.paginate()` wraps `octokit.request()`. As long as a `rel=\"next\"` link value is present in the response's `Link` header, it sends another request for that URL, and so on.\n\nMost of GitHub's paginating REST API endpoints return an array, but there are a few exceptions which return an object with a key that includes the items array. For example:\n\n- [Search repositories](https://developer.github.com/v3/search/#example) (key `items`)\n- [List check runs for a specific ref](https://developer.github.com/v3/checks/runs/#response-3) (key: `check_runs`)\n- [List check suites for a specific ref](https://developer.github.com/v3/checks/suites/#response-1) (key: `check_suites`)\n- [List repositories](https://developer.github.com/v3/apps/installations/#list-repositories) for an installation (key: `repositories`)\n- [List installations for a user](https://developer.github.com/v3/apps/installations/#response-1) (key `installations`)\n\n`octokit.paginate()` is working around these inconsistencies so you don't have to worry about it.\n\nIf a response is lacking the `Link` header, `octokit.paginate()` still resolves with an array, even if the response returns a single object.\n\n## Types\n\nThe plugin also exposes some types and runtime type guards for TypeScript projects.\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nTypes\n</th><td>\n\n```typescript\nimport {\n  PaginateInterface,\n  PaginatingEndpoints,\n} from \"@octokit/plugin-paginate-rest\";\n```\n\n</td></tr>\n<tr><th>\nGuards\n</th><td>\n\n```typescript\nimport { isPaginatingEndpoint } from \"@octokit/plugin-paginate-rest\";\n```\n\n</td></tr>\n</tbody>\n</table>\n\n### PaginateInterface\n\nAn `interface` that declares all the overloads of the `.paginate` method.\n\n### PaginatingEndpoints\n\nAn `interface` which describes all API endpoints supported by the plugin. Some overloads of `.paginate()` method and `composePaginateRest()` function depend on `PaginatingEndpoints`, using the `keyof PaginatingEndpoints` as a type for one of its arguments.\n\n```typescript\nimport { Octokit } from \"@octokit/core\";\nimport {\n  PaginatingEndpoints,\n  composePaginateRest,\n} from \"@octokit/plugin-paginate-rest\";\n\ntype DataType<T> = \"data\" extends keyof T ? T[\"data\"] : unknown;\n\nasync function myPaginatePlugin<E extends keyof PaginatingEndpoints>(\n  octokit: Octokit,\n  endpoint: E,\n  parameters?: PaginatingEndpoints[E][\"parameters\"]\n): Promise<DataType<PaginatingEndpoints[E][\"response\"]>> {\n  return await composePaginateRest(octokit, endpoint, parameters);\n}\n```\n\n### isPaginatingEndpoint\n\nA type guard, `isPaginatingEndpoint(arg)` returns `true` if `arg` is one of the keys in `PaginatingEndpoints` (is `keyof PaginatingEndpoints`).\n\n```typescript\nimport { Octokit } from \"@octokit/core\";\nimport {\n  isPaginatingEndpoint,\n  composePaginateRest,\n} from \"@octokit/plugin-paginate-rest\";\n\nasync function myPlugin(octokit: Octokit, arg: unknown) {\n  if (isPaginatingEndpoint(arg)) {\n    return await composePaginateRest(octokit, arg);\n  }\n  // ...\n}\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "MIT License Copyright (c) 2019 Octokit contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@octokit/plugin-paginate-rest/-/plugin-paginate-rest-2.13.6.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@octokit/plugin-paginate-rest/-/plugin-paginate-rest-2.13.6.tgz",
    "hash": "",
    "integrity": "sha512-ai7TNKLi8tGkDvLM7fm0X1fbIP9u1nfXnN49ZAw2PgSoQou9yixKn5c3m0awuLacbuX2aXEvJpv1gKm3jboabg==",
    "registry": "npm",
    "packageName": "@octokit/plugin-paginate-rest",
    "cacheIntegrity": "sha512-ai7TNKLi8tGkDvLM7fm0X1fbIP9u1nfXnN49ZAw2PgSoQou9yixKn5c3m0awuLacbuX2aXEvJpv1gKm3jboabg== sha1-A2M4ObDsV6EI0socSx9kt0nTUGw="
  },
  "registry": "npm",
  "hash": "6a2ed334a2e2f2d1a40ef2ccedf9b45f57db20ff6ed677d79cde3d640c363e04a8428bbdca2c4a9f97379b46b0b8b69c6ee5f669712f269bf580a9b78dba1a6e"
}