{
  "manifest": {
    "name": "markdown-it-anchor",
    "version": "8.4.1",
    "description": "Header anchors for markdown-it.",
    "source": "index.js",
    "main": "dist/markdownItAnchor.js",
    "module": "dist/markdownItAnchor.mjs",
    "unpkg": "dist/markdownItAnchor.umd.js",
    "mangle": {
      "regex": "^_"
    },
    "types": "./types/index.d.ts",
    "keywords": [
      "markdown",
      "markdown-it",
      "markdown-it-plugin",
      "header",
      "anchor"
    ],
    "homepage": "https://github.com/valeriangalliat/markdown-it-anchor",
    "license": "Unlicense",
    "files": [
      "README.md",
      "UNLICENSE",
      "dist/*",
      "runkit.js",
      "types/*"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/valeriangalliat/markdown-it-anchor.git"
    },
    "scripts": {
      "build": "microbundle",
      "dev": "microbundle watch",
      "lint": "standard index.js test.js",
      "prepare": "npm run build && npm test",
      "test": "npm run lint && ava test.js"
    },
    "runkitExampleFilename": "runkit.js",
    "devDependencies": {
      "ava": "^3.15.0",
      "markdown-it": "*",
      "markdown-it-attrs": "^3.0.1",
      "microbundle": "^0.12.0",
      "source-map-support": "^0.5.19",
      "standard": "^14.3.1"
    },
    "peerDependencies": {
      "markdown-it": "*",
      "@types/markdown-it": "*"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-markdown-it-anchor-8.4.1-29e560593f5edb80b25fdab8b23f93ef8a91b31e-integrity/node_modules/markdown-it-anchor/package.json",
    "readmeFilename": "README.md",
    "readme": "# markdown-it-anchor [![npm version](http://img.shields.io/npm/v/markdown-it-anchor.svg?style=flat-square)](https://www.npmjs.org/package/markdown-it-anchor)\n\n> Header anchors for [markdown-it].\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\nEnglish | [中文 (v7.0.1)](./README-zh_CN.md)\n\n## Usage\n\n```js\nconst md = require('markdown-it')()\n  .use(require('markdown-it-anchor'), opts)\n```\n\nSee a [demo as JSFiddle](https://jsfiddle.net/9ukc8dy6/).\n\nThe `opts` object can contain:\n\n| Name                   | Description                                                               | Default                    |\n|------------------------|---------------------------------------------------------------------------|----------------------------|\n| `level`                | Minimum level to apply anchors, or array of selected levels.              | 1                          |\n| `slugify`              | A custom slugification function.                                          | See [`index.js`](index.js) |\n| `uniqueSlugStartIndex` | Index to start with when making duplicate slugs unique.                   | 1                          |\n| `permalink`            | A function to render permalinks, see [permalinks] below.                  | `undefined`                |\n| `callback`             | Called with token and info after rendering.                               | `undefined`                |\n| `tabIndex`             | Value of the `tabindex` attribute on headings, set to `false` to disable. | `-1`                       |\n\n[permalinks]: #permalinks\n\nAll headers greater than the minimum `level` will have an `id` attribute\nwith a slug of their content. For example, you can set `level` to 2 to\nadd anchors to all headers but `h1`. You can also pass an array of\nheader levels to apply the anchor, like `[2, 3]` to have an anchor on\nonly level 2 and 3 headers.\n\nIf a `permalink` renderer is given, it will be called for each matching header\nto add a permalink. See [permalinks] below.\n\nThe `callback` option is a function that will be called at the end of\nrendering with the `token` and an `info` object.  The `info` object has\n`title` and `slug` properties with the token content and the slug used\nfor the identifier.\n\nFinally, we set by default [`tabindex=\"-1\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)\non headers. This marks the headers as focusable elements that are not\nreachable by keyboard navigation. The effect is that screen readers will\nread the title content when it's being jumped to. Outside of screen\nreaders, the experience is the same as not setting that attribute. You\ncan override this behavior with the `tabIndex` option. Set it to `false`\nto remove the attribute altogether, otherwise the value will be used as\nattribute value.\n\n## User-friendly URLs\n\nStarting from v5.0.0, markdown-it-anchor dropped the [`string`](https://github.com/jprichardson/string.js)\npackage keeping it's core value of being an unopinionated and secure\nlibrary. Yet, users looking for backward compatibility may want the old\n`slugify` function:\n\n```sh\nnpm install string\n```\n\n```js\nconst string = require('string')\nconst slugify = s => string(s).slugify().toString()\n\nconst md = require('markdown-it')()\n  .use(require('markdown-it-anchor'), { slugify })\n```\n\nAnother popular library for this is [`@sindresorhus/slugify`](https://github.com/sindresorhus/slugify),\nwhich have better Unicode support and other cool features:\n\n```sh\nnpm install @sindresorhus/slugify\n```\n\n```js\nconst slugify = require('@sindresorhus/slugify')\n\nconst md = require('markdown-it')()\n  .use(require('markdown-it-anchor'), { slugify: s => slugify(s) })\n```\n\n## Explicit `id`s\n\nYou might want to explicitly set the `id` attribute of your headings\nfrom the Markdown document, for example to keep them consistent across\ntranslations.\n\nmarkdown-it-anchor is designed to reuse any existing `id`, making [markdown-it-attrs](https://www.npmjs.com/package/markdown-it-attrs)\na perfect fit for this use case. Make sure to load it before markdown-it-anchor!\n\nThen you can do something like this:\n\n```markdown\n# Your title {#your-custom-id}\n```\n\nThe anchor link will reuse the `id` that you explicitly defined.\n\n## Table of contents\n\nLooking for an automatic table of contents (TOC) generator? Take a look at\n[markdown-it-toc-done-right](https://www.npmjs.com/package/markdown-it-toc-done-right)\nit's made from the ground to be a great companion of this plugin.\n\n## HTML headings\n\nmarkdown-it-anchor doesn't parse HTML blocks, so headings defined in\nHTML blocks will be ignored. If you need to add anchors to both HTML\nheadings and Markdown headings, the easiest way would be to do it on the\nfinal HTML rather than during the Markdown parsing phase:\n\n```js\nconst { parse } = require('node-html-parser')\n\nconst root = parse(html)\n\nfor (const h of root.querySelectorAll('h1, h2, h3, h4, h5, h6')) {\n  const slug = h.getAttribute('id') || slugify(h.textContent)\n  h.setAttribute('id', slug)\n  h.innerHTML = `<a href=\"#${slug}>${h.innerHTML}</a>`\n}\n\nconsole.log(root.toString())\n```\n\nOr with a (not accessible) GitHub-style anchor, replace the\n`h.innerHTML` part with:\n\n```js\nh.insertAdjacentHTML('afterbegin', `<a class=\"anchor\" aria-hidden=\"true\" href=\"#${slug}\">🔗</a> `)\n```\n\nWhile this still needs extra work like handling duplicated slugs and\nIDs, this should give you a solid base.\n\nThat said if you really want to use markdown-it-anchor for this even\nthough it's not designed to, you can do like npm does with their\n[marky-markdown](https://github.com/npm/marky-markdown) parser, and\n[transform the `html_block` tokens](https://github.com/npm/marky-markdown/blob/master/lib/plugin/html-heading.js)\ninto a sequence of `heading_open`, `inline`, and `heading_close` tokens\nthat can be handled by markdown-it-anchor:\n\n```js\nconst md = require('markdown-it')()\n  .use(require('@npmcorp/marky-markdown/lib/plugin/html-heading'))\n  .use(require('markdown-it-anchor'), opts)\n```\n\nWhile they use regexes to parse the HTML and it won't gracefully handle\nany arbitrary HTML, it should work okay for the happy path, which might\nbe good enough for you.\n\nYou might also want to check [this implementation](https://github.com/valeriangalliat/markdown-it-anchor/issues/105#issuecomment-907323858)\nwhich uses [Cheerio](https://www.npmjs.com/package/cheerio) for a more\nsolid parsing, including support for HTML attributes.\n\nThe only edge cases I see it failing with are multiple headings defined\nin the same HTML block with arbitrary content between them, or headings\nwhere the opening and closing tag are defined in separate `html_block`\ntokens, both which should very rarely happen.\n\nIf you need a bulletproof implementation, I would recommend the first\nHTML parser approach I documented instead.\n\n## Browser example\n\nSee [`example.html`](example.html).\n\n## Permalinks\n\nVersion 8.0.0 completely reworked the way permalinks work in order to\noffer more accessible options out of the box. You can also [make your own permalink](#custom-permalink).\n\nInstead of a single default way of rendering permalinks (which used to\nhave a poor UX on screen readers), we now have multiple styles of\npermalinks for you to chose from.\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink[styleOfPermalink](permalinkOpts)\n})\n```\n\nHere, `styleOfPermalink` is one of the available styles documented\nbelow, and `permalinkOpts` is an options object.\n\n<div id=\"common-options\"></div>\n\nAll renderers share a common set of options:\n\n| Name          | Description                                       | Default                            |\n|---------------|---------------------------------------------------|------------------------------------|\n| `class`       | The class of the permalink anchor.                | `header-anchor`                    |\n| `symbol`      | The symbol in the permalink anchor.               | `#`                                |\n| `renderHref`  | A custom permalink `href` rendering function.     | See [`permalink.js`](permalink.js) |\n| `renderAttrs` | A custom permalink attributes rendering function. | See [`permalink.js`](permalink.js) |\n\nFor the `symbol`, you may want to use the [link symbol](http://graphemica.com/🔗),\nor a symbol from your favorite web font.\n\n### Header link\n\nThis style wraps the header itself in an anchor link. It doesn't use the\n`symbol` option as there's no symbol needed in the markup (though you\ncould add it with CSS using `::before` if you like).\n\nIt's so simple it doesn't have any behaviour to custom, and it's also\naccessible out of the box without any further configuration, hence it\ndoesn't have other options than the common ones described above.\n\nYou can find this style on the [MDN] as well as [HTTP Archive] and their\n[Web Almanac], which to me is a good sign that this is a thoughtful way of\nimplementing permalinks. This is also the style that I chose for my own\n[blog].\n\n[MDN]: https://developer.mozilla.org/en-US/docs/Web\n[HTTP Archive]: https://httparchive.org/reports/state-of-the-web\n[Web Almanac]: https://almanac.httparchive.org/en/2020/table-of-contents\n[blog]: https://www.codejam.info/\n\n\n| Name              | Description                                                           | Default                               |\n|-------------------|-----------------------------------------------------------------------|---------------------------------------|\n| `safariReaderFix` | Add a `span` inside the link so Safari shows headings in reader view. | `false` (for backwards compatibility) |\n|                   | See [common options](#common-options).                                |                                       |\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.headerLink()\n})\n```\n\n```html\n<h2 id=\"title\"><a class=\"header-anchor\" href=\"#title\">Title</a></h2>\n```\n\nThe main caveat of this approach is that you can't include links inside\nheaders. If you do, consider the other styles.\n\nAlso note that this pattern [breaks reader mode in Safari](https://www.leereamsnyder.com/blog/making-headings-with-links-show-up-in-safari-reader),\nan issue you can also notice on the referenced websites above. This was\nalready [reported to Apple](https://bugs.webkit.org/show_bug.cgi?id=225609#c2)\nbut their bug tracker is not public. In the meantime, a fix mentioned in\nthe article above is to insert a `span` inside the link. You can use the\n`safariReaderFix` option to enable it.\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.headerLink({ safariReaderFix: true })\n})\n```\n\n```html\n<h2 id=\"title\"><a class=\"header-anchor\" href=\"#title\"><span>Title</span></a></h2>\n```\n\n### Link after header\n\nIf you want to customize further the screen reader experience of your\npermalinks, this style gives you much more freedom than the [header link](#header-link).\n\nIt works by leaving the header itself alone, and adding the permalink\n*after* it, giving you different methods of customizing the assistive\ntext. It makes the permalink symbol `aria-hidden` to not pollute the\nexperience, and leverages a `visuallyHiddenClass` to hide the assistive\ntext from the visual experience.\n\n| Name                  | Description                                                                                               | Default                                                             |\n|-----------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|\n| `style`               | The (sub) style of link, one of `visually-hidden`, `aria-label`, `aria-describedby` or `aria-labelledby`. | `visually-hidden`                                                   |\n| `assistiveText`       | A function that takes the title and returns the assistive text.                                           | `undefined`, required for `visually-hidden` and `aria-label` styles |\n| `visuallyHiddenClass` | The class you use to make an element visually hidden.                                                     | `undefined`, required for `visually-hidden` style                   |\n| `space`               | Add a space between the assistive text and the permalink symbol.                                          | `true`                                                              |\n| `placement`           | Placement of the permalink symbol relative to the assistive text, can be `before` or `after` the header.  | `after`                                                             |\n|                       | See [common options](#common-options).                                                                    |                                                                     |\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.linkAfterHeader({\n    style: 'visually-hidden',\n    assistiveText: title => `Permalink to “${title}”`,\n    visuallyHiddenClass: 'visually-hidden'\n  })\n})\n```\n\n```html\n<h2 id=\"title\">Title</h2>\n<a class=\"header-anchor\" href=\"#title\">\n  <span class=\"visually-hidden\">Permalink to “Title”</span>\n  <span aria-hidden=\"true\">#</span>\n</a>\n```\n\nBy using a visually hidden element for the assistive text, we make sure\nthat the assistive text can be picked up by translation services, as\nmost of the popular translation services (including Google Translate)\ncurrently ignore `aria-label`.\n\nIf you prefer an alternative method for the assistive text, see other\nstyles:\n\n<details>\n<summary><code>aria-label</code> variant</summary>\n\nThis removes the need from a visually hidden `span`, but will likely\nhurt the permalink experience when using a screen reader through a\ntranslation service.\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.linkAfterHeader({\n    style: 'aria-label'\n    assistiveText: title => `Permalink to “${title}”`\n  })\n})\n```\n\n```html\n<h2 id=\"title\">Title</h2>\n<a class=\"header-anchor\" href=\"#title\" aria-label=\"Permalink to “Title”\">#</a>\n```\n\n</details>\n\n<details>\n<summary><code>aria-describedby</code> and <code>aria-labelledby</code> variants</summary>\n\nThis removes the need to customize the assistive text to your locale and\ndoesn't need a visually hidden `span` either, but since the anchor will\nbe described by just the text of the title without any context, it might\nbe confusing.\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.linkAfterHeader({\n    style: 'aria-describedby' // Or `aria-labelledby`\n  })\n})\n```\n\n```html\n<h2 id=\"title\">Title</h2>\n<a class=\"header-anchor\" href=\"#title\" aria-describedby=\"title\">#</a>\n```\n\n</details>\n\n### Link inside header\n\nThis is the equivalent of the default permalink in previous versions.\nThe reason it's not the first one in the list is because this method has\naccessibility issues.\n\nIf you use a symbol like just `#` without adding any markup around,\nscreen readers will read it as part of every heading (in the case of\n`#`, it could be read \"pound\", \"number\" or \"number sign\") meaning that\nif you title is \"my beautiful title\", it will read \"number sign my\nbeautiful title\" for example. For other common symbols, `🔗` is usually\nread as \"link symbol\" and `¶` as \"pilcrow\".\n\nAdditionally, screen readers users commonly request the list of all\nlinks in the page, so they'll be flooded with \"number sign, number sign,\nnumber sign\" for each of your headings.\n\nI would highly recommend using one of the markups above which have a\nbetter experience, but if you really want to use this markup, make sure\nto pass accessible HTML as `symbol` to make things usable, like in the\nexample below, but even that has some flaws.\n\nWith that said, this permalink allows the following options:\n\n| Name         | Description                                                                                                         | Default |\n|--------------|---------------------------------------------------------------------------------------------------------------------|---------|\n| `space`      | Add a space between the header text and the permalink symbol.                                                       | `true`  |\n| `placement`  | Placement of the permalink, can be `before` or `after` the header. This option used to be called `permalinkBefore`. | `after` |\n| `ariaHidden` | Whether to add `aria-hidden=\"true\"`, see [ARIA hidden](#aria-hidden).                                               | `false` |\n|              | See [common options](#common-options).                                                                              |         |\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.linkInsideHeader({\n    symbol: `\n      <span class=\"visually-hidden\">Jump to heading</span>\n      <span aria-hidden=\"true\">#</span>\n    `,\n    placement: 'before'\n  })\n})\n```\n\n```html\n<h2 id=\"title\">\n  <a class=\"header-anchor\" href=\"#title\">\n    <span class=\"visually-hidden\">Jump to heading</span>\n    <span aria-hidden=\"true\">#</span>\n  </a>\n  Title\n</h2>\n```\n\nWhile this example allows more accessible anchors with the same markup\nas previous versions of markdown-it-anchor, it's still not ideal. The\nassistive text for permalinks will be read as part of the heading when\nlisting all the titles of the page, e.g. \"jump to heading title 1, jump\nto heading title 2\" and so on. Also that assistive text is not very\nuseful when listing the links in the page (which will read \"jump to\nheading, jump to heading, jump to heading\" for each of your permalinks).\n\n### ARIA hidden\n\nThis is just an alias for [`linkInsideHeader`](#link-inside-header) with\n`ariaHidden: true` by default, to mimic GitHub's way of rendering\npermalinks.\n\nSetting `aria-hidden=\"true\"` makes the permalink explicitly inaccessible\ninstead of having the permalink and its symbol being read by screen\nreaders as part of every single headings (which was a pretty terrible\nexperience).\n\n```js\nconst anchor = require('markdown-it-anchor')\nconst md = require('markdown-it')()\n\nmd.use(anchor, {\n  permalink: anchor.permalink.ariaHidden({\n    placement: 'before'\n  })\n})\n```\n\n```html\n<h2 id=\"title\"><a class=\"header-anchor\" href=\"#title\" aria-hidden=\"true\">#</a> Title</h2>\n```\n\nWhile no experience might be arguably better than a bad experience, I\nwould instead recommend using one of the above renderers to provide an\naccessible experience. My favorite one is the [header link](#header-link),\nwhich is also the simplest one.\n\n### Custom permalink\n\nIf none of those options suit you, you can always make your own\nrenderer! Take inspiration from [the code behind all permalinks](permalink.js).\n\nThe signature of the function you pass in the `permalink` option is the\nfollowing:\n\n```js\nfunction renderPermalink (slug, opts, state, idx) {}\n```\n\nWhere `opts` are the markdown-it-anchor options, `state` is a\nmarkdown-it [`StateCore`](https://github.com/markdown-it/markdown-it)\ninstance, and `idx` is the index of the `heading_open` token in the\n`state.tokens` array. That array contains [`Token`](https://markdown-it.github.io/markdown-it/#Token)\nobjects.\n\nTo make sense of the \"token stream\" and the way token objects are\norganized, you will probably want to read the [markdown-it design principles](https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md)\npage.\n\nThis function can freely modify the token stream (`state.tokens`),\nusually around the given `idx`, to construct the anchor.\n\nBecause of the way the token stream works, a `heading_open` token is\nusually followed by a `inline` token that contains the actual text (and\ninline markup) of the heading, and finally a `heading_close` token. This\nis why you'll see most built-in permalink renderers touch\n`state.tokens[idx + 1]`, because they update the contents of the\n`inline` token that follows a `heading_open`.\n\n## Debugging\n\nIf you want to debug this library more easily, we support source maps.\n\nUse the [source-map-support](https://www.npmjs.com/package/source-map-support)\nmodule to enable it with Node.js.\n\n```sh\nnode -r source-map-support/register your-script.js\n```\n\n## Development\n\n```sh\n# Build the library in the `dist/` directory.\nnpm run build\n\n# Watch file changes to update `dist/`.\nnpm run dev\n\n# Run tests, will use the build version so make sure to build after\n# making changes.\nnpm test\n```\n",
    "licenseText": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/markdown-it-anchor/-/markdown-it-anchor-8.4.1.tgz#29e560593f5edb80b25fdab8b23f93ef8a91b31e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/markdown-it-anchor/-/markdown-it-anchor-8.4.1.tgz",
    "hash": "29e560593f5edb80b25fdab8b23f93ef8a91b31e",
    "integrity": "sha512-sLODeRetZ/61KkKLJElaU3NuU2z7MhXf12Ml1WJMSdwpngeofneCRF+JBbat8HiSqhniOMuTemXMrsI7hA6XyA==",
    "registry": "npm",
    "packageName": "markdown-it-anchor",
    "cacheIntegrity": "sha512-sLODeRetZ/61KkKLJElaU3NuU2z7MhXf12Ml1WJMSdwpngeofneCRF+JBbat8HiSqhniOMuTemXMrsI7hA6XyA== sha1-KeVgWT9e24CyX9q4sj+T74qRsx4="
  },
  "registry": "npm",
  "hash": "29e560593f5edb80b25fdab8b23f93ef8a91b31e"
}