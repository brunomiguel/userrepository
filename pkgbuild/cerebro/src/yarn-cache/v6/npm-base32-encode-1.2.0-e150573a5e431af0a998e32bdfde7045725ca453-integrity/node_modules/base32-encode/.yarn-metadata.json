{
  "manifest": {
    "name": "base32-encode",
    "version": "1.2.0",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/LinusU/base32-encode.git"
    },
    "scripts": {
      "test": "standard && node test"
    },
    "dependencies": {
      "to-data-view": "^1.1.0"
    },
    "devDependencies": {
      "hex-to-array-buffer": "^0.1.0",
      "standard": "^8.0.0-beta.5"
    },
    "keywords": [
      "base32 encode",
      "base32 encoder",
      "base32",
      "base32hex",
      "crockford",
      "encoder",
      "rfc3548",
      "rfc4648"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-base32-encode-1.2.0-e150573a5e431af0a998e32bdfde7045725ca453-integrity/node_modules/base32-encode/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Base32 Encode\n\nBase32 encoder with support for multiple variants.\n\n## Installation\n\n```sh\nnpm install --save base32-encode\n```\n\n## Usage\n\n```js\nconst base32Encode = require('base32-encode')\nconst data = new Uint8Array([0x74, 0x65, 0x73, 0x74])\n\nconsole.log(base32Encode(data, 'Crockford'))\n//=> EHJQ6X0\n\nconsole.log(base32Encode(data, 'RFC4648'))\n//=> ORSXG5A=\n\nconsole.log(base32Encode(data, 'RFC4648', { padding: false }))\n//=> ORSXG5A\n\nconsole.log(base32Encode(data, 'RFC4648-HEX'))\n//=> EHIN6T0=\n```\n\n## API\n\n### base32Encode(data, variant, options)\n\n- `data` &lt;ArrayBuffer | Int8Array | Uint8Array | Uint8ClampedArray&gt;\n- `variant` &lt;String&gt;\n- `options` &lt;Object&gt;\n  - `padding` &lt;Boolean&gt;\n\nEncode the data in `data`. `variant` should be one of the supported variants\nlisted below.\n\n- `'RFC3548'` - Alias for `'RFC4648'`\n- `'RFC4648'` - [Base32 from RFC4648](https://tools.ietf.org/html/rfc4648)\n- `'RFC4648-HEX'` - [base32hex from RFC4648](https://tools.ietf.org/html/rfc4648)\n- `'Crockford'` - [Crockford's Base32](http://www.crockford.com/wrmg/base32.html)\n\nOptions may have a `padding` property which provides a way to forcefully enable or disable padding. The default behavior is to follow the default of the selected variant.\n\n## See also\n\n- [base32-decode](https://github.com/LinusU/base32-decode) - Base32 decoder\n",
    "description": "Base32 encoder with support for multiple variants.",
    "licenseText": "MIT License\n\nCopyright (c) 2016-2017 Linus Unneb√§ck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/base32-encode/-/base32-encode-1.2.0.tgz#e150573a5e431af0a998e32bdfde7045725ca453",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/base32-encode/-/base32-encode-1.2.0.tgz",
    "hash": "e150573a5e431af0a998e32bdfde7045725ca453",
    "integrity": "sha512-cHFU8XeRyx0GgmoWi5qHMCVRiqU6J3MHWxVgun7jggCBUpVzm1Ir7M9dYr2whjSNc3tFeXfQ/oZjQu/4u55h9A==",
    "registry": "npm",
    "packageName": "base32-encode",
    "cacheIntegrity": "sha512-cHFU8XeRyx0GgmoWi5qHMCVRiqU6J3MHWxVgun7jggCBUpVzm1Ir7M9dYr2whjSNc3tFeXfQ/oZjQu/4u55h9A== sha1-4VBXOl5DGvCpmOMr395wRXJcpFM="
  },
  "registry": "npm",
  "hash": "e150573a5e431af0a998e32bdfde7045725ca453"
}