{
  "manifest": {
    "name": "@sinonjs/fake-timers",
    "description": "Fake JavaScript timers",
    "version": "9.1.1",
    "homepage": "https://github.com/sinonjs/fake-timers",
    "author": {
      "name": "Christian Johansen"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/sinonjs/fake-timers.git"
    },
    "bugs": {
      "mail": "christian@cjohansen.no",
      "url": "https://github.com/sinonjs/fake-timers/issues"
    },
    "license": "BSD-3-Clause",
    "scripts": {
      "lint": "eslint .",
      "test-node": "mocha --timeout 200 test/ integration-test/ -R dot --check-leaks",
      "test-headless": "mochify --no-detect-globals --timeout=10000",
      "test-check-coverage": "npm run test-coverage && nyc check-coverage",
      "test-cloud": "mochify --wd --no-detect-globals --timeout=10000",
      "test-coverage": "nyc --all --reporter text --reporter html --reporter lcovonly npm run test-node",
      "test": "npm run test-node && npm run test-headless",
      "prettier:check": "prettier --check '**/*.{js,css,md}'",
      "prettier:write": "prettier --write '**/*.{js,css,md}'",
      "preversion": "./scripts/preversion.sh",
      "version": "./scripts/version.sh",
      "postversion": "./scripts/postversion.sh"
    },
    "lint-staged": {
      "*.{js,css,md}": "prettier --check",
      "*.js": "eslint"
    },
    "files": [
      "src/"
    ],
    "devDependencies": {
      "@sinonjs/eslint-config": "4.0.2",
      "@sinonjs/referee-sinon": "6.0.1",
      "eslint-config-prettier": "8.3.0",
      "eslint-plugin-prettier": "3.4.1",
      "husky": "4.2.1",
      "jsdom": "16.5.2",
      "lint-staged": "10.0.7",
      "mocha": "9.2.0",
      "mochify": "7.0.0",
      "nyc": "14.1.1",
      "prettier": "2.2.1"
    },
    "main": "./src/fake-timers-src.js",
    "dependencies": {
      "@sinonjs/commons": "^1.7.0"
    },
    "husky": {
      "hooks": {
        "pre-commit": "npm run lint"
      }
    },
    "nyc": {
      "branches": 85,
      "lines": 92,
      "functions": 92,
      "statements": 92,
      "exclude": [
        "**/*-test.js",
        "coverage/**",
        "types/**",
        "fake-timers.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@sinonjs-fake-timers-9.1.1-7b698e0b9d12d93611f06ee143c30ced848e2840-integrity/node_modules/@sinonjs/fake-timers/package.json",
    "readmeFilename": "README.md",
    "readme": "# `@sinonjs/fake-timers`\n\n[![codecov](https://codecov.io/gh/sinonjs/fake-timers/branch/main/graph/badge.svg)](https://codecov.io/gh/sinonjs/fake-timers)\n<a href=\"CODE_OF_CONDUCT.md\"><img src=\"https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\" alt=\"Contributor Covenant\" /></a>\n\nJavaScript implementation of the timer APIs; `setTimeout`, `clearTimeout`, `setImmediate`, `clearImmediate`, `setInterval`, `clearInterval`, `requestAnimationFrame`, `cancelAnimationFrame`, `requestIdleCallback`, and `cancelIdleCallback`, along with a clock instance that controls the flow of time. FakeTimers also provides a `Date` implementation that gets its time from the clock.\n\nIn addition in browser environment `@sinonjs/fake-timers` provides a `performance` implementation that gets its time from the clock. In Node environments FakeTimers provides a `nextTick` implementation that is synchronized with the clock - and a `process.hrtime` shim that works with the clock.\n\n`@sinonjs/fake-timers` can be used to simulate passing time in automated tests and other\nsituations where you want the scheduling semantics, but don't want to actually\nwait.\n\n`@sinonjs/fake-timers` is extracted from [Sinon.JS](https://github.com/sinonjs/sinon.js) and targets the [same runtimes](https://sinonjs.org/releases/latest/#supported-runtimes).\n\n## Autocomplete, IntelliSense and TypeScript definitions\n\nVersion 7 introduced JSDoc to the codebase. This should provide autocomplete and type suggestions in supporting IDEs. If you need more elaborate type support, TypeScript definitions for the Sinon projects are independently maintained by the Definitely Types community:\n\n```\nnpm install -D @types/sinonjs__fake-timers\n```\n\n## Installation\n\n`@sinonjs/fake-timers` can be used in both Node and browser environments. Installation is as easy as\n\n```sh\nnpm install @sinonjs/fake-timers\n```\n\nIf you want to use `@sinonjs/fake-timers` in a browser you can either build your own bundle or use [Skypack](https://www.skypack.dev).\n\n## Usage\n\nTo use `@sinonjs/fake-timers`, create a new clock, schedule events on it using the timer\nfunctions and pass time using the `tick` method.\n\n```js\n// In the browser distribution, a global `FakeTimers` is already available\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar clock = FakeTimers.createClock();\n\nclock.setTimeout(function () {\n    console.log(\n        \"The poblano is a mild chili pepper originating in the state of Puebla, Mexico.\"\n    );\n}, 15);\n\n// ...\n\nclock.tick(15);\n```\n\nUpon executing the last line, an interesting fact about the\n[Poblano](https://en.wikipedia.org/wiki/Poblano) will be printed synchronously to\nthe screen. If you want to simulate asynchronous behavior, please see the `async` function variants (eg `clock.tick(time)` vs `await clock.tickAsync(time)`).\n\nThe `next`, `runAll`, `runToFrame`, and `runToLast` methods are available to advance the clock. See the\nAPI Reference for more details.\n\n### Faking the native timers\n\nWhen using `@sinonjs/fake-timers` to test timers, you will most likely want to replace the native\ntimers such that calling `setTimeout` actually schedules a callback with your\nclock instance, not the browser's internals.\n\nCalling `install` with no arguments achieves this. You can call `uninstall`\nlater to restore things as they were again.\n\n```js\n// In the browser distribution, a global `FakeTimers` is already available\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\n\nvar clock = FakeTimers.install();\n// Equivalent to\n// var clock = FakeTimers.install(typeof global !== \"undefined\" ? global : window);\n\nsetTimeout(fn, 15); // Schedules with clock.setTimeout\n\nclock.uninstall();\n// setTimeout is restored to the native implementation\n```\n\nTo hijack timers in another context pass it to the `install` method.\n\n```js\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar context = {\n    setTimeout: setTimeout, // By default context.setTimeout uses the global setTimeout\n};\nvar clock = FakeTimers.withGlobal(context).install();\n\ncontext.setTimeout(fn, 15); // Schedules with clock.setTimeout\n\nclock.uninstall();\n// context.setTimeout is restored to the original implementation\n```\n\nUsually you want to install the timers onto the global object, so call `install`\nwithout arguments.\n\n#### Automatically incrementing mocked time\n\nFakeTimers supports the possibility to attach the faked timers to any change\nin the real system time. This means that there is no need to `tick()` the\nclock in a situation where you won't know **when** to call `tick()`.\n\nPlease note that this is achieved using the original setImmediate() API at a certain\nconfigurable interval `config.advanceTimeDelta` (default: 20ms). Meaning time would\nbe incremented every 20ms, not in real time.\n\nAn example would be:\n\n```js\nvar FakeTimers = require(\"@sinonjs/fake-timers\");\nvar clock = FakeTimers.install({\n    shouldAdvanceTime: true,\n    advanceTimeDelta: 40,\n});\n\nsetTimeout(() => {\n    console.log(\"this just timed out\"); //executed after 40ms\n}, 30);\n\nsetImmediate(() => {\n    console.log(\"not so immediate\"); //executed after 40ms\n});\n\nsetTimeout(() => {\n    console.log(\"this timed out after\"); //executed after 80ms\n    clock.uninstall();\n}, 50);\n```\n\n## API Reference\n\n### `var clock = FakeTimers.createClock([now[, loopLimit]])`\n\nCreates a clock. The default\n[epoch](https://en.wikipedia.org/wiki/Epoch_%28reference_date%29) is `0`.\n\nThe `now` argument may be a number (in milliseconds) or a Date object.\n\nThe `loopLimit` argument sets the maximum number of timers that will be run when calling `runAll()` before assuming that we have an infinite loop and throwing an error. The default is `1000`.\n\n### `var clock = FakeTimers.install([config])`\n\nInstalls FakeTimers using the specified config (otherwise with epoch `0` on the global scope). The following configuration options are available\n\n| Parameter                        | Type        | Default                                                                                                                                                                                                                        | Description                                                                                                                                                                                                                                                                                  |\n| -------------------------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `config.now`                     | Number/Date | 0                                                                                                                                                                                                                              | installs FakeTimers with the specified unix epoch                                                                                                                                                                                                                                            |\n| `config.toFake`                  | String[]    | [\"setTimeout\", \"clearTimeout\", \"setImmediate\", \"clearImmediate\",\"setInterval\", \"clearInterval\", \"Date\", \"requestAnimationFrame\", \"cancelAnimationFrame\", \"requestIdleCallback\", \"cancelIdleCallback\", \"hrtime\", \"performance\"] | an array with explicit function names (or objects, in the case of \"performance\") to hijack. _When not set, FakeTimers will automatically fake all methods **except** `nextTick`_ e.g., `FakeTimers.install({ toFake: [\"setTimeout\",\"nextTick\"]})` will fake only `setTimeout` and `nextTick` |\n| `config.loopLimit`               | Number      | 1000                                                                                                                                                                                                                           | the maximum number of timers that will be run when calling runAll()                                                                                                                                                                                                                          |\n| `config.shouldAdvanceTime`       | Boolean     | false                                                                                                                                                                                                                          | tells FakeTimers to increment mocked time automatically based on the real system time shift (e.g. the mocked time will be incremented by 20ms for every 20ms change in the real system time)                                                                                                 |\n| `config.advanceTimeDelta`        | Number      | 20                                                                                                                                                                                                                             | relevant only when using with `shouldAdvanceTime: true`. increment mocked time by `advanceTimeDelta` ms every `advanceTimeDelta` ms change in the real system time.                                                                                                                          |\n| `config.shouldClearNativeTimers` | Boolean     | false                                                                                                                                                                                                                          | tells FakeTimers to clear 'native' (i.e. not fake) timers by delegating to their respective handlers. These are not cleared by default, leading to potentially unexpected behavior if timers existed prior to installing FakeTimers.                                                         |\n\n### `var id = clock.setTimeout(callback, timeout)`\n\nSchedules the callback to be fired once `timeout` milliseconds have ticked by.\n\nIn Node.js `setTimeout` returns a timer object. FakeTimers will do the same, however\nits `ref()` and `unref()` methods have no effect.\n\nIn browsers a timer ID is returned.\n\n### `clock.clearTimeout(id)`\n\nClears the timer given the ID or timer object, as long as it was created using\n`setTimeout`.\n\n### `var id = clock.setInterval(callback, timeout)`\n\nSchedules the callback to be fired every time `timeout` milliseconds have ticked\nby.\n\nIn Node.js `setInterval` returns a timer object. FakeTimers will do the same, however\nits `ref()` and `unref()` methods have no effect.\n\nIn browsers a timer ID is returned.\n\n### `clock.clearInterval(id)`\n\nClears the timer given the ID or timer object, as long as it was created using\n`setInterval`.\n\n### `var id = clock.setImmediate(callback)`\n\nSchedules the callback to be fired once `0` milliseconds have ticked by. Note\nthat you'll still have to call `clock.tick()` for the callback to fire. If\ncalled during a tick the callback won't fire until `1` millisecond has ticked\nby.\n\nIn Node.js `setImmediate` returns a timer object. FakeTimers will do the same,\nhowever its `ref()` and `unref()` methods have no effect.\n\nIn browsers a timer ID is returned.\n\n### `clock.clearImmediate(id)`\n\nClears the timer given the ID or timer object, as long as it was created using\n`setImmediate`.\n\n### `clock.requestAnimationFrame(callback)`\n\nSchedules the callback to be fired on the next animation frame, which runs every\n16 ticks. Returns an `id` which can be used to cancel the callback. This is\navailable in both browser & node environments.\n\n### `clock.cancelAnimationFrame(id)`\n\nCancels the callback scheduled by the provided id.\n\n### `clock.requestIdleCallback(callback[, timeout])`\n\nQueued the callback to be fired during idle periods to perform background and low priority work on the main event loop. Callbacks which have a timeout option will be fired no later than time in milliseconds. Returns an `id` which can be used to cancel the callback.\n\n### `clock.cancelIdleCallback(id)`\n\nCancels the callback scheduled by the provided id.\n\n### `clock.countTimers()`\n\nReturns the number of waiting timers. This can be used to assert that a test\nfinishes without leaking any timers.\n\n### `clock.hrtime(prevTime?)`\n\nOnly available in Node.js, mimicks process.hrtime().\n\n### `clock.nextTick(callback)`\n\nOnly available in Node.js, mimics `process.nextTick` to enable completely synchronous testing flows.\n\n### `clock.performance.now()`\n\nOnly available in browser environments, mimicks performance.now().\n\n### `clock.tick(time)` / `await clock.tickAsync(time)`\n\nAdvance the clock, firing callbacks if necessary. `time` may be the number of\nmilliseconds to advance the clock by or a human-readable string. Valid string\nformats are `\"08\"` for eight seconds, `\"01:00\"` for one minute and `\"02:34:10\"`\nfor two hours, 34 minutes and ten seconds.\n\nThe `tickAsync()` will also break the event loop, allowing any scheduled promise\ncallbacks to execute _before_ running the timers.\n\n### `clock.next()` / `await clock.nextAsync()`\n\nAdvances the clock to the the moment of the first scheduled timer, firing it.\n\nThe `nextAsync()` will also break the event loop, allowing any scheduled promise\ncallbacks to execute _before_ running the timers.\n\n### `clock.reset()`\n\nRemoves all timers and ticks without firing them, and sets `now` to `config.now`\nthat was provided to `FakeTimers.install` or to `0` if `config.now` was not provided.\nUseful to reset the state of the clock without having to `uninstall` and `install` it.\n\n### `clock.runAll()` / `await clock.runAllAsync()`\n\nThis runs all pending timers until there are none remaining. If new timers are added while it is executing they will be run as well.\n\nThis makes it easier to run asynchronous tests to completion without worrying about the number of timers they use, or the delays in those timers.\n\nIt runs a maximum of `loopLimit` times after which it assumes there is an infinite loop of timers and throws an error.\n\nThe `runAllAsync()` will also break the event loop, allowing any scheduled promise\ncallbacks to execute _before_ running the timers.\n\n### `clock.runMicrotasks()`\n\nThis runs all pending microtasks scheduled with `nextTick` but none of the timers and is mostly useful for libraries using FakeTimers underneath and for running `nextTick` items without any timers.\n\n### `clock.runToFrame()`\n\nAdvances the clock to the next frame, firing all scheduled animation frame callbacks,\nif any, for that frame as well as any other timers scheduled along the way.\n\n### `clock.runToLast()` / `await clock.runToLastAsync()`\n\nThis takes note of the last scheduled timer when it is run, and advances the\nclock to that time firing callbacks as necessary.\n\nIf new timers are added while it is executing they will be run only if they\nwould occur before this time.\n\nThis is useful when you want to run a test to completion, but the test recursively\nsets timers that would cause `runAll` to trigger an infinite loop warning.\n\nThe `runToLastAsync()` will also break the event loop, allowing any scheduled promise\ncallbacks to execute _before_ running the timers.\n\n### `clock.setSystemTime([now])`\n\nThis simulates a user changing the system clock while your program is running.\nIt affects the current time but it does not in itself cause e.g. timers to fire;\nthey will fire exactly as they would have done without the call to\nsetSystemTime().\n\n### `clock.uninstall()`\n\nRestores the original methods of the native timers or the methods on the object\nthat was passed to `FakeTimers.withGlobal`\n\n### `Date`\n\nImplements the `Date` object but using the clock to provide the correct time.\n\n### `Performance`\n\nImplements the `now` method of the [`Performance`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) object but using the clock to provide the correct time. Only available in environments that support the Performance object (browsers mostly).\n\n### `FakeTimers.withGlobal`\n\nIn order to support creating clocks based on separate or sandboxed environments (such as JSDOM), FakeTimers exports a factory method which takes single argument `global`, which it inspects to figure out what to mock and what features to support. When invoking this function with a global, you will get back an object with `timers`, `createClock` and `install` - same as the regular FakeTimers exports only based on the passed in global instead of the global environment.\n\n## Running tests\n\nFakeTimers has a comprehensive test suite. If you're thinking of contributing bug\nfixes or suggesting new features, you need to make sure you have not broken any\ntests. You are also expected to add tests for any new behavior.\n\n### On node:\n\n```sh\nnpm test\n```\n\nOr, if you prefer more verbose output:\n\n```\n$(npm bin)/mocha ./test/fake-timers-test.js\n```\n\n### In the browser\n\n[Mochify](https://github.com/mantoni/mochify.js) is used to run the tests in\nPhantomJS. Make sure you have `phantomjs` installed. Then:\n\n```sh\nnpm test-headless\n```\n\n## License\n\nBSD 3-clause \"New\" or \"Revised\" License (see LICENSE file)\n",
    "licenseText": "Copyright (c) 2010-2014, Christian Johansen, christian@cjohansen.no. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. "
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-9.1.1.tgz#7b698e0b9d12d93611f06ee143c30ced848e2840",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-9.1.1.tgz",
    "hash": "7b698e0b9d12d93611f06ee143c30ced848e2840",
    "integrity": "sha512-Wp5vwlZ0lOqpSYGKqr53INws9HLkt6JDc/pDZcPf7bchQnrXJMXPns8CXx0hFikMSGSWfvtvvpb2gtMVfkWagA==",
    "registry": "npm",
    "packageName": "@sinonjs/fake-timers",
    "cacheIntegrity": "sha512-Wp5vwlZ0lOqpSYGKqr53INws9HLkt6JDc/pDZcPf7bchQnrXJMXPns8CXx0hFikMSGSWfvtvvpb2gtMVfkWagA== sha1-e2mOC50S2TYR8G7hQ8MM7YSOKEA="
  },
  "registry": "npm",
  "hash": "7b698e0b9d12d93611f06ee143c30ced848e2840"
}