{
  "manifest": {
    "name": "webpack-merge",
    "description": "Variant of merge that's useful for webpack configuration",
    "author": {
      "name": "Juho Vepsalainen",
      "email": "bebraw@gmail.com"
    },
    "version": "5.7.3",
    "scripts": {
      "build": "tsc",
      "format": "prettier . --write --ignore-path .gitignore",
      "start": "tsdx watch",
      "test": "tsdx test",
      "prepare": "npm run build"
    },
    "main": "dist/index.js",
    "typings": "dist/index.d.ts",
    "files": [
      "dist"
    ],
    "dependencies": {
      "clone-deep": "^4.0.1",
      "wildcard": "^2.0.0"
    },
    "devDependencies": {
      "@types/estree": "0.0.45",
      "husky": "^4.3.0",
      "prettier": "^2.1.2",
      "tsdx": "^0.14.1",
      "tslib": "^2.0.3",
      "typescript": "^4.0.5",
      "webpack": "^5.3.2"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/survivejs/webpack-merge.git"
    },
    "homepage": "https://github.com/survivejs/webpack-merge",
    "bugs": {
      "url": "https://github.com/survivejs/webpack-merge/issues"
    },
    "keywords": [
      "webpack",
      "merge"
    ],
    "engines": {
      "node": ">=10.0.0"
    },
    "jest": {
      "collectCoverage": true,
      "collectCoverageFrom": [
        "dist/*.js"
      ]
    },
    "license": "MIT",
    "husky": {
      "hooks": {
        "pre-commit": "npm run test"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-webpack-merge-5.7.3-2a0754e1877a25a8bbab3d2475ca70a052708213-integrity/node_modules/webpack-merge/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Financial Contributors on Open Collective](https://opencollective.com/webpack-merge/all/badge.svg?label=financial+contributors)](https://opencollective.com/webpack-merge) [![build status](https://secure.travis-ci.org/survivejs/webpack-merge.svg)](http://travis-ci.org/survivejs/webpack-merge) [![codecov](https://codecov.io/gh/survivejs/webpack-merge/branch/master/graph/badge.svg)](https://codecov.io/gh/survivejs/webpack-merge)\n\n# webpack-merge - Merge designed for Webpack\n\n**webpack-merge** provides a `merge` function that concatenates arrays and merges objects creating a new object. If functions are encountered, it will execute them, run the results through the algorithm, and then wrap the returned values within a function again.\n\nThis behavior is particularly useful in configuring webpack although it has uses beyond it. Whenever you need to merge configuration objects, **webpack-merge** can come in handy.\n\n## **`merge(...configuration | [...configuration])`**\n\n`merge` is the core, and the most important idea, of the API. Often this is all you need unless you want further customization.\n\n```javascript\nconst { merge } = require('webpack-merge');\n\n// Default API\nconst output = merge(object1, object2, object3, ...);\n\n// You can pass an array of objects directly.\n// This works with all available functions.\nconst output = merge([object1, object2, object3]);\n\n// Keys matching to the right take precedence:\nconst output = merge(\n  { fruit: \"apple\", color: \"red\" },\n  { fruit: \"strawberries\" }\n);\nconsole.log(output);\n// { color: \"red\", fruit: \"strawberries\"}\n```\n\n### Limitations\n\nNote that `Promise`s are not supported! If you want to return a configuration wrapped within a `Promise`, `merge` inside one. Example: `Promise.resolve(merge({ ... }, { ... }))`.\n\nThe same goes for configuration level functions as in the example below:\n\n**webpack.config.js**\n\n```javascript\nconst commonConfig = { ... };\n\nconst productionConfig = { ... };\n\nconst developmentConfig = { ... };\n\nmodule.exports = env => {\n  switch(env) {\n    case 'development':\n      return merge(commonConfig, developmentConfig);\n    case 'production':\n      return merge(commonConfig, productionConfig);\n    default:\n      throw new Error('No matching configuration was found!');\n  }\n}\n```\n\nYou can choose the configuration you want by using `webpack --env development` assuming you are using _webpack-cli_.\n\n## **`mergeWithCustomize({ customizeArray, customizeObject })(...configuration | [...configuration])`**\n\nIn case you need more flexibility, `merge` behavior can be customized per field as below:\n\n```javascript\nconst { mergeWithCustomize } = require('webpack-merge');\n\nconst output = mergeWithCustomize(\n  {\n    customizeArray(a, b, key) {\n      if (key === 'extensions') {\n        return _.uniq([...a, ...b]);\n      }\n\n      // Fall back to default merging\n      return undefined;\n    },\n    customizeObject(a, b, key) {\n      if (key === 'module') {\n        // Custom merging\n        return _.merge({}, a, b);\n      }\n\n      // Fall back to default merging\n      return undefined;\n    }\n  }\n)(object1, object2, object3, ...);\n```\n\nFor example, if the previous code was invoked with only `object1` and `object2`\nwith `object1` as:\n\n```javascript\n{\n    foo1: ['object1'],\n    foo2: ['object1'],\n    bar1: { object1: {} },\n    bar2: { object1: {} },\n}\n```\n\nand `object2` as:\n\n```javascript\n{\n    foo1: ['object2'],\n    foo2: ['object2'],\n    bar1: { object2: {} },\n    bar2: { object2: {} },\n}\n```\n\nthen `customizeArray` will be invoked for each property of `Array` type, i.e:\n\n```javascript\ncustomizeArray([\"object1\"], [\"object2\"], \"foo1\");\ncustomizeArray([\"object1\"], [\"object2\"], \"foo2\");\n```\n\nand `customizeObject` will be invoked for each property of `Object` type, i.e:\n\n```javascript\ncustomizeObject({ object1: {} }, { object2: {} }, bar1);\ncustomizeObject({ object1: {} }, { object2: {} }, bar2);\n```\n\n## **`customizeArray`** and **`customizeObject`**\n\n`customizeArray` and `customizeObject` provide small strategies to for `mergeWithCustomize`. They support `append`, `prepend`, `replace`, and wildcards for field names.\n\n```javascript\nconst { mergeWithCustomize, customizeArray, customizeObject } = require('webpack-merge');\n\nconst output = mergeWithCustomize({\n  customizeArray: customizeArray({\n    'entry.*': 'prepend'\n  }),\n  customizeObject: customizeObject({\n    entry: 'prepend'\n  })\n})(object1, object2, object3, ...);\n```\n\n## **`unique(<field>, <fields>, field => field)`**\n\n`unique` is a strategy used for forcing uniqueness within configuration. It's most useful with plugins when you want to make sure there's only one in place.\n\nThe first `<field>` is the config property to look through for duplicates.\n\n`<fields>` represents the values that should be unique when you run the field => field function on each duplicate.\n\nWhen the order of elements of the `<field>` in the first configuration differs from the order in the second configuration, the latter is preserved.\n\n```javascript\nconst { mergeWithCustomize, unique } = require(\"webpack-merge\");\n\nconst output = mergeWithCustomize({\n  customizeArray: unique(\n    \"plugins\",\n    [\"HotModuleReplacementPlugin\"],\n    (plugin) => plugin.constructor && plugin.constructor.name\n  ),\n})(\n  {\n    plugins: [new webpack.HotModuleReplacementPlugin()],\n  },\n  {\n    plugins: [new webpack.HotModuleReplacementPlugin()],\n  }\n);\n\n// Output contains only single HotModuleReplacementPlugin now and it's\n// going to be the last plugin instance.\n```\n\n## **`mergeWithRules`**\n\nTo support advanced merging needs (i.e. merging within loaders), `mergeWithRules` includes additional syntax that allows you to match fields and apply strategies to match. Consider the full example below:\n\n```javascript\nconst a = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [{ loader: \"style-loader\" }, { loader: \"sass-loader\" }],\n      },\n    ],\n  },\n};\nconst b = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n            options: {\n              modules: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\nconst result = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style-loader\",\n            options: {\n              modules: true,\n            },\n          },\n          { loader: \"sass-loader\" },\n        ],\n      },\n    ],\n  },\n};\n\nassert.deepStrictEqual(\n  mergeWithRules({\n    module: {\n      rules: {\n        test: \"match\",\n        use: {\n          loader: \"match\",\n          options: \"replace\",\n        },\n      },\n    },\n  })(a, b),\n  result\n);\n```\n\nThe way it works is that you should annotate fields to match using `match` (or `CustomizeRule.Match` if you are using TypeScript) matching your configuration structure and then use specific strategies to define how particular fields should be transformed. If a match doesn't exist above a rule, then it will apply the rule automatically.\n\n**Supported annotations:**\n\n- `match` (`CustomizeRule.Match`) - Optional matcher that scopes merging behavior to a specific part based on similarity (think DOM or jQuery selectors)\n- `append` (`CustomizeRule.Append`) - Appends items\n- `prepend` (`CustomizeRule.Prepend`) - Prepends items\n- `replace` (`CustomizeRule.Replace`) - Replaces items\n- `merge` (`CustomizeRule.Merge`) - Merges objects (shallow merge)\n\n## Using with TypeScript\n\n**webpack-merge** supports TypeScript out of the box. You should pass `Configuration` type from webpack to it as follows:\n\n```typescript\nimport { Configuration } from \"webpack\";\nimport { merge } from \"webpack-merge\";\n\nconst config = merge<Configuration>({...}, {...});\n\n...\n```\n\n## Development\n\n1. `nvm use`\n1. `npm i`\n1. `npm run build -- --watch` in one terminal\n1. `npm t -- --watch` in another one\n\nBefore contributing, please [open an issue](https://github.com/survivejs/webpack-merge/issues/new) where to discuss.\n\n## Further Information and Support\n\nCheck out [SurviveJS - Webpack 5](http://survivejs.com/) to dig deeper into webpack. The free book uses **webpack-merge** extensively and shows you how to compose your configuration to keep it maintainable.\n\nI am also available as a consultant in case you require specific assistance. I can contribute particularly in terms of improving maintainability of the setup while speeding it up and pointing out better practices. In addition to improving developer productivity, the work has impact on the end users of the product in terms of reduced application size and loading times.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/survivejs/webpack-merge/graphs/contributors\"><img src=\"https://opencollective.com/webpack-merge/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/webpack-merge/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/webpack-merge\"><img src=\"https://opencollective.com/webpack-merge/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/webpack-merge/contribute)]\n\n<a href=\"https://opencollective.com/webpack-merge/organization/0/website\"><img src=\"https://opencollective.com/webpack-merge/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/1/website\"><img src=\"https://opencollective.com/webpack-merge/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/2/website\"><img src=\"https://opencollective.com/webpack-merge/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/3/website\"><img src=\"https://opencollective.com/webpack-merge/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/4/website\"><img src=\"https://opencollective.com/webpack-merge/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/5/website\"><img src=\"https://opencollective.com/webpack-merge/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/6/website\"><img src=\"https://opencollective.com/webpack-merge/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/7/website\"><img src=\"https://opencollective.com/webpack-merge/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/8/website\"><img src=\"https://opencollective.com/webpack-merge/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webpack-merge/organization/9/website\"><img src=\"https://opencollective.com/webpack-merge/organization/9/avatar.svg\"></a>\n\n## License\n\n**webpack-merge** is available under MIT. See LICENSE for more details.\n",
    "licenseText": "Copyright (c) 2015 Juho Vepsalainen\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/webpack-merge/-/webpack-merge-5.7.3.tgz#2a0754e1877a25a8bbab3d2475ca70a052708213",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/webpack-merge/-/webpack-merge-5.7.3.tgz",
    "hash": "2a0754e1877a25a8bbab3d2475ca70a052708213",
    "integrity": "sha512-6/JUQv0ELQ1igjGDzHkXbVDRxkfA57Zw7PfiupdLFJYrgFqY5ZP8xxbpp2lU3EPwYx89ht5Z/aDkD40hFCm5AA==",
    "registry": "npm",
    "packageName": "webpack-merge",
    "cacheIntegrity": "sha512-6/JUQv0ELQ1igjGDzHkXbVDRxkfA57Zw7PfiupdLFJYrgFqY5ZP8xxbpp2lU3EPwYx89ht5Z/aDkD40hFCm5AA== sha1-KgdU4Yd6Jai7qz0kdcpwoFJwghM="
  },
  "registry": "npm",
  "hash": "2a0754e1877a25a8bbab3d2475ca70a052708213"
}