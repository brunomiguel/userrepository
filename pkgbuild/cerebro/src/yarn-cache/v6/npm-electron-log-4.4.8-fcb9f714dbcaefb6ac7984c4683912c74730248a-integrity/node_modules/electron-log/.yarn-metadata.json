{
  "manifest": {
    "name": "electron-log",
    "version": "4.4.8",
    "description": "Just a very simple logging module for your Electron application",
    "main": "src/index.js",
    "scripts": {
      "lint": "eslint '**/*.js' --ignore-pattern '**/dist/*.js' && tsc --noEmit",
      "test": "humile 'src/**/*spec.js'",
      "test:full": "npm run test && npm run lint && npm run test:e2e",
      "test:e2e": "humile 'e2e/**/*.spec.js' -R list",
      "postversion": "git push && git push --tags",
      "prepack": "npm run test:full",
      "preversion": "npm run test:full",
      "ttt": "echo ${npm_config_node_version}"
    },
    "typings": "src/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/megahertz/electron-log.git"
    },
    "files": [
      "!**/__specs__",
      "src/*"
    ],
    "keywords": [
      "electron",
      "atom",
      "log",
      "logger",
      "logging",
      "windows",
      "mac",
      "osx",
      "linux",
      "desktop"
    ],
    "author": {
      "name": "Alexey Prokhorov"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/megahertz/electron-log/issues"
    },
    "homepage": "https://github.com/megahertz/electron-log#readme",
    "devDependencies": {
      "@types/node": "^14.14.6",
      "electron": "*",
      "eslint": "^7.12.1",
      "eslint-config-airbnb-base": "^14.2.0",
      "eslint-plugin-import": "^2.22.1",
      "humile": "^0.3.2",
      "nw": "0.42.3",
      "typescript": "^4.0.5",
      "webpack": "^5.3.2",
      "webpack-cli": "^4.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-log-4.4.8-fcb9f714dbcaefb6ac7984c4683912c74730248a-integrity/node_modules/electron-log/package.json",
    "readmeFilename": "README.md",
    "readme": "# electron-log\n[![Build Status](https://travis-ci.org/megahertz/electron-log.svg?branch=master)](https://travis-ci.org/megahertz/electron-log)\n[![NPM version](https://badge.fury.io/js/electron-log.svg)](https://badge.fury.io/js/electron-log)\n[![Dependencies status](https://img.shields.io/david/megahertz/electron-log)](https://david-dm.org/megahertz/electron-log)\n\nJust a simple logging module for your Electron or NW.js application.\nNo dependencies. No complicated configuration. Just require and use.\nAlso, it can be used without Electron in any node.js application.\n\nBy default, it writes logs to the following locations:\n\n - **on Linux:** `~/.config/{app name}/logs/{process type}.log`\n - **on macOS:** `~/Library/Logs/{app name}/{process type}.log`\n - **on Windows:** `%USERPROFILE%\\AppData\\Roaming\\{app name}\\logs\\{process type}.log`\n\n## Installation\n\nInstall with [npm](https://npmjs.org/package/electron-log):\n\n    npm install electron-log\n    \n## Usage\n\n```js\nconst log = require('electron-log');\n\nlog.info('Hello, log');\nlog.warn('Some problem appears');\n```\n\n### electron-log v2.x, v3.x\n\nIf you would like to upgrade to the latest version, read\n[the migration guide](docs/migration.md) and [the changelog](CHANGELOG.md).\n\n### Log levels\n\nelectron-log supports the following log levels:\n\n    error, warn, info, verbose, debug, silly\n\n### `nodeIntegration`\nIf you've got an error like `require is not defined` in a renderer process,\nread [the nodeIntegration section](docs/node-integration.md).\n\n### Transport\n\nTransport is a simple function which does some work with log message.\nBy default, two transports are active: console and file. \n\n**If you change some transport options, make sure you apply the changes both in\nmain and renderer processes.**\n\nYou can set transport options or use methods using:\n\n`log.transports.console.format = '{h}:{i}:{s} {text}';`\n\n`log.transports.file.getFile();`\n\n#### Console transport\n\nJust prints a log message to application console (main process) or to\nDevTools console (renderer process).\n\n##### Options\n\n - **[format](docs/format.md)**, default\n   `'%c{h}:{i}:{s}.{ms}%c › {text}'` (main),\n   `'{h}:{i}:{s}.{ms} › {text}'` (renderer)\n - **level**, default 'silly'\n - **useStyles**, use styles in the main process even if TTY isn't attached,\n   default `null`\n\n#### File transport\n\nThe file transport writes log messages to a file.\n\n##### Options\n\n - **[format](docs/format.md)**, default\n   `'[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}] {text}'`\n - **level**, default 'silly'\n - **resolvePath** function sets the log path, for example\n \n```js\nlog.transports.file.resolvePath = () => path.join(APP_DATA, 'logs/main.log');\n```\n\n[Read more about file transport](docs/file.md).\n\n#### IPC transport\nWhen logging inside renderer process, it also shows log in application\nconsole and vice versa. This transport can impact on performance, so\nit's disabled by default for packaged application.\n\nIf you don't use electron-log in the main process but want to show renderer\nlogs in the console, add `require('electron-log')` somewhere in the main code.\n\n##### Options\n\n - **level**, default 'silly'\n\n#### Remote transport\n\nSends a JSON POST request with `LogMessage` in the body to the specified url.\n\n##### Options\n\n - **level**, default false\n - **url**, remote endpoint\n\n[Read more about remote transport](docs/remote.md).\n\n#### Disable a transport\n\nJust set level property to false, for example:\n\n```js\nlog.transports.file.level = false;\nlog.transports.console.level = false;\n```\n\n#### [Override/add a custom transport](docs/extend.md#transport)\n\nTransport is just a function `(msg: LogMessage) => void`, so you can\neasily override/add your own transport.\n[More info](docs/extend.md#transport).\n\n### Overriding console.log\n\nSometimes it's helpful to use electron-log instead of default `console`. It's\npretty easy:\n\n```js\nconsole.log = log.log;\n```\n\nIf you would like to override other functions like `error`, `warn` and so on:\n\n```js\nObject.assign(console, log.functions);\n```\n\n### Colors\n\nColors can be used for both main and DevTools console.\n\n`log.info('%cRed text. %cGreen text', 'color: red', 'color: green')`\n\nAvailable colors:\n - unset (reset to default color)\n - black\n - red\n - green\n - yellow\n - blue\n - magenta\n - cyan\n - white\n \nFor DevTools console you can use other CSS properties.\n\n### [Catch errors](docs/catch.md)\n\nelectron-log can catch and log unhandled errors/rejected promises:\n\n`log.catchErrors(options?)`;\n\n[More info](docs/catch.md).\n\n### [Hooks](docs/extend.md#hooks)\n\nIn some situations, you may want to get more control over logging. Hook\nis a function which is called on each transport call.\n\n`(message: LogMessage, transport: Transport) => LogMessage`\n\n[More info](docs/extend.md#hooks).\n\n### Multiple logger instances\n\nYou can create multiple logger instances with different settings:\n\n```js\nconst electronLog = require('electron-log');\n\nconst log = electronLog.create('anotherInstance');\n````\n\n### Logging scopes\n\n```js\nconst log = require('electron-log');\nconst userLog = log.scope('user');\n\nuserLog.info('message with user scope');\n// Prints 12:12:21.962 (user) › message with user scope\n```\n\n### Web Worker\n\nIt's possible to use the module with Web Worker. However, ipc transport is not\nactive, so log messages from worker are not displayed in the main app console.\n\n## Related\n\n - [electron-cfg](https://github.com/megahertz/electron-cfg) -\n   Settings for your Electron application.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Alexey Prokhorov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-log/-/electron-log-4.4.8.tgz#fcb9f714dbcaefb6ac7984c4683912c74730248a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-log/-/electron-log-4.4.8.tgz",
    "hash": "fcb9f714dbcaefb6ac7984c4683912c74730248a",
    "integrity": "sha512-QQ4GvrXO+HkgqqEOYbi+DHL7hj5JM+nHi/j+qrN9zeeXVKy8ZABgbu4CnG+BBqDZ2+tbeq9tUC4DZfIWFU5AZA==",
    "registry": "npm",
    "packageName": "electron-log",
    "cacheIntegrity": "sha512-QQ4GvrXO+HkgqqEOYbi+DHL7hj5JM+nHi/j+qrN9zeeXVKy8ZABgbu4CnG+BBqDZ2+tbeq9tUC4DZfIWFU5AZA== sha1-/Ln3FNvK77aseYTEaDkSx0cwJIo="
  },
  "registry": "npm",
  "hash": "fcb9f714dbcaefb6ac7984c4683912c74730248a"
}