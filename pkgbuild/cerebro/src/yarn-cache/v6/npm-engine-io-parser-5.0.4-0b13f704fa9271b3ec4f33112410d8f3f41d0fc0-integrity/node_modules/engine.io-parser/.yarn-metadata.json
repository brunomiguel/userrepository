{
  "manifest": {
    "name": "engine.io-parser",
    "description": "Parser for the client for the realtime Engine",
    "license": "MIT",
    "version": "5.0.4",
    "main": "./build/cjs/index.js",
    "module": "./build/esm/index.js",
    "exports": {
      "import": "./build/esm/index.js",
      "require": "./build/cjs/index.js"
    },
    "types": "build/esm/index.d.ts",
    "homepage": "https://github.com/socketio/engine.io-parser",
    "devDependencies": {
      "@babel/core": "~7.9.6",
      "@babel/preset-env": "~7.9.6",
      "@types/mocha": "^9.0.0",
      "@types/node": "^16.9.6",
      "babelify": "^10.0.0",
      "benchmark": "^2.1.4",
      "expect.js": "0.3.1",
      "mocha": "^5.2.0",
      "nyc": "~15.0.1",
      "prettier": "^1.19.1",
      "rimraf": "^3.0.2",
      "socket.io-browsers": "^1.0.4",
      "ts-node": "^10.2.1",
      "tsify": "^5.0.4",
      "typescript": "^4.4.3",
      "zuul": "3.11.1",
      "zuul-ngrok": "4.0.0"
    },
    "scripts": {
      "compile": "rimraf ./build && tsc && tsc -p tsconfig.esm.json && ./postcompile.sh",
      "test": "npm run format:check && npm run compile && if test \"$BROWSERS\" = \"1\" ; then npm run test:browser; else npm run test:node; fi",
      "test:node": "nyc mocha -r ts-node/register test/index.ts",
      "test:browser": "zuul test/index.ts --no-coverage",
      "format:check": "prettier --check 'lib/**/*.ts' 'test/**/*.ts'",
      "format:fix": "prettier --write 'lib/**/*.ts' 'test/**/*.ts'"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:socketio/engine.io-parser.git"
    },
    "files": [
      "build/"
    ],
    "browser": {
      "./test/node": "./test/browser",
      "./build/esm/encodePacket.js": "./build/esm/encodePacket.browser.js",
      "./build/esm/decodePacket.js": "./build/esm/decodePacket.browser.js",
      "./build/cjs/encodePacket.js": "./build/cjs/encodePacket.browser.js",
      "./build/cjs/decodePacket.js": "./build/cjs/decodePacket.browser.js"
    },
    "engines": {
      "node": ">=10.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-engine-io-parser-5.0.4-0b13f704fa9271b3ec4f33112410d8f3f41d0fc0-integrity/node_modules/engine.io-parser/package.json",
    "readmeFilename": "Readme.md",
    "readme": "\n# engine.io-parser\n\n[![Build Status](https://github.com/socketio/engine.io-parser/workflows/CI/badge.svg?branch=main)](https://github.com/socketio/engine.io-parser/actions)\n[![NPM version](https://badge.fury.io/js/engine.io-parser.svg)](https://npmjs.com/package/engine.io-parser)\n\nThis is the JavaScript parser for the engine.io protocol encoding,\nshared by both\n[engine.io-client](https://github.com/socketio/engine.io-client) and\n[engine.io](https://github.com/socketio/engine.io).\n\n## How to use\n\n### Standalone\n\nThe parser can encode/decode packets, payloads, and payloads as binary\nwith the following methods: `encodePacket`, `decodePacket`, `encodePayload`,\n`decodePayload`.\n\nExample:\n\n```js\nconst parser = require(\"engine.io-parser\");\nconst data = Buffer.from([ 1, 2, 3, 4 ]);\n\nparser.encodePacket({ type: \"message\", data }, encoded => {\n  const decodedData = parser.decodePacket(encoded); // decodedData === data\n});\n```\n\n### With browserify\n\nEngine.IO Parser is a commonjs module, which means you can include it by using\n`require` on the browser and package using [browserify](http://browserify.org/):\n\n1. install the parser package\n\n    ```shell\n    npm install engine.io-parser\n    ```\n\n1. write your app code\n\n    ```js\n    const parser = require(\"engine.io-parser\");\n\n    const testBuffer = new Int8Array(10);\n    for (let i = 0; i < testBuffer.length; i++) testBuffer[i] = i;\n\n    const packets = [{ type: \"message\", data: testBuffer.buffer }, { type: \"message\", data: \"hello\" }];\n\n    parser.encodePayload(packets, encoded => {\n      parser.decodePayload(encoded,\n        (packet, index, total) => {\n          const isLast = index + 1 == total;\n          if (!isLast) {\n            const buffer = new Int8Array(packet.data); // testBuffer\n          } else {\n            const message = packet.data; // \"hello\"\n          }\n        });\n    });\n    ```\n\n1. build your app bundle\n\n    ```bash\n    $ browserify app.js > bundle.js\n    ```\n\n1. include on your page\n\n    ```html\n    <script src=\"/path/to/bundle.js\"></script>\n    ```\n\n## Features\n\n- Runs on browser and node.js seamlessly\n- Runs inside HTML5 WebWorker\n- Can encode and decode packets\n  - Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node\n\n## API\n\nNote: `cb(type)` means the type is a callback function that contains a parameter of type `type` when called.\n\n### Node\n\n- `encodePacket`\n    - Encodes a packet.\n    - **Parameters**\n      - `Object`: the packet to encode, has `type` and `data`.\n        - `data`: can be a `String`, `Number`, `Buffer`, `ArrayBuffer`\n      - `Boolean`: binary support\n      - `Function`: callback, returns the encoded packet (`cb(String)`)\n- `decodePacket`\n    - Decodes a packet. Data also available as an ArrayBuffer if requested.\n    - Returns data as `String` or (`Blob` on browser, `ArrayBuffer` on Node)\n    - **Parameters**\n      - `String` | `ArrayBuffer`: the packet to decode, has `type` and `data`\n      - `String`: optional, the binary type\n\n- `encodePayload`\n    - Encodes multiple messages (payload).\n    - If any contents are binary, they will be encoded as base64 strings. Base64\n      encoded strings are marked with a b before the length specifier\n    - **Parameters**\n      - `Array`: an array of packets\n      - `Function`: callback, returns the encoded payload (`cb(String)`)\n- `decodePayload`\n    - Decodes data when a payload is maybe expected. Possible binary contents are\n      decoded from their base64 representation.\n    - **Parameters**\n      - `String`: the payload\n      - `Function`: callback, returns (cb(`Object`: packet, `Number`:packet index, `Number`:packet total))\n\n## Tests\n\nStandalone tests can be run with `npm test` which will run the node.js tests.\n\nBrowser tests are run using [zuul](https://github.com/defunctzombie/zuul).\n(You must have zuul setup with a saucelabs account.)\n\nYou can run the tests locally using the following command:\n\n```\nnpm run test:browser\n```\n\n## Support\n\nThe support channels for `engine.io-parser` are the same as `socket.io`:\n  - irc.freenode.net **#socket.io**\n  - [Github Discussions](https://github.com/socketio/socket.io/discussions)\n  - [Website](https://socket.io)\n\n## Development\n\nTo contribute patches, run tests or benchmarks, make sure to clone the\nrepository:\n\n```bash\ngit clone git://github.com/socketio/engine.io-parser.git\n```\n\nThen:\n\n```bash\ncd engine.io-parser\nnpm ci\n```\n\nSee the `Tests` section above for how to run tests before submitting any patches.\n\n## License\n\nMIT\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Guillermo Rauch (@rauchg)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/engine.io-parser/-/engine.io-parser-5.0.4.tgz#0b13f704fa9271b3ec4f33112410d8f3f41d0fc0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/engine.io-parser/-/engine.io-parser-5.0.4.tgz",
    "hash": "0b13f704fa9271b3ec4f33112410d8f3f41d0fc0",
    "integrity": "sha512-+nVFp+5z1E3HcToEnO7ZIj3g+3k9389DvWtvJZz0T6/eOCPIyyxehFcedoYrZQrp0LgQbD9pPXhpMBKMd5QURg==",
    "registry": "npm",
    "packageName": "engine.io-parser",
    "cacheIntegrity": "sha512-+nVFp+5z1E3HcToEnO7ZIj3g+3k9389DvWtvJZz0T6/eOCPIyyxehFcedoYrZQrp0LgQbD9pPXhpMBKMd5QURg== sha1-CxP3BPqScbPsTzMRJBDY8/QdD8A="
  },
  "registry": "npm",
  "hash": "0b13f704fa9271b3ec4f33112410d8f3f41d0fc0"
}