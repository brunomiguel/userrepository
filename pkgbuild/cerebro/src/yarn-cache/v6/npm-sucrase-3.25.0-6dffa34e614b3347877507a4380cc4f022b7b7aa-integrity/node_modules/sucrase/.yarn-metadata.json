{
  "manifest": {
    "name": "sucrase",
    "version": "3.25.0",
    "description": "Super-fast alternative to Babel for when you can target modern JS runtimes",
    "author": {
      "name": "Alan Pierce",
      "email": "alangpierce@gmail.com"
    },
    "license": "MIT",
    "main": "dist/index.js",
    "module": "dist/esm/index.js",
    "types": "dist/types/index.d.ts",
    "bin": {
      "sucrase": "bin/sucrase",
      "sucrase-node": "bin/sucrase-node"
    },
    "scripts": {
      "build": "sucrase-node script/build.ts",
      "fast-build": "sucrase-node script/build.ts --fast",
      "clean": "rm -rf ./build ./dist ./dist-self-build ./dist-types ./example-runner/example-repos ./spec-compliance-tests/test262/test262-checkout ./spec-compliance-tests/babel-tests/babel-tests-checkout",
      "generate": "sucrase-node generator/generate.ts",
      "benchmark": "cd benchmark && yarn && sucrase-node ./benchmark.ts",
      "benchmark-compare": "sucrase-node ./benchmark/compare-performance.ts",
      "microbenchmark": "sucrase-node benchmark/microbenchmark.ts",
      "lint": "sucrase-node script/lint.ts",
      "profile": "node --inspect-brk ./node_modules/.bin/sucrase-node ./benchmark/profile",
      "profile-project": "node --inspect-brk ./node_modules/.bin/sucrase-node ./benchmark/benchmark-project.ts --profile",
      "prepublishOnly": "yarn clean && yarn build",
      "release": "sucrase-node script/release.ts",
      "run-examples": "sucrase-node example-runner/example-runner.ts",
      "test": "yarn lint && yarn test-only",
      "test-only": "mocha './test/**/*.ts'",
      "test262": "sucrase-node spec-compliance-tests/test262/run-test262.ts",
      "check-babel-tests": "sucrase-node spec-compliance-tests/babel-tests/check-babel-tests.ts",
      "test-with-coverage": "nyc mocha './test/**/*.ts'",
      "report-coverage": "nyc report --reporter=text-lcov > coverage.lcov && codecov"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/alangpierce/sucrase.git"
    },
    "keywords": [
      "babel",
      "jsx",
      "typescript",
      "flow"
    ],
    "bugs": {
      "url": "https://github.com/alangpierce/sucrase/issues"
    },
    "devDependencies": {
      "@babel/core": "^7.18.6",
      "@types/glob": "^7",
      "@types/mocha": "^9.1.1",
      "@types/mz": "^2.7.4",
      "@types/node": "^17.0.41",
      "@typescript-eslint/eslint-plugin": "^5.27.1",
      "@typescript-eslint/parser": "^5.27.1",
      "chalk": "^4",
      "codecov": "^3.8.3",
      "eslint": "^8.17.0",
      "eslint-config-airbnb-base": "^15.0.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-plugin-import": "^2.26.0",
      "eslint-plugin-prettier": "^4.0.0",
      "mocha": "^10.0.0",
      "nyc": "^15.1.0",
      "prettier": "^2.6.2",
      "sucrase": "^3.24.0",
      "test262-harness": "^10.0.0",
      "ts-interface-builder": "^0.3.3",
      "typescript": "^4.7.3"
    },
    "dependencies": {
      "commander": "^4.0.0",
      "glob": "7.1.6",
      "lines-and-columns": "^1.1.6",
      "mz": "^2.7.0",
      "pirates": "^4.0.1",
      "ts-interface-checker": "^0.1.9"
    },
    "engines": {
      "node": ">=8"
    },
    "resolutions": {
      "**/eshost/socket.io": "^2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sucrase-3.25.0-6dffa34e614b3347877507a4380cc4f022b7b7aa-integrity/node_modules/sucrase/package.json",
    "readmeFilename": "README.md",
    "readme": "# Sucrase\n\n[![Build Status](https://github.com/alangpierce/sucrase/workflows/All%20tests/badge.svg)](https://github.com/alangpierce/sucrase/actions)\n[![npm version](https://img.shields.io/npm/v/sucrase.svg)](https://www.npmjs.com/package/sucrase)\n[![Install Size](https://packagephobia.now.sh/badge?p=sucrase)](https://packagephobia.now.sh/result?p=sucrase)\n[![MIT License](https://img.shields.io/npm/l/express.svg?maxAge=2592000)](LICENSE)\n[![Join the chat at https://gitter.im/sucrasejs](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sucrasejs/Lobby)\n\n### [Try it out](https://sucrase.io)\n\nSucrase is an alternative to Babel that allows super-fast development builds.\nInstead of compiling a large range of JS features to be able to work in Internet\nExplorer, Sucrase assumes that you're developing with a recent browser or recent\nNode.js version, so it focuses on compiling non-standard language extensions:\nJSX, TypeScript, and Flow. Because of this smaller scope, Sucrase can get away\nwith an architecture that is much more performant but less extensible and\nmaintainable. Sucrase's parser is forked from Babel's parser (so Sucrase is\nindebted to Babel and wouldn't be possible without it) and trims it down to a\nfocused subset of what Babel solves. If it fits your use case, hopefully Sucrase\ncan speed up your development experience!\n\n**Sucrase has been extensively tested.** It can successfully build\nthe [Benchling](https://benchling.com/) frontend code,\n[Babel](https://github.com/babel/babel),\n[React](https://github.com/facebook/react),\n[TSLint](https://github.com/palantir/tslint),\n[Apollo client](https://github.com/apollographql/apollo-client), and\n[decaffeinate](https://github.com/decaffeinate/decaffeinate)\nwith all tests passing, about 1 million lines of code total.\n\n**Sucrase is about 20x faster than Babel.** Here's one measurement of how\nSucrase compares with other tools when compiling the Jest codebase 3 times,\nabout 360k lines of code total:\n\n```text\n            Time            Speed\nSucrase     0.57 seconds    636975 lines per second\nswc         1.19 seconds    304526 lines per second\nesbuild     1.45 seconds    248692 lines per second\nTypeScript  8.98 seconds    40240 lines per second\nBabel       9.18 seconds    39366 lines per second\n```\n\nDetails: Measured on July 2022. Tools run in single-threaded mode without warm-up. See the\n[benchmark code](https://github.com/alangpierce/sucrase/blob/main/benchmark/benchmark.ts)\nfor methodology and caveats.\n\n## Transforms\n\nThe main configuration option in Sucrase is an array of transform names. These\ntransforms are available:\n\n* **jsx**: Transforms JSX syntax to `React.createElement`, e.g. `<div a={b} />`\n  becomes `React.createElement('div', {a: b})`. Behaves like Babel 7's\n  [React preset](https://github.com/babel/babel/tree/main/packages/babel-preset-react),\n  including adding `createReactClass` display names and JSX context information.\n* **typescript**: Compiles TypeScript code to JavaScript, removing type\n  annotations and handling features like enums. Does not check types. Sucrase\n  transforms each file independently, so you should enable the `isolatedModules`\n  TypeScript flag so that the typechecker will disallow the few features like\n  `const enum`s that need cross-file compilation.\n* **flow**:  Removes Flow type annotations. Does not check types.\n* **imports**: Transforms ES Modules (`import`/`export`) to CommonJS\n  (`require`/`module.exports`) using the same approach as Babel and TypeScript\n  with `--esModuleInterop`. If `preserveDynamicImport` is specified in the Sucrase\n  options, then dynamic `import` expressions are left alone, which is particularly\n  useful in Node to load ESM-only libraries. If `preserveDynamicImport` is not\n  specified, `import` expressions are transformed into a promise-wrapped call to\n  `require`.\n* **react-hot-loader**: Performs the equivalent of the `react-hot-loader/babel`\n  transform in the [react-hot-loader](https://github.com/gaearon/react-hot-loader)\n  project. This enables advanced hot reloading use cases such as editing of\n  bound methods.\n* **jest**: Hoist desired [jest](https://jestjs.io/) method calls above imports in\n  the same way as [babel-plugin-jest-hoist](https://github.com/facebook/jest/tree/master/packages/babel-plugin-jest-hoist).\n  Does not validate the arguments passed to `jest.mock`, but the same rules still apply.\n\nWhen the `imports` transform is *not* specified (i.e. when targeting ESM), the\n`injectCreateRequireForImportRequire` option can be specified to transform TS\n`import foo = require(\"foo\");` in a way that matches the\n[TypeScript 4.7 behavior](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7/#commonjs-interoperability)\nwith `module: nodenext`.\n\nThese newer JS features are transformed by default:\n\n* [Optional chaining](https://github.com/tc39/proposal-optional-chaining): `a?.b`\n* [Nullish coalescing](https://github.com/tc39/proposal-nullish-coalescing): `a ?? b`\n* [Class fields](https://github.com/tc39/proposal-class-fields): `class C { x = 1; }`.\n  This includes static fields but not the `#x` private field syntax.\n* [Numeric separators](https://github.com/tc39/proposal-numeric-separator):\n  `const n = 1_234;`\n* [Optional catch binding](https://github.com/tc39/proposal-optional-catch-binding):\n  `try { doThing(); } catch { }`.\n\nIf your target runtime supports these features, you can specify\n`disableESTransforms: true` so that Sucrase preserves the syntax rather than\ntrying to transform it. Note that transpiled and standard class fields behave\nslightly differently; see the\n[TypeScript 3.7 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier)\nfor details. If you use TypeScript, you can enable the TypeScript option\n`useDefineForClassFields` to enable error checking related to these differences.\n\n### Unsupported syntax\n\nAll JS syntax not mentioned above will \"pass through\" and needs to be supported\nby your JS runtime. For example:\n\n* Decorators, private fields, `throw` expressions, generator arrow functions,\n  and `do` expressions are all unsupported in browsers and Node (as of this\n  writing), and Sucrase doesn't make an attempt to transpile them.\n* Object rest/spread, async functions, and async iterators are all recent\n  features that should work fine, but might cause issues if you use older\n  versions of tools like webpack. BigInt and newer regex features may or may not\n  work, based on your tooling.\n\n### JSX Options\n\nLike Babel, Sucrase compiles JSX to React functions by default, but can be\nconfigured for any JSX use case.\n\n* **jsxPragma**: Element creation function, defaults to `React.createElement`.\n* **jsxFragmentPragma**: Fragment component, defaults to `React.Fragment`.\n\n### Legacy CommonJS interop\n\nTwo legacy modes can be used with the `imports` transform:\n\n* **enableLegacyTypeScriptModuleInterop**: Use the default TypeScript approach\n  to CommonJS interop instead of assuming that TypeScript's `--esModuleInterop`\n  flag is enabled. For example, if a CJS module exports a function, legacy\n  TypeScript interop requires you to write `import * as add from './add';`,\n  while Babel, Webpack, Node.js, and TypeScript with `--esModuleInterop` require\n  you to write `import add from './add';`. As mentioned in the\n  [docs](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#support-for-import-d-from-cjs-form-commonjs-modules-with---esmoduleinterop),\n  the TypeScript team recommends you always use `--esModuleInterop`.\n* **enableLegacyBabel5ModuleInterop**: Use the Babel 5 approach to CommonJS\n  interop, so that you can run `require('./MyModule')` instead of\n  `require('./MyModule').default`. Analogous to\n  [babel-plugin-add-module-exports](https://github.com/59naga/babel-plugin-add-module-exports).\n\n## Usage\n\nInstallation:\n\n```bash\nyarn add --dev sucrase  # Or npm install --save-dev sucrase\n```\n\nOften, you'll want to use one of the build tool integrations:\n[Webpack](https://github.com/alangpierce/sucrase/tree/main/integrations/webpack-loader),\n[Gulp](https://github.com/alangpierce/sucrase/tree/main/integrations/gulp-plugin),\n[Jest](https://github.com/alangpierce/sucrase/tree/main/integrations/jest-plugin),\n[Rollup](https://github.com/rollup/plugins/tree/master/packages/sucrase),\n[Broccoli](https://github.com/stefanpenner/broccoli-sucrase).\n\nCompile on-the-fly via a require hook with some [reasonable defaults](src/register.ts):\n\n```js\n// Register just one extension.\nrequire(\"sucrase/register/ts\");\n// Or register all at once.\nrequire(\"sucrase/register\");\n```\n\nCompile on-the-fly via a drop-in replacement for node:\n\n```bash\nsucrase-node index.ts\n```\n\nRun on a directory:\n\n```bash\nsucrase ./srcDir -d ./outDir --transforms typescript,imports\n```\n\nCall from JS directly:\n\n```js\nimport {transform} from \"sucrase\";\nconst compiledCode = transform(code, {transforms: [\"typescript\", \"imports\"]}).code;\n```\n\n## What Sucrase is not\n\nSucrase is intended to be useful for the most common cases, but it does not aim\nto have nearly the scope and versatility of Babel. Some specific examples:\n\n* Sucrase does not check your code for errors. Sucrase's contract is that if you\n  give it valid code, it will produce valid JS code. If you give it invalid\n  code, it might produce invalid code, it might produce valid code, or it might\n  give an error. Always use Sucrase with a linter or typechecker, which is more\n  suited for error-checking.\n* Sucrase is not pluginizable. With the current architecture, transforms need to\n  be explicitly written to cooperate with each other, so each additional\n  transform takes significant extra work.\n* Sucrase is not good for prototyping language extensions and upcoming language\n  features. Its faster architecture makes new transforms more difficult to write\n  and more fragile.\n* Sucrase will never produce code for old browsers like IE. Compiling code down\n  to ES5 is much more complicated than any transformation that Sucrase needs to\n  do.\n* Sucrase is hesitant to implement upcoming JS features, although some of them\n  make sense to implement for pragmatic reasons. Its main focus is on language\n  extensions (JSX, TypeScript, Flow) that will never be supported by JS\n  runtimes.\n* Like Babel, Sucrase is not a typechecker, and must process each file in\n  isolation. For example, TypeScript `const enum`s are treated as regular\n  `enum`s rather than inlining across files.\n* You should think carefully before using Sucrase in production. Sucrase is\n  mostly beneficial in development, and in many cases, Babel or tsc will be more\n  suitable for production builds.\n\nSee the [Project Vision](./docs/PROJECT_VISION.md) document for more details on\nthe philosophy behind Sucrase.\n\n## Motivation\n\nAs JavaScript implementations mature, it becomes more and more reasonable to\ndisable Babel transforms, especially in development when you know that you're\ntargeting a modern runtime. You might hope that you could simplify and speed up\nthe build step by eventually disabling Babel entirely, but this isn't possible\nif you're using a non-standard language extension like JSX, TypeScript, or Flow.\nUnfortunately, disabling most transforms in Babel doesn't speed it up as much as\nyou might expect. To understand, let's take a look at how Babel works:\n\n1. Tokenize the input source code into a token stream.\n2. Parse the token stream into an AST.\n3. Walk the AST to compute the scope information for each variable.\n4. Apply all transform plugins in a single traversal, resulting in a new AST.\n5. Print the resulting AST.\n\nOnly step 4 gets faster when disabling plugins, so there's always a fixed cost\nto running Babel regardless of how many transforms are enabled.\n\nSucrase bypasses most of these steps, and works like this:\n\n1. Tokenize the input source code into a token stream using a trimmed-down fork\n   of the Babel parser. This fork does not produce a full AST, but still\n   produces meaningful token metadata specifically designed for the later\n   transforms.\n2. Scan through the tokens, computing preliminary information like all\n   imported/exported names.\n3. Run the transform by doing a pass through the tokens and performing a number\n   of careful find-and-replace operations, like replacing `<Foo` with\n   `React.createElement(Foo`.\n\nBecause Sucrase works on a lower level and uses a custom parser for its use\ncase, it is much faster than Babel.\n\n## Contributing\n\nContributions are welcome, whether they be bug reports, PRs, docs, tests, or\nanything else! Please take a look through the [Contributing Guide](./CONTRIBUTING.md)\nto learn how to get started.\n\n## License and attribution\n\nSucrase is MIT-licensed. A large part of Sucrase is based on a fork of the\n[Babel parser](https://github.com/babel/babel/tree/main/packages/babel-parser),\nwhich is also MIT-licensed.\n\n## Why the name?\n\nSucrase is an enzyme that processes sugar. Get it?\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2012-2018 various contributors (see AUTHORS)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sucrase/-/sucrase-3.25.0.tgz#6dffa34e614b3347877507a4380cc4f022b7b7aa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sucrase/-/sucrase-3.25.0.tgz",
    "hash": "6dffa34e614b3347877507a4380cc4f022b7b7aa",
    "integrity": "sha512-WxTtwEYXSmZArPGStGBicyRsg5TBEFhT5b7N+tF+zauImP0Acy+CoUK0/byJ8JNPK/5lbpWIVuFagI4+0l85QQ==",
    "registry": "npm",
    "packageName": "sucrase",
    "cacheIntegrity": "sha512-WxTtwEYXSmZArPGStGBicyRsg5TBEFhT5b7N+tF+zauImP0Acy+CoUK0/byJ8JNPK/5lbpWIVuFagI4+0l85QQ== sha1-bf+jTmFLM0eHdQekOAzE8CK3t6o="
  },
  "registry": "npm",
  "hash": "6dffa34e614b3347877507a4380cc4f022b7b7aa"
}