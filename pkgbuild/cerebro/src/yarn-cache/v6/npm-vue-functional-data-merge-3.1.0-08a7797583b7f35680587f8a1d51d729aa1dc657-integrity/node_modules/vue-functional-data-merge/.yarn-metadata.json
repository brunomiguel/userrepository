{
  "manifest": {
    "name": "vue-functional-data-merge",
    "version": "3.1.0",
    "description": "Vue.js util for intelligently merging data passed to functional components.",
    "main": "dist/lib.common.js",
    "module": "dist/lib.esm.js",
    "types": "dist/index.d.ts",
    "scripts": {
      "fmt": "prettier --config ./.prettierrc --write {__test__,src}/**/*.{ts,js}",
      "rollup": "rollup -c",
      "prebuild": "scripts/clean.js",
      "build": "cross-env NODE_ENV=production npm run rollup",
      "bench": "node benchmark/",
      "size": "cat dist/lib.esm.js | wc -c",
      "size:gzip": "gzip -c dist/lib.esm.js | wc -c",
      "prerelease": "npm run build && npm test",
      "release": "standard-version",
      "postrelease": "git push --follow-tags origin master && npm publish",
      "prepublishOnly": "npm run build",
      "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
      "test": "jest --verbose --coverage"
    },
    "files": [
      "dist",
      "src"
    ],
    "jest": {
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js"
      ],
      "transform": {
        "\\.(ts|tsx)$": "ts-jest"
      },
      "testMatch": [
        "**/__tests__/*.(ts|js)",
        "**/?(*.)(spec|test).(js|ts)"
      ],
      "coverageDirectory": "coverage",
      "collectCoverage": true
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alexsasharegan/vue-functional-data-merge.git"
    },
    "keywords": [
      "vue",
      "vuejs",
      "functional",
      "components",
      "vue",
      "util"
    ],
    "author": {
      "name": "Alex Regan",
      "email": "alex.joseph.regan@gmail.com",
      "url": "https://github.com/alexsasharegan"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/alexsasharegan/vue-functional-data-merge/issues"
    },
    "homepage": "https://github.com/alexsasharegan/vue-functional-data-merge#readme",
    "devDependencies": {
      "@types/benchmark": "^1.0.31",
      "@types/jest": "^24.0.13",
      "benchmark": "^2.1.4",
      "coveralls": "^3.0.3",
      "cross-env": "^5.2.0",
      "jest": "^24.8.0",
      "lodash": "^4.17.11",
      "prettier": "^1.17.1",
      "rollup": "^1.13.1",
      "rollup-plugin-terser": "^5.0.0",
      "rollup-plugin-typescript2": "^0.21.1",
      "rollup-plugin-uglify": "^6.0.2",
      "standard-version": "^6.0.1",
      "ts-jest": "^24.0.2",
      "typescript": "^3.5.1",
      "uglify-es": "^3.3.9",
      "vue": "^2.6.10"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-vue-functional-data-merge-3.1.0-08a7797583b7f35680587f8a1d51d729aa1dc657-integrity/node_modules/vue-functional-data-merge/package.json",
    "readmeFilename": "readme.md",
    "readme": "# vue-functional-data-merge\n\n[![npm](https://img.shields.io/npm/v/vue-functional-data-merge.svg?style=for-the-badge)](https://img.shields.io/npm/v/vue-functional-data-merge)\n[![npm downloads](https://img.shields.io/npm/dt/vue-functional-data-merge.svg?style=for-the-badge)](https://www.npmjs.com/package/vue-functional-data-merge)\n[![GitHub stars](https://img.shields.io/github/stars/alexsasharegan/vue-functional-data-merge.svg?style=for-the-badge)](https://github.com/alexsasharegan/vue-functional-data-merge/stargazers)\n[![GitHub issues](https://img.shields.io/github/issues/alexsasharegan/vue-functional-data-merge.svg?style=for-the-badge)](https://github.com/alexsasharegan/vue-functional-data-merge/issues)\n[![Travis](https://img.shields.io/travis/alexsasharegan/vue-functional-data-merge.svg?style=for-the-badge)](https://github.com/alexsasharegan/vue-functional-data-merge)\n[![Coverage Status](https://img.shields.io/coveralls/github/alexsasharegan/vue-functional-data-merge.svg?style=for-the-badge)](https://coveralls.io/github/alexsasharegan/vue-functional-data-merge)\n[![GitHub license](https://img.shields.io/github/license/alexsasharegan/vue-functional-data-merge.svg?style=for-the-badge)](https://github.com/alexsasharegan/vue-functional-data-merge/blob/master/LICENSE.md)\n\nVue.js util for intelligently merging data passed to functional components. (1K\n=> 0.5K gzipped)\n\n- [Getting Started](#getting-started)\n- [Why do I need this util?](#why-do-i-need-this-util)\n- [Scoped Styles](#scoped-styles)\n- [Performance](#performance)\n\n## Getting Started\n\nLoad the util from npm:\n\n```sh\n# NPM:\nnpm i vue-functional-data-merge\n\n# Yarn:\nyarn add vue-functional-data-merge\n```\n\nNow import and use it in your functional component declaration:\n\n```js\n// MyFunctionalComponent.js\n\n// ESM\nimport { mergeData } from \"vue-functional-data-merge\";\n// Common JS\nconst { mergeData } = require(\"vue-functional-data-merge/dist/lib.common.js\");\n\nexport default {\n  name: \"my-functional-component\",\n  functional: true,\n  props: [\"foo\", \"bar\", \"baz\"],\n  render(h, { props, data, children }) {\n    const componentData = {\n      staticClass: \"fn-component\", // concatenates all static classes\n      class: {\n        // object|Array|string all get merged and preserved\n        active: props.foo,\n        \"special-class\": props.bar,\n      },\n      attrs: {\n        id: \"my-functional-component\", // now overrides any id placed on the component\n      },\n      on: {\n        // Event handlers are merged to an array of handlers at each event.\n        // The last data object passed to `mergeData` will have it's event handlers called first.\n        // Right-most arguments are prepended to event handler array.\n        click(e) {\n          alert(props.baz);\n        },\n      },\n    };\n\n    return h(\"div\", mergeData(data, componentData), children);\n  },\n};\n```\n\n## Why do I need this util?\n\nWhen writing functional Vue components, the render function receives a\n`context.data` object\n([see vue docs](https://vuejs.org/v2/guide/render-function.html#Functional-Components)).\nThis object that contains the entire data object passed to the component (the\nshape of which\n[can be found here](https://vuejs.org/v2/guide/render-function.html#The-Data-Object-In-Depth)).\nIn order to write flexible components, the data object used to create the\ncomponent must be merged with the data received. If not, only the properties\ndefined by the component will be rendered.\n\nConsider this example:\n\n```js\n// MyBtn.js\nexport default {\n  name: \"my-btn\",\n  props: [\"variant\"],\n  functional: true,\n  render(h, { props, children }) {\n    return h(\n      \"button\",\n      {\n        staticClass: \"btn\",\n        class: [`btn-${props.variant}`],\n        attrs: { type: \"button\" },\n      },\n      children\n    );\n  },\n};\n```\n\nThis exports a functional button component that applies a base `.btn` class and\na `.btn-<variant>` class based on the `variant` prop passed to the component.\nIt's just a simple wrapper around some Bootstrap styling to make repetitive\nusage simpler. Usage would look like this:\n\n```html\n<template>\n\t<form>\n\t\t<input type=\"text\" placeholder=\"Name\" required>\n\t\t<input type=\"email\" placeholder=\"email\" required>\n\t\t<my-btn variant=\"primary\" type=\"submit\" id=\"form-submit-btn\" @click=\"onClick\">Submit</my-btn>\n\t</form>\n</template>\n```\n\nWe've used our Bootstrap button component in a form and conveniently applied the\n`primary` variant, but we also wanted to change the button `type` from `button`\nto `submit`, give it an `id`, and attach a click handler. This won't work\nbecause we haven't passed the attributes, listeners, etc. to the create element\ncall in the component's render function.\n\nTo fix this, we might extract out props, merge listeners/attributes, etc. This\nworks well, but gets verbose fast when attempting to support all dom attributes,\nevent listeners, etc. One might think to simply use Object spread or\n`Object.assign` to solve this like so:\n\n```js\nreturn h(\"button\", { ...context.data, ...componentData }, children);\n```\n\nNow when we try to add any dom attributes, Object spread is essentially\nperforming something like this:\n\n```js\nObject.assign(\n\t{},\n\t{\n\t\tprops: { variant: \"primary\" },\n\t\tattrs: { id: \"form-submit-btn\", type: \"submit\" }\n\t\ton: { click: onClick }\n\t},\n\t{\n\t\tstaticClass: \"btn\",\n\t\tclass: [`btn-${props.variant}`],\n\t\tattrs: { type: \"button\" },\n\t\ton: {\n\t\t\tclick() {\n\t\t\t\talert(\"Hello from MyBtn!\")\n\t\t\t}\n\t\t}\n\t}\n)\n```\n\nThe component data will wipe out all the context's `attrs` and `on` handlers as\n`Object.assign` merges these properties. This is where the `mergeData` util can\nhelp you. It will dig into the nested properties of the `context.data` and apply\ndifferent merge strategies for each data property. `mergeData` works like a\nnested `Object.assign` in that the util has a variadic argument length&mdash;you\ncan pass any number of arguments to it, and they will all be merged from left to\nright (the right most arguments taking merge priority). You don't have to pass a\nnew target object as the first argument, as the return value will always be a\nfresh object.\n\n## Scoped Styles\n\nYou may run into cases where you are using a functional component in another\ncomponent with scoped styles. This would look something like this:\n\n```html\n<template>\n  <button class=\"my-class\">\n    <slot></slot>\n  </button>\n</template>\n<style scoped>\n  .my-class {\n    text-align: center;\n  }\n</style>\n```\n\nThis will generate data attributes on the component elements and the css\nselector.\n\n```html\n<style>\n  .my-class[data-v-f3f3eg9] {\n    text-align: center;\n  }\n</style>\n\n<button data-v-f3f3eg9 class=\"my-class\">\n  Click me!\n</button>\n```\n\nWhen a parent component with scoped styles makes use of a functional component,\nthe data attribute won't be passed down automatically. Instead, you must pull\nthis attribute out manually and add it to the `VNodeData` used in a render\nfunction's `createElement` call. Doing this requires reaching into Vue\ninternals, which can be risky due to the private nature of the API and its\npotential to change. For that reason, this is not supported in this util.\n\nHowever, this util can make that manual merging easier by conforming to the\n`VNodeData` shape required by `mergeData` and Vue itself. Here is an example of\na helper function to manually extract a parent's style scope id and\nconditionally apply it in the functional component's render function.\n\n```js\nconst FunctionalComponent = {\n  functional: true,\n  render(createElement, context) {\n    let { parent, data, children } = context;\n    let componentData = { class: \"my-class\" };\n\n    return createElement(\n      \"button\",\n      mergeData(data, getScopedStyleData(parent), componentData),\n      children\n    );\n  },\n};\n\n/**\n * @param {Vue} parent\n * @returns {VNodeData}\n */\nexport function getScopedStyleData(parent) {\n  let data = { attrs: {} };\n\n  if (parent.$options._scopeId) {\n    data.attrs[`data-v-${parent.$options._scopeId}`] = \"\";\n  }\n\n  return data;\n}\n```\n\n## Performance\n\nThis util was written with performance in mind. Since functional components are\nperfect for components that are stateless and have many nodes rendered, the\n`mergeData` util is expected to be called extensively. As such, minimal variable\nallocations are made as well as minimal internal function calls _(for loops are\npreferred over `map`, `reduce`, & `forEach` to avoid adding stack frames)_.\nTypeScript is used with Vue typings to ensure the most accurate merge strategy\nfor each property of the `context.data` object. You can run the benchmark\nyourself, but simple merges run at ~1,000,000 ops/sec and complex merges at\n~400,000 ops/sec.\n",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2017 Alex Regan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vue-functional-data-merge/-/vue-functional-data-merge-3.1.0.tgz#08a7797583b7f35680587f8a1d51d729aa1dc657",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vue-functional-data-merge/-/vue-functional-data-merge-3.1.0.tgz",
    "hash": "08a7797583b7f35680587f8a1d51d729aa1dc657",
    "integrity": "sha512-leT4kdJVQyeZNY1kmnS1xiUlQ9z1B/kdBFCILIjYYQDqZgLqCLa0UhjSSeRX6c3mUe6U5qYeM8LrEqkHJ1B4LA==",
    "registry": "npm",
    "packageName": "vue-functional-data-merge",
    "cacheIntegrity": "sha512-leT4kdJVQyeZNY1kmnS1xiUlQ9z1B/kdBFCILIjYYQDqZgLqCLa0UhjSSeRX6c3mUe6U5qYeM8LrEqkHJ1B4LA== sha1-CKd5dYO381aAWH+KHVHXKaodxlc="
  },
  "registry": "npm",
  "hash": "08a7797583b7f35680587f8a1d51d729aa1dc657"
}