"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InstallerOptions", {
    enumerable: true,
    get: function() {
        return _installerDarwin.InstallerOptions;
    }
});
exports.default = void 0;
var _installerDarwin = _interopRequireWildcard(require("@electron-forge/installer-darwin"));
var _crossSpawnPromise = require("@malept/cross-spawn-promise");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class InstallerZip extends _installerDarwin.default {
    async install({ filePath , installSpinner  }) {
        await (0, _crossSpawnPromise).spawn('unzip', [
            '-q',
            '-o',
            _path.default.basename(filePath)
        ], {
            cwd: _path.default.dirname(filePath)
        });
        const appPath = (await _fsExtra.default.readdir(_path.default.dirname(filePath))).filter((file)=>file.endsWith('.app')
        ).map((file)=>_path.default.resolve(_path.default.dirname(filePath), file)
        ).sort((fA, fB)=>_fsExtra.default.statSync(fA).ctime.getTime() - _fsExtra.default.statSync(fB).ctime.getTime()
        )[0];
        const targetApplicationPath = `/Applications/${_path.default.basename(appPath)}`;
        await this.moveApp(appPath, targetApplicationPath, installSpinner);
        await (0, _crossSpawnPromise).spawn('open', [
            '-R',
            targetApplicationPath
        ], {
            detached: true
        });
    }
    constructor(...args){
        super(...args);
        this.name = 'zip';
    }
}
exports.default = InstallerZip;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJaaXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEluc3RhbGxlckRhcndpbiwgeyBJbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1kYXJ3aW4nO1xuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ0BtYWxlcHQvY3Jvc3Mtc3Bhd24tcHJvbWlzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc3RhbGxlclppcCBleHRlbmRzIEluc3RhbGxlckRhcndpbiB7XG4gIG5hbWUgPSAnemlwJztcblxuICBhc3luYyBpbnN0YWxsKHsgZmlsZVBhdGgsIGluc3RhbGxTcGlubmVyIH06IEluc3RhbGxlck9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBzcGF3bigndW56aXAnLCBbJy1xJywgJy1vJywgcGF0aC5iYXNlbmFtZShmaWxlUGF0aCldLCB7XG4gICAgICBjd2Q6IHBhdGguZGlybmFtZShmaWxlUGF0aCksXG4gICAgfSk7XG5cbiAgICBjb25zdCBhcHBQYXRoID0gKGF3YWl0IGZzLnJlYWRkaXIocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSkpXG4gICAgICAuZmlsdGVyKChmaWxlKSA9PiBmaWxlLmVuZHNXaXRoKCcuYXBwJykpXG4gICAgICAubWFwKChmaWxlKSA9PiBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSwgZmlsZSkpXG4gICAgICAuc29ydCgoZkEsIGZCKSA9PiBmcy5zdGF0U3luYyhmQSkuY3RpbWUuZ2V0VGltZSgpIC0gZnMuc3RhdFN5bmMoZkIpLmN0aW1lLmdldFRpbWUoKSlbMF07XG5cbiAgICBjb25zdCB0YXJnZXRBcHBsaWNhdGlvblBhdGggPSBgL0FwcGxpY2F0aW9ucy8ke3BhdGguYmFzZW5hbWUoYXBwUGF0aCl9YDtcblxuICAgIGF3YWl0IHRoaXMubW92ZUFwcChhcHBQYXRoLCB0YXJnZXRBcHBsaWNhdGlvblBhdGgsIGluc3RhbGxTcGlubmVyKTtcblxuICAgIGF3YWl0IHNwYXduKCdvcGVuJywgWyctUicsIHRhcmdldEFwcGxpY2F0aW9uUGF0aF0sIHsgZGV0YWNoZWQ6IHRydWUgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSW5zdGFsbGVyT3B0aW9ucyB9O1xuIl0sIm5hbWVzIjpbIkluc3RhbGxlck9wdGlvbnMiLCJJbnN0YWxsZXJaaXAiLCJJbnN0YWxsZXJEYXJ3aW4iLCJpbnN0YWxsIiwiZmlsZVBhdGgiLCJpbnN0YWxsU3Bpbm5lciIsInNwYXduIiwicGF0aCIsImJhc2VuYW1lIiwiY3dkIiwiZGlybmFtZSIsImFwcFBhdGgiLCJmcyIsInJlYWRkaXIiLCJmaWx0ZXIiLCJmaWxlIiwiZW5kc1dpdGgiLCJtYXAiLCJyZXNvbHZlIiwic29ydCIsImZBIiwiZkIiLCJzdGF0U3luYyIsImN0aW1lIiwiZ2V0VGltZSIsInRhcmdldEFwcGxpY2F0aW9uUGF0aCIsIm1vdmVBcHAiLCJkZXRhY2hlZCIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBMkJTQSxDQUFnQjs7O2VBQWhCQSxnQkFBZ0I7Ozs7QUEzQnlCLEdBQWtDLENBQWxDLGdCQUFrQztBQUU5RCxHQUE2QixDQUE3QixrQkFBNkI7QUFDcEMsR0FBVSxDQUFWLFFBQVU7QUFDUixHQUFNLENBQU4sS0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BRUZDLFlBQVksU0FBU0MsZ0JBQWU7VUFHakRDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLFFBQVEsR0FBRUMsY0FBYyxFQUFtQixDQUFDLEVBQWlCLENBQUM7UUFDNUUsS0FBSyxLQUFDQyxrQkFBSyxRQUFDLENBQU8sUUFBRSxDQUFDO1lBQUEsQ0FBSTtZQUFFLENBQUk7WUFBRUMsS0FBSSxTQUFDQyxRQUFRLENBQUNKLFFBQVE7UUFBQyxDQUFDLEVBQUUsQ0FBQztZQUMzREssR0FBRyxFQUFFRixLQUFJLFNBQUNHLE9BQU8sQ0FBQ04sUUFBUTtRQUM1QixDQUFDO1FBRUQsS0FBSyxDQUFDTyxPQUFPLElBQUksS0FBSyxDQUFDQyxRQUFFLFNBQUNDLE9BQU8sQ0FBQ04sS0FBSSxTQUFDRyxPQUFPLENBQUNOLFFBQVEsSUFDcERVLE1BQU0sRUFBRUMsSUFBSSxHQUFLQSxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFNO1VBQ3JDQyxHQUFHLEVBQUVGLElBQUksR0FBS1IsS0FBSSxTQUFDVyxPQUFPLENBQUNYLEtBQUksU0FBQ0csT0FBTyxDQUFDTixRQUFRLEdBQUdXLElBQUk7VUFDdkRJLElBQUksRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEdBQUtULFFBQUUsU0FBQ1UsUUFBUSxDQUFDRixFQUFFLEVBQUVHLEtBQUssQ0FBQ0MsT0FBTyxLQUFLWixRQUFFLFNBQUNVLFFBQVEsQ0FBQ0QsRUFBRSxFQUFFRSxLQUFLLENBQUNDLE9BQU87VUFBSSxDQUFDO1FBRXhGLEtBQUssQ0FBQ0MscUJBQXFCLElBQUksY0FBYyxFQUFFbEIsS0FBSSxTQUFDQyxRQUFRLENBQUNHLE9BQU87UUFFcEUsS0FBSyxDQUFDLElBQUksQ0FBQ2UsT0FBTyxDQUFDZixPQUFPLEVBQUVjLHFCQUFxQixFQUFFcEIsY0FBYztRQUVqRSxLQUFLLEtBQUNDLGtCQUFLLFFBQUMsQ0FBTSxPQUFFLENBQUM7WUFBQSxDQUFJO1lBQUVtQixxQkFBcUI7UUFBQSxDQUFDLEVBQUUsQ0FBQztZQUFDRSxRQUFRLEVBQUUsSUFBSTtRQUFDLENBQUM7SUFDdkUsQ0FBQzs7O1FBbEJZLElBbUJkLENBbEJDQyxJQUFJLEdBQUcsQ0FBSzs7O2tCQURPM0IsWUFBWSJ9