{
  "manifest": {
    "name": "@rollup/plugin-typescript",
    "version": "8.3.0",
    "publishConfig": {
      "access": "public"
    },
    "description": "Seamless integration between Rollup and TypeScript.",
    "license": "MIT",
    "repository": {
      "url": "https://github.com/rollup/plugins.git",
      "directory": "packages/typescript"
    },
    "author": {
      "name": "Oskar Segersv√§rd"
    },
    "homepage": "https://github.com/rollup/plugins/tree/master/packages/typescript/#readme",
    "bugs": {
      "url": "https://github.com/rollup/plugins/issues"
    },
    "main": "dist/index.js",
    "module": "dist/index.es.js",
    "engines": {
      "node": ">=8.0.0"
    },
    "scripts": {
      "build": "rollup -c",
      "ci:coverage": "nyc pnpm test && nyc report --reporter=text-lcov > coverage.lcov",
      "ci:lint": "pnpm build && pnpm lint",
      "ci:lint:commits": "commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}",
      "ci:test": "pnpm test -- --verbose --serial",
      "prebuild": "del-cli dist",
      "prepare": "if [ ! -d 'dist' ]; then pnpm build; fi",
      "prerelease": "pnpm build",
      "pretest": "pnpm build",
      "release": "pnpm plugin:release --workspace-root -- --pkg $npm_package_name",
      "test": "ava",
      "test:ts": "tsc --noEmit"
    },
    "files": [
      "dist",
      "types",
      "README.md",
      "LICENSE"
    ],
    "keywords": [
      "rollup",
      "plugin",
      "typescript",
      "es2015"
    ],
    "peerDependencies": {
      "rollup": "^2.14.0",
      "tslib": "*",
      "typescript": ">=3.7.0"
    },
    "dependencies": {
      "@rollup/pluginutils": "^3.1.0",
      "resolve": "^1.17.0"
    },
    "devDependencies": {
      "@rollup/plugin-buble": "^0.21.3",
      "@rollup/plugin-commonjs": "^11.1.0",
      "@rollup/plugin-typescript": "^5.0.2",
      "@types/node": "^10.0.0",
      "buble": "^0.20.0",
      "rollup": "^2.14.0",
      "typescript": "^4.2.2"
    },
    "types": "types/index.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@rollup-plugin-typescript-8.3.0-integrity/node_modules/@rollup/plugin-typescript/package.json",
    "readmeFilename": "README.md",
    "readme": "[npm]: https://img.shields.io/npm/v/@rollup/plugin-typescript\n[npm-url]: https://www.npmjs.com/package/@rollup/plugin-typescript\n[size]: https://packagephobia.now.sh/badge?p=@rollup/plugin-typescript\n[size-url]: https://packagephobia.now.sh/result?p=@rollup/plugin-typescript\n\n[![npm][npm]][npm-url]\n[![size][size]][size-url]\n[![libera manifesto](https://img.shields.io/badge/libera-manifesto-lightgrey.svg)](https://liberamanifesto.com)\n\n# @rollup/plugin-typescript\n\nüç£ A Rollup plugin for seamless integration between Rollup and Typescript.\n\n## Requirements\n\nThis plugin requires an [LTS](https://github.com/nodejs/Release) Node version (v8.0.0+) and Rollup v1.20.0+. This plugin also requires at least [TypeScript 3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html).\n\n## Install\n\nUsing npm:\n\n```console\nnpm install @rollup/plugin-typescript --save-dev\n```\n\nNote that both `typescript` and `tslib` are peer dependencies of this plugin that need to be installed separately.\n\n## Why?\n\nSee [@rollup/plugin-babel](https://github.com/rollup/plugins/tree/master/packages/babel).\n\n## Usage\n\nCreate a `rollup.config.js` [configuration file](https://www.rollupjs.org/guide/en/#configuration-files) and import the plugin:\n\n```js\n// rollup.config.js\nimport typescript from '@rollup/plugin-typescript';\n\nexport default {\n  input: 'src/index.ts',\n  output: {\n    dir: 'output',\n    format: 'cjs'\n  },\n  plugins: [typescript()]\n};\n```\n\nThen call `rollup` either via the [CLI](https://www.rollupjs.org/guide/en/#command-line-reference) or the [API](https://www.rollupjs.org/guide/en/#javascript-api).\n\n## Options\n\nThe plugin loads any [`compilerOptions`](http://www.typescriptlang.org/docs/handbook/compiler-options.html) from the `tsconfig.json` file by default. Passing options to the plugin directly overrides those options:\n\n```js\n...\nexport default {\n  input: './main.ts',\n  plugins: [\n      typescript({lib: [\"es5\", \"es6\", \"dom\"], target: \"es5\"})\n  ]\n}\n```\n\nThe following options are unique to `rollup-plugin-typescript`:\n\n### `exclude`\n\nType: `String` | `Array[...String]`<br>\nDefault: `null`\n\nA [minimatch pattern](https://github.com/isaacs/minimatch), or array of patterns, which specifies the files in the build the plugin should _ignore_. By default no files are ignored.\n\n### `include`\n\nType: `String` | `Array[...String]`<br>\nDefault: `null`\n\nA [minimatch pattern](https://github.com/isaacs/minimatch), or array of patterns, which specifies the files in the build the plugin should operate on. By default all `.ts` and `.tsx` files are targeted.\n\n### `filterRoot`\n\nType: `String` | `Boolean`<br>\nDefault: `rootDir` ?? `tsConfig.compilerOptions.rootDir` ?? `process.cwd()`\n\nOptionally resolves the include and exclude patterns against a directory other than `process.cwd()`. If a String is specified, then the value will be used as the base directory. Relative paths will be resolved against `process.cwd()` first. If `false`, then the patterns will not be resolved against any directory.\n\nBy default, patterns resolve against the rootDir set in your TS config file.\n\nThis can fix plugin errors when parsing files outside the current working directory (process.cwd()).\n\n### `tsconfig`\n\nType: `String` | `Boolean`<br>\nDefault: `true`\n\nWhen set to false, ignores any options specified in the config file. If set to a string that corresponds to a file path, the specified file will be used as config file.\n\n### `typescript`\n\nType: `import('typescript')`<br>\nDefault: _peer dependency_\n\nOverrides the TypeScript module used for transpilation.\n\n```js\ntypescript({\n  typescript: require('some-fork-of-typescript')\n});\n```\n\n### `tslib`\n\nType: `String`<br>\nDefault: _peer dependency_\n\nOverrides the injected TypeScript helpers with a custom version.\n\n```js\ntypescript({\n  tslib: require.resolve('some-fork-of-tslib')\n});\n```\n\n### `transformers`\n\nType: `{ [before | after | afterDeclarations]: TransformerFactory[] }`<br>\nDefault: `undefined`\n\nAllows registration of TypeScript custom transformers at any of the supported stages:\n\n- **before**: transformers will execute before the TypeScript's own transformers on raw TypeScript files\n- **after**: transformers will execute after the TypeScript transformers on transpiled code\n- **afterDeclarations**: transformers will execute after declaration file generation allowing to modify existing declaration files\n\nSupported transformer factories:\n\n- all **built-in** TypeScript custom transformer factories:\n\n  - `import('typescript').TransformerFactory` annotated **TransformerFactory** bellow\n  - `import('typescript').CustomTransformerFactory` annotated **CustomTransformerFactory** bellow\n\n- **ProgramTransformerFactory** represents a transformer factory allowing the resulting transformer to grab a reference to the **Program** instance\n\n  ```js\n  {\n    type: 'program',\n    factory: (program: Program) => TransformerFactory | CustomTransformerFactory\n  }\n  ```\n\n- **TypeCheckerTransformerFactory** represents a transformer factory allowing the resulting transformer to grab a reference to the **TypeChecker** instance\n  ```js\n  {\n    type: 'typeChecker',\n    factory: (typeChecker: TypeChecker) => TransformerFactory | CustomTransformerFactory\n  }\n  ```\n\n```js\ntypescript({\n  transformers: {\n    before: [\n      {\n        // Allow the transformer to get a Program reference in it's factory\n        type: 'program',\n        factory: (program) => {\n          return ProgramRequiringTransformerFactory(program);\n        }\n      },\n      {\n        type: 'typeChecker',\n        factory: (typeChecker) => {\n          // Allow the transformer to get a Program reference in it's factory\n          return TypeCheckerRequiringTransformerFactory(program);\n        }\n      }\n    ],\n    after: [\n      // You can use normal transformers directly\n      require('custom-transformer-based-on-Context')\n    ],\n    afterDeclarations: [\n      // Or even define in place\n      function fixDeclarationFactory(context) {\n        return function fixDeclaration(source) {\n          function visitor(node) {\n            // Do real work here\n\n            return ts.visitEachChild(node, visitor, context);\n          }\n\n          return ts.visitEachChild(source, visitor, context);\n        };\n      }\n    ]\n  }\n});\n```\n\n### `cacheDir`\n\nType: `String`<br>\nDefault: _.rollup.cache_\n\nWhen compiling with `incremental` or `composite` options the plugin will\nstore compiled files in this folder. This allows the use of incremental\ncompilation.\n\n```js\ntypescript({\n  cacheDir: '.rollup.tscache'\n});\n```\n\n### Typescript compiler options\n\nSome of Typescript's [CompilerOptions](https://www.typescriptlang.org/docs/handbook/compiler-options.html) affect how Rollup builds files.\n\n#### `noEmitOnError`\n\nType: `Boolean`<br>\nDefault: `false`\n\nIf a type error is detected, the Rollup build is aborted when this option is set to true.\n\n#### `files`, `include`, `exclude`\n\nType: `Array[...String]`<br>\nDefault: `[]`\n\nDeclaration files are automatically included if they are listed in the `files` field in your `tsconfig.json` file. Source files in these fields are ignored as Rollup's configuration is used instead.\n\n#### Ignored options\n\nThese compiler options are ignored by Rollup:\n\n- `noEmitHelpers`, `importHelpers`: The `tslib` helper module always must be used.\n- `noEmit`, `emitDeclarationOnly`: Typescript needs to emit code for the plugin to work with.\n- `noResolve`: Preventing Typescript from resolving code may break compilation\n\n### Importing CommonJS\n\nThough it is not recommended, it is possible to configure this plugin to handle imports of CommonJS files from TypeScript. For this, you need to specify `CommonJS` as the module format and add [`@rollup/plugin-commonjs`](https://github.com/rollup/plugins/tree/master/packages/commonjs) to transpile the CommonJS output generated by TypeScript to ES Modules so that rollup can process it.\n\n```js\n// rollup.config.js\nimport typescript from '@rollup/plugin-typescript';\nimport commonjs from '@rollup/plugin-commonjs';\n\nexport default {\n  input: './main.ts',\n  plugins: [\n    typescript({ module: 'CommonJS' }),\n    commonjs({ extensions: ['.js', '.ts'] }) // the \".ts\" extension is required\n  ]\n};\n```\n\nNote that this will often result in less optimal output.\n\n### Preserving JSX output\n\nWhenever choosing to preserve JSX output to be further consumed by another transform step via `tsconfig` `compilerOptions` by setting `jsx: 'preserve'` or [overriding options](#options), please bear in mind that, by itself, this plugin won't be able to preserve JSX output, usually failing with:\n\n```sh\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\nfile.tsx (1:15)\n1: export default <span>Foobar</span>\n                  ^\n```\n\nTo prevent that, make sure to use the acorn plugin, namely `acorn-jsx`, which will make Rollup's parser acorn handle JSX tokens. (See https://rollupjs.org/guide/en/#acorninjectplugins)\n\nAfter adding `acorn-jsx` plugin, your Rollup config would look like the following, correctly preserving your JSX output.\n\n```js\nimport jsx from 'acorn-jsx';\nimport typescript from '@rollup/plugin-typescript';\n\nexport default {\n  // ‚Ä¶ other options ‚Ä¶\n  acornInjectPlugins: [jsx()],\n  plugins: [typescript({ jsx: 'preserve' })]\n};\n```\n\n### Faster compiling\n\nPrevious versions of this plugin used Typescript's `transpileModule` API, which is faster but does not perform typechecking and does not support cross-file features like `const enum`s and emit-less types. If you want this behaviour, you can use [@rollup/plugin-sucrase](https://github.com/rollup/plugins/tree/master/packages/sucrase) instead.\n\n### Declaration Output With `output.file`\n\nWhen instructing Rollup to output a specific file name via the `output.file` Rollup configuration, and TypeScript to output declaration files, users may encounter a situation where the declarations are nested improperly. And additionally when attempting to fix the improper nesting via use of `outDir` or `declarationDir` result in further TypeScript errors.\n\nConsider the following `rollup.config.js` file:\n\n```js\nimport typescript from '@rollup/plugin-typescript';\n\nexport default {\n  input: 'src/index.ts',\n  output: {\n    file: 'dist/index.mjs'\n  },\n  plugins: [typescript({ tsconfig: './tsconfig.json' })]\n};\n```\n\nAnd accompanying `tsconfig.json` file:\n\n```json\n{\n  \"include\": [\"*\"],\n  \"compilerOptions\": {\n    \"outDir\": \"dist\",\n    \"declaration\": true\n  }\n}\n```\n\nThis setup will produce `dist/index.mjs` and `dist/dist/index.d.ts`. To correctly place the declaration file, add an `exclude` setting in `tsconfig` and modify the `declarationDir` setting in `compilerOptions` to resemble:\n\n```json\n{\n  \"include\": [\"*\"],\n  \"exclude\": [\"dist\"],\n  \"compilerOptions\": {\n    \"outDir\": \"dist\",\n    \"declaration\": true,\n    \"declarationDir\": \".\"\n  }\n}\n```\n\nThis will result in the correct output of `dist/index.mjs` and `dist/index.d.ts`.\n\n_For reference, please see the workaround this section is based on [here](https://github.com/microsoft/bistring/commit/7e57116c812ae2c01f383c234f3b447f733b5d0c)_\n\n## Meta\n\n[CONTRIBUTING](/.github/CONTRIBUTING.md)\n\n[LICENSE (MIT)](/LICENSE)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@rollup/plugin-typescript/-/plugin-typescript-8.3.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@rollup/plugin-typescript/-/plugin-typescript-8.3.0.tgz",
    "hash": "",
    "integrity": "sha512-I5FpSvLbtAdwJ+naznv+B4sjXZUcIvLLceYpITAn7wAP8W0wqc5noLdGIp9HGVntNhRWXctwPYrSSFQxtl0FPA==",
    "registry": "npm",
    "packageName": "@rollup/plugin-typescript",
    "cacheIntegrity": "sha512-I5FpSvLbtAdwJ+naznv+B4sjXZUcIvLLceYpITAn7wAP8W0wqc5noLdGIp9HGVntNhRWXctwPYrSSFQxtl0FPA== sha1-vBB3+liXuYD8J+N2xON3iCxj5os="
  },
  "registry": "npm",
  "hash": "2391694af2dbb4077027e9dace7bfe078b235d951c22f2cb71e629213027ef000ff16d30a9ce67a0b746229f471959ed3614565dcb703d8ad2485431b65d053c"
}