{
  "manifest": {
    "name": "postcss-inline-svg",
    "version": "4.1.0",
    "description": "PostCSS plugin to reference an SVG file and control its attributes with CSS syntax",
    "keywords": [
      "postcss",
      "css",
      "postcss-plugin",
      "svg",
      "inline"
    ],
    "main": "lib/index.js",
    "files": [
      "lib"
    ],
    "scripts": {
      "test": "jest"
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.js": [
        "prettier --write",
        "git add"
      ]
    },
    "author": {
      "name": "Bogdan Chadkin",
      "email": "trysound@yandex.ru"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/TrySound/postcss-inline-svg.git"
    },
    "bugs": {
      "url": "https://github.com/TrySound/postcss-inline-svg/issues"
    },
    "homepage": "https://github.com/TrySound/postcss-inline-svg",
    "dependencies": {
      "css-select": "^2.0.2",
      "dom-serializer": "^0.1.1",
      "htmlparser2": "^3.10.1",
      "postcss": "^7.0.17",
      "postcss-value-parser": "^4.0.0"
    },
    "devDependencies": {
      "husky": "^2.4.1",
      "jest": "^24.8.0",
      "lint-staged": "^8.2.1",
      "prettier": "^1.18.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-inline-svg-4.1.0-54e9199632242cc181af5b55f0f0691ad1020f95-integrity/node_modules/postcss-inline-svg/package.json",
    "readmeFilename": "README.md",
    "readme": "# postcss-inline-svg [![Build Status][travis-img]][travis]\n\n[PostCSS] plugin to reference an SVG file and control its attributes with CSS syntax.\n\n[PostCSS]: https://github.com/postcss/postcss\n[travis-img]: https://travis-ci.org/TrySound/postcss-inline-svg.svg\n[travis]: https://travis-ci.org/TrySound/postcss-inline-svg\n\n```postcss\n@svg-load nav url(img/nav.svg) {\n    fill: #cfc;\n    path:nth-child(2) {\n        fill: #ff0;\n    }\n}\n.nav {\n    background: svg-inline(nav);\n}\n.up {\n    background: svg-load('img/arrow-up.svg', fill=#000, stroke=#fff);\n}\n```\n\n```css\n.nav {\n    background: url(\"data:image/svg+xml;charset=utf-8,%3Csvg fill='%23cfc'%3E%3Cpath d='...'/%3E%3Cpath d='...' fill='%23ff0'/%3E%3Cpath d='...'/%3E%3C/svg%3E\");\n}\n.up {\n    background: url(\"data:image/svg+xml;charset=utf-8,%3Csvg fill='%23000' stroke='%23fff'%3E...%3C/svg%3E\");\n}\n```\n\nPostCSS parsers allow to use different syntax (but only one syntax in one svg-load() definition):\n\n```postcss\n.up {\n    background: svg-load('img/arrow-up.svg', fill: #000, stroke: #fff);\n}\n.down {\n    background: svg-load('img/arrow-down.svg', fill=#000, stroke=#fff);\n}\n```\n\n## Usage\n\n```js\npostcss([ require('postcss-inline-svg')(options) ])\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n### Options\n\n#### options.paths\n\nArray of paths to resolve URL. Paths are tried in order, until an existing file is found.\n\nDefault: `false` - path will be relative to source file if it was specified.\n\n#### options.removeFill\n\nDefault: `false` - with `true` removes all `fill` attributes before applying specified.\nPassed RegExp filters files by ID.\n\n#### options.removeStroke\n\nDefault: `false` - with `true` removes all `stroke` attributes before applying specified.\nPassed RegExp filters files by ID.\n\n\n#### options.encode(svg)\n\nProcesses SVG after applying parameters. Default will be ommited if passed `false`.\n\nDefault:\n\n```js\nfunction encode(code) {\n    return code\n        .replace(/%/g, '%25')\n        .replace(/</g, '%3C')\n        .replace(/>/g, '%3E')\n        .replace(/&/g, '%26')\n        .replace(/#/g, \"%23\")\n        .replace(/{/g, \"%7B\")\n        .replace(/}/g, \"%7D\");\n}\n```\n\n#### options.transform(svg, path)\n\nTransforms SVG after `encode` function and generates URL.\n\n#### options.xmlns\n\ntype: boolean\ndefault: true\n\nAdds `xmlns` attribute to SVG if not present.\n\n\n## Frequently asked questions\n\n### Why svg-load() doesn't work and the color still black (or red or whatever)?\n\nThat's because `svg-load()` overrides attributes only in `<svg>` element and children inherit that color.\nBut if there is already color on children nothing will be inherited.\n\nFor example\n\n```xml\n<svg>\n    <path fill=\"#ff0000\" d=\"...\" />\n</svg>\n```\n\nafter inline-svg (fill: #000) will looks like\n\n```xml\n<svg fill=\"#000\">\n    <path fill=\"#ff0000\" d=\"...\" />\n</svg>\n```\n\nThere are three solutions: to remove that attribute (preferable), to use extended `@svg-load` notation or to use removeFill option.\n\n### How to optimize svg on build step?\n\n> There is a plugin. :)\n\nYou are able to add [postcss-svgo](https://github.com/cssnano/cssnano/tree/master/packages/postcss-svgo) in your PostCSS plugins list which will detect every URL which contains data SVG URI and minify via [svgo](https://github.com/svg/svgo).\n\n```js\npostcss([\n    require('postcss-inline-svg'),\n    require('postcss-svgo')\n])\n```\n\nOr if you use [cssnano](https://cssnano.co/) your SVG URLs already minified\nas cssnano includes postcss-svgo.\n\n```js\npostcss([\n    require('postcss-inline-svg'),\n    require('cssnano')\n])\n```\n\n\n# License\n\nMIT Â© [Bogdan Chadkin](mailto:trysound@yandex.ru)\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/TrySound/postcss-inline-svg/badge.svg?style=beer-square)](https://beerpay.io/TrySound/postcss-inline-svg)  [![Beerpay](https://beerpay.io/TrySound/postcss-inline-svg/make-wish.svg?style=flat-square)](https://beerpay.io/TrySound/postcss-inline-svg?focus=wish)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2015 Bogdan Chadkin <trysound@yandex.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-inline-svg/-/postcss-inline-svg-4.1.0.tgz#54e9199632242cc181af5b55f0f0691ad1020f95",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-inline-svg/-/postcss-inline-svg-4.1.0.tgz",
    "hash": "54e9199632242cc181af5b55f0f0691ad1020f95",
    "integrity": "sha512-0pYBJyoQ9/sJViYRc1cNOOTM7DYh0/rmASB0TBeRmWkG8YFK2tmgdkfjHkbRma1iFtBFKFHZFsHwRTDZTMKzSQ==",
    "registry": "npm",
    "packageName": "postcss-inline-svg",
    "cacheIntegrity": "sha512-0pYBJyoQ9/sJViYRc1cNOOTM7DYh0/rmASB0TBeRmWkG8YFK2tmgdkfjHkbRma1iFtBFKFHZFsHwRTDZTMKzSQ== sha1-VOkZljIkLMGBr1tV8PBpGtECD5U="
  },
  "registry": "npm",
  "hash": "54e9199632242cc181af5b55f0f0691ad1020f95"
}