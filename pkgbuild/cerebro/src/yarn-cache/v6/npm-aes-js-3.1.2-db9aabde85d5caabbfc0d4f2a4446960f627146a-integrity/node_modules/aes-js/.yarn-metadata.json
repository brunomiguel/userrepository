{
  "manifest": {
    "name": "aes-js",
    "version": "3.1.2",
    "bugs": {
      "url": "http://github.com/ricmoo/aes-js/issues",
      "email": "github@ricmoo.com"
    },
    "description": "A pure JavaScript implementation of the AES block cipher and all common modes of operation.",
    "devDependencies": {
      "nodeunit": "^0.9.1"
    },
    "main": "index.js",
    "scripts": {
      "test": "./node_modules/.bin/nodeunit test/index.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/ricmoo/aes-js.git"
    },
    "keywords": [
      "aes",
      "aes-ctr",
      "aes-ofb",
      "aes-ecb",
      "aes-cbc",
      "aes-cfb",
      "encrypt",
      "decrypt",
      "block",
      "cipher"
    ],
    "author": {
      "name": "Richard Moore",
      "email": "me@ricmoo.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-aes-js-3.1.2-db9aabde85d5caabbfc0d4f2a4446960f627146a-integrity/node_modules/aes-js/package.json",
    "readmeFilename": "README.md",
    "readme": "AES-JS\n======\n\n[![npm version](https://badge.fury.io/js/aes-js.svg)](https://badge.fury.io/js/aes-js)\n\nA pure JavaScript implementation of the AES block cipher algorithm and all common modes of operation (CBC, CFB, CTR, ECB and OFB).\n\nFeatures\n--------\n\n- Pure JavaScript (with no dependencies)\n- Supports all key sizes (128-bit, 192-bit and 256-bit)\n- Supports all common modes of operation (CBC, CFB, CTR, ECB and OFB)\n- Works in either node.js or web browsers\n\nMigrating from 2.x to 3.x\n-------------------------\n\nThe utility functions have been renamed in the 3.x branch, since they were causing a great deal of confusion converting between bytes and string.\n\nThe examples have also been updated to encode binary data as printable hex strings.\n\n**Strings and Bytes**\n\nStrings should **NOT** be used as keys. UTF-8 allows variable length, multi-byte characters, so a string that is 16 *characters* long may not be 16 *bytes* long.\n\nAlso, UTF8 should **NOT** be used to store arbitrary binary data as it is a *string* encoding format, not a *binary* encoding format.\n\n```javascript\n// aesjs.util.convertStringToBytes(aString)\n// Becomes:\naesjs.utils.utf8.toBytes(aString)\n\n\n// aesjs.util.convertBytesToString(aString)\n// Becomes:\naesjs.utils.utf8.fromBytes(aString)\n```\n\n**Bytes and Hex strings**\n\nBinary data, such as encrypted bytes, can safely be stored and printed as hexidecimal strings.\n\n```javascript\n// aesjs.util.convertStringToBytes(aString, 'hex')\n// Becomes:\naesjs.utils.hex.toBytes(aString)\n\n\n// aesjs.util.convertBytesToString(aString, 'hex')\n// Becomes:\naesjs.utils.hex.fromBytes(aString)\n```\n\n**Typed Arrays**\n\nThe 3.x and above versions of aes-js use [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instead of Array, which reduces code size when used with Browserify (it no longer pulls in Buffer) and is also about **twice** the speed.\n\nHowever, if you need to support browsers older than IE 10, you should continue using version 2.x.\n\n\nAPI\n===\n\n#### Node.js\n\nTo install `aes-js` in your node.js project:\n\n```\nnpm install aes-js\n```\n\nAnd to access it from within node, simply add:\n\n```javascript\nvar aesjs = require('aes-js');\n```\n\n#### Web Browser\n\nTo use `aes-js` in a web page, add the following:\n\n```html\n<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/ricmoo/aes-js/e27b99df/index.js\"></script>\n```\n\nKeys\n----\n\nAll keys must be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.\n\nThe library work with `Array`, `Uint8Array` and `Buffer` objects as well as any *array-like* object (i.e. must have a `length` property, and have a valid byte value for each entry).\n\n```javascript\n// 128-bit, 192-bit and 256-bit keys\nvar key_128 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar key_192 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n               16, 17, 18, 19, 20, 21, 22, 23];\nvar key_256 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n               16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n               29, 30, 31];\n\n// or, you may use Uint8Array:\nvar key_128_array = new Uint8Array(key_128);\nvar key_192_array = new Uint8Array(key_192);\nvar key_256_array = new Uint8Array(key_256);\n\n// or, you may use Buffer in node.js:\nvar key_128_buffer = Buffer.from(key_128);\nvar key_192_buffer = Buffer.from(key_192);\nvar key_256_buffer = Buffer.from(key_256);\n```\n\n\nTo generate keys from simple-to-remember passwords, consider using a password-based key-derivation function such as [scrypt](https://www.npmjs.com/package/scrypt-js) or [bcrypt](https://www.npmjs.com/search?q=bcrypt).\n\n\nCommon Modes of Operation\n-------------------------\n\nThere are several modes of operations, each with various pros and cons. In general though, the **CBC** and **CTR** modes are recommended. The **ECB is NOT recommended.**, and is included primarily for completeness.\n\n### CTR - Counter (recommended)\n\n```javascript\n// An example 128-bit key (16 bytes * 8 bits/byte = 128 bits)\nvar key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\n// Convert text to bytes\nvar text = 'Text may be any length you wish, no padding is required.';\nvar textBytes = aesjs.utils.utf8.toBytes(text);\n\n// The counter is optional, and if omitted will begin at 1\nvar aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\nvar encryptedBytes = aesCtr.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"a338eda3874ed884b6199150d36f49988c90f5c47fe7792b0cf8c7f77eeffd87\n//  ea145b73e82aefcf2076f881c88879e4e25b1d7b24ba2788\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// The counter mode of operation maintains internal state, so to\n// decrypt a new instance must be instantiated.\nvar aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\nvar decryptedBytes = aesCtr.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"Text may be any length you wish, no padding is required.\"\n```\n\n\n### CBC - Cipher-Block Chaining (recommended)\n\n```javascript\n// An example 128-bit key\nvar key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\n// The initialization vector (must be 16 bytes)\nvar iv = [ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,35, 36 ];\n\n// Convert text to bytes (text must be a multiple of 16 bytes)\nvar text = 'TextMustBe16Byte';\nvar textBytes = aesjs.utils.utf8.toBytes(text);\n\nvar aesCbc = new aesjs.ModeOfOperation.cbc(key, iv);\nvar encryptedBytes = aesCbc.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"104fb073f9a131f2cab49184bb864ca2\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// The cipher-block chaining mode of operation maintains internal\n// state, so to decrypt a new instance must be instantiated.\nvar aesCbc = new aesjs.ModeOfOperation.cbc(key, iv);\nvar decryptedBytes = aesCbc.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"TextMustBe16Byte\"\n```\n\n\n### CFB - Cipher Feedback \n\n```javascript\n// An example 128-bit key\nvar key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\n// The initialization vector (must be 16 bytes)\nvar iv = [ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,35, 36 ];\n\n// Convert text to bytes (must be a multiple of the segment size you choose below)\nvar text = 'TextMustBeAMultipleOfSegmentSize';\nvar textBytes = aesjs.utils.utf8.toBytes(text);\n\n// The segment size is optional, and defaults to 1\nvar segmentSize = 8;\nvar aesCfb = new aesjs.ModeOfOperation.cfb(key, iv, segmentSize);\nvar encryptedBytes = aesCfb.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"55e3af2638c560b4fdb9d26a630733ea60197ec23deb85b1f60f71f10409ce27\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// The cipher feedback mode of operation maintains internal state,\n// so to decrypt a new instance must be instantiated.\nvar aesCfb = new aesjs.ModeOfOperation.cfb(key, iv, 8);\nvar decryptedBytes = aesCfb.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"TextMustBeAMultipleOfSegmentSize\"\n```\n\n\n### OFB - Output Feedback\n\n```javascript\n// An example 128-bit key\nvar key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\n// The initialization vector (must be 16 bytes)\nvar iv = [ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,35, 36 ];\n\n// Convert text to bytes\nvar text = 'Text may be any length you wish, no padding is required.';\nvar textBytes = aesjs.utils.utf8.toBytes(text);\n\nvar aesOfb = new aesjs.ModeOfOperation.ofb(key, iv);\nvar encryptedBytes = aesOfb.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"55e3af2655dd72b9f32456042f39bae9accff6259159e608be55a1aa313c598d\n//  b4b18406d89c83841c9d1af13b56de8eda8fcfe9ec8e75e8\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// The output feedback mode of operation maintains internal state,\n// so to decrypt a new instance must be instantiated.\nvar aesOfb = new aesjs.ModeOfOperation.ofb(key, iv);\nvar decryptedBytes = aesOfb.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"Text may be any length you wish, no padding is required.\"\n```\n\n\n### ECB - Electronic Codebook (NOT recommended)\n\nThis mode is **not** recommended. Since, for a given key, the same plaintext block in produces the same ciphertext block out, this mode of operation can leak data, such as patterns. For more details and examples, see the Wikipedia article, [Electronic Codebook](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_.28ECB.29).\n\n```javascript\n// An example 128-bit key\nvar key = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ];\n\n// Convert text to bytes\nvar text = 'TextMustBe16Byte';\nvar textBytes = aesjs.utils.utf8.toBytes(text);\n\nvar aesEcb = new aesjs.ModeOfOperation.ecb(key);\nvar encryptedBytes = aesEcb.encrypt(textBytes);\n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"a7d93b35368519fac347498dec18b458\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// Since electronic codebook does not store state, we can\n// reuse the same instance.\n//var aesEcb = new aesjs.ModeOfOperation.ecb(key);\nvar decryptedBytes = aesEcb.decrypt(encryptedBytes);\n\n// Convert our bytes back into text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"TextMustBe16Byte\"\n```\n\n\n\nBlock Cipher\n------------\n\nYou should usually use one of the above common modes of operation. Using the block cipher algorithm directly is also possible using **ECB** as that mode of operation is merely a thin wrapper.\n\nBut this might be useful to experiment with custom modes of operation or play with block cipher algorithms.\n\n```javascript\n\n// the AES block cipher algorithm works on 16 byte bloca ks, no more, no less\nvar text = \"ABlockIs16Bytes!\";\nvar textAsBytes = aesjs.utils.utf8.toBytes(text)\nconsole.log(textAsBytes);\n// [65, 66, 108, 111, 99, 107, 73, 115, 49, 54, 66, 121, 116, 101, 115, 33]\n\n// create an instance of the block cipher algorithm\nvar key = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3];\nvar aes = new aesjs.AES(key);\n\n// encrypt...\nvar encryptedBytes = aes.encrypt(textAsBytes);\nconsole.log(encryptedBytes);\n// [136, 15, 199, 174, 118, 133, 233, 177, 143, 47, 42, 211, 96, 55, 107, 109] \n\n// To print or store the binary data, you may convert it to hex\nvar encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\nconsole.log(encryptedHex);\n// \"880fc7ae7685e9b18f2f2ad360376b6d\"\n\n// When ready to decrypt the hex string, convert it back to bytes\nvar encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);\n\n// decrypt...\nvar decryptedBytes = aes.decrypt(encryptedBytes);\nconsole.log(decryptedBytes);\n// [65, 66, 108, 111, 99, 107, 73, 115, 49, 54, 66, 121, 116, 101, 115, 33]\n\n\n// decode the bytes back into our original text\nvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\nconsole.log(decryptedText);\n// \"ABlockIs16Bytes!\"\n```\n\n\nNotes\n=====\n\nWhat is a Key\n-------------\n\nThis seems to be a point of confusion for many people new to using encryption. You can think of the key as the *\"password\"*. However, these algorithms require the *\"password\"* to be a specific length.\n\nWith AES, there are three possible key lengths, 128-bit (16 bytes), 192-bit (24 bytes) or 256-bit (32 bytes). When you create an AES object, the key size is automatically detected, so it is important to pass in a key of the correct length.\n\nOften, you wish to provide a password of arbitrary length, for example, something easy to remember or write down. In these cases, you must come up with a way to transform the password into a key of a specific length. A **Password-Based Key Derivation Function** (PBKDF) is an algorithm designed for this exact purpose.\n\nHere is an example, using the popular (possibly obsolete?) pbkdf2:\n\n```javascript\nvar pbkdf2 = require('pbkdf2');\n\nvar key_128 = pbkdf2.pbkdf2Sync('password', 'salt', 1, 128 / 8, 'sha512');\nvar key_192 = pbkdf2.pbkdf2Sync('password', 'salt', 1, 192 / 8, 'sha512');\nvar key_256 = pbkdf2.pbkdf2Sync('password', 'salt', 1, 256 / 8, 'sha512');\n```\n\nAnother possibility, is to use a hashing function, such as SHA256 to hash the password, but this method is vulnerable to [Rainbow Attacks](http://en.wikipedia.org/wiki/Rainbow_table), unless you use a [salt](http://en.wikipedia.org/wiki/Salt_(cryptography)).\n\nPerformance\n-----------\n\nTodo...\n\nTests\n-----\n\nA test suite has been generated (`test/test-vectors.json`) from a known correct implementation, [pycrypto](https://www.dlitz.net/software/pycrypto/). To generate new test vectors, run `python generate-tests.py`.\n\nTo run the node.js test suite:\n\n```\nnpm test\n```\n\nTo run the web browser tests, open the `test/test.html` file in your browser.\n\nFAQ\n---\n\n#### How do I get a question I have added?\n\nE-mail me at aes-js@ricmoo.com with any questions, suggestions, comments, et cetera.\n\n\nDonations\n---------\n\nObviously, it's all licensed under the MIT license, so use it as you wish; but if you'd like to buy me a coffee, I won't complain. =)\n\n- Bitcoin - `1K1Ax9t6uJmjE4X5xcoVuyVTsiLrYRqe2P`\n- Ethereum - `0x70bDC274028F3f391E398dF8e3977De64FEcBf04`\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Richard Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/aes-js/-/aes-js-3.1.2.tgz#db9aabde85d5caabbfc0d4f2a4446960f627146a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/aes-js/-/aes-js-3.1.2.tgz",
    "hash": "db9aabde85d5caabbfc0d4f2a4446960f627146a",
    "integrity": "sha512-e5pEa2kBnBOgR4Y/p20pskXI74UEz7de8ZGVo58asOtvSVG5YAbJeELPZxOmt+Bnz3rX753YKhfIn4X4l1PPRQ==",
    "registry": "npm",
    "packageName": "aes-js",
    "cacheIntegrity": "sha512-e5pEa2kBnBOgR4Y/p20pskXI74UEz7de8ZGVo58asOtvSVG5YAbJeELPZxOmt+Bnz3rX753YKhfIn4X4l1PPRQ== sha1-25qr3oXVyqu/wNTypERpYPYnFGo="
  },
  "registry": "npm",
  "hash": "db9aabde85d5caabbfc0d4f2a4446960f627146a"
}