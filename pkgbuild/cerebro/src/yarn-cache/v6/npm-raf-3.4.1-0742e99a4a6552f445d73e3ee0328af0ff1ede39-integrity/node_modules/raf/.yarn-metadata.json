{
  "manifest": {
    "name": "raf",
    "version": "3.4.1",
    "description": "requestAnimationFrame polyfill for node and the browser",
    "main": "index.js",
    "scripts": {
      "testling": "browserify test.js | testling",
      "test": "node test.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/chrisdickinson/raf.git"
    },
    "keywords": [
      "requestAnimationFrame",
      "polyfill"
    ],
    "author": {
      "name": "Chris Dickinson",
      "email": "chris@neversaw.us"
    },
    "contributors": [
      {
        "name": "Christian Maughan Tegnér",
        "email": "christian.tegner@gmail.com"
      }
    ],
    "license": "MIT",
    "devDependencies": {
      "testling": "~1.6.1",
      "browserify": "~4.1.2",
      "tape": "^4.0.0"
    },
    "dependencies": {
      "performance-now": "^2.1.0"
    },
    "testling": {
      "files": "test.js",
      "browsers": [
        "iexplore/6.0..latest",
        "firefox/3.0..6.0",
        "firefox/15.0..latest",
        "firefox/nightly",
        "chrome/4.0..10.0",
        "chrome/20.0..latest",
        "chrome/canary",
        "opera/10.0..latest",
        "opera/next",
        "safari/4.0..latest",
        "ipad/6.0..latest",
        "iphone/6.0..latest"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-raf-3.4.1-0742e99a4a6552f445d73e3ee0328af0ff1ede39-integrity/node_modules/raf/package.json",
    "readmeFilename": "README.md",
    "readme": "# raf\n\n[![Browser Support](http://ci.testling.com/chrisdickinson/raf.png)](http://ci.testling.com/chrisdickinson/raf)\n\nrequestAnimationFrame polyfill for node and the browser.\n\n```js\nvar raf = require('raf')\n\nraf(function tick() {\n  // Animation logic\n  raf(tick)\n})\n```\n\n**Note:** The stream/event emitter logic found in versions prior to 1.0.0 can be found in [raf-stream](https://www.npmjs.org/package/raf-stream).\n\n## Getting started\n\n### CommonJS (Node, Browserify, Webpack, etc.)\n\nInstall `raf` from npm:\n\n```bash\nnpm install --save raf\n```\n\nRequire it like you would any other module:\n\n```js\nconst raf = require('raf')\n```\n\n### AMD (require.js, etc)\n\nDownload the UMD-bundle from [wzrd.in](https://wzrd.in/standalone/raf@latest) (remember to include the current version number in the filename).\n\nAdd it to your AMD module loader config and require it like you would any other module:\n\n```html\ndefine(['raf'], raf => {...})\n```\n\n### `<script>`\n\nDownload the UMD-bundle from [wzrd.in](https://wzrd.in/standalone/raf@latest) (remember to include the current version number in the filename).\n\nThen include it via a script tag:\n\n```html\n<script src=\"raf-x.x.x.js\"></script>\n```\n\nThe API will be available on `window.raf`.\n\n## API\n\n[Documentation at Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame), [W3 Specification](http://www.w3.org/TR/animation-timing/#requestAnimationFrame)\n\n### var handle = raf(callback)\n\n`callback` is the function to invoke in the next frame. `handle` is a long integer value that uniquely identifies the entry in the callback list. This is a non-zero value, but you may not make any other assumptions about its value.\n\n### raf.cancel(handle)\n\n`handle` is the entry identifier returned by `raf()`. Removes the queued animation frame callback (other queued callbacks will still be invoked unless cancelled).\n\n### raf.polyfill([object])\n\nShorthand to polyfill `window.requestAnimationFrame` and `window.cancelAnimationFrame` if necessary (Polyfills `global` in node).\n\nAlternatively you can require `raf/polyfill` which will act the same as `require('raf').polyfill()`.\n\nIf you provide `object` the polyfills are attached to that given object, instead of the inferred global.\nUseful if you have an instance of a fake `window` object, and want to add `raf` and `caf` to it.\n\n## Acknowledgments\n\nBased on work by Erik Möller, Paul Irish, and Tino Zijdel (https://gist.github.com/paulirish/1579671)\n\n## License\n\nMIT\n",
    "licenseText": "Copyright 2013 Chris Dickinson <chris@neversaw.us>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/raf/-/raf-3.4.1.tgz#0742e99a4a6552f445d73e3ee0328af0ff1ede39",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/raf/-/raf-3.4.1.tgz",
    "hash": "0742e99a4a6552f445d73e3ee0328af0ff1ede39",
    "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
    "registry": "npm",
    "packageName": "raf",
    "cacheIntegrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA== sha1-B0LpmkplUvRF1z4+4DKK8P8e3jk="
  },
  "registry": "npm",
  "hash": "0742e99a4a6552f445d73e3ee0328af0ff1ede39"
}