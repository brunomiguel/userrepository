{
  "manifest": {
    "name": "is-my-json-valid",
    "version": "2.20.6",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/mafintosh/is-my-json-valid.git"
    },
    "files": [
      "formats.js",
      "index.d.ts",
      "index.js",
      "require.js"
    ],
    "scripts": {
      "test": "tape test/*.js && tsc"
    },
    "dependencies": {
      "generate-function": "^2.0.0",
      "generate-object-property": "^1.1.0",
      "is-my-ip-valid": "^1.0.0",
      "jsonpointer": "^5.0.0",
      "xtend": "^4.0.0"
    },
    "devDependencies": {
      "safe-regex": "^1.1.0",
      "tape": "^2.13.4",
      "typescript": "^3.0.1"
    },
    "keywords": [
      "json",
      "schema",
      "orderly",
      "jsonschema"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-is-my-json-valid-2.20.6-a9d89e56a36493c77bda1440d69ae0dc46a08387-integrity/node_modules/is-my-json-valid/package.json",
    "readmeFilename": "README.md",
    "readme": "# is-my-json-valid\n\nA [JSONSchema](https://json-schema.org/) validator that uses code generation to be extremely fast.\n\nIt passes the entire JSONSchema v4 test suite except for `remoteRefs` and `maxLength`/`minLength` when using unicode surrogate pairs.\n\n[![build status](https://img.shields.io/travis/mafintosh/is-my-json-valid.svg?style=flat)](https://travis-ci.org/mafintosh/is-my-json-valid)\n\n## Installation\n\n```sh\nnpm install --save is-my-json-valid\n```\n\n## Usage\n\nSimply pass a schema to compile it\n\n```js\nvar validator = require('is-my-json-valid')\n\nvar validate = validator({\n  required: true,\n  type: 'object',\n  properties: {\n    hello: {\n      required: true,\n      type: 'string'\n    }\n  }\n})\n\nconsole.log('should be valid', validate({hello: 'world'}))\nconsole.log('should not be valid', validate({}))\n\n// get the last list of errors by checking validate.errors\n// the following will print [{field: 'data.hello', message: 'is required'}]\nconsole.log(validate.errors)\n```\n\nYou can also pass the schema as a string\n\n```js\nvar validate = validator('{\"type\": ... }')\n```\n\nOptionally you can use the require submodule to load a schema from `__dirname`\n\n```js\nvar validator = require('is-my-json-valid/require')\nvar validate = validator('my-schema.json')\n```\n\n## Custom formats\n\nis-my-json-valid supports the formats specified in JSON schema v4 (such as date-time).\nIf you want to add your own custom formats pass them as the formats options to the validator\n\n```js\nvar validate = validator({\n  type: 'string',\n  required: true,\n  format: 'only-a'\n}, {\n  formats: {\n    'only-a': /^a+$/\n  }\n})\n\nconsole.log(validate('aa')) // true\nconsole.log(validate('ab')) // false\n```\n\n## External schemas\n\nYou can pass in external schemas that you reference using the `$ref` attribute as the `schemas` option\n\n```js\nvar ext = {\n  required: true,\n  type: 'string'\n}\n\nvar schema = {\n  $ref: '#ext' // references another schema called ext\n}\n\n// pass the external schemas as an option\nvar validate = validator(schema, {schemas: {ext: ext}})\n\nvalidate('hello') // returns true\nvalidate(42) // return false\n```\n\n## Filtering away additional properties\n\nis-my-json-valid supports filtering away properties not in the schema\n\n```js\nvar filter = validator.filter({\n  required: true,\n  type: 'object',\n  properties: {\n    hello: {type: 'string', required: true}\n  },\n  additionalProperties: false\n})\n\nvar doc = {hello: 'world', notInSchema: true}\nconsole.log(filter(doc)) // {hello: 'world'}\n```\n\n## Verbose mode shows more information about the source of the error\n\nWhen the `verbose` options is set to `true`, `is-my-json-valid` also outputs:\n\n- `value`: The data value that caused the error\n- `schemaPath`: an array of keys indicating which sub-schema failed\n\n```js\nvar schema = {\n  required: true,\n  type: 'object',\n  properties: {\n    hello: {\n      required: true,\n      type: 'string'\n    }\n  }\n}\nvar validate = validator(schema, {\n  verbose: true\n})\n\nvalidate({hello: 100});\nconsole.log(validate.errors)\n// [ { field: 'data.hello',\n//     message: 'is the wrong type',\n//     value: 100,\n//     type: 'string',\n//     schemaPath: [ 'properties', 'hello' ] } ]\n```\n\nMany popular libraries make it easy to retrieve the failing rule with the `schemaPath`:\n\n```js\nvar schemaPath = validate.errors[0].schemaPath\nvar R = require('ramda')\n\nconsole.log( 'All evaluate to the same thing: ', R.equals(\n  schema.properties.hello,\n  { required: true, type: 'string' },\n  R.path(schemaPath, schema),\n  require('lodash').get(schema, schemaPath),\n  require('jsonpointer').get(schema, [\"\"].concat(schemaPath))\n))\n// All evaluate to the same thing: true\n```\n\n## Greedy mode tries to validate as much as possible\n\nBy default is-my-json-valid bails on first validation error but when greedy is\nset to true it tries to validate as much as possible:\n\n```js\nvar validate = validator({\n  type: 'object',\n  properties: {\n    x: {\n      type: 'number'\n    }\n  },\n  required: ['x', 'y']\n}, {\n  greedy: true\n});\n\nvalidate({x: 'string'});\nconsole.log(validate.errors) // [{field: 'data.y', message: 'is required'},\n                             //  {field: 'data.x', message: 'is the wrong type'}]\n```\n\n## Error messages\n\nHere is a list of possible `message` values for errors:\n\n- `is required`\n- `is the wrong type`\n- `has additional items`\n- `must be FORMAT format` (FORMAT is the `format` property from the schema)\n- `must be unique`\n- `must be an enum value`\n- `dependencies not set`\n- `has additional properties`\n- `referenced schema does not match`\n- `negative schema matches`\n- `pattern mismatch`\n- `no schemas match`\n- `no (or more than one) schemas match`\n- `has a remainder`\n- `has more properties than allowed`\n- `has less properties than allowed`\n- `has more items than allowed`\n- `has less items than allowed`\n- `has longer length than allowed`\n- `has less length than allowed`\n- `is less than minimum`\n- `is more than maximum`\n\n## Performance\n\nis-my-json-valid uses code generation to turn your JSON schema into basic javascript code that is easily optimizeable by v8.\n\nAt the time of writing, is-my-json-valid is the **fastest validator** when running\n\n- [json-schema-benchmark](https://github.com/Muscula/json-schema-benchmark)\n- [cosmicreals.com benchmark](http://cosmicrealms.com/blog/2014/08/29/benchmark-of-node-dot-js-json-validation-modules-part-3/)\n- [jsck benchmark](https://github.com/pandastrike/jsck/issues/72#issuecomment-70992684)\n- [themis benchmark](https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html)\n- [z-schema benchmark](https://rawgit.com/zaggino/z-schema/master/benchmark/results.html)\n\nIf you know any other relevant benchmarks open a PR and I'll add them.\n\n## TypeScript support\n\nThis library ships with TypeScript typings. They are still early on and not perfect at the moment, but should hopefully handle the most common cases. If you find anything that doesn't work, please open an issue and we'll try to solve it.\n\nThe typings are using `unknown` and thus require TypeScript 3.0 or later.\n\nHere is a quick sample of usage together with express:\n\n```typescript\nimport createError = require('http-errors')\nimport createValidator = require('is-my-json-valid')\nimport { Request, Response, NextFunction } from 'express'\n\nconst personValidator = createValidator({\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number' },\n  },\n  required: [\n    'name'\n  ]\n})\n\nexport function post (req: Request, res: Response, next: NextFunction) {\n  // Here req.body is typed as: any\n\n  if (!personValidator(req.body)) {\n    throw createError(400, { errors: personValidator.errors })\n  }\n\n  // Here req.body is typed as: { name: string, age: number | undefined }\n}\n```\n\nAs you can see, the typings for is-my-json-valid will contruct an interface from the schema passed in. This allows you to work with your incoming json body in a type safe way.\n\n## License\n\nMIT\n",
    "description": "A [JSONSchema](https://json-schema.org/) validator that uses code generation to be extremely fast.",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Mathias Buus\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/is-my-json-valid/-/is-my-json-valid-2.20.6.tgz#a9d89e56a36493c77bda1440d69ae0dc46a08387",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/is-my-json-valid/-/is-my-json-valid-2.20.6.tgz",
    "hash": "a9d89e56a36493c77bda1440d69ae0dc46a08387",
    "integrity": "sha512-1JQwulVNjx8UqkPE/bqDaxtH4PXCe/2VRh/y3p99heOV87HG4Id5/VfDswd+YiAfHcRTfDlWgISycnHuhZq1aw==",
    "registry": "npm",
    "packageName": "is-my-json-valid",
    "cacheIntegrity": "sha512-1JQwulVNjx8UqkPE/bqDaxtH4PXCe/2VRh/y3p99heOV87HG4Id5/VfDswd+YiAfHcRTfDlWgISycnHuhZq1aw== sha1-qdieVqNkk8d72hRA1prg3Eagg4c="
  },
  "registry": "npm",
  "hash": "a9d89e56a36493c77bda1440d69ae0dc46a08387"
}