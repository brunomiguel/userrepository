// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/proto/canvaz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spotify.canvaz.cache.Artist)
pub struct Artist {
    // message fields
    // @@protoc_insertion_point(field:spotify.canvaz.cache.Artist.uri)
    pub uri: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.canvaz.cache.Artist.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:spotify.canvaz.cache.Artist.avatar)
    pub avatar: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.canvaz.cache.Artist.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Artist {
    fn default() -> &'a Artist {
        <Artist as ::protobuf::Message>::default_instance()
    }
}

impl Artist {
    pub fn new() -> Artist {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uri",
            |m: &Artist| { &m.uri },
            |m: &mut Artist| { &mut m.uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Artist| { &m.name },
            |m: &mut Artist| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "avatar",
            |m: &Artist| { &m.avatar },
            |m: &mut Artist| { &mut m.avatar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Artist>(
            "Artist",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Artist {
    const NAME: &'static str = "Artist";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uri = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.avatar = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.avatar);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.avatar.is_empty() {
            os.write_string(3, &self.avatar)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Artist {
        Artist::new()
    }

    fn clear(&mut self) {
        self.uri.clear();
        self.name.clear();
        self.avatar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Artist {
        static instance: Artist = Artist {
            uri: ::std::string::String::new(),
            name: ::std::string::String::new(),
            avatar: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Artist {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Artist").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Artist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Artist {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spotify.canvaz.cache.EntityCanvazResponse)
pub struct EntityCanvazResponse {
    // message fields
    // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.canvases)
    pub canvases: ::std::vec::Vec<entity_canvaz_response::Canvaz>,
    // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.ttl_in_seconds)
    pub ttl_in_seconds: i64,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.canvaz.cache.EntityCanvazResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityCanvazResponse {
    fn default() -> &'a EntityCanvazResponse {
        <EntityCanvazResponse as ::protobuf::Message>::default_instance()
    }
}

impl EntityCanvazResponse {
    pub fn new() -> EntityCanvazResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "canvases",
            |m: &EntityCanvazResponse| { &m.canvases },
            |m: &mut EntityCanvazResponse| { &mut m.canvases },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ttl_in_seconds",
            |m: &EntityCanvazResponse| { &m.ttl_in_seconds },
            |m: &mut EntityCanvazResponse| { &mut m.ttl_in_seconds },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityCanvazResponse>(
            "EntityCanvazResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityCanvazResponse {
    const NAME: &'static str = "EntityCanvazResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.canvases.push(is.read_message()?);
                },
                16 => {
                    self.ttl_in_seconds = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.canvases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.ttl_in_seconds != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.ttl_in_seconds);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.canvases {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.ttl_in_seconds != 0 {
            os.write_int64(2, self.ttl_in_seconds)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityCanvazResponse {
        EntityCanvazResponse::new()
    }

    fn clear(&mut self) {
        self.canvases.clear();
        self.ttl_in_seconds = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityCanvazResponse {
        static instance: EntityCanvazResponse = EntityCanvazResponse {
            canvases: ::std::vec::Vec::new(),
            ttl_in_seconds: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityCanvazResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityCanvazResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityCanvazResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityCanvazResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityCanvazResponse`
pub mod entity_canvaz_response {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:spotify.canvaz.cache.EntityCanvazResponse.Canvaz)
    pub struct Canvaz {
        // message fields
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.id)
        pub id: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.url)
        pub url: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.file_id)
        pub file_id: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.type)
        pub type_: ::protobuf::EnumOrUnknown<super::Type>,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.entity_uri)
        pub entity_uri: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.artist)
        pub artist: ::protobuf::MessageField<super::Artist>,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.explicit)
        pub explicit: bool,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.uploaded_by)
        pub uploaded_by: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.etag)
        pub etag: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.canvas_uri)
        pub canvas_uri: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.storylines_id)
        pub storylines_id: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:spotify.canvaz.cache.EntityCanvazResponse.Canvaz.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Canvaz {
        fn default() -> &'a Canvaz {
            <Canvaz as ::protobuf::Message>::default_instance()
        }
    }

    impl Canvaz {
        pub fn new() -> Canvaz {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(11);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Canvaz| { &m.id },
                |m: &mut Canvaz| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "url",
                |m: &Canvaz| { &m.url },
                |m: &mut Canvaz| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "file_id",
                |m: &Canvaz| { &m.file_id },
                |m: &mut Canvaz| { &mut m.file_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &Canvaz| { &m.type_ },
                |m: &mut Canvaz| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "entity_uri",
                |m: &Canvaz| { &m.entity_uri },
                |m: &mut Canvaz| { &mut m.entity_uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Artist>(
                "artist",
                |m: &Canvaz| { &m.artist },
                |m: &mut Canvaz| { &mut m.artist },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "explicit",
                |m: &Canvaz| { &m.explicit },
                |m: &mut Canvaz| { &mut m.explicit },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uploaded_by",
                |m: &Canvaz| { &m.uploaded_by },
                |m: &mut Canvaz| { &mut m.uploaded_by },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "etag",
                |m: &Canvaz| { &m.etag },
                |m: &mut Canvaz| { &mut m.etag },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "canvas_uri",
                |m: &Canvaz| { &m.canvas_uri },
                |m: &mut Canvaz| { &mut m.canvas_uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "storylines_id",
                |m: &Canvaz| { &m.storylines_id },
                |m: &mut Canvaz| { &mut m.storylines_id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Canvaz>(
                "EntityCanvazResponse.Canvaz",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Canvaz {
        const NAME: &'static str = "Canvaz";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = is.read_string()?;
                    },
                    18 => {
                        self.url = is.read_string()?;
                    },
                    26 => {
                        self.file_id = is.read_string()?;
                    },
                    32 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    42 => {
                        self.entity_uri = is.read_string()?;
                    },
                    50 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.artist)?;
                    },
                    56 => {
                        self.explicit = is.read_bool()?;
                    },
                    66 => {
                        self.uploaded_by = is.read_string()?;
                    },
                    74 => {
                        self.etag = is.read_string()?;
                    },
                    90 => {
                        self.canvas_uri = is.read_string()?;
                    },
                    98 => {
                        self.storylines_id = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.id);
            }
            if !self.url.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.url);
            }
            if !self.file_id.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.file_id);
            }
            if self.type_ != ::protobuf::EnumOrUnknown::new(super::Type::IMAGE) {
                my_size += ::protobuf::rt::int32_size(4, self.type_.value());
            }
            if !self.entity_uri.is_empty() {
                my_size += ::protobuf::rt::string_size(5, &self.entity_uri);
            }
            if let Some(v) = self.artist.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.explicit != false {
                my_size += 1 + 1;
            }
            if !self.uploaded_by.is_empty() {
                my_size += ::protobuf::rt::string_size(8, &self.uploaded_by);
            }
            if !self.etag.is_empty() {
                my_size += ::protobuf::rt::string_size(9, &self.etag);
            }
            if !self.canvas_uri.is_empty() {
                my_size += ::protobuf::rt::string_size(11, &self.canvas_uri);
            }
            if !self.storylines_id.is_empty() {
                my_size += ::protobuf::rt::string_size(12, &self.storylines_id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.id.is_empty() {
                os.write_string(1, &self.id)?;
            }
            if !self.url.is_empty() {
                os.write_string(2, &self.url)?;
            }
            if !self.file_id.is_empty() {
                os.write_string(3, &self.file_id)?;
            }
            if self.type_ != ::protobuf::EnumOrUnknown::new(super::Type::IMAGE) {
                os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            if !self.entity_uri.is_empty() {
                os.write_string(5, &self.entity_uri)?;
            }
            if let Some(v) = self.artist.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            }
            if self.explicit != false {
                os.write_bool(7, self.explicit)?;
            }
            if !self.uploaded_by.is_empty() {
                os.write_string(8, &self.uploaded_by)?;
            }
            if !self.etag.is_empty() {
                os.write_string(9, &self.etag)?;
            }
            if !self.canvas_uri.is_empty() {
                os.write_string(11, &self.canvas_uri)?;
            }
            if !self.storylines_id.is_empty() {
                os.write_string(12, &self.storylines_id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Canvaz {
            Canvaz::new()
        }

        fn clear(&mut self) {
            self.id.clear();
            self.url.clear();
            self.file_id.clear();
            self.type_ = ::protobuf::EnumOrUnknown::new(super::Type::IMAGE);
            self.entity_uri.clear();
            self.artist.clear();
            self.explicit = false;
            self.uploaded_by.clear();
            self.etag.clear();
            self.canvas_uri.clear();
            self.storylines_id.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Canvaz {
            static instance: Canvaz = Canvaz {
                id: ::std::string::String::new(),
                url: ::std::string::String::new(),
                file_id: ::std::string::String::new(),
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                entity_uri: ::std::string::String::new(),
                artist: ::protobuf::MessageField::none(),
                explicit: false,
                uploaded_by: ::std::string::String::new(),
                etag: ::std::string::String::new(),
                canvas_uri: ::std::string::String::new(),
                storylines_id: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Canvaz {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EntityCanvazResponse.Canvaz").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Canvaz {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Canvaz {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spotify.canvaz.cache.EntityCanvazRequest)
pub struct EntityCanvazRequest {
    // message fields
    // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazRequest.entities)
    pub entities: ::std::vec::Vec<entity_canvaz_request::Entity>,
    // special fields
    // @@protoc_insertion_point(special_field:spotify.canvaz.cache.EntityCanvazRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityCanvazRequest {
    fn default() -> &'a EntityCanvazRequest {
        <EntityCanvazRequest as ::protobuf::Message>::default_instance()
    }
}

impl EntityCanvazRequest {
    pub fn new() -> EntityCanvazRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &EntityCanvazRequest| { &m.entities },
            |m: &mut EntityCanvazRequest| { &mut m.entities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityCanvazRequest>(
            "EntityCanvazRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityCanvazRequest {
    const NAME: &'static str = "EntityCanvazRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entities.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityCanvazRequest {
        EntityCanvazRequest::new()
    }

    fn clear(&mut self) {
        self.entities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityCanvazRequest {
        static instance: EntityCanvazRequest = EntityCanvazRequest {
            entities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityCanvazRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityCanvazRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityCanvazRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityCanvazRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityCanvazRequest`
pub mod entity_canvaz_request {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:spotify.canvaz.cache.EntityCanvazRequest.Entity)
    pub struct Entity {
        // message fields
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazRequest.Entity.entity_uri)
        pub entity_uri: ::std::string::String,
        // @@protoc_insertion_point(field:spotify.canvaz.cache.EntityCanvazRequest.Entity.etag)
        pub etag: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:spotify.canvaz.cache.EntityCanvazRequest.Entity.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entity {
        fn default() -> &'a Entity {
            <Entity as ::protobuf::Message>::default_instance()
        }
    }

    impl Entity {
        pub fn new() -> Entity {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "entity_uri",
                |m: &Entity| { &m.entity_uri },
                |m: &mut Entity| { &mut m.entity_uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "etag",
                |m: &Entity| { &m.etag },
                |m: &mut Entity| { &mut m.etag },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entity>(
                "EntityCanvazRequest.Entity",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Entity {
        const NAME: &'static str = "Entity";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.entity_uri = is.read_string()?;
                    },
                    18 => {
                        self.etag = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.entity_uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.entity_uri);
            }
            if !self.etag.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.etag);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.entity_uri.is_empty() {
                os.write_string(1, &self.entity_uri)?;
            }
            if !self.etag.is_empty() {
                os.write_string(2, &self.etag)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entity {
            Entity::new()
        }

        fn clear(&mut self) {
            self.entity_uri.clear();
            self.etag.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entity {
            static instance: Entity = Entity {
                entity_uri: ::std::string::String::new(),
                etag: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Entity {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EntityCanvazRequest.Entity").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Entity {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Entity {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spotify.canvaz.cache.Type)
pub enum Type {
    // @@protoc_insertion_point(enum_value:spotify.canvaz.cache.Type.IMAGE)
    IMAGE = 0,
    // @@protoc_insertion_point(enum_value:spotify.canvaz.cache.Type.VIDEO)
    VIDEO = 1,
    // @@protoc_insertion_point(enum_value:spotify.canvaz.cache.Type.VIDEO_LOOPING)
    VIDEO_LOOPING = 2,
    // @@protoc_insertion_point(enum_value:spotify.canvaz.cache.Type.VIDEO_LOOPING_RANDOM)
    VIDEO_LOOPING_RANDOM = 3,
    // @@protoc_insertion_point(enum_value:spotify.canvaz.cache.Type.GIF)
    GIF = 4,
}

impl ::protobuf::Enum for Type {
    const NAME: &'static str = "Type";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type> {
        match value {
            0 => ::std::option::Option::Some(Type::IMAGE),
            1 => ::std::option::Option::Some(Type::VIDEO),
            2 => ::std::option::Option::Some(Type::VIDEO_LOOPING),
            3 => ::std::option::Option::Some(Type::VIDEO_LOOPING_RANDOM),
            4 => ::std::option::Option::Some(Type::GIF),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Type] = &[
        Type::IMAGE,
        Type::VIDEO,
        Type::VIDEO_LOOPING,
        Type::VIDEO_LOOPING_RANDOM,
        Type::GIF,
    ];
}

impl ::protobuf::EnumFull for Type {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Type").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Type {
    fn default() -> Self {
        Type::IMAGE
    }
}

impl Type {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Type")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16src/proto/canvaz.proto\x12\x14spotify.canvaz.cache\"F\n\x06Artist\
    \x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03uri\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12\x16\n\x06avatar\x18\x03\x20\x01(\tR\x06avatar\"\
    \xeb\x03\n\x14EntityCanvazResponse\x12M\n\x08canvases\x18\x01\x20\x03(\
    \x0b21.spotify.canvaz.cache.EntityCanvazResponse.CanvazR\x08canvases\x12\
    $\n\x0ettl_in_seconds\x18\x02\x20\x01(\x03R\x0cttlInSeconds\x1a\xdd\x02\
    \n\x06Canvaz\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x10\n\x03url\
    \x18\x02\x20\x01(\tR\x03url\x12\x17\n\x07file_id\x18\x03\x20\x01(\tR\x06\
    fileId\x12.\n\x04type\x18\x04\x20\x01(\x0e2\x1a.spotify.canvaz.cache.Typ\
    eR\x04type\x12\x1d\n\nentity_uri\x18\x05\x20\x01(\tR\tentityUri\x124\n\
    \x06artist\x18\x06\x20\x01(\x0b2\x1c.spotify.canvaz.cache.ArtistR\x06art\
    ist\x12\x1a\n\x08explicit\x18\x07\x20\x01(\x08R\x08explicit\x12\x1f\n\
    \x0buploaded_by\x18\x08\x20\x01(\tR\nuploadedBy\x12\x12\n\x04etag\x18\t\
    \x20\x01(\tR\x04etag\x12\x1d\n\ncanvas_uri\x18\x0b\x20\x01(\tR\tcanvasUr\
    i\x12#\n\rstorylines_id\x18\x0c\x20\x01(\tR\x0cstorylinesId\"\xa0\x01\n\
    \x13EntityCanvazRequest\x12L\n\x08entities\x18\x01\x20\x03(\x0b20.spotif\
    y.canvaz.cache.EntityCanvazRequest.EntityR\x08entities\x1a;\n\x06Entity\
    \x12\x1d\n\nentity_uri\x18\x01\x20\x01(\tR\tentityUri\x12\x12\n\x04etag\
    \x18\x02\x20\x01(\tR\x04etag*R\n\x04Type\x12\t\n\x05IMAGE\x10\0\x12\t\n\
    \x05VIDEO\x10\x01\x12\x11\n\rVIDEO_LOOPING\x10\x02\x12\x18\n\x14VIDEO_LO\
    OPING_RANDOM\x10\x03\x12\x07\n\x03GIF\x10\x04B#\n\x1dcom.spotify.canvazc\
    ache.protoP\x01H\x02J\x87\r\n\x06\x12\x04\x02\02\x01\n6\n\x01\x0c\x12\
    \x03\x02\0\x122,\x20Extracted\x20from:\x20Spotify\x201.1.73.517\x20(macO\
    S)\n\n\x08\n\x01\x02\x12\x03\x04\0\x1d\n\x08\n\x01\x08\x12\x03\x06\0\"\n\
    \t\n\x02\x08\n\x12\x03\x06\0\"\n\x08\n\x01\x08\x12\x03\x07\0\x20\n\t\n\
    \x02\x08\t\x12\x03\x07\0\x20\n\x08\n\x01\x08\x12\x03\x08\06\n\t\n\x02\
    \x08\x01\x12\x03\x08\06\n\n\n\x02\x05\0\x12\x04\n\0\x10\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\n\x05\t\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0b\x02\x0c\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0b\x02\x07\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x0b\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0c\x02\x0c\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0c\x02\x07\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x0c\n\x0b\n\x0b\n\x04\x05\0\x02\x02\x12\x03\r\x02\x14\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\r\x02\x0f\n\x0c\n\x05\x05\0\x02\x02\
    \x02\x12\x03\r\x12\x13\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0e\x02\x1b\n\
    \x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0e\x02\x16\n\x0c\n\x05\x05\0\x02\
    \x03\x02\x12\x03\x0e\x19\x1a\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x0f\x02\n\
    \n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0f\x02\x05\n\x0c\n\x05\x05\0\x02\
    \x04\x02\x12\x03\x0f\x08\t\n\n\n\x02\x04\0\x12\x04\x12\0\x16\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x12\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x13\
    \x02\x11\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x13\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x13\
    \x0f\x10\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x14\x02\x12\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x14\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x10\x11\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x15\x02\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\
    \x15\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x15\t\x0f\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x15\x12\x13\n\n\n\x02\x04\x01\x12\x04\x19\0*\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x1c\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x1a\x02\x1f\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1a\x02\n\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1a\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x1a\x12\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x1d\
    \x1e\n\x0c\n\x04\x04\x01\x03\0\x12\x04\x1b\x02'\x03\n\x0c\n\x05\x04\x01\
    \x03\0\x01\x12\x03\x1b\n\x10\n\r\n\x06\x04\x01\x03\0\x02\0\x12\x03\x1c\
    \x04\x12\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03\x1c\x04\n\n\x0e\n\
    \x07\x04\x01\x03\0\x02\0\x01\x12\x03\x1c\x0b\r\n\x0e\n\x07\x04\x01\x03\0\
    \x02\0\x03\x12\x03\x1c\x10\x11\n\r\n\x06\x04\x01\x03\0\x02\x01\x12\x03\
    \x1d\x04\x13\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x05\x12\x03\x1d\x04\n\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03\x1d\x0b\x0e\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x01\x03\x12\x03\x1d\x11\x12\n\r\n\x06\x04\x01\x03\0\x02\
    \x02\x12\x03\x1e\x04\x17\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x05\x12\x03\
    \x1e\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x01\x12\x03\x1e\x0b\x12\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x02\x03\x12\x03\x1e\x15\x16\n\r\n\x06\x04\
    \x01\x03\0\x02\x03\x12\x03\x1f\x04\x12\n\x0e\n\x07\x04\x01\x03\0\x02\x03\
    \x06\x12\x03\x1f\x04\x08\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x01\x12\x03\
    \x1f\t\r\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x03\x12\x03\x1f\x10\x11\n\r\n\
    \x06\x04\x01\x03\0\x02\x04\x12\x03\x20\x04\x1a\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x04\x05\x12\x03\x20\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x01\x12\
    \x03\x20\x0b\x15\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x03\x20\x18\
    \x19\n\r\n\x06\x04\x01\x03\0\x02\x05\x12\x03!\x04\x16\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x05\x06\x12\x03!\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\x05\
    \x01\x12\x03!\x0b\x11\n\x0e\n\x07\x04\x01\x03\0\x02\x05\x03\x12\x03!\x14\
    \x15\n\r\n\x06\x04\x01\x03\0\x02\x06\x12\x03\"\x04\x16\n\x0e\n\x07\x04\
    \x01\x03\0\x02\x06\x05\x12\x03\"\x04\x08\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x06\x01\x12\x03\"\t\x11\n\x0e\n\x07\x04\x01\x03\0\x02\x06\x03\x12\x03\"\
    \x14\x15\n\r\n\x06\x04\x01\x03\0\x02\x07\x12\x03#\x04\x1b\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x07\x05\x12\x03#\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x07\x01\x12\x03#\x0b\x16\n\x0e\n\x07\x04\x01\x03\0\x02\x07\x03\x12\x03#\
    \x19\x1a\n\r\n\x06\x04\x01\x03\0\x02\x08\x12\x03$\x04\x14\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x08\x05\x12\x03$\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x08\x01\x12\x03$\x0b\x0f\n\x0e\n\x07\x04\x01\x03\0\x02\x08\x03\x12\x03$\
    \x12\x13\n\r\n\x06\x04\x01\x03\0\x02\t\x12\x03%\x04\x1b\n\x0e\n\x07\x04\
    \x01\x03\0\x02\t\x05\x12\x03%\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\t\x01\
    \x12\x03%\x0b\x15\n\x0e\n\x07\x04\x01\x03\0\x02\t\x03\x12\x03%\x18\x1a\n\
    \r\n\x06\x04\x01\x03\0\x02\n\x12\x03&\x04\x1e\n\x0e\n\x07\x04\x01\x03\0\
    \x02\n\x05\x12\x03&\x04\n\n\x0e\n\x07\x04\x01\x03\0\x02\n\x01\x12\x03&\
    \x0b\x18\n\x0e\n\x07\x04\x01\x03\0\x02\n\x03\x12\x03&\x1b\x1d\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03)\x02\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03)\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03)\x08\x16\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03)\x19\x1a\n\n\n\x02\x04\x02\x12\x04,\0\
    2\x01\n\n\n\x03\x04\x02\x01\x12\x03,\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03-\x02\x1f\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03-\x02\n\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03-\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03-\x12\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03-\x1d\x1e\n\x0c\n\
    \x04\x04\x02\x03\0\x12\x04.\x021\x03\n\x0c\n\x05\x04\x02\x03\0\x01\x12\
    \x03.\n\x10\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03/\x04\x1a\n\x0e\n\x07\
    \x04\x02\x03\0\x02\0\x05\x12\x03/\x04\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\
    \x01\x12\x03/\x0b\x15\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03/\x18\
    \x19\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x030\x04\x14\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x05\x12\x030\x04\n\n\x0e\n\x07\x04\x02\x03\0\x02\x01\
    \x01\x12\x030\x0b\x0f\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x030\x12\
    \x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Artist::generated_message_descriptor_data());
            messages.push(EntityCanvazResponse::generated_message_descriptor_data());
            messages.push(EntityCanvazRequest::generated_message_descriptor_data());
            messages.push(entity_canvaz_response::Canvaz::generated_message_descriptor_data());
            messages.push(entity_canvaz_request::Entity::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
