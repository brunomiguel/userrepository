{
  "manifest": {
    "name": "hls.js",
    "license": "Apache-2.0",
    "description": "JavaScript HLS client using MediaSourceExtension",
    "homepage": "https://github.com/video-dev/hls.js",
    "authors": "Guillaume du Pontavice <g.du.pontavice@gmail.com>",
    "repository": {
      "type": "git",
      "url": "https://github.com/video-dev/hls.js"
    },
    "bugs": {
      "url": "https://github.com/video-dev/hls.js/issues"
    },
    "main": "./dist/hls.js",
    "types": "./dist/hls.js.d.ts",
    "files": [
      "dist/**/*",
      "src/**/*"
    ],
    "publishConfig": {
      "access": "public"
    },
    "scripts": {
      "build": "webpack --progress && npm run build:types",
      "build:ci": "webpack && tsc --build tsconfig-lib.json && api-extractor run",
      "build:debug": "webpack --progress --env debug --env demo",
      "build:watch": "webpack --progress --env debug --env demo --watch",
      "build:types": "tsc --build tsconfig-lib.json && api-extractor run --local",
      "dev": "webpack serve --progress --env debug --env demo --port 8000 --static .",
      "docs": "esdoc",
      "lint": "eslint src/ tests/ --ext .js --ext .ts",
      "lint:fix": "npm run lint -- --fix",
      "lint:quiet": "npm run lint -- --quiet",
      "lint:staged": "lint-staged",
      "prettier": "prettier --write .",
      "prettier:verify": "prettier --check .",
      "pretest": "npm run lint",
      "sanity-check": "npm run lint && npm run prettier:verify && npm run type-check && npm run docs && npm run build:types && npm run build && npm run test:unit",
      "start": "npm run dev",
      "test": "npm run test:unit && npm run test:func",
      "test:unit": "karma start karma.conf.js",
      "test:unit:debug": "DEBUG_UNIT_TESTS=1 karma start karma.conf.js --auto-watch --no-single-run --browsers Chrome",
      "test:unit:watch": "karma start karma.conf.js --auto-watch --no-single-run",
      "test:func": "BABEL_ENV=development mocha --require @babel/register tests/functional/auto/setup.js --timeout 40000 --exit",
      "test:func:light": "BABEL_ENV=development HLSJS_LIGHT=1 mocha --require @babel/register tests/functional/auto/setup.js --timeout 40000 --exit",
      "test:func:sauce": "SAUCE=1 UA=safari OS='OS X 10.15' BABEL_ENV=development mocha --require @babel/register tests/functional/auto/setup.js --timeout 40000 --exit",
      "type-check": "tsc --noEmit",
      "type-check:watch": "npm run type-check -- --watch",
      "prepare": "husky install"
    },
    "devDependencies": {
      "@babel/core": "7.19.6",
      "@babel/helper-module-imports": "7.18.6",
      "@babel/plugin-proposal-class-properties": "7.18.6",
      "@babel/plugin-proposal-object-rest-spread": "7.19.4",
      "@babel/plugin-proposal-optional-chaining": "7.18.9",
      "@babel/plugin-transform-object-assign": "7.18.6",
      "@babel/preset-env": "7.19.4",
      "@babel/preset-typescript": "7.18.6",
      "@babel/register": "7.18.9",
      "@itsjamie/esdoc-cli": "0.5.0",
      "@itsjamie/esdoc-core": "0.5.0",
      "@itsjamie/esdoc-ecmascript-proposal-plugin": "0.5.0",
      "@itsjamie/esdoc-standard-plugin": "0.5.0",
      "@itsjamie/esdoc-typescript-plugin": "0.5.0",
      "@microsoft/api-extractor": "7.33.5",
      "@types/chai": "4.3.3",
      "@types/chart.js": "2.9.37",
      "@types/mocha": "10.0.0",
      "@types/sinon-chai": "3.2.8",
      "@typescript-eslint/eslint-plugin": "5.42.0",
      "@typescript-eslint/parser": "5.42.0",
      "babel-loader": "8.2.5",
      "babel-plugin-transform-remove-console": "6.9.4",
      "chai": "4.3.6",
      "chart.js": "2.9.4",
      "chromedriver": "107.0.3",
      "coverage-istanbul-loader": "3.0.5",
      "eslint": "8.26.0",
      "eslint-config-prettier": "8.5.0",
      "eslint-plugin-import": "2.26.0",
      "eslint-plugin-mocha": "10.1.0",
      "eslint-plugin-node": "11.1.0",
      "eslint-plugin-promise": "6.1.1",
      "eventemitter3": "4.0.7",
      "http-server": "14.1.1",
      "husky": "8.0.1",
      "jsonpack": "1.1.5",
      "karma": "6.4.1",
      "karma-chrome-launcher": "3.1.1",
      "karma-coverage-istanbul-reporter": "3.0.3",
      "karma-mocha": "2.0.1",
      "karma-mocha-reporter": "2.2.5",
      "karma-sinon-chai": "2.0.2",
      "karma-sourcemap-loader": "0.3.8",
      "karma-webpack": "5.0.0",
      "lint-staged": "13.0.3",
      "micromatch": "4.0.5",
      "mocha": "10.1.0",
      "netlify-cli": "12.1.0",
      "node-fetch": "3.2.10",
      "prettier": "2.7.1",
      "promise-polyfill": "8.2.3",
      "sauce-connect-launcher": "1.3.2",
      "selenium-webdriver": "4.4.0",
      "semver": "7.3.7",
      "sinon": "14.0.0",
      "sinon-chai": "3.7.0",
      "typescript": "4.8.3",
      "url-toolkit": "2.2.5",
      "webpack": "5.75.0",
      "webpack-cli": "4.10.0",
      "webpack-dev-server": "4.11.1",
      "webpack-merge": "5.8.0"
    },
    "version": "1.2.9",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-hls-js-1.2.9-2f25e42ec4c2ea8c88ab23c0f854f39062d45ac9-integrity/node_modules/hls.js/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm](https://img.shields.io/npm/v/hls.js.svg?style=flat)](https://npmjs.org/package/hls.js)\n[![npm](https://img.shields.io/npm/v/hls.js/canary.svg?style=flat)](https://www.npmjs.com/package/hls.js/v/canary)\n[![](https://data.jsdelivr.com/v1/package/npm/hls.js/badge?style=rounded)](https://www.jsdelivr.com/package/npm/hls.js)\n[![Sauce Test Status](https://saucelabs.com/buildstatus/robwalch)](https://app.saucelabs.com/u/robwalch)\n\n[comment]: <> ([![Sauce Test Status]&#40;https://saucelabs.com/browser-matrix/robwalch.svg&#41;]&#40;https://saucelabs.com/u/robwalch&#41;)\n\n# ![HLS.js](./docs/logo.svg)\n\nHLS.js is a JavaScript library that implements an [HTTP Live Streaming] client.\nIt relies on [HTML5 video][] and [MediaSource Extensions][] for playback.\n\nIt works by transmuxing MPEG-2 Transport Stream and AAC/MP3 streams into ISO BMFF (MP4) fragments.\nTransmuxing is performed asynchronously using a [Web Worker] when available in the browser.\nHLS.js also supports HLS + fmp4, as announced during [WWDC2016](https://developer.apple.com/videos/play/wwdc2016/504/).\n\nHLS.js works directly on top of a standard HTML`<video>` element.\n\nHLS.js is written in [ECMAScript6] (`*.js`) and [TypeScript] (`*.ts`) (strongly typed superset of ES6), and transpiled in ECMAScript5 using [Babel](https://babeljs.io/) and the [TypeScript compiler].\n\n[Webpack] is used to build the distro bundle and serve the local development environment.\n\n[html5 video]: https://www.html5rocks.com/en/tutorials/video/basics/\n[mediasource extensions]: https://w3c.github.io/media-source/\n[http live streaming]: https://en.wikipedia.org/wiki/HTTP_Live_Streaming\n[web worker]: https://caniuse.com/#search=worker\n[ecmascript6]: https://github.com/ericdouglas/ES6-Learning#articles--tutorials\n[typescript]: https://www.typescriptlang.org/\n[typescript compiler]: https://www.typescriptlang.org/docs/handbook/compiler-options.html\n[webpack]: https://webpack.js.org/\n\n## Features\n\n- VOD & Live playlists\n  - DVR support on Live playlists\n- Fragmented MP4 container\n- MPEG-2 TS container\n  - ITU-T Rec. H.264 and ISO/IEC 14496-10 Elementary Stream\n  - ISO/IEC 13818-7 ADTS AAC Elementary Stream\n  - ISO/IEC 11172-3 / ISO/IEC 13818-3 (MPEG-1/2 Audio Layer III) Elementary Stream\n  - Packetized metadata (ID3v2.3.0) Elementary Stream\n- AAC container (audio only streams)\n- MPEG Audio container (MPEG-1/2 Audio Layer III audio only streams)\n- Timed Metadata for HTTP Live Streaming (ID3 format carried in MPEG-2 TS, Emsg in CMAF/Fragmented MP4, and DATERANGE playlist tags)\n- AES-128 decryption\n- SAMPLE-AES decryption (only supported if using MPEG-2 TS container)\n- Encrypted media extensions (EME) support for DRM (digital rights management)\n  - Widevine CDM (only tested with [shaka-packager](https://github.com/google/shaka-packager) test-stream on [the demo page](https://hls-js.netlify.app/demo/?src=https%3A%2F%2Fstorage.googleapis.com%2Fshaka-demo-assets%2Fangel-one-widevine-hls%2Fhls.m3u8&demoConfig=eyJlbmFibGVTdHJlYW1pbmciOnRydWUsImF1dG9SZWNvdmVyRXJyb3IiOnRydWUsInN0b3BPblN0YWxsIjpmYWxzZSwiZHVtcGZNUDQiOmZhbHNlLCJsZXZlbENhcHBpbmciOi0xLCJsaW1pdE1ldHJpY3MiOi0xfQ==))\n- CEA-608/708 captions\n- WebVTT subtitles\n- Alternate Audio Track Rendition (Master Playlist with Alternative Audio) for VoD and Live playlists\n- Adaptive streaming\n  - Manual & Auto Quality Switching\n    - 3 Quality Switching modes are available (controllable through API means)\n      - Instant switching (immediate quality switch at current video position)\n      - Smooth switching (quality switch for next loaded fragment)\n      - Bandwidth conservative switching (quality switch change for next loaded fragment, without flushing the buffer)\n    - In Auto-Quality mode, emergency switch down in case bandwidth is suddenly dropping to minimize buffering.\n- Accurate Seeking on VoD & Live (not limited to fragment or keyframe boundary)\n- Ability to seek in buffer and back buffer without redownloading segments\n- Built-in Analytics\n  - All internal events can be monitored (Network Events, Video Events)\n  - Playback session metrics are also exposed\n- Resilience to errors\n  - Retry mechanism embedded in the library\n  - Recovery actions can be triggered fix fatal media or network errors\n- [Redundant/Failover Playlists](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/UsingHTTPLiveStreaming/UsingHTTPLiveStreaming.html#//apple_ref/doc/uid/TP40008332-CH102-SW22)\n\n### Supported M3U8 tags\n\nFor details on the HLS format and these tags' meanings, see https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-08\n\n#### Manifest tags\n\n- `#EXT-X-STREAM-INF:<attribute-list>`\n  `<URI>`\n- `#EXT-X-MEDIA:<attribute-list>`\n- `#EXT-X-SESSION-DATA:<attribute-list>`\n\nThe following properties are added to their respective variants' attribute list but are not implemented in their selection and playback.\n\n- `VIDEO-RANGE` and `HDCP-LEVEL` (See [#2489](https://github.com/video-dev/hls.js/issues/2489))\n\n#### Playlist tags\n\n- `#EXTM3U`\n- `#EXT-X-VERSION=<n>`\n- `#EXTINF:<duration>,[<title>]`\n- `#EXT-X-ENDLIST`\n- `#EXT-X-MEDIA-SEQUENCE=<n>`\n- `#EXT-X-TARGETDURATION=<n>`\n- `#EXT-X-DISCONTINUITY`\n- `#EXT-X-DISCONTINUITY-SEQUENCE=<n>`\n- `#EXT-X-BYTERANGE=<n>[@<o>]`\n- `#EXT-X-MAP:<attribute-list>`\n- `#EXT-X-KEY:<attribute-list>` (`METHOD=SAMPLE-AES` is only supports with MPEG-2 TS segments)\n- `#EXT-X-PROGRAM-DATE-TIME:<attribute-list>`\n- `#EXT-X-START:TIME-OFFSET=<n>`\n- `#EXT-X-SERVER-CONTROL:<attribute-list>`\n- `#EXT-X-PART-INF:PART-TARGET=<n>`\n- `#EXT-X-PART:<attribute-list>`\n- `#EXT-X-PRELOAD-HINT:<attribute-list>`\n- `#EXT-X-SKIP:<attribute-list>`\n- `#EXT-X-RENDITION-REPORT:<attribute-list>`\n- `#EXT-X-DATERANGE:<attribute-list>`\n\nThe following tags are added to their respective fragment's attribute list but are not implemented in streaming and playback.\n\n- `#EXT-X-BITRATE` (Not used in ABR controller)\n- `#EXT-X-GAP` (Not implemented. See [#2940](https://github.com/video-dev/hls.js/issues/2940))\n\n### Not Supported\n\nFor a complete list of issues, see [\"Top priorities\" in the Release Planning and Backlog project tab](https://github.com/video-dev/hls.js/projects/6). Codec support is dependent on the runtime environment (for example, not all browsers on the same OS support HEVC).\n\n- FairPlay and PlayReady DRM ( See [#3779](https://github.com/video-dev/hls.js/issues/2360) and [issues labeled DRM](https://github.com/video-dev/hls.js/issues?q=is%3Aissue+is%3Aopen+label%3ADRM))\n- Advanced variant selection based on runtime media capabilities (See issues labeled [`media-capabilities`](https://github.com/video-dev/hls.js/labels/media-capabilities))\n- HLS Content Steering\n- HLS Interstitials\n- `#EXT-X-DEFINE` variable substitution\n- `#EXT-X-GAP` filling [#2940](https://github.com/video-dev/hls.js/issues/2940)\n- `#EXT-X-I-FRAME-STREAM-INF` I-frame Media Playlist files\n- `SAMPLE-AES` with fmp4, aac, mp3, vtt... segments (MPEG-2 TS only)\n\n### Server-side-rendering (SSR) and `require` from a Node.js runtime\n\nYou can safely require this library in Node and **absolutely nothing will happen**. A dummy object is exported so that requiring the library does not throw an error. HLS.js is not instantiable in Node.js. See [#1841](https://github.com/video-dev/hls.js/pull/1841) for more details.\n\n## Getting started with development\n\nFirst, checkout the repository and install the required dependencies\n\n```sh\ngit clone https://github.com/video-dev/hls.js.git\ncd hls.js\n# After cloning or pulling from the repository, make sure all dependencies are up-to-date\nnpm install ci\n# Run dev-server for demo page (recompiles on file-watch, but doesn't write to actual dist fs artifacts)\nnpm run dev\n# After making changes run the sanity-check task to verify all checks before committing changes\nnpm run sanity-check\n```\n\nThe dev server will host files on port 8000. Once started, the demo can be found running at http://localhost:8000/demo/.\n\nBefore submitting a PR, please see our [contribution guidelines](CONTRIBUTING.md).\nJoin the discussion on Slack via [video-dev.org](https://video-dev.org) in #hlsjs for updates and questions about development.\n\n### Build tasks\n\nBuild all flavors (suitable for prod-mode/CI):\n\n```\nnpm install ci\nnpm run build\n```\n\nOnly debug-mode artifacts:\n\n```\nnpm run build:debug\n```\n\nBuild and watch (customized dev setups where you'll want to host through another server than webpacks' - for example in a sub-module/project)\n\n```\nnpm run build:watch\n```\n\nOnly specific flavor (known configs are: debug, dist, light, light-dist, demo):\n\n```\nnpm run build -- --env dist # replace \"dist\" by other configuration name, see above ^\n```\n\nNote: The \"demo\" config is always built.\n\n**NOTE:** `hls.light.*.js` dist files do not include EME, subtitles, CMCD, or alternate-audio support. In addition,\nthe following types are not available in the light build:\n\n- `AudioStreamController`\n- `AudioTrackController`\n- `CuesInterface`\n- `EMEController`\n- `SubtitleStreamController`\n- `SubtitleTrackController`\n- `TimelineController`\n- `CmcdController`\n\n### Linter (ESlint)\n\nRun linter:\n\n```\nnpm run lint\n```\n\nRun linter with auto-fix mode:\n\n```\nnpm run lint:fix\n```\n\nRun linter with errors only (no warnings)\n\n```\nnpm run lint:quiet\n```\n\n### Formatting Code\n\nRun prettier to format code\n\n```\nnpm run prettier\n```\n\n### Type Check\n\nRun type-check to verify TypeScript types\n\n```\nnpm run type-check\n```\n\n### Automated tests (Mocha/Karma)\n\nRun all tests at once:\n\n```\nnpm test\n```\n\nRun unit tests:\n\n```\nnpm run test:unit\n```\n\nRun unit tests in watch mode:\n\n```\nnpm run test:unit:watch\n```\n\nRun functional (integration) tests:\n\n```\nnpm run test:func\n```\n\n## Design\n\nAn overview of this project's design, it's modules, events, and error handling can be found [here](/docs/design.md).\n\n## API docs and usage guide\n\n- [API and usage docs, with code examples](./docs/API.md)\n- [Auto-Generated API Docs (Latest Release)](https://hls-js.netlify.com/api-docs)\n- [Auto-Generated API Docs (Development Branch)](https://hls-js-dev.netlify.com/api-docs)\n\n_Note you can access the docs for a particular version using \"[https://github.com/video-dev/hls.js/tree/deployments](https://github.com/video-dev/hls.js/tree/deployments)\"_\n\n## Demo\n\n### Latest Release\n\n[https://hls-js.netlify.com/demo](https://hls-js.netlify.com/demo)\n\n### Master\n\n[https://hls-js-dev.netlify.com/demo](https://hls-js-dev.netlify.com/demo)\n\n### Specific Version\n\nFind the commit on [https://github.com/video-dev/hls.js/tree/deployments](https://github.com/video-dev/hls.js/tree/deployments).\n\n[![](https://www.netlify.com/img/global/badges/netlify-color-accent.svg)](https://www.netlify.com)\n\n[![](https://opensource.saucelabs.com/images/opensauce/powered-by-saucelabs-badge-gray.png?sanitize=true)](https://saucelabs.com)\n\n## Compatibility\n\nHLS.js is only compatible with browsers supporting MediaSource extensions (MSE) API with 'video/MP4' mime-type inputs.\n\nHLS.js is supported on:\n\n- Chrome 39+ for Android\n- Chrome 39+ for Desktop\n- Firefox 41+ for Android\n- Firefox 42+ for Desktop\n- Edge for Windows 10+\n- Safari 8+ for MacOS 10.10+\n- Safari for ipadOS 13+\n\nA [Promise polyfill](https://github.com/taylorhakes/promise-polyfill) is required in browsers missing native promise support.\n\n**Please note:** iOS Safari on iPhone does not support the MediaSource API. This includes all browsers on iOS as well as apps using UIWebView and WKWebView.\n\nSafari browsers (iOS, iPadOS, and macOS) have built-in HLS support through the plain video \"tag\" source URL. See the example below (Using HLS.js) to run appropriate feature detection and choose between using HLS.js or natively built-in HLS support.\n\nWhen a platform has neither MediaSource nor native HLS support, the browser cannot play HLS.\n\n_Keep in mind that if the intention is to support HLS on multiple platforms, beyond those compatible with HLS.js, the HLS streams need to strictly follow the specifications of RFC8216, especially if apps, smart TVs, and set-top boxes are to be supported._\n\nFind a support matrix of the MediaSource API here: https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n\n## Using HLS.js\n\n### Installation\n\nPrepackaged builds are included [with each release](https://github.com/video-dev/hls.js/releases). Or install the hls.js as a dependency\nof your project:\n\n```sh\nnpm install --save hls.js\n```\n\nA canary channel is also available if you prefer to work off the development branch (master):\n\n```\nnpm install hls.js@canary\n```\n\n### Embedding HLS.js\n\nDirectly include dist/hls.js or dist/hls.min.js in a script tag on the page. This setup prioritizes HLS.js MSE playback over\nnative browser support for HLS playback in HTMLMediaElements:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n<!-- Or if you want the latest version from the main branch -->\n<!-- <script src=\"https://cdn.jsdelivr.net/npm/hls.js@canary\"></script> -->\n<video id=\"video\"></video>\n<script>\n  var video = document.getElementById('video');\n  var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n  if (Hls.isSupported()) {\n    var hls = new Hls();\n    hls.loadSource(videoSrc);\n    hls.attachMedia(video);\n  }\n  // HLS.js is not supported on platforms that do not have Media Source\n  // Extensions (MSE) enabled.\n  //\n  // When the browser has built-in HLS support (check using `canPlayType`),\n  // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video\n  // element through the `src` property. This is using the built-in support\n  // of the plain video element, without using HLS.js.\n  //\n  // Note: it would be more normal to wait on the 'canplay' event below however\n  // on Safari (where you are most likely to find built-in HLS support) the\n  // video.src URL must be on the user-driven white-list before a 'canplay'\n  // event will be emitted; the last video event that can be reliably\n  // listened-for when the URL is not on the white-list is 'loadedmetadata'.\n  else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n    video.src = videoSrc;\n  }\n</script>\n```\n\n#### Alternative setup\n\nTo check for native browser support first and then fallback to HLS.js, swap these conditionals. See [this comment](https://github.com/video-dev/hls.js/pull/2954#issuecomment-670021358) to understand some of the tradeoffs.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/hls.js@1\"></script>\n<!-- Or if you want the latest version from the main branch -->\n<!-- <script src=\"https://cdn.jsdelivr.net/npm/hls.js@canary\"></script> -->\n<video id=\"video\"></video>\n<script>\n  var video = document.getElementById('video');\n  var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8';\n  //\n  // First check for native browser HLS support\n  //\n  if (video.canPlayType('application/vnd.apple.mpegurl')) {\n    video.src = videoSrc;\n    //\n    // If no native HLS support, check if HLS.js is supported\n    //\n  } else if (Hls.isSupported()) {\n    var hls = new Hls();\n    hls.loadSource(videoSrc);\n    hls.attachMedia(video);\n  }\n</script>\n```\n\nFor more embed and API examples see [docs/API.md](./docs/API.md).\n\n## CORS\n\nAll HLS resources must be delivered with [CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) permitting `GET` requests.\n\n## Video Control\n\nVideo is controlled through HTML `<video>` element `HTMLVideoElement` methods, events and optional UI controls (`<video controls>`).\n\n## Player Integration\n\nThe following players integrate HLS.js for HLS playback:\n\n- [JW Player](https://www.jwplayer.com)\n- [Akamai Adaptive Media Player (AMP)](https://www.akamai.com/us/en/solutions/products/media-delivery/adaptive-media-player.jsp)\n- [BridTV Player](https://www.brid.tv)\n- [Clappr](https://github.com/clappr/clappr)\n- [Flowplayer](https://www.flowplayer.org) through [flowplayer-hlsjs](https://github.com/flowplayer/flowplayer-hlsjs)\n- [MediaElement.js](https://www.mediaelementjs.com)\n- [Videojs](https://videojs.com) through [Videojs-hlsjs](https://github.com/benjipott/videojs-hlsjs)\n- [Videojs](https://videojs.com) through [videojs-hls.js](https://github.com/streamroot/videojs-hls.js). hls.js is integrated as a SourceHandler -- new feature in Video.js 5.\n- [Videojs](https://videojs.com) through [videojs-contrib-hls.js](https://github.com/Peer5/videojs-contrib-hls.js). Production ready plug-in with full fallback compatibility built-in.\n- [Fluid Player](https://www.fluidplayer.com)\n- [OpenPlayerJS](https://www.openplayerjs.com), as part of the [OpenPlayer project](https://github.com/openplayerjs)\n- [CDNBye](https://github.com/cdnbye/hlsjs-p2p-engine), a p2p engine for hls.js powered by WebRTC Datachannel.\n\n### They use HLS.js in production!\n\n|                                                                                                                                                              |                                                                                                                                                                         |                                                                                                                                                                |                                                                                                                                                                                                                                         |\n| :----------------------------------------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                 [<img src=\"https://i.cdn.turner.com/adultswim/big/img/global/adultswim.jpg\" width=\"120\">](https://www.adultswim.com/streams)                 |                              [<img src=\"https://avatars3.githubusercontent.com/u/5497190?s=200&v=4\" width=\"120\">](https://www.akamai.com)                               |       [<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Canal%2B.svg/2000px-Canal%2B.svg.png\" width=\"120\">](https://www.canalplus.fr)       |                                                                 [<img src=\"https://avatars2.githubusercontent.com/u/115313\" width=\"120\">](https://www.dailymotion.com)                                                                  |\n|     [<img src=\"https://user-images.githubusercontent.com/4006693/44003595-baff193c-9e8f-11e8-9848-7bb91563499f.png\" width=\"120\">](https://freshlive.tv)      |                                    [<img src=\"https://flowplayer.org/media/img/logo-blue.png\" width=\"120\">](https://flowplayer.com)                                     |                        [<img src=\"https://avatars1.githubusercontent.com/u/12554082?s=240\" width=\"120\">](https://www.foxsports.com.au)                         |                                          [<img src=\"https://cloud.githubusercontent.com/assets/244265/12556435/dfaceb48-c353-11e5-971b-2c4429725469.png\" width=\"120\">](https://www.globo.com)                                           |\n|                          [<img src=\"https://images.gunosy.com/logo/gunosy_icon_company_logo.png\" width=\"120\">](https://gunosy.com)                           |      [<img src=\"https://user-images.githubusercontent.com/1480052/35802840-f8e85b8a-0a71-11e8-8eb2-eee323e3f159.png\" width=\"120\">](https://www.gl-systemhaus.de/)       |       [<img src=\"https://cloud.githubusercontent.com/assets/6525783/20801836/700490de-b7ea-11e6-82bd-e249f91c7bae.jpg\" width=\"120\">](https://nettrek.de)       |                                         [<img src=\"https://cloud.githubusercontent.com/assets/244265/12556385/999aa884-c353-11e5-9102-79df54384498.png\" width=\"120\">](https://www.nytimes.com/)                                         |\n|    [<img src=\"https://cloud.githubusercontent.com/assets/1798553/20356424/ba158574-ac24-11e6-95e1-1ae591b11a0a.png\" width=\"120\">](https://www.peer5.com/)    |         [<img src=\"https://cloud.githubusercontent.com/assets/4909096/20925062/e26e6fc8-bbb4-11e6-99a5-d4762274a342.png\" width=\"120\">](https://www.qbrick.com)          |          [<img src=\"https://www.radiantmediaplayer.com/images/radiantmediaplayer-new-logo-640.jpg\" width=\"120\">](https://www.radiantmediaplayer.com/)          |                                                             [<img src=\"https://www.rts.ch/hummingbird-static/images/logos/logo_marts.svg\" width=\"120\">](https://www.rts.ch)                                                             |\n| [<img src=\"https://cloud.githubusercontent.com/assets/12702747/19316434/0a3601de-9067-11e6-85e2-936b1cb099a0.png\" width=\"120\">](https://www.snapstream.com/) |                    [<img src=\"https://pamediagroup.com/wp-content/uploads/2019/05/StreamAMG-Logo-RGB.png\" width=\"120\">](https://www.streamamg.com/)                     |            [<img src=\"https://streamsharkio.sa.metacdn.com/wp-content/uploads/2015/10/streamshark-dark.svg\" width=\"120\">](https://streamshark.io/)             | [<img src=\"https://camo.githubusercontent.com/9580f10e9bfa8aa7fba52c5cb447bee0757e33da/68747470733a2f2f7777772e7461626c6f74762e636f6d2f7374617469632f696d616765732f7461626c6f5f6c6f676f2e706e67\" width=\"120\">](https://my.tablotv.com/) |\n|  [<img src=\"https://user-images.githubusercontent.com/2803310/34083705-349c8fd0-e375-11e7-92a6-5c38509f4936.png\" width=\"120\">](https://www.streamroot.io/)   |             [<img src=\"https://vignette1.wikia.nocookie.net/tedtalks/images/c/c0/TED_logo.png/revision/20150915192527\" width=\"120\">](https://www.ted.com/)              |              [<img src=\"https://www.seeklogo.net/wp-content/uploads/2014/12/twitter-logo-vector-download.jpg\" width=\"120\">](https://twitter.com/)              |                                                                 [<img src=\"https://player.clevercast.com/img/clevercast.png\" width=\"120\">](https://www.clevercast.com)                                                                  |\n|                        [<img src=\"https://player.mtvnservices.com/edge/hosted/Viacom_logo.svg\" width=\"120\">](https://www.viacom.com/)                        |             [<img src=\"https://user-images.githubusercontent.com/1181974/29248959-efabc440-802d-11e7-8050-7c1f4ca6c607.png\" width=\"120\">](https://vk.com/)              |                         [<img src=\"https://avatars0.githubusercontent.com/u/5090060?s=200&v=4\" width=\"120\">](https://www.jwplayer.com)                         |                                                   [<img src=\"https://staticftv-a.akamaihd.net/arches/francetv/default/img/og-image.jpg?20161007\" width=\"120\">](https://www.france.tv)                                                   |\n|                          [<img src=\"https://showmax.akamaized.net/e/logo/showmax_black.png\" width=\"120\">](https://tech.showmax.com)                          | [<img src=\"https://static3.1tv.ru/assets/web/logo-ac67852f1625b338f9d1fb96be089d03557d50bfc5790d5f48dc56799f59dec6.svg\" width=\"120\" height=\"120\">](https://www.1tv.ru/) |       [<img src=\"https://user-images.githubusercontent.com/1480052/40482633-c013ebce-5f55-11e8-96d5-b776415de0ce.png\" width=\"120\">](https://www.zdf.de)        |                                              [<img src=\"https://github.com/cdnbye/hlsjs-p2p-engine/blob/master/figs/cdnbye.png\" width=\"120\">](https://github.com/cdnbye/hlsjs-p2p-engine)                                               |\n|                                                            [cdn77](https://streaming.cdn77.com/)                                                             |                                  [<img src=\"https://avatars0.githubusercontent.com/u/7442371?s=200&v=4\" width=\"120\">](https://r7.com/)                                  | [<img src=\"https://raw.githubusercontent.com/Novage/p2p-media-loader/gh-pages/images/p2pml-logo.png\" width=\"120\">](https://github.com/Novage/p2p-media-loader) |                                                              [<img src=\"https://avatars3.githubusercontent.com/u/45617200?s=400\" width=\"120\">](https://kayosports.com.au)                                                               |\n|    [<img src=\"https://avatars1.githubusercontent.com/u/5279615?s=400&u=9771a216836c613f1edf4afe71cfc69d4c5657ed&v=4\" width=\"120\">](https://flosports.tv)     |                  [<img src=\"https://www.logolynx.com/images/logolynx/c6/c67a2cb3ad33a82b5518f8ad8f124703.png\" width=\"120\">](https://global.axon.com/)                   |                              [<img src=\"https://cms-static.brid.tv/img/brid-logo-120x120.jpg\" width=\"120\">](https://www.brid.tv/)                              |                                                                                                                                                                                                                                         |\n\n## Chrome/Firefox integration\n\nmade by [gramk](https://github.com/gramk/chrome-hls), plays hls from address bar and m3u8 links\n\n- Chrome [native-hls](https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof)\n- Firefox [native-hls](https://addons.mozilla.org/en-US/firefox/addon/native_hls_playback/)\n\n## License\n\nHLS.js is released under [Apache 2.0 License](LICENSE)\n",
    "licenseText": "Copyright (c) 2017 Dailymotion (http://www.dailymotion.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nsrc/remux/mp4-generator.js and src/demux/exp-golomb.ts implementation in this project\nare derived from the HLS library for video.js (https://github.com/videojs/videojs-contrib-hls)\n\nThat work is also covered by the Apache 2 License, following copyright:\nCopyright (c) 2013-2015 Brightcove\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hls.js/-/hls.js-1.2.9.tgz#2f25e42ec4c2ea8c88ab23c0f854f39062d45ac9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hls.js/-/hls.js-1.2.9.tgz",
    "hash": "2f25e42ec4c2ea8c88ab23c0f854f39062d45ac9",
    "integrity": "sha512-SPjm8ix0xe6cYzwDvdVGh2QvQPDkCYrGWpZu6bRaKNNVyEGWM9uF0pooh/Lqj/g8QBQgPFEx1vHzW8SyMY9rqg==",
    "registry": "npm",
    "packageName": "hls.js",
    "cacheIntegrity": "sha512-SPjm8ix0xe6cYzwDvdVGh2QvQPDkCYrGWpZu6bRaKNNVyEGWM9uF0pooh/Lqj/g8QBQgPFEx1vHzW8SyMY9rqg== sha1-LyXkLsTC6oyIqyPA+FTzkGLUWsk="
  },
  "registry": "npm",
  "hash": "2f25e42ec4c2ea8c88ab23c0f854f39062d45ac9"
}