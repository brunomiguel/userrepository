{
  "manifest": {
    "name": "consola",
    "version": "2.15.3",
    "description": "Elegant Console Logger for Node.js and Browser",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/nuxt/consola.git"
    },
    "main": "dist/consola.js",
    "browser": "dist/consola.browser.js",
    "typings": "types/consola.d.ts",
    "scripts": {
      "build": "rm -rf dist && yarn build:node && yarn build:browser",
      "build:node": "NODE_ENV=node bili src/node.js --file-name consola.js --format cjs --bundle-node-modules --minify --no-map",
      "build:browser": "NODE_ENV=browser bili src/browser.js --file-name consola.browser.js --format umd --module-name consola --bundle-node-modules --minify --no-map",
      "demo": "node demo",
      "browser": "serve",
      "test": "yarn lint && yarn test:types && yarn build && jest test",
      "lint": "eslint .",
      "test:types": "tsc -p test/types",
      "prepublish": "yarn build",
      "release": "standard-version && yarn build && git push --follow-tags && npm publish"
    },
    "files": [
      "src",
      "dist",
      "types"
    ],
    "keywords": [
      "console",
      "logger",
      "reporter",
      "elegant",
      "cli",
      "universal",
      "unified",
      "winston"
    ],
    "contributors": [
      {
        "name": "Pooya Parsa",
        "email": "pooya@pi0.ir"
      },
      {
        "name": "Clark Du",
        "url": "@clarkdo"
      },
      {
        "name": "@pimlie",
        "email": "pimlie@hotmail.com"
      },
      {
        "name": "Sébastien Chopin",
        "email": "@Atinux"
      }
    ],
    "devDependencies": {
      "@babel/core": "^7.9.6",
      "@babel/preset-env": "^7.9.6",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^26.0.1",
      "benchmark": "^2.1.4",
      "bili": "^4.10.0",
      "chalk": "^4.0.0",
      "dayjs": "^1.8.26",
      "eslint": "^7.1.0",
      "eslint-config-standard": "^14.1.1",
      "eslint-plugin-import": "^2.20.2",
      "eslint-plugin-jest": "^23.9.0",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-promise": "^4.2.1",
      "eslint-plugin-standard": "^4.0.1",
      "esm": "^3.2.25",
      "figures": "^3.2.0",
      "jest": "^26.0.1",
      "lodash": "^4.17.15",
      "sentencer": "^0.2.1",
      "serve": "^11.3.0",
      "standard-version": "^8.0.0",
      "std-env": "^2.2.1",
      "string-width": "^4.2.0",
      "ts-node": "^8.10.1",
      "typescript": "^3.8.3",
      "winston": "^3.2.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-consola-2.15.3-2e11f98d6a4be71ff72e0bdf07bd23e12cb61550-integrity/node_modules/consola/package.json",
    "readmeFilename": "README.md",
    "readme": "![consola](.github/banner.svg)\n\n# Consola\n\n> Elegant Console Logger for Node.js and Browser\n\n[![Standard JS][standard-js-src]][standard-js-href]\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![package phobia][package-phobia-src]][package-phobia-href]\n[![bundle phobia][bundle-phobia-src]][bundle-phobia-href]\n\n## Why Consola?\n\n👌&nbsp; Easy to use<br>\n💅&nbsp; Fancy output with fallback for minimal environments<br>\n🔌&nbsp; Pluggable reporters<br>\n💻&nbsp; Consistent command line interface (CLI) experience<br>\n🏷&nbsp; Tag support<br>\n🚏&nbsp; Redirect `console` and `stdout/stderr` to consola and easily restore redirect.<br>\n🌐&nbsp; Browser support<br>\n⏯&nbsp; Pause/Resume support<br>\n👻&nbsp; Mocking support<br>\n👮‍♂️&nbsp; Spam prevention by throttling logs<br>\n\n## Installation\n\nUsing yarn:\n\n```bash\nyarn add consola\n```\n\nUsing npm:\n\n```bash\nnpm i consola\n```\n\n## Getting Started\n\n```js\nconst consola = require('consola')\n\n// See types section for all available types\n\nconsola.success('Built!')\nconsola.info('Reporter: Some info')\nconsola.error(new Error('Foo'))\n```\n\nWill display in the terminal:\n\n![Screenshot 2020-01-28 at 14 15 15](https://user-images.githubusercontent.com/904724/73267133-af6b2f00-41d8-11ea-9f16-4a8243d19c43.png)\n\n**NOTE:** Alternatively, you can import consola from source. But don't forget to whitelist it for transpilation:\n\n```js\nimport consola from 'consola/src/node'\nimport consola from 'consola/src/browser'\n```\n\n## Methods\n\n#### `<type>(logObject)` `<type>(args...)`\n\nLog to all reporters.\n\nExample: `consola.info('Message')`\n\nA list of available types can be found [here](./src/types.js).\n\n#### `addReporter(reporter)`\n\n- Aliases: `add`\n\nRegister a custom reporter instance.\n\n#### `removeReporter(reporter?)`\n\n- Aliases: `remove`, `clear`\n\nRemove a registered reporter.\n\nIf no arguments are passed all reporters will be removed.\n\n#### `setReporters(reporter|reporter[])`\n\nReplace all reporters.\n\n#### `create(options)`\n\nCreate a new `Consola` instance and inherit all parent options for defaults.\n\n#### `withDefaults(defaults)`\n\nCreate a new `Consola` instance with provided defaults\n\n#### `withTag(tag)`\n\n- Aliases: `withScope`\n\nCreate a new `Consola` instance with that tag.\n\n#### `wrapConsole()` `restoreConsole()`\n\nGlobally redirect all `console.log`, etc calls to consola handlers.\n\n#### `wrapStd()` `restoreStd()`\n\nGlobally redirect all stdout/stderr outputs to consola.\n\n#### `wrapAll()` `restoreAll()`\n\nWrap both, std and console.\n\nconsole uses std in the underlying so calling `wrapStd` redirects console too.\nBenefit of this function is that things like `console.info` will be correctly redirected to the corresponding type.\n\n#### `pauseLogs()` `resumeLogs()`\n\n- Aliases: `pause`/`resume`\n\n**Globally** pause and resume logs.\n\nConsola will enqueue all logs when paused and then sends them to the reported when resumed.\n\n#### `mockTypes`\n\n- Aliases: `mock`\n\nMock all types. Useful for using with tests.\n\nThe first argument passed to `mockTypes` should be a callback function accepting `(typeName, type)` and returning the mocked value:\n\n```js\nconsola.mockTypes((typeName, type) => jest.fn())\n```\n\nPlease note that with the example above, everything is mocked independently for each type. If you need one mocked fn create it outside:\n\n```js\nconst fn = jest.fn()\nconsola.mockTypes(() => fn)\n```\n\nIf callback function returns a _falsy_ value, that type won't be mocked.\n\nFor example if you just need to mock `consola.fatal`:\n\n```js\nconsola.mockTypes((typeName) => typeName === 'fatal' && jest.fn())\n```\n\n**NOTE:** Any instance of consola that inherits the mocked instance, will apply provided callback again.\nThis way, mocking works for `withTag` scoped loggers without need to extra efforts.\n\n## Fields\n\n#### `reporters`\n\nAn array of active reporters.\n\n#### `level`\n\nThe level to display logs. Any logs at or above this level will be displayed.\nList of available levels [here](./src/types.js).\n\nYou can set the log level using the `CONSOLA_LEVEL` environment variable, which must have the numeric log level as its value.\n\n## `logObject`\n\nThe `logObject` is a free-to-extend object which will be passed to reporters.\n\nStandard fields:\n\n- `message`\n- `additional`\n- `args`\n- `date`\n- `tag`\n\nExtra fields:\n\n- `badge`\n\n## Reporters\n\nChoose between one of the built-in reporters or bring in your own one.\n\nBy default `FancyReporter` is registered for modern terminals or `BasicReporter` will be used if running in limited environments such as CIs.\n\nAvailable reporters:\n\n- [BasicReporter](./src/reporters/basic.js)\n- [FancyReporter](./src/reporters/fancy.js)\n- [JSONReporter](./src/reporters/json.js)\n- [WinstonReporter](./src/reporters/winston.js)\n\n### Creating your own reporter\n\nA reporter (class or object) exposes `log(logObj)` method.\nTo get more info about how to write your own reporter, take a look into the linked implementations above.\n\n## Types\n\nTypes are used to actually log messages to the reporters.\nEach type is attached to a _logging level_.\n\nA list of all available default types is [here](./src/types.js).\n\n## Creating a new instance\n\nConsola has a global instance and is recommended to use everywhere.\nIn case more control is needed, create a new instance.\n\n```js\nimport consola from 'consola'\n\nconst logger = consola.create({\n    // level: 4,\n    reporters: [\n      new consola.JSONReporter()\n    ],\n    defaults: {\n      additionalColor: 'white'\n    }\n})\n```\n\n## Integrations\n\n### With jest\n\n```js\ndescribe('your-consola-mock-test', () => {\n  beforeAll(() => {\n      // Redirect std and console to consola too\n      // Calling this once is sufficient\n      consola.wrapAll()\n    })\n\n    beforeEach(() => {\n      // Re-mock consola before each test call to remove\n      // calls from before\n      consola.mockTypes(() => jest.fn())\n    })\n\n\n  test('your test', async () => {\n    // Some code here\n\n    // Let's retrieve all messages of `consola.log`\n    // Get the mock and map all calls to their first argument\n    const consolaMessages = consola.log.mock.calls.map(c => c[0])\n    expect(consolaMessages).toContain('your message')\n  })\n\n})\n```\n\n### With jsdom\n\n```js\n{\n  virtualConsole: new jsdom.VirtualConsole().sendTo(consola)\n}\n```\n\n## License\n\nMIT - Made with 💖 By Nuxt.js team!\n\n<!-- Refs -->\n[standard-js-src]: https://flat.badgen.net/badge/code%20style/standard/green\n[standard-js-href]: https://standardjs.com\n\n[npm-version-src]: https://flat.badgen.net/npm/v/consola/latest\n[npm-version-href]: https://npmjs.com/package/consola\n\n[npm-downloads-src]: https://flat.badgen.net/npm/dt/consola\n[npm-downloads-href]: https://npmjs.com/package/consola\n\n[package-phobia-src]: https://flat.badgen.net/packagephobia/install/consola\n[package-phobia-href]: https://packagephobia.now.sh/result?p=consola\n\n[bundle-phobia-src]: https://flat.badgen.net/bundlephobia/minzip/consola\n[bundle-phobia-href]: https://bundlephobia.com/result?p=consola\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/consola/-/consola-2.15.3.tgz#2e11f98d6a4be71ff72e0bdf07bd23e12cb61550",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/consola/-/consola-2.15.3.tgz",
    "hash": "2e11f98d6a4be71ff72e0bdf07bd23e12cb61550",
    "integrity": "sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw==",
    "registry": "npm",
    "packageName": "consola",
    "cacheIntegrity": "sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw== sha1-LhH5jWpL5x/3LgvfB70j4Sy2FVA="
  },
  "registry": "npm",
  "hash": "2e11f98d6a4be71ff72e0bdf07bd23e12cb61550"
}