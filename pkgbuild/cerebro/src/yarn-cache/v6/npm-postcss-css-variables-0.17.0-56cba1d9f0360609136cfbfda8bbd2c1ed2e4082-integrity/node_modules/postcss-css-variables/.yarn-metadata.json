{
  "manifest": {
    "name": "postcss-css-variables",
    "version": "0.17.0",
    "description": "PostCSS plugin to transform CSS Custom Properties(CSS variables) syntax into a static representation",
    "keywords": [
      "postcss",
      "css",
      "postcss-plugin"
    ],
    "author": {
      "name": "Eric Eastwood",
      "email": "contact@ericeastwood.com",
      "url": "http://ericeastwood.com/"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/MadLittleMods/postcss-css-variables.git"
    },
    "dependencies": {
      "balanced-match": "^1.0.0",
      "escape-string-regexp": "^1.0.3",
      "extend": "^3.0.1",
      "postcss": "^6.0.8"
    },
    "devDependencies": {
      "bluebird": "^3.5.0",
      "chai": "^4.1.1",
      "chai-as-promised": "^7.1.1",
      "cssnano": "^4.0.0",
      "eslint": "^4.4.1",
      "eslint-plugin-react": "^7.1.0",
      "mocha": "^5.2.0",
      "postcss-discard-comments": "^4.0.0",
      "postcss-normalize-whitespace": "^4.0.0"
    },
    "scripts": {
      "test": "mocha",
      "lint": "eslint ."
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-css-variables-0.17.0-56cba1d9f0360609136cfbfda8bbd2c1ed2e4082-integrity/node_modules/postcss-css-variables/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS CSS Variables\n\n[![npm version](https://badge.fury.io/js/postcss-css-variables.svg)](http://badge.fury.io/js/postcss-css-variables) [![Build Status](https://travis-ci.org/MadLittleMods/postcss-css-variables.svg)](https://travis-ci.org/MadLittleMods/postcss-css-variables) [![Gitter](https://badges.gitter.im/MadLittleMods/postcss-css-variables.svg)](https://gitter.im/MadLittleMods/postcss-css-variables?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n[PostCSS](https://github.com/postcss/postcss) plugin to transform [`CSS Custom Properties (CSS variables)`](http://dev.w3.org/csswg/css-variables/) syntax into a static representation. This plugin provides a future-proof way of using **most** of CSS variables features, including selector cascading with some caveats, because this can only see the CSS, not the potentially dynamic HTML and DOM the CSS is applied to.\n\n### Install\n\n```\nnpm install postcss-css-variables --save-dev\n```\n\n### Table of Contents\n\n- [Code Playground](#code-playground)\n- [Usage](#usage)\n- [Syntax](#syntax) - [Defining Custom Properties with `--*`](#defining-custom-properties-with---) - [Using Variables/Custom Properties with `var()`](#using-variables-custom-properties-with-var)\n- [Features](#features) - [At-rules like `@media`, `@support`, etc.](#at-rules-like-media-support-etc) - [Pseudo-classes and Elements](#pseudo-classes-and-elements) - [Nested Rules](#nested-rules)\n- [Why?](#why) - [Interoperability](#interoperability) - [Differences from `postcss-custom-properties`](#differences-from-postcss-custom-properties)\n- [Caveats](#caveats)\n- [Options](#options)\n- [Quick Reference/Notes](#quick-referencenotes)\n- [Testing](#testing)\n- [Changelog](https://github.com/MadLittleMods/postcss-css-variables/blob/master/CHANGELOG.md)\n\n# [Code Playground](https://madlittlemods.github.io/postcss-css-variables/playground/)\n\n[Try it in the playground](https://madlittlemods.github.io/postcss-css-variables/playground/) and see what you think! Just add some CSS and see to see the final transformed/compiled CSS. You can try anything here in the playground, too.\n\n# Usage\n\n[_For more general PostCSS usage, look here._](https://github.com/postcss/postcss#usage)\n\n```js\nvar postcss = require(\"postcss\");\nvar cssvariables = require(\"postcss-css-variables\");\n\nvar fs = require(\"fs\");\n\nvar mycss = fs.readFileSync(\"input.css\", \"utf8\");\n\n// Process your CSS with postcss-css-variables\nvar output = postcss([cssvariables(/*options*/)]).process(mycss).css;\n\nconsole.log(output);\n```\n\n# Syntax\n\n### Defining Custom Properties with `--*`\n\nA custom property is any property whose name starts with two dashes `--`. A property must be in a rule.\n\n_Note: `:root` is nothing more than the selector for the root DOM node. Any other selector like `.class`, `#id`, or even `#foo ~ .bar > span.baz` works._\n\n```css\n:root {\n  --foo-width: 100px;\n  --foo-bg-color: rgba(255, 0, 0, 0.85);\n}\n\n.foo {\n  --foo-width: 100px;\n  --foo-bg-color: rgba(255, 0, 0, 0.85);\n}\n```\n\nCustom properties can be declared multiple times, but like variable scope in other languages, only the most specific one takes precedence.\n\n```css\n:root {\n  --some-color: red;\n}\n\n.foo {\n  /* red */\n  color: var(--some-color);\n}\n\n.bar {\n  --some-color: blue;\n  /* blue */\n  color: var(--some-color);\n}\n\n.bar:hover {\n  --some-color: green;\n  /* Automatically gets a `color: green;` declaration because we `--some-color` used within scope elsewhere */\n}\n```\n\n_[W3C Draft: CSS Custom Properties for Cascading Variables, section 2](http://dev.w3.org/csswg/css-variables/#defining-variables)_\n\n### Using Variables/Custom Properties with `var()`\n\n```css\n.foo {\n  width: var(--foo-width);\n  /* You can even provide a fallback */\n  background: var(--foo-bg-color, #ff0000);\n}\n```\n\n_[W3C Draft: CSS Custom Properties for Cascading Variables, section 3](http://dev.w3.org/csswg/css-variables/#using-variables)_\n\n# Features\n\n### At-rules like `@media`, `@support`, etc.\n\nIt's perfectly okay to declare CSS variables inside media queries and the like. It'll work just as you would expect.\n\n```css\n:root {\n  --width: 100px;\n}\n\n@media (max-width: 1000px) {\n  :root {\n    --width: 200px;\n  }\n}\n\n.box {\n  width: var(--width);\n}\n```\n\nWill be transformed to:\n\n```css\n.box {\n  width: 100px;\n}\n\n@media (max-width: 1000px) {\n  .box {\n    width: 200px;\n  }\n}\n```\n\n### Pseudo-classes and Elements\n\nPsuedo-classes are also dealt with correctly, because it's easy to statically determine.\n\n```css\n.foo {\n  --foo-color: red;\n  color: var(--foo-color);\n}\n\n.foo:hover {\n  --foo-color: green;\n}\n```\n\nWill be transformed to:\n\n```css\n.foo {\n  color: red;\n}\n\n.foo:hover {\n  color: green;\n}\n```\n\n### Nested Rules\n\nThis pairs very well with [`postcss-nested`](https://github.com/postcss/postcss-nested) or [`postcss-nesting`](https://github.com/jonathantneal/postcss-nesting), adding support for nested rules. For either, you must put the plugin before `postcss-css-variables` in the plugin stack so that the `&` references are expanded first (`postcss-css-variables` doesn't understand them). For example, with `postcss-nested`, your PostCSS setup would look like this:\n\n```js\nvar postcss = require(\"postcss\");\nvar cssvariables = require(\"postcss-css-variables\");\nvar nested = require(\"postcss-nested\");\n\nvar fs = require(\"fs\");\n\nvar mycss = fs.readFileSync(\"input.css\", \"utf8\");\n\nvar output = postcss([\n  // Flatten/unnest rules\n  nested,\n  // Then process any CSS variables\n  cssvariables(/*options*/)\n]).process(mycss).css;\n\nconsole.log(output);\n```\n\nFor a simple example with nesting:\n\n```css\n.box-foo {\n  --some-width: 150px;\n  width: var(--some-width);\n\n  .box-bar {\n    width: var(--some-width);\n  }\n}\n```\n\nWith also `postcss-nesting`, this will be transformed to:\n\n```css\n.box-foo {\n  width: 150px;\n}\n\n.box-foo .box-bar {\n  width: 150px;\n}\n```\n\nFor a more complex example with a media query:\n\n```css\n:root {\n  --some-width: 150px;\n}\n\n.box-foo {\n  width: var(--some-width);\n\n  .box-bar {\n    width: var(--some-width);\n  }\n}\n\n@media (max-width: 800px) {\n  .box-foo {\n    --some-width: 300px;\n  }\n}\n```\n\nWill be transformed to:\n\n```css\n.box-foo {\n  width: 150px;\n}\n\n.box-foo .box-bar {\n  width: 150px;\n}\n\n@media (max-width: 800px) {\n  .box-foo {\n    width: 300px;\n  }\n\n  .box-foo .box-bar {\n    width: 300px;\n  }\n}\n```\n\n# Why?\n\nThis plugin was spawned out of a [discussion on the `cssnext` repo](https://github.com/cssnext/cssnext/issues/99) and a personal need.\n\nThere is another similar plugin available, [`postcss-custom-properties`](https://github.com/postcss/postcss-custom-properties), although it restricts itself much more than this plugin, preferring partial spec conformance. This plugin has the same capabilities but also adds imperfect feature support which stem from not being to know what the DOM will look like when you compile your CSS. We instead look at the explicit structure of your CSS selectors.\n\n### Interoperability and differences from `postcss-custom-properties`\n\nPutting `postcss-css-variables` in place of `postcss-custom-properties` should work out of the box.\n\nIn [`postcss-custom-properties`](https://github.com/postcss/postcss-custom-properties), CSS variable declarations are specifically restricted to the `:root` selector.\n\nIn `postcss-css-variables`, this is not the case and they may be declared inside any rule with whatever selector. The variables are substituted based on statically known CSS selector inheritance.\n\nHere's a quick overview of the differences:\n\n- CSS variables may be declared in any selector like `.foo` or `.foo .bar:hover`, and is not limited to just `:root`\n- CSS variables may be declared in `@media`, `@support`, and other at-rules.\n- CSS variables may be declared in `:hover` and other psuedo-classes, which get expanded properly.\n- Variables in nested rules can be deduced with the help of [`postcss-nested`](https://github.com/postcss/postcss-nested) or [`postcss-nesting`](https://github.com/jonathantneal/postcss-nesting).\n\nContinue to the next section to see where some of these might be unsafe to do. There are reasons behind the ethos of why the other plugin, [`postcss-custom-properties`](https://github.com/postcss/postcss-custom-properties), is very limited in what it supports, due to differing opinions on what is okay to support.\n\n# Caveats\n\nWhen you declare a CSS variable inside one selector, but consume it in another, this does make an unsafe assumption about it which can be non-conforming in certain edge cases. Here is an example where these limitations result in non-conforming behavior.\n\nNote the nested markup below. We only know about the DOM's inheritance from your CSS selectors. If you want nest multiple times, you need to be explicit about it in your CSS which isn't necessary with browser that natively support CSS variables. See the innermost `<div class=\"title\">`\n\n```html\n<div class=\"component\">\n  Black\n\n  <div class=\"title\">\n    Blue\n\n    <div class=\"decoration\">\n      Green\n\n      <div class=\"title\">Blue with this plugin, but green per spec</div>\n    </div>\n  </div>\n</div>\n```\n\n```css\n.component {\n  --text-color: blue;\n}\n\n.component .title {\n  color: var(--text-color);\n}\n\n.component .decoration {\n  --text-color: green;\n  color: var(--text-color);\n}\n```\n\n[`postcss-custom-properties`](https://github.com/postcss/postcss-custom-properties) avoids this problem entirely by restricting itself to just the `:root` selector. This is because the developers there would prefer to not support a feature instead of something almost-spec-compliant like what `postcss-css-variables` does.\n\n# Options\n\n### `preserve` (default: `false`)\n\nAllows you to preserve custom properties & var() usage in output.\n\nPossible values:\n\n- `false`: Removes `--var` declarations and replaces `var()` with their resolved/computed values.\n- `true`: Keeps `var()` declarations in the output and has the computed value as a fallback declaration. Also keeps computed `--var` declarations.\n- `'computed'`: Keeps computed `--var` declarations in the output. Handy to make them available to your JavaScript.\n- `(declaration) => boolean|'computed'` : function/callback to programmatically return whether preserve the respective declaration\n\n### `variables` (default: `{}`)\n\nDefine an object map of variables in JavaScript that will be declared at the `:root` scope.\n\nCan be a simple key-value pair or an object with a `value` property and an optional `isImportant` bool property.\n\nThe object keys are automatically prefixed with `--` (according to CSS custom property syntax) if you do not provide it.\n\n### `preserveInjectedVariables` (default: `true`)\n\nWhether to preserve the custom property declarations inserted via the `variables` option from final output.\n\nA typical use case is [CSS Modules](https://github.com/css-modules/css-modules), where you would want to avoid\nrepeating custom property definitions in every module passed through this plugin. Setting this option to `false`\nprevents JS-injected variables from appearing in output CSS.\n\n```js\nvar postcss = require(\"postcss\");\nvar cssvariables = require(\"postcss-css-variables\");\n\npostcss([\n  cssvariables({\n    variables: {\n      \"--some-var\": \"100px\",\n      \"--other-var\": {\n        value: \"#00ff00\"\n      },\n      \"--important-var\": {\n        value: \"#ff0000\",\n        isImportant: true\n      }\n    }\n  })\n]).process(css, opts);\n```\n\n### `preserveAtRulesOrder` (default: `false`)\n\nKeeps your at-rules like media queries in the order to defined them.\n\nIdeally, this would be defaulted to `true` and it will be in the next major version. All of the tests expecations need to be updated and probably just drop support for `preserveAtRulesOrder: false`\n\n# Quick Reference/Notes\n\n- This plugin was spawned out of a [discussion on the `cssnext` repo](https://github.com/cssnext/cssnext/issues/99).\n- We provide a larger CSS variable feature subset than [`postcss-custom-properties`](https://github.com/postcss/postcss-custom-properties).\n- Related links and issues: - [var declared in media query should pull in properties that use/reference that var _on `cssnext/cssnext`_](https://github.com/cssnext/cssnext/issues/99) - [Investigate support for media-query scoped properties _on `postcss/postcss-custom-properties`_](https://github.com/postcss/postcss-custom-properties/issues/9) - [remove `:root` limitation by injecting rules with new declarations that just contains modified properties. _on `postcss/postcss-custom-properties`_](https://github.com/postcss/postcss-custom-properties/issues/1)\n\n# Testing\n\nWe have a suite of [Mocha](http://mochajs.org/) tests. If you see something that doesn't have coverage, make an issue or pull request.\n\nRun once:\n\n`npm install`\n\nRun whenever you want to test:\n\n`npm run test`\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2015 Eric Eastwood <contact@ericeastwood.com>\n\nThis software includes some test fixtures from postcss-custom-properties: Copyright (c) 2014 Maxime Thirouin, Nicolas Gallagher & TJ Holowaychuk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-css-variables/-/postcss-css-variables-0.17.0.tgz#56cba1d9f0360609136cfbfda8bbd2c1ed2e4082",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-css-variables/-/postcss-css-variables-0.17.0.tgz",
    "hash": "56cba1d9f0360609136cfbfda8bbd2c1ed2e4082",
    "integrity": "sha512-/ZpFnJgksNOrQA72b3DKhExYh+0e2P5nEc3aPZ62G7JLmdDjWRFv3k/q4LxV7uzXFnmvkhXRbdVIiH5tKgfFNA==",
    "registry": "npm",
    "packageName": "postcss-css-variables",
    "cacheIntegrity": "sha512-/ZpFnJgksNOrQA72b3DKhExYh+0e2P5nEc3aPZ62G7JLmdDjWRFv3k/q4LxV7uzXFnmvkhXRbdVIiH5tKgfFNA== sha1-Vsuh2fA2BgkTbPv9qLvSwe0uQII="
  },
  "registry": "npm",
  "hash": "56cba1d9f0360609136cfbfda8bbd2c1ed2e4082"
}