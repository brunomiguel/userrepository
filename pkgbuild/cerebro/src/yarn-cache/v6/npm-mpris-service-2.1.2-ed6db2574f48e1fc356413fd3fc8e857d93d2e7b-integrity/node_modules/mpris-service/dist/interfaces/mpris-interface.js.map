{"version":3,"sources":["interfaces/mpris-interface.js"],"names":["dbus","require","Variant","types","deepEqual","constants","logging","Interface","property","method","signal","DBusError","ACCESS_READ","ACCESS_WRITE","ACCESS_READWRITE","interface","MprisInterface","constructor","name","player","_setPropertyInternal","valueDbus","emit","toLowerCase","substr","setProperty","valuePlain","metadataToDbus","playlistToDbus","emptyPlaylist","filter","t","map","isLoopStatusValid","warn","isPlaybackStatusValid","changedProperties","emitPropertiesChanged","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMC,OAAO,GAAGF,IAAI,CAACE,OAArB;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAI;AACFM,EAAAA,SADE;AACSC,EAAAA,QADT;AACmBC,EAAAA,MADnB;AAC2BC,EAAAA,MAD3B;AACmCC,EAAAA,SADnC;AAEFC,EAAAA,WAFE;AAEWC,EAAAA,YAFX;AAEyBC,EAAAA;AAFzB,IAGAd,IAAI,CAACe,SAHT;;AAKA,MAAMC,cAAN,SAA6BT,SAA7B,CAAuC;AACrCU,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,oBAAoB,CAACZ,QAAD,EAAWa,SAAX,EAAsB;AACxC;AACA,SAAKF,MAAL,CAAYG,IAAZ,CAAiBd,QAAQ,CAAC,CAAD,CAAR,CAAYe,WAAZ,KAA4Bf,QAAQ,CAACgB,MAAT,CAAgB,CAAhB,CAA7C,EAAiEH,SAAjE;AACD;;AAEDI,EAAAA,WAAW,CAACjB,QAAD,EAAWkB,UAAX,EAAuB;AAChC;AACA,QAAIL,SAAS,GAAGK,UAAhB;;AAEA,QAAIlB,QAAQ,KAAK,UAAjB,EAA6B;AAC3Ba,MAAAA,SAAS,GAAGlB,KAAK,CAACwB,cAAN,CAAqBD,UAArB,CAAZ;AACD,KAFD,MAEO,IAAIlB,QAAQ,KAAK,gBAAjB,EAAmC;AACxC,UAAIkB,UAAJ,EAAgB;AACdL,QAAAA,SAAS,GAAG,CAAE,IAAF,EAAQlB,KAAK,CAACyB,cAAN,CAAqBF,UAArB,CAAR,CAAZ;AACD,OAFD,MAEO;AACLL,QAAAA,SAAS,GAAG,CAAE,KAAF,EAASlB,KAAK,CAAC0B,aAAf,CAAZ;AACD;AACF,KANM,MAMA,IAAIrB,QAAQ,KAAK,QAAjB,EAA2B;AAChCa,MAAAA,SAAS,GACPK,UAAU,CAACI,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAAC,eAAD,CAA1B,EAA6CC,GAA7C,CAAkDD,CAAD,IAAOA,CAAC,CAAC,eAAD,CAAzD,CADF;AAED;;AAED,QAAI,CAAC3B,SAAS,CAAC,KAAM,IAAGI,QAAS,EAAlB,CAAD,EAAuBa,SAAvB,CAAd,EAAiD;AAC/C,WAAM,IAAGb,QAAS,EAAlB,IAAuBa,SAAvB;;AAEA,UAAIb,QAAQ,IAAI,YAAZ,IAA4B,CAACH,SAAS,CAAC4B,iBAAV,CAA4BP,UAA5B,CAAjC,EAA0E;AACxEpB,QAAAA,OAAO,CAAC4B,IAAR,CAAc,mDAAkDR,UAAW,EAA3E;AACD,OAFD,MAEO,IAAIlB,QAAQ,IAAI,gBAAZ,IAAgC,CAACH,SAAS,CAAC8B,qBAAV,CAAgCT,UAAhC,CAArC,EAAkF;AACvFpB,QAAAA,OAAO,CAAC4B,IAAR,CAAc,uDAAsDR,UAAW,EAA/E;AACD,OAFM,MAEA;AACL,YAAIU,iBAAiB,GAAG,EAAxB;AACAA,QAAAA,iBAAiB,CAAC5B,QAAD,CAAjB,GAA8Ba,SAA9B;AACAd,QAAAA,SAAS,CAAC8B,qBAAV,CAAgC,IAAhC,EAAsCD,iBAAtC;AACD;AACF;AACF;;AAzCoC;;AA4CvCE,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["const dbus = require('dbus-next');\nconst Variant = dbus.Variant;\nconst types = require('./types');\nconst deepEqual = require('deep-equal');\nconst constants = require('../constants');\nconst logging = require('../logging');\n\nlet {\n  Interface, property, method, signal, DBusError,\n  ACCESS_READ, ACCESS_WRITE, ACCESS_READWRITE\n} = dbus.interface;\n\nclass MprisInterface extends Interface {\n  constructor(name, player) {\n    super(name);\n    this.player = player;\n  }\n\n  _setPropertyInternal(property, valueDbus) {\n    // nothing is currently settable internally that needs conversion to plain\n    this.player.emit(property[0].toLowerCase() + property.substr(1), valueDbus);\n  }\n\n  setProperty(property, valuePlain) {\n    // convert the plain value to a dbus value (default to the plain value)\n    let valueDbus = valuePlain;\n\n    if (property === 'Metadata') {\n      valueDbus = types.metadataToDbus(valuePlain);\n    } else if (property === 'ActivePlaylist') {\n      if (valuePlain) {\n        valueDbus = [ true, types.playlistToDbus(valuePlain) ];\n      } else {\n        valueDbus = [ false, types.emptyPlaylist ];\n      }\n    } else if (property === 'Tracks') {\n      valueDbus =\n        valuePlain.filter((t) => t['mpris:trackid']).map((t) => t['mpris:trackid']);\n    }\n\n    if (!deepEqual(this[`_${property}`], valueDbus)) {\n      this[`_${property}`] = valueDbus;\n\n      if (property == 'LoopStatus' && !constants.isLoopStatusValid(valuePlain)) {\n        logging.warn(`setting player loop status to an invalid value: ${valuePlain}`);\n      } else if (property == 'PlaybackStatus' && !constants.isPlaybackStatusValid(valuePlain)) {\n        logging.warn(`setting player playback status to an invalid value: ${valuePlain}`);\n      } else {\n        let changedProperties = {};\n        changedProperties[property] = valueDbus;\n        Interface.emitPropertiesChanged(this, changedProperties);\n      }\n    }\n  }\n}\n\nmodule.exports = MprisInterface;\n"],"file":"mpris-interface.js","sourceRoot":"../../src/"}