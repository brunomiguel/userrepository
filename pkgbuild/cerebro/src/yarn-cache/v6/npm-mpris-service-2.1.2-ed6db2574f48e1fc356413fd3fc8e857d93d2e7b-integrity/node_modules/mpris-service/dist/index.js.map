{"version":3,"sources":["index.js"],"names":["require","install","events","util","dbus","setBigIntCompat","PlayerInterface","RootInterface","PlaylistsInterface","TracklistInterface","types","constants","MPRIS_PATH","lcfirst","str","toLowerCase","substr","Player","opts","EventEmitter","call","name","supportedInterfaces","_tracks","init","inherits","prototype","serviceName","validators","assertBusNameValid","_bus","sessionBus","on","err","emit","interfaces","_addRootInterface","indexOf","_addPlayerInterface","_addTracklistInterface","_addPlaylistsInterface","k","Object","keys","iface","export","requestName","NameFlag","DO_NOT_QUEUE","then","reply","RequestNameReply","EXISTS","process","pid","catch","bus","root","_addEventedPropertiesList","player","eventedProps","tracklist","defineProperty","get","set","value","TrackListReplaced","enumerable","configurable","playlists","objectPath","subpath","path","_addEventedProperty","that","localName","playlistToPlain","metadataToPlain","setProperty","props","i","length","getPosition","seeked","position","seekTo","Math","floor","isNaN","Error","Seeked","getTrackIndex","trackId","tracks","track","getTrack","addTrack","push","setTracks","afterTrack","TrackAdded","removeTrack","splice","TrackRemoved","getPlaylistIndex","playlistId","playlist","Id","setPlaylists","playlistCount","forEach","PlaylistChanged","setActivePlaylist","setActivePlaylistId","PLAYBACK_STATUS_PLAYING","PLAYBACK_STATUS_PAUSED","PLAYBACK_STATUS_STOPPED","LOOP_STATUS_NONE","LOOP_STATUS_TRACK","LOOP_STATUS_PLAYLIST","module","exports"],"mappings":"AAAAA,OAAO,CAAC,oBAAD,CAAP,CAA8BC,OAA9B;;AAEA,MAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,WAAD,CAApB;;AACAI,IAAI,CAACC,eAAL,CAAqB,IAArB;;AACA,MAAMC,eAAe,GAAGN,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMO,aAAa,GAAGP,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAMQ,kBAAkB,GAAGR,OAAO,CAAC,wBAAD,CAAlC;;AACA,MAAMS,kBAAkB,GAAGT,OAAO,CAAC,wBAAD,CAAlC;;AACA,MAAMU,KAAK,GAAGV,OAAO,CAAC,oBAAD,CAArB;;AACA,MAAMW,SAAS,GAAGX,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAMY,UAAU,GAAG,yBAAnB;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOA,GAAG,CAAC,CAAD,CAAH,CAAOC,WAAP,KAAqBD,GAAG,CAACE,MAAJ,CAAW,CAAX,CAA5B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["require('source-map-support').install();\n\nconst events = require('events');\nconst util = require('util');\n\nconst dbus = require('dbus-next');\ndbus.setBigIntCompat(true);\nconst PlayerInterface = require('./interfaces/player');\nconst RootInterface = require('./interfaces/root');\nconst PlaylistsInterface = require('./interfaces/playlists');\nconst TracklistInterface = require('./interfaces/tracklist');\nconst types = require('./interfaces/types');\nconst constants = require('./constants');\n\nconst MPRIS_PATH = '/org/mpris/MediaPlayer2';\n\nfunction lcfirst(str) {\n  return str[0].toLowerCase()+str.substr(1);\n}\n\n/**\n * Construct a new Player and export it on the DBus session bus.\n *\n * For more information about the properties of this class, see [the MPRIS DBus Interface Specification](https://specifications.freedesktop.org/mpris-spec/latest/).\n *\n * Method Call Events\n * ------------------\n *\n * The Player is an `EventEmitter` that emits events when the corresponding\n * methods are called on the DBus interface over the wire.\n *\n * The Player emits events whenever the corresponding methods on the DBus\n * interface are called.\n *\n * * `raise` - Brings the media player's user interface to the front using any appropriate mechanism available.\n * * `quit` - Causes the media player to stop running.\n * * `next` - Skips to the next track in the tracklist.\n * * `previous` - Skips to the previous track in the tracklist.\n * * `pause` - Pauses playback.\n * * `playPause` - Pauses playback.  If playback is already paused, resumes playback. If playback is stopped, starts playback.\n * * `stop` - Stops playback.\n * * `play` - Starts or resumes playback.\n * * `seek` - Seeks forward in the current track by the specified number of microseconds. With event data `offset`.\n * * `position` - Sets the current track position in microseconds. With event data `{ trackId, position }`.\n * * `open` - Opens the Uri given as an argument. With event data `{ uri }`.\n * * `volume` - Sets the volume of the player. With event data `volume` (between 0.0 and 1.0).\n * * `shuffle` - Sets whether shuffle is enabled on the player. With event data `shuffleStatus` (boolean).\n * * `rate` - Sets the playback rate of the player. A value of 1.0 is the normal rate. With event data `rate`.\n * * `loopStatus` - Sets the loop status of the player to either 'None', 'Track', or 'Playlist'. With event data `loopStatus`.\n * * `activatePlaylist` -  Starts playing the given playlist. With event data `playlistId`.\n *\n * The Player may also emit an `error` event with the underlying Node `Error`\n * as the event data. After receiving this event, the Player may be\n * disconnected.\n *\n * ```\n * player.on('play', () => {\n *   realPlayer.play();\n * });\n *\n * player.on('shuffle', (enableShuffle) => {\n *   realPlayer.setShuffle(enableShuffle);\n *   player.shuffle = enableShuffle;\n * });\n * ```\n *\n * Player Properties\n * -----------------\n *\n * Player properties (documented below) should be kept up to date to reflect\n * the state of your real player. These properties can be gotten by the client\n * through the `org.freedesktop.DBus.Properties` interface which will return\n * the value currently set on the player. Setting these properties on the\n * player to a different value will emit the `PropertiesChanged` signal on the\n * properties interface to notify clients that properties of the player have\n * changed.\n *\n * ```\n * realPlayer.on('shuffle:changed', (shuffleEnabled) => {\n *   player.shuffle = shuffleEnabled;\n * });\n *\n * realPlayer.on('play', () => {\n *   player.playbackStatus = 'Playing';\n * });\n * ```\n *\n * Player Position\n * ---------------\n *\n * Clients can get the position of your player by getting the `Position`\n * property of the `org.mpris.MediaPlayer2.Player` interface. Since position\n * updates continuously, {@link Player#getPosition} is implemented as a getter\n * you can override on your Player. This getter will be called when a client\n * requests the position and should return the position of your player for the\n * client in microseconds.\n *\n * ```\n * player.getPosition() {\n *   return realPlayer.getPositionInMicroseconds();\n * }\n * ```\n *\n * When your real player seeks to a new location, such as when someone clicks\n * on the time bar, you can notify clients of the new position by calling the\n * {@link Player#seeked} method. This will raise the `Seeked` signal on the\n * `org.mpris.MediaPlayer2.Player` interface with the given current time of the\n * player in microseconds.\n *\n * ```\n * realPlayer.on('seeked', (positionInMicroseconds) => {\n *   player.seeked(positionInMicroseconds);\n * });\n * ```\n *\n * Clients can request to set position using the `Seek` and `SetPosition`\n * methods of the `org.mpris.MediaPlayer2.Player` interface. These requests are\n * implemented as events on the Player similar to the other requests.\n *\n * ```\n * player.on('seek', (offset) => {\n *   // note that offset may be negative\n *   let currentPosition = realPlayer.getPositionInMicroseconds();\n *   let newPosition = currentPosition + offset;\n *   realPlayer.setPosition(newPosition);\n * });\n *\n * player.on('position', (event) => {\n *   // check that event.trackId is the current track before continuing.\n *   realPlayer.setPosition(event.position);\n * });\n * ```\n *\n * @class Player\n * @param {Object} options - Options for the player\n * @param {String} options.name - Name on the bus to export to as `org.mpris.MediaPlayer2.{name}`.\n * @param {String} options.identity - Identity for the player to display on the root media player interface.\n * @param {Array} options.supportedMimeTypes - Mime types this player can open with the `org.mpris.MediaPlayer2.Open` method.\n * @param {Array} options.supportedInterfaces - The interfaces this player supports. Can include `'player'`, `'playlists'`, and `'trackList'`.\n * @property {String} identity - A friendly name to identify the media player to users.\n * @property {Boolean} fullscreen - Whether the media player is occupying the fullscreen.\n * @property {Array} supportedUriSchemes - The URI schemes supported by the media player.\n * @property {Array} supportedMimeTypes - The mime-types supported by the media player.\n * @property {Boolean} canQuit - Whether the player can quit.\n * @property {Boolean} canRaise - Whether the player can raise.\n * @property {Boolean} canSetFullscreen - Whether the player can be set to fullscreen.\n * @property {Boolean} hasTrackList - Indicates whether the /org/mpris/MediaPlayer2 object implements the org.mpris.MediaPlayer2.TrackList interface.\n * @property {String} desktopEntry - The basename of an installed .desktop file which complies with the Desktop entry specification, with the \".desktop\" extension stripped.\n * @property {String} playbackStatus - The current playback status. May be \"Playing\", \"Paused\" or \"Stopped\".\n * @property {String} loopStatus - The current loop/repeat status. May be \"None\", \"Track\", or \"Playlist\".\n * @property {Boolean} shuffle - Whether the player is shuffling.\n * @property {Object} metadata - The metadata of the current element. If there is a current track, this must have a \"mpris:trackid\" entry (of D-Bus type \"o\") at the very least, which contains a D-Bus path that uniquely identifies this track.\n * @property {Double} volume - The volume level.\n * @property {Boolean} canControl - Whether the media player may be controlled over this interface.\n * @property {Boolean} canPause - Whether playback can be paused using Pause or PlayPause.\n * @property {Boolean} canPlay - Whether playback can be started using Play or PlayPause.\n * @property {Boolean} canSeek - Whether the client can control the playback position using Seek and SetPosition.\n * @property {Boolean} canGoNext - Whether the client can call the Next method on this interface and expect the current track to change.\n * @property {Boolean} canGoPrevious - Whether the client can call the Previous method on this interface and expect the current track to change.\n * @property {Double} rate - The current playback rate.\n * @property {Double} minimumRate - The minimum value which the Rate property can take.\n * @property {Double} maximumRate - The maximum value which the Rate property can take.\n * @property {Array} playlists - The current playlists set by {@link Player#setPlaylists}. (Not a DBus property).\n * @property {String} activePlaylist - The id of the currently-active playlist.\n */\nfunction Player(opts) {\n  if (!(this instanceof Player)) {\n    return new Player(opts);\n  }\n\n  events.EventEmitter.call(this);\n  this.name = opts.name;\n  this.supportedInterfaces = opts.supportedInterfaces || ['player'];\n  this._tracks = [];\n  this.init(opts);\n}\nutil.inherits(Player, events.EventEmitter);\n\nPlayer.prototype.init = function(opts) {\n  this.serviceName = `org.mpris.MediaPlayer2.${this.name}`;\n  dbus.validators.assertBusNameValid(this.serviceName);\n\n  this._bus = dbus.sessionBus();\n\n  this._bus.on('error', (err) => {\n    this.emit('error', err);\n  });\n\n  this.interfaces = {};\n\n  this._addRootInterface(this._bus, opts);\n\n  if (this.supportedInterfaces.indexOf('player') >= 0) {\n    this._addPlayerInterface(this._bus);\n  }\n  if (this.supportedInterfaces.indexOf('trackList') >= 0) {\n    this._addTracklistInterface(this._bus);\n  }\n  if (this.supportedInterfaces.indexOf('playlists') >= 0) {\n    this._addPlaylistsInterface(this._bus);\n  }\n\n  for (let k of Object.keys(this.interfaces)) {\n    let iface = this.interfaces[k];\n    this._bus.export(MPRIS_PATH, iface);\n  }\n\n  this._bus.requestName(this.serviceName, dbus.NameFlag.DO_NOT_QUEUE)\n    .then((reply) => {\n      if (reply === dbus.RequestNameReply.EXISTS) {\n        this.serviceName = `${this.serviceName}.instance${process.pid}`;\n        return this._bus.requestName(this.serviceName);\n      }\n    })\n    .catch((err) => {\n      this.emit('error', err);\n    });\n};\n\nPlayer.prototype._addRootInterface = function(bus, opts) {\n  this.interfaces.root = new RootInterface(this, opts);\n  this._addEventedPropertiesList(this.interfaces.root,\n    ['Identity', 'Fullscreen', 'SupportedUriSchemes', 'SupportedMimeTypes',\n    'CanQuit', 'CanRaise', 'CanSetFullscreen', 'HasTrackList',\n    'DesktopEntry']);\n};\n\nPlayer.prototype._addPlayerInterface = function(bus) {\n  this.interfaces.player = new PlayerInterface(this);\n  let eventedProps = ['PlaybackStatus', 'LoopStatus', 'Rate', 'Shuffle',\n    'Metadata', 'Volume', 'CanControl', 'CanPause', 'CanPlay', 'CanSeek',\n    'CanGoNext', 'CanGoPrevious', 'MinimumRate', 'MaximumRate'];\n  this._addEventedPropertiesList(this.interfaces.player, eventedProps);\n};\n\nPlayer.prototype._addTracklistInterface = function(bus) {\n  this.interfaces.tracklist = new TracklistInterface(this);\n  this._addEventedPropertiesList(this.interfaces.tracklist, ['CanEditTracks']);\n\n  Object.defineProperty(this, 'tracks', {\n    get: function() {\n      return this._tracks;\n    },\n    set: function(value) {\n      this._tracks = value;\n      this.interfaces.tracklist.TrackListReplaced(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n};\n\nPlayer.prototype._addPlaylistsInterface = function(bus) {\n  this.interfaces.playlists = new PlaylistsInterface(this);\n  this._addEventedPropertiesList(this.interfaces.playlists,\n    ['PlaylistCount', 'ActivePlaylist']);\n}\n\n/**\n * Get a valid object path with the `subpath` as the basename which is suitable\n * for use as an id.\n *\n * @name Player#objectPath\n * @function\n * @param {String} subpath - The basename of this path\n * @returns {String} - A valid object path that can be used as an id.\n */\nPlayer.prototype.objectPath = function(subpath) {\n  let path = `/org/node/mediaplayer/${this.name}`;\n  if (subpath) {\n    path += `/${subpath}`;\n  }\n  return path;\n};\n\nPlayer.prototype._addEventedProperty = function(iface, name) {\n  let that = this;\n\n  let localName = lcfirst(name);\n\n  Object.defineProperty(this, localName, {\n    get: function() {\n      let value = iface[name];\n      if (name === 'ActivePlaylist') {\n        return types.playlistToPlain(value);\n      } else if (name === 'Metadata') {\n        return types.metadataToPlain(value);\n      }\n      return value;\n    },\n    set: function(value) {\n      iface.setProperty(name, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n};\n\nPlayer.prototype._addEventedPropertiesList = function(iface, props) {\n  for (let i = 0; i < props.length; i++) {\n    this._addEventedProperty(iface, props[i]);\n  }\n};\n\n/**\n * Gets the position of this player. This method is intended to be overridden\n * by the user to return the position of the player in microseconds.\n *\n * @name Player#getPosition\n * @function\n * @returns {Integer} - The current position of the player in microseconds.\n */\nPlayer.prototype.getPosition = function() {\n  return 0;\n}\n\n/**\n * Emits the `Seeked` DBus signal to listening clients with the given position.\n *\n * @name Player#seeked\n * @function\n * @param {Integer} position - The position in microseconds.\n */\nPlayer.prototype.seeked = function(position) {\n  let seekTo = Math.floor(position || 0);\n  if (isNaN(seekTo)) {\n    throw new Error(`seeked expected a number (got ${position})`);\n  }\n  this.interfaces.player.Seeked(seekTo);\n};\n\nPlayer.prototype.getTrackIndex = function(trackId) {\n  for (let i = 0; i < this.tracks.length; i++) {\n    let track = this.tracks[i];\n\n    if (track['mpris:trackid'] === trackId) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nPlayer.prototype.getTrack = function(trackId) {\n  return this.tracks[this.getTrackIndex(trackId)];\n};\n\nPlayer.prototype.addTrack = function(track) {\n  this.tracks.push(track);\n  this.interfaces.tracklist.setTracks(this.tracks);\n\n  let afterTrack = '/org/mpris/MediaPlayer2/TrackList/NoTrack';\n  if (this.tracks.length > 2) {\n    afterTrack = this.tracks[this.tracks.length - 2]['mpris:trackid'];\n  }\n  that.interfaces.tracklist.TrackAdded(afterTrack);\n};\n\nPlayer.prototype.removeTrack = function(trackId) {\n  let i = this.getTrackIndex(trackId);\n  this.tracks.splice(i, 1);\n  this.interfaces.tracklist.setTracks(this.tracks);\n\n  that.interfaces.tracklist.TrackRemoved(trackId);\n};\n\n/**\n * Get the index of a playlist entry in the `playlists` list property of the\n * player from the given id.\n *\n * @name Player#getPlaylistIndex\n * @function\n * @param {String} playlistId - The id for the playlist entry.\n */\nPlayer.prototype.getPlaylistIndex = function(playlistId) {\n  for (let i = 0; i < this.playlists.length; i++) {\n    let playlist = this.playlists[i];\n\n    if (playlist.Id === playlistId) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Set the list of playlists advertised to listeners on the bus. Each playlist\n * must have string members `Id`, `Name`, and `Icon`.\n *\n * @name Player#setPlaylists\n * @function\n * @param {Array} playlists - A list of playlists.\n */\nPlayer.prototype.setPlaylists = function(playlists) {\n  this.playlists = playlists;\n  this.playlistCount = playlists.length;\n\n  let that = this;\n  this.playlists.forEach(function(playlist) {\n    that.interfaces.playlists.PlaylistChanged(playlist);\n  });\n};\n\n/**\n * Set the playlist identified by `playlistId` to be the currently active\n * playlist.\n *\n * @name Player#setActivePlaylist\n * @function\n * @param {String} playlistId - The id of the playlist to activate.\n */\nPlayer.prototype.setActivePlaylist = function(playlistId) {\n  this.interfaces.playlists.setActivePlaylistId(playlistId);\n};\n\n/**\n * Enumerated value for the `playbackStatus` property of the player to indicate\n * a track is currently playing.\n *\n * @name Player#PLAYBACK_STATUS_PLAYING\n * @static\n * @constant\n */\nPlayer.PLAYBACK_STATUS_PLAYING = constants.PLAYBACK_STATUS_PLAYING;\n\n/**\n * Enumerated value for the `playbackStatus` property of the player to indicate\n * a track is currently paused.\n *\n * @name Player#PLAYBACK_STATUS_PAUSED\n * @static\n * @constant\n */\nPlayer.PLAYBACK_STATUS_PAUSED = constants.PLAYBACK_STATUS_PAUSED;\n\n/**\n * Enumerated value for the `playbackStatus` property of the player to indicate\n * there is no track currently playing.\n *\n * @name Player#PLAYBACK_STATUS_STOPPED\n * @static\n * @constant\n */\nPlayer.PLAYBACK_STATUS_STOPPED = constants.PLAYBACK_STATUS_STOPPED;\n\n/**\n * Enumerated value for the `loopStatus` property of the player to indicate\n * playback will stop when there are no more tracks to play.\n *\n * @name Player#LOOP_STATUS_NONE\n * @static\n * @constant\n */\nPlayer.LOOP_STATUS_NONE = constants.LOOP_STATUS_NONE;\n\n/**\n * Enumerated value for the `loopStatus` property of the player to indicate the\n * current track will start again from the beginning once it has finished\n * playing.\n *\n * @name Player#LOOP_STATUS_TRACK\n * @static\n * @constant\n */\nPlayer.LOOP_STATUS_TRACK = constants.LOOP_STATUS_TRACK;\n\n/**\n * Enumerated value for the `loopStatus` property of the player to indicate the\n * playback loops through a list of tracks.\n *\n * @name Player#LOOP_STATUS_PLAYLIST\n * @static\n * @constant\n */\nPlayer.LOOP_STATUS_PLAYLIST = constants.LOOP_STATUS_PLAYLIST;\n\nmodule.exports = Player;\n"],"file":"index.js","sourceRoot":"../src/"}