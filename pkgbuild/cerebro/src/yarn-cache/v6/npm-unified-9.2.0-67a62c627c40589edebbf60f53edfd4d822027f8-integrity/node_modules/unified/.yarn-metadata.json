{
  "manifest": {
    "name": "unified",
    "version": "9.2.0",
    "description": "Interface for parsing, inspecting, transforming, and serializing content through syntax trees",
    "license": "MIT",
    "keywords": [
      "unified",
      "process",
      "parse",
      "transform",
      "compile",
      "stringify",
      "serialize",
      "ast",
      "cst",
      "syntax",
      "tree",
      "content",
      "rehype",
      "retext",
      "remark"
    ],
    "homepage": "https://unifiedjs.com/",
    "repository": {
      "type": "git",
      "url": "https://github.com/unifiedjs/unified.git"
    },
    "bugs": {
      "url": "https://github.com/unifiedjs/unified/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Junyoung Choi",
        "email": "fluke8259@gmail.com"
      },
      {
        "name": "Hernan Rajchert",
        "email": "hrajchert@gmail.com"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      },
      {
        "name": "Vse Mozhet Byt",
        "email": "vsemozhetbyt@gmail.com"
      },
      {
        "name": "Richard Littauer",
        "email": "richard.littauer@gmail.com"
      }
    ],
    "types": "types/ts3.4/index.d.ts",
    "typesVersions": {
      ">=4.0": {
        "types/ts3.4/*": [
          "types/ts4.0/*"
        ]
      }
    },
    "files": [
      "types/ts3.4/index.d.ts",
      "types/ts4.0/index.d.ts",
      "index.js",
      "lib"
    ],
    "dependencies": {
      "bail": "^1.0.0",
      "extend": "^3.0.0",
      "is-buffer": "^2.0.0",
      "is-plain-obj": "^2.0.0",
      "trough": "^1.0.0",
      "vfile": "^4.0.0"
    },
    "devDependencies": {
      "browserify": "^16.0.0",
      "c8": "^7.0.0",
      "dtslint": "^3.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^8.0.0",
      "remark-preset-wooorm": "^7.0.0",
      "tape": "^5.0.0",
      "tinyify": "^3.0.0",
      "xo": "^0.33.0"
    },
    "scripts": {
      "format": "remark . -qfo && prettier . --write && xo --fix",
      "build-bundle": "browserify index.js -s unified -o unified.js",
      "build-mangle": "browserify index.js -s unified -p tinyify -o unified.min.js",
      "build": "npm run build-bundle && npm run build-mangle",
      "test-api": "node test",
      "test-coverage": "c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov tape test",
      "test-types": "npm run test-types-3.4 && npm run test-types-4.0",
      "test-types-3.4": "dtslint types/ts3.4",
      "test-types-4.0": "dtslint types/ts4.0",
      "test": "npm run format && npm run build && npm run test-coverage && npm run test-types"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "esnext": false,
      "rules": {
        "guard-for-in": "off",
        "no-unreachable-loop": "off",
        "unicorn/catch-error-name": "off",
        "unicorn/prefer-optional-catch-binding": "off",
        "unicorn/prefer-reflect-apply": "off",
        "unicorn/prefer-type-error": "off"
      },
      "ignores": [
        "types",
        "unified.js"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-unified-9.2.0-67a62c627c40589edebbf60f53edfd4d822027f8-integrity/node_modules/unified/package.json",
    "readmeFilename": "readme.md",
    "readme": "# [![unified][logo]][site]\n\n[![GitHub CI][github-ci-badge]][github-ci]\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**unified** is an interface for processing text using syntax trees.\nIt‚Äôs what powers [**remark**][remark] (Markdown), [**retext**][retext] (natural\nlanguage), and [**rehype**][rehype] (HTML), and allows for processing between\nformats.\n\n## Intro\n\n**unified** enables new exciting projects like [Gatsby][] to pull in Markdown,\n[MDX][] to embed [JSX][], and [Prettier][] to format it.\nIt‚Äôs used in about 350k projects on GitHub and has about 15m downloads each\nmonth on npm: you‚Äôre probably using it.\nSome notable users are [Node.js][], [Vercel][], [Netlify][], [GitHub][],\n[Mozilla][], [WordPress][], [Adobe][], [Facebook][], [Google][], and many more.\n\n*   To read about what we are up to, follow us [Twitter][]\n*   For a less technical and more practical introduction to unified, visit\n    [`unifiedjs.com`][site] and peruse its [Learn][] section\n*   Browse [awesome unified][awesome] to find out more about the ecosystem\n*   Questions?\n    Get help on [Discussions][chat]!\n*   Check out [Contribute][] below to find out how to help out, or become a\n    backer or sponsor on [OpenCollective][collective]\n\n## Sponsors\n\nSupport this effort and give back by sponsoring on [OpenCollective][collective]!\n\n<!--lint ignore no-html-->\n\n<table>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> ü•á<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> ü•á<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boostio.co\">BoostIO</a><br><br>\n  <a href=\"https://boostio.co\"><img src=\"https://avatars1.githubusercontent.com/u/13612118?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install unified\n```\n\nThis package comes with types.\nIf you‚Äôre using TypeScript, make sure to also install\n[`@types/unist`][ts-unist].\n\n## Use\n\n```js\nvar unified = require('unified')\nvar markdown = require('remark-parse')\nvar remark2rehype = require('remark-rehype')\nvar doc = require('rehype-document')\nvar format = require('rehype-format')\nvar html = require('rehype-stringify')\nvar report = require('vfile-reporter')\n\nunified()\n  .use(markdown)\n  .use(remark2rehype)\n  .use(doc, {title: 'üëãüåç'})\n  .use(format)\n  .use(html)\n  .process('# Hello world!', function (err, file) {\n    console.error(report(err || file))\n    console.log(String(file))\n  })\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>üëãüåç</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n## Contents\n\n*   [Description](#description)\n*   [API](#api)\n    *   [`processor()`](#processor)\n    *   [`processor.use(plugin[, options])`](#processoruseplugin-options)\n    *   [`processor.parse(file)`](#processorparsefile)\n    *   [`processor.stringify(node[, file])`](#processorstringifynode-file)\n    *   [`processor.run(node[, file][, done])`](#processorrunnode-file-done)\n    *   [`processor.runSync(node[, file])`](#processorrunsyncnode-file)\n    *   [`processor.process(file[, done])`](#processorprocessfile-done)\n    *   [`processor.processSync(file|value)`](#processorprocesssyncfilevalue)\n    *   [`processor.data([key[, value]])`](#processordatakey-value)\n    *   [`processor.freeze()`](#processorfreeze)\n*   [`Plugin`](#plugin)\n    *   [`function attacher([options])`](#function-attacheroptions)\n    *   [`function transformer(node, file[, next])`](#function-transformernode-file-next)\n*   [`Preset`](#preset)\n*   [Contribute](#contribute)\n*   [Acknowledgments](#acknowledgments)\n*   [License](#license)\n\n## Description\n\n**unified** is an interface for processing text using syntax trees.\nSyntax trees are a representation of text understandable to programs.\nThose programs, called [*plugin*][plugin]s, take these trees and inspect and\nmodify them.\nTo get to the syntax tree from text, there is a [*parser*][parser].\nTo get from that back to text, there is a [*compiler*][compiler].\nThis is the [*process*][process] of a *processor*.\n\n```ascii\n| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          +--------+                     +----------+\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          +--------+          |          +----------+\n                              X\n                              |\n                       +--------------+\n                       | Transformers |\n                       +--------------+\n```\n\n###### Processors\n\nEvery **processor** implements another processor.\nTo create a processor, call another processor.\nThe new processor is configured to work the same as its ancestor.\nBut when the descendant processor is configured in the future it does not affect\nthe ancestral processor.\n\nWhen processors are exposed from a module (for example, `unified` itself) they\nshould not be configured directly, as that would change their behavior for all\nmodule users.\nThose processors are [*frozen*][freeze] and they should be called to create a\nnew processor before they are used.\n\n###### Syntax trees\n\nThe **syntax trees** used in **unified** are [**unist**][unist] nodes.\nA [**node**][node] is a plain JavaScript objects with a `type` field.\nThe semantics of nodes and format of syntax trees is defined by other projects.\n\nThere are several [*utilities*][unist-utilities] for working with nodes.\n\n*   [**hast**][hast] ‚Äî HTML\n*   [**mdast**][mdast] ‚Äî Markdown\n*   [**nlcst**][nlcst] ‚Äî Natural language\n*   [**xast**][xast] ‚Äî XML\n\n###### List of processors\n\nThe following projects process different [*syntax tree*][syntax-tree] formats.\nThey parse text to a syntax tree and compile that back to text.\nThese processors can be used as is, or their parser and compiler can be mixed\nand matched with **unified** and plugins to process between different syntaxes.\n\n*   [**rehype**][rehype] ([*hast*][hast]) ‚Äî HTML\n*   [**remark**][remark] ([*mdast*][mdast]) ‚Äî Markdown\n*   [**retext**][retext] ([*nlcst*][nlcst]) ‚Äî Natural language\n\n###### List of plugins\n\nThe below [**plugins**][plugin] work with **unified**, on all [*syntax\ntree*][syntax-tree] formats:\n\n*   [`unified-diff`](https://github.com/unifiedjs/unified-diff)\n    ‚Äî Ignore messages for unchanged lines in Travis\n*   [`unified-message-control`](https://github.com/unifiedjs/unified-message-control)\n    ‚Äî Enable, disable, and ignore messages\n\nSee [**remark**][remark-plugins], [**rehype**][rehype-plugins], and\n[**retext**][retext-plugins] for their lists of plugins.\n\n###### File\n\nWhen processing a document, **metadata** is often gathered about that document.\n[**vfile**][vfile] is a virtual file format that stores data, metadata, and\nmessages about files for **unified** and its plugins.\n\nThere are several [*utilities*][vfile-utilities] for working with these files.\n\n###### Configuration\n\n[*Processors*][processors] are configured with [*plugin*][plugin]s or\nwith the [`data`][data] method.\n\n###### Integrations\n\n**unified** can integrate with the file system with [`unified-engine`][engine].\nCLI apps can be created with [`unified-args`][args], Gulp plugins with\n[`unified-engine-gulp`][gulp], and Atom Linters with\n[`unified-engine-atom`][atom].\n\n[`unified-stream`][stream] provides a streaming interface.\n\n###### Programming interface\n\nThe API provided by **unified** allows multiple files to be processed and gives\naccess to *metadata* (such as lint messages):\n\n```js\nvar unified = require('unified')\nvar markdown = require('remark-parse')\nvar styleGuide = require('remark-preset-lint-markdown-style-guide')\nvar remark2retext = require('remark-retext')\nvar english = require('retext-english')\nvar equality = require('retext-equality')\nvar remark2rehype = require('remark-rehype')\nvar html = require('rehype-stringify')\nvar report = require('vfile-reporter')\n\nunified()\n  .use(markdown)\n  .use(styleGuide)\n  .use(remark2retext, unified().use(english).use(equality))\n  .use(remark2rehype)\n  .use(html)\n  .process('*Emphasis* and _stress_, you guys!', function (err, file) {\n    console.error(report(err || file))\n    console.log(String(file))\n  })\n```\n\nYields:\n\n```txt\n  1:16-1:24  warning  Emphasis should use `*` as a marker                                  emphasis-marker  remark-lint\n  1:30-1:34  warning  `guys` may be insensitive, use `people`, `persons`, `folks` instead  gals-men         retext-equality\n\n‚ö† 2 warnings\n```\n\n```html\n<p><em>Emphasis</em> and <em>stress</em>, you guys!</p>\n```\n\n###### Processing between syntaxes\n\n[*Processors*][processors] can be combined in two modes.\n\n**Bridge** mode transforms the [*syntax tree*][syntax-tree] from one format\n(*origin*) to another (*destination*).\nAnother processor runs on the destination tree.\nFinally, the original processor continues transforming the origin tree.\n\n**Mutate** mode also transforms the syntax tree from one format to another.\nBut the original processor continues transforming the destination tree.\n\nIn the previous example (‚ÄúProgramming interface‚Äù), `remark-retext` is used in\n*bridge* mode: the origin syntax tree is kept after [**retext**][retext] is\ndone; whereas `remark-rehype` is used in *mutate* mode: it sets a new syntax\ntree and discards the origin tree.\n\n*   [`remark-retext`][remark-retext]\n*   [`remark-rehype`][remark-rehype]\n*   [`rehype-retext`][rehype-retext]\n*   [`rehype-remark`][rehype-remark]\n\n## API\n\n### `processor()`\n\n[*Processor*][processors] describing how to *process* text.\n\n###### Returns\n\n`Function` ‚Äî New [*unfrozen*][freeze] processor that is configured to work the\nsame as its ancestor.\nWhen the descendant processor is configured in the future it does not affect the\nancestral processor.\n\n###### Example\n\nThe following example shows how a new processor can be created (from the remark\nprocessor) and linked to **stdin**(4) and **stdout**(4).\n\n```js\nvar remark = require('remark')\nvar concat = require('concat-stream')\n\nprocess.stdin.pipe(concat(onconcat))\n\nfunction onconcat(buf) {\n  var doc = remark().processSync(buf).toString()\n\n  process.stdout.write(doc)\n}\n```\n\n### `processor.use(plugin[, options])`\n\n[*Configure*][configuration] the processor to use a [*plugin*][plugin] and\noptionally configure that plugin with options.\n\nIf the processor is already using this plugin, the previous plugin configuration\nis changed based on the options that are passed in.\nThe plugin is not added a second time.\n\n###### Signatures\n\n*   `processor.use(plugin[, options])`\n*   `processor.use(preset)`\n*   `processor.use(list)`\n\n###### Parameters\n\n*   `plugin` ([`Attacher`][plugin])\n*   `options` (`*`, optional) ‚Äî Configuration for `plugin`\n*   `preset` (`Object`) ‚Äî Object with an optional `plugins` (set to `list`),\n    and/or an optional `settings` object\n*   `list` (`Array`) ‚Äî List of plugins, presets, and pairs (`plugin` and\n    `options` in an array)\n\n###### Returns\n\n`processor` ‚Äî The processor that `use` was called on.\n\n###### Note\n\n`use` cannot be called on [*frozen*][freeze] processors.\nCall the processor first to create a new unfrozen processor.\n\n###### Example\n\nThere are many ways to pass plugins to `.use()`.\nThe below example gives an overview.\n\n```js\nvar unified = require('unified')\n\nunified()\n  // Plugin with options:\n  .use(pluginA, {x: true, y: true})\n  // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n  .use(pluginA, {y: false, z: true})\n  // Plugins:\n  .use([pluginB, pluginC])\n  // Two plugins, the second with options:\n  .use([pluginD, [pluginE, {}]])\n  // Preset with plugins and settings:\n  .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n  // Settings only:\n  .use({settings: {position: false}})\n```\n\n### `processor.parse(file)`\n\nParse text to a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) ‚Äî [*File*][file], any value accepted by `vfile()`\n\n###### Returns\n\n[`Node`][node] ‚Äî Parsed [*syntax tree*][syntax-tree] representing `file`.\n\n###### Note\n\n`parse` freezes the processor if not already [*frozen*][freeze].\n\n`parse` performs the [*parse phase*][description], not the *run phase* or other\nphases.\n\n###### Example\n\nThe below example shows how `parse` can be used to create a syntax tree from a\nfile.\n\n```js\nvar unified = require('unified')\nvar markdown = require('remark-parse')\n\nvar tree = unified().use(markdown).parse('# Hello world!')\n\nconsole.log(tree)\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'heading', depth: 1, children: [Array], position: [Position]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 15, offset: 14}\n  }\n}\n```\n\n#### `processor.Parser`\n\nA **parser** handles the parsing of text to a [*syntax tree*][syntax-tree].\nUsed in the [*parse phase*][description] and called with a `string` and\n[`VFile`][vfile] representation of the text to parse.\n\n`Parser` can be a function, in which case it must return a [`Node`][node]: the\nsyntax tree representation of the given file.\n\n`Parser` can also be a constructor function (a function with a `parse` field, or\nother fields, in its `prototype`), in which case it‚Äôs constructed with `new`.\nInstances must have a `parse` method that is called without arguments and must\nreturn a [`Node`][node].\n\n### `processor.stringify(node[, file])`\n\nCompile a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `node` ([`Node`][node]) ‚Äî [*Syntax tree*][syntax-tree] to compile\n*   `file` ([`VFile`][vfile], optional) ‚Äî [*File*][file], any value accepted by\n    `vfile()`\n\n###### Returns\n\n`string` or `Buffer` (see notes) ‚Äî Textual representation of the [*syntax\ntree*][syntax-tree]\n\n###### Note\n\n`stringify` freezes the processor if not already [*frozen*][freeze].\n\n`stringify` performs the [*stringify phase*][description], not the *run phase*\nor other phases.\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you‚Äôre using a compiler doesn‚Äôt serialize, expect different result values.\nWhen using TypeScript, cast the type on your side.\n\n###### Example\n\nThe below example shows how `stringify` can be used to serialize a syntax tree.\n\n```js\nvar unified = require('unified')\nvar html = require('rehype-stringify')\nvar h = require('hastscript')\n\nvar tree = h('h1', 'Hello world!')\n\nvar doc = unified().use(html).stringify(tree)\n\nconsole.log(doc)\n```\n\nYields:\n\n```html\n<h1>Hello world!</h1>\n```\n\n#### `processor.Compiler`\n\nA **compiler** handles the compiling of a [*syntax tree*][syntax-tree] to text.\nUsed in the [*stringify phase*][description] and called with a [`Node`][node]\nand [`VFile`][file] representation of syntax tree to compile.\n\n`Compiler` can be a function, in which case it should return a `string`: the\ntextual representation of the syntax tree.\n\n`Compiler` can also be a constructor function (a function with a `compile`\nfield, or other fields, in its `prototype`), in which case it‚Äôs constructed with\n`new`.\nInstances must have a `compile` method that is called without arguments and\nshould return a `string`.\n\n### `processor.run(node[, file][, done])`\n\nRun [*transformers*][transformer] on a [*syntax tree*][syntax-tree].\n\n###### Parameters\n\n*   `node` ([`Node`][node]) ‚Äî [*Syntax tree*][syntax-tree] to run on\n*   `file` ([`VFile`][vfile], optional) ‚Äî [*File*][file], any value accepted by\n    `vfile()`\n*   `done` ([`Function`][run-done], optional) ‚Äî Callback\n\n###### Returns\n\n[`Promise`][promise] if `done` is not given.\nThe returned promise is rejected with a fatal error, or resolved with the\ntransformed [*syntax tree*][syntax-tree].\n\n###### Note\n\n`run` freezes the processor if not already [*frozen*][freeze].\n\n`run` performs the [*run phase*][description], not other phases.\n\n#### `function done(err[, node, file])`\n\nCallback called when [*transformers*][transformer] are done.\nCalled with either an error or results.\n\n###### Parameters\n\n*   `err` (`Error`, optional) ‚Äî Fatal error\n*   `node` ([`Node`][node], optional) ‚Äî Transformed [*syntax tree*][syntax-tree]\n*   `file` ([`VFile`][vfile], optional) ‚Äî [*File*][file]\n\n###### Example\n\nThe below example shows how `run` can be used to transform a syntax tree.\n\n```js\nvar unified = require('unified')\nvar references = require('remark-reference-links')\nvar u = require('unist-builder')\n\nvar tree = u('root', [\n  u('paragraph', [\n    u('link', {href: 'https://example.com'}, [u('text', 'Example Domain')])\n  ])\n])\n\nunified()\n  .use(references)\n  .run(tree, function (err, tree) {\n    if (err) throw err\n    console.log(tree)\n  })\n```\n\nYields:\n\n```js\n{\n  type: 'root',\n  children: [\n    {type: 'paragraph', children: [Array]},\n    {type: 'definition', identifier: '1', title: undefined, url: undefined}\n  ]\n}\n```\n\n### `processor.runSync(node[, file])`\n\nRun [*transformers*][transformer] on a [*syntax tree*][syntax-tree].\n\nAn error is thrown if asynchronous [*plugin*][plugin]s are configured.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) ‚Äî [*Syntax tree*][syntax-tree] to run on\n*   `file` ([`VFile`][vfile], optional) ‚Äî [*File*][file], any value accepted by\n    `vfile()`\n\n###### Returns\n\n[`Node`][node] ‚Äî Transformed [*syntax tree*][syntax-tree].\n\n###### Note\n\n`runSync` freezes the processor if not already [*frozen*][freeze].\n\n`runSync` performs the [*run phase*][description], not other phases.\n\n### `processor.process(file[, done])`\n\n[*Process*][description] the given [*file*][file] as configured on the\nprocessor.\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) ‚Äî [*File*][file], any value accepted by `vfile()`\n*   `done` ([`Function`][process-done], optional) ‚Äî Callback\n\n###### Returns\n\n[`Promise`][promise] if `done` is not given.\nThe returned promise is rejected with a fatal error, or resolved with the\nprocessed [*file*][file].\n\nThe parsed, transformed, and compiled value is exposed on\n[`file.contents`][vfile-contents] or `file.result` (see notes).\n\n###### Note\n\n`process` freezes the processor if not already [*frozen*][freeze].\n\n`process` performs the [*parse*, *run*, and *stringify* phases][description].\n\nBe aware that [*compiler*][compiler]s typically, but not always, return\n`string`.\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nWhen using TypeScript, cast the type of [`file.contents`][vfile-contents] on\nyour side.\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you‚Äôre using a compiler that serializes, the result is available at\n`file.contents`.\nOtherwise, the result is available at `file.result`.\n\n###### Example\n\nThe below example shows how `process` can be used to process a file, whether\ntransformers are asynchronous or not, with promises.\n\n```js\nvar unified = require('unified')\nvar markdown = require('remark-parse')\nvar remark2rehype = require('remark-rehype')\nvar doc = require('rehype-document')\nvar format = require('rehype-format')\nvar html = require('rehype-stringify')\n\nunified()\n  .use(markdown)\n  .use(remark2rehype)\n  .use(doc, {title: 'üëãüåç'})\n  .use(format)\n  .use(html)\n  .process('# Hello world!')\n  .then(\n    function (file) {\n      console.log(String(file))\n    },\n    function (err) {\n      console.error(String(err))\n    }\n  )\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>üëãüåç</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n#### `function done(err, file)`\n\nCallback called when the [*process*][description] is done.\nCalled with a fatal error, if any, and a [*file*][file].\n\n###### Parameters\n\n*   `err` (`Error`, optional) ‚Äî Fatal error\n*   `file` ([`VFile`][vfile]) ‚Äî Processed [*file*][file]\n\n###### Example\n\nThe below example shows how `process` can be used to process a file, whether\ntransformers are asynchronous or not, with a callback.\n\n```js\nvar unified = require('unified')\nvar parse = require('remark-parse')\nvar stringify = require('remark-stringify')\nvar github = require('remark-github')\nvar report = require('vfile-reporter')\n\nunified()\n  .use(parse)\n  .use(github)\n  .use(stringify)\n  .process('@wooorm', function (err, file) {\n    console.error(report(err || file))\n    console.log(String(file))\n  })\n```\n\nYields:\n\n```txt\nno issues found\n```\n\n```markdown\n[**@wooorm**](https://github.com/wooorm)\n```\n\n### `processor.processSync(file|value)`\n\n[*Process*][description] the given [*file*][file] as configured on the\nprocessor.\n\nAn error is thrown if asynchronous [*plugin*][plugin]s are configured.\n\n###### Parameters\n\n*   `file` ([`VFile`][vfile]) ‚Äî [*File*][file], any value accepted by `vfile()`\n\n###### Returns\n\n([`VFile`][vfile]) ‚Äî Processed [*file*][file]\n\nThe parsed, transformed, and compiled value is exposed on\n[`file.contents`][vfile-contents] or `file.result` (see notes).\n\n###### Note\n\n`processSync` freezes the processor if not already [*frozen*][freeze].\n\n`processSync` performs the [*parse*, *run*, and *stringify*\nphases][description].\n\nunified typically compiles by serializing: most [*compiler*][compiler]s return\n`string` (or `Buffer`).\nSome compilers, such as the one configured with [`rehype-react`][rehype-react],\nreturn other values (in this case, a React tree).\nIf you‚Äôre using a compiler that serializes, the result is available at\n`file.contents`.\nOtherwise, the result is available at `file.result`.\n\n###### Example\n\nThe below example shows how `processSync` can be used to process a file, if all\ntransformers are synchronous.\n\n```js\nvar unified = require('unified')\nvar markdown = require('remark-parse')\nvar remark2rehype = require('remark-rehype')\nvar doc = require('rehype-document')\nvar format = require('rehype-format')\nvar html = require('rehype-stringify')\n\nvar processor = unified()\n  .use(markdown)\n  .use(remark2rehype)\n  .use(doc, {title: 'üëãüåç'})\n  .use(format)\n  .use(html)\n\nconsole.log(processor.processSync('# Hello world!').toString())\n```\n\nYields:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>üëãüåç</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n\n### `processor.data([key[, value]])`\n\n[*Configure*][configuration] the processor with information available to all\n[*plugin*][plugin]s.\nInformation is stored in an in-memory key-value store.\n\nTypically, options can be given to a specific plugin, but sometimes it makes\nsense to have information shared with several plugins.\nFor example, a list of HTML elements that are self-closing, which is needed\nduring all [*phases*][description] of the *process*.\n\n###### Signatures\n\n*   `processor = processor.data(key, value)`\n*   `processor = processor.data(values)`\n*   `value = processor.data(key)`\n*   `info = processor.data()`\n\n###### Parameters\n\n*   `key` (`string`, optional) ‚Äî Identifier\n*   `value` (`*`, optional) ‚Äî Value to set\n*   `values` (`Object`, optional) ‚Äî Values to set\n\n###### Returns\n\n*   `processor` ‚Äî If setting, the processor that `data` is called on\n*   `value` (`*`) ‚Äî If getting, the value at `key`\n*   `info` (`Object`) ‚Äî Without arguments, the key-value store\n\n###### Note\n\nSetting information cannot occur on [*frozen*][freeze] processors.\nCall the processor first to create a new unfrozen processor.\n\n###### Example\n\nThe following example show how to get and set information:\n\n```js\nvar unified = require('unified')\n\nvar processor = unified().data('alpha', 'bravo')\n\nprocessor.data('alpha') // => 'bravo'\n\nprocessor.data() // {alpha: 'bravo'}\n\nprocessor.data({charlie: 'delta'})\n\nprocessor.data() // {charlie: 'delta'}\n```\n\n### `processor.freeze()`\n\n**Freeze** a processor.\n*Frozen* processors are meant to be extended and not to be configured directly.\n\nOnce a processor is frozen it cannot be *unfrozen*.\nNew processors working the same way can be created by calling the processor.\n\nIt‚Äôs possible to freeze processors explicitly by calling `.freeze()`.\nProcessors freeze implicitly when [`.parse()`][parse], [`.run()`][run],\n[`.runSync()`][run-sync], [`.stringify()`][stringify], [`.process()`][process],\nor [`.processSync()`][process-sync] are called.\n\n###### Returns\n\n`processor` ‚Äî The processor that `freeze` was called on.\n\n###### Example\n\nThe following example, `index.js`, shows how rehype prevents extensions to\nitself:\n\n```js\nvar unified = require('unified')\nvar parse = require('rehype-parse')\nvar stringify = require('rehype-stringify')\n\nmodule.exports = unified().use(parse).use(stringify).freeze()\n```\n\nThe below example, `a.js`, shows how that processor can be used and configured.\n\n```js\nvar rehype = require('rehype')\nvar format = require('rehype-format')\n// ‚Ä¶\n\nrehype()\n  .use(format)\n  // ‚Ä¶\n```\n\nThe below example, `b.js`, shows a similar looking example that operates on the\nfrozen rehype interface because it does not call `rehype`.\nIf this behavior was allowed it would result in unexpected behavior so an\nerror is thrown.\n**This is invalid**:\n\n```js\nvar rehype = require('rehype')\nvar format = require('rehype-format')\n// ‚Ä¶\n\nrehype\n  .use(format)\n  // ‚Ä¶\n```\n\nYields:\n\n```txt\n~/node_modules/unified/index.js:440\n    throw new Error(\n    ^\n\nError: Cannot invoke `use` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.\n    at assertUnfrozen (~/node_modules/unified/index.js:440:11)\n    at Function.use (~/node_modules/unified/index.js:172:5)\n    at Object.<anonymous> (~/b.js:6:4)\n```\n\n## `Plugin`\n\n**Plugins** [*configure*][configuration] the processors they are applied on in\nthe following ways:\n\n*   They change the processor: such as the [*parser*][parser], the\n    [*compiler*][compiler], or configuring [*data*][data]\n*   They specify how to handle [*syntax trees*][syntax-tree] and [*files*][file]\n\nPlugins are a concept.\nThey materialize as [`attacher`][attacher]s.\n\n###### Example\n\n`move.js`:\n\n```js\nmodule.exports = move\n\nfunction move(options) {\n  var expected = (options || {}).extname\n\n  if (!expected) {\n    throw new Error('Missing `extname` in options')\n  }\n\n  return transformer\n\n  function transformer(tree, file) {\n    if (file.extname && file.extname !== expected) {\n      file.extname = expected\n    }\n  }\n}\n```\n\n`index.md`:\n\n```markdown\n# Hello, world!\n```\n\n`index.js`:\n\n```js\nvar unified = require('unified')\nvar parse = require('remark-parse')\nvar remark2rehype = require('remark-rehype')\nvar stringify = require('rehype-stringify')\nvar vfile = require('to-vfile')\nvar report = require('vfile-reporter')\nvar move = require('./move')\n\nunified()\n  .use(parse)\n  .use(remark2rehype)\n  .use(move, {extname: '.html'})\n  .use(stringify)\n  .process(vfile.readSync('index.md'), function (err, file) {\n    console.error(report(err || file))\n    if (file) {\n      vfile.writeSync(file) // Written to `index.html`.\n    }\n  })\n```\n\nYields:\n\n```txt\nindex.md: no issues found\n```\n\n`index.html`:\n\n```html\n<h1>Hello, world!</h1>\n```\n\n### `function attacher([options])`\n\n**Attachers** are materialized [*plugin*][plugin]s.\nAn attacher is a function that can receive options and\n[*configures*][configuration] the processor.\n\nAttachers change the processor, such as the [*parser*][parser], the\n[*compiler*][compiler], configuring [*data*][data], or by specifying how the\n[*syntax tree*][syntax-tree] or [*file*][file] are handled.\n\n###### Context\n\nThe context object (`this`) is set to the processor the attacher is applied on.\n\n###### Parameters\n\n*   `options` (`*`, optional) ‚Äî Configuration\n\n###### Returns\n\n[`transformer`][transformer] ‚Äî Optional.\n\n###### Note\n\nAttachers are called when the processor is [*frozen*][freeze], not when they are\napplied.\n\n### `function transformer(node, file[, next])`\n\n**Transformers** handle [*syntax tree*][syntax-tree]s and [*file*][file]s.\nA transformer is a function that is called each time a syntax tree and file are\npassed through the [*run phase*][description].\nIf an error occurs (either because it‚Äôs thrown, returned, rejected, or passed to\n[`next`][next]), the process stops.\n\nThe *run phase* is handled by [`trough`][trough], see its documentation for the\nexact semantics of these functions.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) ‚Äî [*Syntax tree*][syntax-tree] to handle\n*   `file` ([`VFile`][vfile]) ‚Äî [*File*][file] to handle\n*   `next` ([`Function`][next], optional)\n\n###### Returns\n\n*   `void` ‚Äî If nothing is returned, the next transformer keeps using same tree.\n*   `Error` ‚Äî Fatal error to stop the process\n*   `node` ([`Node`][node]) ‚Äî New [*syntax tree*][syntax-tree].\n    If returned, the next transformer is given this new tree\n*   `Promise` ‚Äî Returned to perform an asynchronous operation.\n    The promise **must** be resolved (optionally with a [`Node`][node]) or\n    rejected (optionally with an `Error`)\n\n#### `function next(err[, tree[, file]])`\n\nIf the signature of a [*transformer*][transformer] includes `next` (the third\nargument), the transformer **may** perform asynchronous operations, and **must**\ncall `next()`.\n\n###### Parameters\n\n*   `err` (`Error`, optional) ‚Äî Fatal error to stop the process\n*   `node` ([`Node`][node], optional) ‚Äî New [*syntax tree*][syntax-tree].\n    If given, the next transformer is given this new tree\n*   `file` ([`VFile`][vfile], optional) ‚Äî New [*file*][file].\n    If given, the next transformer is given this new file\n\n## `Preset`\n\n**Presets** are sharable [*configuration*][configuration].\nThey can contain [*plugins*][plugin] and settings.\n\n###### Example\n\n`preset.js`:\n\n```js\nexports.settings = {bullet: '*', emphasis: '*', fences: true}\n\nexports.plugins = [\n  require('remark-preset-lint-recommended'),\n  require('remark-preset-lint-consistent'),\n  require('remark-comment-config'),\n  [require('remark-toc'), {maxDepth: 3, tight: true}],\n  require('remark-license')\n]\n```\n\n`readme.md`:\n\n```markdown\n# Hello, world!\n\n_Emphasis_ and **importance**.\n\n## Table of contents\n\n## API\n\n## License\n```\n\n`index.js`:\n\n```js\nvar remark = require('remark')\nvar vfile = require('to-vfile')\nvar report = require('vfile-reporter')\nvar preset = require('./preset')\n\nremark()\n  .use(preset)\n  .process(vfile.readSync('readme.md'), function (err, file) {\n    console.error(report(err || file))\n\n    if (file) {\n      vfile.writeSync(file)\n    }\n  })\n```\n\nYields:\n\n```txt\nreadme.md: no issues found\n```\n\n`readme.md` now contains:\n\n```markdown\n# Hello, world!\n\n*Emphasis* and **importance**.\n\n## Table of contents\n\n*   [API](#api)\n*   [License](#license)\n\n## API\n\n## License\n\n[MIT](license) ¬© [Titus Wormer](https://wooorm.com)\n```\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`unifiedjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\nIdeas for new plugins and tools can be posted in [`unifiedjs/ideas`][ideas].\n\nA curated list of awesome unified resources can be found in [**awesome\nunified**][awesome].\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## Acknowledgments\n\nPreliminary work for unified was done [in 2014][preliminary] for\n[**retext**][retext] and inspired by [`ware`][ware].\nFurther incubation happened in [**remark**][remark].\nThe project was finally [externalised][] in 2015 and [published][] as `unified`.\nThe project was authored by [**@wooorm**](https://github.com/wooorm).\n\nAlthough `unified` since moved its plugin architecture to [`trough`][trough],\nthanks to [**@calvinfo**](https://github.com/calvinfo),\n[**@ianstormtaylor**](https://github.com/ianstormtaylor), and others for their\nwork on [`ware`][ware], as it was a huge initial inspiration.\n\n## License\n\n[MIT][license] ¬© [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[logo]: https://raw.githubusercontent.com/unifiedjs/unified/39917ea/logo.svg?sanitize=true\n\n[github-ci-badge]: https://github.com/unifiedjs/unified/workflows/CI/badge.svg\n\n[github-ci]: https://github.com/unifiedjs/unified/actions\n\n[build-badge]: https://img.shields.io/travis/unifiedjs/unified.svg\n\n[build]: https://travis-ci.org/unifiedjs/unified\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/unifiedjs/unified.svg\n\n[coverage]: https://codecov.io/github/unifiedjs/unified\n\n[downloads-badge]: https://img.shields.io/npm/dm/unified.svg\n\n[downloads]: https://www.npmjs.com/package/unified\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unified.svg\n\n[size]: https://bundlephobia.com/result?p=unified\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/unifiedjs/unified/discussions\n\n[health]: https://github.com/unifiedjs/.github\n\n[contributing]: https://github.com/unifiedjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/unifiedjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/unifiedjs/.github/blob/HEAD/code-of-conduct.md\n\n[awesome]: https://github.com/unifiedjs/awesome-unified\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[ts-unist]: https://www.npmjs.com/package/@types/unist\n\n[site]: https://unifiedjs.com\n\n[twitter]: https://twitter.com/unifiedjs\n\n[learn]: https://unifiedjs.com/learn/\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[remark]: https://github.com/remarkjs/remark\n\n[retext]: https://github.com/retextjs/retext\n\n[hast]: https://github.com/syntax-tree/hast\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[nlcst]: https://github.com/syntax-tree/nlcst\n\n[xast]: https://github.com/syntax-tree/xast\n\n[unist]: https://github.com/syntax-tree/unist\n\n[engine]: https://github.com/unifiedjs/unified-engine\n\n[args]: https://github.com/unifiedjs/unified-args\n\n[gulp]: https://github.com/unifiedjs/unified-engine-gulp\n\n[atom]: https://github.com/unifiedjs/unified-engine-atom\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[remark-retext]: https://github.com/remarkjs/remark-retext\n\n[rehype-retext]: https://github.com/rehypejs/rehype-retext\n\n[rehype-remark]: https://github.com/rehypejs/rehype-remark\n\n[unist-utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n\n[vfile]: https://github.com/vfile/vfile\n\n[vfile-contents]: https://github.com/vfile/vfile#vfilecontents\n\n[vfile-utilities]: https://github.com/vfile/vfile#related-tools\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[description]: #description\n\n[syntax-tree]: #syntax-trees\n\n[configuration]: #configuration\n\n[file]: #file\n\n[processors]: #processors\n\n[process]: #processorprocessfile-done\n\n[process-sync]: #processorprocesssyncfilevalue\n\n[parse]: #processorparsefile\n\n[parser]: #processorparser\n\n[stringify]: #processorstringifynode-file\n\n[run]: #processorrunnode-file-done\n\n[run-sync]: #processorrunsyncnode-file\n\n[compiler]: #processorcompiler\n\n[data]: #processordatakey-value\n\n[attacher]: #function-attacheroptions\n\n[transformer]: #function-transformernode-file-next\n\n[next]: #function-nexterr-tree-file\n\n[freeze]: #processorfreeze\n\n[plugin]: #plugin\n\n[run-done]: #function-doneerr-node-file\n\n[process-done]: #function-doneerr-file\n\n[contribute]: #contribute\n\n[rehype-react]: https://github.com/rhysd/rehype-react\n\n[trough]: https://github.com/wooorm/trough#function-fninput-next\n\n[promise]: https://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/Promise\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[retext-plugins]: https://github.com/retextjs/retext/blob/HEAD/doc/plugins.md#list-of-plugins\n\n[stream]: https://github.com/unifiedjs/unified-stream\n\n[ideas]: https://github.com/unifiedjs/ideas\n\n[preliminary]: https://github.com/retextjs/retext/commit/8fcb1f#diff-168726dbe96b3ce427e7fedce31bb0bc\n\n[externalised]: https://github.com/remarkjs/remark/commit/9892ec#diff-168726dbe96b3ce427e7fedce31bb0bc\n\n[published]: https://github.com/unifiedjs/unified/commit/2ba1cf\n\n[ware]: https://github.com/segmentio/ware\n\n[gatsby]: https://www.gatsbyjs.org\n\n[mdx]: https://mdxjs.com\n\n[jsx]: https://reactjs.org/docs/jsx-in-depth.html\n\n[prettier]: https://prettier.io\n\n[node.js]: https://nodejs.org\n\n[vercel]: https://vercel.com\n\n[netlify]: https://www.netlify.com\n\n[github]: https://github.com\n\n[mozilla]: https://www.mozilla.org\n\n[wordpress]: https://wordpress.com\n\n[adobe]: https://www.adobe.com\n\n[facebook]: https://www.facebook.com\n\n[google]: https://www.google.com\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2015 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unified/-/unified-9.2.0.tgz#67a62c627c40589edebbf60f53edfd4d822027f8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unified/-/unified-9.2.0.tgz",
    "hash": "67a62c627c40589edebbf60f53edfd4d822027f8",
    "integrity": "sha512-vx2Z0vY+a3YoTj8+pttM3tiJHCwY5UFbYdiWrwBEbHmK8pvsPj2rtAX2BFfgXen8T39CJWblWRDT4L5WGXtDdg==",
    "registry": "npm",
    "packageName": "unified",
    "cacheIntegrity": "sha512-vx2Z0vY+a3YoTj8+pttM3tiJHCwY5UFbYdiWrwBEbHmK8pvsPj2rtAX2BFfgXen8T39CJWblWRDT4L5WGXtDdg== sha1-Z6YsYnxAWJ7eu/YPU+39TYIgJ/g="
  },
  "registry": "npm",
  "hash": "67a62c627c40589edebbf60f53edfd4d822027f8"
}