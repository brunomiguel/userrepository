"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_dom_1 = require("react-dom");
var fastdom = require("fastdom");
var context_1 = require("./context");
var methods_1 = require("./methods");
var ResizeProvider = (function (_super) {
    __extends(ResizeProvider, _super);
    function ResizeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            size: null,
        };
        _this.currentListenElement = null;
        _this.onSizeChanged = function (element) {
            fastdom.clear(_this.measureID);
            _this.measureID = fastdom.measure(function () {
                var size = methods_1.getSize(element);
                _this.updateSize(size);
            });
        };
        _this.updateSize = function (size) {
            fastdom.clear(_this.mutateID);
            _this.mutateID = fastdom.mutate(function () {
                _this.setState({ size: size });
            });
        };
        return _this;
    }
    ResizeProvider.prototype.componentDidMount = function () {
        this.updateListenElement();
    };
    ResizeProvider.prototype.componentWillUnmount = function () {
        this.removeListener(this.currentListenElement);
    };
    ResizeProvider.prototype.render = function () {
        return (React.createElement(context_1.Provider, { value: this.state }, this.props.children));
    };
    ResizeProvider.prototype.updateListenElement = function () {
        this.listenTo(this.getElement());
    };
    ResizeProvider.prototype.getElement = function () {
        var element = react_dom_1.findDOMNode(this);
        return element instanceof HTMLElement ? element : null;
    };
    ResizeProvider.prototype.listenTo = function (element) {
        this.removeListener(this.currentListenElement);
        this.currentListenElement = element;
        if (element) {
            methods_1.getResizeDetector().listenTo(element, this.onSizeChanged);
        }
    };
    ResizeProvider.prototype.removeListener = function (element) {
        if (element) {
            methods_1.getResizeDetector().removeListener(element, this.onSizeChanged);
        }
    };
    return ResizeProvider;
}(React.PureComponent));
exports.default = ResizeProvider;
