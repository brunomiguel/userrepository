"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var elementResizeDetectorMaker = require("element-resize-detector");
var shallowequal = require("shallowequal");
var lodash_1 = require("lodash");
function getSize(element) {
    return {
        height: element.clientHeight,
        width: element.clientWidth,
    };
}
exports.getSize = getSize;
function isHeightChanged(sizeA, sizeB) {
    if (sizeA && sizeB) {
        return sizeA.height !== sizeB.height;
    }
    else {
        return true;
    }
}
exports.isHeightChanged = isHeightChanged;
function isWidthChanged(sizeA, sizeB) {
    if (sizeA && sizeB) {
        return sizeA.width !== sizeB.width;
    }
    else {
        return true;
    }
}
exports.isWidthChanged = isWidthChanged;
function compareDataset(currentValue, nextValue, key) {
    if (key !== undefined) {
        return String(currentValue) === String(nextValue);
    }
    else {
        return undefined;
    }
}
function updateElementDataAttributes(element, dataset) {
    var currentDataset = element.dataset;
    var nextDataset = __assign({}, dataset);
    if (!shallowequal(currentDataset, nextDataset, compareDataset)) {
        Object.keys(currentDataset).forEach(function (key) {
            if (currentDataset[key] !== nextDataset[key]) {
                currentDataset[key] = nextDataset[key];
            }
            delete nextDataset[key];
        });
        Object.keys(nextDataset).forEach(function (key) {
            currentDataset[key] = nextDataset[key];
        });
    }
}
exports.updateElementDataAttributes = updateElementDataAttributes;
exports.getResizeDetector = lodash_1.once(function () { return elementResizeDetectorMaker({ strategy: 'scroll' }); });
