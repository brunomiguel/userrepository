{
  "manifest": {
    "name": "@emotion/css",
    "version": "11.7.1",
    "description": "The Next Generation of CSS-in-JS.",
    "main": "dist/emotion-css.cjs.js",
    "module": "dist/emotion-css.esm.js",
    "types": "types/index.d.ts",
    "files": [
      "src",
      "dist",
      "types",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow",
      "create-instance"
    ],
    "scripts": {
      "test:typescript": "dtslint types"
    },
    "dependencies": {
      "@emotion/babel-plugin": "^11.7.1",
      "@emotion/cache": "^11.7.1",
      "@emotion/serialize": "^1.0.0",
      "@emotion/sheet": "^1.0.3",
      "@emotion/utils": "^1.0.0"
    },
    "peerDependencies": {
      "@babel/core": "^7.0.0"
    },
    "peerDependenciesMeta": {
      "@babel/core": {
        "optional": true
      }
    },
    "devDependencies": {
      "@babel/core": "^7.13.10",
      "dtslint": "^0.3.0"
    },
    "author": {
      "name": "Kye Hohenberger"
    },
    "homepage": "https://emotion.sh/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/emotion-js/emotion/tree/main/packages/css"
    },
    "keywords": [
      "styles",
      "emotion",
      "react",
      "css",
      "css-in-js"
    ],
    "bugs": {
      "url": "https://github.com/emotion-js/emotion/issues"
    },
    "umd:main": "dist/emotion-css.umd.min.js",
    "preconstruct": {
      "umdName": "emotion",
      "entrypoints": [
        "./index.js",
        "./create-instance.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@emotion-css-11.7.1-integrity/node_modules/@emotion/css/package.json",
    "readmeFilename": "README.md",
    "readme": "# @emotion/css\n\nThe [@emotion/css](https://www.npmjs.com/package/@emotion/css) package is framework agnostic and the simplest way to use Emotion.\n\n## Table of Contents\n\n- [Quick Start](#quick-start)\n- [API](#api)\n  - [Generate Class Names — `css`](#css)\n  - [Global Styles — `injectGlobal`](#global-styles)\n  - [Animation Keyframes — `keyframes`](#animation-keyframes)\n  - [Composing Class Names — `cx`](#cx)\n- [Custom Instances](#custom-instances)\n- [Server Side Rendering](https://emotion.sh/docs/ssr#api)\n- [Babel Plugin](https://emotion.sh/docs/@emotion/babel-plugin)\n\n## Quick Start\n\nGet up and running with a single import.\n\n```bash\nnpm install --save @emotion/css\n```\n\n```javascript\nimport { css } from '@emotion/css'\n\nconst app = document.getElementById('root')\nconst myStyle = css`\n  color: rebeccapurple;\n`\napp.classList.add(myStyle)\n```\n\n## API\n\n### css\n\nThe `css` function accepts styles as a template literal, object, or array of objects and returns a class name. It is the foundation of emotion.\n\n#### String Styles\n\n```jsx\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\n\nrender(\n  <div\n    className={css`\n      background-color: hotpink;\n      &:hover {\n        color: ${color};\n      }\n    `}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n#### Object Styles\n\n```jsx\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\n\nrender(\n  <div\n    className={css({\n      backgroundColor: 'hotpink',\n      '&:hover': {\n        color\n      }\n    })}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n#### Array of Object Styles\n\n```jsx\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\nconst isDanger = true\n\nrender(\n  <div\n    className={css([\n      {\n        backgroundColor: 'hotpink',\n        '&:hover': {\n          color\n        }\n      },\n      isDanger && {\n        color: 'red'\n      }\n    ])}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n### Global Styles\n\n`injectGlobal` injects styles into the global scope and is useful for applications such as css resets or font faces.\n\n```jsx\nimport { injectGlobal } from '@emotion/css'\n\ninjectGlobal`\n  * {\n    box-sizing: border-box;\n  }\n  @font-face {\n    font-family: 'Patrick Hand SC';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Patrick Hand SC'),\n      local('PatrickHandSC-Regular'),\n      url(https://fonts.gstatic.com/s/patrickhandsc/v4/OYFWCgfCR-7uHIovjUZXsZ71Uis0Qeb9Gqo8IZV7ckE.woff2)\n        format('woff2');\n    unicode-range: U+0100-024f, U+1-1eff,\n      U+20a0-20ab, U+20ad-20cf, U+2c60-2c7f,\n      U+A720-A7FF;\n  }\n`\n```\n\n### Animation Keyframes\n\n`keyframes` generates a unique animation name that can be used to animate elements with CSS animations.\n\n**String Styles**\n\n```jsx\n// @live\nimport { css, keyframes } from '@emotion/css'\n\nconst bounce = keyframes`\n  from, 20%, 53%, 80%, to {\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transform: translate3d(0, -30px, 0);\n  }\n\n  70% {\n    transform: translate3d(0, -15px, 0);\n  }\n\n  90% {\n    transform: translate3d(0,-4px,0);\n  }\n`\n\nrender(\n  <img\n    className={css`\n      width: 96px;\n      height: 96px;\n      border-radius: 50%;\n      animation: ${bounce} 1s ease infinite;\n      transform-origin: center bottom;\n    `}\n    src={logoUrl}\n  />\n)\n```\n\n**Object Styles**\n\n```jsx\n// @live\nimport { css, keyframes } from '@emotion/css'\n\nconst bounce = keyframes({\n  'from, 20%, 53%, 80%, to': {\n    transform: 'translate3d(0,0,0)'\n  },\n  '40%, 43%': {\n    transform: 'translate3d(0, -30px, 0)'\n  },\n  '70%': {\n    transform: 'translate3d(0, -15px, 0)'\n  },\n  '90%': {\n    transform: 'translate3d(0, -4px, 0)'\n  }\n})\n\nrender(\n  <img\n    src={logoUrl}\n    className={css({\n      width: 96,\n      height: 96,\n      borderRadius: '50%',\n      animation: `${bounce} 1s ease infinite`,\n      transformOrigin: 'center bottom'\n    })}\n  />\n)\n```\n\n### cx\n\n`cx` is emotion's version of the popular [`classnames` library](https://github.com/JedWatson/classnames). The key advantage of `cx` is that it detects emotion generated class names ensuring styles are overwritten in the correct order. Emotion generated styles are applied from left to right. Subsequent styles overwrite property values of previous styles.\n\n**Combining class names**\n\n```jsx\nimport { cx, css } from '@emotion/css'\n\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\nconst cls2 = css`\n  font-size: 20px;\n  background: blue;\n`\n\n<div className={cx(cls1, cls2)} />\n```\n\n**Conditional class names**\n\n```jsx\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\nconst cls2 = css`\n  font-size: 20px;\n  background: blue;\n`\n\nconst foo = true\nconst bar = false\n\n\n<div\n  className={cx(\n    { [cls1]: foo },\n    { [cls2]: bar }\n  )}\n/>\n```\n\n**Using class names from other sources**\n\n```jsx\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\n\n<div\n  className={cx(cls1, 'profile')}\n/>\n```\n\n## Custom Instances\n\nWith `@emotion/css/create-instance`, you can provide custom options to Emotion's cache.\n\nThe main `@emotion/css` entrypoint can be thought of as a call to `@emotion/css/create-instance` with sensible defaults for most applications.\n\n```javascript\nimport createEmotion from '@emotion/css/create-instance'\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  cache\n} = createEmotion()\n```\n\n### Upside\n\n- Calling it directly will allow for some low level customization.\n\n- Create custom names for emotion APIs to help with migration from other, similar libraries.\n\n- Could set custom `key` to something other than `css`\n\n### Downside\n\n- Introduces some amount of complexity to your application that can vary depending on developer experience.\n\n- Required to keep up with changes in the repo and API at a lower level than if using `@emotion/css` directly\n\n### Primary use cases\n\n- Using emotion in embedded contexts such as an `<iframe/>`\n\n- Setting a [nonce](/packages/cache#nonce-string) on any `<style/>` tag emotion creates for security purposes\n\n- Use emotion with a container different than `document.head` for style elements\n\n- Using emotion with custom stylis plugins\n\n## Multiple instances in a single app example\n\n```jsx\nimport createEmotion from '@emotion/css/create-instance'\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  cache\n} = createEmotion({\n  // The key option is required when there will be multiple instances in a single app\n  key: 'some-key'\n})\n```\n\n## Options\n\n`createEmotion` accepts the same options as [createCache](/packages/cache#options) from `@emotion/cache`.\n",
    "licenseText": "MIT License\n\nCopyright (c) Emotion team and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@emotion/css/-/css-11.7.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@emotion/css/-/css-11.7.1.tgz",
    "hash": "",
    "integrity": "sha512-RUUgPlMZunlc7SE5A6Hg+VWRzb2cU6O9xlV78KCFgcnl25s7Qz/20oQg71iKudpLqk7xj0vhbJlwcJJMT0BOZg==",
    "registry": "npm",
    "packageName": "@emotion/css",
    "cacheIntegrity": "sha512-RUUgPlMZunlc7SE5A6Hg+VWRzb2cU6O9xlV78KCFgcnl25s7Qz/20oQg71iKudpLqk7xj0vhbJlwcJJMT0BOZg== sha1-UWtxc0DTawu9IwS6fhoJDoZvisw="
  },
  "registry": "npm",
  "hash": "4545203e5319ba795ced213903a1e0f95591cdbd9c53a3bdc6557bf0a08581c9e5db9b3b433ff6d28420ef588ab9da4baa4ef18f4be16c997070924c4f404e66"
}