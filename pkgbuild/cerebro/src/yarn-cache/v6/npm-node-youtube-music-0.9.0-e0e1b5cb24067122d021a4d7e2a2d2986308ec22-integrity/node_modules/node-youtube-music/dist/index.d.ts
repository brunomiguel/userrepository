declare enum AccountType {
    REGULAR = "regular",
    VERIFIED_ARTIST = "BADGE_STYLE_TYPE_VERIFIED_ARTIST"
}
declare enum AlbumType {
    ep = "EP",
    album = "Album",
    single = "Single"
}
declare enum PageType {
    artist = "MUSIC_PAGE_TYPE_ARTIST",
    album = "MUSIC_PAGE_TYPE_ALBUM",
    playlist = "MUSIC_PAGE_TYPE_PLAYLIST"
}
interface MusicVideo {
    youtubeId?: string;
    title?: string;
    thumbnailUrl?: string;
    artists?: {
        name: string;
        id?: string;
    }[];
    album?: string;
    isExplicit?: boolean;
    duration?: {
        label: string;
        totalSeconds: number;
    };
}
interface AlbumPreview {
    albumId?: string;
    title?: string;
    type?: AlbumType;
    thumbnailUrl?: string;
    artist?: string;
    artistId?: string;
    year?: string;
    isExplicit?: boolean;
}
interface ArtistPreview {
    name?: string;
    artistId?: string;
    thumbnailUrl?: string;
    subscribers?: string;
}
interface Artist {
    artistId?: string;
    name?: string;
    description?: string;
    thumbnails?: any[];
    songsPlaylistId?: string;
    albums?: AlbumPreview[];
    singles?: AlbumPreview[];
    suggestedArtists?: ArtistPreview[];
    subscribers?: string;
}
interface PlaylistPreview {
    playlistId?: string;
    title?: string;
    thumbnailUrl?: string;
    totalSongs?: number;
}

declare const parseSearchMusicsBody: (body: {
    contents: any;
}) => MusicVideo[];
declare function searchMusics(query: string): Promise<MusicVideo[]>;

declare const parseSearchAlbumsBody: (body: any) => AlbumPreview[];
declare function searchAlbums(query: string): Promise<AlbumPreview[]>;

declare const parseSearchPlaylistsBody: (body: any, onlyOfficialPlaylists: boolean) => PlaylistPreview[];
declare function searchPlaylists(query: string, options?: {
    onlyOfficialPlaylists?: boolean;
}): Promise<PlaylistPreview[]>;

declare const parseGetSuggestionsBody: (body: {
    contents: {
        singleColumnMusicWatchNextResultsRenderer: {
            tabbedRenderer: {
                watchNextTabbedResultsRenderer: {
                    tabs: {
                        tabRenderer: {
                            content: {
                                musicQueueRenderer: {
                                    content: {
                                        playlistPanelRenderer: {
                                            contents: [
                                            ];
                                        };
                                    };
                                };
                            };
                        };
                    }[];
                };
            };
        };
    };
}) => MusicVideo[];
declare function getSuggestions(videoId: string): Promise<MusicVideo[]>;

declare const parseListMusicsFromAlbumBody: (body: any) => MusicVideo[];
declare function listMusicsFromAlbum(albumId: string): Promise<MusicVideo[]>;

declare const parseListMusicsFromPlaylistBody: (body: {
    contents: {
        singleColumnBrowseResultsRenderer: {
            tabs: {
                tabRenderer: {
                    content: {
                        sectionListRenderer: {
                            contents: {
                                musicPlaylistShelfRenderer: {
                                    contents: [
                                    ];
                                };
                            }[];
                        };
                    };
                };
            }[];
        };
    };
}) => MusicVideo[];
declare function listMusicsFromPlaylist(playlistId: string): Promise<MusicVideo[]>;

declare const parseArtistsSearchBody: (body: any) => ArtistPreview[];
declare function searchArtists(query: string, options?: {
    lang?: string;
    country?: string;
}): Promise<ArtistPreview[]>;

declare function getArtist(artistId: string, options?: {
    lang: string;
    country: string;
}): Promise<Artist>;

export { AccountType, AlbumPreview, AlbumType, Artist, ArtistPreview, MusicVideo, PageType, PlaylistPreview, getArtist, getSuggestions, listMusicsFromAlbum, listMusicsFromPlaylist, parseArtistsSearchBody, parseGetSuggestionsBody, parseListMusicsFromAlbumBody, parseListMusicsFromPlaylistBody, parseSearchAlbumsBody, parseSearchMusicsBody, parseSearchPlaylistsBody, searchAlbums, searchArtists, searchMusics, searchPlaylists };
