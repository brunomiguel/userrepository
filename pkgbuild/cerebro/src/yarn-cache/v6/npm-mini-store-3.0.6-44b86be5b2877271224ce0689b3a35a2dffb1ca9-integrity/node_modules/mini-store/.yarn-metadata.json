{
  "manifest": {
    "name": "mini-store",
    "version": "3.0.6",
    "main": "cjs/index.js",
    "module": "esm/index.js",
    "types": "cjs/index.d.ts",
    "license": "MIT",
    "homepage": "https://github.com/yesmeck/mini-store",
    "repository": {
      "type": "git",
      "url": "https://github.com/yesmeck/mini-store.git"
    },
    "scripts": {
      "build": "npm run build:esm && npm run build:cjs",
      "build:esm": "tsc --declaration",
      "build:cjs": "tsc  --declaration --module commonjs --outDir cjs",
      "prepack": "npm run build",
      "release": "standard-version",
      "commitmsg": "commitlint -E GIT_PARAMS",
      "test": "jest src --coverage"
    },
    "files": [
      "cjs",
      "esm"
    ],
    "dependencies": {
      "hoist-non-react-statics": "^3.3.2",
      "shallowequal": "^1.0.2"
    },
    "devDependencies": {
      "@types/hoist-non-react-statics": "^3.3.1",
      "@types/shallowequal": "^1.1.1",
      "@commitlint/cli": "^7.0.0",
      "@commitlint/config-conventional": "^7.0.1",
      "@types/enzyme": "^3.10.5",
      "@types/jest": "^25.1.4",
      "@types/react": "^16.9.26",
      "enzyme": "^3.1.0",
      "enzyme-adapter-react-16": "^1.0.2",
      "husky": "^0.14.3",
      "jest": "^25.2.2",
      "react": "^16.0.0",
      "react-dom": "^16.0.0",
      "standard-version": "^8.0.1",
      "ts-jest": "^25.2.1",
      "typescript": "^3.8.3"
    },
    "peerDependencies": {
      "react": ">=16.9.0",
      "react-dom": ">=16.9.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-mini-store-3.0.6-44b86be5b2877271224ce0689b3a35a2dffb1ca9-integrity/node_modules/mini-store/package.json",
    "readmeFilename": "README.md",
    "readme": "# mini-store\n\n[![Travis](https://img.shields.io/travis/yesmeck/mini-store.svg?style=flat-square)](https://travis-ci.org/yesmeck/mini-store)\n\nA state store for React component.\n\n## Motivation\n\nWhen you want to share a component's state to another one, a commom pattern in React world is [lifting state up](https://reactjs.org/docs/lifting-state-up.html#lifting-state-up). But one problem of this pattern is performance, assume we have a component in following hierarchy:\n\n```javascript\n<Parent>\n  <ChildA />\n  <ChildB />\n  <ChildC />\n</Parent>\n```\n\n`ChildA` want to share state with `ChildB`, so you lifting `ChildA`'s state up to `Parent`. Now, when `ChildA`'s state changes, the whole `Parent` will rerender, includes `ChildC` which should not happen.\n\nRedux do a good job at this situation throgh keeping all state in store, then component can subscribe state's changes, and only connected components will rerender. But `redux` + `react-redux` is overkill when you are writing a component library. So I wrote this little library, It's like Redux's store without \"reducer\" and \"dispatch\".\n\n## Example\n\n[See this demo online.](https://codesandbox.io/s/mq6223x08p)\n\n```javascript\nimport { Provider, create, connect } from 'mini-store';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.store = create({\n      count: 0,\n    });\n  }\n\n  render() {\n    return (\n      <Provider store={this.store}>\n        <div>\n          <Buttons />\n          <Result />\n        </div>\n      </Provider>\n    )\n  }\n}\n\n@connect()\nclass Buttons extends React.Component {\n  handleClick = (step) => () => {\n    const { store } = this.props;\n    const { count } = store.getState();\n    store.setState({ count: count + step });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick(1)}>+</button>\n        <button onClick={this.handleClick(-1)}>-</button>\n      </div>\n    );\n  }\n}\n\n@connect((state) => ({ count: state.count }))\nclass Result extends React.Component {\n  render() {\n    return (\n      <div>{this.props.count}</div>\n    );\n  };\n}\n```\n\n## API\n\n### `create(initialState)`\n\nCreates a store that holds the state. `initialState` is plain object.\n\n### `<Provider store>`\n\nMakes the store available to the connect() calls in the component hierarchy below.\n\n### `connect(mapStateToProps)`\n\nConnects a React component to the store. It works like Redux's `connect`, but only accept `mapStateToProps`. The connected component also receive `store` as a prop, you can call `setState` directly on store.\n\n## License\n\nMIT\n",
    "description": "[![Travis](https://img.shields.io/travis/yesmeck/mini-store.svg?style=flat-square)](https://travis-ci.org/yesmeck/mini-store)"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mini-store/-/mini-store-3.0.6.tgz#44b86be5b2877271224ce0689b3a35a2dffb1ca9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mini-store/-/mini-store-3.0.6.tgz",
    "hash": "44b86be5b2877271224ce0689b3a35a2dffb1ca9",
    "integrity": "sha512-YzffKHbYsMQGUWQRKdsearR79QsMzzJcDDmZKlJBqt5JNkqpyJHYlK6gP61O36X+sLf76sO9G6mhKBe83gIZIQ==",
    "registry": "npm",
    "packageName": "mini-store",
    "cacheIntegrity": "sha512-YzffKHbYsMQGUWQRKdsearR79QsMzzJcDDmZKlJBqt5JNkqpyJHYlK6gP61O36X+sLf76sO9G6mhKBe83gIZIQ== sha1-RLhr5bKHcnEiTOBomzo1ot/7HKk="
  },
  "registry": "npm",
  "hash": "44b86be5b2877271224ce0689b3a35a2dffb1ca9"
}