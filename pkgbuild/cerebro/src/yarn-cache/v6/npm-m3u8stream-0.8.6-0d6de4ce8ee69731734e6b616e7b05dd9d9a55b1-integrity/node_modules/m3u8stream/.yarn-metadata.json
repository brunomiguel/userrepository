{
  "manifest": {
    "name": "m3u8stream",
    "description": "Reads segments from a m3u8 or dash playlist into a consumable stream.",
    "keywords": [
      "m3u8",
      "hls",
      "dash",
      "live",
      "playlist",
      "segments",
      "stream"
    ],
    "version": "0.8.6",
    "repository": {
      "type": "git",
      "url": "git://github.com/fent/node-m3u8stream.git"
    },
    "author": {
      "name": "fent",
      "email": "fentbox@gmail.com",
      "url": "https://github.com/fent"
    },
    "main": "./dist/index.js",
    "files": [
      "dist"
    ],
    "scripts": {
      "prepare": "tsc -p tsconfig.build.json",
      "build": "tsc -p tsconfig.build.json",
      "test": "nyc --extension .ts --reporter=lcov --reporter=text-summary npm run test:unit",
      "test:unit": "mocha -- --require ts-node/register test/*-test.ts",
      "lint": "eslint ./src ./test",
      "lint:fix": "eslint --fix ./src ./test"
    },
    "dependencies": {
      "miniget": "^4.2.2",
      "sax": "^1.2.4"
    },
    "devDependencies": {
      "@types/mocha": "^7.0.0",
      "@types/node": "^17.0.8",
      "@types/sax": "^1.0.1",
      "@types/sinon": "^9.0.8",
      "@typescript-eslint/eslint-plugin": "^4.8.2",
      "@typescript-eslint/parser": "^4.8.2",
      "eslint": "^7.14.0",
      "mocha": "^7.0.1",
      "nock": "^13.0.5",
      "nyc": "^15.0.0",
      "sinon": "^9.2.0",
      "ts-node": "^9.0.0",
      "typescript": "^4.0.5"
    },
    "engines": {
      "node": ">=12"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-m3u8stream-0.8.6-0d6de4ce8ee69731734e6b616e7b05dd9d9a55b1-integrity/node_modules/m3u8stream/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-m3u8stream\n\nReads segments from a [m3u8 playlist][1] or [DASH MPD file][2] into a consumable stream.\n\n[1]: https://tools.ietf.org/html/draft-pantos-http-live-streaming-20\n[2]: https://dashif.org/docs/DASH-IF-IOP-v4.2-clean.pdf\n\n![Depfu](https://img.shields.io/depfu/fent/node-m3u8stream)\n[![codecov](https://codecov.io/gh/fent/node-m3u8stream/branch/master/graph/badge.svg)](https://codecov.io/gh/fent/node-m3u8stream)\n\n\n# Usage\n\n```js\nconst fs = require('fs');\nconst m3u8stream = require('m3u8stream')\n\nm3u8stream('http://somesite.com/link/to/the/playlist.m3u8')\n    .pipe(fs.createWriteStream('videofile.mp4'));\n```\n\n\n# API\n\n### m3u8stream(url, [options])\n\nCreates a readable stream of binary media data. `options` can have the following\n\n* `begin` - Where to begin playing the video. Accepts an absolute unix timestamp or date and a relative time in the formats `1:23:45.123` and `1m2s`.\n* `liveBuffer` - How much buffer in milliseconds to have for live streams. Default is `20000`.\n* `chunkReadahead` - How many chunks to preload ahead. Default is `3`.\n* `highWaterMark` - How much of the download to buffer into the stream. See [node's docs](https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options) for more. Note that the actual amount buffered can be higher since each chunk request maintains its own buffer.\n* `requestOptions` - Any options you want to pass to [miniget](https://github.com/fent/node-miniget), such as `headers`.\n* `parser` - Either \"m3u8\" or \"dash-mpd\". Defaults to guessing based on the playlist url ending in `.m3u8` or `.mpd`.\n* `id` - For playlist containing multiple media options. If not given, the first representation will be picked.\n\n### Stream#end()\n\nIf called, stops requesting segments, and refreshing the playlist.\n\n#### Event: progress\n* `Object` - Current segment with the following fields,\n  - `number` - num\n  - `number` - size\n  - `number` - duration\n  - `string` - url\n* `number` - Total number of segments.\n* `number` - Bytes downloaded up to this point.\n\nFor static non-live playlists, emitted each time a segment has finished downloading. Since total download size is unknown until all segment endpoints are hit, progress is calculated based on how many segments are available.\n\n#### miniget events\n\nAll [miniget events](https://github.com/fent/node-miniget#event-redirect) are forwarded and can be listened to from the returned stream.\n\n### m3u8stream.parseTimestamp(time)\n\nConverts human friendly time to milliseconds. Supports the format  \n00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.  \nAnd 0ms, 0s, 0m, 0h, and together 1m1s.\n\n* `time` - A string (or number) giving the user-readable input data\n\n### Limitations\n\nCurrently, it does not support [encrypted media segments](https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-4.3.2.4). This is because the sites where this was tested on and intended for, YouTube and Twitch, don't use it.\n\nThis does not parse master playlists, only media playlists. If you want to parse a master playlist to get links to media playlists, you can try the [m3u8 module](https://github.com/tedconf/node-m3u8).\n\n\n# Install\n\n    npm install m3u8stream\n\n\n# Tests\nTests are written with [mocha](https://mochajs.org)\n\n```bash\nnpm test\n```\n",
    "licenseText": "MIT License\n\nCopyright (C) 2017 by fent\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/m3u8stream/-/m3u8stream-0.8.6.tgz#0d6de4ce8ee69731734e6b616e7b05dd9d9a55b1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/m3u8stream/-/m3u8stream-0.8.6.tgz",
    "hash": "0d6de4ce8ee69731734e6b616e7b05dd9d9a55b1",
    "integrity": "sha512-LZj8kIVf9KCphiHmH7sbFQTVe4tOemb202fWwvJwR9W5ENW/1hxJN6ksAWGhQgSBSa3jyWhnjKU1Fw1GaOdbyA==",
    "registry": "npm",
    "packageName": "m3u8stream",
    "cacheIntegrity": "sha512-LZj8kIVf9KCphiHmH7sbFQTVe4tOemb202fWwvJwR9W5ENW/1hxJN6ksAWGhQgSBSa3jyWhnjKU1Fw1GaOdbyA== sha1-DW3kzo7mlzFzTmthbnsF3Z2aVbE="
  },
  "registry": "npm",
  "hash": "0d6de4ce8ee69731734e6b616e7b05dd9d9a55b1"
}