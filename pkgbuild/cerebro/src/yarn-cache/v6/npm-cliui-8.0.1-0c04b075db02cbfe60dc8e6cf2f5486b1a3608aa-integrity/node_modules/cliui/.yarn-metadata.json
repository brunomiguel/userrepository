{
  "manifest": {
    "name": "cliui",
    "version": "8.0.1",
    "description": "easily create complex multi-column command-line-interfaces",
    "main": "build/index.cjs",
    "exports": {
      ".": [
        {
          "import": "./index.mjs",
          "require": "./build/index.cjs"
        },
        "./build/index.cjs"
      ]
    },
    "type": "module",
    "module": "./index.mjs",
    "scripts": {
      "check": "standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'",
      "fix": "standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'",
      "pretest": "rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs",
      "test": "c8 mocha ./test/*.cjs",
      "test:esm": "c8 mocha ./test/esm/cliui-test.mjs",
      "postest": "check",
      "coverage": "c8 report --check-coverage",
      "precompile": "rimraf build",
      "compile": "tsc",
      "postcompile": "npm run build:cjs",
      "build:cjs": "rollup -c",
      "prepare": "npm run compile"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/yargs/cliui.git"
    },
    "standard": {
      "ignore": [
        "**/example/**"
      ],
      "globals": [
        "it"
      ]
    },
    "keywords": [
      "cli",
      "command-line",
      "layout",
      "design",
      "console",
      "wrap",
      "table"
    ],
    "author": {
      "name": "Ben Coe",
      "email": "ben@npmjs.com"
    },
    "license": "ISC",
    "dependencies": {
      "string-width": "^4.2.0",
      "strip-ansi": "^6.0.1",
      "wrap-ansi": "^7.0.0"
    },
    "devDependencies": {
      "@types/node": "^14.0.27",
      "@typescript-eslint/eslint-plugin": "^4.0.0",
      "@typescript-eslint/parser": "^4.0.0",
      "c8": "^7.3.0",
      "chai": "^4.2.0",
      "chalk": "^4.1.0",
      "cross-env": "^7.0.2",
      "eslint": "^7.6.0",
      "eslint-plugin-import": "^2.22.0",
      "eslint-plugin-node": "^11.1.0",
      "gts": "^3.0.0",
      "mocha": "^10.0.0",
      "rimraf": "^3.0.2",
      "rollup": "^2.23.1",
      "rollup-plugin-ts": "^3.0.2",
      "standardx": "^7.0.0",
      "typescript": "^4.0.0"
    },
    "files": [
      "build",
      "index.mjs",
      "!*.d.ts"
    ],
    "engines": {
      "node": ">=12"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cliui-8.0.1-0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa-integrity/node_modules/cliui/package.json",
    "readmeFilename": "README.md",
    "readme": "# cliui\n\n![ci](https://github.com/yargs/cliui/workflows/ci/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/cliui.svg)](https://www.npmjs.com/package/cliui)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n![nycrc config on GitHub](https://img.shields.io/nycrc/yargs/cliui)\n\neasily create complex multi-column command-line-interfaces.\n\n## Example\n\n```js\nconst ui = require('cliui')()\n\nui.div('Usage: $0 [command] [options]')\n\nui.div({\n  text: 'Options:',\n  padding: [2, 0, 1, 0]\n})\n\nui.div(\n  {\n    text: \"-f, --file\",\n    width: 20,\n    padding: [0, 4, 0, 4]\n  },\n  {\n    text: \"the file to load.\" +\n      chalk.green(\"(if this description is long it wraps).\")\n    ,\n    width: 20\n  },\n  {\n    text: chalk.red(\"[required]\"),\n    align: 'right'\n  }\n)\n\nconsole.log(ui.toString())\n```\n\n## Deno/ESM Support\n\nAs of `v7` `cliui` supports [Deno](https://github.com/denoland/deno) and\n[ESM](https://nodejs.org/api/esm.html#esm_ecmascript_modules):\n\n```typescript\nimport cliui from \"https://deno.land/x/cliui/deno.ts\";\n\nconst ui = cliui({})\n\nui.div('Usage: $0 [command] [options]')\n\nui.div({\n  text: 'Options:',\n  padding: [2, 0, 1, 0]\n})\n\nui.div({\n  text: \"-f, --file\",\n  width: 20,\n  padding: [0, 4, 0, 4]\n})\n\nconsole.log(ui.toString())\n```\n\n<img width=\"500\" src=\"screenshot.png\">\n\n## Layout DSL\n\ncliui exposes a simple layout DSL:\n\nIf you create a single `ui.div`, passing a string rather than an\nobject:\n\n* `\\n`: characters will be interpreted as new rows.\n* `\\t`: characters will be interpreted as new columns.\n* `\\s`: characters will be interpreted as padding.\n\n**as an example...**\n\n```js\nvar ui = require('./')({\n  width: 60\n})\n\nui.div(\n  'Usage: node ./bin/foo.js\\n' +\n  '  <regex>\\t  provide a regex\\n' +\n  '  <glob>\\t  provide a glob\\t [required]'\n)\n\nconsole.log(ui.toString())\n```\n\n**will output:**\n\n```shell\nUsage: node ./bin/foo.js\n  <regex>  provide a regex\n  <glob>   provide a glob          [required]\n```\n\n## Methods\n\n```js\ncliui = require('cliui')\n```\n\n### cliui({width: integer})\n\nSpecify the maximum width of the UI being generated.\nIf no width is provided, cliui will try to get the current window's width and use it, and if that doesn't work, width will be set to `80`.\n\n### cliui({wrap: boolean})\n\nEnable or disable the wrapping of text in a column.\n\n### cliui.div(column, column, column)\n\nCreate a row with any number of columns, a column\ncan either be a string, or an object with the following\noptions:\n\n* **text:** some text to place in the column.\n* **width:** the width of a column.\n* **align:** alignment, `right` or `center`.\n* **padding:** `[top, right, bottom, left]`.\n* **border:** should a border be placed around the div?\n\n### cliui.span(column, column, column)\n\nSimilar to `div`, except the next row will be appended without\na new line being created.\n\n### cliui.resetOutput()\n\nResets the UI elements of the current cliui instance, maintaining the values\nset for `width` and `wrap`.\n",
    "licenseText": "Copyright (c) 2015, Contributors\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice\nappear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE\nLIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cliui/-/cliui-8.0.1.tgz#0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cliui/-/cliui-8.0.1.tgz",
    "hash": "0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa",
    "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
    "registry": "npm",
    "packageName": "cliui",
    "cacheIntegrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ== sha1-DASwddsCy/5g3I5s8vVIaxo2CKo="
  },
  "registry": "npm",
  "hash": "0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa"
}