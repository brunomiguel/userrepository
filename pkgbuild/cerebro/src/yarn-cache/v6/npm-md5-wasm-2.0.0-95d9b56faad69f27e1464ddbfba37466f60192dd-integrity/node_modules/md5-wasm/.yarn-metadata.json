{
  "manifest": {
    "name": "md5-wasm",
    "version": "2.0.0",
    "description": "Asynchronous MD5 calculator, employing WebAssembly for larger files",
    "main": "./md5-wasm.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "webpack"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/briantbutton/md5-wasm"
    },
    "keywords": [
      "md5",
      "fast",
      "promise",
      "async",
      "javascript",
      "WebAssembly"
    ],
    "author": {
      "name": "Brian T Button"
    },
    "license": "MIT",
    "dependencies": {},
    "devDependencies": {},
    "bugs": {
      "url": "https://github.com/briantbutton/md5-wasm/issues"
    },
    "homepage": "https://github.com/briantbutton/md5-wasm#README.md",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-md5-wasm-2.0.0-95d9b56faad69f27e1464ddbfba37466f60192dd-integrity/node_modules/md5-wasm/package.json",
    "readmeFilename": "README.md",
    "readme": "# MD5-WASM\n\n**MD5-WASM** is a *fast* asynchronous md5 calculator, optimized for large files.&nbsp;\nIt returns a Promise which resolves to the md5 string.&nbsp;\nWebAssembly is seamlessly applied to calculate values for files above a certain size threshold.\n\n### Highlights\n\n&#9679; 30x faster than the most popular md5 utility&nbsp;   \n&#9679; Server-side (NodeJS) or client-side (browser)&nbsp;   \n&#9679; Non-blocking, uses Promise syntax&nbsp;   \n\n## Raison d'Ãªtre &nbsp; \n\n### Faster and non-blocking\n\nOur md5 hashing was initially performed using this simple and popular utility:&nbsp; \nhttps://www.npmjs.com/package/md5&nbsp;\n(called &quot;**MD5**&quot; herein)&nbsp;&nbsp; \nHowever, **MD5** is synchronous, blocking code execution, and slow &mdash; impractically slow for video files.&nbsp; \n(On our low-powered server platform, we clock it at about 1 second per megabyte.)&nbsp; \n\n### 30x faster?\n\nOn larger files, yes.&nbsp; \nHere are the benchmarks, comparing **MD5** to **MD5-WASM**, run on our (slow) production server platform using NodeJS (v10.18.1) on Ubuntu.&nbsp; \n\n\t                   ELAPSED MILLISECONDS        MEGABYTES PER SECOND\n\t                   MD5         MD5-WASM         MD5        MD5-WASM\n\t0.2 Mbytes          260            90          1.05            2.2           \n\t0.3 Mbytes          390           300          0.98            1.4            \n\t0.5 Mbytes          520           360          0.98            1.4            \n\t  1 Mbytes        1,000           170          1.00            8.5          \n\t  2 Mbytes        2,000           240          1.00            8.5          \n\t  4 Mbytes        4,000           330          1.00           12\n\t  8 Mbytes        7,600           400          1.05           20\n\t 12 Mbytes       12,400           490          0.96           24\n\t 24 Mbytes       23,600           700          1.02           34\n\t 37 Mbytes       38,500           990          0.96           37\n\n\nOn our benchmark system, **MD5-WASM** gives up 150 ms to complete WebAssembly instantiation.&nbsp; \nAfter that, the relative performance gap between the two keeps growing, reaching 30x for a 37Mbyte file.&nbsp; \n\n### Why the huge improvement?\n\nIt would not be surprising to see a 3x improvement up to 5x improvement from WebAssembly but 30x is definitely surprising.&nbsp; \nFor md5 calculation, WebAssembly holds one other big advantage.&nbsp; \nAny JavaScript implementation does a lot of number format conversion during md5 calculation, while WebAssembly implementations need not.&nbsp; \n\nJavaScript runs native with 64-bit floating point numbers but all bitwise operations are done with 32-bit integers.&nbsp;\nSince calculating a checksum is just scads of bitwise operations, Javascript implementations spend more time converting between number formats than they do on the checksum itself.&nbsp; \n\n### Is there a downside?\n\nYou need do nothing different to accomodate WebAssembly &mdash; **MD5-WASM** loads in a browser or Node environment just like a pure JavaScript utility would.&nbsp; \nUnlike **MD5**, **MD5-WASM** does not take parameters in a string format &mdash; you must convert the string before injecting it into **MD5-WASM**.&nbsp; \nThere is no synchronous version; you must use a promise instead of a simple blocking function call.&nbsp; \n\n## Javascript Calls And Parameters\n\n### Usage example\n\n\tlet data  = contentsOfAFile();                        // Get the data any which way you can\n\n\t// 'data' must be a Buffer, ArrayBuffer or Uint8Array\n\tmd5WASM(data)                                         // Our function\n\t    .then( hash => console.log(hash) )\n\t    .catch( err => console.log(err) )\n\n## Loading MD5-WASM\n\nAt less than 32K, the code file does not justify minification.&nbsp;\nIt is all-inclusive and has no external dependencies.&nbsp;\n\n### HTML tag\n\n\t<script type=\"text/javascript\" src=\"path/md5-wasm.js\"></script>\n\nYou will find the function at *window.md5WASM*\n\n### In NodeJS\n\n\tmd5WASM      = require(\"md5-wasm\");\n\n## Problems, questions\n\nPlease open an issue at the GitHub repo.\n",
    "licenseText": "Copyright (c) 2020 Brian Button\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/md5-wasm/-/md5-wasm-2.0.0.tgz#95d9b56faad69f27e1464ddbfba37466f60192dd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/md5-wasm/-/md5-wasm-2.0.0.tgz",
    "hash": "95d9b56faad69f27e1464ddbfba37466f60192dd",
    "integrity": "sha512-DfF7RjdDIJNF6pkQ85tmb65G+Gi6QL41y5DV8HcdloCQunMCeNoUgQrtZVMyIqgGdmnSS3/phOAnbyJs4EyGpg==",
    "registry": "npm",
    "packageName": "md5-wasm",
    "cacheIntegrity": "sha512-DfF7RjdDIJNF6pkQ85tmb65G+Gi6QL41y5DV8HcdloCQunMCeNoUgQrtZVMyIqgGdmnSS3/phOAnbyJs4EyGpg== sha1-ldm1b6rWnyfhRk3b+6N0ZvYBkt0="
  },
  "registry": "npm",
  "hash": "95d9b56faad69f27e1464ddbfba37466f60192dd"
}