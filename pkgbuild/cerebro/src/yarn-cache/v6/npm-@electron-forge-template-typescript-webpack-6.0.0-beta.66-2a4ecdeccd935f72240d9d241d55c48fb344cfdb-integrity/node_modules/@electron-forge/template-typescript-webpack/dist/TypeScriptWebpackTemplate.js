"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class TypeScriptWebpackTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory, options) {
        await super.initializeTemplate(directory, options);
        await (0, _asyncOra).asyncOra('Setting up Forge configuration', async ()=>{
            const packageJSONPath = _path.default.resolve(directory, 'package.json');
            const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
            packageJSON.main = '.webpack/main';
            packageJSON.config.forge.plugins = packageJSON.config.forge.plugins || [];
            packageJSON.config.forge.plugins.push([
                '@electron-forge/plugin-webpack',
                {
                    mainConfig: './webpack.main.config.js',
                    renderer: {
                        config: './webpack.renderer.config.js',
                        entryPoints: [
                            {
                                html: './src/index.html',
                                js: './src/renderer.ts',
                                name: 'main_window'
                            }, 
                        ]
                    }
                }, 
            ]);
            // Configure scripts for TS template
            packageJSON.scripts.lint = 'eslint --ext .ts,.tsx .';
            await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
                spaces: 2
            });
        });
        await (0, _asyncOra).asyncOra('Setting up TypeScript configuration', async ()=>{
            const filePath = (fileName)=>_path.default.join(directory, 'src', fileName)
            ;
            // Copy Webpack files
            await this.copyTemplateFile(directory, 'webpack.main.config.js');
            await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
            await this.copyTemplateFile(directory, 'webpack.rules.js');
            await this.copyTemplateFile(directory, 'webpack.plugins.js');
            await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), (line)=>{
                if (line.includes('link rel="stylesheet"')) return '';
                return line;
            });
            // Copy tsconfig with a small set of presets
            await this.copyTemplateFile(directory, 'tsconfig.json');
            // Copy eslint config with recommended settings
            await this.copyTemplateFile(directory, '.eslintrc.json');
            // Remove index.js and replace with index.ts
            await _fsExtra.default.remove(filePath('index.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.ts');
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.ts');
        });
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new TypeScriptWebpackTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBCYXNlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtYmFzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNsYXNzIFR5cGVTY3JpcHRXZWJwYWNrVGVtcGxhdGUgZXh0ZW5kcyBCYXNlVGVtcGxhdGUge1xuICBwdWJsaWMgdGVtcGxhdGVEaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAndG1wbCcpO1xuXG4gIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZywgb3B0aW9uczogSW5pdFRlbXBsYXRlT3B0aW9ucykge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3RvcnksIG9wdGlvbnMpO1xuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIEZvcmdlIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTlBhdGggPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAncGFja2FnZS5qc29uJyk7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IGZzLnJlYWRKc29uKHBhY2thZ2VKU09OUGF0aCk7XG5cbiAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UucGx1Z2lucyA9IHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZS5wbHVnaW5zIHx8IFtdO1xuICAgICAgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlLnBsdWdpbnMucHVzaChbXG4gICAgICAgICdAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2snLFxuICAgICAgICB7XG4gICAgICAgICAgbWFpbkNvbmZpZzogJy4vd2VicGFjay5tYWluLmNvbmZpZy5qcycsXG4gICAgICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgICAgIGNvbmZpZzogJy4vd2VicGFjay5yZW5kZXJlci5jb25maWcuanMnLFxuICAgICAgICAgICAgZW50cnlQb2ludHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGh0bWw6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgICBqczogJy4vc3JjL3JlbmRlcmVyLnRzJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWFpbl93aW5kb3cnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIC8vIENvbmZpZ3VyZSBzY3JpcHRzIGZvciBUUyB0ZW1wbGF0ZVxuICAgICAgcGFja2FnZUpTT04uc2NyaXB0cy5saW50ID0gJ2VzbGludCAtLWV4dCAudHMsLnRzeCAuJztcblxuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhY2thZ2VKU09OUGF0aCwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSAoZmlsZU5hbWU6IHN0cmluZykgPT4gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycsIGZpbGVOYW1lKTtcblxuICAgICAgLy8gQ29weSBXZWJwYWNrIGZpbGVzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5tYWluLmNvbmZpZy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucmVuZGVyZXIuY29uZmlnLmpzJyk7XG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5ydWxlcy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucGx1Z2lucy5qcycpO1xuXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCdsaW5rIHJlbD1cInN0eWxlc2hlZXRcIicpKSByZXR1cm4gJyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENvcHkgdHNjb25maWcgd2l0aCBhIHNtYWxsIHNldCBvZiBwcmVzZXRzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAndHNjb25maWcuanNvbicpO1xuXG4gICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJy5lc2xpbnRyYy5qc29uJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmRleC5qcyBhbmQgcmVwbGFjZSB3aXRoIGluZGV4LnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ2luZGV4LnRzJyk7XG5cbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdyZW5kZXJlci50cycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3ByZWxvYWQudHMnKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgVHlwZVNjcmlwdFdlYnBhY2tUZW1wbGF0ZSgpO1xuIl0sIm5hbWVzIjpbIlR5cGVTY3JpcHRXZWJwYWNrVGVtcGxhdGUiLCJCYXNlVGVtcGxhdGUiLCJpbml0aWFsaXplVGVtcGxhdGUiLCJkaXJlY3RvcnkiLCJvcHRpb25zIiwiYXN5bmNPcmEiLCJwYWNrYWdlSlNPTlBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsInBhY2thZ2VKU09OIiwiZnMiLCJyZWFkSnNvbiIsIm1haW4iLCJjb25maWciLCJmb3JnZSIsInBsdWdpbnMiLCJwdXNoIiwibWFpbkNvbmZpZyIsInJlbmRlcmVyIiwiZW50cnlQb2ludHMiLCJodG1sIiwianMiLCJuYW1lIiwic2NyaXB0cyIsImxpbnQiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJmaWxlUGF0aCIsImZpbGVOYW1lIiwiam9pbiIsImNvcHlUZW1wbGF0ZUZpbGUiLCJ1cGRhdGVGaWxlQnlMaW5lIiwibGluZSIsImluY2x1ZGVzIiwicmVtb3ZlIiwidGVtcGxhdGVEaXIiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLEdBQTJCLENBQTNCLFNBQTJCO0FBQ3ZCLEdBQStCLENBQS9CLGFBQStCO0FBQzdDLEdBQVUsQ0FBVixRQUFVO0FBRVIsR0FBTSxDQUFOLEtBQU07Ozs7OztNQUVqQkEseUJBQXlCLFNBQVNDLGFBQVk7VUFHNUNDLGtCQUFrQixDQUFDQyxTQUFpQixFQUFFQyxPQUE0QixFQUFFLENBQUM7UUFDekUsS0FBSyxDQUFDLEtBQUssQ0FBQ0Ysa0JBQWtCLENBQUNDLFNBQVMsRUFBRUMsT0FBTztRQUNqRCxLQUFLLEtBQUNDLFNBQVEsV0FBQyxDQUFnQywyQ0FBYyxDQUFD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