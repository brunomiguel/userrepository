{
  "manifest": {
    "name": "threads",
    "version": "1.7.0",
    "description": "Web workers & worker threads as simple as a function call",
    "license": "MIT",
    "main": "dist/index.js",
    "module": "dist-esm/index.js",
    "scripts": {
      "clean": "rimraf dist/ dist-esm/",
      "dev": "npm run clean && tsc -p tsconfig.json --watch",
      "build": "npm run clean && npm run build:cjs && npm run build:es",
      "build:cjs": "tsc -p tsconfig.json",
      "build:es": "tsc -p tsconfig-esm.json",
      "postbuild": "npm run bundle",
      "bundle": "rollup -c -f umd --file=bundle/worker.js --name=threads --silent -- dist-esm/worker/bundle-entry.js",
      "test": "npm run test:library && npm run test:tooling && npm run test:puppeteer:basic && npm run test:puppeteer:webpack",
      "test:library": "cross-env TS_NODE_FILES=true ava ./test/**/*.test.ts",
      "test:tooling": "cross-env TS_NODE_FILES=true ava ./test-tooling/**/*.test.ts",
      "test:puppeteer:basic": "puppet-run --plugin=mocha --bundle=./test/workers/:workers/ --serve=./bundle/worker.js:/worker.js ./test/*.chromium*.ts",
      "test:puppeteer:webpack": "puppet-run --serve ./test-tooling/webpack/dist/app.web/0.worker.js --serve ./test-tooling/webpack/dist/app.web/1.worker.js --plugin=mocha ./test-tooling/webpack/webpack.chromium.mocha.ts",
      "posttest": "tslint --project .",
      "prepare": "npm run build"
    },
    "exports": {
      ".": {
        "require": "./dist/index.js",
        "default": "./index.mjs"
      },
      "./observable": {
        "require": "./observable.js",
        "default": "./observable.mjs"
      },
      "./register": {
        "require": "./register.js",
        "default": "./register.mjs"
      },
      "./worker": {
        "require": "./worker.js",
        "default": "./worker.mjs"
      }
    },
    "sideEffects": [
      "./dist*/master/register.js",
      "./dist*/worker/index.js",
      "./register.*js",
      "./worker.*js"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/andywer/threads.js.git"
    },
    "author": {
      "name": "Andy Wermke",
      "url": "https://github.com/andywer"
    },
    "bugs": {
      "url": "https://github.com/andywer/threads.js/issues"
    },
    "funding": "https://github.com/andywer/threads.js?sponsor=1",
    "homepage": "https://threads.js.org/",
    "keywords": [
      "thread",
      "worker",
      "pool",
      "spawn",
      "isomorphic",
      "parallel",
      "observable",
      "worker_threads"
    ],
    "dependencies": {
      "callsites": "^3.1.0",
      "debug": "^4.2.0",
      "is-observable": "^2.1.0",
      "observable-fns": "^0.6.1"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^16.0.0",
      "@rollup/plugin-node-resolve": "^10.0.0",
      "@types/chai": "^4.2.14",
      "@types/debug": "^4.1.5",
      "@types/execa": "^2.0.0",
      "@types/mocha": "^8.0.3",
      "@types/node": "^14.14.5",
      "@types/webpack": "^4.41.23",
      "ava": "^3.13.0",
      "chai": "^4.2.0",
      "cross-env": "^7.0.2",
      "execa": "^4.0.3",
      "mocha": "^8.2.0",
      "puppet-run": "^0.11.3",
      "puppet-run-plugin-mocha": "^0.10.0-alpha",
      "raw-loader": "^4.0.2",
      "rimraf": "^3.0.2",
      "rollup": "^2.32.1",
      "threads-plugin": "^1.3.3",
      "ts-loader": "^8.0.7",
      "ts-node": "^9.0.0",
      "tslint": "^6.1.3",
      "tslint-config-prettier": "^1.18.0",
      "typescript": "^4.2.3",
      "wavy": "^1.0.4",
      "webpack": "^4.44.2",
      "worker-plugin": "^5.0.0"
    },
    "optionalDependencies": {
      "tiny-worker": ">= 2"
    },
    "ava": {
      "extensions": [
        "ts"
      ],
      "files": [
        "./test/**/*.test.ts",
        "./test-tooling/**/*.test.ts"
      ],
      "require": [
        "ts-node/register"
      ],
      "serial": true
    },
    "browser": {
      "callsites": false,
      "tiny-worker": false,
      "ts-node": false,
      "ts-node/register": false,
      "worker_threads": false,
      "./dist/master/implementation.js": "./dist/master/implementation.browser.js",
      "./dist/master/implementation.node.js": false,
      "./dist/worker/implementation.js": "./dist/worker/implementation.browser.js",
      "./dist/worker/implementation.tiny-worker.js": false,
      "./dist/worker/implementation.worker_threads.js": false,
      "./dist-esm/master/implementation.js": "./dist-esm/master/implementation.browser.js",
      "./dist-esm/master/implementation.node.js": false,
      "./dist-esm/worker/implementation.js": "./dist-esm/worker/implementation.browser.js",
      "./dist-esm/worker/implementation.tiny-worker.js": false,
      "./dist-esm/worker/implementation.worker_threads.js": false
    },
    "files": [
      "dist/**",
      "dist-esm/**",
      "*.js",
      "*.mjs",
      "*.ts"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-threads-1.7.0-d9e9627bfc1ef22ada3b733c2e7558bbe78e589c-integrity/node_modules/threads/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">\n  <img alt=\"threads.js\" src=\"./docs/assets/logo-label.png\" width=\"75%\" />\n</h1>\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/andywer/threads.js\" target=\"_blank\"><img alt=\"Build status\" src=\"https://img.shields.io/travis/andywer/threads.js/v1.svg?style=flat-square\"></a>\n  <a href=\"https://www.npmjs.com/package/threads\" target=\"_blank\"><img alt=\"npm (tag)\" src=\"https://img.shields.io/npm/v/threads.svg?style=flat-square\"></a>\n  <a href=\"https://gitter.im/threadsjs/community\" target=\"_blank\"><img alt=\"Chat room\" src=\"https://img.shields.io/badge/chat-gitter.im-orange\" /></a>\n</p>\n\n<br />\n\nOffload CPU-intensive tasks to worker threads in node.js, web browsers and electron using one uniform API.\n\nUses web workers in the browser, `worker_threads` in node 12+ and [`tiny-worker`](https://github.com/avoidwork/tiny-worker) in node 8 to 11.\n\n### Features\n\n* First-class support for **async functions** & **observables**\n* Write code once, run it **on all platforms**\n* Manage bulk task executions with **thread pools**\n* Use **require()** and **import**/**export** in workers\n* Works great with **webpack**\n\n### Version 0.x\n\nYou can find the old version 0.12 of threads.js on the [`v0` branch](https://github.com/andywer/threads.js/tree/v0). All the content on this page refers to version 1.0 which is a rewrite of the library with a whole new API.\n\n## Installation\n\n```\nnpm install threads tiny-worker\n```\n\n*You only need to install the `tiny-worker` package to support node.js < 12. It's an optional dependency and used as a fallback if `worker_threads` are not available.*\n\n## Platform support\n\n<details>\n<summary>Run on node.js</summary>\n\n<p></p>\n\nRunning code using threads.js in node works out of the box.\n\nNote that we wrap the native `Worker`, so `new Worker(\"./foo/bar\")` will resolve the path relative to the module that calls it, not relative to the current working directory.\n\nThat aligns it with the behavior when bundling the code with webpack or parcel.\n\n</details>\n\n<details>\n<summary>Webpack build setup</summary>\n\n#### Webpack config\n\nUse with the [`threads-plugin`](https://github.com/andywer/threads-plugin). It will transparently detect all `new Worker(\"./unbundled-path\")` expressions, bundles the worker code and replaces the `new Worker(...)` path with the worker bundle path, so you don't need to explicitly use the `worker-loader` or define extra entry points.\n\n```sh\n  npm install -D threads-plugin\n```\n\nThen add it to your `webpack.config.js`:\n\n```diff\n+ const ThreadsPlugin = require('threads-plugin');\n\n  module.exports = {\n    // ...\n    plugins: [\n+     new ThreadsPlugin()\n    ]\n    // ...\n  }\n```\n\n#### Node.js bundles\n\nIf you are using webpack to create a bundle that will be run in node (webpack config `target: \"node\"`), you also need to specify that the `tiny-worker` package used for node < 12 should not be bundled:\n\n```diff\n  module.exports = {\n    // ...\n+   externals: {\n+     \"tiny-worker\": \"tiny-worker\"\n+   }\n    // ...\n}\n```\n\nMake sure that `tiny-worker` is listed in your `package.json` `dependencies` in that case.\n\n#### When using TypeScript\n\nNote: You'll need to be using Typescript version 4+, as the types generated by threads.js are not supported in Typescript 3.\n\nMake sure the TypeScript compiler keeps the `import` / `export` statements intact, so webpack resolves them. Otherwise the `threads-plugin` won't be able to do its job.\n\n```diff\n  module.exports = {\n    // ...\n    module: {\n      rules: [\n        {\n          test: /\\.ts$/,\n          loader: \"ts-loader\",\n+         options: {\n+           compilerOptions: {\n+             module: \"esnext\"\n+           }\n+         }\n        }\n      ]\n    },\n    // ...\n  }\n```\n\n</details>\n\n<details>\n<summary>Parcel bundler setup</summary>\n\n<p></p>\n\nYou need to import `threads/register` once at the beginning of your application code (in the master code, not in the workers):\n\n```diff\n  import { spawn } from \"threads\"\n+ import \"threads/register\"\n\n  // ...\n\n  const work = await spawn(new Worker(\"./worker\"))\n```\n\nThis registers the library's `Worker` implementation for your platform as the global `Worker`. This is necessary, since you cannot `import { Worker } from \"threads\"` or Parcel won't recognize `new Worker()` as a web worker anymore.\n\nBe aware that this might affect any code that tries to instantiate a normal web worker `Worker` and now instead instantiates a threads.js `Worker`. The threads.js `Worker` is just a web worker with some sugar on top, but that sugar might have unexpected side effects on third-party libraries.\n\nEverything else should work out of the box.\n\n</details>\n\n## Getting Started\n\n### Basics\n\n```js\n// master.js\nimport { spawn, Thread, Worker } from \"threads\"\n\nconst auth = await spawn(new Worker(\"./workers/auth\"))\nconst hashed = await auth.hashPassword(\"Super secret password\", \"1234\")\n\nconsole.log(\"Hashed password:\", hashed)\n\nawait Thread.terminate(auth)\n```\n\n```js\n// workers/auth.js\nimport sha256 from \"js-sha256\"\nimport { expose } from \"threads/worker\"\n\nexpose({\n  hashPassword(password, salt) {\n    return sha256(password + salt)\n  }\n})\n```\n\n### spawn()\n\nThe `hashPassword()` function of the `auth` object in the master code proxies the call to the `hashPassword()` function in the worker:\n\nIf the worker's function returns a promise or an observable then you can just use the return value as such in the master code. If the function returns a primitive value, expect the master function to return a promise resolving to that value.\n\n### expose()\n\nUse `expose()` to make a function or an object containing methods callable from the master thread.\n\nIn case of exposing an object, `spawn()` will asynchronously return an object exposing all the object's functions. If you `expose()` a function, `spawn` will also return a callable function, not an object.\n\n## Usage\n\n<p>\n  Find the full documentation on the <a href=\"https://threads.js.org/\" rel=\"nofollow\">website</a>:\n</p>\n\n- [**Quick start**](https://threads.js.org/getting-started)\n- [**Basic usage**](https://threads.js.org/usage)\n- [**Using observables**](https://threads.js.org/usage-observables)\n- [**Thread pools**](https://threads.js.org/usage-pool)\n- [**Advanced**](https://threads.js.org/usage-advanced)\n\n## Webpack\n\nThreads.js works with webpack. Usually all you need to do is adding the\n[`threads-plugin`](https://github.com/andywer/threads-plugin).\n\nSee [Build with webpack](https://threads.js.org/getting-started#build-with-webpack)\non the website for details.\n\n<!--\n## API\n\nTODO\n-->\n\n## Debug\n\nWe are using the [`debug`](https://github.com/visionmedia/debug) package to provide opt-in debug logging. All the package's debug messages have a scope starting with `threads:`, with different sub-scopes:\n\n- `threads:master:messages`\n- `threads:master:spawn`\n- `threads:master:thread-utils`\n- `threads:pool:${poolName || poolID}`\n\nSet it to `DEBUG=threads:*` to enable all the library's debug logging. To run its tests with full debug logging, for instance:\n\n```\nDEBUG=threads:* npm test\n```\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Andy Wermke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/threads/-/threads-1.7.0.tgz#d9e9627bfc1ef22ada3b733c2e7558bbe78e589c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/threads/-/threads-1.7.0.tgz",
    "hash": "d9e9627bfc1ef22ada3b733c2e7558bbe78e589c",
    "integrity": "sha512-Mx5NBSHX3sQYR6iI9VYbgHKBLisyB+xROCBGjjWm1O9wb9vfLxdaGtmT/KCjUqMsSNW6nERzCW3T6H43LqjDZQ==",
    "registry": "npm",
    "packageName": "threads",
    "cacheIntegrity": "sha512-Mx5NBSHX3sQYR6iI9VYbgHKBLisyB+xROCBGjjWm1O9wb9vfLxdaGtmT/KCjUqMsSNW6nERzCW3T6H43LqjDZQ== sha1-2elie/we8iraO3M8LnVYu+eOWJw="
  },
  "registry": "npm",
  "hash": "d9e9627bfc1ef22ada3b733c2e7558bbe78e589c"
}