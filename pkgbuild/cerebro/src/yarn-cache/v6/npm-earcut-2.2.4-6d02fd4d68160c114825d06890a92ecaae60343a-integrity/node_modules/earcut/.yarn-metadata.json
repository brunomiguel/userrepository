{
  "manifest": {
    "name": "earcut",
    "version": "2.2.4",
    "description": "The fastest and smallest JavaScript polygon triangulation library for your WebGL apps",
    "main": "src/earcut.js",
    "unpkg": "dist/earcut.min.js",
    "jsdelivr": "dist/earcut.min.js",
    "files": [
      "dist/earcut.min.js",
      "dist/earcut.dev.js"
    ],
    "scripts": {
      "pretest": "eslint src test/test.js",
      "test": "tape test/test.js",
      "watch": "mkdirp dist && watchify -v -d src/earcut.js -s earcut -o dist/earcut.dev.js",
      "build-dev": "mkdirp dist && browserify -d src/earcut.js -s earcut > dist/earcut.dev.js",
      "build-min": "mkdirp dist && browserify src/earcut.js -s earcut | uglifyjs -c -m > dist/earcut.min.js",
      "prepublishOnly": "npm run build-dev && npm run build-min",
      "cov": "c8 tape test/*.js",
      "coveralls": "npm run cov && c8 report -r lcov && coveralls < ./coverage/lcov.info"
    },
    "author": {
      "name": "Vladimir Agafonkin"
    },
    "license": "ISC",
    "devDependencies": {
      "benchmark": "^2.1.4",
      "browserify": "^17.0.0",
      "c8": "^7.11.3",
      "coveralls": "^3.1.1",
      "eslint": "^8.19.0",
      "eslint-config-mourner": "^2.0.3",
      "mkdirp": "^1.0.4",
      "tape": "^5.5.3",
      "uglify-js": "^3.16.2",
      "watchify": "^4.0.0"
    },
    "eslintConfig": {
      "extends": "mourner"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mapbox/earcut.git"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-earcut-2.2.4-6d02fd4d68160c114825d06890a92ecaae60343a-integrity/node_modules/earcut/package.json",
    "readmeFilename": "README.md",
    "readme": "## Earcut\n\nThe fastest and smallest JavaScript polygon triangulation library. 3KB gzipped.\n\n[![Build Status](https://travis-ci.org/mapbox/earcut.svg?branch=master)](https://travis-ci.org/mapbox/earcut)\n[![Coverage Status](https://coveralls.io/repos/mapbox/earcut/badge.svg?branch=master)](https://coveralls.io/r/mapbox/earcut?branch=master)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/mapbox/earcut.svg)](http://isitmaintained.com/project/mapbox/earcut \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/mapbox/earcut.svg)](http://isitmaintained.com/project/mapbox/earcut \"Percentage of issues still open\")\n[![](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\n#### The algorithm\n\nThe library implements a modified ear slicing algorithm,\noptimized by [z-order curve](http://en.wikipedia.org/wiki/Z-order_curve) hashing\nand extended to handle holes, twisted polygons, degeneracies and self-intersections\nin a way that doesn't _guarantee_ correctness of triangulation,\nbut attempts to always produce acceptable results for practical data.\n\nIt's based on ideas from\n[FIST: Fast Industrial-Strength Triangulation of Polygons](http://www.cosy.sbg.ac.at/~held/projects/triang/triang.html) by Martin Held\nand [Triangulation by Ear Clipping](http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf) by David Eberly.\n\n#### Why another triangulation library?\n\nThe aim of this project is to create a JS triangulation library\nthat is **fast enough for real-time triangulation in the browser**,\nsacrificing triangulation quality for raw speed and simplicity,\nwhile being robust enough to handle most practical datasets without crashing or producing garbage.\nSome benchmarks using Node 0.12:\n\n(ops/sec)         | pts  | earcut    | libtess  | poly2tri | pnltri    | polyk\n------------------| ---- | --------- | -------- | -------- | --------- | ------\nOSM building      | 15   | _795,935_ | _50,640_ | _61,501_ | _122,966_ | _175,570_\ndude shape        | 94   | _35,658_  | _10,339_ | _8,784_  | _11,172_  | _13,557_\nholed dude shape  | 104  | _28,319_  | _8,883_  | _7,494_  | _2,130_   | n/a\ncomplex OSM water | 2523 | _543_     | _77.54_  | failure  | failure   | n/a\nhuge OSM water    | 5667 | _95_      | _29.30_  | failure  | failure   | n/a\n\nThe original use case it was created for is [Mapbox GL](https://www.mapbox.com/mapbox-gl), WebGL-based interactive maps.\n\nIf you want to get correct triangulation even on very bad data with lots of self-intersections\nand earcut is not precise enough, take a look at [libtess.js](https://github.com/brendankenny/libtess.js).\n\n#### Usage\n\n```js\nvar triangles = earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\n```\n\nSignature: `earcut(vertices[, holes, dimensions = 2])`.\n\n* `vertices` is a flat array of vertex coordinates like `[x0,y0, x1,y1, x2,y2, ...]`.\n* `holes` is an array of hole _indices_ if any\n  (e.g. `[5, 8]` for a 12-vertex input would mean one hole with vertices 5&ndash;7 and another with 8&ndash;11).\n* `dimensions` is the number of coordinates per vertex in the input array (`2` by default).\n\nEach group of three vertex indices in the resulting array forms a triangle.\n\n```js\n// triangulating a polygon with a hole\nearcut([0,0, 100,0, 100,100, 0,100,  20,20, 80,20, 80,80, 20,80], [4]);\n// [3,0,4, 5,4,0, 3,4,7, 5,0,1, 2,3,7, 6,5,1, 2,7,6, 6,1,2]\n\n// triangulating a polygon with 3d coords\nearcut([10,0,1, 0,50,2, 60,60,3, 70,10,4], null, 3);\n// [1,0,3, 3,2,1]\n```\n\nIf you pass a single vertex as a hole, Earcut treats it as a Steiner point.\n\nIf your input is a multi-dimensional array (e.g. [GeoJSON Polygon](http://geojson.org/geojson-spec.html#polygon)),\nyou can convert it to the format expected by Earcut with `earcut.flatten`:\n\n```js\nvar data = earcut.flatten(geojson.geometry.coordinates);\nvar triangles = earcut(data.vertices, data.holes, data.dimensions);\n```\n\nAfter getting a triangulation, you can verify its correctness with `earcut.deviation`:\n\n```js\nvar deviation = earcut.deviation(vertices, holes, dimensions, triangles);\n```\n\nReturns the relative difference between the total area of triangles and the area of the input polygon.\n`0` means the triangulation is fully correct.\n\n#### Install\n\nNPM and Browserify:\n\n```bash\nnpm install earcut\n```\n\nBrowser builds on CDN:\n\n- [development build](https://unpkg.com/earcut@2.2.4/dist/earcut.dev.js)\n- [minified production build](https://unpkg.com/earcut@2.2.4/dist/earcut.min.js)\n\nRunning tests:\n\n```bash\nnpm test\n```\n\n![](https://cloud.githubusercontent.com/assets/25395/5778431/e8ec0c10-9da3-11e4-8d4e-a2ced6a7d2b7.png)\n\n#### Ports to other languages\n\n- [mapbox/earcut.hpp](https://github.com/mapbox/earcut.hpp) (C++11)\n- [earcut4j/earcut4j](https://github.com/earcut4j/earcut4j) (Java)\n- [the3deers/earcut-java](https://github.com/the3deers/earcut-java) (Java)\n- [Larpon/earcut](https://github.com/Larpon/earcut) (V)\n- [Cawfree/earcut-j](https://github.com/Cawfree/earcut-j) (Java, outdated)\n\n#### Changelog\n\n##### 2.2.4 (Jul 5, 2022)\n\n- Improved performance by 10â€“15%.\n- Fixed another rare race condition that could lead to an infinite loop.\n\n##### 2.2.3 (Jul 8, 2021)\n\n- Fixed a rare race condition that could lead to an infinite loop.\n\n##### 2.2.2 (Jan 21, 2020)\n\n- Fixed yet another rare race condition when a hole shared an edge with an outer ring.\n\n##### 2.2.1 (Sep 19, 2019)\n\n- Fixed another rare case with touching holes.\n\n##### 2.2.0 (Sep 18, 2019)\n\n- Fixed a handful of rare race conditions.\n\n##### 2.1.5 (Feb 5, 2019)\n\n- Fixed a race condition with coincident holes that could lead to bad triangulation.\n\n##### 2.1.4 (Dec 4, 2018)\n\n- Fixed a race condition that could lead to a freeze on degenerate input.\n\n##### 2.1.3 (Jan 4, 2018)\n\n- Improved performance for bigger inputs (5-12%).\n\n##### 2.1.2 (Oct 23, 2017)\n\n- Fixed a few race conditions where bad input would cause an error.\n\n##### 2.1.1 (Mar 17, 2016)\n\n- Fixed a rare race condition where the split routine would choose bad diagonals.\n- Fixed a rare race condition in the \"cure local intersections\" routine.\n- Fixed a rare race condition where a hole that shares a point with the outer ring would be handled incorrectly.\n- Fixed a bug where a closing point wouldn't be filtered as duplicate, sometimes breaking triangulation.\n\n##### 2.1.0 (Mar 11, 2016)\n\n- Added `earcut.deviation` function for verifying correctness of triangulation.\n- Added `earcut.flatten` function for converting GeoJSON-like input into a format Earcut expects.\n\n##### 2.0.9 (Mar 10, 2016)\n\n- Fixed a rare race condition where a hole would be handled incorrectly.\n\n##### 2.0.8 (Jan 19, 2016)\n\n- Fixed a rare race condition with a hole touching outer ring.\n\n##### 2.0.7 (Nov 18, 2015)\n\n- Changed the algorithm to avoid filtering colinear/duplicate vertices unless it can't triangulate the polygon otherwise.\n  Improves performance on simpler shapes and fixes some 3D use cases.\n\n##### 2.0.6 (Oct 26, 2015)\n\n- Improved robustness and reliability of the triangulation algorithm.\n- Improved performance by up to 15%.\n- Significantly improved source code clarity.\n\n##### 2.0.5 (Oct 12, 2015)\n\n- Fixed a z-curve hashing bug that could lead to unexpected results in very rare cases involving shapes with lots of points.\n\n##### 2.0.4 (Oct 8, 2015)\n\n- Fixed one more extremely rare race condition, lol!\n\n##### 2.0.3 (Oct 8, 2015)\n\n- Fixed yet another rare race condition (multiple holes connected with colinear bridges).\n- Fixed crash on empty input.\n\n##### 2.0.2 (Jul 8, 2015)\n\n- Fixed one more rare race condition with a holed polygon.\n\n##### 2.0.1 (May 11, 2015)\n\n- Added Steiner points support.\n\n##### 2.0.0 (Apr 30, 2015)\n\n- **Breaking**: changed the API to accept a flat input array of vertices with hole indices and return triangle indices.\n  It makes the indexed output much faster than it was before (up to 30%) and improves memory footprint.\n\n##### 1.4.2 (Mar 18, 2015)\n\n- Fixed another rare edge case with a tiny hole in a huge polygon.\n\n##### 1.4.1 (Mar 17, 2015)\n\n- Fixed a rare edge case that led to incomplete triangulation.\n\n##### 1.4.0 (Mar 9, 2015)\n\n- Fixed indexed output to produce indices not multiplied by dimension and work with any number of dimensions.\n\n##### 1.3.0 (Feb 24, 2015)\n\n- Added a second argument to `earcut` that switches output format to flat vertex and index arrays if set to `true`.\n\n##### 1.2.3 (Feb 10, 2015)\n\n- Improved performance (especially on recent v8) by avoiding `Array` `push` with multiple arguments.\n\n##### 1.2.2 (Jan 27, 2015)\n\n- Significantly improved performance for polygons with self-intersections\n  (e.g. big OSM water polygons are now handled 2-3x faster)\n\n##### 1.2.1 (Jan 26, 2015)\n\n- Significantly improved performance on polygons with high number of vertices\n  by using z-order curve hashing for vertex lookup.\n- Slightly improved overall performance with better point filtering.\n\n##### 1.1.0 (Jan 21, 2015)\n\n- Improved performance on polygons with holes by switching from Held to Eberly hole elimination algorithm\n- More robustness fixes and tests\n\n##### 1.0.1 &mdash; 1.0.6 (Jan 20, 2015)\n\n- Various robustness improvements and fixes.\n\n##### 1.0.0 (Jan 18, 2015)\n\n- Initial release.\n",
    "licenseText": "ISC License\n\nCopyright (c) 2016, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/earcut/-/earcut-2.2.4.tgz#6d02fd4d68160c114825d06890a92ecaae60343a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/earcut/-/earcut-2.2.4.tgz",
    "hash": "6d02fd4d68160c114825d06890a92ecaae60343a",
    "integrity": "sha512-/pjZsA1b4RPHbeWZQn66SWS8nZZWLQQ23oE3Eam7aroEFGEvwKAsJfZ9ytiEMycfzXWpca4FA9QIOehf7PocBQ==",
    "registry": "npm",
    "packageName": "earcut",
    "cacheIntegrity": "sha512-/pjZsA1b4RPHbeWZQn66SWS8nZZWLQQ23oE3Eam7aroEFGEvwKAsJfZ9ytiEMycfzXWpca4FA9QIOehf7PocBQ== sha1-bQL9TWgWDBFIJdBokKkuyq5gNDo="
  },
  "registry": "npm",
  "hash": "6d02fd4d68160c114825d06890a92ecaae60343a"
}