#!/usr/bin/env node

/*
Copyright (c) 2013, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://yuilibrary.com/license/
*/

const licenseChecker = require('../lib/index');
const args = require('../lib/args');
const parsedArgs = args.parse();
const mkdirp = require('mkdirp');
const path = require('path');
const chalk = require('chalk');
const fs = require('fs');
const hasFailingArg = parsedArgs.failOn || parsedArgs.onlyAllow;

const usageMessage = [
    'All options in alphabetical order:',
    '',
    '   --angularCli is just a synonym for --plainVertical',
    '   --csv output in csv format.',
    '   --csvComponentPrefix column prefix for components in csv file',
    '   --customPath to add a custom Format file in JSON',
    '   --development only show development dependencies.',
    '   --direct look for direct dependencies only',
    '   --excludeLicenses [list] exclude modules which licenses are in the comma-separated list from the output',
    '   --excludePackages [list] restrict output to the packages (either "package@fullversion" or "package@majorversion" or only "package") not in the semicolon-seperated list',
    '   --excludePrivatePackages restrict output to not include any package marked as private',
    '   --failOn [list] fail (exit with code 1) on the first occurrence of the licenses of the semicolon-separated list',
    '   --files [path] copy all license files to path and rename them to `module-name`@`version`-LICENSE.txt.',
    '   --includeLicenses [list] include only modules which licenses are in the comma-separated list from the output',
    '   --includePackages [list] restrict output to the packages (either "package@fullversion" or "package@majorversion" or only "package") in the semicolon-seperated list',
    '   --json output in json format.',
    '   --markdown output in markdown format.',
    '   --nopeer skip peer dependencies in output.',
    '   --onlyAllow [list] fail (exit with code 1) on the first occurrence of the licenses not in the semicolon-seperated list',
    '   --onlyunknown only list packages with unknown or guessed licenses.',
    '   --out [filepath] write the data to a specific file.',
    '   --plainVertical output in plain vertical format like [Angular CLI does](https://angular.io/3rdpartylicenses.txt)',
    '   --production only show production dependencies.',
    '   --relativeLicensePath output the location of the license files as relative paths',
    '   --relativeModulePath output the location of the module files as relative paths',
    '   --start [filepath] path of the initial json to look for',
    '   --summary output a summary of the license usage',
    '   --unknown report guessed licenses as unknown licenses.',
    '',
    '   --version The current version',
    '   --help The text you are reading right now :)',
    ''
].join('\n');

const kownOptions = Object.keys(args.knownOpts);
const unknownArgs = Object.keys(parsedArgs).filter((arg) => !kownOptions.includes(arg));

if (unknownArgs.length) {
    console.error(`license-checker-rseidelsohn@${require('../package.json').version}`, '\n');
    console.error(`Error: Unknown option${unknownArgs.length > 1 ? 's' : ''}: ${unknownArgs.map((unknownArg) => `'${unknownArg}'`).join(', ')}`);
    console.error(`       Possibly a typo? Currently known options are:`);
    console.error(usageMessage, '\n');
    process.exit(1);
}

if (!unknownArgs.length && parsedArgs.help) {
    console.error(`license-checker-rseidelsohn@${require('../package.json').version}`);
    console.error(usageMessage, '\n');
    process.exit(0);
}

if (parsedArgs.version) {
    console.error(require('../package.json').version);
    process.exit(1);
}

if (parsedArgs.failOn && parsedArgs.onlyAllow) {
    console.error('Error: --failOn and --onlyAllow can not be used at the same time. Choose one or the other.');
    process.exit(1);
}

if (hasFailingArg && hasFailingArg.indexOf(',') >= 0) {
    const argName = parsedArgs.failOn ? 'failOn' : 'onlyAllow';
    console.warn(`Warning: As of v17 the --${argName} argument takes semicolons as delimeters instead of commas (some license names can contain commas)`);
}

licenseChecker.init(parsedArgs, function (err, json) {
    if (err) {
        console.error('An error has occurred:');
        console.error(err);
    }

    if (shouldColorizeOutput(parsedArgs)) {
        colorizeOutput(json);
    }

    const formattedOutput = getFormattedOutput(json, parsedArgs);

    if (parsedArgs.files || parsedArgs.out) {
        if (parsedArgs.files) {
            licenseChecker.asFiles(json, parsedArgs.files);
        }

        if (parsedArgs.out) {
            const dir = path.dirname(parsedArgs.out);

            mkdirp.sync(dir);
            fs.writeFileSync(parsedArgs.out, formattedOutput, 'utf8');
        }
    } else {
        console.log(formattedOutput);
    }
});

function shouldColorizeOutput(args) {
    return args.color && !args.out && !args.files && !(args.csv || args.json || args.markdown || args.plainVertical);
}

function colorizeOutput(json) {
    Object.keys(json).forEach((key) => {
        const index = key.lastIndexOf('@');
        const colorizedKey = chalk.white.bgKeyword('darkslategrey')(key.substr(0, index)) + chalk.dim('@') + chalk.white.bgKeyword('green')(key.substr(index + 1));
        json[colorizedKey] = json[key];

        delete json[key];
    });
}

function getFormattedOutput(json, args) {
    if (args.json) {
        return JSON.stringify(json, null, 4) + '\n';
    }

    if (args.csv) {
        return licenseChecker.asCSV(json, args.customFormat, args.csvComponentPrefix);
    }

    if (args.markdown){
        return licenseChecker.asMarkDown(json, args.customFormat) + "\n";
    }

    if (args.summary) {
        return licenseChecker.asSummary(json);
    }

    if (args.plainVertical || args.angluarCli) {
        return licenseChecker.asPlainVertical(json);
    }

    return licenseChecker.asTree(json);
}
