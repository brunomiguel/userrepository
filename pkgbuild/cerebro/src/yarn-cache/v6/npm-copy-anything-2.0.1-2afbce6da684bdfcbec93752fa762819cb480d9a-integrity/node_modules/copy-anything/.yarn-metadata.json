{
  "manifest": {
    "name": "copy-anything",
    "sideEffects": false,
    "version": "2.0.1",
    "description": "An optimised way to copy'ing an object. A small and simple integration",
    "main": "dist/index.cjs.js",
    "module": "dist/index.esm.js",
    "typings": "types/index.d.ts",
    "scripts": {
      "test": "ava",
      "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
      "rollup": "rollup -c build/rollup.js",
      "build": "npm run lint && npm run test && npm run rollup"
    },
    "dependencies": {
      "is-what": "^3.7.1"
    },
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "^2.23.0",
      "@typescript-eslint/parser": "^2.23.0",
      "ava": "^3.5.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.0",
      "eslint-plugin-tree-shaking": "^1.8.0",
      "rollup": "^1.32.1",
      "rollup-plugin-typescript2": "^0.25.3",
      "ts-node": "^8.6.2",
      "typescript": "^3.8.3"
    },
    "keywords": [
      "copy",
      "clone",
      "json-stringify",
      "stringify-parse",
      "object",
      "copy-objects",
      "clone-objects",
      "json-stringify-json-parse",
      "deep-clone",
      "deep-copy",
      "typescript",
      "ts"
    ],
    "author": {
      "name": "Luca Ban - Mesqueeb"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mesqueeb/copy-anything/issues"
    },
    "homepage": "https://github.com/mesqueeb/copy-anything#readme",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mesqueeb/copy-anything.git"
    },
    "ava": {
      "extensions": [
        "ts"
      ],
      "require": [
        "ts-node/register"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-copy-anything-2.0.1-2afbce6da684bdfcbec93752fa762819cb480d9a-integrity/node_modules/copy-anything/package.json",
    "readmeFilename": "README.md",
    "readme": "# Copy anything 🎭\n\n```\nnpm i copy-anything\n```\n\nAn optimised way to copy'ing (cloning) an object or array. A small and simple integration.\n\n## Motivation\n\nI created this package because I tried a lot of similar packages that do copy'ing/cloning. But all had its quirks, and _all of them break things they are not supposed to break_... 😞\n\nI was looking for:\n\n- a simple copy/clone function\n- has to be fast!\n- props must lose any reference to original object\n- works with arrays and objects in arrays!\n- supports symbols\n- can copy non-enumerable props as well\n- **does not break special class instances**　‼️\n\nThis last one is crucial! So many libraries use custom classes that create objects with special prototypes, and such objects all break when trying to copy them inproperly. So we gotta be careful!\n\ncopy-anything will copy objects and nested properties, but only as long as they're \"plain objects\". As soon as a sub-prop is not a \"plain object\" and has a special prototype, it will copy that instance over \"as is\". ♻️\n\n## Meet the family\n\n- [copy-anything 🎭](https://github.com/mesqueeb/copy-anything)\n- [merge-anything 🥡](https://github.com/mesqueeb/merge-anything)\n- [filter-anything ⚔️](https://github.com/mesqueeb/filter-anything)\n- [find-and-replace-anything 🎣](https://github.com/mesqueeb/find-and-replace-anything)\n- [compare-anything 🛰](https://github.com/mesqueeb/compare-anything)\n- [flatten-anything 🏏](https://github.com/mesqueeb/flatten-anything)\n- [is-what 🙉](https://github.com/mesqueeb/is-what)\n\n## Usage\n\n```js\nimport { copy } from 'copy-anything'\n\nconst original = { name: 'Ditto', type: { water: true } }\nconst copy = copy(original)\n\n// now if we change a nested prop like the type:\ncopy.type.water = false\ncopy.type.fire = true(\n  // new prop\n\n  // then the original object will still be the same:\n  original.type.water === true\n)(original.type.fire === undefined)\n```\n\n> Please note, by default copy-anything does not copy non-enumerable props. If you need to copy those, see the instructions further down below.\n\n## Works with arrays\n\nIt will also clone arrays, **as well as objects inside arrays!** 😉\n\n```js\nconst original = [{ name: 'Squirtle' }]\nconst copy = copy(original)\n\n// now if we change a prop in the array like so:\ncopy[0].name = 'Wartortle'\ncopy.push({ name: 'Charmander' })(\n  // new item\n\n  // then the original array will still be the same:\n  original[0].name === 'Squirtle'\n)(original[1] === undefined)\n```\n\n## Non-enumerable\n\nBy default, copy-anything only copies enumerable properties. If you also want to copy non-enumerable properties you can do so by passing that as an option.\n\n```js\nconst original = { name: 'Bulbasaur' }\n// bulbasaur's ID is non-enumerable\nObject.defineProperty(original, 'id', {\n  value: '001',\n  writable: true,\n  enumerable: false,\n  configurable: true,\n})\nconst copy1 = copy(original)\nconst copy2 = copy(original, { nonenumerable: true })(copy1.id === undefined)(copy2.id === '001')\n```\n\n## Limit to specific props\n\nYou can limit to specific props.\n\n```js\nconst original = { name: 'Flareon', type: ['fire'], id: '136' }\nconst copy = copy(original, { props: ['name'] })(copy === { name: 'Flareon' })\n```\n\n> Please note, if the props you have specified are non-enumerable, you will also need to pass `{nonenumerable: true}`.\n\n## Source code\n\nThe source code is literally just these lines. Most of the magic comes from the isPlainObject function from the [is-what library](https://github.com/mesqueeb/is-what).\n\n```JavaScript\nimport { isPlainObject } from 'is-what'\n\nexport function copy (target) {\n  if (isArray(target)) return target.map(i => copy(i))\n  if (!isPlainObject(target)) return target\n  return Object.keys(target)\n    .reduce((carry, key) => {\n      const val = target[key]\n      carry[key] = copy(val)\n      return carry\n    }, {})\n}\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Luca Ban - Mesqueeb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/copy-anything/-/copy-anything-2.0.1.tgz#2afbce6da684bdfcbec93752fa762819cb480d9a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/copy-anything/-/copy-anything-2.0.1.tgz",
    "hash": "2afbce6da684bdfcbec93752fa762819cb480d9a",
    "integrity": "sha512-lA57e7viQHOdPQcrytv5jFeudZZOXuyk47lZym279FiDQ8jeZomXiGuVf6ffMKkJ+3TIai3J1J3yi6M+/4U35g==",
    "registry": "npm",
    "packageName": "copy-anything",
    "cacheIntegrity": "sha512-lA57e7viQHOdPQcrytv5jFeudZZOXuyk47lZym279FiDQ8jeZomXiGuVf6ffMKkJ+3TIai3J1J3yi6M+/4U35g== sha1-KvvObaaEvfy+yTdS+nYoGctIDZo="
  },
  "registry": "npm",
  "hash": "2afbce6da684bdfcbec93752fa762819cb480d9a"
}