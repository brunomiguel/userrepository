{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAgUA,MAAM,CAAN,IAAY,YAaX;AAbD,WAAY,YAAY;IACtB;;OAEG;IACH,iCAAiB,CAAA;IACjB;;OAEG;IACH,iCAAiB,CAAA;IACjB;;OAEG;IACH,iCAAiB,CAAA;AACnB,CAAC,EAbW,YAAY,KAAZ,YAAY,QAavB;AAED,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,gCAAa,CAAA;IACb,kCAAe,CAAA;AACjB,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AAED,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,+BAAW,CAAA;IACX,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;AACrB,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B","sourcesContent":["import type { PermissionState } from '@capacitor/core';\n\nexport type CameraPermissionState = PermissionState | 'limited';\n\nexport type CameraPermissionType = 'camera' | 'photos';\n\nexport interface PermissionStatus {\n  camera: CameraPermissionState;\n  photos: CameraPermissionState;\n}\n\nexport interface CameraPluginPermissions {\n  permissions: CameraPermissionType[];\n}\n\nexport interface CameraPlugin {\n  /**\n   * Prompt the user to pick a photo from an album, or take a new photo\n   * with the camera.\n   *\n   * @since 1.0.0\n   */\n  getPhoto(options: ImageOptions): Promise<Photo>;\n\n  /**\n   * Allows the user to pick multiple pictures from the photo gallery.\n   * On iOS 13 and older it only allows to pick one picture.\n   *\n   * @since 1.2.0\n   */\n  pickImages(options: GalleryImageOptions): Promise<GalleryPhotos>;\n\n  /**\n   * iOS 14+ Only: Allows the user to update their limited photo library selection.\n   *\n   * @since 4.1.0\n   */\n  pickLimitedLibraryPhotos(): Promise<GalleryPhotos>;\n  /**\n   * iOS 14+ Only: Return an array of photos selected from the limited photo library.\n   *\n   * @since 4.1.0\n   */\n  getLimitedLibraryPhotos(): Promise<GalleryPhotos>;\n\n  /**\n   * Check camera and photo album permissions\n   *\n   * @since 1.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n\n  /**\n   * Request camera and photo album permissions\n   *\n   * @since 1.0.0\n   */\n  requestPermissions(\n    permissions?: CameraPluginPermissions,\n  ): Promise<PermissionStatus>;\n}\n\nexport interface ImageOptions {\n  /**\n   * The quality of image to return as JPEG, from 0-100\n   *\n   * @since 1.0.0\n   */\n  quality?: number;\n  /**\n   * Whether to allow the user to crop or make small edits (platform specific).\n   * On iOS 14+ it's only supported for CameraSource.Camera, but not for CameraSource.Photos.\n   *\n   * @since 1.0.0\n   */\n  allowEditing?: boolean;\n  /**\n   * How the data should be returned. Currently, only 'Base64', 'DataUrl' or 'Uri' is supported\n   *\n   * @since 1.0.0\n   */\n  resultType: CameraResultType;\n  /**\n   * Whether to save the photo to the gallery.\n   * If the photo was picked from the gallery, it will only be saved if edited.\n   * @default: false\n   *\n   * @since 1.0.0\n   */\n  saveToGallery?: boolean;\n  /**\n   * The desired maximum width of the saved image. The aspect ratio is respected.\n   *\n   * @since 1.0.0\n   */\n  width?: number;\n  /**\n   * The desired maximum height of the saved image. The aspect ratio is respected.\n   *\n   * @since 1.0.0\n   */\n  height?: number;\n  /**\n   * Whether to automatically rotate the image \"up\" to correct for orientation\n   * in portrait mode\n   * @default: true\n   *\n   * @since 1.0.0\n   */\n  correctOrientation?: boolean;\n  /**\n   * The source to get the photo from. By default this prompts the user to select\n   * either the photo album or take a photo.\n   * @default: CameraSource.Prompt\n   *\n   * @since 1.0.0\n   */\n  source?: CameraSource;\n  /**\n   * iOS and Web only: The camera direction.\n   * @default: CameraDirection.Rear\n   *\n   * @since 1.0.0\n   */\n  direction?: CameraDirection;\n\n  /**\n   * iOS only: The presentation style of the Camera.\n   * @default: 'fullscreen'\n   *\n   * @since 1.0.0\n   */\n  presentationStyle?: 'fullscreen' | 'popover';\n\n  /**\n   * Web only: Whether to use the PWA Element experience or file input. The\n   * default is to use PWA Elements if installed and fall back to file input.\n   * To always use file input, set this to `true`.\n   *\n   * Learn more about PWA Elements: https://capacitorjs.com/docs/pwa-elements\n   *\n   * @since 1.0.0\n   */\n  webUseInput?: boolean;\n\n  /**\n   * Text value to use when displaying the prompt.\n   * @default: 'Photo'\n   *\n   * @since 1.0.0\n   *\n   */\n  promptLabelHeader?: string;\n\n  /**\n   * Text value to use when displaying the prompt.\n   * iOS only: The label of the 'cancel' button.\n   * @default: 'Cancel'\n   *\n   * @since 1.0.0\n   */\n  promptLabelCancel?: string;\n\n  /**\n   * Text value to use when displaying the prompt.\n   * The label of the button to select a saved image.\n   * @default: 'From Photos'\n   *\n   * @since 1.0.0\n   */\n  promptLabelPhoto?: string;\n\n  /**\n   * Text value to use when displaying the prompt.\n   * The label of the button to open the camera.\n   * @default: 'Take Picture'\n   *\n   * @since 1.0.0\n   */\n  promptLabelPicture?: string;\n}\n\nexport interface Photo {\n  /**\n   * The base64 encoded string representation of the image, if using CameraResultType.Base64.\n   *\n   * @since 1.0.0\n   */\n  base64String?: string;\n  /**\n   * The url starting with 'data:image/jpeg;base64,' and the base64 encoded string representation of the image, if using CameraResultType.DataUrl.\n   *\n   * @since 1.0.0\n   */\n  dataUrl?: string;\n  /**\n   * If using CameraResultType.Uri, the path will contain a full,\n   * platform-specific file URL that can be read later using the Filsystem API.\n   *\n   * @since 1.0.0\n   */\n  path?: string;\n  /**\n   * webPath returns a path that can be used to set the src attribute of an image for efficient\n   * loading and rendering.\n   *\n   * @since 1.0.0\n   */\n  webPath?: string;\n  /**\n   * Exif data, if any, retrieved from the image\n   *\n   * @since 1.0.0\n   */\n  exif?: any;\n  /**\n   * The format of the image, ex: jpeg, png, gif.\n   *\n   * iOS and Android only support jpeg.\n   * Web supports jpeg and png. gif is only supported if using file input.\n   *\n   * @since 1.0.0\n   */\n  format: string;\n  /**\n   * Whether if the image was saved to the gallery or not.\n   *\n   * On Android and iOS, saving to the gallery can fail if the user didn't\n   * grant the required permissions.\n   * On Web there is no gallery, so always returns false.\n   *\n   * @since 1.1.0\n   */\n  saved: boolean;\n}\n\nexport interface GalleryPhotos {\n  /**\n   * Array of all the picked photos.\n   *\n   * @since 1.2.0\n   */\n  photos: GalleryPhoto[];\n}\n\nexport interface GalleryPhoto {\n  /**\n   * Full, platform-specific file URL that can be read later using the Filsystem API.\n   *\n   * @since 1.2.0\n   */\n  path?: string;\n  /**\n   * webPath returns a path that can be used to set the src attribute of an image for efficient\n   * loading and rendering.\n   *\n   * @since 1.2.0\n   */\n  webPath: string;\n  /**\n   * Exif data, if any, retrieved from the image\n   *\n   * @since 1.2.0\n   */\n  exif?: any;\n  /**\n   * The format of the image, ex: jpeg, png, gif.\n   *\n   * iOS and Android only support jpeg.\n   * Web supports jpeg, png and gif.\n   *\n   * @since 1.2.0\n   */\n  format: string;\n}\nexport interface GalleryImageOptions {\n  /**\n   * The quality of image to return as JPEG, from 0-100\n   *\n   * @since 1.2.0\n   */\n  quality?: number;\n  /**\n   * The desired maximum width of the saved image. The aspect ratio is respected.\n   *\n   * @since 1.2.0\n   */\n  width?: number;\n  /**\n   * The desired maximum height of the saved image. The aspect ratio is respected.\n   *\n   * @since 1.2.0\n   */\n  height?: number;\n  /**\n   * Whether to automatically rotate the image \"up\" to correct for orientation\n   * in portrait mode\n   * @default: true\n   *\n   * @since 1.2.0\n   */\n  correctOrientation?: boolean;\n\n  /**\n   * iOS only: The presentation style of the Camera.\n   * @default: 'fullscreen'\n   *\n   * @since 1.2.0\n   */\n  presentationStyle?: 'fullscreen' | 'popover';\n\n  /**\n   * iOS only: Maximum number of pictures the user will be able to choose.\n   * @default 0 (unlimited)\n   *\n   * @since 1.2.0\n   */\n  limit?: number;\n}\n\nexport enum CameraSource {\n  /**\n   * Prompts the user to select either the photo album or take a photo.\n   */\n  Prompt = 'PROMPT',\n  /**\n   * Take a new photo using the camera.\n   */\n  Camera = 'CAMERA',\n  /**\n   * Pick an existing photo from the gallery or photo album.\n   */\n  Photos = 'PHOTOS',\n}\n\nexport enum CameraDirection {\n  Rear = 'REAR',\n  Front = 'FRONT',\n}\n\nexport enum CameraResultType {\n  Uri = 'uri',\n  Base64 = 'base64',\n  DataUrl = 'dataUrl',\n}\n\n/**\n * @deprecated Use `Photo`.\n * @since 1.0.0\n */\nexport type CameraPhoto = Photo;\n\n/**\n * @deprecated Use `ImageOptions`.\n * @since 1.0.0\n */\nexport type CameraOptions = ImageOptions;\n"]}