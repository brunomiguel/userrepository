{
  "manifest": {
    "name": "react-select",
    "version": "3.2.0",
    "description": "A Select control built with and for ReactJS",
    "main": "dist/react-select.cjs.js",
    "module": "dist/react-select.esm.js",
    "sideEffects": false,
    "author": {
      "name": "Jed Watson"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/JedWatson/react-select/tree/master/packages/react-select"
    },
    "dependencies": {
      "@babel/runtime": "^7.4.4",
      "@emotion/cache": "^10.0.9",
      "@emotion/core": "^10.0.9",
      "@emotion/css": "^10.0.9",
      "memoize-one": "^5.0.0",
      "prop-types": "^15.6.0",
      "react-input-autosize": "^3.0.0",
      "react-transition-group": "^4.3.0"
    },
    "devDependencies": {
      "enzyme": "^3.8.0",
      "enzyme-to-json": "^3.3.0",
      "jest-in-case": "^1.0.2",
      "react": "^16.13.0",
      "react-dom": "^16.13.0"
    },
    "peerDependencies": {
      "react": "^16.8.0 || ^17.0.0",
      "react-dom": "^16.8.0 || ^17.0.0"
    },
    "files": [
      "dist",
      "src",
      "base",
      "animated",
      "async",
      "creatable",
      "async-creatable"
    ],
    "keywords": [
      "combobox",
      "form",
      "input",
      "multiselect",
      "react",
      "react-component",
      "select",
      "ui"
    ],
    "preconstruct": {
      "entrypoints": [
        ".",
        "base",
        "animated",
        "async",
        "creatable",
        "async-creatable"
      ]
    },
    "browser": {
      "./dist/react-select.cjs.js": "./dist/react-select.browser.cjs.js",
      "./dist/react-select.esm.js": "./dist/react-select.browser.esm.js"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-select-3.2.0-de9284700196f5f9b5277c5d850a9ce85f5c72fe-integrity/node_modules/react-select/package.json",
    "readmeFilename": "README.md",
    "readme": "[![NPM](https://img.shields.io/npm/v/react-select.svg)](https://www.npmjs.com/package/react-select)\n[![CircleCI](https://circleci.com/gh/JedWatson/react-select/tree/master.svg?style=shield)](https://circleci.com/gh/JedWatson/react-select/tree/master)\n[![Coverage Status](https://coveralls.io/repos/JedWatson/react-select/badge.svg?branch=master&service=github)](https://coveralls.io/github/JedWatson/react-select?branch=master)\n[![Supported by Thinkmill](https://thinkmill.github.io/badge/heart.svg)](http://thinkmill.com.au/?utm_source=github&utm_medium=badge&utm_campaign=react-select)\n\n# React-Select\n\nThe Select control for [React](https://reactjs.com). Initially built for use in [KeystoneJS](http://www.keystonejs.com).\n\nSee [react-select.com](https://www.react-select.com) for live demos and comprehensive docs.\n\nSee our [upgrade guide](https://github.com/JedWatson/react-select/issues/3585) for a breakdown on how to upgrade from v2 to v3.\n\nReact Select is funded by [Thinkmill](https://www.thinkmill.com.au) and [Atlassian](https://atlaskit.atlassian.com). It represents a whole new approach to developing powerful React.js components that _just work_ out of the box, while being extremely customisable.\n\nFeatures include:\n\n- Flexible approach to data, with customisable functions\n- Extensible styling API with [emotion](https://emotion.sh)\n- Component Injection API for complete control over the UI behaviour\n- Controllable state props and modular architecture\n- Long-requested features like option groups, portal support, animation, and more\n\nIf you're interested in the background, watch Jed's [talk on React Select](https://youtu.be/Eb2wy-HNGMo) at ReactNYC in March 2018.\n\nSee our [upgrade guide](https://react-select.com/upgrade-guide) for a breakdown on how to upgrade from v1 to v2.\n\nThe old docs and examples will continue to be available at [v1.react-select.com](https://v1.react-select.com).\n\n# Installation and usage\n\nThe easiest way to use react-select is to install it from npm and build it into your app with Webpack.\n\n```\nyarn add react-select\n```\n\nThen use it in your app:\n\n```js\nimport React from 'react';\nimport Select from 'react-select';\n\nconst options = [\n  { value: 'chocolate', label: 'Chocolate' },\n  { value: 'strawberry', label: 'Strawberry' },\n  { value: 'vanilla', label: 'Vanilla' },\n];\n\nclass App extends React.Component {\n  state = {\n    selectedOption: null,\n  };\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n    console.log(`Option selected:`, selectedOption);\n  };\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <Select\n        value={selectedOption}\n        onChange={this.handleChange}\n        options={options}\n      />\n    );\n  }\n}\n```\n\n## Props\n\nCommon props you may want to specify include:\n\n- `autoFocus` - focus the control when it mounts\n- `className` - apply a className to the control\n- `classNamePrefix` - apply classNames to inner elements with the given prefix\n- `isDisabled` - disable the control\n- `isMulti` - allow the user to select multiple values\n- `isSearchable` - allow the user to search for matching options\n- `name` - generate an HTML input with this name, containing the current value\n- `onChange` - subscribe to change events\n- `options` - specify the options the user can select from\n- `placeholder` - change the text displayed when no option is selected\n- `value` - control the current value\n\nSee the [props documentation](https://www.react-select.com/props) for complete documentation on the props react-select supports.\n\n## Controllable Props\n\nYou can control the following props by providing values for them. If you don't, react-select will manage them for you.\n\n- `value` / `onChange` - specify the current value of the control\n- `menuIsOpen` / `onMenuOpen` / `onMenuClose` - control whether the menu is open\n- `inputValue` / `onInputChange` - control the value of the search input (changing this will update the available options)\n\nIf you don't provide these props, you can set the initial value of the state they control:\n\n- `defaultValue` - set the initial value of the control\n- `defaultMenuIsOpen` - set the initial open value of the menu\n- `defaultInputValue` - set the initial value of the search input\n\n## Methods\n\nReact-select exposes two public methods:\n\n- `focus()` - focus the control programatically\n- `blur()` - blur the control programatically\n\n## Customisation\n\nCheck the docs for more information on:\n\n- [Customising the styles](https://www.react-select.com/styles)\n- [Using custom components](https://www.react-select.com/components)\n- [Using the built-in animated components](https://www.react-select.com/home#animated-components)\n- [Creating an async select](https://www.react-select.com/async)\n- [Allowing users to create new options](https://www.react-select.com/creatable)\n- [Advanced use-cases](https://www.react-select.com/advanced)\n\n# Thanks\n\nThank you to everyone who has contributed to this project. It's been a wild ride.\n\nIf you like React Select, you should [follow me on twitter](https://twitter.com/jedwatson)\n\nShout out to [Joss Mackison](https://github.com/jossmac), [Charles Lee](https://github.com/gwyneplaine), [Ben Conolly](https://github.com/Noviny), [Dave Brotherstone](https://github.com/bruderstein), [Brian Vaughn](https://github.com/bvaughn), and the Atlassian Design System team ❤️\n\n## License\n\nMIT Licensed. Copyright (c) Jed Watson 2019.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-select/-/react-select-3.2.0.tgz#de9284700196f5f9b5277c5d850a9ce85f5c72fe",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-select/-/react-select-3.2.0.tgz",
    "hash": "de9284700196f5f9b5277c5d850a9ce85f5c72fe",
    "integrity": "sha512-B/q3TnCZXEKItO0fFN/I0tWOX3WJvi/X2wtdffmwSQVRwg5BpValScTO1vdic9AxlUgmeSzib2hAZAwIUQUZGQ==",
    "registry": "npm",
    "packageName": "react-select",
    "cacheIntegrity": "sha512-B/q3TnCZXEKItO0fFN/I0tWOX3WJvi/X2wtdffmwSQVRwg5BpValScTO1vdic9AxlUgmeSzib2hAZAwIUQUZGQ== sha1-3pKEcAGW9fm1J3xdhQqc6F9ccv4="
  },
  "registry": "npm",
  "hash": "de9284700196f5f9b5277c5d850a9ce85f5c72fe"
}