{
  "manifest": {
    "name": "big-integer",
    "version": "1.6.51",
    "author": {
      "name": "Peter Olson",
      "email": "peter.e.c.olson+npm@gmail.com"
    },
    "description": "An arbitrary length integer library for Javascript",
    "contributors": [],
    "bin": {},
    "scripts": {
      "test": "tsc && karma start my.conf.js && node spec/tsDefinitions.js",
      "minify": "uglifyjs BigInteger.js -o BigInteger.min.js"
    },
    "main": "./BigInteger",
    "repository": {
      "type": "git",
      "url": "git@github.com:peterolson/BigInteger.js.git"
    },
    "keywords": [
      "math",
      "big",
      "bignum",
      "bigint",
      "biginteger",
      "integer",
      "arbitrary",
      "precision",
      "arithmetic"
    ],
    "devDependencies": {
      "@types/lodash": "^4.14.175",
      "@types/node": "^7.10.2",
      "coveralls": "^3.0.6",
      "jasmine": "3.5.0",
      "jasmine-core": "^3.5.0",
      "karma": "^6.3.4",
      "karma-cli": "^2.0.0",
      "karma-coverage": "^2.0.3",
      "karma-jasmine": "^4.0.1",
      "karma-phantomjs-launcher": "^1.0.4",
      "lodash": "^4.17.21",
      "typescript": "^3.6.3",
      "uglifyjs": "^2.4.10"
    },
    "license": "Unlicense",
    "engines": {
      "node": ">=0.6"
    },
    "typings": "./BigInteger.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-big-integer-1.6.51-0df92a5d9880560d3ff2d5fd20245c889d130686-integrity/node_modules/big-integer/package.json",
    "readmeFilename": "README.md",
    "readme": "# BigInteger.js [![Build Status][travis-img]][travis-url] [![Coverage Status][coveralls-img]][coveralls-url] [![Monthly Downloads][downloads-img]][downloads-url]\n\n[travis-url]: https://travis-ci.org/peterolson/BigInteger.js\n[travis-img]: https://travis-ci.org/peterolson/BigInteger.js.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/peterolson/BigInteger.js?branch=master\n[coveralls-img]: https://coveralls.io/repos/peterolson/BigInteger.js/badge.svg?branch=master&service=github\n[downloads-url]: https://www.npmjs.com/package/big-integer\n[downloads-img]: https://img.shields.io/npm/dm/big-integer.svg\n\n**BigInteger.js** is an arbitrary-length integer library for Javascript, allowing arithmetic operations on integers of unlimited size, notwithstanding memory and time limitations.\n\n**Update (December 2, 2018):** [`BigInt` is being added as a native feature of JavaScript](https://tc39.github.io/proposal-bigint/). This library now works as a polyfill: if the environment supports the native `BigInt`, this library acts as a thin wrapper over the native implementation.\n\n## Installation\n\nIf you are using a browser, you can download [BigInteger.js from GitHub](http://peterolson.github.com/BigInteger.js/BigInteger.min.js) or just hotlink to it:\n\n\t<script src=\"https://peterolson.github.io/BigInteger.js/BigInteger.min.js\"></script>\n\nIf you are using node, you can install BigInteger with [npm](https://npmjs.org/).\n\n    npm install big-integer\n\nThen you can include it in your code:\n\n\tvar bigInt = require(\"big-integer\");\n\n\n## Usage\n### `bigInt(number, [base], [alphabet], [caseSensitive])`\n\nYou can create a bigInt by calling the `bigInt` function. You can pass in\n\n - a string, which it will parse as an bigInt and throw an `\"Invalid integer\"` error if the parsing fails.\n - a Javascript number, which it will parse as an bigInt and throw an `\"Invalid integer\"` error if the parsing fails.\n - another bigInt.\n - nothing, and it will return `bigInt.zero`.\n\n If you provide a second parameter, then it will parse `number` as a number in base `base`. Note that `base` can be any bigInt (even negative or zero). The letters \"a-z\" and \"A-Z\" will be interpreted as the numbers 10 to 35. Higher digits can be specified in angle brackets (`<` and `>`). The default `base` is `10`.\n\n You can specify a custom alphabet for base conversion with the third parameter. The default `alphabet` is `\"0123456789abcdefghijklmnopqrstuvwxyz\"`.\n\n The fourth parameter specifies whether or not the number string should be case-sensitive, i.e. whether `a` and `A` should be treated as different digits. By default `caseSensitive` is `false`.\n\nExamples:\n\n    var zero = bigInt();\n    var ninetyThree = bigInt(93);\n\tvar largeNumber = bigInt(\"75643564363473453456342378564387956906736546456235345\");\n\tvar googol = bigInt(\"1e100\");\n\tvar bigNumber = bigInt(largeNumber);\n\n\tvar maximumByte = bigInt(\"FF\", 16);\n\tvar fiftyFiveGoogol = bigInt(\"<55>0\", googol);\n\nNote that Javascript numbers larger than `9007199254740992` and smaller than `-9007199254740992` are not precisely represented numbers and will not produce exact results. If you are dealing with numbers outside that range, it is better to pass in strings.\n\n### Method Chaining\n\nNote that bigInt operations return bigInts, which allows you to chain methods, for example:\n\n    var salary = bigInt(dollarsPerHour).times(hoursWorked).plus(randomBonuses)\n\n### Constants\n\nThere are three named constants already stored that you do not have to construct with the `bigInt` function yourself:\n\n - `bigInt.one`, equivalent to `bigInt(1)`\n - `bigInt.zero`, equivalent to `bigInt(0)`\n - `bigInt.minusOne`, equivalent to `bigInt(-1)`\n\nThe numbers from -999 to 999 are also already prestored and can be accessed using `bigInt[index]`, for example:\n\n - `bigInt[-999]`, equivalent to `bigInt(-999)`\n - `bigInt[256]`, equivalent to `bigInt(256)`\n\n### Methods\n\n#### `abs()`\n\nReturns the absolute value of a bigInt.\n\n - `bigInt(-45).abs()` => `45`\n - `bigInt(45).abs()` => `45`\n\n#### `add(number)`\n\nPerforms addition.\n\n - `bigInt(5).add(7)` => `12`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Addition)\n\n#### `and(number)`\n\nPerforms the bitwise AND operation. The operands are treated as if they were represented using [two's complement representation](http://en.wikipedia.org/wiki/Two%27s_complement).\n\n - `bigInt(6).and(3)` => `2`\n - `bigInt(6).and(-3)` => `4`\n\n#### `bitLength()`\n\nReturns the number of digits required to represent a bigInt in binary.\n\n - `bigInt(5)` => `3` (since 5 is `101` in binary, which is three digits long)\n\n#### `compare(number)`\n\nPerforms a comparison between two numbers. If the numbers are equal, it returns `0`. If the first number is greater, it returns `1`. If the first number is lesser, it returns `-1`.\n\n - `bigInt(5).compare(5)` => `0`\n - `bigInt(5).compare(4)` => `1`\n - `bigInt(4).compare(5)` => `-1`\n\n#### `compareAbs(number)`\n\nPerforms a comparison between the absolute value of two numbers.\n\n - `bigInt(5).compareAbs(-5)` => `0`\n - `bigInt(5).compareAbs(4)` => `1`\n - `bigInt(4).compareAbs(-5)` => `-1`\n\n#### `compareTo(number)`\n\nAlias for the `compare` method.\n\n#### `divide(number)`\n\nPerforms integer division, disregarding the remainder.\n\n - `bigInt(59).divide(5)` => `11`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Division)\n\n#### `divmod(number)`\n\nPerforms division and returns an object with two properties: `quotient` and `remainder`. The sign of the remainder will match the sign of the dividend.\n\n - `bigInt(59).divmod(5)` => `{quotient: bigInt(11), remainder: bigInt(4) }`\n - `bigInt(-5).divmod(2)` => `{quotient: bigInt(-2), remainder: bigInt(-1) }`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Division)\n\n#### `eq(number)`\n\nAlias for the `equals` method.\n\n#### `equals(number)`\n\nChecks if two numbers are equal.\n\n - `bigInt(5).equals(5)` => `true`\n - `bigInt(4).equals(7)` => `false`\n\n#### `geq(number)`\n\nAlias for the `greaterOrEquals` method.\n\n\n#### `greater(number)`\n\nChecks if the first number is greater than the second.\n\n - `bigInt(5).greater(6)` => `false`\n - `bigInt(5).greater(5)` => `false`\n - `bigInt(5).greater(4)` => `true`\n\n#### `greaterOrEquals(number)`\n\nChecks if the first number is greater than or equal to the second.\n\n - `bigInt(5).greaterOrEquals(6)` => `false`\n - `bigInt(5).greaterOrEquals(5)` => `true`\n - `bigInt(5).greaterOrEquals(4)` => `true`\n\n#### `gt(number)`\n\nAlias for the `greater` method.\n\n#### `isDivisibleBy(number)`\n\nReturns `true` if the first number is divisible by the second number, `false` otherwise.\n\n - `bigInt(999).isDivisibleBy(333)` => `true`\n - `bigInt(99).isDivisibleBy(5)` => `false`\n\n#### `isEven()`\n\nReturns `true` if the number is even, `false` otherwise.\n\n - `bigInt(6).isEven()` => `true`\n - `bigInt(3).isEven()` => `false`\n\n#### `isNegative()`\n\nReturns `true` if the number is negative, `false` otherwise.\nReturns `false` for `0` and `-0`.\n\n - `bigInt(-23).isNegative()` => `true`\n - `bigInt(50).isNegative()` => `false`\n\n#### `isOdd()`\n\nReturns `true` if the number is odd, `false` otherwise.\n\n - `bigInt(13).isOdd()` => `true`\n - `bigInt(40).isOdd()` => `false`\n\n#### `isPositive()`\n\nReturn `true` if the number is positive, `false` otherwise.\nReturns `false` for `0` and `-0`.\n\n - `bigInt(54).isPositive()` => `true`\n - `bigInt(-1).isPositive()` => `false`\n\n#### `isPrime(strict?)`\n\nReturns `true` if the number is prime, `false` otherwise.\nSet \"strict\" boolean to true to force GRH-supported lower bound of 2*log(N)^2.\n\n - `bigInt(5).isPrime()` => `true`\n - `bigInt(6).isPrime()` => `false`\n\n#### `isProbablePrime([iterations], [rng])`\n\nReturns `true` if the number is very likely to be prime, `false` otherwise.\nSupplying `iterations` is optional - it determines the number of iterations of the test (default: `5`). The more iterations, the lower chance of getting a false positive.\nThis uses the [Miller Rabin test](https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test).\n\n - `bigInt(5).isProbablePrime()` => `true`\n - `bigInt(49).isProbablePrime()` => `false`\n - `bigInt(1729).isProbablePrime()` => `false`\n\nNote that this function is not deterministic, since it relies on random sampling of factors, so the result for some numbers is not always the same - unless you pass a predictable random number generator as `rng`. The behavior and requirements are the same as with `randBetween`.\n\n - `bigInt(1729).isProbablePrime(1, () => 0.1)` => `false`\n - `bigInt(1729).isProbablePrime(1, () => 0.2)` => `true`\n\nIf the number is composite then the Miller–Rabin primality test declares the number probably prime with a probability at most `4` to the power `−iterations`.\nIf the number is prime, this function always returns `true`.\n\n#### `isUnit()`\n\nReturns `true` if the number is `1` or `-1`, `false` otherwise.\n\n - `bigInt.one.isUnit()` => `true`\n - `bigInt.minusOne.isUnit()` => `true`\n - `bigInt(5).isUnit()` => `false`\n\n#### `isZero()`\n\nReturn `true` if the number is `0` or `-0`, `false` otherwise.\n\n - `bigInt.zero.isZero()` => `true`\n - `bigInt(\"-0\").isZero()` => `true`\n - `bigInt(50).isZero()` => `false`\n\n#### `leq(number)`\n\nAlias for the `lesserOrEquals` method.\n\n#### `lesser(number)`\n\nChecks if the first number is lesser than the second.\n\n - `bigInt(5).lesser(6)` => `true`\n - `bigInt(5).lesser(5)` => `false`\n - `bigInt(5).lesser(4)` => `false`\n\n#### `lesserOrEquals(number)`\n\nChecks if the first number is less than or equal to the second.\n\n - `bigInt(5).lesserOrEquals(6)` => `true`\n - `bigInt(5).lesserOrEquals(5)` => `true`\n - `bigInt(5).lesserOrEquals(4)` => `false`\n\n#### `lt(number)`\n\nAlias for the `lesser` method.\n\n#### `minus(number)`\n\nAlias for the `subtract` method.\n\n - `bigInt(3).minus(5)` => `-2`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Subtraction)\n\n#### `mod(number)`\n\nPerforms division and returns the remainder, disregarding the quotient. The sign of the remainder will match the sign of the dividend.\n\n - `bigInt(59).mod(5)` =>  `4`\n - `bigInt(-5).mod(2)` => `-1`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Division)\n\n#### `modInv(mod)`\n\nFinds the [multiplicative inverse](https://en.wikipedia.org/wiki/Modular_multiplicative_inverse) of the number modulo `mod`.\n\n - `bigInt(3).modInv(11)` => `4`\n - `bigInt(42).modInv(2017)` => `1969`\n\n#### `modPow(exp, mod)`\n\nTakes the number to the power `exp` modulo `mod`.\n\n - `bigInt(10).modPow(3, 30)` => `10`\n\n#### `multiply(number)`\n\nPerforms multiplication.\n\n - `bigInt(111).multiply(111)` => `12321`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Multiplication)\n\n#### `neq(number)`\n\nAlias for the `notEquals` method.\n\n#### `next()`\n\nAdds one to the number.\n\n - `bigInt(6).next()` => `7`\n\n#### `not()`\n\nPerforms the bitwise NOT operation. The operands are treated as if they were represented using [two's complement representation](http://en.wikipedia.org/wiki/Two%27s_complement).\n\n - `bigInt(10).not()` => `-11`\n - `bigInt(0).not()` => `-1`\n\n#### `notEquals(number)`\n\nChecks if two numbers are not equal.\n\n - `bigInt(5).notEquals(5)` => `false`\n - `bigInt(4).notEquals(7)` => `true`\n\n#### `or(number)`\n\nPerforms the bitwise OR operation. The operands are treated as if they were represented using [two's complement representation](http://en.wikipedia.org/wiki/Two%27s_complement).\n\n - `bigInt(13).or(10)` => `15`\n - `bigInt(13).or(-8)` => `-3`\n\n#### `over(number)`\n\nAlias for the `divide` method.\n\n - `bigInt(59).over(5)` => `11`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Division)\n\n#### `plus(number)`\n\nAlias for the `add` method.\n\n - `bigInt(5).plus(7)` => `12`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Addition)\n\n#### `pow(number)`\n\nPerforms exponentiation. If the exponent is less than `0`, `pow` returns `0`. `bigInt.zero.pow(0)` returns `1`.\n\n - `bigInt(16).pow(16)` => `18446744073709551616`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Exponentiation)\n\n#### `prev(number)`\n\nSubtracts one from the number.\n\n - `bigInt(6).prev()` => `5`\n\n#### `remainder(number)`\n\nAlias for the `mod` method.\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Division)\n\n#### `shiftLeft(n)`\n\nShifts the number left by `n` places in its binary representation. If a negative number is provided, it will shift right. Throws an error if `n` is outside of the range `[-9007199254740992, 9007199254740992]`.\n\n - `bigInt(8).shiftLeft(2)` => `32`\n - `bigInt(8).shiftLeft(-2)` => `2`\n\n#### `shiftRight(n)`\n\nShifts the number right by `n` places in its binary representation. If a negative number is provided, it will shift left. Throws an error if `n` is outside of the range `[-9007199254740992, 9007199254740992]`.\n\n - `bigInt(8).shiftRight(2)` => `2`\n - `bigInt(8).shiftRight(-2)` => `32`\n\n#### `square()`\n\nSquares the number\n\n - `bigInt(3).square()` => `9`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Squaring)\n\n#### `subtract(number)`\n\nPerforms subtraction.\n\n - `bigInt(3).subtract(5)` => `-2`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Subtraction)\n\n#### `times(number)`\n\nAlias for the `multiply` method.\n\n - `bigInt(111).times(111)` => `12321`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#Multiplication)\n\n#### `toArray(radix)`\n\nConverts a bigInt into an object with the properties \"value\" and \"isNegative.\" \"Value\" is an array of integers modulo the given radix. \"isNegative\" is a boolean that represents the sign of the result.\n\n - `bigInt(\"1e9\").toArray(10)` => {\n     value: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     isNegative: false\n   }\n - `bigInt(\"1e9\").toArray(16)` => {\n     value: [3, 11, 9, 10, 12, 10, 0, 0],\n     isNegative: false\n   }\n - `bigInt(567890).toArray(100)` => {\n     value: [56, 78, 90],\n     isNegative: false\n   }\n\nNegative bases are supported.\n\n - `bigInt(12345).toArray(-10)` => {\n     value: [2, 8, 4, 6, 5],\n     isNegative: false\n   }\n\nBase 1 and base -1 are also supported.\n\n - `bigInt(-15).toArray(1)` => {\n     value: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n     isNegative: true\n   }\n - `bigInt(-15).toArray(-1)` => {\n     value: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n             0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n     isNegative: false\n   }\n\nBase 0 is only allowed for the number zero.\n\n - `bigInt(0).toArray(0)` => {\n     value: [0],\n     isNegative: false\n   }\n - `bigInt(1).toArray(0)` => `Error: Cannot convert nonzero numbers to base 0.`\n\n#### `toJSNumber()`\n\nConverts a bigInt into a native Javascript number. Loses precision for numbers outside the range `[-9007199254740992, 9007199254740992]`.\n\n - `bigInt(\"18446744073709551616\").toJSNumber()` => `18446744073709552000`\n\n#### `xor(number)`\n\nPerforms the bitwise XOR operation. The operands are treated as if they were represented using [two's complement representation](http://en.wikipedia.org/wiki/Two%27s_complement).\n\n - `bigInt(12).xor(5)` => `9`\n - `bigInt(12).xor(-5)` => `-9`\n\n### Static Methods\n\n#### `fromArray(digits, base = 10, isNegative?)`\n\nConstructs a bigInt from an array of digits in base `base`. The optional `isNegative` flag will make the number negative.\n\n - `bigInt.fromArray([1, 2, 3, 4, 5], 10)` => `12345`\n - `bigInt.fromArray([1, 0, 0], 2, true)` => `-4`\n\n#### `gcd(a, b)`\n\nFinds the greatest common denominator of `a` and `b`.\n\n - `bigInt.gcd(42,56)` => `14`\n\n#### `isInstance(x)`\n\nReturns `true` if `x` is a BigInteger, `false` otherwise.\n\n - `bigInt.isInstance(bigInt(14))` => `true`\n - `bigInt.isInstance(14)` => `false`\n\n#### `lcm(a,b)`\n\nFinds the least common multiple of `a` and `b`.\n\n - `bigInt.lcm(21, 6)` => `42`\n\n#### `max(a,b)`\n\nReturns the largest of `a` and `b`.\n\n - `bigInt.max(77, 432)` => `432`\n\n#### `min(a,b)`\n\nReturns the smallest of `a` and `b`.\n\n - `bigInt.min(77, 432)` => `77`\n\n#### `randBetween(min, max, [rng])`\n\nReturns a random number between `min` and `max`, optionally using `rng` to generate randomness.\n\n - `bigInt.randBetween(\"-1e100\", \"1e100\")` => (for example) `8494907165436643479673097939554427056789510374838494147955756275846226209006506706784609314471378745`\n\n`rng` should take no arguments and return a `number` between 0 and 1. It defaults to `Math.random`.\n\n  - `bigInt.randBetween(\"-1e100\", \"1e100\", () => 0.5)` => (always) `50000005000000500000050000005000000500000050000005000000500000050000005000000500000050000005000000`\n\n\n### Override Methods\n\n#### `toString(radix = 10, [alphabet])`\n\nConverts a bigInt to a string. There is an optional radix parameter (which defaults to 10) that converts the number to the given radix. Digits in the range `10-35` will use the letters `a-z`.\n\n - `bigInt(\"1e9\").toString()` => `\"1000000000\"`\n - `bigInt(\"1e9\").toString(16)` => `\"3b9aca00\"`\n\n You can use a custom base alphabet with the second parameter. The default `alphabet` is `\"0123456789abcdefghijklmnopqrstuvwxyz\"`.\n\n  - `bigInt(\"5\").toString(2, \"aA\")` => `\"AaA\"`\n\n**Note that arithmetical operators will trigger the `valueOf` function rather than the `toString` function.** When converting a bigInteger to a string, you should use the `toString` method or the `String` function instead of adding the empty string.\n\n - `bigInt(\"999999999999999999\").toString()` => `\"999999999999999999\"`\n - `String(bigInt(\"999999999999999999\"))` => `\"999999999999999999\"`\n - `bigInt(\"999999999999999999\") + \"\"` => `1000000000000000000`\n\nBases larger than 36 are supported. If a digit is greater than or equal to 36, it will be enclosed in angle brackets.\n\n - `bigInt(567890).toString(100)` => `\"<56><78><90>\"`\n\nNegative bases are also supported.\n\n - `bigInt(12345).toString(-10)` => `\"28465\"`\n\nBase 1 and base -1 are also supported.\n\n - `bigInt(-15).toString(1)` => `\"-111111111111111\"`\n - `bigInt(-15).toString(-1)` => `\"101010101010101010101010101010\"`\n\nBase 0 is only allowed for the number zero.\n\n - `bigInt(0).toString(0)` => `0`\n - `bigInt(1).toString(0)` => `Error: Cannot convert nonzero numbers to base 0.`\n\n[View benchmarks for this method](http://peterolson.github.io/BigInteger.js/benchmark/#toString)\n\n#### `valueOf()`\n\nConverts a bigInt to a native Javascript number. This override allows you to use native arithmetic operators without explicit conversion:\n\n - `bigInt(\"100\") + bigInt(\"200\") === 300; //true`\n\n## Contributors\n\nTo contribute, just fork the project, make some changes, and submit a pull request. Please verify that the unit tests pass before submitting.\n\nThe unit tests are contained in the `spec/spec.js` file. You can run them locally by opening the `spec/SpecRunner.html` or file or running `npm test`. You can also [run the tests online from GitHub](http://peterolson.github.io/BigInteger.js/spec/SpecRunner.html).\n\nThere are performance benchmarks that can be viewed from the `benchmarks/index.html` page. You can [run them online from GitHub](http://peterolson.github.io/BigInteger.js/benchmark/).\n\n## License\n\nThis project is public domain. For more details, read about the [Unlicense](http://unlicense.org/).\n",
    "licenseText": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/big-integer/-/big-integer-1.6.51.tgz#0df92a5d9880560d3ff2d5fd20245c889d130686",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/big-integer/-/big-integer-1.6.51.tgz",
    "hash": "0df92a5d9880560d3ff2d5fd20245c889d130686",
    "integrity": "sha512-GPEid2Y9QU1Exl1rpO9B2IPJGHPSupF5GnVIP0blYvNOMer2bTvSWs1jGOUg04hTmu67nmLsQ9TBo1puaotBHg==",
    "registry": "npm",
    "packageName": "big-integer",
    "cacheIntegrity": "sha512-GPEid2Y9QU1Exl1rpO9B2IPJGHPSupF5GnVIP0blYvNOMer2bTvSWs1jGOUg04hTmu67nmLsQ9TBo1puaotBHg== sha1-DfkqXZiAVg0/8tX9ICRciJ0TBoY="
  },
  "registry": "npm",
  "hash": "0df92a5d9880560d3ff2d5fd20245c889d130686"
}