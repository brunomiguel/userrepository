{
  "manifest": {
    "name": "execa",
    "version": "6.1.0",
    "description": "Process execution for humans",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/execa.git"
    },
    "funding": "https://github.com/sindresorhus/execa?sponsor=1",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "type": "module",
    "exports": "./index.js",
    "engines": {
      "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
    },
    "scripts": {
      "test": "xo && c8 ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts",
      "lib"
    ],
    "keywords": [
      "exec",
      "child",
      "process",
      "execute",
      "fork",
      "execfile",
      "spawn",
      "file",
      "shell",
      "bin",
      "binary",
      "binaries",
      "npm",
      "path",
      "local"
    ],
    "dependencies": {
      "cross-spawn": "^7.0.3",
      "get-stream": "^6.0.1",
      "human-signals": "^3.0.1",
      "is-stream": "^3.0.0",
      "merge-stream": "^2.0.0",
      "npm-run-path": "^5.1.0",
      "onetime": "^6.0.0",
      "signal-exit": "^3.0.7",
      "strip-final-newline": "^3.0.0"
    },
    "devDependencies": {
      "@types/node": "^17.0.17",
      "ava": "^4.0.1",
      "c8": "^7.11.0",
      "get-node": "^12.0.0",
      "is-running": "^2.1.0",
      "p-event": "^5.0.1",
      "semver": "^7.3.5",
      "tempfile": "^4.0.0",
      "tsd": "^0.19.1",
      "xo": "^0.48.0"
    },
    "c8": {
      "reporter": [
        "text",
        "lcov"
      ],
      "exclude": [
        "**/fixtures/**",
        "**/test.js",
        "**/test/**"
      ]
    },
    "xo": {
      "rules": {
        "unicorn/no-empty-file": "off",
        "@typescript-eslint/ban-types": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-execa-6.1.0-cea16dee211ff011246556388effa0818394fb20-integrity/node_modules/execa/package.json",
    "readmeFilename": "readme.md",
    "readme": "<img src=\"media/logo.svg\" width=\"400\">\n<br>\n\n[![Coverage Status](https://codecov.io/gh/sindresorhus/execa/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/execa)\n\n> Process execution for humans\n\n## Why\n\nThis package improves [`child_process`](https://nodejs.org/api/child_process.html) methods with:\n\n- Promise interface.\n- [Strips the final newline](#stripfinalnewline) from the output so you don't have to do `stdout.trim()`.\n- Supports [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) binaries cross-platform.\n- [Improved Windows support.](https://github.com/IndigoUnited/node-cross-spawn#why)\n- Higher max buffer. 100 MB instead of 200 KB.\n- [Executes locally installed binaries by name.](#preferlocal)\n- [Cleans up spawned processes when the parent process dies.](#cleanup)\n- [Get interleaved output](#all) from `stdout` and `stderr` similar to what is printed on the terminal. [*(Async only)*](#execasyncfile-arguments-options)\n- [Can specify file and arguments as a single string without a shell](#execacommandcommand-options)\n- More descriptive errors.\n\n## Install\n\n```sh\nnpm install execa\n```\n\n## Usage\n\n```js\nimport {execa} from 'execa';\n\nconst {stdout} = await execa('echo', ['unicorns']);\nconsole.log(stdout);\n//=> 'unicorns'\n```\n\n### Pipe the child process stdout to the parent\n\n```js\nimport {execa} from 'execa';\n\nexeca('echo', ['unicorns']).stdout.pipe(process.stdout);\n```\n\n### Handling Errors\n\n```js\nimport {execa} from 'execa';\n\n// Catching an error\ntry {\n\tawait execa('unknown', ['command']);\n} catch (error) {\n\tconsole.log(error);\n\t/*\n\t{\n\t\tmessage: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',\n\t\terrno: -2,\n\t\tcode: 'ENOENT',\n\t\tsyscall: 'spawn unknown',\n\t\tpath: 'unknown',\n\t\tspawnargs: ['command'],\n\t\toriginalMessage: 'spawn unknown ENOENT',\n\t\tshortMessage: 'Command failed with ENOENT: unknown command spawn unknown ENOENT',\n\t\tcommand: 'unknown command',\n\t\tescapedCommand: 'unknown command',\n\t\tstdout: '',\n\t\tstderr: '',\n\t\tall: '',\n\t\tfailed: true,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t}\n\t*/\n}\n```\n\n### Cancelling a spawned process\n\n```js\nimport {execa} from 'execa';\n\nconst abortController = new AbortController();\nconst subprocess = execa('node', [], {signal: abortController.signal});\n\nsetTimeout(() => {\n\tabortController.abort();\n}, 1000);\n\ntry {\n\tawait subprocess;\n} catch (error) {\n\tconsole.log(subprocess.killed); // true\n\tconsole.log(error.isCanceled); // true\n}\n```\n\n### Catching an error with the sync method\n\n```js\nimport {execaSync} from 'execa';\n\ntry {\n\texecaSync('unknown', ['command']);\n} catch (error) {\n\tconsole.log(error);\n\t/*\n\t{\n\t\tmessage: 'Command failed with ENOENT: unknown command spawnSync unknown ENOENT',\n\t\terrno: -2,\n\t\tcode: 'ENOENT',\n\t\tsyscall: 'spawnSync unknown',\n\t\tpath: 'unknown',\n\t\tspawnargs: ['command'],\n\t\toriginalMessage: 'spawnSync unknown ENOENT',\n\t\tshortMessage: 'Command failed with ENOENT: unknown command spawnSync unknown ENOENT',\n\t\tcommand: 'unknown command',\n\t\tescapedCommand: 'unknown command',\n\t\tstdout: '',\n\t\tstderr: '',\n\t\tall: '',\n\t\tfailed: true,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t}\n\t*/\n}\n```\n\n### Kill a process\n\nUsing SIGTERM, and after 2 seconds, kill it with SIGKILL.\n\n```js\nconst subprocess = execa('node');\n\nsetTimeout(() => {\n\tsubprocess.kill('SIGTERM', {\n\t\tforceKillAfterTimeout: 2000\n\t});\n}, 1000);\n```\n\n## API\n\n### execa(file, arguments, options?)\n\nExecute a file. Think of this as a mix of [`child_process.execFile()`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) and [`child_process.spawn()`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options).\n\nNo escaping/quoting is needed.\n\nUnless the [`shell`](#shell) option is used, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nReturns a [`child_process` instance](https://nodejs.org/api/child_process.html#child_process_class_childprocess) which:\n  - is also a `Promise` resolving or rejecting with a [`childProcessResult`](#childProcessResult).\n  - exposes the following additional methods and properties.\n\n#### kill(signal?, options?)\n\nSame as the original [`child_process#kill()`](https://nodejs.org/api/child_process.html#child_process_subprocess_kill_signal) except: if `signal` is `SIGTERM` (the default value) and the child process is not terminated after 5 seconds, force it by sending `SIGKILL`.\n\n##### options.forceKillAfterTimeout\n\nType: `number | false`\\\nDefault: `5000`\n\nMilliseconds to wait for the child process to terminate before sending `SIGKILL`.\n\nCan be disabled with `false`.\n\n#### all\n\nType: `ReadableStream | undefined`\n\nStream combining/interleaving [`stdout`](https://nodejs.org/api/child_process.html#child_process_subprocess_stdout) and [`stderr`](https://nodejs.org/api/child_process.html#child_process_subprocess_stderr).\n\nThis is `undefined` if either:\n  - the [`all` option](#all-2) is `false` (the default value)\n  - both [`stdout`](#stdout-1) and [`stderr`](#stderr-1) options are set to [`'inherit'`, `'ipc'`, `Stream` or `integer`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio)\n\n### execaSync(file, arguments?, options?)\n\nExecute a file synchronously.\n\nReturns or throws a [`childProcessResult`](#childProcessResult).\n\n### execaCommand(command, options?)\n\nSame as [`execa()`](#execafile-arguments-options) except both file and arguments are specified in a single `command` string. For example, `execa('echo', ['unicorns'])` is the same as `execaCommand('echo unicorns')`.\n\nIf the file or an argument contains spaces, they must be escaped with backslashes. This matters especially if `command` is not a constant but a variable, for example with `__dirname` or `process.cwd()`. Except for spaces, no escaping/quoting is needed.\n\nThe [`shell` option](#shell) must be used if the `command` uses shell-specific features (for example, `&&` or `||`), as opposed to being a simple `file` followed by its `arguments`.\n\n### execaCommandSync(command, options?)\n\nSame as [`execaCommand()`](#execacommand-command-options) but synchronous.\n\nReturns or throws a [`childProcessResult`](#childProcessResult).\n\n### execaNode(scriptPath, arguments?, options?)\n\nExecute a Node.js script as a child process.\n\nSame as `execa('node', [scriptPath, ...arguments], options)` except (like [`child_process#fork()`](https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options)):\n  - the current Node version and options are used. This can be overridden using the [`nodePath`](#nodepath-for-node-only) and [`nodeOptions`](#nodeoptions-for-node-only) options.\n  - the [`shell`](#shell) option cannot be used\n  - an extra channel [`ipc`](https://nodejs.org/api/child_process.html#child_process_options_stdio) is passed to [`stdio`](#stdio)\n\n### childProcessResult\n\nType: `object`\n\nResult of a child process execution. On success this is a plain object. On failure this is also an `Error` instance.\n\nThe child process [fails](#failed) when:\n- its [exit code](#exitcode) is not `0`\n- it was [killed](#killed) with a [signal](#signal)\n- [timing out](#timedout)\n- [being canceled](#iscanceled)\n- there's not enough memory or there are already too many child processes\n\n#### command\n\nType: `string`\n\nThe file and arguments that were run, for logging purposes.\n\nThis is not escaped and should not be executed directly as a process, including using [`execa()`](#execafile-arguments-options) or [`execaCommand()`](#execacommandcommand-options).\n\n#### escapedCommand\n\nType: `string`\n\nSame as [`command`](#command) but escaped.\n\nThis is meant to be copy and pasted into a shell, for debugging purposes.\nSince the escaping is fairly basic, this should not be executed directly as a process, including using [`execa()`](#execafile-arguments-options) or [`execaCommand()`](#execacommandcommand-options).\n\n#### exitCode\n\nType: `number`\n\nThe numeric exit code of the process that was run.\n\n#### stdout\n\nType: `string | Buffer`\n\nThe output of the process on stdout.\n\n#### stderr\n\nType: `string | Buffer`\n\nThe output of the process on stderr.\n\n#### all\n\nType: `string | Buffer | undefined`\n\nThe output of the process with `stdout` and `stderr` interleaved.\n\nThis is `undefined` if either:\n  - the [`all` option](#all-2) is `false` (the default value)\n  - `execaSync()` was used\n\n#### failed\n\nType: `boolean`\n\nWhether the process failed to run.\n\n#### timedOut\n\nType: `boolean`\n\nWhether the process timed out.\n\n#### isCanceled\n\nType: `boolean`\n\nWhether the process was canceled.\n\nYou can cancel the spawned process using the [`signal`](#signal-1) option.\n\n#### killed\n\nType: `boolean`\n\nWhether the process was killed.\n\n#### signal\n\nType: `string | undefined`\n\nThe name of the signal that was used to terminate the process. For example, `SIGFPE`.\n\nIf a signal terminated the process, this property is defined and included in the error message. Otherwise it is `undefined`.\n\n#### signalDescription\n\nType: `string | undefined`\n\nA human-friendly description of the signal that was used to terminate the process. For example, `Floating point arithmetic error`.\n\nIf a signal terminated the process, this property is defined and included in the error message. Otherwise it is `undefined`. It is also `undefined` when the signal is very uncommon which should seldomly happen.\n\n#### message\n\nType: `string`\n\nError message when the child process failed to run. In addition to the [underlying error message](#originalMessage), it also contains some information related to why the child process errored.\n\nThe child process [stderr](#stderr) then [stdout](#stdout) are appended to the end, separated with newlines and not interleaved.\n\n#### shortMessage\n\nType: `string`\n\nThis is the same as the [`message` property](#message) except it does not include the child process stdout/stderr.\n\n#### originalMessage\n\nType: `string | undefined`\n\nOriginal error message. This is the same as the `message` property except it includes neither the child process stdout/stderr nor some additional information added by Execa.\n\nThis is `undefined` unless the child process exited due to an `error` event or a timeout.\n\n### options\n\nType: `object`\n\n#### cleanup\n\nType: `boolean`\\\nDefault: `true`\n\nKill the spawned process when the parent process exits unless either:\n\t- the spawned process is [`detached`](https://nodejs.org/api/child_process.html#child_process_options_detached)\n\t- the parent process is terminated abruptly, for example, with `SIGKILL` as opposed to `SIGTERM` or a normal exit\n\n#### preferLocal\n\nType: `boolean`\\\nDefault: `false`\n\nPrefer locally installed binaries when looking for a binary to execute.\\\nIf you `$ npm install foo`, you can then `execa('foo')`.\n\n#### localDir\n\nType: `string | URL`\\\nDefault: `process.cwd()`\n\nPreferred path to find locally installed binaries in (use with `preferLocal`).\n\nUsing a `URL` is only supported in Node.js `14.18.0`, `16.14.0` or above.\n\n#### execPath\n\nType: `string`\\\nDefault: `process.execPath` (Current Node.js executable)\n\nPath to the Node.js executable to use in child processes.\n\nThis can be either an absolute path or a path relative to the [`cwd` option](#cwd).\n\nRequires [`preferLocal`](#preferlocal) to be `true`.\n\nFor example, this can be used together with [`get-node`](https://github.com/ehmicky/get-node) to run a specific Node.js version in a child process.\n\n#### buffer\n\nType: `boolean`\\\nDefault: `true`\n\nBuffer the output from the spawned process. When set to `false`, you must read the output of [`stdout`](#stdout-1) and [`stderr`](#stderr-1) (or [`all`](#all) if the [`all`](#all-2) option is `true`). Otherwise the returned promise will not be resolved/rejected.\n\nIf the spawned process fails, [`error.stdout`](#stdout), [`error.stderr`](#stderr), and [`error.all`](#all) will contain the buffered data.\n\n#### input\n\nType: `string | Buffer | stream.Readable`\n\nWrite some input to the `stdin` of your binary.\\\nStreams are not allowed when using the synchronous methods.\n\n#### stdin\n\nType: `string | number | Stream | undefined`\\\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### stdout\n\nType: `string | number | Stream | undefined`\\\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### stderr\n\nType: `string | number | Stream | undefined`\\\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### all\n\nType: `boolean`\\\nDefault: `false`\n\nAdd an `.all` property on the [promise](#all) and the [resolved value](#all-1). The property contains the output of the process with `stdout` and `stderr` interleaved.\n\n#### reject\n\nType: `boolean`\\\nDefault: `true`\n\nSetting this to `false` resolves the promise with the error instead of rejecting it.\n\n#### stripFinalNewline\n\nType: `boolean`\\\nDefault: `true`\n\nStrip the final [newline character](https://en.wikipedia.org/wiki/Newline) from the output.\n\n#### extendEnv\n\nType: `boolean`\\\nDefault: `true`\n\nSet to `false` if you don't want to extend the environment variables when providing the `env` property.\n\n---\n\nExeca also accepts the below options which are the same as the options for [`child_process#spawn()`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options)/[`child_process#exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n\n#### cwd\n\nType: `string | URL`\\\nDefault: `process.cwd()`\n\nCurrent working directory of the child process.\n\nUsing a `URL` is only supported in Node.js `14.18.0`, `16.14.0` or above.\n\n#### env\n\nType: `object`\\\nDefault: `process.env`\n\nEnvironment key-value pairs. Extends automatically from `process.env`. Set [`extendEnv`](#extendenv) to `false` if you don't want this.\n\n#### argv0\n\nType: `string`\n\nExplicitly set the value of `argv[0]` sent to the child process. This will be set to `file` if not specified.\n\n#### stdio\n\nType: `string | string[]`\\\nDefault: `pipe`\n\nChild's [stdio](https://nodejs.org/api/child_process.html#child_process_options_stdio) configuration.\n\n#### serialization\n\nType: `string`\\\nDefault: `'json'`\n\nSpecify the kind of serialization used for sending messages between processes when using the [`stdio: 'ipc'`](#stdio) option or [`execaNode()`](#execanodescriptpath-arguments-options):\n\t- `json`: Uses `JSON.stringify()` and `JSON.parse()`.\n\t- `advanced`: Uses [`v8.serialize()`](https://nodejs.org/api/v8.html#v8_v8_serialize_value)\n\nRequires Node.js `13.2.0` or later.\n\n[More info.](https://nodejs.org/api/child_process.html#child_process_advanced_serialization)\n\n#### detached\n\nType: `boolean`\n\nPrepare child to run independently of its parent process. Specific behavior [depends on the platform](https://nodejs.org/api/child_process.html#child_process_options_detached).\n\n#### uid\n\nType: `number`\n\nSets the user identity of the process.\n\n#### gid\n\nType: `number`\n\nSets the group identity of the process.\n\n#### shell\n\nType: `boolean | string`\\\nDefault: `false`\n\nIf `true`, runs `file` inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nWe recommend against using this option since it is:\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection.\n\n#### encoding\n\nType: `string | null`\\\nDefault: `utf8`\n\nSpecify the character encoding used to decode the `stdout` and `stderr` output. If set to `null`, then `stdout` and `stderr` will be a `Buffer` instead of a string.\n\n#### timeout\n\nType: `number`\\\nDefault: `0`\n\nIf timeout is greater than `0`, the parent will send the signal identified by the `killSignal` property (the default is `SIGTERM`) if the child runs longer than timeout milliseconds.\n\n#### maxBuffer\n\nType: `number`\\\nDefault: `100_000_000` (100 MB)\n\nLargest amount of data in bytes allowed on `stdout` or `stderr`.\n\n#### killSignal\n\nType: `string | number`\\\nDefault: `SIGTERM`\n\nSignal value to be used when the spawned process will be killed.\n\n#### signal\n\nType: [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)\n\nYou can abort the spawned process using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\nWhen `AbortController.abort()` is called, [`.isCanceled`](#iscanceled) becomes `false`.\n\n*Requires Node.js 16 or later.*\n\n#### windowsVerbatimArguments\n\nType: `boolean`\\\nDefault: `false`\n\nIf `true`, no quoting or escaping of arguments is done on Windows. Ignored on other platforms. This is set to `true` automatically when the `shell` option is `true`.\n\n#### windowsHide\n\nType: `boolean`\\\nDefault: `true`\n\nOn Windows, do not create a new console window. Please note this also prevents `CTRL-C` [from working](https://github.com/nodejs/node/issues/29837) on Windows.\n\n#### nodePath *(For `.node()` only)*\n\nType: `string`\\\nDefault: [`process.execPath`](https://nodejs.org/api/process.html#process_process_execpath)\n\nNode.js executable used to create the child process.\n\n#### nodeOptions *(For `.node()` only)*\n\nType: `string[]`\\\nDefault: [`process.execArgv`](https://nodejs.org/api/process.html#process_process_execargv)\n\nList of [CLI options](https://nodejs.org/api/cli.html#cli_options) passed to the Node.js executable.\n\n## Tips\n\n### Retry on error\n\nGracefully handle failures by using automatic retries and exponential backoff with the [`p-retry`](https://github.com/sindresorhus/p-retry) package:\n\n```js\nimport pRetry from 'p-retry';\n\nconst run = async () => {\n\tconst results = await execa('curl', ['-sSL', 'https://sindresorhus.com/unicorn']);\n\treturn results;\n};\n\nconsole.log(await pRetry(run, {retries: 5}));\n```\n\n### Save and pipe output from a child process\n\nLet's say you want to show the output of a child process in real-time while also saving it to a variable.\n\n```js\nimport {execa} from 'execa';\n\nconst subprocess = execa('echo', ['foo']);\nsubprocess.stdout.pipe(process.stdout);\n\nconst {stdout} = await subprocess;\nconsole.log('child output:', stdout);\n```\n\n### Redirect output to a file\n\n```js\nimport {execa} from 'execa';\n\nconst subprocess = execa('echo', ['foo'])\nsubprocess.stdout.pipe(fs.createWriteStream('stdout.txt'))\n```\n\n### Redirect input from a file\n\n```js\nimport {execa} from 'execa';\n\nconst subprocess = execa('cat')\nfs.createReadStream('stdin.txt').pipe(subprocess.stdin)\n```\n\n### Execute the current package's binary\n\n```js\nimport {getBinPathSync} from 'get-bin-path';\n\nconst binPath = getBinPathSync();\nconst subprocess = execa(binPath);\n```\n\n`execa` can be combined with [`get-bin-path`](https://github.com/ehmicky/get-bin-path) to test the current package's binary. As opposed to hard-coding the path to the binary, this validates that the `package.json` `bin` field is correctly set up.\n\n## Related\n\n- [gulp-execa](https://github.com/ehmicky/gulp-execa) - Gulp plugin for `execa`\n- [nvexeca](https://github.com/ehmicky/nvexeca) - Run `execa` using any Node.js version\n- [sudo-prompt](https://github.com/jorangreef/sudo-prompt) - Run commands with elevated privileges.\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [@ehmicky](https://github.com/ehmicky)\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-execa?utm_source=npm-execa&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/execa/-/execa-6.1.0.tgz#cea16dee211ff011246556388effa0818394fb20",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/execa/-/execa-6.1.0.tgz",
    "hash": "cea16dee211ff011246556388effa0818394fb20",
    "integrity": "sha512-QVWlX2e50heYJcCPG0iWtf8r0xjEYfz/OYLGDYH+IyjWezzPNxz63qNFOu0l4YftGWuizFVZHHs8PrLU5p2IDA==",
    "registry": "npm",
    "packageName": "execa",
    "cacheIntegrity": "sha512-QVWlX2e50heYJcCPG0iWtf8r0xjEYfz/OYLGDYH+IyjWezzPNxz63qNFOu0l4YftGWuizFVZHHs8PrLU5p2IDA== sha1-zqFt7iEf8BEkZVY4jv+ggYOU+yA="
  },
  "registry": "npm",
  "hash": "cea16dee211ff011246556388effa0818394fb20"
}