{
  "manifest": {
    "name": "style-search",
    "version": "0.1.0",
    "description": "Search CSS(-like) strings",
    "main": "index.js",
    "scripts": {
      "test": "tape test.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidtheclark/style-search.git"
    },
    "keywords": [
      "css",
      "search",
      "stylelint"
    ],
    "author": {
      "name": "David Clark"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/davidtheclark/style-search/issues"
    },
    "homepage": "https://github.com/davidtheclark/style-search#readme",
    "devDependencies": {
      "tape": "^4.5.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-style-search-0.1.0-7958c793e47e32e07d2b5cafe5c0bf8e12e77902-integrity/node_modules/style-search/package.json",
    "readmeFilename": "README.md",
    "readme": "# style-search [![CircleCI](https://circleci.com/gh/davidtheclark/style-search.svg?style=svg)](https://circleci.com/gh/davidtheclark/style-search)\n\nSearch CSS (and CSS-like) strings, with sensitivity to whether matches occur inside strings, comments, and functions.\n\n## Usage\n\n```js\nvar styleSearch = require('style-search');\n\nstyleSearch(options, callback);\n```\n\n**By default, the search ignores strings, comments, and function names.** You can use the options to change this behavior or introduce other restrictions. That is what makes this module more useful for many searches than `indexOf()` or a `RegExp`.\n\nHowever, if you need more detailed parsing, you should consider using the real parsers [PostCSS](https://github.com/postcss/postcss), [`postcss-selector-parser`](https://github.com/postcss/postcss-selector-parser), and [`postcss-value-parser`](https://github.com/TrySound/postcss-value-parser).\n\n### Example\n\n```css\n/* Here is some pink */\na { color: pink; }\na::before { content: \"pink\" }\nb { color: shadesOfPink(7); }\n```\n\n```js\nstyleSearch({\n  source: theCssStringAbove,\n  target: \"pink\",\n}, function(match, count) {\n  /* Only the \"pink\" in `color: pink` will be\n  reported as a match */\n});\n```\n\n### Reporting matches\n\nFor every match found your `callback` is invoked. It is passed two arguments:\n\n- A `match` object with the following properties:\n  - `startIndex`: where the match begins\n  - `endIndex`: where the match ends\n  - `target`: what got matched (useful if your `target` option is an array instead of a single string)\n  - `insideFunctionArguments`: whether the match is inside a function — *this includes the parentheses around the arguments*\n  - `insideComment`: whether the match is inside a comment\n  - `insideString`: whether the match is inside a string\n- The count of how many matches have been found up to this point.\n\n### Options\n\nBelow you'll see that syntax feature options all accept three keywords: `\"skip\"`, `\"check\"`, `\"only\"`. An error will be thrown if you use `\"only\"` more than once.\n\n#### source\n\nString. *Required.*\n\nThe source string to search through.\n\n#### target\n\nString or array of strings. *Required.*\n\nThe target of the search. Can be\n- a single character\n- a string with some length\n- an array of strings, all of which count as matches (the `match` object passed to the `callback` will differentiate which string in the array got matched via its `target` property)\n\n#### once\n\nBoolean. Default: `false`.\n\nIf `true`, the search will stop after one match is found.\n\n#### comments\n\n`\"skip\"` | `\"check\"` | `\"only\"`. Default: `\"skip\"`.\n\nThis includes both standard `/* CSS comments */` and non-standard but widely used `// single line comments`.\n\n#### strings\n\n`\"skip\"` | `\"check\"` | `\"only\"`. Default: `\"skip\"`.\n\n#### functionNames\n\n`\"skip\"` | `\"check\"` | `\"only\"`. Default: `\"skip\"`.\n\n#### functionArguments\n\n`\"skip\"` | `\"check\"` | `\"only\"`. Default: `\"check\"`.\n\n#### parentheticals\n\n`\"skip\"` | `\"check\"` | `\"only\"`. Default: `\"check\"`.\n\nThis designates anything inside parentheses, which includes standard functions, but also Sass maps and other non-standard constructs. `parentheticals` is a broader category than `functionArguments`.\n",
    "licenseText": "Copyright (c) 2016, David Clark\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/style-search/-/style-search-0.1.0.tgz#7958c793e47e32e07d2b5cafe5c0bf8e12e77902",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/style-search/-/style-search-0.1.0.tgz",
    "hash": "7958c793e47e32e07d2b5cafe5c0bf8e12e77902",
    "integrity": "sha512-Dj1Okke1C3uKKwQcetra4jSuk0DqbzbYtXipzFlFMZtowbF1x7BKJwB9AayVMyFARvU8EDrZdcax4At/452cAg==",
    "registry": "npm",
    "packageName": "style-search",
    "cacheIntegrity": "sha512-Dj1Okke1C3uKKwQcetra4jSuk0DqbzbYtXipzFlFMZtowbF1x7BKJwB9AayVMyFARvU8EDrZdcax4At/452cAg== sha1-eVjHk+R+MuB9K1yv5cC/jhLneQI="
  },
  "registry": "npm",
  "hash": "7958c793e47e32e07d2b5cafe5c0bf8e12e77902"
}