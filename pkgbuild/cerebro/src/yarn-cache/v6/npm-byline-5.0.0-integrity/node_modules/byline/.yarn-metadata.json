{
  "manifest": {
    "name": "byline",
    "description": "simple line-by-line stream reader",
    "homepage": "https://github.com/jahewson/node-byline",
    "bugs": {
      "url": "https://github.com/jahewson/node-byline/issues"
    },
    "version": "5.0.0",
    "author": {
      "name": "John Hewson"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/jahewson/node-byline"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "main": "./lib/byline.js",
    "files": [
      "lib"
    ],
    "devDependencies": {
      "mocha": "~2.1.0",
      "request": "~2.27.0"
    },
    "scripts": {
      "test": "mocha -R spec --timeout 60000"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-byline-5.0.0-integrity/node_modules/byline/package.json",
    "readmeFilename": "README.md",
    "readme": "# byline â€” buffered stream for reading lines\n\n![npm package](https://nodei.co/npm/byline.png?downloads=true&downloadRank=true)\n\n`byline` is a simple module providing a `LineStream`.\n\n- node v0.10 `streams2` (transform stream)\n- supports `pipe`\n- supports both UNIX and Windows line endings\n- supports [Unicode UTS #18 line boundaries](http://www.unicode.org/reports/tr18/#Line_Boundaries)\n- can wrap any readable stream\n- can be used as a readable-writable \"through-stream\" (transform stream)\n- super-simple: `stream = byline(stream);`\n\n## Install\n\n    npm install byline\n\nor from source:\n\n    git clone git://github.com/jahewson/node-byline.git\n    cd node-byline\n    npm link\n\n# Convenience API\n\nThe `byline` module can be used as a function to quickly wrap a readable stream:\n\n```javascript\nvar fs = require('fs'),\n    byline = require('byline');\n\nvar stream = byline(fs.createReadStream('sample.txt', { encoding: 'utf8' }));\n```\n\nThe `data` event then emits lines:\n\n```javascript\nstream.on('data', function(line) {\n  console.log(line);\n});\n```\n\n# Standard API\n    \nYou just need to add one line to wrap your readable `Stream` with a `LineStream`.\n\n```javascript\nvar fs = require('fs'),\t\n    byline = require('byline');\n\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\n\nstream.on('data', function(line) {\n  console.log(line);\n});\n```\n\n# Piping\n\n`byline` supports `pipe` (though it strips the line endings, of course).\n\n```javascript\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\nstream.pipe(fs.createWriteStream('nolines.txt'));\n```\n\nAlternatively, you can create a readable/writable \"through-stream\" which doesn't wrap any specific\nstream:\n\n```javascript\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\nstream.pipe(fs.createWriteStream('nolines.txt'));\n\t\nvar input = fs.createReadStream('LICENSE');\nvar lineStream = byline.createStream();\ninput.pipe(lineStream);\n\nvar output = fs.createWriteStream('test.txt');\nlineStream.pipe(output);\n```\n\n# Streams2 API\n    \nNode v0.10 added a new streams2 API. This allows the stream to be used in non-flowing mode and is\npreferred over the legacy pause() and resume() methods.\n\n```javascript\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\n\nstream.on('readable', function() {\n  var line;\n  while (null !== (line = stream.read())) {\n    console.log(line);\n  }\n});\n```\n\n# Transform Stream\n\nThe `byline` transform stream can be directly manipulated like so:\n\n```javascript\nvar LineStream = require('byline').LineStream;\n\nvar input = fs.createReadStream('sample.txt');\nvar output = fs.createWriteStream('nolines.txt');\n\nvar lineStream = new LineStream();\ninput.pipe(lineStream);\nlineStream.pipe(output);\n\n```\n\n# Empty Lines\n\nBy default byline skips empty lines, if you want to keep them, pass the `keepEmptyLines` option in\nthe call to `byline.createStream(stream, options)` or `byline(stream, options)`.\n\n# Tests\n\n    npm test\n\n# v0.8\n\nIf you want to use `node-byline` with node v0.8 then you can use the 2.1.x series. Simply use the\nfollowing in your `package.json`:\n\n```javascript\n  \"dependencies\": {\n  \"byline\": \">=2.1.0 <3.0.0\"\n},\n```\n\n# Simple\nUnlike other modules (of which there are many), `byline` contains no:\n\n- monkeypatching\n- dependencies\n- non-standard 'line' events which break `pipe`\n- limitations to only file streams\n- CoffeeScript\n- unnecessary code\n",
    "licenseText": "node-byline (C) 2011-2015 John Hewson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/byline/-/byline-5.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/byline/-/byline-5.0.0.tgz",
    "hash": "",
    "integrity": "sha1-dBxSFkaOrcRXsDQQEYrXfejB3bE=",
    "registry": "npm",
    "packageName": "byline",
    "cacheIntegrity": "sha512-s6webAy+R4SR8XVuJWt2V2rGvhnrhxN+9S15GNuTK3wKPOXFF6RNc+8ug2XhH+2s4f+uudG4kUVYmYOQWL2g0Q== sha1-dBxSFkaOrcRXsDQQEYrXfejB3bE="
  },
  "registry": "npm",
  "hash": "b3ac1e6c0cbe478491f1756e256b76576ac6be19eb87137ef52d7918db932b7c0a3ce5c517a44d73ef2e8365e11fedace1ffaeb9d1b891455899839058bda0d1"
}