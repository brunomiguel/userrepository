{
  "manifest": {
    "name": "postcss-cli",
    "version": "10.0.0",
    "description": "CLI for PostCSS",
    "type": "module",
    "engines": {
      "node": ">=14"
    },
    "bin": {
      "postcss": "index.js"
    },
    "scripts": {
      "ci": "eslint . && c8 ava -v && npm run prettier -- --list-different",
      "clean": "node test/helpers/clean.js",
      "prettier": "prettier --single-quote --no-semi \"**/*.{js,md}\"",
      "format": "npm run prettier -- --write && eslint . --fix",
      "pretest": "npm run clean && npm run format",
      "test": "c8 ava -v"
    },
    "dependencies": {
      "chokidar": "^3.3.0",
      "dependency-graph": "^0.11.0",
      "fs-extra": "^10.0.0",
      "get-stdin": "^9.0.0",
      "globby": "^13.0.0",
      "picocolors": "^1.0.0",
      "postcss-load-config": "^4.0.0",
      "postcss-reporter": "^7.0.0",
      "pretty-hrtime": "^1.0.3",
      "read-cache": "^1.0.0",
      "slash": "^4.0.0",
      "yargs": "^17.0.0"
    },
    "devDependencies": {
      "ava": "^3.1.0",
      "c8": "^7.9.0",
      "coveralls": "^3.0.0",
      "eslint": "^8.2.0",
      "eslint-config-problems": "6.0.0",
      "postcss": "^8.0.4",
      "postcss-import": "^14.0.0",
      "prettier": "~2.7.0",
      "sugarss": "^4.0.0",
      "uuid": "^8.0.0"
    },
    "peerDependencies": {
      "postcss": "^8.0.0"
    },
    "files": [
      "index.js",
      "lib",
      "!**/*.test.js"
    ],
    "keywords": [
      "cli",
      "postcss",
      "postcss-runner"
    ],
    "contributors": [
      {
        "name": "Michael Ciniawky",
        "email": "michael.ciniawsky@gmail.com"
      },
      {
        "name": "Ryan Zimmermann",
        "email": "opensrc@ryanzim.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-cli.git"
    },
    "bugs": {
      "url": "https://github.com/postcss/postcss-cli/issues"
    },
    "homepage": "https://github.com/postcss/postcss-cli#readme",
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-cli-10.0.0-404e468d1ff39fb5ead3f707e2021be7cd3f8c9f-integrity/node_modules/postcss-cli/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"100\" height=\"100\" title=\"CLI\" src=\"https://raw.githubusercontent.com/postcss/postcss-cli/HEAD/logo.svg\">\n  <a href=\"https://github.com/postcss/postcss\">\n    <img width=\"110\" height=\"110\" title=\"PostCSS\" src=\"http://postcss.github.io/postcss/logo.svg\" hspace=\"10\">\n  </a>\n  <h1>PostCSS CLI</h1>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D postcss postcss-cli\n```\n\n<h2 align=\"center\">Usage</h2>\n\n```\nUsage:\n  postcss [input.css] [OPTIONS] [-o|--output output.css] [--watch|-w]\n  postcss <input.css>... [OPTIONS] --dir <output-directory> [--watch|-w]\n  postcss <input-directory> [OPTIONS] --dir <output-directory> [--watch|-w]\n  postcss <input-glob-pattern> [OPTIONS] --dir <output-directory> [--watch|-w]\n  postcss <input.css>... [OPTIONS] --replace\n\nBasic options:\n  -o, --output   Output file                                            [string]\n  -d, --dir      Output directory                                       [string]\n  -r, --replace  Replace (overwrite) the input file                    [boolean]\n  -m, --map      Create an external sourcemap\n  --no-map       Disable the default inline sourcemaps\n  -w, --watch    Watch files for changes and recompile as needed       [boolean]\n  --verbose      Be verbose                                            [boolean]\n  --env          A shortcut for setting NODE_ENV                        [string]\n\nOptions for use without a config file:\n  -u, --use      List of postcss plugins to use                          [array]\n  --parser       Custom postcss parser                                  [string]\n  --stringifier  Custom postcss stringifier                             [string]\n  --syntax       Custom postcss syntax                                  [string]\n\nOptions for use with --dir:\n  --ext   Override the output file extension; for use with --dir        [string]\n  --base  Mirror the directory structure relative to this path in the output\n          directory, for use with --dir                                 [string]\n\nAdvanced options:\n  --include-dotfiles  Enable glob to match files/dirs that begin with \".\"\n                                                                       [boolean]\n  --poll              Use polling for file watching. Can optionally pass polling\n                      interval; default 100 ms\n  --config            Set a custom directory to look for a config file  [string]\n\nOptions:\n  --version   Show version number                                      [boolean]\n  -h, --help  Show help                                                [boolean]\n\nExamples:\n  postcss input.css -o output.css                       Basic usage\n  postcss src/**/*.css --base src --dir build           Glob Pattern & output\n  cat input.css | postcss -u autoprefixer > output.css  Piping input & output\n\nIf no input files are passed, it reads from stdin. If neither -o, --dir, or\n--replace is passed, it writes to stdout.\n\nIf there are multiple input files, the --dir or --replace option must be passed.\n\nInput files may contain globs (e.g. src/**/*.css). If you pass an input\ndirectory, it will process all files in the directory and any subdirectories,\nrespecting the glob pattern.\n```\n\n> ℹ️ More details on custom parsers, stringifiers and syntaxes, can be found [here](https://github.com/postcss/postcss#syntaxes).\n\n### [Config](https://github.com/michael-ciniawsky/postcss-load-config)\n\nIf you need to pass options to your plugins, or have a long plugin chain, you'll want to use a configuration file.\n\n**postcss.config.js**\n\n```js\nmodule.exports = {\n  parser: 'sugarss',\n  plugins: [\n    require('postcss-import')({ ...options }),\n    require('postcss-url')({ url: 'copy', useHash: true }),\n  ],\n}\n```\n\nNote that you **can not** set the `from` or `to` options for postcss in the config file. They are set automatically based on the CLI arguments.\n\n### Context\n\nFor more advanced usage, it's recommended to use a function in `postcss.config.js`; this gives you access to the CLI context to dynamically apply options and plugins **per file**\n\n|   Name    |    Type    |              Default               | Description          |\n| :-------: | :--------: | :--------------------------------: | :------------------- |\n|   `env`   | `{String}` |          `'development'`           | process.env.NODE_ENV |\n|  `file`   | `{Object}` |    `dirname, basename, extname`    | File                 |\n| `options` | `{Object}` | `map, parser, syntax, stringifier` | PostCSS Options      |\n\n**postcss.config.js**\n\n```js\nmodule.exports = (ctx) => ({\n  map: ctx.options.map,\n  parser: ctx.file.extname === '.sss' ? 'sugarss' : false,\n  plugins: {\n    'postcss-import': { root: ctx.file.dirname },\n    cssnano: ctx.env === 'production' ? {} : false,\n  },\n})\n```\n\n> ⚠️ If you want to set options via CLI, it's mandatory to reference `ctx.options` in `postcss.config.js`\n\n```bash\npostcss input.sss -p sugarss -o output.css -m\n```\n\n**postcss.config.js**\n\n```js\nmodule.exports = (ctx) => ({\n  map: ctx.options.map,\n  parser: ctx.options.parser,\n  plugins: {\n    'postcss-import': { root: ctx.file.dirname },\n    cssnano: ctx.env === 'production' ? {} : false,\n  },\n})\n```\n\n[npm]: https://img.shields.io/npm/v/postcss-cli.svg\n[npm-url]: https://npmjs.com/package/postcss-cli\n[node]: https://img.shields.io/node/v/postcss-cli.svg\n[node-url]: https://nodejs.org/\n[tests]: https://img.shields.io/github/workflow/status/postcss/postcss-cli/Node.js%20CI/master\n[tests-url]: https://github.com/postcss/postcss-cli/actions?query=branch%3Amaster\n[cover]: https://img.shields.io/coveralls/postcss/postcss-cli/master.svg\n[cover-url]: https://coveralls.io/github/postcss/postcss-cli\n[chat]: https://img.shields.io/gitter/room/postcss/postcss.svg\n[chat-url]: https://gitter.im/postcss/postcss\n",
    "licenseText": "License (MIT)\n\nCopyright (c) 2016 Michael Ciniawsky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-cli/-/postcss-cli-10.0.0.tgz#404e468d1ff39fb5ead3f707e2021be7cd3f8c9f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-cli/-/postcss-cli-10.0.0.tgz",
    "hash": "404e468d1ff39fb5ead3f707e2021be7cd3f8c9f",
    "integrity": "sha512-Wjy/00wBBEgQqnSToznxLWDnATznokFGXsHtF/3G8glRZpz5KYlfHcBW/VMJmWAeF2x49zjgy4izjM3/Wx1dKA==",
    "registry": "npm",
    "packageName": "postcss-cli",
    "cacheIntegrity": "sha512-Wjy/00wBBEgQqnSToznxLWDnATznokFGXsHtF/3G8glRZpz5KYlfHcBW/VMJmWAeF2x49zjgy4izjM3/Wx1dKA== sha1-QE5GjR/zn7Xq0/cH4gIb580/jJ8="
  },
  "registry": "npm",
  "hash": "404e468d1ff39fb5ead3f707e2021be7cd3f8c9f"
}