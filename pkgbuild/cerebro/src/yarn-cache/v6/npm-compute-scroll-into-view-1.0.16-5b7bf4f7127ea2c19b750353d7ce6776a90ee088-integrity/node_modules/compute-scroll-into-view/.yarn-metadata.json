{
  "manifest": {
    "name": "compute-scroll-into-view",
    "description": "The engine that powers scroll-into-view-if-needed",
    "license": "MIT",
    "author": {
      "name": "Cody Olsen"
    },
    "homepage": "https://scroll-into-view-if-needed.netlify.com/",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/stipsan/compute-scroll-into-view.git"
    },
    "version": "1.0.16",
    "main": "dist/index.js",
    "module": "dist/index.module.js",
    "files": [
      "dist",
      "typings",
      "umd/compute-scroll-into-view.min.js",
      "umd/compute-scroll-into-view.min.js.map"
    ],
    "scripts": {
      "prebuild": "rimraf 'dist' 'umd'",
      "build": "npm run build:dist && npm run build:umd",
      "build:dist": "microbundle -f cjs,es",
      "build:umd": "microbundle -f umd -o umd",
      "dev": "concurrently 'npm run typecheck -- --watch' 'npm run build:dist -- --watch' 'npm run build:umd -- --watch'",
      "prepublishOnly": "unset npm_config_cafile && npm run build",
      "test": "jest -c integration/jest.config.js",
      "typecheck": "tsc --noEmit"
    },
    "sideEffects": false,
    "typings": "typings/index.d.ts",
    "devDependencies": {
      "concurrently": "5.3.0",
      "husky": "4.2.5",
      "jest": "26.4.2",
      "jest-junit": "11.1.0",
      "jest-puppeteer": "4.4.0",
      "lint-staged": "10.2.13",
      "microbundle": "^0.12.3",
      "prettier": "2.1.1",
      "prettier-package-json": "2.1.3",
      "puppeteer": "5.2.1",
      "rimraf": "3.0.2",
      "serve": "11.3.2",
      "typescript": "4.0.2"
    },
    "keywords": [
      "if-needed",
      "scroll",
      "scroll-into-view",
      "scroll-into-view-if-needed",
      "scrollIntoView",
      "scrollIntoViewIfNeeded",
      "scrollMode",
      "typescript"
    ],
    "browserify": {
      "transform": [
        "loose-envify"
      ]
    },
    "bundlesize": [
      {
        "path": "./umd/compute-scroll-into-view.min.js",
        "maxSize": "3 kB",
        "compression": "none"
      }
    ],
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.{js,ts,tsx,json,md}": "prettier --write",
      "**/package.json": "prettier-package-json --write"
    },
    "prettier": {
      "semi": false,
      "singleQuote": true,
      "trailingComma": "es5"
    },
    "release": {
      "prepare": [
        "@semantic-release/npm"
      ]
    },
    "source": "src/index.ts",
    "umd:main": "umd/compute-scroll-into-view.min.js",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-compute-scroll-into-view-1.0.16-5b7bf4f7127ea2c19b750353d7ce6776a90ee088-integrity/node_modules/compute-scroll-into-view/package.json",
    "readmeFilename": "README.md",
    "readme": "[![CircleCI Status](https://img.shields.io/circleci/project/github/stipsan/compute-scroll-into-view.svg?style=flat-square)](https://circleci.com/gh/stipsan/compute-scroll-into-view)\n[![npm stat](https://img.shields.io/npm/dm/compute-scroll-into-view.svg?style=flat-square)](https://npm-stat.com/charts.html?package=compute-scroll-into-view)\n[![npm version](https://img.shields.io/npm/v/compute-scroll-into-view.svg?style=flat-square)](https://www.npmjs.com/package/compute-scroll-into-view)\n[![gzip size][gzip-badge]][unpkg-dist]\n[![size][size-badge]][unpkg-dist]\n[![module formats: umd, cjs, and es][module-formats-badge]][unpkg-dist]\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n\n![compute-scroll-into-view](https://user-images.githubusercontent.com/81981/43024153-a2cc212c-8c6d-11e8-913b-b4d62efcf105.png)\n\nLower level API that is used by the [ponyfill](https://ponyfill.com) [scroll-into-view-if-needed](https://github.com/stipsan/scroll-into-view-if-needed) to compute where (if needed) elements should scroll based on [options defined in the spec](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) and the [`scrollMode: \"if-needed\"` draft spec proposal](https://github.com/w3c/csswg-drafts/pull/1805).\nUse this if you want the smallest possible bundlesize and is ok with implementing the actual scrolling yourself.\n\nScrolling SVG elements are supported, as well as Shadow DOM elements. The [VisualViewport](https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport) API is also supported, ensuring scrolling works properly on modern devices. Quirksmode is also supported as long as you polyfill [`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement).\n\n## Install\n\n```bash\nyarn add compute-scroll-into-view\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com/compute-scroll-into-view/umd/):\n\n```html\n<script src=\"https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js\"></script>\n```\n\nYou can find the library on `window.computeScrollIntoView`.\n\n## Usage\n\n```js\n// es6 import\nimport computeScrollIntoView from 'compute-scroll-into-view'\n// or es5\nconst computeScrollIntoView = require('compute-scroll-into-view')\n\nconst node = document.getElementById('hero')\n\n// same behavior as Element.scrollIntoView({block: \"nearest\", inline: \"nearest\"})\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nconst actions = computeScrollIntoView(node, {\n  scrollMode: 'if-needed',\n  block: 'nearest',\n  inline: 'nearest',\n})\n\n// same behavior as Element.scrollIntoViewIfNeeded(true)\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded\nconst actions = computeScrollIntoView(node, {\n  scrollMode: 'if-needed',\n  block: 'center',\n  inline: 'center',\n})\n\n// Then perform the scrolling, use scroll-into-view-if-needed if you don't want to implement this part\nactions.forEach(({ el, top, left }) => {\n  el.scrollTop = top\n  el.scrollLeft = left\n})\n```\n\n## API\n\n### computeScrollIntoView(target, options)\n\n### options\n\nType: `Object`\n\n#### [block](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'center'`\n\nControl the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\nThis means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n\n#### [inline](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'nearest'`\n\nLike `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n\n#### [scrollMode](https://scroll-into-view-if-needed.netlify.com/#scrolling-if-needed)\n\nType: `'always' | 'if-needed'`<br> Default: `'always'`\n\nThis is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/1805\n\nThis library will be updated to reflect any changes to the spec and will provide a migration path.\nTo be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n#### [boundary](https://scroll-into-view-if-needed.netlify.com/#limit-propagation)\n\nType: `Element | Function`\n\nBy default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\nBy passing a boundary you can short-circuit this loop depending on your needs:\n\n- Prevent the browser window from scrolling.\n- Scroll elements into view in a list, without scrolling container elements.\n\nYou can also pass a function to do more dynamic checks to override the scroll scoping:\n\n```js\nconst actions = computeScrollIntoView(target, {\n  boundary: parent => {\n    // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n    // this is required by the CSSOM spec\n    if (getComputedStyle(parent)['overflow'] === 'hidden') {\n      return false\n    }\n\n    return true\n  },\n})\n```\n\n#### skipOverflowHiddenElements\n\nType: `Boolean`<br> Default: `false`\n\nBy default the [spec](https://drafts.csswg.org/cssom-view/#scrolling-box) states that `overflow: hidden` elements should be scrollable because it has [been used to allow programatic scrolling](https://drafts.csswg.org/css-overflow-3/#valdef-overflow-hidden). This behavior can sometimes lead to [scrolling issues](https://github.com/stipsan/scroll-into-view-if-needed/pull/225#issue-186419520) when you have a node that is a child of an `overflow: hidden` node.\n\nThis package follows the convention [adopted by Firefox](https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18) of setting a boolean option to _not_ scroll all nodes with `overflow: hidden` set.\n\n# TypeScript support\n\nThis library ships with library definitions for TypeScript.\n\n[gzip-badge]: http://img.badgesize.io/https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[size-badge]: http://img.badgesize.io/https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js?label=size&style=flat-square\n[unpkg-dist]: https://unpkg.com/compute-scroll-into-view/umd/\n[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs%2C%20es-green.svg?style=flat-square\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Cody Olsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/compute-scroll-into-view/-/compute-scroll-into-view-1.0.16.tgz#5b7bf4f7127ea2c19b750353d7ce6776a90ee088",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/compute-scroll-into-view/-/compute-scroll-into-view-1.0.16.tgz",
    "hash": "5b7bf4f7127ea2c19b750353d7ce6776a90ee088",
    "integrity": "sha512-a85LHKY81oQnikatZYA90pufpZ6sQx++BoCxOEMsjpZx+ZnaKGQnCyCehTRr/1p9GBIAHTjcU9k71kSYWloLiQ==",
    "registry": "npm",
    "packageName": "compute-scroll-into-view",
    "cacheIntegrity": "sha512-a85LHKY81oQnikatZYA90pufpZ6sQx++BoCxOEMsjpZx+ZnaKGQnCyCehTRr/1p9GBIAHTjcU9k71kSYWloLiQ== sha1-W3v09xJ+osGbdQNT185ndqkO4Ig="
  },
  "registry": "npm",
  "hash": "5b7bf4f7127ea2c19b750353d7ce6776a90ee088"
}