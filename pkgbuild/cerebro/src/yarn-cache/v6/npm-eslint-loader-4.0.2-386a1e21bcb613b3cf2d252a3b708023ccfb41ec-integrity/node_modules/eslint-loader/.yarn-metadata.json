{
  "manifest": {
    "name": "eslint-loader",
    "version": "4.0.2",
    "description": "A ESlint loader for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/eslint-loader.git"
    },
    "author": {
      "name": "Maxime Thirouin"
    },
    "contributors": [
      {
        "name": "Ricardo Gobbo de Souza",
        "email": "ricardogobbosouza@yahoo.com.br"
      }
    ],
    "homepage": "https://github.com/webpack-contrib/eslint-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/eslint-loader/issues"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit",
      "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "npm run build",
      "release": "standard-version",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "eslint": "^6.0.0 || ^7.0.0",
      "webpack": "^4.0.0 || ^5.0.0"
    },
    "dependencies": {
      "find-cache-dir": "^3.3.1",
      "fs-extra": "^8.1.0",
      "loader-utils": "^2.0.0",
      "object-hash": "^2.0.3",
      "schema-utils": "^2.6.5"
    },
    "devDependencies": {
      "@babel/cli": "^7.8.4",
      "@babel/core": "^7.9.0",
      "@babel/preset-env": "^7.9.0",
      "@commitlint/cli": "^8.3.5",
      "@commitlint/config-conventional": "^8.3.4",
      "@webpack-contrib/defaults": "^6.3.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^25.2.6",
      "chokidar": "^3.3.1",
      "commitlint-azure-pipelines-cli": "^1.0.3",
      "cross-env": "^7.0.2",
      "del": "^5.1.0",
      "del-cli": "^3.0.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.1",
      "eslint-friendly-formatter": "^4.0.1",
      "eslint-plugin-import": "^2.20.2",
      "husky": "^4.2.3",
      "jest": "^25.2.6",
      "jest-junit": "^10.0.0",
      "lint-staged": "^10.1.1",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.0.2",
      "standard-version": "^7.1.0",
      "webpack": "^4.42.1"
    },
    "keywords": [
      "eslint",
      "lint",
      "linter",
      "loader",
      "webpack"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-eslint-loader-4.0.2-386a1e21bcb613b3cf2d252a3b708023ccfb41ec-integrity/node_modules/eslint-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/eslint/eslint\"><img width=\"200\" height=\"200\" src=\"https://cdn.worldvectorlogo.com/logos/eslint.svg\"></a>\n  <a href=\"https://github.com/webpack/webpack\"><img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\"></a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# eslint-loader\n\n> A ESlint loader for webpack\n\n## Install\n\n```bash\nnpm install eslint-loader --save-dev\n```\n\n**Note**: You also need to install `eslint` from npm, if you haven't already:\n\n```bash\nnpm install eslint --save-dev\n```\n\n## Usage\n\nIn your webpack configuration:\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          // eslint options (if necessary)\n        },\n      },\n    ],\n  },\n  // ...\n};\n```\n\nWhen using with transpiling loaders (like `babel-loader`), make sure they are in correct order (bottom to top). Otherwise files will be checked after being processed by `babel-loader`:\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: ['babel-loader', 'eslint-loader'],\n      },\n    ],\n  },\n  // ...\n};\n```\n\nTo be safe, you can use `enforce: 'pre'` section to check source files, not modified by other loaders (like `babel-loader`):\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        enforce: 'pre',\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n      },\n    ],\n  },\n  // ...\n};\n```\n\n## Options\n\nYou can pass [eslint options](http://eslint.org/docs/developer-guide/nodejs-api#cliengine) using standard webpack [loader options](https://webpack.js.org/configuration/module/#useentry).\n\n**Note**: That the config option you provide will be passed to the `CLIEngine`. This is a different set of options than what you'd specify in `package.json` or `.eslintrc`. See the [eslint docs](http://eslint.org/docs/developer-guide/nodejs-api#cliengine) for more detail.\n\n### `cache`\n\n- Type: `Boolean|String`\n- Default: `false`\n\nThis option will enable caching of the linting results into a file. This is particularly useful in reducing linting time when doing a full build.\n\nThis can either be a `boolean` value or the cache directory path(ex: `'./.eslint-loader-cache'`).\n\nIf `cache: true` is used, the cache is written to the `./node_modules/.cache/eslint-loader` directory. This is the recommended usage.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          cache: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n### `eslintPath`\n\n- Type: `String`\n- Default: `eslint`\n\nPath to `eslint` instance that will be used for linting. If the `eslintPath` is a folder like a official eslint, or specify a `formatter` option. Now you dont have to install `eslint`.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          eslintPath: path.join(__dirname, 'reusable-eslint'),\n        },\n      },\n    ],\n  },\n};\n```\n\n### `fix`\n\n- Type: `Boolean`\n- Default: `false`\n\nThis option will enable [ESLint autofix feature](http://eslint.org/docs/user-guide/command-line-interface#fix).\n\n**Be careful: this option will change source files.**\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          fix: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n### `formatter`\n\n- Type: `String|Function`\n- Default: `stylish`\n\nThis option accepts a function that will have one argument: an array of eslint messages (object). The function must return the output as a string. You can use official [eslint formatters](https://eslint.org/docs/user-guide/formatters/).\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          // several examples !\n\n          // default value\n          formatter: 'stylish',\n\n          // community formatter\n          formatter: require('eslint-friendly-formatter'),\n\n          // custom formatter\n          formatter: function (results) {\n            // `results` format is available here\n            // http://eslint.org/docs/developer-guide/nodejs-api.html#executeonfiles()\n\n            // you should return a string\n            // DO NOT USE console.*() directly !\n            return 'OUTPUT';\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### Errors and Warning\n\n**By default the loader will auto adjust error reporting depending on eslint errors/warnings counts.** You can still force this behavior by using `emitError` **or** `emitWarning` options:\n\n#### `emitError`\n\n- Type: `Boolean`\n- Default: `false`\n\nWill always return errors, if this option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          emitError: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `emitWarning`\n\n- Type: `Boolean`\n- Default: `false`\n\nWill always return warnings, if option is set to `true`. **If you're using hot module replacement, you may wish to enable this in development, or else updates will be skipped when there's an eslint error.**\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          emitWarning: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `failOnError`\n\n- Type: `Boolean`\n- Default: `false`\n\nWill cause the module build to fail if there are any errors, if option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          failOnError: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `failOnWarning`\n\n- Type: `Boolean`\n- Default: `false`\n\nWill cause the module build to fail if there are any warnings, if option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          failOnWarning: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `quiet`\n\n- Type: `Boolean`\n- Default: `false`\n\nWill process and report errors only and ignore warnings, if this option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          quiet: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `outputReport`\n\n- Type: `Boolean|Object`\n- Default: `false`\n\nWrite the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI.\n\nThe `filePath` is an absolute path or relative to the webpack config: `output.path`. You can pass in a different `formatter` for the output file, if none is passed in the default/configured formatter will be used.\n\n```js\nmodule.exports = {\n  entry: '...',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'eslint-loader',\n        options: {\n          outputReport: {\n            filePath: 'checkstyle.xml',\n            formatter: 'checkstyle',\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n## Gotchas\n\n### NoEmitOnErrorsPlugin\n\n`NoEmitOnErrorsPlugin` is now automatically enabled in webpack 4, when mode is either unset, or set to production. So even ESLint warnings will fail the build. No matter what error settings are used for `eslint-loader`, except if `emitWarning` enabled.\n\n### Defining `configFile` or using `eslint -c path/.eslintrc`\n\nBear in mind that when you define `configFile`, `eslint` doesn't automatically look for `.eslintrc` files in the directory of the file to be linted. More information is available in official eslint documentation in section [_Using Configuration Files_](http://eslint.org/docs/user-guide/configuring#using-configuration-files). See [#129](https://github.com/webpack-contrib/eslint-loader/issues/129).\n\n## Changelog\n\n[Changelog](CHANGELOG.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/eslint-loader.svg\n[npm-url]: https://npmjs.com/package/eslint-loader\n[node]: https://img.shields.io/node/v/eslint-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/eslint-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/eslint-loader\n[tests]: https://dev.azure.com/webpack-contrib/eslint-loader/_apis/build/status/webpack-contrib.eslint-loader?branchName=master\n[tests-url]: https://dev.azure.com/webpack-contrib/eslint-loader/_build/latest?definitionId=4&branchName=master\n[cover]: https://codecov.io/gh/webpack-contrib/eslint-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/eslint-loader\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=eslint-loader\n[size-url]: https://packagephobia.now.sh/result?p=eslint-loader\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-loader/-/eslint-loader-4.0.2.tgz#386a1e21bcb613b3cf2d252a3b708023ccfb41ec",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-loader/-/eslint-loader-4.0.2.tgz",
    "hash": "386a1e21bcb613b3cf2d252a3b708023ccfb41ec",
    "integrity": "sha512-EDpXor6lsjtTzZpLUn7KmXs02+nIjGcgees9BYjNkWra3jVq5vVa8IoCKgzT2M7dNNeoMBtaSG83Bd40N3poLw==",
    "registry": "npm",
    "packageName": "eslint-loader",
    "cacheIntegrity": "sha512-EDpXor6lsjtTzZpLUn7KmXs02+nIjGcgees9BYjNkWra3jVq5vVa8IoCKgzT2M7dNNeoMBtaSG83Bd40N3poLw== sha1-OGoeIby2E7PPLSUqO3CAI8z7Qew="
  },
  "registry": "npm",
  "hash": "386a1e21bcb613b3cf2d252a3b708023ccfb41ec"
}