{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfrozenCache = new WeakMap<object, object>();\nconst unfreeze = <T extends object>(obj: T): T => {\n  let unfrozen = unfrozenCache.get(obj);\n  if (!unfrozen) {\n    if (Array.isArray(obj)) {\n      // Arrays need a special way to copy\n      unfrozen = Array.from(obj);\n    } else {\n      // For non-array objects, we create a new object keeping the prototype\n      // with changing all configurable options (otherwise, proxies will complain)\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n      unfrozen = Object.create(getProto(obj), descriptors);\n    }\n    unfrozenCache.set(obj, unfrozen as object);\n  }\n  return unfrozen as T;\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [FROZEN_PROPERTY]: frozen,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (key: string | symbol, skipWithOwnKeys?: boolean) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (!skipWithOwnKeys || !used.has(OWN_KEYS_SYMBOL)) {\n        used.add(key);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(key);\n      return createProxy(\n        (target as any)[key],\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `'a' in obj` is handled.\n      recordUsage(key);\n      return key in target;\n    },\n    getOwnPropertyDescriptor(target, key) {\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `obj.getOwnPropertyDescriptor('a'))` is handled.\n      recordUsage(key, true);\n      return Object.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!handlerAndState || handlerAndState[1][FROZEN_PROPERTY] !== frozen) {\n    handlerAndState = createProxyHandler<typeof target>(target, frozen);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      frozen ? unfreeze(target) : target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(prevObj, nextObj)\n      : isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","newProxy","target","handler","Proxy","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","obj","has","get","prototype","Array","isObject","x","unfrozenCache","createProxy","affected","proxyCache","isObjectToTrack","getOriginalObject","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","handlerAndState","frozen","origObj","_state","state","recordUsage","key","skipWithOwnKeys","trackObject","used","Set","set","add","getOwnPropertyDescriptor","ownKeys","Reflect","deleteProperty","createProxyHandler","unfrozen","isArray","from","descriptors","forEach","desc","configurable","create","unfreeze","isOwnKeysChanged","prevObj","nextObj","prevKeys","length","nextKeys","k","i","list","seen","walk","path","push","isChanged","cache","is","_cache$set","hit","CHANGED_PROPERTY","_step","_cache$set2","_iterator","_createForOfIteratorHelperLoose","done","c","changed","NEXT_OBJECT_PROPERTY","mark","fn"],"mappings":"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"}