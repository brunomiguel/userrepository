{
  "manifest": {
    "name": "tiny-each-async",
    "version": "2.0.3",
    "description": "Asynchronous iterator function for parallel processing.",
    "main": "index.js",
    "keywords": [
      "each",
      "async",
      "asynchronous",
      "iteration",
      "iterate",
      "loop",
      "foreach",
      "parallel",
      "concurrent",
      "array",
      "flow",
      "control flow"
    ],
    "dependencies": {},
    "devDependencies": {
      "alessioalex-standard": "^1.0.0",
      "async": "^1.5.0",
      "husky": "^0.10.1",
      "lolex": "^1.3.2",
      "matcha": "^0.6.0",
      "tape": "^4.2.2"
    },
    "scripts": {
      "bench": "matcha bench/*.js",
      "test": "tape test.js",
      "lint": "alessioalex-standard",
      "precommit": "npm run lint && npm test"
    },
    "author": {
      "name": "Alexandru Vladutu",
      "email": "alexandru.vladutu@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/alessioalex/tiny-each-async.git"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tiny-each-async-2.0.3-8ebbbfd6d6295f1370003fbb37162afe5a0a51d1-integrity/node_modules/tiny-each-async/package.json",
    "readmeFilename": "README.md",
    "readme": "# tiny-each-async\n\nAsynchronous iterator function similar to (and inspired by) [async.each](https://github.com/caolan/async#eacharr-iterator-callback), with support for concurrency limit and item index.\n\n[![build status](https://secure.travis-ci.org/alessioalex/tiny-each-async.png)](http://travis-ci.org/alessioalex/tiny-each-async)\n\n## Usage\n\n### each(array, [limit], iterator, [callback])\n\nArguments:\n\n- array - An array of items to iterate through.\n- [limit] - An (optional) integer for determining how many `iterator` functions should be run in parallel.\n- iterator(item, [index], callback) - A function to be applied to each item in the array. When it has finished processing the item then the `callback` function should be called (in case of a failure with the `error` argument, otherwise none).\n- callback(err) - An optional callback function that gets called when either all `iterator` functions have finished or one of them has returned an error.\n\n### Example\n\n```js\nvar eachAsync = require('tiny-each-async');\nvar timeouts = [300, 100, 2000];\n\neachAsync(['file1', 'file2', 'file3'], function(item, index, next) {\n  setTimeout(function() {\n    console.log(item, index, timeouts[index]);\n    next();\n  }, timeouts[index]);\n}, function(err) {\n  return err ? console.error(err.stack) : console.log('all done');\n});\n```\n\nFor more examples checkout the [/examples](/examples) folder.\n\n## FAQ\n\n- Why the name?\n\nOther possible names were already taken, and the actual source code is tiny.\n\n- Why create another async library?\n\nBecause doing your own thing is fun.\n\n- What if my iterator function is sync, but I want it && the callback to be async?\n\nThen you might want to use [dezalgo](https://github.com/npm/dezalgo).\n\n## License\n\n[MIT](http://alessioalex.mit-license.org/)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tiny-each-async/-/tiny-each-async-2.0.3.tgz#8ebbbfd6d6295f1370003fbb37162afe5a0a51d1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tiny-each-async/-/tiny-each-async-2.0.3.tgz",
    "hash": "8ebbbfd6d6295f1370003fbb37162afe5a0a51d1",
    "integrity": "sha512-5ROII7nElnAirvFn8g7H7MtpfV1daMcyfTGQwsn/x2VtyV+VPiO5CjReCJtWLvoKTDEDmZocf3cNPraiMnBXLA==",
    "registry": "npm",
    "packageName": "tiny-each-async",
    "cacheIntegrity": "sha512-5ROII7nElnAirvFn8g7H7MtpfV1daMcyfTGQwsn/x2VtyV+VPiO5CjReCJtWLvoKTDEDmZocf3cNPraiMnBXLA== sha1-jru/1tYpXxNwAD+7NxYq/loKUdE="
  },
  "registry": "npm",
  "hash": "8ebbbfd6d6295f1370003fbb37162afe5a0a51d1"
}