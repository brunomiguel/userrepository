{
  "manifest": {
    "name": "electron-json-storage",
    "version": "4.6.0",
    "description": "Easily write and read user settings in Electron apps",
    "main": "lib/storage.js",
    "homepage": "https://github.com/electron-userland/electron-json-storage",
    "repository": {
      "type": "git",
      "url": "git://github.com/electron-userland/electron-json-storage.git"
    },
    "scripts": {
      "test": "npm run lint && electron-mocha --recursive tests -R spec && electron-mocha --renderer --recursive tests -R spec",
      "lint": "jshint --config .jshintrc --reporter unix lib tests stress",
      "readme": "jsdoc2md --template doc/README.hbs lib/storage.js > README.md"
    },
    "keywords": [
      "electron",
      "json",
      "storage",
      "user",
      "app",
      "data"
    ],
    "author": {
      "name": "Juan Cruz Viotti",
      "email": "jv@jviotti.com"
    },
    "license": "MIT",
    "devDependencies": {
      "chai": "^4.2.0",
      "electron": "^10.1.3",
      "electron-mocha": "^9.2.0",
      "jsdoc-to-markdown": "^6.0.1",
      "jshint": "^2.9.1",
      "tmp": "0.0.31"
    },
    "dependencies": {
      "async": "^2.0.0",
      "lockfile": "^1.0.4",
      "lodash": "^4.0.1",
      "mkdirp": "^0.5.1",
      "rimraf": "^2.5.1",
      "write-file-atomic": "^2.4.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-json-storage-4.6.0-13ca643b9cd280316d645affd83ee6dd0c15a244-integrity/node_modules/electron-json-storage/package.json",
    "readmeFilename": "README.md",
    "readme": "electron-json-storage\n=====================\n\n> Easily write and read user settings in Electron apps\n\n[![npm version](https://badge.fury.io/js/electron-json-storage.svg)](http://badge.fury.io/js/electron-json-storage)\n[![dependencies](https://david-dm.org/jviotti/electron-json-storage.svg)](https://david-dm.org/jviotti/electron-json-storage.svg)\n[![Build Status](https://travis-ci.org/electron-userland/electron-json-storage.svg?branch=master)](https://travis-ci.org/electron-userland/electron-json-storage)\n[![Build status](https://ci.appveyor.com/api/projects/status/ulwk1nnh7l8209xg/branch/master?svg=true)](https://ci.appveyor.com/project/electron-userland/electron-json-storage/branch/master)\n\n[Electron](http://electron.atom.io) lacks an easy way to persist and read user settings for your application. `electron-json-storage` implements an API somewhat similar to [localStorage](https://developer.mozilla.org/en/docs/Web/API/Window/localStorage) to write and read JSON objects to/from the operating system application data directory, as defined by `app.getPath('userData')`.\n\nRelated modules:\n\n- [electron-settings](https://github.com/nathanbuchar/electron-settings)\n- [electron-store](https://github.com/sindresorhus/electron-store)\n- [electron-storage](https://github.com/Cocycles/electron-storage)\n\nInstallation\n------------\n\nInstall `electron-json-storage` by running:\n\n```sh\n$ npm install --save electron-json-storage\n```\n\nYou can require this module from either the **main** or **renderer** process (with and without `remote`).\n\nRunning on Electron >10 renderer processes\n------------------------------------------\n\nWhen loaded in renderer processes, this module will try to make use of\n`electron.remote` in order to fetch the `userData` path.\n\nElectron 10 now [defaults `enableRemoteModule` to\nfalse](https://www.electronjs.org/docs/breaking-changes#default-changed-enableremotemodule-defaults-to-false),\nwhich means that `electron-json-storage` will be able to calculate a data path by default.\n\nThe solution is to manually call `storage.setDataPath()` before reading or\nwriting any values or setting `enableRemoteModule` to `true`.\n\nDocumentation\n-------------\n\n\n* [storage](#module_storage)\n    * [.getDefaultDataPath()](#module_storage.getDefaultDataPath) ⇒ <code>String</code> \\| <code>Null</code>\n    * [.setDataPath(directory)](#module_storage.setDataPath)\n    * [.getDataPath()](#module_storage.getDataPath) ⇒ <code>String</code>\n    * [.get(key, [options], callback)](#module_storage.get)\n    * [.getSync(key, [options])](#module_storage.getSync)\n    * [.getMany(keys, [options], callback)](#module_storage.getMany)\n    * [.getAll([options], callback)](#module_storage.getAll)\n    * [.set(key, json, [options], callback)](#module_storage.set)\n    * [.has(key, [options], callback)](#module_storage.has)\n    * [.keys([options], callback)](#module_storage.keys)\n    * [.remove(key, [options], callback)](#module_storage.remove)\n    * [.clear([options], callback)](#module_storage.clear)\n\n<a name=\"module_storage.getDefaultDataPath\"></a>\n\n### storage.getDefaultDataPath() ⇒ <code>String</code> \\| <code>Null</code>\nThis function will return `null` when running in the\nrenderer process without support for the `remote` IPC\nmechanism. You have to explicitly set a data path using\n`.setDataPath()` in these cases.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Get the default data path  \n**Returns**: <code>String</code> \\| <code>Null</code> - default data path  \n**Access**: public  \n**Example**  \n```js\nconst defaultDataPath = storage.getDefaultDataPath()\n```\n<a name=\"module_storage.setDataPath\"></a>\n\n### storage.setDataPath(directory)\nThe default value will be used if the directory is undefined.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Set current data path  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| directory | <code>String</code> \\| <code>Undefined</code> | directory |\n\n**Example**  \n```js\nconst os = require('os');\nconst storage = require('electron-json-storage');\n\nstorage.setDataPath(os.tmpdir());\n```\n<a name=\"module_storage.getDataPath\"></a>\n\n### storage.getDataPath() ⇒ <code>String</code>\nReturns the current data path. It defaults to a directory called\n\"storage\" inside Electron's `userData` path.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Get current user data path  \n**Returns**: <code>String</code> - the user data path  \n**Access**: public  \n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nconst dataPath = storage.getDataPath();\nconsole.log(dataPath);\n```\n<a name=\"module_storage.get\"></a>\n\n### storage.get(key, [options], callback)\nIf the key doesn't exist in the user data, an empty object is returned.\nAlso notice that the `.json` extension is added automatically, but it's\nignored if you pass it yourself.\n\nPassing an extension other than `.json` will result in a file created\nwith both extensions. For example, the key `foo.data` will result in a file\ncalled `foo.data.json`.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Read user data  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.get('foobar', function(error, data) {\n  if (error) throw error;\n\n  console.log(data);\n});\n```\n<a name=\"module_storage.getSync\"></a>\n\n### storage.getSync(key, [options])\nSee `.get()`.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Read user data (sync)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nvar data = storage.getSync('foobar');\nconsole.log(data);\n```\n<a name=\"module_storage.getMany\"></a>\n\n### storage.getMany(keys, [options], callback)\nThis function returns an object with the data of all the passed keys.\nIf one of the keys doesn't exist, an empty object is returned for it.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Read many user data keys  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| keys | <code>Array.&lt;String&gt;</code> | keys |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.getMany([ 'foobar', 'barbaz' ], function(error, data) {\n  if (error) throw error;\n\n  console.log(data.foobar);\n  console.log(data.barbaz);\n});\n```\n<a name=\"module_storage.getAll\"></a>\n\n### storage.getAll([options], callback)\nThis function returns an empty object if there is no data to be read.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Read all user data  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.getAll(function(error, data) {\n  if (error) throw error;\n\n  console.log(data);\n});\n```\n<a name=\"module_storage.set\"></a>\n\n### storage.set(key, json, [options], callback)\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Write user data  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| json | <code>Object</code> | json object |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| [options.validate] | <code>String</code> | validate writes by reading the data back |\n| [options.prettyPrinting] | <code>boolean</code> | adds line breaks and spacing to the written data |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.set('foobar', { foo: 'bar' }, function(error) {\n  if (error) throw error;\n});\n```\n<a name=\"module_storage.has\"></a>\n\n### storage.has(key, [options], callback)\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Check if a key exists  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error, hasKey) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.has('foobar', function(error, hasKey) {\n  if (error) throw error;\n\n  if (hasKey) {\n    console.log('There is data stored as `foobar`');\n  }\n});\n```\n<a name=\"module_storage.keys\"></a>\n\n### storage.keys([options], callback)\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Get the list of saved keys  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error, keys) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.keys(function(error, keys) {\n  if (error) throw error;\n\n  for (var key of keys) {\n    console.log('There is a key called: ' + key);\n  }\n});\n```\n<a name=\"module_storage.remove\"></a>\n\n### storage.remove(key, [options], callback)\nNotice this function does nothing, nor throws any error\nif the key doesn't exist.\n\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Remove a key  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.remove('foobar', function(error) {\n  if (error) throw error;\n});\n```\n<a name=\"module_storage.clear\"></a>\n\n### storage.clear([options], callback)\n**Kind**: static method of [<code>storage</code>](#module_storage)  \n**Summary**: Clear all stored data in the current user data path  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>Object</code> | options |\n| [options.dataPath] | <code>String</code> | data path |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.clear(function(error) {\n  if (error) throw error;\n});\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/electron-userland/electron-json-storage/issues/new) on GitHub and we'll be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ npm test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/electron-userland/electron-json-storage/issues](https://github.com/electron-userland/electron-json-storage/issues)\n- Source Code: [github.com/electron-userland/electron-json-storage](https://github.com/electron-userland/electron-json-storage)\n\nBefore submitting a PR, please make sure that you include tests, and that [jshint](http://jshint.com) runs without any warning:\n\n```sh\n$ npm run-script lint\n```\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-json-storage/-/electron-json-storage-4.6.0.tgz#13ca643b9cd280316d645affd83ee6dd0c15a244",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-json-storage/-/electron-json-storage-4.6.0.tgz",
    "hash": "13ca643b9cd280316d645affd83ee6dd0c15a244",
    "integrity": "sha512-gAgNsnA7tEtV9LzzOnZTyVIb3cQtCva+bEBVT5pbRGU8ZSZTVKPBrTxIAYjeVfdSjyNXgfb1mr/CZrOJgeHyqg==",
    "registry": "npm",
    "packageName": "electron-json-storage",
    "cacheIntegrity": "sha512-gAgNsnA7tEtV9LzzOnZTyVIb3cQtCva+bEBVT5pbRGU8ZSZTVKPBrTxIAYjeVfdSjyNXgfb1mr/CZrOJgeHyqg== sha1-E8pkO5zSgDFtZFr/2D7m3QwVokQ="
  },
  "registry": "npm",
  "hash": "13ca643b9cd280316d645affd83ee6dd0c15a244"
}