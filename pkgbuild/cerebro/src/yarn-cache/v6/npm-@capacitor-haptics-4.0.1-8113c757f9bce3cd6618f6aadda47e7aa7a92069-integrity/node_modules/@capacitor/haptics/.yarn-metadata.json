{
  "manifest": {
    "name": "@capacitor/haptics",
    "version": "4.0.1",
    "description": "The Haptics API provides physical feedback to the user through touch or vibration.",
    "main": "dist/plugin.cjs.js",
    "module": "dist/esm/index.js",
    "types": "dist/esm/index.d.ts",
    "unpkg": "dist/plugin.js",
    "files": [
      "android/src/main/",
      "android/build.gradle",
      "dist/",
      "ios/Plugin/",
      "CapacitorHaptics.podspec"
    ],
    "author": {
      "name": "Ionic",
      "email": "hi@ionicframework.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/ionic-team/capacitor-plugins"
    },
    "bugs": {
      "url": "https://github.com/ionic-team/capacitor-plugins/issues"
    },
    "keywords": [
      "capacitor",
      "plugin",
      "native"
    ],
    "scripts": {
      "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
      "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin -destination generic/platform=iOS && cd ..",
      "verify:android": "cd android && ./gradlew clean build test && cd ..",
      "verify:web": "npm run build",
      "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
      "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- --fix --format",
      "eslint": "eslint . --ext ts",
      "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
      "swiftlint": "node-swiftlint",
      "docgen": "docgen --api HapticsPlugin --output-readme README.md --output-json dist/docs.json",
      "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
      "clean": "rimraf ./dist",
      "watch": "tsc --watch",
      "prepublishOnly": "npm run build",
      "publish:cocoapod": "pod trunk push ./CapacitorHaptics.podspec --allow-warnings"
    },
    "devDependencies": {
      "@capacitor/android": "^4.0.0",
      "@capacitor/core": "^4.0.0",
      "@capacitor/docgen": "0.0.18",
      "@capacitor/ios": "^4.0.0",
      "@ionic/eslint-config": "^0.3.0",
      "@ionic/prettier-config": "~1.0.1",
      "@ionic/swiftlint-config": "^1.1.2",
      "eslint": "^7.11.0",
      "prettier": "~2.3.0",
      "prettier-plugin-java": "~1.0.2",
      "rimraf": "^3.0.0",
      "rollup": "^2.29.0",
      "swiftlint": "^1.0.1",
      "typescript": "~4.1.5"
    },
    "peerDependencies": {
      "@capacitor/core": "^4.0.0"
    },
    "prettier": "@ionic/prettier-config",
    "swiftlint": "@ionic/swiftlint-config",
    "eslintConfig": {
      "extends": "@ionic/eslint-config/recommended"
    },
    "capacitor": {
      "ios": {
        "src": "ios"
      },
      "android": {
        "src": "android"
      }
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "42324ec218c8699bc10f914169ac366c8224b259",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@capacitor-haptics-4.0.1-8113c757f9bce3cd6618f6aadda47e7aa7a92069-integrity/node_modules/@capacitor/haptics/package.json",
    "readmeFilename": "README.md",
    "readme": "# @capacitor/haptics\n\nThe Haptics API provides physical feedback to the user through touch or vibration.\n\nOn devices that don't have Taptic Engine or Vibrator, the API calls will resolve without performing any action.\n\n## Install\n\n```bash\nnpm install @capacitor/haptics\nnpx cap sync\n```\n\n## Example\n\n```typescript\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n## API\n\n<docgen-index>\n\n* [`impact(...)`](#impact)\n* [`notification(...)`](#notification)\n* [`vibrate(...)`](#vibrate)\n* [`selectionStart()`](#selectionstart)\n* [`selectionChanged()`](#selectionchanged)\n* [`selectionEnd()`](#selectionend)\n* [Interfaces](#interfaces)\n* [Enums](#enums)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### impact(...)\n\n```typescript\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\nTrigger a haptics \"impact\" feedback\n\n| Param         | Type                                                    |\n| ------------- | ------------------------------------------------------- |\n| **`options`** | <code><a href=\"#impactoptions\">ImpactOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### notification(...)\n\n```typescript\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\nTrigger a haptics \"notification\" feedback\n\n| Param         | Type                                                                |\n| ------------- | ------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#notificationoptions\">NotificationOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### vibrate(...)\n\n```typescript\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\nVibrate the device\n\n| Param         | Type                                                      |\n| ------------- | --------------------------------------------------------- |\n| **`options`** | <code><a href=\"#vibrateoptions\">VibrateOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionStart()\n\n```typescript\nselectionStart() => Promise<void>\n```\n\nTrigger a selection started haptic hint\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionChanged()\n\n```typescript\nselectionChanged() => Promise<void>\n```\n\nTrigger a selection changed haptic hint. If a selection was\nstarted already, this will cause the device to provide haptic\nfeedback\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionEnd()\n\n```typescript\nselectionEnd() => Promise<void>\n```\n\nIf selectionStart() was called, selectionEnd() ends the selection.\nFor example, call this when a user has lifted their finger from a control\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### Interfaces\n\n\n#### ImpactOptions\n\n| Prop        | Type                                                | Description                                                                                                                                                                              | Default                        | Since |\n| ----------- | --------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | ----- |\n| **`style`** | <code><a href=\"#impactstyle\">ImpactStyle</a></code> | Impact Feedback Style The mass of the objects in the collision simulated by a [UIImpactFeedbackGenerator](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle) object. | <code>ImpactStyle.Heavy</code> | 1.0.0 |\n\n\n#### NotificationOptions\n\n| Prop       | Type                                                          | Description                                                                                                                                                                                       | Default                               | Since |\n| ---------- | ------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------- | ----- |\n| **`type`** | <code><a href=\"#notificationtype\">NotificationType</a></code> | Notification Feedback Type The type of notification feedback generated by a [UINotificationFeedbackGenerator](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype) object. | <code>NotificationType.SUCCESS</code> | 1.0.0 |\n\n\n#### VibrateOptions\n\n| Prop           | Type                | Description                                | Default          | Since |\n| -------------- | ------------------- | ------------------------------------------ | ---------------- | ----- |\n| **`duration`** | <code>number</code> | Duration of the vibration in milliseconds. | <code>300</code> | 1.0.0 |\n\n\n### Enums\n\n\n#### ImpactStyle\n\n| Members      | Value                 | Description                                                  | Since |\n| ------------ | --------------------- | ------------------------------------------------------------ | ----- |\n| **`Heavy`**  | <code>'HEAVY'</code>  | A collision between large, heavy user interface elements     | 1.0.0 |\n| **`Medium`** | <code>'MEDIUM'</code> | A collision between moderately sized user interface elements | 1.0.0 |\n| **`Light`**  | <code>'LIGHT'</code>  | A collision between small, light user interface elements     | 1.0.0 |\n\n\n#### NotificationType\n\n| Members       | Value                  | Description                                                                    | Since |\n| ------------- | ---------------------- | ------------------------------------------------------------------------------ | ----- |\n| **`Success`** | <code>'SUCCESS'</code> | A notification feedback type indicating that a task has completed successfully | 1.0.0 |\n| **`Warning`** | <code>'WARNING'</code> | A notification feedback type indicating that a task has produced a warning     | 1.0.0 |\n| **`Error`**   | <code>'ERROR'</code>   | A notification feedback type indicating that a task has failed                 | 1.0.0 |\n\n</docgen-api>\n",
    "licenseText": "Copyright 2020-present Ionic\nhttps://ionic.io\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@capacitor/haptics/-/haptics-4.0.1.tgz#8113c757f9bce3cd6618f6aadda47e7aa7a92069",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@capacitor/haptics/-/haptics-4.0.1.tgz",
    "hash": "8113c757f9bce3cd6618f6aadda47e7aa7a92069",
    "integrity": "sha512-ZLVoLdK1Md/xIRRrDOnrLCKGRg8UENY1ShpKcysPN1z1MgcpvB/9Nbqczm3RH24zyo3MP/7homkqMzUGxPBlwQ==",
    "registry": "npm",
    "packageName": "@capacitor/haptics",
    "cacheIntegrity": "sha512-ZLVoLdK1Md/xIRRrDOnrLCKGRg8UENY1ShpKcysPN1z1MgcpvB/9Nbqczm3RH24zyo3MP/7homkqMzUGxPBlwQ== sha1-gRPHV/m8481mGPaq3aR+eqepIGk="
  },
  "registry": "npm",
  "hash": "8113c757f9bce3cd6618f6aadda47e7aa7a92069"
}