{
  "manifest": {
    "name": "rollup-plugin-external-globals",
    "version": "0.6.1",
    "description": "Transform external imports into global variables like output.globals.",
    "keywords": [
      "rollup-plugin",
      "es",
      "transform",
      "external",
      "globals"
    ],
    "main": "index.js",
    "files": [
      "lib"
    ],
    "eslintIgnore": [
      "coverage"
    ],
    "scripts": {
      "test": "eslint **/*.js --cache && c8 --reporter lcov mocha",
      "preversion": "npm test",
      "postversion": "git push --follow-tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/eight04/rollup-plugin-external-globals.git"
    },
    "author": {
      "name": "eight04",
      "email": "eight04@gmail.com"
    },
    "license": "MIT",
    "devDependencies": {
      "c8": "^7.3.4",
      "endent": "^2.0.1",
      "eslint": "^7.11.0",
      "mocha": "^8.2.0",
      "rollup": "^2.32.0",
      "tempdir-yaml": "^0.3.0"
    },
    "dependencies": {
      "@rollup/pluginutils": "^4.0.0",
      "estree-walker": "^2.0.1",
      "is-reference": "^1.2.1",
      "magic-string": "^0.25.7"
    },
    "peerDependencies": {
      "rollup": "^2.25.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-rollup-plugin-external-globals-0.6.1-integrity/node_modules/rollup-plugin-external-globals/package.json",
    "readmeFilename": "README.md",
    "readme": "rollup-plugin-external-globals\n==============================\n\n[![Build Status](https://travis-ci.com/eight04/rollup-plugin-external-globals.svg?branch=master)](https://travis-ci.com/eight04/rollup-plugin-external-globals)\n[![codecov](https://codecov.io/gh/eight04/rollup-plugin-external-globals/branch/master/graph/badge.svg)](https://codecov.io/gh/eight04/rollup-plugin-external-globals)\n[![install size](https://packagephobia.now.sh/badge?p=rollup-plugin-external-globals)](https://packagephobia.now.sh/result?p=rollup-plugin-external-globals)\n\nTransform external imports into global variables like Rollup's `output.globals` option. See [rollup/rollup#2374](https://github.com/rollup/rollup/issues/2374)\n\nInstallation\n------------\n\n```\nnpm install -D rollup-plugin-external-globals\n```\n\nUsage\n-----\n\n```js\nimport externalGlobals from \"rollup-plugin-external-globals\";\n\nexport default {\n  input: [\"entry.js\"],\n  output: {\n    dir: \"dist\",\n    format: \"es\"\n  },\n  plugins: [\n    externalGlobals({\n      jquery: \"$\"\n    })\n  ]\n};\n```\n\nThe above config transforms\n\n```js\nimport jq from \"jquery\";\n\nconsole.log(jq(\".test\"));\n```\n\ninto\n\n```js\nconsole.log($(\".test\"));\n```\n\nIt also transforms dynamic import:\n\n```js\nimport(\"jquery\")\n  .then($ => {\n    $ = $.default || $;\n    console.log($(\".test\"));\n  });\n\n// transformed\nPromise.resolve($)\n  .then($ => {\n    $ = $.default || $;\n    console.log($(\".test\"));\n  });\n```\n\n> **Note:** when using dynamic import, you should notice that in ES module, the resolved object is aways a module namespace, but the global variable might be not.\n\n> **Note:** this plugin only works with import/export syntax. If you are using a module loader transformer e.g. `rollup-plugin-commonjs`, you have to put this plugin *after* the transformer plugin.\n\nAPI\n----\n\nThis module exports a single function.\n\n### createPlugin\n\n```js\nconst plugin = createPlugin(\n  globals: Object | Function,\n  {\n    include?: Array,\n    exclude?: Array,\n    dynamicWrapper?: Function\n  } = {}\n);\n```\n\n`globals` is a `moduleId`/`variableName` map. For example, to map `jquery` module to `$`:\n\n```js\nconst globals = {\n  jquery: \"$\"\n}\n```\n\nor provide a function that takes the `moduleId` and returns the `variableName`.\n\n```js\nconst globals = (id) => {\n  if (id === \"jquery\") {\n    return \"$\";\n  }\n}\n```\n\n`include` is an array of glob patterns. If defined, only matched files would be transformed.\n\n`exclude` is an array of glob patterns. Matched files would not be transformed.\n\n`dynamicWrapper` is used to specify dynamic imports. Below is the default.\n\n```js\nconst dynamicWrapper = (id) => {\n  return `Promise.resolve(${id})`;\n}\n```\n\nVirtual modules are always transformed.\n\nChangelog\n---------\n\n* 0.6.1 (Oct 21, 2020)\n\n  - Fix: add an extra assignment when exporting globals.\n\n* 0.6.0 (Aug 14, 2020)\n\n  - **Breaking: bump to rollup@2.**\n\n* 0.5.0 (Dec 8, 2019)\n\n  - Add: `dynamicWrapper` option.\n  - Add: now `globals` can be a function.\n  - Bump dependencies/peer dependencies.\n\n* 0.4.0 (Sep 24, 2019)\n\n  - Add: transform dynamic imports i.e. `import(\"foo\")` => `Promise.resolve(FOO)`.\n\n* 0.3.1 (Jun 6, 2019)\n\n  - Fix: all export-from statements are incorrectly transformed.\n  - Bump dependencies.\n\n* 0.3.0 (Mar 25, 2019)\n\n  - Fix: temporary variable name conflicts.\n  - **Breaking: transform virtual modules.** Now the plugin transforms proxy modules generated by commonjs plugin.\n  - Bump dependencies.\n\n* 0.2.1 (Oct 2, 2018)\n\n  - Fix: don't skip export statement.\n\n* 0.2.0 (Sep 12, 2018)\n\n  - Change: use `transform` hook.\n  - Add: rewrite conflicted variable names.\n  - Add: handle export from.\n\n* 0.1.0 (Aug 5, 2018)\n\n  - Initial release.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 eight\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/rollup-plugin-external-globals/-/rollup-plugin-external-globals-0.6.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/rollup-plugin-external-globals/-/rollup-plugin-external-globals-0.6.1.tgz",
    "hash": "",
    "integrity": "sha512-mlp3KNa5sE4Sp9UUR2rjBrxjG79OyZAh/QC18RHIjM+iYkbBwNXSo8DHRMZWtzJTrH8GxQ+SJvCTN3i14uMXIA==",
    "registry": "npm",
    "packageName": "rollup-plugin-external-globals",
    "cacheIntegrity": "sha512-mlp3KNa5sE4Sp9UUR2rjBrxjG79OyZAh/QC18RHIjM+iYkbBwNXSo8DHRMZWtzJTrH8GxQ+SJvCTN3i14uMXIA== sha1-hhwmC1cnFE4P0bQksQP58Cgvw2U="
  },
  "registry": "npm",
  "hash": "9a5a7728d6b9b04e12a7d514476ae306bc631bbf4ec99021fd00b5f111c88ccfa26246c1c0d5d2a3c0c744c656b73253ac7f06c50f9226f0933778b5e2e31720"
}