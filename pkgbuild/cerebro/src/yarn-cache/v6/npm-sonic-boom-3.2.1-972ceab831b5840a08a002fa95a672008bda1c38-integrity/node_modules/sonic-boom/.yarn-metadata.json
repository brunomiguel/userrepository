{
  "manifest": {
    "name": "sonic-boom",
    "version": "3.2.1",
    "description": "Extremely fast utf8 only stream implementation",
    "main": "index.js",
    "type": "commonjs",
    "types": "types/index.d.ts",
    "scripts": {
      "test": "npm run test:types && standard && tap test.js",
      "test:unit": "tap test.js",
      "test:types": "tsc && tsd && ts-node types/tests/test.ts",
      "prepare": "husky install"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pinojs/sonic-boom.git"
    },
    "keywords": [
      "stream",
      "fs",
      "net",
      "fd",
      "file",
      "descriptor",
      "fast"
    ],
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/sonic-boom/issues"
    },
    "homepage": "https://github.com/pinojs/sonic-boom#readme",
    "devDependencies": {
      "@types/node": "^18.0.0",
      "fastbench": "^1.0.1",
      "husky": "^8.0.1",
      "proxyquire": "^2.1.3",
      "standard": "^17.0.0",
      "tap": "^16.2.0",
      "tsd": "^0.25.0",
      "typescript": "^4.7.2",
      "ts-node": "^10.8.0"
    },
    "dependencies": {
      "atomic-sleep": "^1.0.0"
    },
    "tsd": {
      "directory": "./types"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sonic-boom-3.2.1-972ceab831b5840a08a002fa95a672008bda1c38-integrity/node_modules/sonic-boom/package.json",
    "readmeFilename": "README.md",
    "readme": "# sonic-boom\n\n[![NPM Package Version](https://img.shields.io/npm/v/sonic-boom)](https://www.npmjs.com/package/sonic-boom)\n[![Build Status](https://github.com/pinojs/sonic-boom/workflows/CI/badge.svg)](https://github.com/pinojs/sonic-boom/actions?query=workflow%3ACI)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\nExtremely fast utf8-only stream implementation to write to files and\nfile descriptors.\n\nThis implementation is partial, but support backpressure and `.pipe()` in is here.\nHowever, it is 2-3x faster than Node Core `fs.createWriteStream()`:\n\n```\nbenchSonic*1000: 1916.904ms\nbenchSonicSync*1000: 8605.265ms\nbenchSonic4k*1000: 1965.231ms\nbenchSonicSync4k*1000: 1588.224ms\nbenchCore*1000: 5851.959ms\nbenchConsole*1000: 7605.713ms\n```\n\nNote that sync mode without buffering is _slower_ than a Node Core WritableStream, however\nthis mode matches the expected behavior of `console.log()`.\n\nNote that if this is used to log to a windows terminal (`cmd.exe` or\npowershell), it is needed to run `chcp 65001` in the terminal to\ncorrectly display utf-8 characters, see\n[chcp](https://ss64.com/nt/chcp.html) for more details.\n\n## Install\n\n```\nnpm i sonic-boom\n```\n\n## Example\n\n```js\n'use strict'\n\nconst SonicBoom = require('sonic-boom')\nconst sonic = new SonicBoom({ fd: process.stdout.fd }) // or { dest: '/path/to/destination' }\n\nfor (let i = 0; i < 10; i++) {\n  sonic.write('hello sonic\\n')\n}\n```\n\n## API\n\n### SonicBoom(opts)\n\nCreates a new instance of SonicBoom.\n\nThe options are:\n\n* `fd`: a file descriptor, something that is returned by `fs.open` or\n   `fs.openSync`.\n* `dest`: a string that is a path to a file to be written to (mode controlled by the `append` option).\n* `minLength`: the minimum length of the internal buffer that is\n  required to be full before flushing.\n* `maxLength`: the maximum length of the internal buffer. If a write operation would cause the buffer\n  to exceed `maxLength`, the data written is dropped and a `drop` event is emitted with the dropped data\n* `maxWrite`: the maximum number of bytes that can be written; default: 16384\n* `sync`: perform writes synchronously (similar to `console.log`).\n* `fsync`: perform a [fsyncSync](https://nodejs.org/api/fs.html#fsfsyncsyncfd) every time a write is completed.\n* `append`: appends writes to dest file instead of truncating it (default `true`).\n* `mode`: specify the creating file `mode` (see [fs.open()](https://nodejs.org/api/fs.html#fsopenpath-flags-mode-callback) from Node.js core).\n* `mkdir`: ensure directory for dest file exists when `true` (default `false`).\n* `retryEAGAIN(err, writeBufferLen, remainingBufferLen)`: a function that will be called when sonic-boom\n    write/writeSync/flushSync encounters a EAGAIN error. If the return value is\n    true sonic-boom will retry the operation, otherwise it will bubble the\n    error. `err` is the error that caused this function to be called,\n    `writeBufferLen` is the length of the buffer sonic-boom tried to write, and\n    `remainingBufferLen` is the length of the remaining buffer sonic-boom didn't try to write.\n\nFor `sync:false`  a `SonicBoom` instance will emit the `'ready'` event when a file descriptor is available.\nFor `sync:true` this is not relevant because the `'ready'` event will be fired when the `SonicBoom` instance is created, before it can be subscribed to.\n\n\n### SonicBoom#write(string)\n\nWrites the string to the file.\nIt will return false to signal the producer to slow down.\n\n### SonicBoom#flush()\n\nWrites the current buffer to the file if a write was not in progress.\nDo nothing if `minLength`Â is zero or if it is already writing.\n\n### SonicBoom#reopen([file])\n\nReopen the file in place, useful for log rotation.\n\nExample:\n\n```js\nconst stream = new SonicBoom('./my.log')\nprocess.on('SIGUSR2', function () {\n  stream.reopen()\n})\n```\n\n### SonicBoom#flushSync()\n\nFlushes the buffered data synchronously. This is a costly operation.\n\n### SonicBoom#end()\n\nCloses the stream, the data will be flushed down asynchronously\n\n### SonicBoom#destroy()\n\nCloses the stream immediately, the data is not flushed.\n\n### Events\n\n\n#### SonicBoom#close\n\nSee [Stream#close](https://nodejs.org/api/stream.html#event-close). The `'close'` event when the instance has been closed.\n\n#### SonicBoom#drain\n\nSee [Stream#drain](https://nodejs.org/api/stream.html#event-drain). The `'drain'` event is emitted when source can resume sending data.\n\n#### SonicBoom#drop <any>\n\nWhen destination file maximal length is reached, the `'drop'` event is emitted with data that could not be written. \n\n#### SonicBoom#error <Error>\n\nThe `'error'` event is emitted when the destination file can not be opened, or written.\n\n#### SonicBoom#finish\n\nSee [Stream#finish](https://nodejs.org/api/stream.html#event-finish). The `'finish'` event after calling `end()` method and when all data was written.\n\n#### SonicBoom#ready\n\nThe `'ready'` event occurs when the created instance is ready to process input.\n\n#### SonicBoom#write <number>\n\nThe `'write'` event occurs every time data is written to the underlying file. It emits the number of written bytes.\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Matteo Collina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sonic-boom/-/sonic-boom-3.2.1.tgz#972ceab831b5840a08a002fa95a672008bda1c38",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sonic-boom/-/sonic-boom-3.2.1.tgz",
    "hash": "972ceab831b5840a08a002fa95a672008bda1c38",
    "integrity": "sha512-iITeTHxy3B9FGu8aVdiDXUVAcHMF9Ss0cCsAOo2HfCrmVGT3/DT5oYaeu0M/YKZDlKTvChEyPq0zI9Hf33EX6A==",
    "registry": "npm",
    "packageName": "sonic-boom",
    "cacheIntegrity": "sha512-iITeTHxy3B9FGu8aVdiDXUVAcHMF9Ss0cCsAOo2HfCrmVGT3/DT5oYaeu0M/YKZDlKTvChEyPq0zI9Hf33EX6A== sha1-lyzquDG1hAoIoAL6laZyAIvaHDg="
  },
  "registry": "npm",
  "hash": "972ceab831b5840a08a002fa95a672008bda1c38"
}