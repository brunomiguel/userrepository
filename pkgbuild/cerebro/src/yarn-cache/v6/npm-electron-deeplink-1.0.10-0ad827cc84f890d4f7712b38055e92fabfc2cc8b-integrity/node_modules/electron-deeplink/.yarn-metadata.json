{
  "manifest": {
    "name": "electron-deeplink",
    "version": "1.0.10",
    "description": "Node module for Electron apps that sets the default handler for a given protocol (deeplinks) in both development and production environments.",
    "keywords": [
      "electron",
      "deeplink",
      "protocol",
      "win32",
      "macos"
    ],
    "main": "./dist/index.js",
    "files": [
      "/dist",
      "/src",
      "binding.gyp",
      "package.json",
      "README.md"
    ],
    "scripts": {
      "build": "tsc & node-gyp rebuild",
      "clean": "rm -rf ./dist & node-gyp clean",
      "format": "clang-format -i ./src/electron-deeplink.mm",
      "test": "nyc mocha -r ts-node/register ./tests/**/*.spec.ts",
      "semantic-release": "semantic-release",
      "install": "node-gyp rebuild"
    },
    "author": {},
    "license": "MIT",
    "devDependencies": {
      "@types/bindings": "^1.5.1",
      "@types/chai": "^4.2.22",
      "@types/mocha": "^8.0.2",
      "@types/node": "^14.0.27",
      "@types/sinon": "^10.0.4",
      "chai": "^4.2.0",
      "clang-format": "^1.4.0",
      "mocha": "^8.1.1",
      "node-gyp": "^6.0.1",
      "nyc": "^15.1.0",
      "prettier": "^2.0.5",
      "semantic-release": "^17.1.1",
      "sinon": "^9.0.2",
      "ts-node": "^8.10.2",
      "typescript": "^3.9.7"
    },
    "dependencies": {
      "@types/electron": "^1.6.10",
      "bindings": "^1.5.0",
      "electron-log": "^4.2.3",
      "node-addon-api": "^2.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/glawson/electron-deeplink.git"
    },
    "release": {
      "branches": [
        "master"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-deeplink-1.0.10-0ad827cc84f890d4f7712b38055e92fabfc2cc8b-integrity/node_modules/electron-deeplink/package.json",
    "readmeFilename": "README.md",
    "readme": "[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)\n![ts](https://badgen.net/badge/-/TypeScript?icon=typescript&label&labelColor=blue&color=555555)\n[![glawson](https://circleci.com/gh/glawson/electron-deeplink.svg?style=shield)](https://circleci.com/gh/glawson/electron-deeplink)\n\n# electron-deeplink\n\nNode module for Electron apps that sets the default handler for a given protocol (deep links) in both\ndevelopment and production environments.\n\nThis module was inspired due to the lack of protocol support when running non packaged apps on macOS (see [`app.setAsDefaultProtocolClient`](https://www.electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args) for explanation). This module provides full support for running and testing the given protocol in the development environment. It also provides the same protocol support for the production envronment. In other words, protocol management is completly controlled with this module.\n\n# Please Note\n\n-   For Production: While electron-deeplink handles setting `app.setAsDefaultProtocolClient`, you still need to make sure setup the mac bundleId correctly for [electron-builder](https://www.electron.build/configuration/configuration) or [electron-forge](https://www.electronforge.io/configuration).\n\n# Example App\n\nA full working example can be found [here](https://github.com/glawson/electron-deeplink-example)\n\n# Installation\n\n```sh\n# If you use npm:\nnpm install electron-deeplink\n\n# If you use yarn:\n$ yarn add electron-deeplink\n```\n\n# Usage\n\nIn `main.js`, include the `electron-deeplink` module and instantiate the Deeplink class towards to begining of `main.js`.\n\n```js\n// main.js\nconst { app, BrowserWindow } = require('electron');\nconst { Deeplink } = require('electron-deeplink');\nconst isDev = require('electron-is-dev');\n\nlet mainWindow;\nconst protocol = isDev ? 'dev-app' : 'prod-app';\nconst deeplink = new Deeplink({ app, mainWindow, protocol, isDev });\n```\n\nSetup a watch on the deeplink 'received' event\n\n```js\n// main.js\ndeeplink.on('received', (link) => {\n    // do stuff here\n});\n```\n\n# API\n\n## creating an instance\n\n```js\nconst deeplink = new Deeplink([config]);\n```\n\n## config\n\n```ts\n{\n    // required\n    // type: electron app\n    app: [electron.app]\n\n    // required\n    // type: app.BrowserWindow\n    // Reference to the apps main window\n    mainWindow: [main window reference]\n\n    // required\n    // type: string\n    // String representing the protocol to use. For production, this should be the same as the bundleId set in the build config.\n    protocol: [protocol string]\n\n    // optional, default: false\n    // type: boolean\n    // Represents the app environment\n    isDev: boolean\n\n    // optional, default: false\n    // type: boolean\n    // If true, outputs logging.  Uses electron-log, so files are appened/created for prod.\n    debugLogging: boolean\n\n    // optional, default: '/node_modules/electron/dist/Electron.app'\n    // type: string\n    // String representing the location of Electron relative to the app root.\n    electronPath: [string]\n}\n```\n\n## events\n\n```js\n// 'recieved'\n// When a \"deeplink\" is recieved by the module, this event is emitted.\n\ndeeplink.on('received', (link) => {\n    // do something here\n});\n```\n\n# Contributors\n\n**This repo uses [semantic-release](https://semantic-release.gitbook.io/) for versioning, which uses [Angular Commit Message Conventions](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines).**\n\n**semantic-release is hooked up to CircleCI**\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-deeplink/-/electron-deeplink-1.0.10.tgz#0ad827cc84f890d4f7712b38055e92fabfc2cc8b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-deeplink/-/electron-deeplink-1.0.10.tgz",
    "hash": "0ad827cc84f890d4f7712b38055e92fabfc2cc8b",
    "integrity": "sha512-kyvjPdOtPfzNfdJYymIMPsC3N+eLv0SIobx6XYVX3j5zgwQ6XKz0P9qOCBwdlK8DhY3MX6l/jhx3gKSecOyWoA==",
    "registry": "npm",
    "packageName": "electron-deeplink",
    "cacheIntegrity": "sha512-kyvjPdOtPfzNfdJYymIMPsC3N+eLv0SIobx6XYVX3j5zgwQ6XKz0P9qOCBwdlK8DhY3MX6l/jhx3gKSecOyWoA== sha1-CtgnzIT4kNT3cSs4BV6S+r/CzIs="
  },
  "registry": "npm",
  "hash": "0ad827cc84f890d4f7712b38055e92fabfc2cc8b"
}