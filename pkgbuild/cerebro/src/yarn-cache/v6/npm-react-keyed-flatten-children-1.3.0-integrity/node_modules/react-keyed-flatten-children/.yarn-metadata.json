{
  "manifest": {
    "name": "react-keyed-flatten-children",
    "version": "1.3.0",
    "description": "Flattens React children and fragments to an array with predictable and stable keys",
    "main": "index.js",
    "homepage": "https://github.com/grrowl/react-keyed-flatten-children",
    "repository": {
      "type": "git",
      "url": "https://github.com/grrowl/react-keyed-flatten-children.git"
    },
    "scripts": {
      "build": "tsc",
      "test": "ts-node node_modules/tape/bin/tape *.spec.tsx",
      "prepublishOnly": "npm run build"
    },
    "keywords": [
      "react",
      "fragment",
      "flatten",
      "children",
      "utility"
    ],
    "author": {
      "name": "Tom McKenzie",
      "email": "tom@chillidonut.com"
    },
    "license": "MIT",
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "devDependencies": {
      "@types/react": "^16.9.11",
      "@types/react-is": "^16.7.1",
      "@types/react-test-renderer": "^16.9.1",
      "@types/tape": "^4.2.33",
      "prettier": "^1.19.1",
      "react": "^16.12.00",
      "react-test-renderer": "^16.12.0",
      "tape": "^4.11.0",
      "ts-node": "^8.5.2",
      "typescript": "^3.9.7"
    },
    "dependencies": {
      "react-is": "^16.8.6"
    },
    "peerDependencies": {
      "react": ">=15.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-keyed-flatten-children-1.3.0-integrity/node_modules/react-keyed-flatten-children/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-keyed-flatten-children\n\n[![Build Status](https://travis-ci.org/grrowl/react-keyed-flatten-children.svg?branch=master)](https://travis-ci.org/grrowl/react-keyed-flatten-children)\n\nSimilar to [React's built-in `Children.toArray` method](https://reactjs.org/docs/react-api.html#reactchildrentoarray), this utility takes children and returns them as an array for introspection or filtering. Different from `Children.toArray`, it will flatten arrays and `React.Fragment`s into a regular, one-dimensional array while ensuring element and fragment keys are preserved, unique, and stable between renders.\n\n## getting started\n\n```\nnpm install react-keyed-flatten-children\n```\n\n```\nyarn add react-keyed-flatten-children\n```\n\n## why?\n\nFrom the documentation of Children.toArray:\n\n> [toArray] returns the children opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice this.props.children before passing it down.\n\nUnfortunately it has some thorny edges:\n\n- [Children.toArray does not traverse into fragments](https://github.com/facebook/react/issues/6889), which limits flexibility of its use.\n- Existing solutions exist, but they do not preserve the keys of the children and fragments, which throws away valuable performance optimisations provided through React keys.\n- You're might be doing something a little wild, so you want the concept of \"children\" to as predictable as possible for you, and for the consumers of your library or component, [to avoid issues like this down the line](https://github.com/ReactTraining/react-router/issues/5785#issuecomment-351067856).\n\nSome have proposed, soon after Fragments were introduced, that [a built-in `React.Children.toFlatArray` would be useful](https://github.com/reactjs/rfcs/pull/61), but\n\n[View the codesandbox here](https://codesandbox.io/s/react-keyed-flatten-children-example-yghsp) to get hands-on with how and when to utilise this module.\n\n### for using this in your app\n\nI've written a more application-focussed explanation in my article [\"Addressing Children.toArray's thorny edges\"](https://tommckenzie.dev/posts/react-keyed-flatten-children.html).\n\n### for library authors\n\nIn most cases `react-keyed-flatten-children` is a drop-in replacement for `Children.toArray`.\n\n```jsx\nimport flattenChildren from \"react-keyed-flatten-children\";\n\nconst MenuList = ({ children }) => {\n  const [selectedKey, setSelectedKey] = useState(null);\n\n  return (\n    <div role=\"menu\">\n      {flattenChildren(props.children).map(child => {\n        if (child.type === MenuItem) {\n          return React.cloneElement(child, {\n            selected: child.key === selectedKey,\n            onClick: () => setSelectedKey(child.key)\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};\n```\n\nNow consumers can use arrays, fragments, or conditionally render items and your library will continue to work predictably.\n\n```jsx\n<MenuList>\n  <h2>Animals</h2>\n  <MenuItem>Dogs</MenuItem>\n  <MenuItem>Cats</MenuItem>\n\n  <h2>Cars</h2>\n  {CARS_ARRAY.map(car => (\n    <MenuItem>{car}</MenuItem>\n  ))}\n\n  {isLoggedIn() && (\n    <>\n      <h2>User</h2>\n      <MenuItem>You!</MenuItem>\n      <MenuItem>Someone else!</MenuItem>\n    </>\n  )\n</MenuList>\n```\n\n### for everyone else\n\nWork around libraries which don't support fragments passed into children.\n\n```jsx\nimport flattenChildren from \"react-keyed-flatten-children\";\nimport { Switch, Route } from \"react-router\";\n\n// A <Switch> looks through its children <Routes>, but won't match <Routes> within fragments.\n// <FlexibleSwitch> will flatten out its children so <Switch> is able to see all children.\nconst FlexibleSwitch = ({ children }) => (\n  <Switch>{flattenChildren(children)}</Switch>\n);\n\nconst AppRoutes = ({ user }) => (\n  <Router>\n    <GlobalNavigation user={user} />\n    <Switch>\n      <Route path=\"/about\">\n        <About />\n      </Route>\n      {user && (\n        <>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/settings\">\n            <Settings />\n          </Route>\n        </>\n      )}\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </Router>\n);\n```\n\n## license\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Tom McKenzie <tom@chillidonut.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/react-keyed-flatten-children/-/react-keyed-flatten-children-1.3.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/react-keyed-flatten-children/-/react-keyed-flatten-children-1.3.0.tgz",
    "hash": "",
    "integrity": "sha512-qB7A6n+NHU0x88qTZGAJw6dsqwI941jcRPBB640c/CyWqjPQQ+YUmXOuzPziuHb7iqplM3xksWAbGYwkQT0tXA==",
    "registry": "npm",
    "packageName": "react-keyed-flatten-children",
    "cacheIntegrity": "sha512-qB7A6n+NHU0x88qTZGAJw6dsqwI941jcRPBB640c/CyWqjPQQ+YUmXOuzPziuHb7iqplM3xksWAbGYwkQT0tXA== sha1-ONFxWCxjWJCfQwZIp6fQlK665Co="
  },
  "registry": "npm",
  "hash": "a81ec0ea7f8d1d4d31f3ca93646009c3a76cab023de358dc44f041eb8d1cfc2c96aa33d043e6149973aeccfce2b876fb8aaa65337c64b1601b198c24413d2d5c"
}