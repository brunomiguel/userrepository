{
  "manifest": {
    "name": "@logseq/capacitor-file-sync",
    "version": "0.0.17",
    "description": "File sync for Logseq",
    "main": "dist/plugin.cjs.js",
    "module": "dist/esm/index.js",
    "types": "dist/esm/index.d.ts",
    "unpkg": "dist/plugin.js",
    "files": [
      "android/src/main/",
      "android/build.gradle",
      "dist/",
      "ios/Plugin/",
      "LogseqCapacitorFileSync.podspec"
    ],
    "author": {
      "name": "Logseq Devs",
      "email": "dev@logseq.com"
    },
    "license": "GPL-3.0-or-later",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/logseq/capacitor-file-sync.git"
    },
    "bugs": {
      "url": "https://github.com/logseq/capacitor-file-sync/issues"
    },
    "keywords": [
      "capacitor",
      "plugin",
      "native"
    ],
    "scripts": {
      "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
      "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin -destination generic/platform=iOS && cd ..",
      "verify:android": "cd android && ./gradlew clean build test && cd ..",
      "verify:web": "npm run build",
      "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
      "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- --fix --format",
      "eslint": "eslint . --ext ts",
      "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
      "swiftlint": "node-swiftlint",
      "docgen": "docgen --api FileSyncPlugin --output-readme README.md --output-json dist/docs.json",
      "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
      "clean": "rimraf ./dist",
      "watch": "tsc --watch",
      "prepublishOnly": "npm run build"
    },
    "devDependencies": {
      "@capacitor/android": "^4.0.0",
      "@capacitor/core": "^4.0.0",
      "@capacitor/docgen": "^0.0.18",
      "@capacitor/ios": "^4.0.0",
      "@ionic/eslint-config": "^0.3.0",
      "@ionic/prettier-config": "^1.0.1",
      "@ionic/swiftlint-config": "^1.1.2",
      "eslint": "^7.11.0",
      "prettier": "~2.3.0",
      "prettier-plugin-java": "~1.0.2",
      "rimraf": "^3.0.2",
      "rollup": "^2.32.0",
      "swiftlint": "^1.0.1",
      "typescript": "~4.1.5"
    },
    "peerDependencies": {
      "@capacitor/core": "^4.0.0"
    },
    "prettier": "@ionic/prettier-config",
    "swiftlint": "@ionic/swiftlint-config",
    "eslintConfig": {
      "extends": "@ionic/eslint-config/recommended"
    },
    "capacitor": {
      "ios": {
        "src": "ios"
      },
      "android": {
        "src": "android"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@logseq-capacitor-file-sync-0.0.17-4bb9000c64aee8cc07d79069f5e3cbc0908b2613-integrity/node_modules/@logseq/capacitor-file-sync/package.json",
    "readmeFilename": "README.md",
    "readme": "# @logseq/capacitor-file-sync\n\nFile sync for Logseq\n\n## Install\n\n```bash\nnpm install @logseq/capacitor-file-sync\nnpx cap sync\n```\n\n## API\n\n<docgen-index>\n\n* [`keygen()`](#keygen)\n* [`setEnv(...)`](#setenv)\n* [`encryptFnames(...)`](#encryptfnames)\n* [`decryptFnames(...)`](#decryptfnames)\n* [`getLocalFilesMeta(...)`](#getlocalfilesmeta)\n* [`getLocalAllFilesMeta(...)`](#getlocalallfilesmeta)\n* [`deleteLocalFiles(...)`](#deletelocalfiles)\n* [`updateLocalFiles(...)`](#updatelocalfiles)\n* [`updateLocalVersionFiles(...)`](#updatelocalversionfiles)\n* [`deleteRemoteFiles(...)`](#deleteremotefiles)\n* [`updateRemoteFiles(...)`](#updateremotefiles)\n* [`encryptWithPassphrase(...)`](#encryptwithpassphrase)\n* [`decryptWithPassphrase(...)`](#decryptwithpassphrase)\n* [`cancelAllRequests(...)`](#cancelallrequests)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### keygen()\n\n```typescript\nkeygen() => Promise<{ secretKey: string; publicKey: string; }>\n```\n\n**Returns:** <code>Promise&lt;{ secretKey: string; publicKey: string; }&gt;</code>\n\n--------------------\n\n\n### setEnv(...)\n\n```typescript\nsetEnv(options: { graphUUID: string; env: string; secretKey: string; publicKey: string; }) => Promise<void>\n```\n\n| Param         | Type                                                                                   |\n| ------------- | -------------------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; env: string; secretKey: string; publicKey: string; }</code> |\n\n--------------------\n\n\n### encryptFnames(...)\n\n```typescript\nencryptFnames(options: { graphUUID: string; filePaths: string[]; }) => Promise<{ value: string[]; }>\n```\n\n| Param         | Type                                                     |\n| ------------- | -------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; filePaths: string[]; }</code> |\n\n**Returns:** <code>Promise&lt;{ value: string[]; }&gt;</code>\n\n--------------------\n\n\n### decryptFnames(...)\n\n```typescript\ndecryptFnames(options: { graphUUID: string; filePaths: string[]; }) => Promise<{ value: string[]; }>\n```\n\n| Param         | Type                                                     |\n| ------------- | -------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; filePaths: string[]; }</code> |\n\n**Returns:** <code>Promise&lt;{ value: string[]; }&gt;</code>\n\n--------------------\n\n\n### getLocalFilesMeta(...)\n\n```typescript\ngetLocalFilesMeta(options: { graphUUID: string; basePath: string; filePaths: string[]; }) => Promise<{ result: any[]; }>\n```\n\n| Param         | Type                                                                       |\n| ------------- | -------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; filePaths: string[]; }</code> |\n\n**Returns:** <code>Promise&lt;{ result: any[]; }&gt;</code>\n\n--------------------\n\n\n### getLocalAllFilesMeta(...)\n\n```typescript\ngetLocalAllFilesMeta(options: { graphUUID: string; basePath: string; }) => Promise<{ result: any[]; }>\n```\n\n| Param         | Type                                                  |\n| ------------- | ----------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; }</code> |\n\n**Returns:** <code>Promise&lt;{ result: any[]; }&gt;</code>\n\n--------------------\n\n\n### deleteLocalFiles(...)\n\n```typescript\ndeleteLocalFiles(options: { graphUUID: string; basePath: string; filePaths: string[]; }) => Promise<void>\n```\n\n| Param         | Type                                                                       |\n| ------------- | -------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; filePaths: string[]; }</code> |\n\n--------------------\n\n\n### updateLocalFiles(...)\n\n```typescript\nupdateLocalFiles(options: { graphUUID: string; basePath: string; filePaths: string[]; token: string; }) => Promise<void>\n```\n\n| Param         | Type                                                                                      |\n| ------------- | ----------------------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; filePaths: string[]; token: string; }</code> |\n\n--------------------\n\n\n### updateLocalVersionFiles(...)\n\n```typescript\nupdateLocalVersionFiles(options: { graphUUID: string; basePath: string; filePaths: string[]; token: string; }) => Promise<void>\n```\n\n| Param         | Type                                                                                      |\n| ------------- | ----------------------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; filePaths: string[]; token: string; }</code> |\n\n--------------------\n\n\n### deleteRemoteFiles(...)\n\n```typescript\ndeleteRemoteFiles(options: { graphUUID: string; filePaths: string[]; token: string; txid: number; }) => Promise<{ txid: number; }>\n```\n\n| Param         | Type                                                                                  |\n| ------------- | ------------------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; filePaths: string[]; token: string; txid: number; }</code> |\n\n**Returns:** <code>Promise&lt;{ txid: number; }&gt;</code>\n\n--------------------\n\n\n### updateRemoteFiles(...)\n\n```typescript\nupdateRemoteFiles(options: { graphUUID: string; basePath: string; filePaths: string[]; token: string; txid: number; }) => Promise<{ txid: number; }>\n```\n\n| Param         | Type                                                                                                    |\n| ------------- | ------------------------------------------------------------------------------------------------------- |\n| **`options`** | <code>{ graphUUID: string; basePath: string; filePaths: string[]; token: string; txid: number; }</code> |\n\n**Returns:** <code>Promise&lt;{ txid: number; }&gt;</code>\n\n--------------------\n\n\n### encryptWithPassphrase(...)\n\n```typescript\nencryptWithPassphrase(options: { passphrase: string; content: string; }) => Promise<{ data: string; }>\n```\n\n| Param         | Type                                                  |\n| ------------- | ----------------------------------------------------- |\n| **`options`** | <code>{ passphrase: string; content: string; }</code> |\n\n**Returns:** <code>Promise&lt;{ data: string; }&gt;</code>\n\n--------------------\n\n\n### decryptWithPassphrase(...)\n\n```typescript\ndecryptWithPassphrase(options: { passphrase: string; content: string; }) => Promise<{ data: string; }>\n```\n\n| Param         | Type                                                  |\n| ------------- | ----------------------------------------------------- |\n| **`options`** | <code>{ passphrase: string; content: string; }</code> |\n\n**Returns:** <code>Promise&lt;{ data: string; }&gt;</code>\n\n--------------------\n\n\n### cancelAllRequests(...)\n\n```typescript\ncancelAllRequests(options: unknown) => Promise<void>\n```\n\n| Param         | Type                 |\n| ------------- | -------------------- |\n| **`options`** | <code>unknown</code> |\n\n--------------------\n\n</docgen-api>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@logseq/capacitor-file-sync/-/capacitor-file-sync-0.0.17.tgz#4bb9000c64aee8cc07d79069f5e3cbc0908b2613",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@logseq/capacitor-file-sync/-/capacitor-file-sync-0.0.17.tgz",
    "hash": "4bb9000c64aee8cc07d79069f5e3cbc0908b2613",
    "integrity": "sha512-B+VHtmH9tGNXiGcHDKNMY2Ype/YHPg+V+HaGYXqEEtzSVtw2QOe/RLkOZG+wKFhokSk3hNQyVd1/WdMGhdHS/Q==",
    "registry": "npm",
    "packageName": "@logseq/capacitor-file-sync",
    "cacheIntegrity": "sha512-B+VHtmH9tGNXiGcHDKNMY2Ype/YHPg+V+HaGYXqEEtzSVtw2QOe/RLkOZG+wKFhokSk3hNQyVd1/WdMGhdHS/Q== sha1-S7kADGSu6MwH15Bp9ePLwJCLJhM="
  },
  "registry": "npm",
  "hash": "4bb9000c64aee8cc07d79069f5e3cbc0908b2613"
}