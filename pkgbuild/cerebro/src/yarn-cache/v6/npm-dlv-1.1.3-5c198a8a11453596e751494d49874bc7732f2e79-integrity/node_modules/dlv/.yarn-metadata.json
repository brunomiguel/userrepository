{
  "manifest": {
    "name": "dlv",
    "version": "1.1.3",
    "description": "Safely get a dot-notated property within an object.",
    "main": "dist/dlv.js",
    "browser": "dist/dlv.umd.js",
    "module": "dist/dlv.es.js",
    "scripts": {
      "dev": "microbundle watch",
      "build": "microbundle",
      "prepublish": "npm run build",
      "test": "node test",
      "release": "npm run build && npm test && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish"
    },
    "keywords": [
      "delve",
      "dot notation",
      "dot"
    ],
    "files": [
      "index.js",
      "dist"
    ],
    "author": {
      "name": "Jason Miller",
      "email": "jason@developit.ca",
      "url": "http://jasonformat.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/developit/dlv.git"
    },
    "license": "MIT",
    "devDependencies": {
      "microbundle": "^0.11.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dlv-1.1.3-5c198a8a11453596e751494d49874bc7732f2e79-integrity/node_modules/dlv/package.json",
    "readmeFilename": "README.md",
    "readme": "# `dlv(obj, keypath)` [![NPM](https://img.shields.io/npm/v/dlv.svg)](https://npmjs.com/package/dlv) [![Build](https://travis-ci.org/developit/dlv.svg?branch=master)](https://travis-ci.org/developit/dlv)\n\n> Safely get a dot-notated path within a nested object, with ability to return a default if the full key path does not exist or the value is undefined\n\n\n### Why?\n\nSmallest possible implementation: only **130 bytes.**\n\nYou could write this yourself, but then you'd have to write [tests].\n\nSupports ES Modules, CommonJS and globals.\n\n\n### Installation\n\n`npm install --save dlv`\n\n\n### Usage\n\n`delve(object, keypath, [default])`\n\n```js\nimport delve from 'dlv';\n\nlet obj = {\n\ta: {\n\t\tb: {\n\t\t\tc: 1,\n\t\t\td: undefined,\n\t\t\te: null\n\t\t}\n\t}\n};\n\n//use string dot notation for keys\ndelve(obj, 'a.b.c') === 1;\n\n//or use an array key\ndelve(obj, ['a', 'b', 'c']) === 1;\n\ndelve(obj, 'a.b') === obj.a.b;\n\n//returns undefined if the full key path does not exist and no default is specified\ndelve(obj, 'a.b.f') === undefined;\n\n//optional third parameter for default if the full key in path is missing\ndelve(obj, 'a.b.f', 'foo') === 'foo';\n\n//or if the key exists but the value is undefined\ndelve(obj, 'a.b.d', 'foo') === 'foo';\n\n//Non-truthy defined values are still returned if they exist at the full keypath\ndelve(obj, 'a.b.e', 'foo') === null;\n\n//undefined obj or key returns undefined, unless a default is supplied\ndelve(undefined, 'a.b.c') === undefined;\ndelve(undefined, 'a.b.c', 'foo') === 'foo';\ndelve(obj, undefined, 'foo') === 'foo';\n```\n\n\n### Setter Counterparts\n\n- [dset](https://github.com/lukeed/dset) by [@lukeed](https://github.com/lukeed) is the spiritual \"set\" counterpart of `dlv` and very fast.\n- [bury](https://github.com/kalmbach/bury) by [@kalmbach](https://github.com/kalmbach) does the opposite of `dlv` and is implemented in a very similar manner.\n\n\n### License\n\n[MIT](https://oss.ninja/mit/developit/)\n\n\n[preact]: https://github.com/developit/preact\n[tests]: https://github.com/developit/dlv/blob/master/test.js\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dlv/-/dlv-1.1.3.tgz#5c198a8a11453596e751494d49874bc7732f2e79",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dlv/-/dlv-1.1.3.tgz",
    "hash": "5c198a8a11453596e751494d49874bc7732f2e79",
    "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
    "registry": "npm",
    "packageName": "dlv",
    "cacheIntegrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA== sha1-XBmKihFFNZbnUUlNSYdLx3MvLnk="
  },
  "registry": "npm",
  "hash": "5c198a8a11453596e751494d49874bc7732f2e79"
}