{
  "manifest": {
    "name": "linkify-it",
    "version": "4.0.1",
    "description": "Links recognition library with FULL unicode support",
    "keywords": [
      "linkify",
      "linkifier",
      "autolink",
      "autolinker"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/markdown-it/linkify-it.git"
    },
    "files": [
      "index.js",
      "lib/"
    ],
    "license": "MIT",
    "scripts": {
      "lint": "eslint .",
      "test": "npm run lint && nyc mocha",
      "coverage": "npm run test && nyc report --reporter html",
      "report-coveralls": "nyc --reporter=lcov mocha",
      "demo": "npm run lint && node support/build_demo.js",
      "doc": "node support/build_doc.js",
      "gh-pages": "npm run demo && npm run doc && shx cp -R doc/ demo/ && gh-pages -d demo -f",
      "prepublishOnly": "npm run gh-pages"
    },
    "dependencies": {
      "uc.micro": "^1.0.1"
    },
    "devDependencies": {
      "ansi": "^0.3.0",
      "autoprefixer-stylus": "^1.0.0",
      "benchmark": "^2.1.0",
      "browserify": "^17.0.0",
      "eslint": "^7.0.0",
      "gh-pages": "^3.2.3",
      "mdurl": "^1.0.0",
      "mocha": "^9.1.2",
      "ndoc": "^6.0.0",
      "nyc": "^15.0.1",
      "pug-cli": "^1.0.0-alpha6",
      "shelljs": "^0.8.4",
      "shx": "^0.3.2",
      "stylus": "~0.55.0",
      "tlds": "^1.166.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-linkify-it-4.0.1-01f1d5e508190d06669982ba31a7d9f56a5751ec-integrity/node_modules/linkify-it/package.json",
    "readmeFilename": "README.md",
    "readme": "linkify-it\n==========\n\n[![CI](https://github.com/markdown-it/linkify-it/actions/workflows/ci.yml/badge.svg)](https://github.com/markdown-it/linkify-it/actions/workflows/ci.yml)\n[![NPM version](https://img.shields.io/npm/v/linkify-it.svg?style=flat)](https://www.npmjs.org/package/linkify-it)\n[![Coverage Status](https://img.shields.io/coveralls/markdown-it/linkify-it/master.svg?style=flat)](https://coveralls.io/r/markdown-it/linkify-it?branch=master)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/markdown-it/linkify-it)\n\n> Links recognition library with FULL unicode support.\n> Focused on high quality link patterns detection in plain text.\n\n__[Demo](http://markdown-it.github.io/linkify-it/)__\n\nWhy it's awesome:\n\n- Full unicode support, _with astral characters_!\n- International domains support.\n- Allows rules extension & custom normalizers.\n\n\nInstall\n-------\n\n```bash\nnpm install linkify-it --save\n```\n\nBrowserification is also supported.\n\n\nUsage examples\n--------------\n\n##### Example 1\n\n```js\nvar linkify = require('linkify-it')();\n\n// Reload full tlds list & add unofficial `.onion` domain.\nlinkify\n  .tlds(require('tlds'))          // Reload with full tlds list\n  .tlds('onion', true)            // Add unofficial `.onion` domain\n  .add('git:', 'http:')           // Add `git:` protocol as \"alias\"\n  .add('ftp:', null)              // Disable `ftp:` protocol\n  .set({ fuzzyIP: true });        // Enable IPs in fuzzy links (without schema)\n\nconsole.log(linkify.test('Site github.com!'));  // true\n\nconsole.log(linkify.match('Site github.com!')); // [ {\n                                                //   schema: \"\",\n                                                //   index: 5,\n                                                //   lastIndex: 15,\n                                                //   raw: \"github.com\",\n                                                //   text: \"github.com\",\n                                                //   url: \"http://github.com\",\n                                                // } ]\n```\n\n##### Example 2. Add twitter mentions handler\n\n```js\nlinkify.add('@', {\n  validate: function (text, pos, self) {\n    var tail = text.slice(pos);\n\n    if (!self.re.twitter) {\n      self.re.twitter =  new RegExp(\n        '^([a-zA-Z0-9_]){1,15}(?!_)(?=$|' + self.re.src_ZPCc + ')'\n      );\n    }\n    if (self.re.twitter.test(tail)) {\n      // Linkifier allows punctuation chars before prefix,\n      // but we additionally disable `@` (\"@@mention\" is invalid)\n      if (pos >= 2 && tail[pos - 2] === '@') {\n        return false;\n      }\n      return tail.match(self.re.twitter)[0].length;\n    }\n    return 0;\n  },\n  normalize: function (match) {\n    match.url = 'https://twitter.com/' + match.url.replace(/^@/, '');\n  }\n});\n```\n\n\nAPI\n---\n\n__[API documentation](http://markdown-it.github.io/linkify-it/doc)__\n\n### new LinkifyIt(schemas, options)\n\nCreates new linkifier instance with optional additional schemas.\nCan be called without `new` keyword for convenience.\n\nBy default understands:\n\n- `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n- \"fuzzy\" links and emails (google.com, foo@bar.com).\n\n`schemas` is an object, where each key/value describes protocol/rule:\n\n- __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n  for example). `linkify-it` makes sure that prefix is not preceded with\n  alphanumeric char.\n- __value__ - rule to check tail after link prefix\n  - _String_ - just alias to existing rule\n  - _Object_\n    - _validate_ - either a `RegExp` (start with `^`, and don't include the\n      link prefix itself), or a validator function which, given arguments\n      _text_, _pos_, and _self_, returns the length of a match in _text_\n      starting at index _pos_.  _pos_ is the index right after the link prefix.\n      _self_ can be used to access the linkify object to cache data.\n    - _normalize_ - optional function to normalize text & url of matched result\n      (for example, for twitter mentions).\n\n`options`:\n\n- __fuzzyLink__ - recognize URL-s without `http(s)://` head. Default `true`.\n- __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n  like version numbers. Default `false`.\n- __fuzzyEmail__ - recognize emails without `mailto:` prefix. Default `true`.\n- __---__ - set `true` to terminate link with `---` (if it's considered as long dash).\n\n\n### .test(text)\n\nSearches linkifiable pattern and returns `true` on success or `false` on fail.\n\n\n### .pretest(text)\n\nQuick check if link MAY BE can exist. Can be used to optimize more expensive\n`.test()` calls. Return `false` if link can not be found, `true` - if `.test()`\ncall needed to know exactly.\n\n\n### .testSchemaAt(text, name, offset)\n\nSimilar to `.test()` but checks only specific protocol tail exactly at given\nposition. Returns length of found pattern (0 on fail).\n\n\n### .match(text)\n\nReturns `Array` of found link matches or null if nothing found.\n\nEach match has:\n\n- __schema__ - link schema, can be empty for fuzzy links, or `//` for\n  protocol-neutral  links.\n- __index__ - offset of matched text\n- __lastIndex__ - index of next char after mathch end\n- __raw__ - matched text\n- __text__ - normalized text\n- __url__ - link, generated from matched text\n\n\n### .matchAtStart(text)\n\nChecks if a match exists at the start of the string. Returns `Match`\n(see docs for `match(text)`) or null if no URL is at the start.\nDoesn't work with fuzzy links.\n\n\n### .tlds(list[, keepOld])\n\nLoad (or merge) new tlds list. Those are needed for fuzzy links (without schema)\nto avoid false positives. By default:\n\n- 2-letter root zones are ok.\n- biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф are ok.\n- encoded (`xn--...`) root zones are ok.\n\nIf that's not enough, you can reload defaults with more detailed zones list.\n\n### .add(key, value)\n\nAdd a new schema to the schemas object.  As described in the constructor\ndefinition, `key` is a link prefix (`skype:`, for example), and `value`\nis a String to alias to another schema, or an Object with `validate` and\noptionally `normalize` definitions.  To disable an existing rule, use\n`.add(key, null)`.\n\n\n### .set(options)\n\nOverride default options. Missed properties will not be changed.\n\n\n## License\n\n[MIT](https://github.com/markdown-it/linkify-it/blob/master/LICENSE)\n",
    "licenseText": "Copyright (c) 2015 Vitaly Puzrin.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/linkify-it/-/linkify-it-4.0.1.tgz#01f1d5e508190d06669982ba31a7d9f56a5751ec",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/linkify-it/-/linkify-it-4.0.1.tgz",
    "hash": "01f1d5e508190d06669982ba31a7d9f56a5751ec",
    "integrity": "sha512-C7bfi1UZmoj8+PQx22XyeXCuBlokoyWQL5pWSP+EI6nzRylyThouddufc2c1NDIcP9k5agmN9fLpA7VNJfIiqw==",
    "registry": "npm",
    "packageName": "linkify-it",
    "cacheIntegrity": "sha512-C7bfi1UZmoj8+PQx22XyeXCuBlokoyWQL5pWSP+EI6nzRylyThouddufc2c1NDIcP9k5agmN9fLpA7VNJfIiqw== sha1-AfHV5QgZDQZmmYK6MafZ9WpXUew="
  },
  "registry": "npm",
  "hash": "01f1d5e508190d06669982ba31a7d9f56a5751ec"
}