{
  "manifest": {
    "name": "isbinaryfile",
    "description": "Detects if a file is binary in Node.js. Similar to Perl's -B.",
    "version": "3.0.3",
    "dependencies": {
      "buffer-alloc": "^1.2.0"
    },
    "devDependencies": {
      "mocha": "^2.2.4",
      "grunt": "~0.4.1",
      "grunt-release": "~0.6.0",
      "grunt-exec": "0.4.3",
      "grunt-cli": "~0.1.13"
    },
    "engines": {
      "node": ">=0.6.0"
    },
    "files": [
      "index.js"
    ],
    "license": "MIT",
    "main": "./index.js",
    "maintainers": [
      {
        "name": "Garen J. Torikian",
        "email": "gjtorikian@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gjtorikian/isBinaryFile"
    },
    "scripts": {
      "test": "mocha"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-isbinaryfile-3.0.3-integrity/node_modules/isbinaryfile/package.json",
    "readmeFilename": "README.md",
    "readme": "# isBinaryFile\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n- it reads the first few thousand bytes of a file\n- checks for a `null` byte; if it's found, it's binary\n- flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nMuch of the logic is pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist, is a directory, or is empty, the function returns `false`.\n\n## Installation\n\n```\nnpm install isbinaryfile\n```\n\n## Usage\n\n### isBinaryFile(filepath, callback)\n\n* `filepath`, a `string` indicating the path to the file.\n* `callback`, a `function` for the callback. It has two arguments:\n  - `err`, the typical Node.js error argument\n  - `result`, a `boolean` of `true` or `false`, depending on if the file is binary\n\n\n### isBinaryFile(bytes, size, callback)\n\n* `bytes`, a `Buffer` of the file's contents.\n* `size`, an optional `number` indicating the file size.\n* `callback`, a `function` for the callback. It has two arguments:\n  - `err`, the typical Node.js error argument\n  - `result`, a `boolean` of `true` or `false`, depending on if the file is binary\n\n\n### isBinaryFile.sync(filepath)\n\n* `filepath`, a `string` indicating the path to the file.\n\n\n### isBinaryFile.sync(bytes, size)\n\n* `bytes`, a `Buffer` of the file's contents.\n* `size`, an `number` indicating the file size.\n\n\nReturns a `boolean` of `true` or `false`, depending on if the file is binary.\n\n### Examples\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nfs.readFile(\"some_file\", function(err, data) {\n  fs.lstat(\"some_file\", function(err, stat) {\n    isBinaryFile(data, stat.size, function (err, result) {\n      if (!err) {\n        if (result) {\n          console.log(\"It is!\")\n        }\n        else {\n          console.log(\"No.\")\n        }\n      }\n    });\n  });\n});\n\nisBinaryFile.sync(\"some_file\"); // true or false\nvar bytes = fs.readFileSync((\"some_file\"));\nvar size = fs.lstatSync((\"some_file\").size;\nisBinaryFile.sync(bytes, size); // true or false\n```\n\n## Testing\n\nRun `npm install` to install `mocha`, then run `npm test`.\n",
    "licenseText": "Copyright (c) 2017 Garen J. Torikian\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.3.tgz",
    "hash": "",
    "integrity": "sha512-8cJBL5tTd2OS0dM4jz07wQd5g0dCCqIhUxPIGtZfa5L6hWlvV5MHTITy/DBAsF+Oe2LS1X3krBUhNwaGUWpWxw==",
    "registry": "npm",
    "packageName": "isbinaryfile",
    "cacheIntegrity": "sha512-8cJBL5tTd2OS0dM4jz07wQd5g0dCCqIhUxPIGtZfa5L6hWlvV5MHTITy/DBAsF+Oe2LS1X3krBUhNwaGUWpWxw== sha1-XW3vPt6/boyoyunDAYOoBLX4voA="
  },
  "registry": "npm",
  "hash": "f1c2412f9b53776392d1d3388f3d3bc107798347420aa2215313c81ad65f6b92fa85696f5793074c84f2fc3040b05f8e7b62d2d57de4ac1521370686516a56c7"
}