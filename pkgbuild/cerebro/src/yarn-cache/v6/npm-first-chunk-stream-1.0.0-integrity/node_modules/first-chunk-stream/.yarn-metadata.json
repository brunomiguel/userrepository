{
  "manifest": {
    "name": "first-chunk-stream",
    "version": "1.0.0",
    "description": "Transform the first chunk in a stream",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/first-chunk-stream.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "http://sindresorhus.com"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "mocha"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "buffer",
      "stream",
      "streams",
      "transform",
      "first",
      "chunk",
      "size",
      "min",
      "minimum"
    ],
    "devDependencies": {
      "concat-stream": "^1.4.5",
      "mocha": "*"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-first-chunk-stream-1.0.0-integrity/node_modules/first-chunk-stream/package.json",
    "readmeFilename": "readme.md",
    "readme": "# first-chunk-stream [![Build Status](https://travis-ci.org/sindresorhus/first-chunk-stream.svg?branch=master)](https://travis-ci.org/sindresorhus/first-chunk-stream)\n\n> Transform the first chunk in a stream\n\nUseful if you want to do something to the first chunk.\n\nYou can also set the minimum size of that chunk.\n\n\n## Install\n\n```sh\n$ npm install --save first-chunk-stream\n```\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar concat = require('concat-stream');\nvar firstChunk = require('first-chunk-stream');\n\n// unicorn.txt => unicorn rainbow\n// `highWaterMark: 1` means it will only read 1 byte at the time\nfs.createReadStream('unicorn.txt', {highWaterMark: 1})\n\t.pipe(firstChunk({minSize: 7}, function (chunk, enc, cb) {\n\t\tthis.push(chunk.toUpperCase());\n\t\tcb();\n\t}))\n\t.pipe(concat(function (data) {\n\t\tconsole.log(data);\n\t\t//=> UNICORN rainbow\n\t}));\n```\n\n\n## API\n\n### firstChunk([options], transform)\n\n#### options.minSize\n\nType: `number`\n\nThe minimum size of the first chunk.\n\n#### transform(chunk, encoding, callback)\n\n*Required*  \nType: `function`\n\nThe [function](http://nodejs.org/docs/latest/api/stream.html#stream_transform_transform_chunk_encoding_callback) that gets the first chunk.\n\n### firstChunk.ctor()\n\nInstead of returning a [stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform_1) instance, `firstChunk.ctor()` returns a constructor for a custom Transform. This is useful when you want to use the same transform logic in multiple instances.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/first-chunk-stream/-/first-chunk-stream-1.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/first-chunk-stream/-/first-chunk-stream-1.0.0.tgz",
    "hash": "",
    "integrity": "sha1-Wb+1DNkF9g18OUzT2ayqtOatk04=",
    "registry": "npm",
    "packageName": "first-chunk-stream",
    "cacheIntegrity": "sha512-ArRi5axuv66gEsyl3UuK80CzW7t56hem73YGNYxNWTGNKFJUadSb9Gu9SHijYEUi8ulQMf1bJomYNwSCPHhtTQ== sha1-Wb+1DNkF9g18OUzT2ayqtOatk04="
  },
  "registry": "npm",
  "hash": "02b462e5ac6ebfaea012cca5dd4b8af340b35bbb79ea17a6ef7606358c4d59318d28525469d49bf46bbd4878a3604522f2e95031fd5b2689983704823c786d4d"
}