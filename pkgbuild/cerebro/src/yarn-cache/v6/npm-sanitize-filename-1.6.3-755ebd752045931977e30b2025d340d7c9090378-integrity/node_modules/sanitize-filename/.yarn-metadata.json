{
  "manifest": {
    "name": "sanitize-filename",
    "version": "1.6.3",
    "description": "Sanitize a string for use as a filename",
    "keywords": [
      "file",
      "name",
      "filename",
      "sanitize",
      "validate",
      "escape"
    ],
    "license": "WTFPL OR ISC",
    "author": {
      "name": "Parsha Pourkhomami"
    },
    "main": "index.js",
    "types": "index.d.ts",
    "repository": {
      "type": "git",
      "url": "git@github.com:parshap/node-sanitize-filename.git"
    },
    "scripts": {
      "test": "tape test.js",
      "test-browser": "airtap --local --open -- test.js",
      "test-browser-sauce": "airtap -- test.js"
    },
    "dependencies": {
      "truncate-utf8-bytes": "^1.0.0"
    },
    "devDependencies": {
      "airtap": "^2.0.3",
      "browserify": "^14.0.0",
      "concat-stream": "^1.5.1",
      "mktemp": "^0.4.0",
      "tape": "^4.2.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sanitize-filename-1.6.3-755ebd752045931977e30b2025d340d7c9090378-integrity/node_modules/sanitize-filename/package.json",
    "contributors": [
      {
        "name": "Parsha Pourkhomami",
        "email": "parshap@gmail.com"
      },
      {
        "name": "Joel Mukuthu",
        "email": "joelmukuthu@gmail.com"
      }
    ],
    "readmeFilename": "README.md",
    "readme": "# sanitize-filename [![build status](https://secure.travis-ci.org/parshap/node-sanitize-filename.svg?branch=master)](http://travis-ci.org/parshap/node-sanitize-filename)\n\nSanitize a string to be safe for use as a filename by removing directory\npaths and invalid characters.\n\n## Install\n\n[npm: *sanitize-filename*](https://www.npmjs.com/package/sanitize-filename)\n\n```\nnpm install sanitize-filename\n```\n\n## Example\n\n```js\nvar sanitize = require(\"sanitize-filename\");\n\n// Some string that may be unsafe or invalid as a filename\nvar UNSAFE_USER_INPUT = \"~/.\\u0000ssh/authorized_keys\";\n\n// Sanitize the string to be safe for use as a filename.\nvar filename = sanitize(UNSAFE_USER_INPUT);\n// -> \"~.sshauthorized_keys\"\n```\n\n## Details\n\n*sanitize-filename* removes the following:\n\n * [Control characters][] (`0x00`–`0x1f` and `0x80`–`0x9f`)\n * [Reserved characters][] (`/`, `?`, `<`, `>`, `\\`, `:`, `*`, `|`, and\n   `\"`)\n * Unix reserved filenames (`.` and `..`)\n * Trailing periods and spaces ([for Windows][windows trailing])\n * Windows reserved filenames (`CON`, `PRN`, `AUX`, `NUL`, `COM1`,\n   `COM2`, `COM3`, `COM4`, `COM5`, `COM6`, `COM7`, `COM8`, `COM9`,\n   `LPT1`, `LPT2`, `LPT3`, `LPT4`, `LPT5`, `LPT6`, `LPT7`, `LPT8`, and\n   `LPT9`)\n\n[control characters]: https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n[reserved characters]: https://kb.acronis.com/content/39790\n[windows trailing]: https://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx#Naming_Conventions\n\nThe resulting string is truncated to [255 bytes in length][255]. The\nstring will not contain any directory paths and will be safe to use as a\nfilename.\n\n[255]: http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n\n### Empty String `\"\"` Result\n\nAn empty string `\"\"` can be returned. For example:\n\n```js\nvar sanitize = require(\"sanitize-filename\");\nsanitize(\"..\")\n// -> \"\"\n\n```\n\n### Non-unique Filenames\n\nTwo different inputs can return the same value. For example:\n\n```js\nvar sanitize = require(\"sanitize-filename\");\nsanitize(\"file?\")\n// -> \"file\"\nsanitize (\"*file*\")\n// -> \"file\"\n```\n\n### File Systems\n\nSanitized filenames will be safe for use on modern Windows, OS X, and\nUnix file systems (`NTFS`, `ext`, etc.).\n\n[`FAT` 8.3 filenames][8.3] are not supported.\n\n[8.3]: https://en.wikipedia.org/wiki/8.3_filename\n\n#### Test Your File System\n\nThe test program will use various strings (including the [Big List of\nNaughty Strings][blns]) to create files in the working directory. Run\n`npm test` to run tests against your file system.\n\n[blns]: https://github.com/minimaxir/big-list-of-naughty-strings\n\n## API\n\n### `sanitize(inputString, [options])`\n\nSanitize `inputString` by removing or replacing invalid characters.\n\nOptions:\n\n * `options.replacement`: *optional, string/function, default: `\"\"`*. If passed\n as a string, it's used as the replacement for invalid characters. If passed as\n a function, the function will be called with the invalid characters and it's\n return value will be used as the replacement. See [`String.prototype.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n for more info.\n",
    "licenseText": "This project is licensed under the [WTFPL][] and [ISC][] licenses.\n\n[WTFPL]: https://en.wikipedia.org/wiki/WTFPL\n[ISC]: https://opensource.org/licenses/ISC\n\n## WTFPL\n\nDO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\nVersion 2, December 2004\n\nCopyright (C) 2004 Sam Hocevar \\<sam@hocevar.net>\n\nEveryone is permitted to copy and distribute verbatim or modified copies\nof this license document, and changing it is allowed as long as the name\nis changed.\n\nDO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR\nCOPYING, DISTRIBUTION AND MODIFICATION\n\n0. You just DO WHAT THE FUCK YOU WANT TO.\n\n## ISC\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sanitize-filename/-/sanitize-filename-1.6.3.tgz#755ebd752045931977e30b2025d340d7c9090378",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sanitize-filename/-/sanitize-filename-1.6.3.tgz",
    "hash": "755ebd752045931977e30b2025d340d7c9090378",
    "integrity": "sha512-y/52Mcy7aw3gRm7IrcGDFx/bCk4AhRh2eI9luHOQM86nZsqwiRkkq2GekHXBBD+SmPidc8i2PqtYZl+pWJ8Oeg==",
    "registry": "npm",
    "packageName": "sanitize-filename",
    "cacheIntegrity": "sha512-y/52Mcy7aw3gRm7IrcGDFx/bCk4AhRh2eI9luHOQM86nZsqwiRkkq2GekHXBBD+SmPidc8i2PqtYZl+pWJ8Oeg== sha1-dV69dSBFkxl34wsgJdNA18kJA3g="
  },
  "registry": "npm",
  "hash": "755ebd752045931977e30b2025d340d7c9090378"
}