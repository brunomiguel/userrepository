{
  "manifest": {
    "name": "remark-rehype",
    "version": "10.1.0",
    "description": "remark plugin that turns markdown into HTML to support rehype",
    "license": "MIT",
    "keywords": [
      "unified",
      "remark",
      "rehype",
      "remark-plugin",
      "rehype-plugin",
      "plugin",
      "html",
      "hast",
      "mdast",
      "markdown"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/remarkjs/remark-rehype.git"
    },
    "bugs": {
      "url": "https://github.com/remarkjs/remark-rehype/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "John Otander",
        "email": "johnotander@gmail.com",
        "url": "https://johno.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "mdast-util-to-hast": "^12.1.0",
      "unified": "^10.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "rehype-stringify": "^9.0.0",
      "remark-cli": "^10.0.0",
      "remark-parse": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "remark-stringify": "^10.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.47.0"
    },
    "scripts": {
      "build": "rimraf \"lib/**/*.d.ts\" \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --conditions development test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
      "test-types": "dtslint types",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "#": "needed `any`s",
      "ignoreFiles": [
        "lib/index.d.ts",
        "lib/index.js",
        "index.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-remark-rehype-10.1.0-32dc99d2034c27ecaf2e0150d22a6dcccd9a6279-integrity/node_modules/remark-rehype/package.json",
    "readmeFilename": "readme.md",
    "readme": "# remark-rehype\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n**[remark][]** plugin that turns markdown into HTML to support **[rehype][]**.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`unified().use(remarkRehype[, destination][, options])`](#unifieduseremarkrehype-destination-options)\n    *   [`defaultHandlers`](#defaulthandlers)\n    *   [`all`](#all)\n    *   [`one`](#one)\n*   [Examples](#examples)\n    *   [Example: supporting HTML in markdown naïvely](#example-supporting-html-in-markdown-naïvely)\n    *   [Example: supporting HTML in markdown properly](#example-supporting-html-in-markdown-properly)\n    *   [Example: footnotes in languages other than English](#example-footnotes-in-languages-other-than-english)\n*   [Syntax tree](#syntax-tree)\n*   [CSS](#css)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [unified][] ([remark][]) plugin that switches from remark (the\nmarkdown ecosystem) to rehype (the HTML ecosystem).\nIt does this by transforming the current markdown (mdast) syntax tree into an\nHTML (hast) syntax tree.\nremark plugins deal with mdast and rehype plugins deal with hast, so plugins\nused after `remark-rehype` have to be rehype plugins.\n\nThe reason that there are different ecosystems for markdown and HTML is that\nturning markdown into HTML is, while frequently needed, not the only purpose of\nmarkdown.\nChecking (linting) and formatting markdown are also common use cases for\nremark and markdown.\nThere are several aspects of markdown that do not translate 1-to-1 to HTML.\nIn some cases markdown contains more information than HTML: for example, there\nare several ways to add a link in markdown (as in, autolinks: `<https://url>`,\nresource links: `[label](url)`, and reference links with definitions:\n`[label][id]` and `[id]: url`).\nIn other cases HTML contains more information than markdown: there are many\ntags, which add new meaning (semantics), available in HTML that aren’t available\nin markdown.\nIf there was just one AST, it would be quite hard to perform the tasks that\nseveral remark and rehype plugins currently do.\n\n**unified** is a project that transforms content with abstract syntax trees\n(ASTs).\n**remark** adds support for markdown to unified.\n**rehype** adds support for HTML to unified.\n**mdast** is the markdown AST that remark uses.\n**hast** is the markdown AST that rehype uses.\nThis is a remark plugin that transforms mdast into hast to support rehype.\n\n## When should I use this?\n\nThis project is useful when you want to turn markdown to HTML.\nIt opens up a whole new ecosystem with tons of plugins to do all kinds of\nthings.\nYou can [minify HTML][rehype-minify], [format HTML][rehype-format],\n[make sure it’s safe][rehype-sanitize], [highlight code][rehype-highlight],\n[add metadata][rehype-meta], and a lot more.\n\nA different plugin, [`rehype-raw`][rehype-raw], adds support for raw HTML\nwritten inside markdown.\nThis is a separate plugin because supporting HTML inside markdown is a heavy\ntask and not always needed.\nTo use both together, you also have to configure `remark-rehype` with\n`allowDangerousHtml: true`.\n\nThe rehype plugin [`rehype-remark`][rehype-remark] does the inverse of this\nplugin.\nIt turns HTML into markdown.\n\n## Install\n\nThis package is [ESM only](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install remark-rehype\n```\n\nIn Deno with [Skypack][]:\n\n```js\nimport remarkRehype from 'https://cdn.skypack.dev/remark-rehype@10?dts'\n```\n\nIn browsers with [Skypack][]:\n\n```html\n<script type=\"module\">\n  import remarkRehype from 'https://cdn.skypack.dev/remark-rehype@10?min'\n</script>\n```\n\n## Use\n\nSay we have the following file `example.md`:\n\n```markdown\n# Hello world\n\n> Block quote.\n\nSome _emphasis_, **importance**, and `code`.\n```\n\nAnd our module `example.js` looks as follows:\n\n```js\nimport {read} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeDocument from 'rehype-document'\nimport rehypeFormat from 'rehype-format'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkRehype)\n    .use(rehypeDocument)\n    .use(rehypeFormat)\n    .use(rehypeStringify)\n    .process(await read('example.md'))\n\n  console.error(reporter(file))\n  console.log(String(file))\n}\n```\n\nNow, running `node example.js` yields:\n\n```txt\nexample.md: no issues found\n```\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Hello world</h1>\n    <blockquote>\n      <p>Block quote.</p>\n    </blockquote>\n    <p>Some <em>emphasis</em>, <strong>importance</strong>, and <code>code</code>.</p>\n  </body>\n</html>\n```\n\n## API\n\nThis package exports `defaultHandlers`, `all`, and `one`.\nThe default export is `remarkRehype`.\n\n### `unified().use(remarkRehype[, destination][, options])`\n\nPlugin that turns markdown into HTML to support rehype.\n\n##### `destination`\n\nIf a [`Unified`][processor] destination processor is given, that processor runs\nwith a new HTML (hast) tree (bridge-mode).\nAs the given processor runs with a hast tree, and rehype plugins support\nhast, that means rehype plugins can be used with the given processor.\nThe hast tree is discarded in the end.\n\n> 👉 **Note**: It’s highly unlikely that you want to do this.\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.allowDangerousHtml`\n\nWhether to persist raw HTML in markdown in the hast tree (`boolean`, default:\n`false`).\nRaw HTML is available in the markdown (mdast) tree as [`html`][mdast-html] nodes\nand can be embedded in the HTML (hast) tree as semistandard `raw` nodes.\nMost rehype plugins ignore `raw` nodes, but two notable plugins don’t:\n\n*   [`rehype-stringify`][rehype-stringify] also has an option\n    `allowDangerousHtml` which will output the raw HTML.\n    This is typically discouraged as noted by the option name but is useful if\n    you completely trust who authors the markdown\n*   [`rehype-raw`][rehype-raw] can handle the raw embedded HTML strings in hast\n    trees by parsing them into standard hast nodes (element, text, etc).\n    This is a heavy task as it needs a full HTML parser, but it is the only way\n    to support untrusted content\n\n###### `options.clobberPrefix`\n\nPrefix to use before the `id` attribute on footnotes to prevent it from\n*clobbering* (`string`, default: `'user-content-'`).\nDOM clobbering is this:\n\n```html\n<p id=x></p>\n<script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n```\n\nElements by their ID are made available by browsers on the `window` object,\nwhich is a security risk.\nUsing a prefix solves this problem.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark so they’re not supported in remark\n> by default.\n> They are supported by GitHub, so they can be enabled by using the remark\n> plugin [`remark-gfm`][remark-gfm].\n\n###### `options.footnoteLabel`\n\nLabel to use for the footnotes section (`string`, default: `'Footnotes'`).\nAffects screen readers.\nChange it when the markdown is not in English.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark so they’re not supported in remark\n> by default.\n> They are supported by GitHub, so they can be enabled by using the remark\n> plugin [`remark-gfm`][remark-gfm].\n\n###### `options.footnoteBackLabel`\n\nLabel to use from backreferences back to their footnote call (`string`, default:\n`'Back to content'`).\nAffects screen readers.\nChange it when the markdown is not in English.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark so they’re not supported in remark\n> by default.\n> They are supported by GitHub, so they can be enabled by using the remark\n> plugin [`remark-gfm`][remark-gfm].\n\n###### `options.handlers`\n\nThis option is a bit advanced as it requires knowledge of ASTs, so we defer\nto the documentation available in [`mdast-util-to-hast`][mdast-util-to-hast].\n\n###### `options.passThrough`\n\nThis option is a bit advanced as it requires knowledge of ASTs, so we defer\nto the documentation available in [`mdast-util-to-hast`][mdast-util-to-hast].\n\n###### `options.unknownHandler`\n\nThis option is a bit advanced as it requires knowledge of ASTs, so we defer\nto the documentation available in [`mdast-util-to-hast`][mdast-util-to-hast].\n\n### `defaultHandlers`\n\nThe `defaultHandlers` export from [`mdast-util-to-hast`][mdast-util-to-hast],\nuseful when passing in your own handlers.\n\n### `all`\n\nThe `all` export from [`mdast-util-to-hast`][mdast-util-to-hast],\nuseful when passing in your own handlers.\n\n### `one`\n\nThe `one` export from [`mdast-util-to-hast`][mdast-util-to-hast],\nuseful when passing in your own handlers.\n\n## Examples\n\n### Example: supporting HTML in markdown naïvely\n\nIf you completely trust the authors of the input markdown and want to allow them\nto write HTML inside markdown, you can pass `allowDangerousHtml` to this plugin\n(`remark-rehype`) and `rehype-stringify`:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkRehype, {allowDangerousHtml: true})\n    .use(rehypeStringify, {allowDangerousHtml: true})\n    .process('It <i>works</i>! <img onerror=\"alert(1)\">')\n\n  console.log(String(file))\n}\n```\n\nRunning that code yields:\n\n```html\n<p>It <i>works</i>! <img onerror=\"alert(1)\"></p>\n```\n\n> ⚠️ **Danger**: Observe that the XSS attack through the `onerror` attribute\n> is still present.\n\n### Example: supporting HTML in markdown properly\n\nIf you do not trust the authors of the input markdown, or if you want to make\nsure that rehype plugins can see HTML embedded in markdown, use\n[`rehype-raw`][rehype-raw].\nThe following example passes `allowDangerousHtml` to this plugin\n(`remark-rehype`), then turns the raw embedded HTML into proper HTML nodes\n(`rehype-raw`), and finally sanitizes the HTML by only allowing safe things\n(`rehype-sanitize`):\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeRaw from 'rehype-raw'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkRehype, {allowDangerousHtml: true})\n    .use(rehypeRaw)\n    .use(rehypeSanitize)\n    .use(rehypeStringify)\n    .process('It <i>works</i>! <img onerror=\"alert(1)\">')\n\n  console.log(String(file))\n}\n```\n\nRunning that code yields:\n\n```html\n<p>It <i>works</i>! <img></p>\n```\n\n> 👉 **Note**: Observe that the XSS attack through the `onerror` attribute\n> is no longer present.\n\n### Example: footnotes in languages other than English\n\nIf you know that the markdown is authored in a language other than English,\nand you’re using `remark-gfm` to match how GitHub renders markdown, and you know\nthat footnotes are (or can?) be used, you should translate the labels associated\nwith them.\n\nLet’s first set the stage:\n\n```js\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGfm from 'remark-gfm'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeStringify)\n    .process('Hallo[^1]\\n\\n[^1]: Wereld!')\n\n  console.log(String(file))\n}\n```\n\nRunning that code yields:\n\n```html\n<p>Hallo<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>Wereld! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n```\n\nThis is a mix of English and Dutch that screen readers can’t handle nicely.\nLet’s say our program does know that the markdown is in Dutch.\nIn that case, it’s important to translate and define the labels relating to\nfootnotes so that screen reader users can properly pronounce the page:\n\n```diff\n@@ -10,7 +10,7 @@ async function main() {\n   const file = await unified()\n     .use(remarkParse)\n     .use(remarkGfm)\n-    .use(remarkRehype)\n+    .use(remarkRehype, {footnoteLabel: 'Voetnoten', footnoteBackLabel: 'Terug'})\n     .use(rehypeStringify)\n     .process('Hallo[^1]\\n\\n[^1]: Wereld!')\n```\n\nRunning the code with the above patch applied, yields:\n\n```diff\n@@ -1,8 +1,8 @@\n <p>Hallo<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n-<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n+<section data-footnotes class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Voetnoten</h2>\n <ol>\n <li id=\"user-content-fn-1\">\n-<p>Wereld! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n+<p>Wereld! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Terug\">↩</a></p>\n </li>\n </ol>\n </section>\n```\n\n## Syntax tree\n\nA frequent problem arises when having to turn one syntax tree into another.\nAs the original tree (in this case, mdast for markdown) is in some cases\nlimited compared to the destination (in this case, hast for HTML) tree,\nis it possible to provide more info in the original to define what the\nresult will be in the destination?\nThis is possible by defining data on mdast nodes, which this plugin will read\nas instructions on what hast nodes to create.\n\nAn example is `remark-math`, which defines semistandard math nodes that this\nplugin doesn’t understand.\nTo solve this, `remark-math` defines instructions on mdast nodes that this\nplugin does understand because they define a certain hast structure.\n\nAs these instructions are somewhat advanced in that they requires knowledge of\nASTs, we defer to the documentation available in the low level utility we use:\n[`mdast-util-to-hast`][mdast-util-to-hast].\n\n## CSS\n\nAssuming you know how to use (semantic) HTML and CSS, then it should generally\nbe straight forward to style the HTML produced by this plugin.\nWith CSS, you can get creative and style the results as you please.\n\nSome semistandard features, notably [`remark-gfm`][remark-gfm]s tasklists and\nfootnotes, generate HTML that be unintuitive, as it matches exactly what GitHub\nproduces for their website.\nThere is a project, [`sindresorhus/github-markdown-css`][github-markdown-css],\nthat exposes the stylesheet that GitHub uses for rendered markdown, which might\neither be inspirational for more complex features, or can be used as-is to\nexactly match how GitHub styles rendered markdown.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports `Options` and `Processor` types, which specify the interfaces of the\naccepted options.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\nThis plugin works with `unified` version 6+, `remark-parse` version 3+ (used in\n`remark` version 7), and `rehype-stringify` version 3+ (used in `rehype`\nversion 5).\n\n## Security\n\nUse of `remark-rehype` can open you up to a [cross-site scripting (XSS)][xss]\nattack.\nEmbedded **[hast][]** properties (`hName`, `hProperties`, `hChildren`) in\n[mdast][], custom handlers, and the `allowDangerousHtml` option all provide\nopenings.\nUse [`rehype-sanitize`][rehype-sanitize] to make the tree safe.\n\n## Related\n\n*   [`rehype-raw`][rehype-raw]\n    — rehype plugin to parse the tree again and support `raw` nodes\n*   [`rehype-sanitize`][rehype-sanitize]\n    — rehype plugin to sanitize HTML\n*   [`rehype-remark`](https://github.com/rehypejs/rehype-remark)\n    — rehype plugin to turn HTML into markdown\n*   [`rehype-retext`](https://github.com/rehypejs/rehype-retext)\n    — rehype plugin to support retext\n*   [`remark-retext`](https://github.com/remarkjs/remark-retext)\n    — remark plugin to support retext\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/remarkjs/remark-rehype/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/remark-rehype/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark-rehype.svg\n\n[coverage]: https://codecov.io/github/remarkjs/remark-rehype\n\n[downloads-badge]: https://img.shields.io/npm/dm/remark-rehype.svg\n\n[downloads]: https://www.npmjs.com/package/remark-rehype\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/remark-rehype.svg\n\n[size]: https://bundlephobia.com/result?p=remark-rehype\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[skypack]: https://www.skypack.dev\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[processor]: https://github.com/unifiedjs/unified#processor\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[unified]: https://github.com/unifiedjs/unified\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[typescript]: https://www.typescriptlang.org\n\n[rehype-minify]: https://github.com/rehypejs/rehype-minify\n\n[rehype-format]: https://github.com/rehypejs/rehype-format\n\n[rehype-sanitize]: https://github.com/rehypejs/rehype-sanitize\n\n[rehype-highlight]: https://github.com/rehypejs/rehype-highlight\n\n[rehype-meta]: https://github.com/rehypejs/rehype-meta\n\n[rehype-raw]: https://github.com/rehypejs/rehype-raw\n\n[rehype-remark]: https://github.com/rehypejs/rehype-remark\n\n[rehype-stringify]: https://github.com/rehypejs/rehype/tree/main/packages/rehype-stringify\n\n[mdast-html]: https://github.com/syntax-tree/mdast#html\n\n[remark-gfm]: https://github.com/remarkjs/remark-gfm\n\n[mdast-util-to-hast]: https://github.com/syntax-tree/mdast-util-to-hast\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[hast]: https://github.com/syntax-tree/hast\n\n[github-markdown-css]: https://github.com/sindresorhus/github-markdown-css\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/remark-rehype/-/remark-rehype-10.1.0.tgz#32dc99d2034c27ecaf2e0150d22a6dcccd9a6279",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/remark-rehype/-/remark-rehype-10.1.0.tgz",
    "hash": "32dc99d2034c27ecaf2e0150d22a6dcccd9a6279",
    "integrity": "sha512-EFmR5zppdBp0WQeDVZ/b66CWJipB2q2VLNFMabzDSGR66Z2fQii83G5gTBbgGEnEEA0QRussvrFHxk1HWGJskw==",
    "registry": "npm",
    "packageName": "remark-rehype",
    "cacheIntegrity": "sha512-EFmR5zppdBp0WQeDVZ/b66CWJipB2q2VLNFMabzDSGR66Z2fQii83G5gTBbgGEnEEA0QRussvrFHxk1HWGJskw== sha1-MtyZ0gNMJ+yvLgFQ0iptzM2aYnk="
  },
  "registry": "npm",
  "hash": "32dc99d2034c27ecaf2e0150d22a6dcccd9a6279"
}