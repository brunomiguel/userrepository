{
  "manifest": {
    "name": "agentkeepalive",
    "version": "4.1.4",
    "description": "Missing keepalive http.Agent",
    "main": "index.js",
    "browser": "browser.js",
    "files": [
      "index.js",
      "index.d.ts",
      "browser.js",
      "lib"
    ],
    "scripts": {
      "test": "npm run lint && egg-bin test --full-trace",
      "test-local": "egg-bin test --full-trace",
      "cov": "cross-env DEBUG=agentkeepalive egg-bin cov --full-trace",
      "ci": "npm run lint && npm run cov",
      "lint": "eslint lib test index.js",
      "autod": "autod"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/node-modules/agentkeepalive.git"
    },
    "bugs": {
      "url": "https://github.com/node-modules/agentkeepalive/issues"
    },
    "keywords": [
      "http",
      "https",
      "agent",
      "keepalive",
      "agentkeepalive",
      "HttpAgent",
      "HttpsAgent"
    ],
    "dependencies": {
      "debug": "^4.1.0",
      "depd": "^1.1.2",
      "humanize-ms": "^1.2.1"
    },
    "devDependencies": {
      "autod": "^3.0.1",
      "coffee": "^5.3.0",
      "cross-env": "^6.0.3",
      "egg-bin": "^4.9.0",
      "egg-ci": "^1.10.0",
      "eslint": "^5.7.0",
      "eslint-config-egg": "^7.1.0",
      "mm": "^2.4.1",
      "pedding": "^1.1.0",
      "typescript": "^3.8.3"
    },
    "engines": {
      "node": ">= 8.0.0"
    },
    "ci": {
      "type": "github",
      "os": {
        "github": "linux"
      },
      "version": "8, 10, 12, 14"
    },
    "author": {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://fengmk2.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-agentkeepalive-4.1.4-d928028a4862cb11718e55227872e842a44c945b-integrity/node_modules/agentkeepalive/package.json",
    "readmeFilename": "README.md",
    "readme": "# agentkeepalive\n\n[![NPM version][npm-image]][npm-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/agentkeepalive.svg?style=flat\n[npm-url]: https://npmjs.org/package/agentkeepalive\n[snyk-image]: https://snyk.io/test/npm/agentkeepalive/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/agentkeepalive\n[download-image]: https://img.shields.io/npm/dm/agentkeepalive.svg?style=flat-square\n[download-url]: https://npmjs.org/package/agentkeepalive\n\nThe enhancement features `keep alive` `http.Agent`. Support `http` and `https`.\n\n## What's different from original `http.Agent`?\n\n- `keepAlive=true` by default\n- Disable Nagle's algorithm: `socket.setNoDelay(true)`\n- Add free socket timeout: avoid long time inactivity socket leak in the free-sockets queue.\n- Add active socket timeout: avoid long time inactivity socket leak in the active-sockets queue.\n- TTL for active socket.\n\n## Node.js version required\n\nSupport Node.js >= `8.0.0`\n\n## Install\n\n```bash\n$ npm install agentkeepalive --save\n```\n\n## new Agent([options])\n\n* `options` {Object} Set of configurable options to set on the agent.\n  Can have the following fields:\n  * `keepAlive` {Boolean} Keep sockets around in a pool to be used by\n    other requests in the future. Default = `true`.\n  * `keepAliveMsecs` {Number} When using the keepAlive option, specifies the initial delay\n    for TCP Keep-Alive packets. Ignored when the keepAlive option is false or undefined. Defaults to 1000.\n    Default = `1000`.  Only relevant if `keepAlive` is set to `true`.\n  * `freeSocketTimeout`: {Number} Sets the free socket to timeout\n    after `freeSocketTimeout` milliseconds of inactivity on the free socket.\n    Default is `15000`.\n    Only relevant if `keepAlive` is set to `true`.\n  * `timeout`: {Number} Sets the working socket to timeout\n    after `timeout` milliseconds of inactivity on the working socket.\n    Default is `freeSocketTimeout * 2`.\n  * `maxSockets` {Number} Maximum number of sockets to allow per\n    host. Default = `Infinity`.\n  * `maxFreeSockets` {Number} Maximum number of sockets (per host) to leave open\n    in a free state. Only relevant if `keepAlive` is set to `true`.\n    Default = `256`.\n  * `socketActiveTTL` {Number} Sets the socket active time to live, even if it's in use.\n    If not set, the behaviour keeps the same (the socket will be released only when free)\n    Default = `null`.\n\n## Usage\n\n```js\nconst http = require('http');\nconst Agent = require('agentkeepalive');\n\nconst keepaliveAgent = new Agent({\n  maxSockets: 100,\n  maxFreeSockets: 10,\n  timeout: 60000, // active socket keepalive for 60 seconds\n  freeSocketTimeout: 30000, // free socket keepalive for 30 seconds\n});\n\nconst options = {\n  host: 'cnodejs.org',\n  port: 80,\n  path: '/',\n  method: 'GET',\n  agent: keepaliveAgent,\n};\n\nconst req = http.request(options, res => {\n  console.log('STATUS: ' + res.statusCode);\n  console.log('HEADERS: ' + JSON.stringify(res.headers));\n  res.setEncoding('utf8');\n  res.on('data', function (chunk) {\n    console.log('BODY: ' + chunk);\n  });\n});\nreq.on('error', e => {\n  console.log('problem with request: ' + e.message);\n});\nreq.end();\n\nsetTimeout(() => {\n  if (keepaliveAgent.statusChanged) {\n    console.log('[%s] agent status changed: %j', Date(), keepaliveAgent.getCurrentStatus());\n  }\n}, 2000);\n\n```\n\n### `getter agent.statusChanged`\n\ncounters have change or not after last checkpoint.\n\n### `agent.getCurrentStatus()`\n\n`agent.getCurrentStatus()` will return a object to show the status of this agent:\n\n```js\n{\n  createSocketCount: 10,\n  closeSocketCount: 5,\n  timeoutSocketCount: 0,\n  requestCount: 5,\n  freeSockets: { 'localhost:57479:': 3 },\n  sockets: { 'localhost:57479:': 5 },\n  requests: {}\n}\n```\n\n### Support `https`\n\n```js\nconst https = require('https');\nconst HttpsAgent = require('agentkeepalive').HttpsAgent;\n\nconst keepaliveAgent = new HttpsAgent();\n// https://www.google.com/search?q=nodejs&sugexp=chrome,mod=12&sourceid=chrome&ie=UTF-8\nconst options = {\n  host: 'www.google.com',\n  port: 443,\n  path: '/search?q=nodejs&sugexp=chrome,mod=12&sourceid=chrome&ie=UTF-8',\n  method: 'GET',\n  agent: keepaliveAgent,\n};\n\nconst req = https.request(options, res => {\n  console.log('STATUS: ' + res.statusCode);\n  console.log('HEADERS: ' + JSON.stringify(res.headers));\n  res.setEncoding('utf8');\n  res.on('data', chunk => {\n    console.log('BODY: ' + chunk);\n  });\n});\n\nreq.on('error', e => {\n  console.log('problem with request: ' + e.message);\n});\nreq.end();\n\nsetTimeout(() => {\n  console.log('agent status: %j', keepaliveAgent.getCurrentStatus());\n}, 2000);\n```\n\n### Support `req.reusedSocket`\n\nThis agent implements the `req.reusedSocket` to determine whether a request is send through a reused socket.\n\nWhen server closes connection at unfortunate time ([keep-alive race](https://code-examples.net/en/q/28a8069)), the http client will throw a `ECONNRESET` error. Under this circumstance, `req.reusedSocket` is useful when we want to retry the request automatically.\n\n```js\nconst http = require('http');\nconst Agent = require('agentkeepalive');\nconst agent = new Agent();\n\nconst req = http\n  .get('http://localhost:3000', { agent }, (res) => {\n    // ...\n  })\n  .on('error', (err) => {\n    if (req.reusedSocket && err.code === 'ECONNRESET') {\n      // retry the request or anything else...\n    }\n  })\n```\n\nThis behavior is consistent with Node.js core. But through `agentkeepalive`, you can use this feature in older Node.js version.\n\n## [Benchmark](https://github.com/node-modules/agentkeepalive/tree/master/benchmark)\n\nrun the benchmark:\n\n```bash\ncd benchmark\nsh start.sh\n```\n\nIntel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz\n\nnode@v0.8.9\n\n50 maxSockets, 60 concurrent, 1000 requests per concurrent, 5ms delay\n\nKeep alive agent (30 seconds):\n\n```js\nTransactions:          60000 hits\nAvailability:         100.00 %\nElapsed time:          29.70 secs\nData transferred:        14.88 MB\nResponse time:            0.03 secs\nTransaction rate:      2020.20 trans/sec\nThroughput:           0.50 MB/sec\nConcurrency:           59.84\nSuccessful transactions:       60000\nFailed transactions:             0\nLongest transaction:          0.15\nShortest transaction:         0.01\n```\n\nNormal agent:\n\n```js\nTransactions:          60000 hits\nAvailability:         100.00 %\nElapsed time:          46.53 secs\nData transferred:        14.88 MB\nResponse time:            0.05 secs\nTransaction rate:      1289.49 trans/sec\nThroughput:           0.32 MB/sec\nConcurrency:           59.81\nSuccessful transactions:       60000\nFailed transactions:             0\nLongest transaction:          0.45\nShortest transaction:         0.00\n```\n\nSocket created:\n\n```bash\n[proxy.js:120000] keepalive, 50 created, 60000 requestFinished, 1200 req/socket, 0 requests, 0 sockets, 0 unusedSockets, 50 timeout\n{\" <10ms\":662,\" <15ms\":17825,\" <20ms\":20552,\" <30ms\":17646,\" <40ms\":2315,\" <50ms\":567,\" <100ms\":377,\" <150ms\":56,\" <200ms\":0,\" >=200ms+\":0}\n----------------------------------------------------------------\n[proxy.js:120000] normal   , 53866 created, 84260 requestFinished, 1.56 req/socket, 0 requests, 0 sockets\n{\" <10ms\":75,\" <15ms\":1112,\" <20ms\":10947,\" <30ms\":32130,\" <40ms\":8228,\" <50ms\":3002,\" <100ms\":4274,\" <150ms\":181,\" <200ms\":18,\" >=200ms+\":33}\n```\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License\n\nCopyright(c) node-modules and other contributors.\nCopyright(c) 2012 - 2015 fengmk2 <fengmk2@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/agentkeepalive/-/agentkeepalive-4.1.4.tgz#d928028a4862cb11718e55227872e842a44c945b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/agentkeepalive/-/agentkeepalive-4.1.4.tgz",
    "hash": "d928028a4862cb11718e55227872e842a44c945b",
    "integrity": "sha512-+V/rGa3EuU74H6wR04plBb7Ks10FbtUQgRj/FQOG7uUIEuaINI+AiqJR1k6t3SVNs7o7ZjIdus6706qqzVq8jQ==",
    "registry": "npm",
    "packageName": "agentkeepalive",
    "cacheIntegrity": "sha512-+V/rGa3EuU74H6wR04plBb7Ks10FbtUQgRj/FQOG7uUIEuaINI+AiqJR1k6t3SVNs7o7ZjIdus6706qqzVq8jQ== sha1-2SgCikhiyxFxjlUieHLoQqRMlFs="
  },
  "registry": "npm",
  "hash": "d928028a4862cb11718e55227872e842a44c945b"
}