{
  "manifest": {
    "name": "fast-sort",
    "version": "2.2.0",
    "description": "Fast and powerful array sorting. Sort by any property in any direction with easy to read syntax.",
    "main": "dist/sort.js",
    "module": "dist/sort.es.js",
    "author": {
      "name": "Stefan Novakovic",
      "email": "stefan.novakovich@gmail.com"
    },
    "contributors": [
      {
        "name": "Tony Gutierrez: https://github.com/tony-gutierrez"
      }
    ],
    "license": "MIT",
    "homepage": "https://github.com/snovakovic/fast-sort",
    "scripts": {
      "test": "TS_NODE_COMPILER_OPTIONS='{\"module\":\"commonjs\"}' mocha -r ts-node/register test/*.spec.ts",
      "test:watch": "watch 'npm run test' ./src",
      "test:integration:dist": "node test/integration/dist.test.js",
      "test:integration:npm": "node test/integration/npm.test.js",
      "build": "npm run test  && rm -rf dist && rollup -c",
      "prepublish": "npm run build && npm run test:integration:dist",
      "postpublish": "npm run test:integration:npm"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/snovakovic/fast-sort.git"
    },
    "bugs": {
      "url": "https://github.com/snovakovic/fast-sort/issues"
    },
    "keywords": [
      "sort",
      "sortBy",
      "order",
      "orderBy",
      "array sort",
      "object sort",
      "natural sort"
    ],
    "dependencies": {},
    "devDependencies": {
      "@types/chai": "^4.2.11",
      "@types/mocha": "^7.0.2",
      "@typescript-eslint/eslint-plugin": "^2.31.0",
      "@typescript-eslint/parser": "^2.31.0",
      "chai": "^4.2.0",
      "eslint": "^7.0.0",
      "eslint-config-airbnb-base": "^14.1.0",
      "eslint-plugin-import": "^2.20.2",
      "mocha": "^7.1.2",
      "rollup": "^2.8.2",
      "rollup-plugin-typescript2": "^0.27.0",
      "rollup-plugin-uglify": "^6.0.4",
      "ts-node": "^8.10.1",
      "typescript": "^3.8.3",
      "watch": "^1.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-fast-sort-2.2.0-20903763531fbcbb41c9df5ab1bf5f2cefc8476a-integrity/node_modules/fast-sort/package.json",
    "readmeFilename": "README.md",
    "readme": "# fast-sort\n\n[![Start](https://img.shields.io/github/stars/snovakovic/fast-sort?style=flat-square)](https://github.com/snovakovic/fast-sort/stargazers)\n[![Total Downloads](https://img.shields.io/npm/dt/fast-sort.svg)](https://www.npmjs.com/package/fast-sort)\n[![Known Vulnerabilities](https://snyk.io/test/github/snovakovic/fast-sort/badge.svg)](https://snyk.io/test/github/snovakovic/fast-sort)\n[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://opensource.org/)\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)\n\n[![NPM Package](https://nodei.co/npm/fast-sort.png)](https://www.npmjs.com/package/fast-sort)\n\nFast easy to use and flexible sorting with TypeScript support.\nFor speed comparison of `fast-sort` vs other popular sort libraries check [benchmark](#benchmark) section.\nFor list of all available features check [highlights](#highlights) section.\n\n## Quick examples\n\n```javascript\n  import sort from 'fast-sort';\n\n  // Sort flat arrays\n  sort([1,4,2]).asc(); // => [1, 2, 4]\n  sort([1, 4, 2]).desc(); // => [4, 2, 1]\n\n  // Sort users (array of objects) by firstName in descending order\n  sort(users).desc(u => u.firstName);\n\n  // Sort users in ascending order by firstName and lastName\n  sort(users).asc([\n    u => u.firstName,\n    u => u.lastName\n  ]);\n\n  // Sort users ascending by firstName and descending by age\n  sort(users).by([\n    { asc: u => u.firstName },\n    { desc: u => u.age }\n  ]);\n```\n\n## Highlights\n\n  * Sort flat arrays\n  * Sort array of objects by one or more properties\n  * Sort in multiple directions\n  * [Natural sort](#natural-sorting--language-sensitive-sorting) support\n  * Support for [custom sort](#custom-sorting) instances\n  * Easy to read syntax\n  * [Faster](#benchmark) than other popular sort alternatives\n  * Undefined and null values are always sorted to bottom (with default comparer)\n  * TypeScript support\n  * Small footprint with 0 dependencies (~ 750 bytes gzip)\n  * Compatible with any JS environment as Node, Web, etc..\n\nUnder the hood sort is using [native JavaScript sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\nUsage of native sort implies that sorting is not necessarily [stable](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability) and it also implies that input array is modified(sorted) same as it would be when applying native sort.\n\n## More examples\n\n  * `asc` / `desc` sorters. Both asc and desc sorters have exactly the same API.\n\n```javascript\n  import sort from 'fast-sort';\n\n  // Sort flat arrays\n  sort([1,4,2]).asc(); // => [1, 2, 4]\n\n  // Sort array of objects by single object property\n  sort(users).asc(u => u.firstName);\n\n  // For root object properties we can use string shorthand (same as example above)\n  sort(users).asc('firstName');\n\n  // Sort by nested object properties\n  // NOTE: for nested object properties we can't use string shorthand ('address.city' is not valid syntax).\n  sort(users).asc(u => u.address.city);\n\n  // Sort by multiple properties\n  sort(users).asc([\n    u => u.age,\n    u => u.firstName,\n  ]);\n\n  // Same as above but using string shorthand\n  sort(users).asc(['age', 'firstName']);\n\n  // Sort based on computed property\n  // For example sort repositories by total number of issues (summary of open and closed issues)\n  sort(repositories).desc(r => r.openIssues + r.closedIssues);\n```\n\n  * `by` sorter can do anything that `asc` / `desc` sorters can with addition to some more advance\n  sort handling. With `by` sorter we can sort by multiple properties in different directions and\n  we can override default `comparer` for e.g natural sort purposes.\n\n```javascript\n  import sort from 'fast-sort';\n\n  // Sort users by firstName in ascending order and age in descending order\n  sort(users).by([\n    { asc: u => u.firstName },\n    { desc: u => u.age },\n  ]);\n\n  // Same as with asc/desc sorters we can use string shorthand for root object properties\n  sort(users).by([{ asc: 'firstName' }, { desc: 'age' }]);\n\n  // Sort users by city using custom comparer\n  sort(users).by({\n    asc: u => u.address.city,\n    comparer: (a, b) => a.localeCompare(b),\n  });\n\n  // Sort users ascending by age using default comparer and then by lastName using language sensitive comparer\n  sort(users).by([\n    { asc: 'age' },\n    {\n      asc: 'lastName',\n      comparer: new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare,\n    },\n  ]);\n```\n\n  * Fore even more examples check unit tests `test/sort.spec.ts` in the github repo.\n\n### Natural sorting / Language sensitive sorting\n\nBy default `fast-sort` is not doing language sensitive sorting of strings.\ne.g `'image-11.jpg'` will be sorted before `'image-2.jpg'` (in ascending sorting).\nWe can provide custom [Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) comparer to fast-sort for language sensitive sorting of strings.\nKeep in mind that natural sort is slower then default sorting so recommendation is to use it\nonly when needed.\n\n```javascript\n  import sort from 'fast-sort';\n\n  const testArr = ['image-2.jpg', 'image-11.jpg', 'image-3.jpg'];\n\n  // By default fast-sort is not doing natural sort\n  sort(testArr).desc(); // => ['image-3.jpg', 'image-2.jpg', 'image-11.jpg']\n\n  // We can use `by` sort to override default comparer with the one that is doing language sensitive comparison\n  sort(testArr).by({\n    desc: true,\n    comparer: new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare,\n  }); // => ['image-11.jpg', 'image-3.jpg', 'image-2.jpg']\n\n\n  // Or we can create new sort instance with language sensitive comparer.\n  // Recommended if used in multiple places\n  const naturalSort = sort.createNewInstance({\n    comparer: new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare,\n  });\n\n  naturalSort(testArr).asc(); // => ['image-2.jpg', 'image-3.jpg', 'image-11.jpg']\n  naturalSort(testArr).desc(); // => ['image-11.jpg', 'image-3.jpg', 'image-2.jpg']\n```\n\n### Custom sorting\n\nFast sort can be tailored to fit any sorting need or use case by:\n  * creating custom sorting instances\n  * overriding default comparer in `by` sorter\n  * custom handling in provided callback function\n  * combination of any from above\n\nFor example we will sort `tags` by \"custom\" tag importance (e.g `vip` tag is of greater importance then `captain` tag).\n\n```javascript\n  import sort from 'fast-sort';\n\n  const tagsImportance = { vip: 3, influencer: 2, captain: 1 }; // Some domain specific logic\n  const tags = ['influencer', 'unknown', 'vip', 'captain'];\n\n  // Sort tags in ascending order by custom tags values\n  sort(tags).asc(tag => tagImportance[tag] || 0); // => ['unknown', 'captain', 'influencer', 'vip'];\n  sort(tags).desc(tag => tagImportance[tag] || 0); // => ['vip', 'influencer', 'captain', 'unknown'];\n\n  // We can also create specialized tagSorter instance and reuse it across the application\n  const tagSorter = sort.createNewInstance({\n    comparer: (a, b) => (tagImportance[a] || 0) - (tagImportance[b] || 0)\n  });\n\n  tagSorter(tags).asc(); // => ['unknown', 'captain', 'influencer', 'vip'];\n  tagSorter(tags).desc(); // => ['vip', 'influencer', 'captain', 'unknown'];\n\n  // Default sorter will sort tags by string comparison and not \"tag\" importance\n  sort(tags).asc(); // => ['captain', 'influencer', 'unknown' 'vip']\n```\n\n### Things to know\n\nWhen using custom comparers as e.g [Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) it's up to you to ensure those features are available in all the platforms you intend to support. (You can check browser compatibility for Intl.Collator by following link above). Same applies for any other custom comparer.\n\n```javascript\n  // Sorting values that are not sortable will return same value back\n  sort(null).asc(); // => null\n  sort(33).desc(); // => 33\n\n  // By default sort will mutate input array (by sorting it),\n  const arr = [1, 4, 2];\n  const sortedArr = sort(arr).asc();\n  console.log(sortedArr); // => [1, 2, 4]\n  console.log(arr); // => [1, 2, 4]\n  console.log(sortedArr === arr), // => true\n\n  // TIP: to prevent mutating of input array you can clone it before passing to sort as\n  const arr = [1, 4, 2];\n  const sortedArr = sort([...arr]).asc();\n  console.log(arr); // => [1, 4, 2]\n  console.log(sortedArr); // => [1, 2, 4]\n  console.log(sortedArr === arr), // => false\n\n  // As stated in highlights by default fast-sort sorts null and undefined values to the\n  // bottom no matter if sorting is in asc or decs order.\n  const addresses = [{ city: 'Split' }, { city: undefined }, { city: 'Zagreb'}];\n  sort(addresses).asc(a => a.city); // => Split, Zagreb, undefined\n  sort(addresses).desc(a => a.city); // => Zagreb, Split, undefined\n\n  // If above is not intended behaviour you can always create new sort instance that will sort null\n  // or undefined values the way you intended it to be. For example of exactly that you can check unit test\n  // \"Should create sort instance that sorts nil value to the top in desc order\" in 'test/sort.spec.ts'\n```\n\n### Usage with ts-node\n\nIn a nodeJS environment, when fast-sort is being imported with ts-node, you might see an error along the lines of:\n\n```\nTypeError {\n  message: 'fast_sort_1.default is not a function',\n}\n```\n\nIn this case just add this to your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true\n  }\n}\n```\n\n### Fast sort versions\n\n#### `v2` version\n\n  There is no breaking changes in API between `v2` and `v1` version of library.\n  Some import files have been removed so if you haven't import it using default import\n  you might need to update imports. For more info check [v2 release notes](https://github.com/snovakovic/fast-sort/releases/tag/v2.0.0)\n\n#### Features by version\n\n```javascript\n // Sorting in multiple directions is available from [v1.5.0]\n sort(users).by([{ asc: 'age' }, { desc: 'firstName' }]);\n\n // Overriding of default comparer in `by` sorter is available from [v1.6.0]\n  sort(testArr).by({\n    desc: true,\n    comparer: new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare,\n  });\n\n  // Creating new custom sort instances is available from [v2.0.0]\n  const naturalSort = sort.createNewInstance({\n    comparer: new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }).compare,\n  });\n\n  // TypeScript support is available from [v2.0.0]\n```\n\n## Benchmark\n\nFive different benchmarks have been created to get better insight of how fast-sort perform under different scenarios.\nEach benchmark is run with different array sizes raging from small 100 items to large 100 000 items.\n\nEvery run of benchmark outputs different results but the results are constantly showing better scores compared to similar popular sorting libraries.\n\n#### Benchmark scores\n\nBenchmark has been run on:\n\n  * 16 GB Ram\n  * Intel® Core™ i5-4570 CPU @ 3.20GHz × 4\n  * Ubuntu 16.04\n  * Node 8.9.1\n\n![benchmark results](https://github.com/snovakovic/fast-sort/raw/master/benchmark.jpg)\n\n#### Running benchmark\n\nTo run benchmark on your PC follow steps from below\n\n1) git clone https://github.com/snovakovic/fast-sort.git\n2) cd fast-sort/benchmark\n3) npm install\n4) npm start\n\nIn case you notice any irregularities in benchmark or you want to add sort library to benchmark score\nplease open issue [here](https://github.com/snovakovic/fast-sort)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Stefan Novaković\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-sort/-/fast-sort-2.2.0.tgz#20903763531fbcbb41c9df5ab1bf5f2cefc8476a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-sort/-/fast-sort-2.2.0.tgz",
    "hash": "20903763531fbcbb41c9df5ab1bf5f2cefc8476a",
    "integrity": "sha512-W7zqnn2zsYoQA87FKmYtgOsbJohOrh7XrtZrCVHN5XZKqTBTv5UG+rSS3+iWbg/nepRQUOu+wnas8BwtK8kiCg==",
    "registry": "npm",
    "packageName": "fast-sort",
    "cacheIntegrity": "sha512-W7zqnn2zsYoQA87FKmYtgOsbJohOrh7XrtZrCVHN5XZKqTBTv5UG+rSS3+iWbg/nepRQUOu+wnas8BwtK8kiCg== sha1-IJA3Y1MfvLtByd9asb9fLO/IR2o="
  },
  "registry": "npm",
  "hash": "20903763531fbcbb41c9df5ab1bf5f2cefc8476a"
}