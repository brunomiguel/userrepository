{
  "manifest": {
    "name": "ytpl",
    "version": "2.3.0",
    "description": "Simple package to resolve YouTube playlists - no strings attached.",
    "keywords": [
      "youtube",
      "playlist",
      "yt",
      "video",
      "videos",
      "api",
      "pl",
      "scrape",
      "pagination",
      "promise"
    ],
    "homepage": "https://github.com/TimeForANinja/node-ytpl#readme",
    "bugs": {
      "url": "https://github.com/TimeForANinja/node-ytpl/issues"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/TimeForANinja/node-ytpl.git"
    },
    "license": "MIT",
    "author": {
      "name": "Tobias Kutscha",
      "url": "https://github.com/TimeForANinja"
    },
    "main": "./lib/main.js",
    "types": "./typings/index.d.ts",
    "files": [
      "lib",
      "typings"
    ],
    "scripts": {
      "lint": "eslint ./",
      "lint:fix": "eslint --fix ./",
      "lint:typings": "tslint typings/index.d.ts",
      "lint:typings:fix": "tslint --fix typings/index.d.ts",
      "mocha": "mocha -- -t 16000 test/*-test.js",
      "mocha:coverage": "mocha -- -t 16000 test/*-test.js --exclude test/e2e-test.js",
      "nyc": "nyc --reporter=lcov npm run-script mocha",
      "nyc:coverage": "nyc --reporter=lcov npm run-script mocha:coverage",
      "test": "npm run-script nyc",
      "test:coverage": "npm run-script nyc:coverage && codecov"
    },
    "dependencies": {
      "miniget": "^4.2.2"
    },
    "devDependencies": {
      "assert-diff": "^3.0.1",
      "codecov": "^3.8.1",
      "dtslint": "^4.0.8",
      "eslint": "^7.23.0",
      "mocha": "^8.3.2",
      "nock": "^13.0.11",
      "nyc": "^15.1.0",
      "tslint": "^6.1.3",
      "typescript": "^4.2.3"
    },
    "engines": {
      "node": ">=8"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-ytpl-2.3.0-74633b6e582e22ff03e409dfb65d200c1a4ca0d2-integrity/node_modules/ytpl/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-ytpl\n[![NPM version](https://img.shields.io/npm/v/ytpl.svg?maxAge=3600)](https://www.npmjs.com/package/ytpl)\n[![NPM downloads](https://img.shields.io/npm/dt/ytpl.svg?maxAge=3600)](https://www.npmjs.com/package/ytpl)\n[![codecov](https://codecov.io/gh/timeforaninja/node-ytpl/branch/master/graph/badge.svg)](https://codecov.io/gh/timeforaninja/node-ytpl)\n[![Known Vulnerabilities](https://snyk.io/test/github/timeforaninja/node-ytpl/badge.svg)](https://snyk.io/test/github/timeforaninja/node-ytpl)\n[![Discord](https://img.shields.io/discord/484464227067887645.svg)](https://discord.gg/V3vSCs7)\n\nSimple js only package to resolve YouTube Playlists.\nDoes not require any login or Google-API-Key.\n\n# Support\nYou can contact us for support on our [chat server](https://discord.gg/V3vSCs7)\n\n# Usage\n\n```js\nconst ytpl = require('ytpl');\n\nconst playlist = await ytpl('UU_aEa8K-EOJ3D6gOs7HcyNg');\n```\n\n\n# API\n### ytpl(id, [options])\n\nAttempts to resolve the given playlist id\n\n* `id`\n    * id of the yt-playlist\n    * or a playlist url\n    * or a user url (resolves to uploaded playlist)\n    * or a channel url (resolves to uploaded playlist)\n* `options`\n    * object with options\n    * possible settings:\n    * gl[String] -> 2-Digit Code of a Country, defaults to `US` - Allows for localisation of the request\n    * hl[String] -> 2-Digit Code for a Language, defaults to `en` - Allows for localisation of the request\n    * limit[Number] -> limits the pulled items, defaults to 100, set to Infinity to get the whole playlist - numbers <1 result in the default being used\n    * pages[Number] -> limits the pulled pages, pages contain 100 items, set to Infinity to get the whole playlist - numbers <1 result in the default limit being used - overwrites limit\n    * requestOptions[Object] -> Additional parameters to passed to [miniget](https://github.com/fent/node-miniget), which is used to do the https requests\n\n* returns a Promise\n* [Example response](https://github.com/timeforaninja/node-ytpl/blob/master/example/example_output.txt)\n\n### ytpl.continueReq(continuationData)\nContinues a previous request by pulling yet another page.  \nThe previous request had to be done using `pages` limitation.\n\n#### Usage\n```js\nconst ytpl = require('ytpl');\n\nconst firstResultBatch = await ytpl('UU_aEa8K-EOJ3D6gOs7HcyNg', { pages: 1 });\nconst secondResultBatch = ytpl.continueReq(firstResultBatch.continuation);\nconst thirdResultBatch = ytpl.continueReq(secondResultBatch.continuation);\n\n// You can now use the .items property of all result batches e.g.:\nconsole.log(firstResultBatch.items);\nconsole.log(secondResultBatch.items);\nconsole.log(thirdResultBatch.items);\n```\n\n* returns a Promise resolving into `{ continuation, items }`\n\n### ytpl.validateID(string)\n\nReturns true if able to parse out a (formally) valid playlist ID.\n\n### ytpl.getPlaylistID(string)\n\nReturns a playlist ID from a YouTube URL. Can be called with the playlist ID directly, in which case it just resolves.\n\n* returns a promise resolving into a string containing the id\n\n\n# Related / Works well with\n\n* [node-ytdl-core](https://github.com/fent/node-ytdl-core)\n* [node-ytsr](https://github.com/TimeForANinja/node-ytsr)\n\n\n# Install\n\n    npm install --save ytpl\n\n\n# License\nMIT\n",
    "licenseText": "Copyright (C) 2017 by Tobias Kutscha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ytpl/-/ytpl-2.3.0.tgz#74633b6e582e22ff03e409dfb65d200c1a4ca0d2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ytpl/-/ytpl-2.3.0.tgz",
    "hash": "74633b6e582e22ff03e409dfb65d200c1a4ca0d2",
    "integrity": "sha512-Cfw2rxq3PFK6qgWr2Z8gsRefVahEzbn9XEuiJldqdXHE6GhO7kTfEvbZKdfXing1SmgW635uJ/UL2g8r0fvu2Q==",
    "registry": "npm",
    "packageName": "ytpl",
    "cacheIntegrity": "sha512-Cfw2rxq3PFK6qgWr2Z8gsRefVahEzbn9XEuiJldqdXHE6GhO7kTfEvbZKdfXing1SmgW635uJ/UL2g8r0fvu2Q== sha1-dGM7blguIv8D5Anftl0gDBpMoNI="
  },
  "registry": "npm",
  "hash": "74633b6e582e22ff03e409dfb65d200c1a4ca0d2"
}