{
  "manifest": {
    "name": "sockjs-client",
    "description": "SockJS-client is a browser JavaScript library that provides a WebSocket-like object.",
    "version": "1.5.0",
    "author": {
      "name": "Bryce Kahle"
    },
    "jsdelivr": "dist/sockjs.min.js",
    "browser": {
      "./lib/transport/driver/websocket.js": "./lib/transport/browser/websocket.js",
      "eventsource": "./lib/transport/browser/eventsource.js",
      "./lib/transport/driver/xhr.js": "./lib/transport/browser/abstract-xhr.js",
      "crypto": "./lib/utils/browser-crypto.js",
      "events": "./lib/event/emitter.js"
    },
    "bugs": {
      "url": "https://github.com/sockjs/sockjs-client/issues"
    },
    "contributors": [
      {
        "name": "Bryce Kahle",
        "email": "bkahle@gmail.com"
      },
      {
        "name": "Marek Majkowski",
        "email": "deadbeef@popcount.org"
      }
    ],
    "dependencies": {
      "debug": "^3.2.6",
      "eventsource": "^1.0.7",
      "faye-websocket": "^0.11.3",
      "inherits": "^2.0.4",
      "json3": "^3.3.3",
      "url-parse": "^1.4.7"
    },
    "devDependencies": {
      "browserify": "^16.5.1",
      "envify": "^4.0.0",
      "eslint": "^7.6.0",
      "expect.js": "~0.3.1",
      "gulp": "^4.0.2",
      "gulp-header": "^2.0.9",
      "gulp-rename": "^2.0.0",
      "gulp-replace": "^1.0.0",
      "gulp-sourcemaps": "^2.6.5",
      "gulp-uglify": "^3.0.2",
      "karma": "^5.1.1",
      "karma-browserify": "^7.0.0",
      "karma-browserstack-launcher": "^1.6.0",
      "karma-chrome-launcher": "^3.1.0",
      "karma-mocha": "^2.0.1",
      "mocha": "^8.1.0",
      "proxyquire": "^2.1.3",
      "pump": "^3.0.0",
      "serve-static": "^1.14.1",
      "sockjs": "^0.3.21",
      "vinyl-buffer": "~1.0.0",
      "vinyl-source-stream": "^2.0.0"
    },
    "homepage": "http://sockjs.org/",
    "keywords": [
      "websockets",
      "websocket"
    ],
    "license": "MIT",
    "main": "./lib/entry.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/sockjs/sockjs-client.git"
    },
    "scripts": {
      "test": "mocha tests/node.js",
      "test:bundle": "gulp testbundle",
      "test:browser_local": "npm run test:bundle && npx karma start --browsers Chrome",
      "test:browser_remote": "npm run test:bundle && npx karma start",
      "gulp": "gulp",
      "lint": "eslint .",
      "version": "gulp release && git add -A dist lib/version.js Changelog.md",
      "postversion": "npm publish",
      "postpublish": "git push origin --all && git push origin --tags"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sockjs-client-1.5.0-2f8ff5d4b659e0d092f7aba0b7c386bd2aa20add-integrity/node_modules/sockjs-client/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# SockJS-client\n\n[![npm version](https://img.shields.io/npm/v/sockjs-client.svg?style=flat-square)](https://www.npmjs.com/package/sockjs-client)[![Build Status](https://img.shields.io/travis/sockjs/sockjs-client/master.svg?style=flat-square)](https://travis-ci.org/sockjs/sockjs-client)[![Dependencies](https://img.shields.io/librariesio/release/npm/sockjs-client.svg?style=flat-square)](https://libraries.io/npm/sockjs-client)[![Chat](https://img.shields.io/badge/Chat-gitter.im-blue.svg?style=flat-square)](https://gitter.im/sockjs/sockjs-client)[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?style=flat-square)](code-of-conduct.md)\n[![BrowserStack Status](https://automate.browserstack.com/badge.svg?badge_key=N3V0cStKM3RtUy9Bb2l2cHFhMVdobTZnUitBZ1lLcUkwYnl2TWgyMHppQT0tLWxncU5UeTdLb0Rqc1VQQTI5SklRelE9PQ==--596ccf9d3cd2f462f1043ee6803a9405e00446ac)](https://automate.browserstack.com/public-build/N3V0cStKM3RtUy9Bb2l2cHFhMVdobTZnUitBZ1lLcUkwYnl2TWgyMHppQT0tLWxncU5UeTdLb0Rqc1VQQTI5SklRelE9PQ==--596ccf9d3cd2f462f1043ee6803a9405e00446ac)\n\n<a href=\"https://www.netlify.com\">\n  <img src=\"https://www.netlify.com/img/global/badges/netlify-color-accent.svg\"/>\n</a>\n\n# SockJS for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of SockJS and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-sockjs-client?utm_source=npm-sockjs-client&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Summary\n\nSockJS is a browser JavaScript library that provides a WebSocket-like\nobject. SockJS gives you a coherent, cross-browser, Javascript API\nwhich creates a low latency, full duplex, cross-domain communication\nchannel between the browser and the web server.\n\nUnder the hood SockJS tries to use native WebSockets first. If that\nfails it can use a variety of browser-specific transport protocols and\npresents them through WebSocket-like abstractions.\n\nSockJS is intended to work for all modern browsers and in environments\nwhich don't support the WebSocket protocol -- for example, behind restrictive\ncorporate proxies.\n\nSockJS-client does require a server counterpart:\n\n * [SockJS-node](https://github.com/sockjs/sockjs-node) is a SockJS\n   server for Node.js.\n\n\nPhilosophy:\n\n * The API should follow\n   [HTML5 Websockets API](https://www.w3.org/TR/websockets/) as\n   closely as possible.\n * All the transports must support cross domain connections out of the\n   box. It's possible and recommended to host a SockJS server on a\n   different server than your main web site.\n * There is support for at least one streaming protocol for every\n   major browser.\n * Streaming transports should work cross-domain and\n   should support cookies (for cookie-based sticky sessions).\n * Polling transports are used as a fallback for old browsers and\n   hosts behind restrictive proxies.\n * Connection establishment should be fast and lightweight.\n * No Flash inside (no need to open port 843 - which doesn't work\n   through proxies, no need to host 'crossdomain.xml', no need\n   [to wait for 3 seconds](https://github.com/gimite/web-socket-js/issues/49)\n   in order to detect problems)\n\n\nSubscribe to\n[SockJS mailing list](https://groups.google.com/forum/#!forum/sockjs) for\ndiscussions and support.\n\n# SockJS family\n\n  * [SockJS-client](https://github.com/sockjs/sockjs-client) JavaScript client library\n  * [SockJS-node](https://github.com/sockjs/sockjs-node) Node.js server\n  * [SockJS-erlang](https://github.com/sockjs/sockjs-erlang) Erlang server\n  * [SockJS-cyclone](https://github.com/flaviogrossi/sockjs-cyclone) Python/Cyclone/Twisted server\n  * [SockJS-tornado](https://github.com/MrJoes/sockjs-tornado) Python/Tornado server\n  * [SockJS-twisted](https://github.com/DesertBus/sockjs-twisted/) Python/Twisted server\n  * [SockJS-aiohttp](https://github.com/aio-libs/sockjs/) Python/Aiohttp server\n  * [Spring Framework](https://projects.spring.io/spring-framework) Java [client](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#websocket-fallback-sockjs-client) & server\n  * [vert.x](https://github.com/vert-x/vert.x) Java/vert.x server\n  * [Xitrum](https://xitrum-framework.github.io/) Scala server\n  * [Atmosphere Framework](https://github.com/Atmosphere/atmosphere) JavaEE Server, Play Framework, Netty, Vert.x\n  * [Actix SockJS](https://github.com/fafhrd91/actix-sockjs) Rust Server, Actix Framework\n\nWork in progress:\n\n  * [SockJS-ruby](https://github.com/nyarly/sockjs-ruby)\n  * [SockJS-netty](https://github.com/cgbystrom/sockjs-netty)\n  * [SockJS-gevent](https://github.com/ksava/sockjs-gevent) ([SockJS-gevent fork](https://github.com/njoyce/sockjs-gevent))\n  * [pyramid-SockJS](https://github.com/fafhrd91/pyramid_sockjs)\n  * [wildcloud-websockets](https://github.com/wildcloud/wildcloud-websockets)\n  * [wai-SockJS](https://github.com/Palmik/wai-sockjs)\n  * [SockJS-perl](https://github.com/vti/sockjs-perl)\n  * [SockJS-go](https://github.com/igm/sockjs-go/)\n  * [syp.biz.SockJS.NET](https://github.com/sypbiz/SockJS.NET) - .NET port of the SockJS client\n\n# Getting Started\n\nSockJS mimics the [WebSockets API](https://www.w3.org/TR/websockets/),\nbut instead of `WebSocket` there is a `SockJS` Javascript object.\n\nFirst, you need to load the SockJS JavaScript library. For example, you can\nput that in your HTML head:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js\"></script>\n```\n\nAfter the script is loaded you can establish a connection with the\nSockJS server. Here's a simple example:\n\n```javascript\n var sock = new SockJS('https://mydomain.com/my_prefix');\n sock.onopen = function() {\n     console.log('open');\n     sock.send('test');\n };\n\n sock.onmessage = function(e) {\n     console.log('message', e.data);\n     sock.close();\n };\n\n sock.onclose = function() {\n     console.log('close');\n };\n\n```\n\n# SockJS-client API\n\n## SockJS class\n\nSimilar to the 'WebSocket' API, the 'SockJS' constructor takes one, or more arguments:\n\n```javascript\nvar sockjs = new SockJS(url, _reserved, options);\n```\n\n`url` may contain a query string, if one is desired.\n\nWhere `options` is a hash which can contain:\n\n *  **server (string)**\n\n    String to append to url for actual data connection. Defaults to a random 4 digit number.\n\n *  **transports (string OR array of strings)**\n\n    Sometimes it is useful to disable some fallback transports. This\n    option allows you to supply a list transports that may be used by\n    SockJS. By default all available transports will be used.\n\n *  **sessionId (number OR function)**\n\n    Both client and server use session identifiers to distinguish connections.\n    If you specify this option as a number, SockJS will use its random string\n    generator function to generate session ids that are N-character long\n    (where N corresponds to the number specified by **sessionId**).\n    When you specify this option as a function, the function must return a\n    randomly generated string. Every time SockJS needs to generate a session\n    id it will call this function and use the returned string directly.\n    If you don't specify this option, the default is to use the default random\n    string generator to generate 8-character long session ids.\n\n  * **timeout (number)**\n\n    Specify a minimum timeout in milliseconds to use for the transport connections.\n    By default this is dynamically calculated based on the measured RTT and\n    the number of expected round trips. This setting will establish a minimum,\n    but if the calculated timeout is higher, that will be used.\n\nAlthough the 'SockJS' object tries to emulate the 'WebSocket'\nbehaviour, it's impossible to support all of its features. An\nimportant SockJS limitation is the fact that you're not allowed to\nopen more than one SockJS connection to a single domain at a time.\nThis limitation is caused by an in-browser limit of outgoing\nconnections - usually [browsers don't allow opening more than two\noutgoing connections to a single domain](https://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser). A single SockJS session\nrequires those two connections - one for downloading data, the other for\nsending messages.  Opening a second SockJS session at the same time\nwould most likely block, and can result in both sessions timing out.\n\nOpening more than one SockJS connection at a time is generally a\nbad practice. If you absolutely must do it, you can use\nmultiple subdomains, using a different subdomain for every\nSockJS connection.\n\n# Supported transports, by browser (html served from http:// or https://)\n\n_Browser_       | _Websockets_     | _Streaming_ | _Polling_\n----------------|------------------|-------------|-------------------\nIE 6, 7         | no               | no          | jsonp-polling\nIE 8, 9 (cookies=no) |    no       | xdr-streaming &dagger; | xdr-polling &dagger;\nIE 8, 9 (cookies=yes)|    no       | iframe-htmlfile | iframe-xhr-polling\nIE 10           | rfc6455          | xhr-streaming   | xhr-polling\nChrome 6-13     | hixie-76         | xhr-streaming   | xhr-polling\nChrome 14+      | hybi-10 / rfc6455| xhr-streaming   | xhr-polling\nFirefox <10     | no &Dagger;      | xhr-streaming   | xhr-polling\nFirefox 10+     | hybi-10 / rfc6455| xhr-streaming   | xhr-polling\nSafari 5.x      | hixie-76         | xhr-streaming   | xhr-polling\nSafari 6+       | rfc6455          | xhr-streaming   | xhr-polling\nOpera 10.70+    | no &Dagger;      | iframe-eventsource | iframe-xhr-polling\nOpera 12.10+    | rfc6455          | xhr-streaming | xhr-polling\nKonqueror       | no               | no          | jsonp-polling\n\n\n * **&dagger;**: IE 8+ supports [XDomainRequest][^9], which is\n    essentially a modified AJAX/XHR that can do requests across\n    domains. But unfortunately it doesn't send any cookies, which\n    makes it inappropriate for deployments when the load balancer uses\n    JSESSIONID cookie to do sticky sessions.\n\n * **&Dagger;**: Firefox 4.0 and Opera 11.00 and shipped with disabled\n     Websockets \"hixie-76\". They can still be enabled by manually\n     changing a browser setting.\n\n# Supported transports, by browser (html served from file://)\n\nSometimes you may want to serve your html from \"file://\" address - for\ndevelopment or if you're using PhoneGap or similar technologies. But\ndue to the Cross Origin Policy files served from \"file://\" have no\nOrigin, and that means some of SockJS transports won't work. For this\nreason the SockJS transport table is different than usually, major\ndifferences are:\n\n_Browser_       | _Websockets_  | _Streaming_        | _Polling_\n----------------|---------------|--------------------|-------------------\nIE 8, 9         | same as above | iframe-htmlfile    | iframe-xhr-polling\nOther           | same as above | iframe-eventsource | iframe-xhr-polling\n\n# Supported transports, by name\n\n_Transport_          | _References_\n---------------------|---------------\nwebsocket (rfc6455)  | [rfc 6455][^10]\nwebsocket (hixie-76) | [draft-hixie-thewebsocketprotocol-76][^1]\nwebsocket (hybi-10)  | [draft-ietf-hybi-thewebsocketprotocol-10][^2]\nxhr-streaming        | Transport using [Cross domain XHR][^5] [streaming][^7] capability (readyState=3).\nxdr-streaming        | Transport using [XDomainRequest][^9] [streaming][^7] capability (readyState=3).\neventsource          | [EventSource/Server-sent events][^4].\niframe-eventsource   | [EventSource/Server-sent events][^4] used from an [iframe via postMessage][^3].\nhtmlfile             | [HtmlFile][^8].\niframe-htmlfile      | [HtmlFile][^8] used from an [iframe via postMessage][^3].\nxhr-polling          | Long-polling using [cross domain XHR][^5].\nxdr-polling          | Long-polling using [XDomainRequest][^9].\niframe-xhr-polling   | Long-polling using normal AJAX from an [iframe via postMessage][^3].\njsonp-polling        | Slow and old fashioned [JSONP polling][^6]. This transport will show \"busy indicator\" (aka: \"spinning wheel\") when sending data.\n\n\n[^1]: https://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\n[^2]: https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10\n[^3]: https://developer.mozilla.org/en/DOM/window.postMessage\n[^4]: https://html.spec.whatwg.org/multipage/comms.html#server-sent-events\n[^5]: https://secure.wikimedia.org/wikipedia/en/wiki/XMLHttpRequest#Cross-domain_requests\n[^6]: https://secure.wikimedia.org/wikipedia/en/wiki/JSONP\n[^7]: http://www.debugtheweb.com/test/teststreaming.aspx\n[^8]: http://cometdaily.com/2007/11/18/ie-activexhtmlfile-transport-part-ii/\n[^9]: https://blogs.msdn.microsoft.com/ieinternals/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds/\n[^10]: https://www.rfc-editor.org/rfc/rfc6455.txt\n\n\n# Connecting to SockJS without the client\n\nAlthough the main point of SockJS is to enable browser-to-server\nconnectivity, it is possible to connect to SockJS from an external\napplication. Any SockJS server complying with 0.3 protocol does\nsupport a raw WebSocket url. The raw WebSocket url for the test server\nlooks like:\n\n * ws://localhost:8081/echo/websocket\n\nYou can connect any WebSocket RFC 6455 compliant WebSocket client to\nthis url. This can be a command line client, external application,\nthird party code or even a browser (though I don't know why you would\nwant to do so).\n\n\n# Deployment\n\nYou should use a version of sockjs-client\nthat supports the protocol used by your server. For example:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js\"></script>\n```\n\n\nFor server-side deployment tricks, especially about load balancing and\nsession stickiness, take a look at the\n[SockJS-node readme](https://github.com/sockjs/sockjs-node#readme).\n\n\n# Development and testing\n\nSockJS-client needs [node.js](https://nodejs.org/) for running a test\nserver and JavaScript minification. If you want to work on\nSockJS-client source code, checkout the git repo and follow these\nsteps:\n\n    cd sockjs-client\n    npm install\n\nTo generate JavaScript, run:\n\n    gulp browserify\n\nTo generate minified JavaScript, run:\n\n    gulp browserify:min\n\nBoth commands output into the `build` directory.\n\n## Testing\n\nAutomated testing provided by:\n\n<a href=\"https://browserstack.com\"><img src=\"img/Browserstack-logo@2x.png\" height=\"50\"></a>\n\nOnce you've compiled the SockJS-client you may want to check if your changes\npass all the tests.\n\n    npm run test:browser_local\n\nThis will start [karma](https://karma-runner.github.io) and a test support server.\n\n# Browser Quirks\n\nThere are various browser quirks which we don't intend to address:\n\n * Pressing ESC in Firefox, before Firefox 20, closes the SockJS connection. For a workaround\n   and discussion see [#18](https://github.com/sockjs/sockjs-client/issues/18).\n * `jsonp-polling` transport will show a \"spinning wheel\" (aka. \"busy indicator\")\n   when sending data.\n * You can't open more than one SockJS connection to one domain at the\n   same time due to [the browser's limit of concurrent connections](https://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser)\n   (this limit is not counting native WebSocket connections).\n * Although SockJS is trying to escape any strange Unicode characters\n   (even invalid ones - [like surrogates \\xD800-\\xDBFF](https://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates) or [\\xFFFE and \\xFFFF](https://en.wikipedia.org/wiki/Unicode#Character_General_Category))\n   it's advisable to use only valid characters. Using invalid\n   characters is a bit slower, and may not work with SockJS servers\n   that have proper Unicode support.\n * Having a global function called `onmessage` or such is probably a\n   bad idea, as it could be called by the built-in `postMessage` API.\n * From SockJS' point of view there is nothing special about\n   SSL/HTTPS. Connecting between unencrypted and encrypted sites\n   should work just fine.\n * Although SockJS does its best to support both prefix and cookie based\n   sticky sessions, the latter may not work well cross-domain with\n   browsers that don't accept third-party cookies by default (Safari).\n   In order to get around this make sure you're connecting to SockJS\n   from the same parent domain as the main site. For example\n   'sockjs.a.com' is able to set cookies if you're connecting from\n   'www.a.com' or 'a.com'.\n * Trying to connect from secure \"https://\" to insecure \"http://\" is\n   not a good idea. The other way around should be fine.\n * Long polling is known to cause problems on Heroku, but a\n   [workaround for SockJS is available](https://github.com/sockjs/sockjs-node/issues/57#issuecomment-5242187).\n * SockJS [websocket transport is more stable over SSL](https://github.com/sockjs/sockjs-client/issues/94). If\n   you're a serious SockJS user then consider using SSL\n   ([more info](https://www.ietf.org/mail-archive/web/hybi/current/msg01605.html)).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2011-2018 The sockjs-client Authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sockjs-client/-/sockjs-client-1.5.0.tgz#2f8ff5d4b659e0d092f7aba0b7c386bd2aa20add",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sockjs-client/-/sockjs-client-1.5.0.tgz",
    "hash": "2f8ff5d4b659e0d092f7aba0b7c386bd2aa20add",
    "integrity": "sha512-8Dt3BDi4FYNrCFGTL/HtwVzkARrENdwOUf1ZoW/9p3M8lZdFT35jVdrHza+qgxuG9H3/shR4cuX/X9umUrjP8Q==",
    "registry": "npm",
    "packageName": "sockjs-client",
    "cacheIntegrity": "sha512-8Dt3BDi4FYNrCFGTL/HtwVzkARrENdwOUf1ZoW/9p3M8lZdFT35jVdrHza+qgxuG9H3/shR4cuX/X9umUrjP8Q== sha1-L4/11LZZ4NCS96ugt8OGvSqiCt0="
  },
  "registry": "npm",
  "hash": "2f8ff5d4b659e0d092f7aba0b7c386bd2aa20add"
}