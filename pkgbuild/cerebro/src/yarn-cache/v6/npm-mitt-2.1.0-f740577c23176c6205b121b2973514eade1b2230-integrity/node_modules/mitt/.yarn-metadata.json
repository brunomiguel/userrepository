{
  "manifest": {
    "name": "mitt",
    "version": "2.1.0",
    "description": "Tiny 200b functional Event Emitter / pubsub.",
    "jsnext:main": "dist/mitt.es.js",
    "source": "src/index.ts",
    "module": "dist/mitt.es.js",
    "esmodules": "dist/mitt.modern.js",
    "main": "dist/mitt.js",
    "umd:main": "dist/mitt.umd.js",
    "typings": "index.d.ts",
    "scripts": {
      "test": "npm-run-all --silent typecheck lint mocha test-types",
      "mocha": "mocha test",
      "test-types": "tsc test/test-types-compilation.ts --noEmit",
      "lint": "eslint src test --ext ts --ext js",
      "typecheck": "tsc --noEmit",
      "bundle": "microbundle",
      "build": "npm-run-all --silent clean -p bundle -s docs",
      "clean": "rimraf dist",
      "docs": "documentation readme src/index.ts --section API -q --parse-extension ts",
      "release": "npm run -s build -s && npm t && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/developit/mitt.git"
    },
    "keywords": [
      "events",
      "eventemitter",
      "emitter",
      "pubsub"
    ],
    "homepage": "https://github.com/developit/mitt",
    "authors": [
      "Jason Miller <jason@developit.ca>"
    ],
    "license": "MIT",
    "files": [
      "src",
      "dist",
      "index.d.ts"
    ],
    "mocha": {
      "extension": [
        "ts"
      ],
      "require": [
        "ts-node/register",
        "esm"
      ],
      "spec": [
        "test/*_test.ts"
      ]
    },
    "eslintConfig": {
      "extends": [
        "developit",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "sourceType": "module"
      },
      "env": {
        "browser": true,
        "mocha": true,
        "jest": false,
        "es6": true
      },
      "globals": {
        "expect": true
      },
      "rules": {
        "semi": [
          2,
          "always"
        ],
        "jest/valid-expect": 0,
        "@typescript-eslint/no-explicit-any": 0,
        "@typescript-eslint/explicit-function-return-type": 0,
        "@typescript-eslint/explicit-module-boundary-types": 0,
        "@typescript-eslint/no-empty-function": 0
      }
    },
    "eslintIgnore": [
      "dist",
      "index.d.ts"
    ],
    "devDependencies": {
      "@types/chai": "^4.2.11",
      "@types/mocha": "^7.0.2",
      "@types/sinon": "^9.0.4",
      "@types/sinon-chai": "^3.2.4",
      "@typescript-eslint/eslint-plugin": "^3.0.1",
      "@typescript-eslint/parser": "^3.0.1",
      "chai": "^4.2.0",
      "documentation": "^13.0.0",
      "eslint": "^7.1.0",
      "eslint-config-developit": "^1.2.0",
      "esm": "^3.2.25",
      "microbundle": "^0.12.3",
      "mocha": "^8.0.1",
      "npm-run-all": "^4.1.5",
      "rimraf": "^3.0.2",
      "sinon": "^9.0.2",
      "sinon-chai": "^3.5.0",
      "ts-node": "^8.10.2",
      "typescript": "^3.9.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-mitt-2.1.0-f740577c23176c6205b121b2973514eade1b2230-integrity/node_modules/mitt/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/BqsX9NT.png\" width=\"300\" height=\"300\" alt=\"mitt\">\n  <br>\n  <a href=\"https://www.npmjs.org/package/mitt\"><img src=\"https://img.shields.io/npm/v/mitt.svg\" alt=\"npm\"></a>\n  <img src=\"https://github.com/developit/mitt/workflows/CI/badge.svg\" alt=\"build status\">\n  <a href=\"https://unpkg.com/mitt/dist/mitt.js\"><img src=\"https://img.badgesize.io/https://unpkg.com/mitt/dist/mitt.js?compression=gzip\" alt=\"gzip size\"></a>\n</p>\n\n# Mitt\n\n> Tiny 200b functional event emitter / pubsub.\n\n-   **Microscopic:** weighs less than 200 bytes gzipped\n-   **Useful:** a wildcard `\"*\"` event type listens to all events\n-   **Familiar:** same names & ideas as [Node's EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter)\n-   **Functional:** methods don't rely on `this`\n-   **Great Name:** somehow [mitt](https://npm.im/mitt) wasn't taken\n\nMitt was made for the browser, but works in any JavaScript runtime. It has no dependencies and supports IE9+.\n\n## Table of Contents\n\n-   [Install](#install)\n-   [Usage](#usage)\n-   [Examples & Demos](#examples--demos)\n-   [API](#api)\n-   [Contribute](#contribute)\n-   [License](#license)\n\n## Install\n\nThis project uses [node](http://nodejs.org) and [npm](https://npmjs.com). Go check them out if you don't have them locally installed.\n\n```sh\n$ npm install --save mitt\n```\n\nThen with a module bundler like [rollup](http://rollupjs.org/) or [webpack](https://webpack.js.org/), use as you would anything else:\n\n```javascript\n// using ES6 modules\nimport mitt from 'mitt'\n\n// using CommonJS modules\nvar mitt = require('mitt')\n```\n\nThe [UMD](https://github.com/umdjs/umd) build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/mitt/dist/mitt.umd.js\"></script>\n```\n\nYou can find the library on `window.mitt`.\n\n## Usage\n\n```js\nimport mitt from 'mitt'\n\nconst emitter = mitt()\n\n// listen to an event\nemitter.on('foo', e => console.log('foo', e) )\n\n// listen to all events\nemitter.on('*', (type, e) => console.log(type, e) )\n\n// fire an event\nemitter.emit('foo', { a: 'b' })\n\n// clearing all events\nemitter.all.clear()\n\n// working with handler references:\nfunction onFoo() {}\nemitter.on('foo', onFoo)   // listen\nemitter.off('foo', onFoo)  // unlisten\n```\n\n### Typescript\n\n```ts\nimport mitt from 'mitt';\nconst emitter: mitt.Emitter = mitt();\n```\n\n## Examples & Demos\n\n<a href=\"http://codepen.io/developit/pen/rjMEwW?editors=0110\">\n  <b>Preact + Mitt Codepen Demo</b>\n  <br>\n  <img src=\"https://i.imgur.com/CjBgOfJ.png\" width=\"278\" alt=\"preact + mitt preview\">\n</a>\n\n* * *\n\n## API\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n#### Table of Contents\n\n-   [mitt](#mitt)\n-   [all](#all)\n-   [on](#on)\n    -   [Parameters](#parameters)\n-   [off](#off)\n    -   [Parameters](#parameters-1)\n-   [emit](#emit)\n    -   [Parameters](#parameters-2)\n\n### mitt\n\nMitt: Tiny (~200b) functional event emitter / pubsub.\n\nReturns **Mitt** \n\n### all\n\nA Map of event names to registered handler functions.\n\n### on\n\nRegister an event handler for the given type.\n\n#### Parameters\n\n-   `type` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [symbol](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol))** Type of event to listen for, or `\"*\"` for all events\n-   `handler` **[Function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function)** Function to call in response to given event\n\n### off\n\nRemove an event handler for the given type.\n\n#### Parameters\n\n-   `type` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [symbol](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol))** Type of event to unregister `handler` from, or `\"*\"`\n-   `handler` **[Function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function)** Handler function to remove\n\n### emit\n\nInvoke all handlers for the given type.\nIf present, `\"*\"` handlers are invoked after type-matched handlers.\n\nNote: Manually firing \"\\*\" handlers is not supported.\n\n#### Parameters\n\n-   `type` **([string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) \\| [symbol](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol))** The event type to invoke\n-   `evt` **Any?** Any value (object is recommended and powerful), passed to each handler\n\n## Contribute\n\nFirst off, thanks for taking the time to contribute!\nNow, take a moment to be sure your contributions make sense to everyone else.\n\n### Reporting Issues\n\nFound a problem? Want a new feature? First of all see if your issue or idea has [already been reported](../../issues).\nIf don't, just open a [new clear and descriptive issue](../../issues/new).\n\n### Submitting pull requests\n\nPull requests are the greatest contributions, so be sure they are focused in scope, and do avoid unrelated commits.\n\n-   Fork it!\n-   Clone your fork: `git clone https://github.com/<your-username>/mitt`\n-   Navigate to the newly cloned directory: `cd mitt`\n-   Create a new branch for the new feature: `git checkout -b my-new-feature`\n-   Install the tools necessary for development: `npm install`\n-   Make your changes.\n-   Commit your changes: `git commit -am 'Add some feature'`\n-   Push to the branch: `git push origin my-new-feature`\n-   Submit a pull request with full remarks documenting your changes.\n\n## License\n\n[MIT License](https://opensource.org/licenses/MIT) Â© [Jason Miller](https://jasonformat.com/)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mitt/-/mitt-2.1.0.tgz#f740577c23176c6205b121b2973514eade1b2230",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mitt/-/mitt-2.1.0.tgz",
    "hash": "f740577c23176c6205b121b2973514eade1b2230",
    "integrity": "sha512-ILj2TpLiysu2wkBbWjAmww7TkZb65aiQO+DkVdUTBpBXq+MHYiETENkKFMtsJZX1Lf4pe4QOrTSjIfUwN5lRdg==",
    "registry": "npm",
    "packageName": "mitt",
    "cacheIntegrity": "sha512-ILj2TpLiysu2wkBbWjAmww7TkZb65aiQO+DkVdUTBpBXq+MHYiETENkKFMtsJZX1Lf4pe4QOrTSjIfUwN5lRdg== sha1-90BXfCMXbGIFsSGylzUU6t4bIjA="
  },
  "registry": "npm",
  "hash": "f740577c23176c6205b121b2973514eade1b2230"
}