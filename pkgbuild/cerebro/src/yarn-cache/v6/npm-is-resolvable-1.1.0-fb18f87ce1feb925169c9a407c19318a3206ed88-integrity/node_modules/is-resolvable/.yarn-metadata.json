{
  "manifest": {
    "name": "is-resolvable",
    "version": "1.1.0",
    "description": "Check if a module ID is resolvable with require()",
    "repository": {
      "type": "git",
      "url": "https://github.com/shinnn/is-resolvable.git"
    },
    "author": {
      "name": "Shinnosuke Watanabe",
      "url": "https://github.com/shinnn"
    },
    "scripts": {
      "pretest": "eslint --fix --format=codeframe index.js test.js",
      "test": "node --throw-deprecation --track-heap-objects test.js",
      "coverage": "istanbul cover --print=both test.js"
    },
    "license": "ISC",
    "files": [
      "index.js"
    ],
    "keywords": [
      "file",
      "path",
      "resolve",
      "resolvable",
      "check",
      "module"
    ],
    "devDependencies": {
      "@shinnn/eslint-config-node": "^5.0.0",
      "eslint": "^4.16.0",
      "istanbul": "^0.4.5",
      "tape": "^4.8.0"
    },
    "eslintConfig": {
      "extends": "@shinnn/node",
      "rules": {
        "no-var": "off",
        "prefer-template": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-is-resolvable-1.1.0-fb18f87ce1feb925169c9a407c19318a3206ed88-integrity/node_modules/is-resolvable/package.json",
    "readmeFilename": "README.md",
    "readme": "# is-resolvable\n\n[![npm version](https://img.shields.io/npm/v/is-resolvable.svg)](https://www.npmjs.com/package/is-resolvable)\n[![Build Status](https://travis-ci.org/shinnn/is-resolvable.svg?branch=master)](https://travis-ci.org/shinnn/is-resolvable)\n[![Build status](https://ci.appveyor.com/api/projects/status/ww1cdpignehlasbs?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/is-resolvable)\n[![Coverage Status](https://img.shields.io/coveralls/shinnn/is-resolvable.svg)](https://coveralls.io/r/shinnn/is-resolvable)\n\nA [Node.js](https://nodejs.org/) module to check if a given module ID is resolvable with [`require()`](https://nodejs.org/api/globals.html#globals_require)\n\n```javascript\nconst isResolvable = require('is-resolvable');\n\nisResolvable('fs'); //=> true\nisResolvable('path'); //=> true\n\n// When ./index.js exists\nisResolvable('./index.js') //=> true\nisResolvable('./index') //=> true\nisResolvable('.') //=> true\n```\n\n## Installation\n\n[Use](https://docs.npmjs.com/cli/install) [npm](https://docs.npmjs.com/getting-started/what-is-npm).\n\n```\nnpm install is-resolvable\n```\n\n## API\n\n```javascript\nconst isResolvable = require('is-resolvable');\n```\n\n### isResolvable(*moduleId* [, *options*])\n\n*moduleId*: `string` (module ID)  \n*options*: `Object` ([`require.resolve`](https://nodejs.org/api/modules.html#modules_require_resolve_request_options) options)  \nReturn: `boolean`\n\nIt returns `true` if `require()` can load a file form a given module ID, otherwise `false`.\n\n```javascript\nconst isResolvable = require('is-resolvable');\n\n// When ./foo.json exists\nisResolvable('./foo.json'); //=> true\nisResolvable('./foo'); //=> true\n\nisResolvable('./foo.js'); //=> false\n\n// When `eslint` module is installed but `jshint` isn't\nisResolvable('eslint'); //=> true\nisResolvable('jshint'); //=> false\n\n// When `lodash` module is installed\nisResolvable('lodash/isObject'); //=> true\nisResolvable('lodash/fp/reject.js'); //=> true\n```\n\nThe second argument accepts an options object for `require.resolve()`.\n\n```javascript\n// When ./bar/baz.js exists\n\nisResolvable('./baz.js'); //=> false\nisResolvable('./baz.js', {paths: ['bar']}); //=> true\n```\n\n## License\n\n[ISC License](./LICENSE) Â© 2018 Shinnosuke Watanabe\n",
    "licenseText": "ISC License (ISC)\nCopyright 2018 Shinnosuke Watanabe\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/is-resolvable/-/is-resolvable-1.1.0.tgz#fb18f87ce1feb925169c9a407c19318a3206ed88",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/is-resolvable/-/is-resolvable-1.1.0.tgz",
    "hash": "fb18f87ce1feb925169c9a407c19318a3206ed88",
    "integrity": "sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg==",
    "registry": "npm",
    "packageName": "is-resolvable",
    "cacheIntegrity": "sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg== sha1-+xj4fOH+uSUWnJpAfBkxijIG7Yg="
  },
  "registry": "npm",
  "hash": "fb18f87ce1feb925169c9a407c19318a3206ed88"
}