{
  "manifest": {
    "name": "pixi-graph-fork",
    "version": "0.2.0",
    "description": "Graph visualization library using PIXI.js and Graphology",
    "keywords": [
      "pixi",
      "graph"
    ],
    "license": "MIT",
    "author": {
      "name": "Jan Zak",
      "email": "zj@zakjan.cz"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/zakjan/pixi-graph.git"
    },
    "main": "dist/pixi-graph.cjs.js",
    "module": "dist/pixi-graph.esm.js",
    "browser": "dist/pixi-graph.umd.min.js",
    "types": "dist/pixi-graph.d.ts",
    "scripts": {
      "build": "rimraf dist && rollup -c",
      "dev": "rollup -c -w",
      "test": "jest",
      "prepublishOnly": "npm run build"
    },
    "dependencies": {
      "@pixi-essentials/cull": "^1.1.0",
      "@pixi/app": "^6.0.2",
      "@pixi/constants": "^6.0.2",
      "@pixi/core": "^6.0.2",
      "@pixi/display": "^6.0.2",
      "@pixi/graphics": "^6.1.2",
      "@pixi/graphics-smooth": "^0.0.13",
      "@pixi/interaction": "^6.0.2",
      "@pixi/loaders": "^6.0.2",
      "@pixi/math": "^6.0.2",
      "@pixi/mixin-get-child-by-name": "^6.0.2",
      "@pixi/sprite": "^6.0.2",
      "@pixi/text": "^6.0.2",
      "@pixi/text-bitmap": "^6.0.2",
      "@pixi/ticker": "^6.0.2",
      "@pixi/utils": "^6.0.2",
      "color-rgba": "^2.2.3",
      "deepmerge": "^4.2.2",
      "events": "^3.3.0",
      "pixi-viewport": "^4.30.4",
      "tiny-typed-emitter": "^2.0.3"
    },
    "peerDependencies": {
      "graphology-types": "^0.19.2"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^18.0.0",
      "@rollup/plugin-node-resolve": "^11.2.1",
      "@types/color-rgba": "^2.1.0",
      "@types/deepmerge": "^2.2.0",
      "@types/resize-observer-browser": "^0.1.5",
      "graphology-types": "^0.19.2",
      "resource-loader": "^3.0.1",
      "rimraf": "^3.0.2",
      "rollup": "^2.46.0",
      "rollup-plugin-dts": "^3.0.1",
      "rollup-plugin-terser": "^7.0.2",
      "rollup-plugin-typescript2": "^0.30.0",
      "rollup-plugin-visualizer": "^5.4.1",
      "typescript": "^4.2.4"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pixi-graph-fork-0.2.0-e3a8149dbbb16037f87ce1f81ee2139c6b0464ef-integrity/node_modules/pixi-graph-fork/package.json",
    "readmeFilename": "README.md",
    "readme": "# pixi-graph\n\n[![](https://img.shields.io/npm/dm/pixi-graph)](https://www.npmjs.com/package/pixi-graph)\n[![](https://img.shields.io/david/zakjan/pixi-graph)](https://www.npmjs.com/package/pixi-graph)\n[![](https://img.shields.io/bundlephobia/min/pixi-graph)](https://www.npmjs.com/package/pixi-graph)\n\nGraph visualization library using [PIXI.js](https://www.pixijs.com/) and [Graphology](https://graphology.github.io/).\n\n⚠️ **This is a pre-release, use at your own risk!** Upcoming features can introduce breaking changes in the API.\n\nDeveloping a full-featured graph visualization library is a significant effort. I'd appreciate your feedback to prioritize new features by filling in a [survey](https://link.zakjan.cz/pixi-graph-survey).\n\n[Demo](https://zakjan.github.io/pixi-graph/)\n\n<img src=\"docs/screenshot@2x.jpg\" alt=\"Screenshot\" width=\"640\" height=\"320\">\n\n## Install\n\n```\nnpm install graphology pixi-graph\n```\n\nor\n\n```html\n<script src=\"https://unpkg.com/graphology@0.18.0/dist/graphology.umd.js\"></script>\n<script src=\"https://unpkg.com/pixi-graph@1.3.0/dist/pixi-graph.umd.min.js\"></script>\n```\n\n## Usage\n\n### Basic\n\n```ts\nconst graph = new graphology.Graph();\n// populate Graphology graph with data\n// assign layout positions as `x`, `y` node attributes\n\nconst pixiGraph = new PixiGraph.PixiGraph({\n  container: document.getElementById('graph'),\n  graph\n});\n```\n\n### Layouts\n\nIn its simplicity, a graph layout is a function `nodes => positions`. Therefore a layout from any other library can be used. Run the layout separately, and assign layout positions as `x`, `y` node attributes.\n\n[graphology-layout-forceatlas2](https://github.com/graphology/graphology-layout-forceatlas2) example:\n\n```ts\nconst graph = new graphology.Graph();\n// populate Graphology graph with data\n\ngraph.forEachNode(node => {\n  graph.setNodeAttribute(node, 'x', Math.random());\n  graph.setNodeAttribute(node, 'y', Math.random());\n});\nforceAtlas2.assign(graph, { iterations: 300, settings: { ...forceAtlas2.inferSettings(graph), scalingRatio: 80 }});\n\nconst pixiGraph = new PixiGraph.PixiGraph({ ..., graph });\n```\n\n### Style\n\n```ts\nconst style = {\n  node: {\n    color: '#000000',\n  },\n  edge: {\n    color: '#000000',\n  },\n};\n\nconst pixiGraph = new PixiGraph.PixiGraph({ ..., style });\n```\n\n#### Colors\n\nColors are resolved with [color-rgba](https://github.com/colorjs/color-rgba). The following CSS colors strings are supported: named colors, hex, short-hand hex, RGB, RGBA, HSL, HSLA.\n\n#### Webfonts\n\nPreload fonts before creating PixiGraph with [FontFaceObserver](https://github.com/bramstein/fontfaceobserver).\n\n[Material Icons](https://google.github.io/material-design-icons/) example:\n\n```html\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n```\n\n```ts\nconst style = {\n  node: {\n    icon: {\n      content: 'person',\n      fontFamily: 'Material Icons',\n    },\n  },\n};\n\nawait new FontFaceObserver('Material Icons').load();\n\nconst pixiGraph = new PixiGraph.PixiGraph({ ..., style });\n```\n\n#### Bitmap fonts\n\nRegister bitmap fonts as [resource-loader](https://github.com/englercj/resource-loader) external resource.\n\n```ts\nconst style = {\n  node: {\n    label: {\n      content: node => node.id,\n      type: PixiGraph.TextType.BITMAP_TEXT,\n      fontFamily: 'HelveticaRegular',\n    },\n  },\n};\n\nconst resources = [\n  { name: 'HelveticaRegular', url: 'https://gist.githubusercontent.com/zakjan/b61c0a26d297edf0c09a066712680f37/raw/8cdda3c21ba3668c3dd022efac6d7f740c9f1e18/HelveticaRegular.fnt' },\n];\n\nconst pixiGraph = new PixiGraph.PixiGraph({ ..., style, resources });\n```\n\n#### Hover style\n\nHover style values override style values when node/edge is hovered.\n\n```ts\nconst style = {\n  node: {\n    color: '#000000',\n  },\n  edge: {\n    color: '#000000',\n  },\n};\nconst hoverStyle = {\n  node: {\n    color: '#ff0000',\n  },\n  edge: {\n    color: '#ff0000',\n  },\n};\n\nconst pixiGraph = new PixiGraph.PixiGraph({ ..., style, hoverStyle });\n```\n\n⚠️ subject to change with the implementation of other states\n\n## API\n\n```ts\nexport interface GraphOptions<NodeAttributes extends BaseNodeAttributes = BaseNodeAttributes, EdgeAttributes extends BaseEdgeAttributes = BaseEdgeAttributes> {\n  container: HTMLElement;\n  graph: Graphology.AbstractGraph<NodeAttributes, EdgeAttributes>;\n  style: GraphStyleDefinition<NodeAttributes, EdgeAttributes>;\n  hoverStyle: GraphStyleDefinition<NodeAttributes, EdgeAttributes>;\n  resources?: ResourceLoader.IAddOptions[];\n}\n\nexport class PixiGraph<NodeAttributes extends BaseNodeAttributes = BaseNodeAttributes, EdgeAttributes extends BaseEdgeAttributes = BaseEdgeAttributes> {\n  constructor(options: GraphOptions<NodeAttributes, EdgeAttributes>);\n}\n```\n\n- `container` - HTML element to use as a container\n- `graph` - [Graphology](https://graphology.github.io/) graph\n- `style` - style definition\n- `hoverStyle` - additional style definition for hover state\n  - ⚠️ subject to change with the implementation of other states\n- `resources` - [resource-loader](https://github.com/englercj/resource-loader) external resource definitions\n  - resources are passed to loader.add function\n  - currently used only for external bitmap fonts\n\n### Style definition\n\n`GraphStyle` interface represents a resolved style, all values are mandatory.\n\n`GraphStyleDefinition` interface allows functions or missing values at any key. Functions are resolved, missing values fall back to a previous definition, or default values.\n\n```ts\nexport interface GraphStyle {\n  node: {\n    size: number;\n    color: string;\n    border: {\n      width: number;\n      color: string;\n    };\n    icon: {\n      content: string;\n      type: TextType;\n      fontFamily: string;\n      fontSize: number;\n      color: string;\n    };\n    label: {\n      content: string;\n      type: TextType;\n      fontFamily: string;\n      fontSize: number;\n      color: string;\n      backgroundColor: string;\n      padding: number;\n    };\n  };\n  edge: {\n    width: number;\n    color: string;\n  };\n}\n\nexport type NodeStyle = GraphStyle['node'];\nexport type EdgeStyle = GraphStyle['edge'];\n\nexport type StyleDefinition<Style, Attributes> =\n  ((attributes: Attributes) => Style) |\n  {[Key in keyof Style]?: StyleDefinition<Style[Key], Attributes>} |\n  Style;\n\nexport interface GraphStyleDefinition<NodeAttributes extends BaseNodeAttributes = BaseNodeAttributes, EdgeAttributes extends BaseEdgeAttributes = BaseEdgeAttributes> {\n  node?: StyleDefinition<NodeStyle, NodeAttributes>;\n  edge?: StyleDefinition<EdgeStyle, EdgeAttributes>;\n}\n```\n\nThis allows either static styles, or data-driven styles at any style definition level. Each function is resolved only once.\n\n```ts\nconst style = {\n  node: {\n    color: '#000000',\n  },\n};\n```\n\nor\n\n```ts\nconst style = {\n  node: {\n    color: node => colors[node.group % colors.length],\n  },\n};\n```\n\nor\n\n```ts\nconst style = {\n  node: node => {\n    const color = colors[node.group % colors.length];\n    return { color };\n  },\n};\n```\n\n### Events\n\nNode events:\n\n- nodeClick\n- nodeMousemove\n- nodeMouseover\n- nodeMouseout\n- nodeMousedown\n- nodeMouseup\n\n```ts\npixiGraph.on('nodeClick', (event, nodeKey) => ...);\n```\n\nEdge events:\n\n- edgeClick\n- edgeMousemove\n- edgeMouseover\n- edgeMouseout\n- edgeMousedown\n- edgeMouseup\n\n```ts\npixiGraph.on('edgeClick', (event, edgeKey) => ...);\n```\n\n## Sponsors\n\n<a href=\"https://reflect.app/\"><img src=\"https://reflect.app/static/icons/icon-bare.svg\" alt=\"Reflect\" width=\"48\" height=\"48\"></a>",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Jan Žák\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pixi-graph-fork/-/pixi-graph-fork-0.2.0.tgz#e3a8149dbbb16037f87ce1f81ee2139c6b0464ef",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pixi-graph-fork/-/pixi-graph-fork-0.2.0.tgz",
    "hash": "e3a8149dbbb16037f87ce1f81ee2139c6b0464ef",
    "integrity": "sha512-fVBD/PE5UvEBL2Yy1UyhZGWEJjbKUy1YSDp90nRmTZq/3AVHD+2BYqFEWzMcEoz48BnIz9HPXGyPVOYrsdOFXQ==",
    "registry": "npm",
    "packageName": "pixi-graph-fork",
    "cacheIntegrity": "sha512-fVBD/PE5UvEBL2Yy1UyhZGWEJjbKUy1YSDp90nRmTZq/3AVHD+2BYqFEWzMcEoz48BnIz9HPXGyPVOYrsdOFXQ== sha1-46gUnbuxYDf4fOH4HuITnGsEZO8="
  },
  "registry": "npm",
  "hash": "e3a8149dbbb16037f87ce1f81ee2139c6b0464ef"
}