{
  "manifest": {
    "name": "webpack-hot-middleware",
    "version": "2.25.3",
    "description": "Webpack hot reloading you can attach to your own server",
    "keywords": [
      "webpack",
      "hmr",
      "hot",
      "module",
      "reloading",
      "hot-reloading",
      "middleware",
      "express"
    ],
    "main": "middleware.js",
    "scripts": {
      "test": "mocha",
      "coverage": "nyc npm run test",
      "lint": "eslint . --max-warnings 0",
      "prettier": "prettier --write ."
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/webpack-hot-middleware.git"
    },
    "author": {
      "name": "Glen Mailer",
      "email": "glen@stainlessed.co.uk"
    },
    "license": "MIT",
    "dependencies": {
      "ansi-html-community": "0.0.8",
      "html-entities": "^2.1.0",
      "strip-ansi": "^6.0.0"
    },
    "devDependencies": {
      "eslint": "^7.19.0",
      "eslint-plugin-prettier": "^3.3.1",
      "express": "^4.17.1",
      "mocha": "^10.1.0",
      "nyc": "^15.1.0",
      "prettier": "^2.2.1",
      "sinon": "^9.2.4",
      "supertest": "^6.1.3",
      "webpack": "^5.74.0",
      "webpack-dev-middleware": "^5.3.3"
    },
    "prettier": {
      "singleQuote": true,
      "trailingComma": "es5",
      "arrowParens": "always"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-webpack-hot-middleware-2.25.3-be343ce2848022cfd854dd82820cd730998c6794-integrity/node_modules/webpack-hot-middleware/package.json",
    "readmeFilename": "README.md",
    "readme": "# Webpack Hot Middleware\n\nWebpack hot reloading using only [webpack-dev-middleware](https://webpack.js.org/guides/development/#webpack-dev-middleware). This allows you to add hot reloading into an existing server without [webpack-dev-server](https://webpack.js.org/configuration/dev-server/).\n\nThis module is **only** concerned with the mechanisms to connect a browser client to a webpack server & receive updates. It will subscribe to changes from the server and execute those changes using [webpack's HMR API](https://webpack.js.org/concepts/hot-module-replacement/). Actually making your application capable of using hot reloading to make seamless changes is out of scope, and usually handled by another library.\n\nIf you're using React then some common options are [react-transform-hmr](https://github.com/gaearon/react-transform-hmr/) and [react-hot-loader](https://github.com/gaearon/react-hot-loader).\n\n[![npm version](https://img.shields.io/npm/v/webpack-hot-middleware.svg)](https://www.npmjs.com/package/webpack-hot-middleware) [![CircleCI](https://circleci.com/gh/webpack-contrib/webpack-hot-middleware/tree/master.svg?style=svg)](https://circleci.com/gh/webpack-contrib/webpack-hot-middleware/tree/master)[![codecov](https://codecov.io/gh/webpack-contrib/webpack-hot-middleware/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack-contrib/webpack-hot-middleware)![MIT Licensed](https://img.shields.io/npm/l/webpack-hot-middleware.svg)\n\n## Installation & Usage\n\nSee [example/](./example/) for an example of usage.\n\nFirst, install the npm module.\n\n```sh\nnpm install --save-dev webpack-hot-middleware\n```\n\nNext, enable hot reloading in your webpack config:\n\n 1. Add the following plugins to the `plugins` array:\n    ```js\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n    ]\n    ```\n\n    Occurence ensures consistent build hashes, hot module replacement is\n    somewhat self-explanatory, no errors is used to handle errors more cleanly.\n\n 3. Add `'webpack-hot-middleware/client'` into the `entry` array.\n    This connects to the server to receive notifications when the bundle\n    rebuilds and then updates your client bundle accordingly.\n\nNow add the middleware into your server:\n\n 1. Add `webpack-dev-middleware` the usual way\n    ```js\n    var webpack = require('webpack');\n    var webpackConfig = require('./webpack.config');\n    var compiler = webpack(webpackConfig);\n\n    app.use(require(\"webpack-dev-middleware\")(compiler, {\n        /* Options */\n    }));\n    ```\n\n 2. Add `webpack-hot-middleware` attached to the same compiler instance\n    ```js\n    app.use(require(\"webpack-hot-middleware\")(compiler));\n    ```\n\nAnd you're all set!\n\n## Changelog\n\n### 2.0.0\n\n**Breaking Change**\n\nAs of version 2.0.0, all client functionality has been rolled into this module. This means that you should remove any reference to `webpack/hot/dev-server` or `webpack/hot/only-dev-server` from your webpack config. Instead, use the `reload` config option to control this behaviour.\n\nThis was done to allow full control over the client receiving updates, which is now able to output full module names in the console when applying changes.\n\n## Documentation\n\nMore to come soon, you'll have to mostly rely on the example for now.\n\n### Config\n\n#### Client\n\nConfiguration options can be passed to the client by adding querystring parameters to the path in the webpack config.\n\n```js\n'webpack-hot-middleware/client?path=/__what&timeout=2000&overlay=false'\n```\n\n* **path** - The path which the middleware is serving the event stream on\n* **name** - Bundle name, specifically for multi-compiler mode\n* **timeout** - The time to wait after a disconnection before attempting to reconnect\n* **overlay** - Set to `false` to disable the DOM-based client-side overlay.\n* **reload** - Set to `true` to auto-reload the page when webpack gets stuck.\n* **noInfo** - Set to `true` to disable informational console logging.\n* **quiet** - Set to `true` to disable all console logging.\n* **dynamicPublicPath** - Set to `true` to use webpack `publicPath` as prefix of `path`. (We can set `__webpack_public_path__` dynamically at runtime in the entry point, see note of [output.publicPath](https://webpack.js.org/configuration/output/#output-publicpath))\n* **autoConnect** - Set to `false` to use to prevent a connection being automatically opened from the client to the webpack back-end - ideal if you need to modify the options using the `setOptionsAndConnect` function\n* **ansiColors** - An object to customize the client overlay colors as mentioned in the [ansi-html-community](https://github.com/mahdyar/ansi-html-community#set-colors) package.\n* **overlayStyles** - An object to let you override or add new inline styles to the client overlay div.\n* **overlayWarnings** - Set to `true` to enable client overlay on warnings in addition to errors.\n\n> Note:\n> Since the `ansiColors` and `overlayStyles` options are passed via query string, you'll need to uri encode your stringified options like below:\n\n```js\nvar ansiColors = {\n  red: '00FF00' // note the lack of \"#\"\n};\nvar overlayStyles = {\n  color: '#FF0000' // note the inclusion of \"#\" (these options would be the equivalent of div.style[option] = value)\n};\nvar hotMiddlewareScript = 'webpack-hot-middleware/client?path=/__webpack_hmr&timeout=20000&reload=true&ansiColors=' + encodeURIComponent(JSON.stringify(ansiColors)) + '&overlayStyles=' + encodeURIComponent(JSON.stringify(overlayStyles));\n```\n\n#### Middleware\n\nConfiguration options can be passed to the middleware by passing a second argument.\n\n```js\napp.use(require(\"webpack-hot-middleware\")(compiler, {\n    log: false,\n    path: \"/__what\",\n    heartbeat: 2000\n}));\n```\n\n* **log** - A function used to log lines, pass `false` to disable. Defaults to `console.log`\n* **path** - The path which the middleware will serve the event stream on, must match the client setting\n* **heartbeat** - How often to send heartbeat updates to the client to keep the connection alive. Should be less than the client's `timeout` setting - usually set to half its value.\n\n## How it Works\n\nThe middleware installs itself as a webpack plugin, and listens for compiler events.\n\nEach connected client gets a [Server Sent Events](http://www.html5rocks.com/en/tutorials/eventsource/basics/) connection, the server will publish notifications to connected clients on compiler events.\n\nWhen the client receives a message, it will check to see if the local code is up to date. If it isn't up to date, it will trigger webpack hot module reloading.\n\n### Multi-compiler mode\n\nIf you're using multi-compiler mode (exporting an array of config in `webpack.config.js`), set `name` parameters to make sure bundles don't process each other's updates. For example:\n\n```\n// webpack.config.js\nmodule.exports = [\n    {\n        name: 'mobile',\n        entry: {\n            vendor: 'vendor.js',\n            main: ['webpack-hot-middleware/client?name=mobile', 'mobile.js']\n        }\n    },\n    {\n        name: 'desktop',\n        entry: {\n            vendor: 'vendor.js',\n            main: ['webpack-hot-middleware/client?name=desktop', 'desktop.js']\n        }\n    }\n]\n```\n\n## Other Frameworks\n\n### Hapi\n\nUse the [hapi-webpack-plugin](https://www.npmjs.com/package/hapi-webpack-plugin).\n\n### Koa\n\n[koa-webpack-middleware](https://www.npmjs.com/package/koa-webpack-middleware)\nwraps this module for use with Koa 1.x\n\n[koa-webpack](https://www.npmjs.com/package/koa-webpack)\ncan be used for Koa 2.x\n\n## Troubleshooting\n\n### Use on browsers without EventSource\n\nIf you want to use this module with browsers that don't support eventsource, you'll need to use a [polyfill](https://libraries.io/search?platforms=NPM&q=eventsource+polyfill). See [issue #11](https://github.com/webpack-contrib/webpack-hot-middleware/issues/11)\n\n### Not receiving updates in client when using Gzip\n\nThis is because gzip generally buffers the response, but the Server Sent Events event-stream expects to be able to send data to the client immediately. You should make sure gzipping isn't being applied to the event-stream. See [issue #10](https://github.com/webpack-contrib/webpack-hot-middleware/issues/10).\n\n### Use with auto-restarting servers\n\nThis module expects to remain running while you make changes to your webpack bundle, if you use a process manager like nodemon then you will likely see very slow changes on the client side. If you want to reload the server component, either use a separate process, or find a way to reload your server routes without restarting the whole process. See https://github.com/glenjamin/ultimate-hot-reloading-example for an example of one way to do this.\n\n### Use with multiple entry points in webpack\n\nIf you want to use [multiple entry points in your webpack config](https://webpack.js.org/concepts/output/#multiple-entry-points) you need to include the hot middleware client in each entry point. This ensures that each entry point file knows how to handle hot updates. See the [examples folder README](example/README.md) for an example.\n\n```js\nentry: {\n    vendor: ['jquery', 'webpack-hot-middleware/client'],\n    index: ['./src/index', 'webpack-hot-middleware/client']\n}\n```\n\n## License\n\nSee [LICENSE file](LICENSE).\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/webpack-hot-middleware/-/webpack-hot-middleware-2.25.3.tgz#be343ce2848022cfd854dd82820cd730998c6794",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/webpack-hot-middleware/-/webpack-hot-middleware-2.25.3.tgz",
    "hash": "be343ce2848022cfd854dd82820cd730998c6794",
    "integrity": "sha512-IK/0WAHs7MTu1tzLTjio73LjS3Ov+VvBKQmE8WPlJutgG5zT6Urgq/BbAdRrHTRpyzK0dvAvFh1Qg98akxgZpA==",
    "registry": "npm",
    "packageName": "webpack-hot-middleware",
    "cacheIntegrity": "sha512-IK/0WAHs7MTu1tzLTjio73LjS3Ov+VvBKQmE8WPlJutgG5zT6Urgq/BbAdRrHTRpyzK0dvAvFh1Qg98akxgZpA== sha1-vjQ84oSAIs/YVN2CggzXMJmMZ5Q="
  },
  "registry": "npm",
  "hash": "be343ce2848022cfd854dd82820cd730998c6794"
}