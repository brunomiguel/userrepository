"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statusCheck = exports.dbuserStatsToUserStats = exports.resolveVideo = exports.resolveSegment = void 0;
const ResponseError_1 = require("../errors/ResponseError");
function resolveSegment(resolvable) {
    let UUID;
    if (typeof resolvable === 'string') {
        UUID = resolvable;
    }
    else {
        UUID = resolvable.UUID;
    }
    return UUID;
}
exports.resolveSegment = resolveSegment;
function resolveVideo(resolvable) {
    let videoID;
    if (typeof resolvable === 'string') {
        videoID = resolvable;
    }
    else {
        videoID = resolvable.videoID;
    }
    return videoID;
}
exports.resolveVideo = resolveVideo;
function dbuserStatsToUserStats(dbuserStat) {
    let userStats = [];
    for (let i = 0; i < dbuserStat.userNames[0].length; i++) {
        let { userNames, viewCounts, totalSubmissions, minutesSaved } = dbuserStat;
        userStats.push({ userName: userNames[i], viewCounts: viewCounts[i], totalSubmissions: totalSubmissions[i], minutesSaved: minutesSaved[i] });
    }
    return userStats;
}
exports.dbuserStatsToUserStats = dbuserStatsToUserStats;
function statusCheck(res) {
    if (res.status !== 200) {
        if (res.status === 400) {
            throw new ResponseError_1.ResponseError(400, '[SponsorBlock] Bad Request (Your inputs are wrong/impossible)');
        }
        else if (res.status == 403) {
            throw new ResponseError_1.ResponseError(403, `[SponsorBlock] Rejected by auto moderator`);
        }
        else if (res.status === 404) {
            throw new ResponseError_1.ResponseError(404, '[SponsorBlock] Not Found');
        }
        else if (res.status === 405) {
            throw new ResponseError_1.ResponseError(405, '[SponsorBlock] Duplicate');
        }
        else if (res.status === 409) {
            throw new ResponseError_1.ResponseError(409, '[SponsorBlock] Duplicate');
        }
        else if (res.status === 429) {
            throw new ResponseError_1.ResponseError(429, '[SponsorBlock] Rate Limit (Too many for the same user or IP)');
        }
        else {
            throw new ResponseError_1.ResponseError(res.status, `[SponsorBlock] Status code not 200 (${res.status})`);
        }
    }
}
exports.statusCheck = statusCheck;
