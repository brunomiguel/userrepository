"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SponsorBlockVIP = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const user_1 = require("./user");
const utils_1 = require("../utils");
class SponsorBlockVIP extends user_1.SponsorBlock {
    constructor(userID, options = {}) {
        super(userID, options);
        this.userID = userID;
        this.options = options;
        this.isVIP().then((result) => result || console.info('\x1b[31m%s\x1b[0m', 'User is not VIP, VIP methods will be unauthorized'));
    }
    blockSubmissionsOfCategory(video, ...categories) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/noSegments`, {
                method: 'POST',
                body: JSON.stringify({ videoID, userID: this.userID, categories }),
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    shadowBan(publicUserID, hideOldSubmissions) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/shadowBanUser?userID=${publicUserID}&adminUserID=${this.userID}&enabled=true&unHideOldSubmissions=${hideOldSubmissions !== null && hideOldSubmissions !== void 0 ? hideOldSubmissions : false}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    removeShadowBan(publicUserID) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/shadowBanUser?userID=${publicUserID}&adminUserID=${this.userID}&enabled=false`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    hideOldSubmissions(publicUserID) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/shadowBanUser?userID=${publicUserID}&adminUserID=${this.userID}&enabled=true&unHideOldSubmissions=true`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    warnUser(publicUserID, reason = '', enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/warnUser`, {
                method: 'POST',
                body: JSON.stringify({ issuerUserID: this.userID, userID: publicUserID, enabled, reason }),
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    clearCache(video) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/clearCache?videoID=${videoID}&userID=${this.userID}`);
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    purgeAllSegments(video) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/purgeAllSegments?videoID=${videoID}&userID=${this.userID}`);
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
}
exports.SponsorBlockVIP = SponsorBlockVIP;
