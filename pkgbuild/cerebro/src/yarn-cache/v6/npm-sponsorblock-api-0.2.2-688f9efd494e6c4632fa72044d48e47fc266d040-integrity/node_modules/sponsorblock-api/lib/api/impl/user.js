"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SponsorBlock = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const crypto_1 = __importDefault(require("crypto"));
const index_1 = require("../../index");
const utils_1 = require("../utils");
/**
 * SponsorBlock API class, to be constructed with a userID.
 *
 * @description Complete API documentation can be found {@link https://wiki.sponsor.ajay.app/index.php/API_Docs here}.
 * Please review the {@link https://gist.github.com/ajayyy/4b27dfc66e33941a45aeaadccb51de71 attriution template}
 * to abide the {@link https://github.com/ajayyy/SponsorBlock/wiki/Database-and-API-License license}.
 */
class SponsorBlock {
    constructor(userID, options = {}) {
        var _a;
        this.userID = userID;
        this.options = options;
        if ((_a = options.baseURL) === null || _a === void 0 ? void 0 : _a.endsWith('/'))
            options.baseURL = options.baseURL.slice(0, -1);
        this.options = Object.assign(Object.assign({}, index_1.defaultOptions), options);
    }
    getSegments(video, categories = ['sponsor'], ...requiredSegments) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let query = `?videoID=${videoID}&service=${this.options.service}&categories=${JSON.stringify(categories)}`;
            if (requiredSegments.length > 0) {
                query += `&requiredSegments=${JSON.stringify(requiredSegments)}`;
            }
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/skipSegments${query}`);
            utils_1.statusCheck(res);
            let data = (yield res.json());
            let segments = data.map(({ UUID, segment, category, videoDuration }) => {
                return { UUID, startTime: segment[0], endTime: segment[1], category, videoDuration };
            });
            return segments;
        });
    }
    postSegments(video, ...segments) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let userAgent = this.options.userAgent;
            let dbSegments = segments.map((segment) => {
                // turn segments to objects the api accepts
                let { startTime, endTime, category } = segment;
                return { segment: [startTime, endTime], category };
            });
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/skipSegments`, {
                method: 'POST',
                body: JSON.stringify({ videoID, userID: this.userID, segments: dbSegments, userAgent }),
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    getSegmentsPrivately(video, categories = ['sponsor'], ...requiredSegments) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let hashPrefix = crypto_1.default.createHash('sha256').update(videoID).digest('hex').substr(0, this.options.hashPrefixLength);
            let query = `?service=${this.options.service}&categories=${JSON.stringify(categories)}`;
            if (requiredSegments.length > 0) {
                query += `&requiredSegments=${JSON.stringify(requiredSegments)}`;
            }
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/skipSegments/${hashPrefix}${query}`);
            utils_1.statusCheck(res);
            let filtered = (yield res.json()).find((video) => video.videoID === videoID);
            if (!filtered) {
                throw new Error('[SponsorBlock] Not found within returned videos');
            }
            let segments = filtered.segments.map((val) => {
                return { UUID: val.UUID, startTime: val.segment[0], endTime: val.segment[1], category: val.category, videoDuration: val.videoDuration };
            });
            return segments;
        });
    }
    vote(segment, type) {
        return __awaiter(this, void 0, void 0, function* () {
            let UUID = utils_1.resolveSegment(segment);
            type = type === 'down' ? 0 : type === 'up' ? 1 : type === 'undo' ? 20 : type;
            let query = `?UUID=${UUID}&userID=${this.userID}&type=${type}`;
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/voteOnSponsorTime${query}`);
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    voteCategory(segment, category) {
        return __awaiter(this, void 0, void 0, function* () {
            let UUID = utils_1.resolveSegment(segment);
            let query = `?UUID=${UUID}&userID=${this.userID}&category=${category}`;
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/voteOnSponsorTime${query}`);
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    viewed(segment) {
        return __awaiter(this, void 0, void 0, function* () {
            let UUID = utils_1.resolveSegment(segment);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/viewedVideoSponsorTime?UUID=${UUID}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    getViews() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getViewsForUser?userID=${this.userID}`);
            utils_1.statusCheck(res);
            let data = yield res.json();
            return data.viewCount;
        });
    }
    getTimeSaved() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getSavedTimeForUser?userID=${this.userID}`);
            utils_1.statusCheck(res);
            let data = yield res.json();
            return data.timeSaved;
        });
    }
    setUsername(username) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/setUsername?userID=${this.userID}&username=${username}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            utils_1.statusCheck(res);
            // returns nothing (status code 200)
        });
    }
    getUsername() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getUsername?userID=${this.userID}`);
            utils_1.statusCheck(res);
            let data = yield res.json();
            return data.userName;
        });
    }
    getTopUsers(sortType) {
        return __awaiter(this, void 0, void 0, function* () {
            sortType = sortType === 'minutesSaved' ? 0 : sortType === 'viewCount' ? 1 : sortType === 'totalSubmissions' ? 2 : sortType;
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getTopUsers?sortType=${sortType}`);
            utils_1.statusCheck(res);
            return utils_1.dbuserStatsToUserStats(yield res.json());
        });
    }
    getOverallStats() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getTotalStats`);
            utils_1.statusCheck(res);
            return yield res.json();
        });
    }
    getDaysSaved() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/getDaysSavedFormatted`);
            utils_1.statusCheck(res);
            let data = yield res.json();
            return parseFloat(data.daysSaved);
        });
    }
    isVIP() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/isUserVIP?userID=${this.userID}`);
            utils_1.statusCheck(res);
            return (yield res.json()).vip;
        });
    }
    getHashedUserID() {
        if (this.hashedUserID)
            return this.hashedUserID;
        let value = this.userID;
        for (let i = 0; i < 5000; i++) {
            value = crypto_1.default.createHash('sha256').update(value).digest('hex');
        }
        return (this.hashedUserID = value);
    }
    getSegmentInfo(segments) {
        return __awaiter(this, void 0, void 0, function* () {
            let UUIDs = segments.map((segment) => utils_1.resolveSegment(segment));
            let query = `?UUIDs=${JSON.stringify(UUIDs)}`;
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/segmentInfo${query}`);
            utils_1.statusCheck(res);
            return yield res.json();
        });
    }
    getUserID(username, exact = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/userID?username=${username}&exact=${exact.toString()}`);
            utils_1.statusCheck(res);
            return yield res.json();
        });
    }
    getLockCategories(video) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/lockCategories?videoID=${videoID}`);
            utils_1.statusCheck(res);
            return (yield res.json()).categories;
        });
    }
    getLockCategoriesPrivately(video) {
        return __awaiter(this, void 0, void 0, function* () {
            let videoID = utils_1.resolveVideo(video);
            let hashPrefix = crypto_1.default.createHash('sha256').update(videoID).digest('hex').substr(0, this.options.hashPrefixLength);
            let res = yield cross_fetch_1.default(`${this.options.baseURL}/api/skipSegments/${hashPrefix}`);
            utils_1.statusCheck(res);
            let filtered = (yield res.json()).find((video) => video.videoID === videoID);
            if (!filtered) {
                throw new Error('[SponsorBlock] Not found within returned videos');
            }
            return filtered.categories;
        });
    }
}
exports.SponsorBlock = SponsorBlock;
