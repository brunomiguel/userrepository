"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MakerDMG = void 0;
const path_1 = __importDefault(require("path"));
const maker_base_1 = require("@electron-forge/maker-base");
const fs_extra_1 = __importDefault(require("fs-extra"));
class MakerDMG extends maker_base_1.MakerBase {
    constructor() {
        super(...arguments);
        this.name = 'dmg';
        this.defaultPlatforms = ['darwin', 'mas'];
    }
    isSupportedOnCurrentPlatform() {
        return process.platform === 'darwin';
    }
    async make({ dir, makeDir, appName, packageJSON, targetArch }) {
        const electronDMG = require('electron-installer-dmg');
        const outPath = path_1.default.resolve(makeDir, `${this.config.name || appName}.dmg`);
        const forgeDefaultOutPath = path_1.default.resolve(makeDir, `${appName}-${packageJSON.version}-${targetArch}.dmg`);
        await this.ensureFile(outPath);
        const dmgConfig = {
            overwrite: true,
            name: appName,
            ...this.config,
            appPath: path_1.default.resolve(dir, `${appName}.app`),
            out: path_1.default.dirname(outPath),
        };
        const opts = await electronDMG(dmgConfig);
        if (!this.config.name) {
            await this.ensureFile(forgeDefaultOutPath);
            await fs_extra_1.default.rename(outPath, forgeDefaultOutPath);
            return [forgeDefaultOutPath];
        }
        return [opts.dmgPath];
    }
}
exports.default = MakerDMG;
exports.MakerDMG = MakerDMG;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFrZXJETUcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTWFrZXJETUcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLDJEQUFxRTtBQUVyRSx3REFBMEI7QUFJMUIsTUFBcUIsUUFBUyxTQUFRLHNCQUF5QjtJQUEvRDs7UUFDRSxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBRWIscUJBQWdCLEdBQW9CLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBNkJ4RCxDQUFDO0lBM0JDLDRCQUE0QjtRQUMxQixPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBZ0I7UUFDekUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFdEQsTUFBTSxPQUFPLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxPQUFPLE1BQU0sQ0FBQyxDQUFDO1FBQzVFLE1BQU0sbUJBQW1CLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxPQUFPLElBQUksV0FBVyxDQUFDLE9BQU8sSUFBSSxVQUFVLE1BQU0sQ0FBQyxDQUFDO1FBRXpHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixNQUFNLFNBQVMsR0FBRztZQUNoQixTQUFTLEVBQUUsSUFBSTtZQUNmLElBQUksRUFBRSxPQUFPO1lBQ2IsR0FBRyxJQUFJLENBQUMsTUFBTTtZQUNkLE9BQU8sRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sTUFBTSxDQUFDO1lBQzVDLEdBQUcsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUMzQixDQUFDO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sa0JBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDOUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDRjtBQWhDRCwyQkFnQ0M7QUFFUSw0QkFBUSJ9