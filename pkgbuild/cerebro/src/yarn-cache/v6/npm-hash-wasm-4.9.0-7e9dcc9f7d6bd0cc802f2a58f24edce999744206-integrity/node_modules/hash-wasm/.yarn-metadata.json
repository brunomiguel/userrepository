{
  "manifest": {
    "name": "hash-wasm",
    "version": "4.9.0",
    "description": "Lightning fast hash functions for browsers and Node.js using hand-tuned WebAssembly binaries (MD4, MD5, SHA-1, SHA-2, SHA-3, Keccak, BLAKE2, BLAKE3, PBKDF2, Argon2, bcrypt, scrypt, Adler-32, CRC32, CRC32C, RIPEMD-160, HMAC, xxHash, SM3, Whirlpool)",
    "main": "dist/index.umd.js",
    "module": "dist/index.esm.js",
    "types": "dist/lib/index.d.ts",
    "scripts": {
      "start": "ts-node lib/index.ts",
      "build": "sh -c ./scripts/build.sh",
      "eslint": "eslint lib/**/*.ts test/**/*.ts",
      "prepublishOnly": "sh -c ./scripts/build.sh",
      "test": "node --expose-gc ./node_modules/.bin/jest --coverage --logHeapUsage",
      "webpack": "node webpack/webpack.js",
      "typedoc": "typedoc --excludeNotExported --excludeProtected --excludePrivate --excludeExternals"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Daninet/hash-wasm.git"
    },
    "keywords": [
      "hash",
      "wasm",
      "webassembly",
      "md5",
      "adler-32",
      "crc32",
      "crc32c",
      "sha-1",
      "sha-2",
      "sha-3",
      "xxhash",
      "keccak",
      "ripemd",
      "hmac",
      "pbkdf2",
      "blake2",
      "blake2b",
      "blake2s",
      "blake3",
      "fast",
      "hashing",
      "browser",
      "key",
      "derivation",
      "password",
      "md4",
      "sha",
      "sha1",
      "sha2",
      "sha224",
      "sha-224",
      "sha256",
      "sha-256",
      "sha384",
      "sha-384",
      "sha512",
      "sha-512",
      "sha3",
      "sha3-224",
      "sha3-256",
      "sha3-384",
      "sha3-512",
      "xxhash32",
      "xxhash64",
      "ripemd160",
      "argon2",
      "argon2i",
      "argon2d",
      "argon2id",
      "scrypt",
      "bcrypt",
      "sm3",
      "whirlpool"
    ],
    "bugs": {
      "url": "https://github.com/Daninet/hash-wasm/issues"
    },
    "homepage": "https://github.com/Daninet/hash-wasm#readme",
    "author": {
      "name": "Dani Biró",
      "email": "danibiro93@gmail.com",
      "url": "https://danibiro.com"
    },
    "license": "MIT",
    "devDependencies": {
      "@rollup/plugin-json": "^4.1.0",
      "@rollup/plugin-typescript": "^8.2.3",
      "@types/estree": "^0.0.50",
      "@types/jest": "^26.0.24",
      "@types/node": "^16.4.0",
      "@typescript-eslint/eslint-plugin": "^4.28.4",
      "@typescript-eslint/parser": "^4.28.4",
      "binaryen": "^101.0.0",
      "eslint": "^7.31.0",
      "eslint-config-airbnb": "^18.2.1",
      "eslint-config-standard": "^16.0.3",
      "eslint-plugin-import": "^2.23.4",
      "eslint-plugin-jsx-a11y": "^6.4.1",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-promise": "^5.1.0",
      "eslint-plugin-react": "^7.24.0",
      "jest": "^27.0.6",
      "rollup": "^2.53.3",
      "rollup-plugin-gzip": "^2.5.0",
      "rollup-plugin-license": "^2.5.0",
      "rollup-plugin-terser": "^7.0.2",
      "ts-jest": "^27.0.4",
      "ts-loader": "^9.2.3",
      "ts-node": "^10.1.0",
      "tslib": "^2.3.0",
      "typescript": "^4.3.5"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-hash-wasm-4.9.0-7e9dcc9f7d6bd0cc802f2a58f24edce999744206-integrity/node_modules/hash-wasm/package.json",
    "readmeFilename": "README.md",
    "readme": "# hash-wasm\n\n[![npm package](https://img.shields.io/npm/v/hash-wasm.svg)](http://npmjs.org/package/hash-wasm)\n[![Bundle size](https://badgen.net/bundlephobia/minzip/hash-wasm)](https://bundlephobia.com/result?p=hash-wasm)\n[![codecov](https://codecov.io/gh/Daninet/hash-wasm/branch/master/graph/badge.svg)](https://codecov.io/gh/Daninet/hash-wasm)\n[![Build status](https://github.com/Daninet/hash-wasm/workflows/Build%20&%20publish/badge.svg?branch=master)](https://github.com/Daninet/hash-wasm/actions)\n[![JSDelivr downloads](https://data.jsdelivr.com/v1/package/npm/hash-wasm/badge)](https://www.jsdelivr.com/package/npm/hash-wasm)\n\nHash-WASM is a ⚡lightning fast⚡ hash function library for browsers and Node.js.\nIt is using hand-tuned WebAssembly binaries to calculate the hash faster than other libraries.\n\nSupported algorithms\n=======\n\n| Name                                           | Bundle size (gzipped) |\n|------------------------------------------------|-----------------------|\n| Adler-32                                       | 3 kB                  |\n| Argon2: Argon2d, Argon2i, Argon2id (v1.3)      | 11 kB                 |\n| bcrypt                                         | 11 kB                 |\n| BLAKE2b                                        | 6 kB                  |\n| BLAKE2s                                        | 5 kB                  |\n| BLAKE3                                         | 9 kB                  |\n| CRC32, CRC32C                                  | 3 kB                  |\n| HMAC                                           | -                     |\n| MD4                                            | 4 kB                  |\n| MD5                                            | 4 kB                  |\n| PBKDF2                                         | -                     |\n| RIPEMD-160                                     | 5 kB                  |\n| scrypt                                         | 10 kB                 |\n| SHA-1                                          | 5 kB                  |\n| SHA-2: SHA-224, SHA-256                        | 7 kB                  |\n| SHA-2: SHA-384, SHA-512                        | 8 kB                  |\n| SHA-3: SHA3-224, SHA3-256, SHA3-384, SHA3-512  | 4 kB                  |\n| Keccak-224, Keccak-256, Keccak-384, Keccak-512 | 4 kB                  |\n| SM3                                            | 4 kB                  |\n| Whirlpool                                      | 6 kB                  |\n| xxHash32                                       | 3 kB                  |\n| xxHash64                                       | 4 kB                  |\n| xxHash3                                        | 7 kB                  |\n| xxHash128                                      | 8 kB                  |\n\nFeatures\n=======\n\n- A lot faster than other JS / WASM implementations (see [benchmarks](#benchmark) below)\n- It's lightweight. See the table above\n- Compiled from heavily optimized algorithms written in C\n- Supports all modern browsers, Node.js and Deno\n- Supports large data streams\n- Supports UTF-8 strings and typed arrays\n- Supports chunked input streams\n- Modular architecture (the algorithms are compiled into individual WASM binaries)\n- WASM modules are bundled as base64 strings (no problems with linking)\n- Supports tree shaking (Webpack only bundles the hash algorithms you use)\n- Works without Webpack or other bundlers\n- Includes TypeScript type definitions\n- Works in Web Workers\n- Zero dependencies\n- Supports concurrent hash calculations with multiple states\n- Supports saving and loading the internal state of the hash (segmented hashing and rewinding)\n- [Unit tests](https://github.com/Daninet/hash-wasm/tree/master/test) for all algorithms\n- 100% open source & transparent [build process](https://github.com/Daninet/hash-wasm/actions)\n- Easy to use, Promise-based API\n\n\nInstallation\n=======\n```\nnpm i hash-wasm\n```\n\nIt can also be used directly from HTML (via [jsDelivr](https://www.jsdelivr.com/package/npm/hash-wasm)):\n\n```html\n<!-- load all algortihms into the global `hashwasm` variable -->\n<script src=\"https://cdn.jsdelivr.net/npm/hash-wasm@4\"></script>\n\n<!-- load individual algortihms into the global `hashwasm` variable -->\n<script src=\"https://cdn.jsdelivr.net/npm/hash-wasm@4/dist/md5.umd.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/hash-wasm@4/dist/hmac.umd.min.js\"></script>\n```\n\nExamples\n=======\n\n### Demo apps\n\n[Hash calculator](https://3w4be.csb.app/) - [source code](https://codesandbox.io/s/hash-wasm-3w4be?file=/src/App.tsx)\n\n[MD5 file hasher using HTML5 File API](https://stackoverflow.com/a/63287199/6251760)\n\n### Usage with the shorthand form\n\nIt is the easiest and the fastest way to calculate hashes. Use it when the input buffer is already in the memory.\n\n```javascript\nimport { md5, sha1, sha512, sha3 } from 'hash-wasm';\n\nasync function run() {\n  console.log('MD5:', await md5('demo'));\n\n  const int8Buffer = new Uint8Array([0, 1, 2, 3]);\n  console.log('SHA1:', await sha1(int8Buffer));\n  console.log('SHA512:', await sha512(int8Buffer));\n\n  const int32Buffer = new Uint32Array([1056, 641]);\n  console.log('SHA3-256:', await sha3(int32Buffer, 256));\n}\n\nrun();\n```\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### Advanced usage with streaming input\n\ncreateXXXX() functions create new WASM instances with separate states, which can be used to calculate multiple hashes paralelly. They are slower compared to shorthand functions like md5(), which reuse the same WASM instance and state to do multiple calculations. For this reason, the shorthand form is always preferred when the data is already in the memory.\n\nFor the best performance, avoid calling createXXXX() functions in loops. When calculating multiple hashes sequentially, the init() function can be used to reset the internal state between runs. It is faster than creating new instances with createXXXX().\n\n```javascript\nimport { createSHA1 } from 'hash-wasm';\n\nasync function run() {\n  const sha1 = await createSHA1();\n  sha1.init();\n\n  while (hasMoreData()) {\n    const chunk = readChunk();\n    sha1.update(chunk);\n  }\n\n  const hash = sha1.digest('binary'); // returns Uint8Array\n  console.log('SHA1:', hash);\n}\n\nrun();\n```\n\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### Hashing passwords with Argon2\n\nThe recommended process for choosing the parameters can be found here: https://tools.ietf.org/html/draft-irtf-cfrg-argon2-04#section-4\n\n```javascript\nimport { argon2id, argon2Verify } from 'hash-wasm';\n\nasync function run() {\n  const salt = new Uint8Array(16);\n  window.crypto.getRandomValues(salt);\n\n  const key = await argon2id({\n    password: 'pass',\n    salt, // salt is a buffer containing random bytes\n    parallelism: 1,\n    iterations: 256,\n    memorySize: 512, // use 512KB memory\n    hashLength: 32, // output size = 32 bytes\n    outputType: 'encoded', // return standard encoded string containing parameters needed to verify the key\n  });\n\n  console.log('Derived key:', key);\n\n  const isValid = await argon2Verify({\n    password: 'pass',\n    hash: key,\n  });\n\n  console.log(isValid ? 'Valid password' : 'Invalid password');\n}\n\nrun();\n```\n\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### Hashing passwords with bcrypt\n\n```javascript\nimport { bcrypt, bcryptVerify } from 'hash-wasm';\n\nasync function run() {\n  const salt = new Uint8Array(16);\n  window.crypto.getRandomValues(salt);\n\n  const key = await bcrypt({\n    password: 'pass',\n    salt, // salt is a buffer containing 16 random bytes\n    costFactor: 11,\n    outputType: 'encoded', // return standard encoded string containing parameters needed to verify the key\n  });\n\n  console.log('Derived key:', key);\n\n  const isValid = await bcryptVerify({\n    password: 'pass',\n    hash: key,\n  });\n\n  console.log(isValid ? 'Valid password' : 'Invalid password');\n}\n\nrun();\n```\n\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### Calculating HMAC\n\nAll supported hash functions can be used to calculate HMAC. For the best performance, avoid calling createXXXX() in loops (see `Advanced usage with streaming input` section above)\n\n```javascript\nimport { createHMAC, createSHA3 } from 'hash-wasm';\n\nasync function run() {\n  const hashFunc = createSHA3(224); // SHA3-224\n  const hmac = await createHMAC(hashFunc, 'key');\n\n  const fruits = ['apple', 'raspberry', 'watermelon'];\n  console.log('Input:', fruits);\n\n  const codes = fruits.map(data => {\n    hmac.init();\n    hmac.update(data);\n    return hmac.digest();\n  });\n\n  console.log('HMAC:', codes);\n}\n\nrun();\n```\n\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### Calculating PBKDF2\n\nAll supported hash functions can be used to calculate PBKDF2. For the best performance, avoid calling createXXXX() in loops (see `Advanced usage with streaming input` section above)\n\n```javascript\nimport { pbkdf2, createSHA1 } from 'hash-wasm';\n\nasync function run() {\n  const salt = new Uint8Array(16);\n  window.crypto.getRandomValues(salt);\n\n  const key = await pbkdf2({\n    password: 'password',\n    salt,\n    iterations: 1000,\n    hashLength: 32,\n    hashFunction: createSHA1(),\n    outputType: 'hex',\n  });\n\n  console.log('Derived key:', key);\n}\n\nrun();\n```\n\n*\\* See [String encoding pitfalls](#string-encoding-pitfalls)*\n\n*\\*\\* See [API reference](#api)*\n\n### String encoding pitfalls\n\nYou should be aware that there may be multiple UTF-8 representations of a given string:\n```js\n'\\u00fc' // encodes the ü character\n'u\\u0308' // also encodes the ü character\n\n'\\u00fc' === 'u\\u0308' // false\n'ü' === 'ü' // false\n```\n\nAll algorithms defined in this library depend on the binary representation of the input string. Thus, it's highly recommended to normalize your strings before passing it to hash-wasm. You can use the `normalize()` built-in String function to archive this:\n```js\n'\\u00fc'.normalize() === 'u\\u0308'.normalize() // true\n\nconst te = new TextEncoder();\nte.encode('u\\u0308'); // Uint8Array(3) [117, 204, 136]\nte.encode('\\u00fc'); // Uint8Array(2) [195, 188]\n\nte.encode('u\\u0308'.normalize('NFKC')); // Uint8Array(2) [195, 188]\nte.encode('\\u00fc'.normalize('NFKC')); // Uint8Array(2) [195, 188]\n```\n\nYou can read more about this issue here: https://en.wikipedia.org/wiki/Unicode_equivalence\n\n### Resumable hashing\n\nYou can save the current internal state of the hash using the `.save()` function. This state may be written to disk or stored elsewhere in memory.\nYou can then use the `.load(state)` function to reload that state into a new instance of the hash, or back into the same instance.\n\nThis allows you to span the work of hashing a file across multiple processes (e.g. in environments with limited execution times like AWS Lambda, where large jobs need to be split across multiple invocations), or rewind the hash  to an earlier point in the stream. For example, the first process could:\n\n```js\n// first process starts hashing\nconst md5 = await createMD5();\nmd5.init();\nmd5.update(\"Hello, \");\nconst state = md5.save(); // save this state\n\n// second process resumes hashing from the stored state\nconst md5 = await createMD5();\nmd5.load(state);\nmd5.update(\"world!\");\nconsole.log(md5.digest()); // Prints 6cd3556deb0da54bca060b4c39479839 = md5(\"Hello, world!\")\n```\n\n*Note that both the saving and loading processes must be running compatible versions of the hash function (i.e. the hash function hasn't changed between the versions of hash-wasm used in the saving and loading processes). If the saved state is incompatible, `load()` will throw an exception.*\n\n*The saved state can contain information about the input, including plaintext input bytes, so from a security perspective it must be treated with the same care as the input data itself.*\n\n<br/>\n\nBrowser support\n=====\n\n<br/>\n\n| Chrome | Safari | Firefox | Edge | IE            | Node.js | Deno |\n|--------|--------|---------|------|---------------|---------|------|\n| 57+    | 11+    | 53+     | 16+  | Not supported | 8+      | 1+   |\n\n<br/>\n\nBenchmark\n=====\n\nYou can make your own measurements here: [link](https://daninet.github.io/hash-wasm-benchmark/)\n\nTwo scenarios were measured:\n- throughput with the short form (input size = 32 bytes)\n- throughput with the short form (input size = 1MB)\n\nResults:\n\n| MD5                         | throughput (32 bytes)    | throughput (1MB)          |\n|-----------------------------|--------------------------|---------------------------|\n| **hash-wasm 4.4.1**         | **57.43 MB/s**           | **596.64 MB/s**           |\n| spark-md5 3.0.1 (from npm)  | 28.08 MB/s (2.0x slower) | 110.12 MB/s (5.4x slower) |\n| md5-wasm 2.0.0 (from npm)   | 16.49 MB/s (3.4x slower) | 74.43 MB/s (8.0x slower)  |\n| crypto-js 4.0.0 (from npm)  | 3.80 MB/s (15x slower)   | 26.70 MB/s (22x slower)   |\n| node-forge 0.10.0 (from npm)| 9.28 MB/s (6.2x slower)  | 12.27 MB/s (49x slower)   |\n| md5 2.3.0 (from npm)        | 7.66 MB/s (7.5x slower)  | 11.42 MB/s (52x slower)   |\n\n#\n\n| SHA1                        | throughput (32 bytes)   | throughput (1MB)          |\n|-----------------------------|-------------------------|---------------------------|\n| **hash-wasm 4.4.1**         | **47.97 MB/s**          | **649.13 MB/s**           |\n| jsSHA 3.2.0 (from npm)      | 6.15 MB/s (7.8x slower) | 46.13 MB/s (14x slower)   |\n| crypto-js 4.0.0 (from npm)  | 4.10 MB/s (12x slower)  | 40.36 MB/s (16x slower)   |\n| sha1 1.1.1 (from npm)       | 6.86 MB/s (7.0x slower)   | 12.46 MB/s (52x slower)   |\n| node-forge 0.10.0 (from npm)| 8.71 MB/s (5.5x slower) | 12.86 MB/s (50x slower)   |\n\n#\n\n| SHA256                       | throughput (32 bytes)   | throughput (1MB)          |\n|------------------------------|-------------------------|---------------------------|\n| **hash-wasm 4.4.1**          | **35.67 MB/s**          | **254.40 MB/s**           |\n| sha256-wasm 2.1.2 (from npm) | 17.83 MB/s (2x slower)  | 164.13 MB/s (1.5x slower) |\n| jsSHA 3.2.0 (from npm)       | 5.57 MB/s (6.4x slower) | 35.81 MB/s (7.1x slower)  |\n| crypto-js 4.0.0 (from npm)   | 3.51 MB/s (10x slower)  | 36.48 MB/s (7x slower)    |\n| node-forge 0.10.0 (from npm) | 6.81 MB/s (5.2x slower) | 11.91 MB/s (21x slower)   |\n\n#\n\n| SHA3-512                   | throughput (32 bytes)    | throughput (1MB)         |\n|----------------------------|--------------------------|--------------------------|\n| **hash-wasm 4.4.1**        | **22.91 MB/s**           | **177.16 MB/s**          |\n| sha3-wasm 1.0.0 (from npm) | 7.16 MB/s (3.2x slower)  | 74.75 MB/s (2.4x slower) |\n| sha3 2.1.4 (from npm)      | 2.00 MB/s (11x slower)   | 6.48 MB/s (27x slower)   |\n| jsSHA 3.2.0 (from npm)     | 0.93 MB/s (24x slower)   | 2.09 MB/s (85x slower)   |\n\n#\n\n| XXHash64                     | throughput (32 bytes)    | throughput (1MB)            |\n|------------------------------|--------------------------|-----------------------------|\n| **hash-wasm 4.4.1**          | **88.33 MB/s**           | **12 012.74 MB/s**          |\n| xxhash-wasm 0.4.1 (from npm) | 28.44 MB/s (3.1x slower) | 11 296.84 MB/s              |\n| xxhashjs 0.2.2 (from npm)    | 0.37 MB/s (239x slower)  | 17.95 MB/s (669x slower)    |\n\n#\n\n| PBKDF2-SHA512 - 1000 iterations | operations per second (16 bytes) |\n|---------------------------------|----------------------------------|\n| **hash-wasm 4.4.1**             | **348 ops**                      |\n| pbkdf2 3.1.1 (from npm)         | 55 ops (6.3x slower)             |\n| crypto-js 4.0.0 (from npm)      | 13 ops (27x slower)              |\n\n#\n\n| Argon2id (m=512, t=8, p=1)       | operations per second (16 bytes) |\n|----------------------------------|----------------------------------|\n| **hash-wasm 4.4.1**              | **256 ops**                      |\n| argon2-browser 1.15.3 (from npm) | 104 ops (2.5x slower)            |\n| argon2-wasm 0.9.0 (from npm)     | 101 ops (2.5x slower)            |\n| argon2-wasm-pro 1.1.0 (from npm) | 100 ops (2.5x slower)            |\n\n<br/>\n\n\\* These measurements were made with `Chrome v89` on a Kaby Lake desktop CPU.\n\nAPI\n=====\n\n```ts\ntype IDataType = string | Buffer | Uint8Array | Uint16Array | Uint32Array;\n\n// all functions return hash in hex format\nadler32(data: IDataType): Promise<string>\nblake2b(data: IDataType, bits?: number, key?: IDataType): Promise<string> // default is 512 bits\nblake2s(data: IDataType, bits?: number, key?: IDataType): Promise<string> // default is 256 bits\nblake3(data: IDataType, bits?: number, key?: IDataType): Promise<string> // default is 256 bits\ncrc32(data: IDataType): Promise<string>\ncrc32c(data: IDataType): Promise<string>\nkeccak(data: IDataType, bits?: 224 | 256 | 384 | 512): Promise<string> // default is 512 bits\nmd4(data: IDataType): Promise<string>\nmd5(data: IDataType): Promise<string>\nripemd160(data: IDataType): Promise<string>\nsha1(data: IDataType): Promise<string>\nsha224(data: IDataType): Promise<string>\nsha256(data: IDataType): Promise<string>\nsha3(data: IDataType, bits?: 224 | 256 | 384 | 512): Promise<string> // default is 512 bits\nsha384(data: IDataType): Promise<string>\nsha512(data: IDataType): Promise<string>\nsm3(data: IDataType): Promise<string>\nwhirlpool(data: IDataType): Promise<string>\nxxhash32(data: IDataType, seed?: number): Promise<string>\nxxhash64(data: IDataType, seedLow?: number, seedHigh?: number): Promise<string>\nxxhash3(data: IDataType, seedLow?: number, seedHigh?: number): Promise<string>\nxxhash128(data: IDataType, seedLow?: number, seedHigh?: number): Promise<string>\n\ninterface IHasher {\n  init: () => IHasher;\n  update: (data: IDataType) => IHasher;\n  digest: (outputType: 'hex' | 'binary') => string | Uint8Array; // by default returns hex string\n  save: () => Uint8Array; // returns the internal state for later resumption\n  load: (state: Uint8Array) => IHasher; // loads a previously saved internal state\n  blockSize: number; // in bytes\n  digestSize: number; // in bytes\n}\n\ncreateAdler32(): Promise<IHasher>\ncreateBLAKE2b(bits?: number, key?: IDataType): Promise<IHasher> // default is 512 bits\ncreateBLAKE2s(bits?: number, key?: IDataType): Promise<IHasher> // default is 256 bits\ncreateBLAKE3(bits?: number, key?: IDataType): Promise<IHasher> // default is 256 bits\ncreateCRC32(): Promise<IHasher>\ncreateCRC32C(): Promise<IHasher>\ncreateKeccak(bits?: 224 | 256 | 384 | 512): Promise<IHasher> // default is 512 bits\ncreateMD4(): Promise<IHasher>\ncreateMD5(): Promise<IHasher>\ncreateRIPEMD160(): Promise<IHasher>\ncreateSHA1(): Promise<IHasher>\ncreateSHA224(): Promise<IHasher>\ncreateSHA256(): Promise<IHasher>\ncreateSHA3(bits?: 224 | 256 | 384 | 512): Promise<IHasher> // default is 512 bits\ncreateSHA384(): Promise<IHasher>\ncreateSHA512(): Promise<IHasher>\ncreateSM3(): Promise<IHasher>\ncreateWhirlpool(): Promise<IHasher>\ncreateXXHash32(seed: number): Promise<IHasher>\ncreateXXHash64(seedLow: number, seedHigh: number): Promise<IHasher>\ncreateXXHash3(seedLow: number, seedHigh: number): Promise<IHasher>\ncreateXXHash128(seedLow: number, seedHigh: number): Promise<IHasher>\n\ncreateHMAC(hashFunction: Promise<IHasher>, key: IDataType): Promise<IHasher>\n\npbkdf2({\n  password: IDataType, // password (or message) to be hashed\n  salt: IDataType, // salt (usually containing random bytes)\n  iterations: number, // number of iterations to perform\n  hashLength: number, // output size in bytes\n  hashFunction: Promise<IHasher>, // the return value of a function like createSHA1()\n  outputType?: 'hex' | 'binary', // by default returns hex string\n}): Promise<string | Uint8Array>\n\nscrypt({\n  password: IDataType, // password (or message) to be hashed\n  salt: IDataType, // salt (usually containing random bytes)\n  costFactor: number, // CPU/memory cost - must be a power of 2 (e.g. 1024)\n  blockSize: number, // block size parameter (8 is commonly used)\n  parallelism: number, // degree of parallelism\n  hashLength: number, // output size in bytes\n  outputType?: 'hex' | 'binary', // by default returns hex string\n}): Promise<string | Uint8Array>\n\ninterface IArgon2Options {\n  password: IDataType; // password (or message) to be hashed\n  salt: IDataType; // salt (usually containing random bytes)\n  iterations: number; // number of iterations to perform\n  parallelism: number; // degree of parallelism\n  memorySize: number; // amount of memory to be used in kibibytes (1024 bytes)\n  hashLength: number; // output size in bytes\n  outputType?: 'hex' | 'binary' | 'encoded'; // by default returns hex string\n}\n\nargon2i(options: IArgon2Options): Promise<string | Uint8Array>\nargon2d(options: IArgon2Options): Promise<string | Uint8Array>\nargon2id(options: IArgon2Options): Promise<string | Uint8Array>\n\nargon2Verify({\n  password: IDataType, // password\n  hash: string, // encoded hash\n}): Promise<boolean>\n\nbcrypt({\n  password: IDataType, // password\n  salt: IDataType, // salt (16 bytes long - usually containing random bytes)\n  costFactor: number, // number of iterations to perform (4 - 31)\n  outputType?: 'hex' | 'binary' | 'encoded', // by default returns encoded string\n}): Promise<string | Uint8Array>\n\nbcryptVerify({\n  password: IDataType, // password\n  hash: string, // encoded hash\n}): Promise<boolean>\n\n```\n\nFuture plans\n=====\n\n- Add more well-known algorithms\n- Write a polyfill which keeps bundle sizes low and enables running binaries containing newer WASM instructions\n- Use WebAssembly Bulk Memory Operations\n- Use WebAssembly SIMD instructions (expecting a 10-20% performance increase)\n- Enable multithreading where it's possible (like at Argon2)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Dani Biró\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nEmbedded C implementations might use other, similarly permissive licenses.\nCheck the beginning of the files from the /src directory.\n\nSpecial thank you to the authors of original C algorithms:\n- Alexander Peslyak <solar@openwall.com>\n- Aleksey Kravchenko <rhash.admin@gmail.com>\n- Colin Percival\n- Stephan Brumme <create@stephan-brumme.com>\n- Steve Reid <steve@edmweb.com>\n- Samuel Neves <sneves@dei.uc.pt>\n- Solar Designer <solar@openwall.com>\n- Project Nayuki\n- ARM Limited\n- Yanbo Li dreamfly281@gmail.com, goldboar@163.comYanbo Li\n- Mark Adler\n- Yann Collet\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hash-wasm/-/hash-wasm-4.9.0.tgz#7e9dcc9f7d6bd0cc802f2a58f24edce999744206",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hash-wasm/-/hash-wasm-4.9.0.tgz",
    "hash": "7e9dcc9f7d6bd0cc802f2a58f24edce999744206",
    "integrity": "sha512-7SW7ejyfnRxuOc7ptQHSf4LDoZaWOivfzqw+5rpcQku0nHfmicPKE51ra9BiRLAmT8+gGLestr1XroUkqdjL6w==",
    "registry": "npm",
    "packageName": "hash-wasm",
    "cacheIntegrity": "sha512-7SW7ejyfnRxuOc7ptQHSf4LDoZaWOivfzqw+5rpcQku0nHfmicPKE51ra9BiRLAmT8+gGLestr1XroUkqdjL6w== sha1-fp3Mn31r0MyALypY8k7c6Zl0QgY="
  },
  "registry": "npm",
  "hash": "7e9dcc9f7d6bd0cc802f2a58f24edce999744206"
}