{
  "manifest": {
    "name": "jimp",
    "version": "0.14.0",
    "description": "An image processing library written entirely in JavaScript (i.e. zero external or native dependencies)",
    "main": "dist/index.js",
    "module": "es/index.js",
    "browser": "browser/lib/jimp.js",
    "types": "types/index.d.ts",
    "typesVersions": {
      ">=3.1.0-0": {
        "*": [
          "types/ts3.1/index.d.ts"
        ]
      }
    },
    "tonicExampleFilename": "example.js",
    "files": [
      "browser",
      "dist",
      "es",
      "index.d.ts",
      "fonts",
      "types"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/oliver-moran/jimp.git"
    },
    "bugs": {
      "url": "https://github.com/oliver-moran/jimp/issues"
    },
    "scripts": {
      "test": "cross-env BABEL_ENV=test mocha --require @babel/register",
      "test:watch": "npm run test -- --reporter min --watch",
      "test:coverage": "nyc npm run test",
      "browser-build": "node tools/browser-build.js test",
      "build": "npm run build:browser && npm run build:node:production && npm run build:module",
      "build:watch": "npm run build:node:debug -- -- --watch --verbose",
      "build:debug": "npm run build:browser:debug && npm run build:node:debug",
      "build:module": "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
      "build:node": "babel src -d dist --source-maps --config-file ../../babel.config.js",
      "build:node:debug": "cross-env BABEL_ENV=development npm run build:node",
      "build:node:production": "cross-env BABEL_ENV=production npm run build:node",
      "build:browser": "cross-env BABEL_ENV=production node tools/browser-build.js prepublish",
      "build:browser:debug": "cross-env BABEL_ENV=development ENV=browser node tools/browser-build.js prepublish"
    },
    "keywords": [
      "image",
      "image processing",
      "image manipulation",
      "png",
      "jpg",
      "jpeg",
      "bmp",
      "resize",
      "scale",
      "crop"
    ],
    "author": {
      "name": "Oliver Moran",
      "email": "oliver.moran@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "@babel/runtime": "^7.7.2",
      "@jimp/custom": "^0.14.0",
      "@jimp/plugins": "^0.14.0",
      "@jimp/types": "^0.14.0",
      "regenerator-runtime": "^0.13.3"
    },
    "devDependencies": {
      "@babel/cli": "^7.7.0",
      "@babel/core": "^7.7.2",
      "@babel/plugin-proposal-class-properties": "^7.7.0",
      "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
      "@babel/preset-env": "^7.7.1",
      "@babel/register": "^7.7.0",
      "@jimp/test-utils": "^0.14.0",
      "babel-eslint": "^10.0.3",
      "babel-plugin-add-module-exports": "^1.0.2",
      "babel-plugin-istanbul": "^5.2.0",
      "babel-plugin-source-map-support": "^2.1.1",
      "babelify": "^10.0.0",
      "browserify": "^16.5.0",
      "cross-env": "^6.0.0",
      "dtslint": "^0.9.8",
      "envify": "^4.1.0",
      "eslint": "^6.4.0",
      "eslint-plugin-prettier": "^3.1.1",
      "express": "^4.17.1",
      "husky": "^3.0.5",
      "karma": "^4.3.0",
      "karma-browserify": "^6.1.0",
      "karma-chrome-launcher": "^3.1.0",
      "karma-firefox-launcher": "^1.2.0",
      "lerna": "^3.16.4",
      "lerna-changelog": "^0.8.2",
      "lint-staged": "^9.2.5",
      "mocha": "^6.2.0",
      "nyc": "^14.1.1",
      "prettier": "^1.18.2",
      "source-map-support": "^0.5.13",
      "tfilter": "^1.0.1",
      "uglify-js": "^3.6.0",
      "watchify": "^3.11.1",
      "xo": "^0.24.0"
    },
    "xo": false,
    "nyc": {
      "sourceMap": false,
      "instrument": false,
      "reporter": [
        "text",
        "text-summary",
        "lcov",
        "html"
      ],
      "exclude": [
        "src/modules/*.js",
        "test/*.js"
      ]
    },
    "gitHead": "777081348caf314a5f35d871702168c86ab2ca3b",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-jimp-0.14.0-fde55f69bdb918c1b01ac633d89a25853af85625-integrity/node_modules/jimp/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>Jimp</h1>\n  <p>JavaScript Image Manipulation Program</p>\n</div>\n\nThe \"JavaScript Image Manipulation Program\" :-)\n\nAn image processing library for Node written entirely in JavaScript, with zero native dependencies.\n\nThe default jimp configuration.\n\nSupported types:\n\n- `@jimp/jpeg`\n- `@jimp/png`\n- `@jimp/bmp`\n- `@jimp/tiff`\n- `@jimp/gif`\n\n## Installation\n\n`npm install --save jimp`\n\nExample usage (Promise will never resolve if callback is passed):\n\n```js\nvar Jimp = require('jimp');\n\n// open a file called \"lenna.png\"\nJimp.read('lenna.png', (err, lenna) => {\n  if (err) throw err;\n  lenna\n    .resize(256, 256) // resize\n    .quality(60) // set JPEG quality\n    .greyscale() // set greyscale\n    .write('lena-small-bw.jpg'); // save\n});\n```\n\nUsing promises:\n\n```js\nJimp.read('lenna.png')\n  .then(lenna => {\n    return lenna\n      .resize(256, 256) // resize\n      .quality(60) // set JPEG quality\n      .greyscale() // set greyscale\n      .write('lena-small-bw.jpg'); // save\n  })\n  .catch(err => {\n    console.error(err);\n  });\n```\n\n## TypeScript Usage\n\nIf you're using this library with TypeScript the method of importing slightly differs from JavaScript. Instead of using require, you must import it with ES6 default import scheme\n\n```ts\nimport Jimp from 'jimp';\n```\n\nThis requires setting the `allowSyntheticDefaultImports` compiler option to `true` in your `tsconfig`\n\n**Note 1**: `esModuleInterop` implicitly sets `allowSyntheticDefaultImports` to `true`\n\n**Note 2**: `allowSyntheticDefaultImports` nor `esModuleInterop` change the runtime behavior of your code at all. They are just flags that tells TypeScript you need the compatibility they offer.\n\n## Module Build\n\nIf you're using a web bundles (webpack, rollup, parcel) you can benefit from using the `module` build of jimp. Using the module build will allow your bundler to understand your code better and exclude things you aren't using.\n\n```js\nimport Jimp from 'jimp/es';\n```\n\n### WebPack\n\nIf you're using webpack you can set `process.browser` to true and your build of jimp will exclude certain parts, making it load faster.\n\n```js\n{\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.browser': 'true'\n    }),\n    ...\n  ],\n}\n```\n\n## Basic usage\n\nThe static `Jimp.read` method takes the path to a file, URL, dimensions, a Jimp instance or a buffer and returns a Promise:\n\n```js\nJimp.read('./path/to/image.jpg')\n  .then(image => {\n    // Do stuff with the image.\n  })\n  .catch(err => {\n    // Handle an exception.\n  });\n\nJimp.read('http://www.example.com/path/to/lenna.jpg')\n  .then(image => {\n    // Do stuff with the image.\n  })\n  .catch(err => {\n    // Handle an exception.\n  });\n\nJimp.read(jimpInstance)\n  .then(image => {\n    // Do stuff with the image.\n  })\n  .catch(err => {\n    // Handle an exception.\n  });\n\nJimp.read(buffer)\n  .then(image => {\n    // Do stuff with the image.\n  })\n  .catch(err => {\n    // Handle an exception.\n  });\n```\n\nIn some cases, you need to pass additional parameters with an image's URL. You can pass an object to the `Jimp.read` method:\n\n```js\nJimp.read({\n  url: 'http://www.example.com/path/to/lenna.jpg', // Required!\n  headers: {},\n  ...\n})\n  .then(image => {\n    // Do stuff with the image.\n  })\n  .catch(err => {\n    // Handle an exception.\n  });\n```\n\nJimp uses [phin](https://github.com/ethanent/phin) as it's HTTP client. Phin uses [`http.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_http_request_options_callback) or [`https.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/https.html#https_https_request_options_callback) methods for making HTTP requests. Phin parses a `url` with the `url.parse(...)` method and passes it with all the other parameters as an `options` to the [`http.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_http_request_options_callback) or [`https.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/https.html#https_https_request_options_callback) methods.\n\nBriefly speaking, you can pass any options from [`http.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_http_request_options_callback), [`https.request(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/https.html#https_https_request_options_callback) or even [`tls.connect(options[, callback])`](https://nodejs.org/dist/latest-v8.x/docs/api/tls.html#tls_tls_connect_options_callback).\n\nPhin parses a `url` and combines it with any options you want. This behavior can be very useful when you need to pass some additional `headers`. Also, you can pass `rejectUnauthorized: false` if you don't require an SSL certificate to be valid (it helps to prevent `unable to verify the first certificate` error).\n\nThe convenience method `Jimp.create` also exists. It is just a wrapper around `Jimp.read`.\n\n### Custom Constructor\n\nYou might want to initialize jimp in so custom way. To do this Jimp exposes the static function `appendConstructorOption`. The appended constructor options run after all the defaults.\n\nTo define a custom constructor provide a name for it, a function to call to determine if the arguments provided to jimp match your constructor, and a function called where you can construct the image however you want.\n\n```js\nJimp.appendConstructorOption(\n  'Name of Option',\n  args => arg.hasSomeCustomThing,\n  function(resolve, reject, args) {\n    this.bitmap = customParser(args);\n    resolve();\n  }\n);\n```\n\nIf you don't want to handle parsing the bitmap. For example if you want to do some sort of authentication for URL request. Jimp exposes `parseBitmap` so you can fall back to jimp to do the heavy lifting.\n\nParse bitmap takes the raw image data in a Buffer, a path (optional), and a node style callback.\n\n```js\nJimp.appendConstructorOption('Custom Url', options => options.url, function(\n  resolve,\n  reject,\n  options\n) {\n  phin(options, (err, res) => {\n    if (err) {\n      return reject(err);\n    }\n\n    this.parseBitmap(res.body, options.url, err => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n});\n```\n\n### Methods\n\nOnce the promise is fulfilled, the following methods can be called on the image:\n\n```js\n/* Resize */\nimage.contain( w, h[, alignBits || mode, mode] );    // scale the image to the given width and height, some parts of the image may be letter boxed\nimage.cover( w, h[, alignBits || mode, mode] );      // scale the image to the given width and height, some parts of the image may be clipped\nimage.resize( w, h[, mode] );     // resize the image. Jimp.AUTO can be passed as one of the values.\nimage.scale( f[, mode] );         // scale the image by the factor f\nimage.scaleToFit( w, h[, mode] ); // scale the image to the largest size that fits inside the given width and height\n\n// An optional resize mode can be passed with all resize methods.\n\n/* Crop */\nimage.autocrop([tolerance, frames]); // automatically crop same-color borders from image (if any), frames must be a Boolean\nimage.autocrop(options);          // automatically crop same-color borders from image (if any), options may contain tolerance, cropOnlyFrames, cropSymmetric, leaveBorder\nimage.crop( x, y, w, h );         // crop to the given region\n\n/* Composing */\nimage.blit( src, x, y, [srcx, srcy, srcw, srch] );\n                                  // blit the image with another Jimp image at x, y, optionally cropped.\nimage.composite( src, x, y, [{ mode, opacitySource, opacityDest }] );     // composites another Jimp image over this image at x, y\nimage.mask( src, x, y );          // masks the image with another Jimp image at x, y using average pixel value\nimage.convolute( kernel );        // applies a convolution kernel matrix to the image or a region\n\n/* Flip and rotate */\nimage.flip( horz, vert );         // flip the image horizontally or vertically\nimage.mirror( horz, vert );       // an alias for flip\nimage.rotate( deg[, mode] );      // rotate the image clockwise by a number of degrees. Optionally, a resize mode can be passed. If `false` is passed as the second parameter, the image width and height will not be resized.\n\n/* Colour */\nimage.brightness( val );          // adjust the brighness by a value -1 to +1\nimage.contrast( val );            // adjust the contrast by a value -1 to +1\nimage.dither565();                // ordered dithering of the image and reduce color space to 16-bits (RGB565)\nimage.greyscale();                // remove colour from the image\nimage.invert();                   // invert the image colours\nimage.normalize();                // normalize the channels in an image\n\n/* Alpha channel */\nimage.hasAlpha();                     // determines if an image contains opaque pixels\nimage.fade( f );                  // an alternative to opacity, fades the image by a factor 0 - 1. 0 will haven no effect. 1 will turn the image\nimage.opacity( f );               // multiply the alpha channel by each pixel by the factor f, 0 - 1\nimage.opaque();                   // set the alpha channel on every pixel to fully opaque\nimage.background( hex );          // set the default new pixel colour (e.g. 0xFFFFFFFF or 0x00000000) for by some operations (e.g. image.contain and\n\n/* Blurs */\nimage.gaussian( r );              // Gaussian blur the image by r pixels (VERY slow)\nimage.blur( r );                  // fast blur the image by r pixels\n\n/* Effects */\nimage.posterize( n );             // apply a posterization effect with n level\nimage.sepia();                    // apply a sepia wash to the image\nimage.pixelate( size[, x, y, w, h ]);  // apply a pixelation effect to the image or a region\n\n/* 3D */\nimage.displace( map, offset );    // displaces the image pixels based on the provided displacement map. Useful for making stereoscopic 3D images.\n```\n\nSome of these methods are irreversible, so it can be useful to perform them on a clone of the original image:\n\n```js\nimage.clone(); // returns a clone of the image\n```\n\n(Contributions of more methods are welcome!)\n\n### Resize modes\n\nThe default resizing algorithm uses a bilinear method as follows:\n\n```js\nimage.resize(250, 250); // resize the image to 250 x 250\nimage.resize(Jimp.AUTO, 250); // resize the height to 250 and scale the width accordingly\nimage.resize(250, Jimp.AUTO); // resize the width to 250 and scale the height accordingly\n```\n\nOptionally, the following constants can be passed to choose a particular resizing algorithm:\n\n```js\nJimp.RESIZE_NEAREST_NEIGHBOR;\nJimp.RESIZE_BILINEAR;\nJimp.RESIZE_BICUBIC;\nJimp.RESIZE_HERMITE;\nJimp.RESIZE_BEZIER;\n```\n\nFor example:\n\n```js\nimage.resize(250, 250, Jimp.RESIZE_BEZIER);\n```\n\n### Align modes\n\nThe following constants can be passed to the `image.cover`, `image.contain` and `image.print` methods:\n\n```js\nJimp.HORIZONTAL_ALIGN_LEFT;\nJimp.HORIZONTAL_ALIGN_CENTER;\nJimp.HORIZONTAL_ALIGN_RIGHT;\n\nJimp.VERTICAL_ALIGN_TOP;\nJimp.VERTICAL_ALIGN_MIDDLE;\nJimp.VERTICAL_ALIGN_BOTTOM;\n```\n\nWhere the align mode changes the position of the associated axis as described in the table below.\n\n| Align Mode                     | Axis Point                                      |\n| ------------------------------ | ----------------------------------------------- |\n| `Jimp.HORIZONTAL_ALIGN_LEFT`   | Positions the x-axis at the left of the image   |\n| `Jimp.HORIZONTAL_ALIGN_CENTER` | Positions the x-axis at the center of the image |\n| `Jimp.HORIZONTAL_ALIGN_RIGHT`  | Positions the x-axis at the right of the image  |\n| `Jimp.VERTICAL_ALIGN_TOP`      | Positions the y-axis at the top of the image    |\n| `Jimp.VERTICAL_ALIGN_MIDDLE`   | Positions the y-axis at the center of the image |\n| `Jimp.VERTICAL_ALIGN_BOTTOM`   | Positions the y-axis at the bottom of the image |\n\nFor example:\n\n```js\nimage.contain(250, 250, Jimp.HORIZONTAL_ALIGN_LEFT | Jimp.VERTICAL_ALIGN_TOP);\n```\n\nDefault align modes for `image.cover` and `image.contain` are:\n\n```js\nJimp.HORIZONTAL_ALIGN_CENTER | Jimp.VERTICAL_ALIGN_MIDDLE;\n```\n\nDefault align modes for `image.print` are:\n\n```js\n{\n    alignmentX: Jimp.HORIZONTAL_ALIGN_LEFT,\n    alignmentY: Jimp.VERTICAL_ALIGN_TOP\n}\n```\n\n### Compositing and blend modes\n\nThe following modes can be used for compositing two images together. mode defaults to Jimp.BLEND_SOURCE_OVER.\n\n```js\nJimp.BLEND_SOURCE_OVER;\nJimp.BLEND_DESTINATION_OVER;\nJimp.BLEND_MULTIPLY;\nJimp.BLEND_ADD;\nJimp.BLEND_SCREEN;\nJimp.BLEND_OVERLAY;\nJimp.BLEND_DARKEN;\nJimp.BLEND_LIGHTEN;\nJimp.BLEND_HARDLIGHT;\nJimp.BLEND_DIFFERENCE;\nJimp.BLEND_EXCLUSION;\n```\n\n```js\nimage.composite(srcImage, 100, 0, {\n  mode: Jimp.BLEND_MULTIPLY,\n  opacitySource: 0.5,\n  opacityDest: 0.9\n});\n```\n\n### Writing text\n\nJimp supports basic typography using BMFont format (.fnt) even ones in different languages! Just find a bitmap font that is suitable [bitmap fonts](https://en.wikipedia.org/wiki/Bitmap_fonts):\n\n```js\nJimp.loadFont(pathOrURL).then(font => {\n  // load font from .fnt file\n  image.print(font, x, y, message); // print a message on an image. message can be a any type\n  image.print(font, x, y, message, maxWidth); // print a message on an image with text wrapped at maxWidth\n});\n```\n\nAlignment modes are supported by replacing the `str` argument with an object containing `text`, `alignmentX` and `alignmentY`. `alignmentX` defaults to `Jimp.HORIZONTAL_ALIGN_LEFT` and `alignmentY` defaults to `Jimp.VERTICAL_ALIGN_TOP`.\n\n```js\nJimp.loadFont(pathOrURL).then(font => {\n  image.print(\n    font,\n    x,\n    y,\n    {\n      text: 'Hello world!',\n      alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n      alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE\n    },\n    maxWidth,\n    maxHeight\n  ); // prints 'Hello world!' on an image, middle and center-aligned, when x = 0 and y = 0\n});\n```\n\n```js\nJimp.loadFont(path, cb); // using a callback pattern\n```\n\nBMFont fonts are raster based and fixed in size and colour. Jimp comes with a set of fonts that can be used on images:\n\n```js\nJimp.FONT_SANS_8_BLACK; // Open Sans, 8px, black\nJimp.FONT_SANS_10_BLACK; // Open Sans, 10px, black\nJimp.FONT_SANS_12_BLACK; // Open Sans, 12px, black\nJimp.FONT_SANS_14_BLACK; // Open Sans, 14px, black\nJimp.FONT_SANS_16_BLACK; // Open Sans, 16px, black\nJimp.FONT_SANS_32_BLACK; // Open Sans, 32px, black\nJimp.FONT_SANS_64_BLACK; // Open Sans, 64px, black\nJimp.FONT_SANS_128_BLACK; // Open Sans, 128px, black\n\nJimp.FONT_SANS_8_WHITE; // Open Sans, 8px, white\nJimp.FONT_SANS_16_WHITE; // Open Sans, 16px, white\nJimp.FONT_SANS_32_WHITE; // Open Sans, 32px, white\nJimp.FONT_SANS_64_WHITE; // Open Sans, 64px, white\nJimp.FONT_SANS_128_WHITE; // Open Sans, 128px, white\n```\n\nThese can be used as follows:\n\n```js\nJimp.loadFont(Jimp.FONT_SANS_32_BLACK).then(font => {\n  image.print(font, 10, 10, 'Hello world!');\n});\n```\n\n#### Measuring text\n\nIf you need to do calculations on where to place your text jimp provides two methods that measure how wide and how tall a piece of text will be. You can use these methods to lay out multiple pieces of text in relation to each other\n\n```js\nJimp.measureText(Jimp.FONT_SANS_32_BLACK, 'Some string'); // width of text\nJimp.measureTextHeight(Jimp.FONT_SANS_32_BLACK, 'Some string', 100); // height of text\n```\n\n#### Staggering Text\n\nIf you need to stagger text position along the x or y-axis the print method also returns the final coordinates as an argument to the callback.\n\n```js\nJimp.loadFont(Jimp.FONT_SANS_32_BLACK).then(font => {\n  image.print(\n    font,\n    10,\n    10,\n    'Hello world that wraps!',\n    50,\n    (err, image, { x, y }) => {\n      image.print(font, x, y + 20, 'More text on another line', 50);\n    }\n  );\n});\n```\n\nOnline tools are also available to convert TTF fonts to BMFont format. They can be used to create color font or sprite packs.\n\n:star: [Littera](http://kvazars.com/littera/)\n\n:star: [Hiero](https://github.com/libgdx/libgdx/wiki/Hiero)\n\n## Writing to files and buffers\n\n### Writing to files\n\nThe image can be written to disk in PNG, JPEG or BMP format (based on the save path extension or if no extension is provided the original image's MIME type which, if not available, defaults to PNG) using:\n\n```js\nimage.write(path, cb); // Node-style callback will be fired when write is successful\nimage.writeAsync(path); // Returns Promise\n```\n\nThe original extension for an image (or \"png\") can accessed as using `image.getExtension()`. The following will save an image using its original format:\n\n```js\nvar file = 'new_name.' + image.getExtension();\n//or\nvar file = 'new_name'; // with no extension\nimage.write(file);\n```\n\n### Writing to Buffers\n\nA PNG, JPEG or BMP binary Buffer of an image (e.g. for storage in a database) can be generated using:\n\n```js\nimage.getBuffer(mime, cb); // Node-style callback will be fired with result\nimage.getBufferAsync(mime); // Returns Promise\n```\n\nFor convenience, supported MIME types are available as static properties:\n\n```js\nJimp.MIME_PNG; // \"image/png\"\nJimp.MIME_JPEG; // \"image/jpeg\"\nJimp.MIME_BMP; // \"image/bmp\"\n```\n\nIf `Jimp.AUTO` is passed as the MIME type then the original MIME type for the image (or \"image/png\") will be used. Alternatively, `image.getMIME()` will return the original MIME type of the image (or \"image/png\").\n\n### Data URI\n\nA Base64 data URI can be generated in the same way as a Buffer, using:\n\n```js\nimage.getBase64(mime, cb); // Node-style callback will be fired with result\nimage.getBase64Async(mime); // Returns Promise\n```\n\n### PNG and JPEG quality\n\nThe quality of JPEGs can be set with:\n\n```js\nimage.quality(n); // set the quality of saved JPEG, 0 - 100\n```\n\nThe format of PNGs can be set with:\n\n```js\nimage.rgba(bool); // set whether PNGs are saved as RGBA (true, default) or RGB (false)\nimage.filterType(number); // set the filter type for the saved PNG\nimage.deflateLevel(number); // set the deflate level for the saved PNG\nJimp.deflateStrategy(number); // set the deflate for the saved PNG (0-3)\n```\n\nFor convenience, supported filter types are available as static properties:\n\n```js\nJimp.PNG_FILTER_AUTO; // -1\nJimp.PNG_FILTER_NONE; //  0\nJimp.PNG_FILTER_SUB; //  1\nJimp.PNG_FILTER_UP; //  2\nJimp.PNG_FILTER_AVERAGE; //  3\nJimp.PNG_FILTER_PATH; //  4\n```\n\n## Advanced usage\n\n### Colour manipulation\n\nJimp supports advanced colour manipulation using a single method as follows:\n\n```js\nimage.color([\n  { apply: 'hue', params: [-90] },\n  { apply: 'lighten', params: [50] },\n  { apply: 'xor', params: ['#06D'] }\n]);\n```\n\nThe method supports the following modifiers:\n\n| Modifier                | Description                                                                                                                                                                                                      |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **lighten** {amount}    | Lighten the color a given amount, from 0 to 100. Providing 100 will always return white (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                         |\n| **brighten** {amount}   | Brighten the color a given amount, from 0 to 100 (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                |\n| **darken** {amount}     | Darken the color a given amount, from 0 to 100. Providing 100 will always return black (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                          |\n| **desaturate** {amount} | Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale (works through [TinyColor](https://github.com/bgrins/TinyColor))                                         |\n| **saturate** {amount}   | Saturate the color a given amount, from 0 to 100 (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                |\n| **greyscale** {amount}  | Completely desaturates a color into greyscale (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                   |\n| **spin** {degree}       | Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing - since it sets the hue back to what it was before. (works through [TinyColor](https://github.com/bgrins/TinyColor)) |\n| **hue** {degree}        | Alias for **spin**                                                                                                                                                                                               |\n| **mix** {color, amount} | Mixes colors by their RGB component values. Amount is opacity of overlaying color                                                                                                                                |\n| **tint** {amount}       | Same as applying **mix** with white color                                                                                                                                                                        |\n| **shade** {amount}      | Same as applying **mix** with black color                                                                                                                                                                        |\n| **xor** {color}         | Treats the two colors as bitfields and applies an XOR operation to the red, green, and blue components                                                                                                           |\n| **red** {amount}        | Modify Red component by a given amount                                                                                                                                                                           |\n| **green** {amount}      | Modify Green component by a given amount                                                                                                                                                                         |\n| **blue** {amount}       | Modify Blue component by a given amount                                                                                                                                                                          |\n\n### Convolution matrix\n\nSum neighbor pixels weighted by the kernel matrix. You can find a nice explanation with examples at [GIMP's Convolution Matrix plugin](https://docs.gimp.org/2.6/en/plug-in-convmatrix.html)\n\nImplement emboss effect:\n\n```js\nimage.convolute([[-2, -1, 0], [-1, 1, 1], [0, 1, 2]]);\n```\n\n### Low-level manipulation\n\nJimp enables low-level manipulation of images in memory through the bitmap property of each Jimp object:\n\n```js\nimage.bitmap.data; // a Buffer of the raw bitmap data\nimage.bitmap.width; // the width of the image\nimage.bitmap.height; // the height of the image\n```\n\nThis data can be manipulated directly, but remember: garbage in, garbage out.\n\nA helper method is available to scan a region of the bitmap:\n\n```js\nimage.scan(x, y, w, h, f); // scan a given region of the bitmap and call the function f on every pixel\n```\n\nExample usage:\n\n```js\nimage.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n  // x, y is the position of this pixel on the image\n  // idx is the position start position of this rgba tuple in the bitmap Buffer\n  // this is the image\n\n  var red = this.bitmap.data[idx + 0];\n  var green = this.bitmap.data[idx + 1];\n  var blue = this.bitmap.data[idx + 2];\n  var alpha = this.bitmap.data[idx + 3];\n\n  // rgba values run from 0 - 255\n  // e.g. this.bitmap.data[idx] = 0; // removes red from this pixel\n});\n```\n\nIf you need to do something with the image at the end of the scan:\n\n```js\nimage.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n  // do your stuff..\n\n  if (x == image.bitmap.width - 1 && y == image.bitmap.height - 1) {\n    // image scan finished, do your stuff\n  }\n});\n```\n\nIt's possible to make an iterator scan with a `for ... of`, if you want to `break` the scan before it reaches the end, but note, that this iterator has a huge performance implication:\n\n```js\nfor (const { x, y, idx, image } of image.scanIterator(\n  0,\n  0,\n  image.bitmap.width,\n  image.bitmap.height\n)) {\n}\n```\n\nA helper to locate a particular pixel within the raw bitmap buffer:\n\n```js\nimage.getPixelIndex(x, y); // returns the index within image.bitmap.data\n```\n\nOne of the following may be optionally passed as a third parameter to indicate a strategy for x, y positions that are outside of boundaries of the image:\n\n```js\nJimp.EDGE_EXTEND = 1;\nJimp.EDGE_WRAP = 2;\nJimp.EDGE_CROP = 3;\n```\n\nAlternatively, you can manipulate individual pixels using the following these functions:\n\n```js\nimage.getPixelColor(x, y); // returns the colour of that pixel e.g. 0xFFFFFFFF\nimage.setPixelColor(hex, x, y); // sets the colour of that pixel\n```\n\nTwo static helper functions exist to convert RGBA values into single integer (hex) values:\n\n```js\nJimp.rgbaToInt(r, g, b, a); // e.g. converts 255, 255, 255, 255 to 0xFFFFFFFF\nJimp.intToRGBA(hex); // e.g. converts 0xFFFFFFFF to {r: 255, g: 255, b: 255, a:255}\n```\n\nYou can convert a css color (Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to its hexadecimal equivalent:\n\n```js\nJimp.cssColorToHex(cssColor); // e.g. converts #FF00FF to 0xFF00FFFF\n```\n\n### Creating new images\n\nIf you want to begin with an empty Jimp image, you can call the Jimp constructor passing the width and height of the image to create and a Node-style callback:\n\n```js\nnew Jimp(256, 256, (err, image) => {\n  // this image is 256 x 256, every pixel is set to 0x00000000\n});\n```\n\nYou can optionally set the pixel colour as follows:\n\n```js\nnew Jimp(256, 256, 0xff0000ff, (err, image) => {\n  // this image is 256 x 256, every pixel is set to 0xFF0000FF\n});\n```\n\nOr you can use a css color format:\n\n```js\nnew Jimp(256, 256, '#FF00FF', (err, image) => {\n  // this image is 256 x 256, every pixel is set to #FF00FF\n});\n```\n\nYou can also initialize a new Jimp image with a raw image buffer:\n\n```js\nnew Jimp({ data: buffer, width: 1280, height: 768 }, (err, image) => {\n  // this image is 1280 x 768, pixels are loaded from the given buffer.\n});\n```\n\nThis can be useful for interoperating with other image processing libraries. `buffer` is expected to be four-channel (rgba) image data.\n\n## Comparing images\n\nTo generate a [perceptual hash](https://en.wikipedia.org/wiki/Perceptual_hashing) of a Jimp image, based on the [pHash](http://phash.org/) algorithm, use:\n\n```js\nimage.hash(); // aHgG4GgoFjA\n```\n\nBy default the hash is returned as base 64. The hash can be returned at another base by passing a number from 2 to 64 to the method:\n\n```js\nimage.hash(2); // 1010101011010000101010000100101010010000011001001001010011100100\n```\n\nThere are 18,446,744,073,709,551,615 unique hashes. The hamming distance between the binary representation of these hashes can be used to find similar-looking images.\n\nTo calculate the hamming distance between two Jimp images based on their perceptual hash use:\n\n```js\nJimp.distance(image1, image2); // returns a number 0-1, where 0 means the two images are perceived to be identical\n```\n\nJimp also allows the diffing of two Jimp images using [PixelMatch](https://github.com/mapbox/pixelmatch) as follows:\n\n```js\nvar diff = Jimp.diff(image1, image2, threshold); // threshold ranges 0-1 (default: 0.1)\ndiff.image; // a Jimp image showing differences\ndiff.percent; // the proportion of different pixels (0-1), where 0 means the images are pixel identical\n```\n\nUsing a mix of hamming distance and pixel diffing to compare images, the following code has a 99% success rate of detecting the same image from a random sample (with 1% false positives). The test this figure is drawn from attempts to match each image from a sample of 120 PNGs against 120 corresponding JPEGs saved at a quality setting of 60.\n\n```js\nvar distance = Jimp.distance(png, jpeg); // perceived distance\nvar diff = Jimp.diff(png, jpeg); // pixel difference\n\nif (distance < 0.15 || diff.percent < 0.15) {\n  // images match\n} else {\n  // not a match\n}\n```\n\nYou can also calculate the raw pHash (no padding or custom base). You can then use this in `distanceFromHash` to calculate the hash distance from a loaded image.\n\n```js\nconst hash1 = image1.pHash();\nconst hash2 = image2.pHash();\n\nimage2.distanceFromHash(hash1);\nJimp.compareHashes(hash1, hash2); // same result as above\n```\n\n## Chaining or callbacks\n\nMost instance methods can be chained together, for example as follows:\n\n```js\nJimp.read('lenna.png').then(image => {\n  image\n    .greyscale()\n    .scale(0.5)\n    .write('lena-half-bw.png');\n});\n```\n\nAlternatively, methods can be passed Node-style callbacks:\n\n```js\nJimp.read('lenna.png').then(image => {\n  image.greyscale((err, image) => {\n    image.scale(0.5, (err, image) => {\n      image.write('lena-half-bw.png');\n    });\n  });\n});\n```\n\nThe Node-style callback pattern allows Jimp to be used with frameworks that expect or build on the Node-style callback pattern.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jimp/-/jimp-0.14.0.tgz#fde55f69bdb918c1b01ac633d89a25853af85625",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jimp/-/jimp-0.14.0.tgz",
    "hash": "fde55f69bdb918c1b01ac633d89a25853af85625",
    "integrity": "sha512-8BXU+J8+SPmwwyq9ELihpSV4dWPTiOKBWCEgtkbnxxAVMjXdf3yGmyaLSshBfXc8sP/JQ9OZj5R8nZzz2wPXgA==",
    "registry": "npm",
    "packageName": "jimp",
    "cacheIntegrity": "sha512-8BXU+J8+SPmwwyq9ELihpSV4dWPTiOKBWCEgtkbnxxAVMjXdf3yGmyaLSshBfXc8sP/JQ9OZj5R8nZzz2wPXgA== sha1-/eVfab25GMGwGsYz2JolhTr4ViU="
  },
  "registry": "npm",
  "hash": "fde55f69bdb918c1b01ac633d89a25853af85625"
}