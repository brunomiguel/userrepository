{
  "manifest": {
    "name": "pngjs",
    "version": "6.0.0",
    "description": "PNG encoder/decoder in pure JS, supporting any bit size & interlace, async & sync with full test suite.",
    "contributors": [
      {
        "name": "Alexandre ParÃ©"
      },
      {
        "name": "Gaurav Mali"
      },
      {
        "name": "Gusts Kaksis"
      },
      {
        "name": "Kuba Niegowski"
      },
      {
        "name": "Luke Page"
      },
      {
        "name": "Pietajan De Potter"
      },
      {
        "name": "Steven Sojka"
      },
      {
        "name": "liangzeng"
      },
      {
        "name": "Michael Vogt"
      },
      {
        "name": "Xin-Xin Wang"
      },
      {
        "name": "toriningen"
      },
      {
        "name": "Eugene Kulabuhov"
      }
    ],
    "homepage": "https://github.com/lukeapage/pngjs",
    "keywords": [
      "PNG",
      "decoder",
      "encoder",
      "js-png",
      "node-png",
      "parser",
      "png",
      "png-js",
      "png-parse",
      "pngjs"
    ],
    "engines": {
      "node": ">=12.13.0"
    },
    "main": "./lib/png.js",
    "files": [
      "browser.js",
      "lib/"
    ],
    "scripts": {
      "build": "yarn prepublish",
      "prepublish": "yarn browserify",
      "browserify": "browserify lib/png.js --standalone png > browser.js",
      "coverage": "nyc --reporter=lcov --reporter=text-summary tape test/*-spec.js nolarge",
      "test": "yarn lint && yarn prettier:check && tape test/*-spec.js | tap-dot && node test/run-compare",
      "lint": "eslint .",
      "prettier:write": "prettier --write .",
      "prettier:check": "prettier --check ."
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/lukeapage/pngjs.git"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/lukeapage/pngjs/issues"
    },
    "devDependencies": {
      "browserify": "17.0.0",
      "buffer-equal": "1.0.0",
      "codecov": "3.7.1",
      "connect": "3.7.0",
      "eslint": "7.8.1",
      "eslint-config-prettier": "6.14.0",
      "nyc": "15.1.0",
      "prettier": "2.1.1",
      "puppeteer": "5.4.0",
      "serve-static": "1.14.1",
      "tap-dot": "2.0.0",
      "tape": "5.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pngjs-6.0.0-integrity/node_modules/pngjs/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://travis-ci.com/lukeapage/pngjs.svg?branch=master)](https://travis-ci.com/lukeapage/pngjs) [![Build status](https://ci.appveyor.com/api/projects/status/qo5x8ayutr028108/branch/master?svg=true)](https://ci.appveyor.com/project/lukeapage/pngjs/branch/master) [![codecov](https://codecov.io/gh/lukeapage/pngjs/branch/master/graph/badge.svg)](https://codecov.io/gh/lukeapage/pngjs) [![npm version](https://badge.fury.io/js/pngjs.svg)](http://badge.fury.io/js/pngjs)\n\n# pngjs\n\nSimple PNG encoder/decoder for Node.js with no dependencies.\n\nBased on the original [pngjs](https://github.com/niegowski/node-pngjs) with the follow enhancements.\n\n- Support for reading 1,2,4 & 16 bit files\n- Support for reading interlace files\n- Support for reading `tTRNS` transparent colours\n- Support for writing colortype 0 (grayscale), colortype 2 (RGB), colortype 4 (grayscale alpha) and colortype 6 (RGBA)\n- Sync interface as well as async\n- API compatible with pngjs and node-pngjs\n\nKnown lack of support for:\n\n- Extended PNG e.g. Animation\n- Writing in colortype 3 (indexed color)\n\n# Table of Contents\n\n- [Requirements](#requirements)\n- [Comparison Table](#comparison-table)\n- [Tests](#tests)\n- [Installation](#installation)\n- [Browser](#browser)\n- [Example](#example)\n- [Async API](#async-api)\n- [Sync API](#sync-api)\n- [Changelog](#changelog)\n\n# Comparison Table\n\n| Name          | Forked From | Sync | Async | 16 Bit | 1/2/4 Bit | Interlace | Gamma  | Encodes | Tested |\n| ------------- | ----------- | ---- | ----- | ------ | --------- | --------- | ------ | ------- | ------ |\n| pngjs         |             | Yes  | Yes   | Yes    | Yes       | Yes       | Yes    | Yes     | Yes    |\n| node-png      | pngjs       | No   | Yes   | No     | No        | No        | Hidden | Yes     | Manual |\n| png-coder     | pngjs       | No   | Yes   | Yes    | No        | No        | Hidden | Yes     | Manual |\n| pngparse      |             | No   | Yes   | No     | Yes       | No        | No     | No      | Yes    |\n| pngparse-sync | pngparse    | Yes  | No    | No     | Yes       | No        | No     | No      | Yes    |\n| png-async     |             | No   | Yes   | No     | No        | No        | No     | Yes     | Yes    |\n| png-js        |             | No   | Yes   | No     | No        | No        | No     | No      | No     |\n\nNative C++ node decoders:\n\n- png\n- png-sync (sync version of above)\n- pixel-png\n- png-img\n\n# Tests\n\nTested using [PNG Suite](http://www.schaik.com/pngsuite/). We read every file into pngjs, output it in standard 8bit colour, synchronously and asynchronously, then compare the original with the newly saved images.\n\nTo run the tests, fetch the repo (tests are not distributed via npm) and install with `npm i`, run `npm test`.\n\nThe only thing not converted is gamma correction - this is because multiple vendors will do gamma correction differently, so the tests will have different results on different browsers.\n\n# Installation\n\n```\n$ npm install pngjs  --save\n```\n\n# Browser\n\nThe package has been build with a [Browserify](browserify.org) version (`npm run browserify`) and you can use the browser version by including in your code:\n\n```\nimport { PNG } from 'pngjs/browser';\n```\n\n# Example\n\n```js\nvar fs = require(\"fs\"),\n  PNG = require(\"pngjs\").PNG;\n\nfs.createReadStream(\"in.png\")\n  .pipe(\n    new PNG({\n      filterType: 4,\n    })\n  )\n  .on(\"parsed\", function () {\n    for (var y = 0; y < this.height; y++) {\n      for (var x = 0; x < this.width; x++) {\n        var idx = (this.width * y + x) << 2;\n\n        // invert color\n        this.data[idx] = 255 - this.data[idx];\n        this.data[idx + 1] = 255 - this.data[idx + 1];\n        this.data[idx + 2] = 255 - this.data[idx + 2];\n\n        // and reduce opacity\n        this.data[idx + 3] = this.data[idx + 3] >> 1;\n      }\n    }\n\n    this.pack().pipe(fs.createWriteStream(\"out.png\"));\n  });\n```\n\nFor more examples see `examples` folder.\n\n# Async API\n\nAs input any color type is accepted (grayscale, rgb, palette, grayscale with alpha, rgb with alpha) but 8 bit per sample (channel) is the only supported bit depth. Interlaced mode is not supported.\n\n## Class: PNG\n\n`PNG` is readable and writable `Stream`.\n\n### Options\n\n- `width` - use this with `height` if you want to create png from scratch\n- `height` - as above\n- `checkCRC` - whether parser should be strict about checksums in source stream (default: `true`)\n- `deflateChunkSize` - chunk size used for deflating data chunks, this should be power of 2 and must not be less than 256 and more than 32\\*1024 (default: 32 kB)\n- `deflateLevel` - compression level for deflate (default: 9)\n- `deflateStrategy` - compression strategy for deflate (default: 3)\n- `deflateFactory` - deflate stream factory (default: `zlib.createDeflate`)\n- `filterType` - png filtering method for scanlines (default: -1 => auto, accepts array of numbers 0-4)\n- `colorType` - the output colorType - see constants. 0 = grayscale, no alpha, 2 = color, no alpha, 4 = grayscale & alpha, 6 = color & alpha. Default currently 6, but in the future may calculate best mode.\n- `inputColorType` - the input colorType - see constants. Default is 6 (RGBA)\n- `bitDepth` - the bitDepth of the output, 8 or 16 bits. Input data is expected to have this bit depth.\n  16 bit data is expected in the system endianness (Default: 8)\n- `inputHasAlpha` - whether the input bitmap has 4 bytes per pixel (rgb and alpha) or 3 (rgb - no alpha).\n- `bgColor` - an object containing red, green, and blue values between 0 and 255\n  that is used when packing a PNG if alpha is not to be included (default: 255,255,255)\n\n### Event \"metadata\"\n\n`function(metadata) { }`\nImage's header has been parsed, metadata contains this information:\n\n- `width` image size in pixels\n- `height` image size in pixels\n- `palette` image is paletted\n- `color` image is not grayscale\n- `alpha` image contains alpha channel\n- `interlace` image is interlaced\n\n### Event: \"parsed\"\n\n`function(data) { }`\nInput image has been completely parsed, `data` is complete and ready for modification.\n\n### Event: \"error\"\n\n`function(error) { }`\n\n### png.parse(data, [callback])\n\nParses PNG file data. Can be `String` or `Buffer`. Alternatively you can stream data to instance of PNG.\n\nOptional `callback` is once called on `error` or `parsed`. The callback gets\ntwo arguments `(err, data)`.\n\nReturns `this` for method chaining.\n\n#### Example\n\n```js\nnew PNG({ filterType: 4 }).parse(imageData, function (error, data) {\n  console.log(error, data);\n});\n```\n\n### png.pack()\n\nStarts converting data to PNG file Stream.\n\nReturns `this` for method chaining.\n\n### png.bitblt(dst, sx, sy, w, h, dx, dy)\n\nHelper for image manipulation, copies a rectangle of pixels from current (i.e. the source) image (`sx`, `sy`, `w`, `h`) to `dst` image (at `dx`, `dy`).\n\nReturns `this` for method chaining.\n\nFor example, the following code copies the top-left 100x50 px of `in.png` into dst and writes it to `out.png`:\n\n```js\nvar dst = new PNG({ width: 100, height: 50 });\nfs.createReadStream(\"in.png\")\n  .pipe(new PNG())\n  .on(\"parsed\", function () {\n    this.bitblt(dst, 0, 0, 100, 50, 0, 0);\n    dst.pack().pipe(fs.createWriteStream(\"out.png\"));\n  });\n```\n\n### Property: adjustGamma()\n\nHelper that takes data and adjusts it to be gamma corrected. Note that it is not 100% reliable with transparent colours because that requires knowing the background colour the bitmap is rendered on to.\n\nIn tests against PNG suite it compared 100% with chrome on all 8 bit and below images. On IE there were some differences.\n\nThe following example reads a file, adjusts the gamma (which sets the gamma to 0) and writes it out again, effectively removing any gamma correction from the image.\n\n```js\nfs.createReadStream(\"in.png\")\n  .pipe(new PNG())\n  .on(\"parsed\", function () {\n    this.adjustGamma();\n    this.pack().pipe(fs.createWriteStream(\"out.png\"));\n  });\n```\n\n### Property: width\n\nWidth of image in pixels\n\n### Property: height\n\nHeight of image in pixels\n\n### Property: data\n\nBuffer of image pixel data. Every pixel consists 4 bytes: R, G, B, A (opacity).\n\n### Property: gamma\n\nGamma of image (0 if not specified)\n\n## Packing a PNG and removing alpha (RGBA to RGB)\n\nWhen removing the alpha channel from an image, there needs to be a background color to correctly\nconvert each pixel's transparency to the appropriate RGB value. By default, pngjs will flatten\nthe image against a white background. You can override this in the options:\n\n```js\nvar fs = require(\"fs\"),\n  PNG = require(\"pngjs\").PNG;\n\nfs.createReadStream(\"in.png\")\n  .pipe(\n    new PNG({\n      colorType: 2,\n      bgColor: {\n        red: 0,\n        green: 255,\n        blue: 0,\n      },\n    })\n  )\n  .on(\"parsed\", function () {\n    this.pack().pipe(fs.createWriteStream(\"out.png\"));\n  });\n```\n\n# Sync API\n\n## PNG.sync\n\n### PNG.sync.read(buffer)\n\nTake a buffer and returns a PNG image. The properties on the image include the meta data and `data` as per the async API above.\n\n```\nvar data = fs.readFileSync('in.png');\nvar png = PNG.sync.read(data);\n```\n\n### PNG.sync.write(png)\n\nTake a PNG image and returns a buffer. The properties on the image include the meta data and `data` as per the async API above.\n\n```\nvar data = fs.readFileSync('in.png');\nvar png = PNG.sync.read(data);\nvar options = { colorType: 6 };\nvar buffer = PNG.sync.write(png, options);\nfs.writeFileSync('out.png', buffer);\n```\n\n### PNG.adjustGamma(src)\n\nAdjusts the gamma of a sync image. See the async adjustGamma.\n\n```\nvar data = fs.readFileSync('in.png');\nvar png = PNG.sync.read(data);\nPNG.adjustGamma(png);\n```\n\n# Changelog\n\n### 6.0.0 - 24/10/2020\n\n- BREAKING - Sync version now throws if there is unexpected content at the end of the stream.\n- BREAKING - Drop support for node 10 (Though nothing incompatible in this release yet)\n- Reduce the number of files included in the package\n\n### 5.1.0 - 13/09/2020\n\n- Add option to skip rescaling\n\n### 5.0.0 - 15/04/2020\n\n- Drop support for Node 8\n- Browserified bundle may now contain ES20(15-20) code if the supported node version supports it. Please run the browserified version through babel if you need to support older browsers.\n\n### 4.0.1 - 15/04/2020\n\n- Fix to possible null reference in nextTick of async method\n\n### 4.0.0 - 09/04/2020\n\n- Fix issue in newer nodes with using Buffer\n- Fix async issue with some png files\n- Drop support for Node 4 & 6\n\n### 3.4.0 - 09/03/2019\n\n- Include whether the png has alpha in the meta data\n- emit an error if the image is truncated instead of hanging\n- Add a browserified version\n- speed up some mapping functions\n\n### 3.3.3 - 19/04/2018\n\n- Real fix for node 9\n\n### 3.3.2 - 16/02/2018\n\n- Fix for node 9\n\n### 3.3.1 - 15/11/2017\n\n- Bugfixes and removal of es6\n\n### 3.3.0\n\n- Add writing 16 bit channels and support for grayscale input\n\n### 3.2.0 - 30/04/2017\n\n- Support for encoding 8-bit grayscale images\n\n### 3.1.0 - 30/04/2017\n\n- Support for pngs with zlib chunks that are malformed after valid data\n\n### 3.0.1 - 16/02/2017\n\n- Fix single pixel pngs\n\n### 3.0.0 - 03/08/2016\n\n- Drop support for node below v4 and iojs. Pin to 2.3.0 to use with old, unsupported or patched node versions.\n\n### 2.3.0 - 22/04/2016\n\n- Support for sync in node 0.10\n\n### 2.2.0 - 04/12/2015\n\n- Add sync write api\n- Fix newfile example\n- Correct comparison table\n\n### 2.1.0 - 28/10/2015\n\n- rename package to pngjs\n- added 'bgColor' option\n\n### 2.0.0 - 08/10/2015\n\n- fixes to readme\n- _breaking change_ - bitblt on the png prototype now doesn't take a unused, unnecessary src first argument\n\n### 1.2.0 - 13/09/2015\n\n- support passing colorType to write PNG's and writing bitmaps without alpha information\n\n### 1.1.0 - 07/09/2015\n\n- support passing a deflate factory for controlled compression\n\n### 1.0.2 - 22/08/2015\n\n- Expose all PNG creation info\n\n### 1.0.1 - 21/08/2015\n\n- Fix non square interlaced files\n\n### 1.0.0 - 08/08/2015\n\n- More tests\n- source linted\n- maintainability refactorings\n- async API - exceptions in reading now emit warnings\n- documentation improvement - sync api now documented, adjustGamma documented\n- breaking change - gamma chunk is now written. previously a read then write would destroy gamma information, now it is persisted.\n\n### 0.0.3 - 03/08/2015\n\n- Error handling fixes\n- ignore files for smaller npm footprint\n\n### 0.0.2 - 02/08/2015\n\n- Bugfixes to interlacing, support for transparent colours\n\n### 0.0.1 - 02/08/2015\n\n- Initial release, see pngjs for older changelog.\n\n# License\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "licenseText": "pngjs2 original work Copyright (c) 2015 Luke Page & Original Contributors\npngjs derived work Copyright (c) 2012 Kuba Niegowski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/pngjs/-/pngjs-6.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/pngjs/-/pngjs-6.0.0.tgz",
    "hash": "",
    "integrity": "sha512-TRzzuFRRmEoSW/p1KVAmiOgPco2Irlah+bGFCeNfJXxxYGwSw7YwAOAcd7X28K/m5bjBWKsC29KyoMfHbypayg==",
    "registry": "npm",
    "packageName": "pngjs",
    "cacheIntegrity": "sha512-TRzzuFRRmEoSW/p1KVAmiOgPco2Irlah+bGFCeNfJXxxYGwSw7YwAOAcd7X28K/m5bjBWKsC29KyoMfHbypayg== sha1-yp5dKqSNsCKKUsQZwzCOh3INqCE="
  },
  "registry": "npm",
  "hash": "4d1cf3b85451984a125bfa7529502688e80f728d88ae56a1f9b18509e35f257c71606c12c3b63000e01c77b5f6f0afe6e5b8c158ab02dbd2b2a0c7c76f2a5aca"
}