{
  "manifest": {
    "name": "glob-stream",
    "version": "6.1.0",
    "description": "A Readable Stream interface over node-glob.",
    "author": {
      "name": "Gulp Team",
      "email": "team@gulpjs.com",
      "url": "http://gulpjs.com/"
    },
    "contributors": [
      {
        "name": "Eric Schoffstall",
        "email": "yo@contra.io"
      },
      {
        "name": "Blaine Bublitz",
        "email": "blaine.bublitz@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gulpjs/glob-stream.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 0.10"
    },
    "main": "index.js",
    "files": [
      "index.js",
      "readable.js",
      "LICENSE"
    ],
    "scripts": {
      "lint": "eslint . && jscs index.js readable.js test/",
      "pretest": "npm run lint",
      "test": "mocha --async-only",
      "cover": "istanbul cover _mocha --report lcovonly",
      "coveralls": "npm run cover && istanbul-coveralls"
    },
    "dependencies": {
      "extend": "^3.0.0",
      "glob": "^7.1.1",
      "glob-parent": "^3.1.0",
      "is-negated-glob": "^1.0.0",
      "ordered-read-streams": "^1.0.0",
      "pumpify": "^1.3.5",
      "readable-stream": "^2.1.5",
      "remove-trailing-separator": "^1.0.1",
      "to-absolute-glob": "^2.0.0",
      "unique-stream": "^2.0.2"
    },
    "devDependencies": {
      "eslint": "^1.10.3",
      "eslint-config-gulp": "^2.0.0",
      "expect": "^1.19.0",
      "istanbul": "^0.4.3",
      "istanbul-coveralls": "^1.0.3",
      "jscs": "^2.4.0",
      "jscs-preset-gulp": "^1.0.0",
      "mississippi": "^1.2.0",
      "mocha": "^2.4.5"
    },
    "keywords": [
      "glob",
      "stream",
      "gulp",
      "readable",
      "fs",
      "files"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-glob-stream-6.1.0-7045c99413b3eb94888d83ab46d0b404cc7bdde4-integrity/node_modules/glob-stream/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# glob-stream\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nA [Readable Stream][readable-stream-url] interface over [node-glob][node-glob-url].\n\n## Usage\n\n```javascript\nvar gs = require('glob-stream');\n\nvar readable = gs('./files/**/*.coffee', { /* options */ });\n\nvar writable = /* your WriteableStream */\n\nreadable.pipe(writable);\n```\n\nYou can pass any combination of glob strings. One caveat is that you cannot __only__ pass a negative glob, you must give it at least one positive glob so it knows where to start. If given a non-glob path (also referred to as a singular glob), only one file will be emitted. If given a singular glob and no files match, an error is emitted (see also [`options.allowEmpty`][allow-empty-url]).\n\n## API\n\n### `globStream(globs, options)`\n\nTakes a glob string or an array of glob strings as the first argument and an options object as the second. Returns a stream of objects that contain `cwd`, `base` and `path` properties.\n\n#### Options\n\n##### `options.allowEmpty`\n\nWhether or not to error upon an empty singular glob.\n\nType: `Boolean`\n\nDefault: `false` (error upon no match)\n\n##### `options.dot`\n\nWhether or not to treat dotfiles as regular files. This is passed through to [node-glob][node-glob-url].\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.silent`\n\nWhether or not to suppress warnings on stderr from [node-glob][node-glob-url]. This is passed through to [node-glob][node-glob-url].\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.cwd`\n\nThe current working directory that the glob is resolved against.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.root`\n\nThe root path that the glob is resolved against.\n\n__Note: This is never passed to [node-glob][node-glob-url] because it is pre-resolved against your paths.__\n\nType: `String`\n\nDefault: `undefined` (use the filesystem root)\n\n##### `options.base`\n\nThe absolute segment of the glob path that isn't a glob. This value is attached to each glob object and is useful for relative pathing.\n\nType: `String`\n\nDefault: The absolute path segement before a glob starts (see [glob-parent][glob-parent-url])\n\n##### `options.cwdbase`\n\nWhether or not the `cwd` and `base` should be the same.\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.uniqueBy`\n\nFilters stream to remove duplicates based on the string property name or the result of function. When using a function, the function receives the streamed data (objects containing `cwd`, `base`, `path` properties) to compare against.\n\nType: `String` or `Function`\n\nDefault: `'path'`\n\n##### other\n\nAny glob-related options are documented in [node-glob][node-glob-url]. Those options are forwarded verbatim, with the exception of `root` and `ignore`. `root` is pre-resolved and `ignore` is joined with all negative globs.\n\n#### Globbing & Negation\n\n```js\nvar stream = gs(['./**/*.js', '!./node_modules/**/*']);\n```\n\nGlobs are executed in order, so negations should follow positive globs. For example:\n\nThe following would __not__ exclude any files:\n```js\ngs(['!b*.js', '*.js'])\n```\n\nHowever, this would exclude all files that started with `b`:\n```js\ngs(['*.js', '!b*.js'])\n```\n\n## License\n\nMIT\n\n[node-glob-url]: https://github.com/isaacs/node-glob\n[glob-parent-url]: https://github.com/es128/glob-parent\n[allow-empty-url]: #optionsallowempty\n[readable-stream-url]: https://nodejs.org/api/stream.html#stream_readable_streams\n\n[downloads-image]: http://img.shields.io/npm/dm/glob-stream.svg\n[npm-url]: https://www.npmjs.com/package/glob-stream\n[npm-image]: http://img.shields.io/npm/v/glob-stream.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/glob-stream\n[travis-image]: http://img.shields.io/travis/gulpjs/glob-stream.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/glob-stream\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/glob-stream.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/glob-stream\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/glob-stream.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2017 Blaine Bublitz <blaine.bublitz@gmail.com>, Eric Schoffstall <yo@contra.io> and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/glob-stream/-/glob-stream-6.1.0.tgz#7045c99413b3eb94888d83ab46d0b404cc7bdde4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/glob-stream/-/glob-stream-6.1.0.tgz",
    "hash": "7045c99413b3eb94888d83ab46d0b404cc7bdde4",
    "integrity": "sha512-uMbLGAP3S2aDOHUDfdoYcdIePUCfysbAd0IAoWVZbeGU/oNQ8asHVSshLDJUPWxfzj8zsCG7/XeHPHTtow0nsw==",
    "registry": "npm",
    "packageName": "glob-stream",
    "cacheIntegrity": "sha512-uMbLGAP3S2aDOHUDfdoYcdIePUCfysbAd0IAoWVZbeGU/oNQ8asHVSshLDJUPWxfzj8zsCG7/XeHPHTtow0nsw== sha1-cEXJlBOz65SIjYOrRtC0BMx73eQ="
  },
  "registry": "npm",
  "hash": "7045c99413b3eb94888d83ab46d0b404cc7bdde4"
}