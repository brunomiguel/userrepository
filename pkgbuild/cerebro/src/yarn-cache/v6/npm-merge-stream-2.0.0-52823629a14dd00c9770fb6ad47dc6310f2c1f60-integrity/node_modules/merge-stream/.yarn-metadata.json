{
  "manifest": {
    "name": "merge-stream",
    "version": "2.0.0",
    "description": "Create a stream that emits events from multiple other streams",
    "files": [
      "index.js"
    ],
    "scripts": {
      "test": "istanbul cover test.js && istanbul check-cover --statements 100 --branches 100"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/grncdr/merge-stream.git"
    },
    "author": {
      "name": "Stephen Sugden",
      "email": "me@stephensugden.com"
    },
    "license": "MIT",
    "dependencies": {},
    "devDependencies": {
      "from2": "^2.0.3",
      "istanbul": "^0.4.5"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-merge-stream-2.0.0-52823629a14dd00c9770fb6ad47dc6310f2c1f60-integrity/node_modules/merge-stream/package.json",
    "readmeFilename": "README.md",
    "readme": "# merge-stream\n\nMerge (interleave) a bunch of streams.\n\n[![build status](https://secure.travis-ci.org/grncdr/merge-stream.svg?branch=master)](http://travis-ci.org/grncdr/merge-stream)\n\n## Synopsis\n\n```javascript\nvar stream1 = new Stream();\nvar stream2 = new Stream();\n\nvar merged = mergeStream(stream1, stream2);\n\nvar stream3 = new Stream();\nmerged.add(stream3);\nmerged.isEmpty();\n//=> false\n```\n\n## Description\n\nThis is adapted from [event-stream](https://github.com/dominictarr/event-stream) separated into a new module, using Streams3.\n\n## API\n\n### `mergeStream`\n\nType: `function`\n\nMerges an arbitrary number of streams. Returns a merged stream.\n\n#### `merged.add`\n\nA method to dynamically add more sources to the stream. The argument supplied to `add` can be either a source or an array of sources.\n\n#### `merged.isEmpty`\n\nA method that tells you if the merged stream is empty.\n\nWhen a stream is \"empty\" (aka. no sources were added), it could not be returned to a gulp task.\n\nSo, we could do something like this:\n\n```js\nstream = require('merge-stream')();\n// Something like a loop to add some streams to the merge stream\n// stream.add(streamA);\n// stream.add(streamB);\nreturn stream.isEmpty() ? null : stream;\n```\n\n## Gulp example\n\nAn example use case for **merge-stream** is to combine parts of a task in a project's **gulpfile.js** like this:\n\n```js\nconst gulp =          require('gulp');\nconst htmlValidator = require('gulp-w3c-html-validator');\nconst jsHint =        require('gulp-jshint');\nconst mergeStream =   require('merge-stream');\n\nfunction lint() {\n  return mergeStream(\n    gulp.src('src/*.html')\n      .pipe(htmlValidator())\n      .pipe(htmlValidator.reporter()),\n    gulp.src('src/*.js')\n      .pipe(jsHint())\n      .pipe(jsHint.reporter())\n  );\n}\ngulp.task('lint', lint);\n```\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Stephen Sugden <me@stephensugden.com> (stephensugden.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz",
    "hash": "52823629a14dd00c9770fb6ad47dc6310f2c1f60",
    "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
    "registry": "npm",
    "packageName": "merge-stream",
    "cacheIntegrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w== sha1-UoI2KaFN0AyXcPtq1H3GMQ8sH2A="
  },
  "registry": "npm",
  "hash": "52823629a14dd00c9770fb6ad47dc6310f2c1f60"
}