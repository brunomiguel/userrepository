{
  "manifest": {
    "name": "sane",
    "version": "4.1.0",
    "description": "Sane aims to be fast, small, and reliable file system watcher.",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/amasad/sane"
    },
    "files": [
      "src",
      "index.js"
    ],
    "scripts": {
      "test": "npm run format && eslint src/ test/ index.js && mocha --bail test/test.js && mocha --bail test/utils-test.js && mocha --bail 'test/watchexec_*-test.js'",
      "test:debug": "mocha debug --bail",
      "format": "prettier --trailing-comma es5 --single-quote --write index.js 'src/**/*.js' 'test/**/*.js'"
    },
    "bin": {
      "sane": "src/cli.js"
    },
    "keywords": [
      "watch",
      "file",
      "fswatcher",
      "watchfile",
      "fs",
      "watching"
    ],
    "author": {
      "name": "amasad"
    },
    "license": "MIT",
    "dependencies": {
      "@cnakazawa/watch": "^1.0.3",
      "anymatch": "^2.0.0",
      "capture-exit": "^2.0.0",
      "exec-sh": "^0.3.2",
      "execa": "^1.0.0",
      "fb-watchman": "^2.0.0",
      "micromatch": "^3.1.4",
      "minimist": "^1.1.1",
      "walker": "~1.0.5"
    },
    "devDependencies": {
      "eslint": "^5.15.1",
      "mocha": "^6.0.2",
      "prettier": "^1.16.4",
      "rimraf": "~2.6.3",
      "tmp": "0.0.33"
    },
    "engines": {
      "node": "6.* || 8.* || >= 10.*"
    },
    "bugs": {
      "url": "https://github.com/amasad/sane/issues"
    },
    "homepage": "https://github.com/amasad/sane",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sane-4.1.0-ed881fd922733a6c461bc189dc2b6c006f3ffded-integrity/node_modules/sane/package.json",
    "readmeFilename": "README.md",
    "readme": "[![CircleCI](https://circleci.com/gh/amasad/sane.svg?style=svg)](https://circleci.com/gh/amasad/sane)\n\nsane\n----\n\nI've been driven to insanity by node filesystem watcher wrappers.\nSane aims to be fast, small, and reliable file system watcher. It does that by:\n\n* By default stays away from fs polling because it's very slow and cpu intensive\n* Uses `fs.watch` by default and sensibly works around the various issues\n* Maintains a consistent API across different platforms\n* Where `fs.watch` is not reliable you have the choice of using the following alternatives:\n  * [the facebook watchman library](https://facebook.github.io/watchman/)\n  * [the watchexec library](https://github.com/watchexec/watchexec)\n  * polling\n\n## Install\n\n```\n$ npm install sane\n```\n\n## How to choose a mode\n\nDon't worry too much about choosing the correct mode upfront because sane\nmaintains the same API across all modes and will be easy to switch.\n\n* If you're only supporting Linux and OS X, `watchman` would be the most reliable mode\n* If you're using node > v0.10.0 use the default mode\n* If you're running OS X and you're watching a lot of directories and you're running into https://github.com/joyent/node/issues/5463, use `watchman`\n* If you're in an environment where native file system events aren't available (like Vagrant), you should use polling\n* Otherwise, the default mode should work well for you\n\n## API\n\n### sane(dir, options)\n\nWatches a directory and all its descendant directories for changes, deletions, and additions on files and directories.\n\n```js\nvar watcher = sane('path/to/dir', {glob: ['**/*.js', '**/*.css']});\nwatcher.on('ready', function () { console.log('ready') });\nwatcher.on('change', function (filepath, root, stat) { console.log('file changed', filepath); });\nwatcher.on('add', function (filepath, root, stat) { console.log('file added', filepath); });\nwatcher.on('delete', function (filepath, root) { console.log('file deleted', filepath); });\n// close\nwatcher.close();\n```\n\noptions:\n\n* `glob`: a single string glob pattern or an array of them.\n* `poll`: puts the watcher in polling mode. Under the hood that means `fs.watchFile`.\n* `watchman`: makes the watcher use [watchman](https://facebook.github.io/watchman/).\n* `watchmanPath`: sets a custom path for `watchman` binary.\n* `watchexec`: makes the watcher use [watchexec](https://github.com/watchexec/watchexec).\n* `dot`: enables watching files/directories that start with a dot.\n* `ignored`: a glob, regex, function, or array of any combination.\n\nFor the glob pattern documentation, see [micromatch](https://github.com/micromatch/micromatch).\nIf you choose to use `watchman` you'll have to [install watchman yourself](https://facebook.github.io/watchman/docs/install.html)).\nIf you choose to use `watchexec` you'll have to [install watchexec yourself](https://github.com/watchexec/watchexec)).\nFor the ignored options, see [anymatch](https://github.com/es128/anymatch).\n\n### sane.NodeWatcher(dir, options)\n\nThe default watcher class. Uses `fs.watch` under the hood, and takes the same options as `sane(dir, options)`.\n\n### sane.WatchmanWatcher(dir, options)\n\nThe watchman watcher class. Takes the same options as `sane(dir, options)`.\n\n### sane.Watchexec(dir, options)\n\nThe watchexec watcher class. Takes the same options as `sane(dir, options)`.\n\n### sane.PollWatcher(dir, options)\n\nThe polling watcher class. Takes the same options as `sane(dir, options)` with the addition of:\n\n* interval: indicates how often the files should be polled. (passed to fs.watchFile)\n\n### sane.{Node|Watchman|Watchexec|Poll}Watcher#close\n\nStops watching.\n\n### sane.{Node|Watchman|Watchexec|Poll}Watcher events\n\nEmits the following events:\n\nAll events are passed the file/dir path relative to the root directory\n* `ready` when the program is ready to detect events in the directory\n* `change` when a file changes\n* `add` when a file or directory has been added\n* `delete` when a file or directory has been deleted\n\n## CLI\n\nThis module includes a simple command line interface, which you can install with `npm install sane -g`.\n\n```\nUsage: sane <command> [...directory] [--glob=<filePattern>] [--poll] [--watchman] [--watchman-path=<watchmanBinaryPath>] [--dot] [--wait=<seconds>]\n\nOPTIONS:\n    --glob=<filePattern>\n      A single string glob pattern or an array of them.\n\n    --ignored=<filePattern>\n      A glob, regex, function, or array of any combination.\n\n    --poll, -p\n      Use polling mode.\n\n    --watchman, -w\n      Use watchman (if available).\n\n    --watchman-path=<watchmanBinaryPath>\n      Sets a custom path for watchman binary (if using this mode).\n\n    --dot, -d\n      Enables watching files/directories that start with a dot.\n\n    --wait=<seconds>\n      Duration, in seconds, that watching will be disabled\n      after running <command>. Setting this option will\n      throttle calls to <command> for the specified duration.\n    --quiet, -q\n      Disables sane's console output\n\n    --changes-only, -o\n      Runs <command> only when a change occur. Skips running <command> at startup\n```\n\nIt will watch the given `directory` and run the given <command> every time a file changes.\n\n### CLI example usage\n- `sane 'echo \"A command ran\"'`\n- `sane 'echo \"A command ran\"' --glob='**/*.css'`\n- `sane 'echo \"A command ran\"' site/assets/css --glob='**/*.css'`\n- `sane 'echo \"A command ran\"' --glob='**/*.css' --ignored='**/ignore.css'`\n- `sane 'echo \"A command ran\"' --wait=3`\n- `sane 'echo \"A command ran\"' -p`\n\n## License\n\nMIT\n\n## Credits\nThe CLI was originally based on the [watch CLI](https://github.com/mikeal/watch). Watch is licensed under the Apache License Version 2.0.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sane/-/sane-4.1.0.tgz#ed881fd922733a6c461bc189dc2b6c006f3ffded",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sane/-/sane-4.1.0.tgz",
    "hash": "ed881fd922733a6c461bc189dc2b6c006f3ffded",
    "integrity": "sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA==",
    "registry": "npm",
    "packageName": "sane",
    "cacheIntegrity": "sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA== sha1-7Ygf2SJzOmxGG8GJ3CtsAG8//e0="
  },
  "registry": "npm",
  "hash": "ed881fd922733a6c461bc189dc2b6c006f3ffded"
}