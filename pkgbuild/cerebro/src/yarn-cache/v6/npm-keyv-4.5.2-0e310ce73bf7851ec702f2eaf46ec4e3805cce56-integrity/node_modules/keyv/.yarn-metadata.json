{
  "manifest": {
    "name": "keyv",
    "version": "4.5.2",
    "description": "Simple key-value storage with support for multiple backends",
    "main": "src/index.js",
    "scripts": {
      "test": "xo && nyc ava --serial",
      "coverage": "nyc report --reporter=text-lcov > coverage.lcov",
      "clean": "rm -rf node_modules && rm -rf .nyc_output && rm -rf coverage.lcov && rm -rf ./test/testdb.sqlite"
    },
    "xo": {
      "rules": {
        "unicorn/prefer-module": 0,
        "unicorn/prefer-node-protocol": 0,
        "@typescript-eslint/consistent-type-definitions": 0
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jaredwray/keyv.git"
    },
    "keywords": [
      "key",
      "value",
      "store",
      "cache",
      "ttl"
    ],
    "author": {
      "name": "Jared Wray",
      "email": "me@jaredwray.com",
      "url": "http://jaredwray.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jaredwray/keyv/issues"
    },
    "homepage": "https://github.com/jaredwray/keyv",
    "dependencies": {
      "json-buffer": "3.0.1"
    },
    "devDependencies": {
      "@keyv/test-suite": "*",
      "ava": "^5.0.1",
      "eslint": "^8.26.0",
      "eslint-plugin-promise": "^6.1.1",
      "nyc": "^15.1.0",
      "pify": "5.0.0",
      "this": "^1.1.0",
      "timekeeper": "^2.2.0",
      "tsd": "^0.24.1",
      "typescript": "^4.8.4",
      "xo": "^0.52.4"
    },
    "tsd": {
      "directory": "test"
    },
    "types": "./src/index.d.ts",
    "files": [
      "src"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-keyv-4.5.2-0e310ce73bf7851ec702f2eaf46ec4e3805cce56-integrity/node_modules/keyv/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">\n\t<img width=\"250\" src=\"https://jaredwray.com/images/keyv.svg\" alt=\"keyv\">\n\t<br>\n\t<br>\n</h1>\n\n> Simple key-value storage with support for multiple backends\n\n[![build](https://github.com/jaredwray/keyv/actions/workflows/tests.yaml/badge.svg)](https://github.com/jaredwray/keyv/actions/workflows/tests.yaml)\n[![codecov](https://codecov.io/gh/jaredwray/keyv/branch/main/graph/badge.svg?token=bRzR3RyOXZ)](https://codecov.io/gh/jaredwray/keyv)\n[![npm](https://img.shields.io/npm/dm/keyv.svg)](https://www.npmjs.com/package/keyv)\n[![npm](https://img.shields.io/npm/v/keyv.svg)](https://www.npmjs.com/package/keyv)\n\nKeyv provides a consistent interface for key-value storage across multiple backends via storage adapters. It supports TTL based expiry, making it suitable as a cache or a persistent key-value store.\n\n## Features\n\nThere are a few existing modules similar to Keyv, however Keyv is different because it:\n\n- Isn't bloated\n- Has a simple Promise based API\n- Suitable as a TTL based cache or persistent key-value store\n- [Easily embeddable](#add-cache-support-to-your-module) inside another module\n- Works with any storage that implements the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) API\n- Handles all JSON types plus `Buffer`\n- Supports namespaces\n- Wide range of [**efficient, well tested**](#official-storage-adapters) storage adapters\n- Connection errors are passed through (db failures won't kill your app)\n- Supports the current active LTS version of Node.js or higher\n\n## Usage\n\nInstall Keyv.\n\n```\nnpm install --save keyv\n```\n\nBy default everything is stored in memory, you can optionally also install a storage adapter.\n\n```\nnpm install --save @keyv/redis\nnpm install --save @keyv/mongo\nnpm install --save @keyv/sqlite\nnpm install --save @keyv/postgres\nnpm install --save @keyv/mysql\nnpm install --save @keyv/etcd\n```\n\nCreate a new Keyv instance, passing your connection string if applicable. Keyv will automatically load the correct storage adapter.\n\n```js\nconst Keyv = require('keyv');\n\n// One of the following\nconst keyv = new Keyv();\nconst keyv = new Keyv('redis://user:pass@localhost:6379');\nconst keyv = new Keyv('mongodb://user:pass@localhost:27017/dbname');\nconst keyv = new Keyv('sqlite://path/to/database.sqlite');\nconst keyv = new Keyv('postgresql://user:pass@localhost:5432/dbname');\nconst keyv = new Keyv('mysql://user:pass@localhost:3306/dbname');\nconst keyv = new Keyv('etcd://localhost:2379');\n\n// Handle DB connection errors\nkeyv.on('error', err => console.log('Connection Error', err));\n\nawait keyv.set('foo', 'expires in 1 second', 1000); // true\nawait keyv.set('foo', 'never expires'); // true\nawait keyv.get('foo'); // 'never expires'\nawait keyv.delete('foo'); // true\nawait keyv.clear(); // undefined\n```\n\n### Namespaces\n\nYou can namespace your Keyv instance to avoid key collisions and allow you to clear only a certain namespace while using the same database.\n\n```js\nconst users = new Keyv('redis://user:pass@localhost:6379', { namespace: 'users' });\nconst cache = new Keyv('redis://user:pass@localhost:6379', { namespace: 'cache' });\n\nawait users.set('foo', 'users'); // true\nawait cache.set('foo', 'cache'); // true\nawait users.get('foo'); // 'users'\nawait cache.get('foo'); // 'cache'\nawait users.clear(); // undefined\nawait users.get('foo'); // undefined\nawait cache.get('foo'); // 'cache'\n```\n\n### Custom Serializers\n\nKeyv uses [`json-buffer`](https://github.com/dominictarr/json-buffer) for data serialization to ensure consistency across different backends.\n\nYou can optionally provide your own serialization functions to support extra data types or to serialize to something other than JSON.\n\n```js\nconst keyv = new Keyv({ serialize: JSON.stringify, deserialize: JSON.parse });\n```\n\n**Warning:** Using custom serializers means you lose any guarantee of data consistency. You should do extensive testing with your serialisation functions and chosen storage engine.\n\n## Official Storage Adapters\n\nThe official storage adapters are covered by [over 150 integration tests](https://github.com/jaredwray/keyv/actions/workflows/tests.yaml) to guarantee consistent behaviour. They are lightweight, efficient wrappers over the DB clients making use of indexes and native TTLs where available.\n\nDatabase | Adapter | Native TTL\n---|---|---\nRedis | [@keyv/redis](https://github.com/jaredwray/keyv/tree/master/packages/redis) | Yes\nMongoDB | [@keyv/mongo](https://github.com/jaredwray/keyv/tree/master/packages/mongo) | Yes \nSQLite | [@keyv/sqlite](https://github.com/jaredwray/keyv/tree/master/packages/sqlite) | No \nPostgreSQL | [@keyv/postgres](https://github.com/jaredwray/keyv/tree/master/packages/postgres) | No \nMySQL | [@keyv/mysql](https://github.com/jaredwray/keyv/tree/master/packages/mysql) | No \nEtcd | [@keyv/etcd](https://github.com/jaredwray/keyv/tree/master/packages/etcd) | Yes\nMemcache | [@keyv/memcache](https://github.com/jaredwray/keyv/tree/master/packages/memcache) | Yes\n\n## Third-party Storage Adapters\n\nYou can also use third-party storage adapters or build your own. Keyv will wrap these storage adapters in TTL functionality and handle complex types internally.\n\n```js\nconst Keyv = require('keyv');\nconst myAdapter = require('./my-storage-adapter');\n\nconst keyv = new Keyv({ store: myAdapter });\n```\n\nAny store that follows the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) api will work.\n\n```js\nnew Keyv({ store: new Map() });\n```\n\nFor example, [`quick-lru`](https://github.com/sindresorhus/quick-lru) is a completely unrelated module that implements the Map API.\n\n```js\nconst Keyv = require('keyv');\nconst QuickLRU = require('quick-lru');\n\nconst lru = new QuickLRU({ maxSize: 1000 });\nconst keyv = new Keyv({ store: lru });\n```\n\nThe following are third-party storage adapters compatible with Keyv:\n\n- [quick-lru](https://github.com/sindresorhus/quick-lru) - Simple \"Least Recently Used\" (LRU) cache\n- [keyv-file](https://github.com/zaaack/keyv-file) - File system storage adapter for Keyv\n- [keyv-dynamodb](https://www.npmjs.com/package/keyv-dynamodb) - DynamoDB storage adapter for Keyv\n- [keyv-lru](https://www.npmjs.com/package/keyv-lru) - LRU storage adapter for Keyv\n- [keyv-null](https://www.npmjs.com/package/keyv-null) - Null storage adapter for Keyv\n- [keyv-firestore ](https://github.com/goto-bus-stop/keyv-firestore) â€“ Firebase Cloud Firestore adapter for Keyv\n- [keyv-mssql](https://github.com/pmorgan3/keyv-mssql) - Microsoft Sql Server adapter for Keyv\n- [keyv-azuretable](https://github.com/howlowck/keyv-azuretable) - Azure Table Storage/API adapter for Keyv\n\n## Add Cache Support to your Module\n\nKeyv is designed to be easily embedded into other modules to add cache support. The recommended pattern is to expose a `cache` option in your modules options which is passed through to Keyv. Caching will work in memory by default and users have the option to also install a Keyv storage adapter and pass in a connection string, or any other storage that implements the `Map` API.\n\nYou should also set a namespace for your module so you can safely call `.clear()` without clearing unrelated app data.\n\nInside your module:\n\n```js\nclass AwesomeModule {\n\tconstructor(opts) {\n\t\tthis.cache = new Keyv({\n\t\t\turi: typeof opts.cache === 'string' && opts.cache,\n\t\t\tstore: typeof opts.cache !== 'string' && opts.cache,\n\t\t\tnamespace: 'awesome-module'\n\t\t});\n\t}\n}\n```\n\nNow it can be consumed like this:\n\n```js\nconst AwesomeModule = require('awesome-module');\n\n// Caches stuff in memory by default\nconst awesomeModule = new AwesomeModule();\n\n// After npm install --save keyv-redis\nconst awesomeModule = new AwesomeModule({ cache: 'redis://localhost' });\n\n// Some third-party module that implements the Map API\nconst awesomeModule = new AwesomeModule({ cache: some3rdPartyStore });\n```\n\n## Compression\n\nKeyv supports `gzip` and `brotli` compression. To enable compression, pass the `compress` option to the constructor.\n\n```js\nconst KeyvGzip = require('@keyv/compress-gzip');\nconst Keyv = require('keyv');\n\nconst keyvGzip = new KeyvGzip();\nconst keyv = new Keyv({ compression: KeyvGzip });\n```\n\nYou can also pass a custom compression function to the `compression` option. Following the pattern of the official compression adapters.\n\n### Want to build your own? \n\nGreat! Keyv is designed to be easily extended. You can build your own compression adapter by following the pattern of the official compression adapters based on this interface:\n\n```typescript\ninterface CompressionAdapter {\n\tasync compress(value: any, options?: any);\n\tasync decompress(value: any, options?: any);\n\tasync serialize(value: any);\n\tasync deserialize(value: any);\n}\n```\n\nIn addition to the interface, you can test it with our compression test suite using @keyv/test-suite:\n\n```js\nconst {keyvCompresstionTests} = require('@keyv/test-suite');\nconst KeyvGzip = require('@keyv/compress-gzip');\n\nkeyvCompresstionTests(test, new KeyvGzip());\n```\n\n## API\n\n### new Keyv([uri], [options])\n\nReturns a new Keyv instance.\n\nThe Keyv instance is also an `EventEmitter` that will emit an `'error'` event if the storage adapter connection fails.\n\n### uri\n\nType: `String`<br>\nDefault: `undefined`\n\nThe connection string URI.\n\nMerged into the options object as options.uri.\n\n### options\n\nType: `Object`\n\nThe options object is also passed through to the storage adapter. Check your storage adapter docs for any extra options.\n\n#### options.namespace\n\nType: `String`<br>\nDefault: `'keyv'`\n\nNamespace for the current instance.\n\n#### options.ttl\n\nType: `Number`<br>\nDefault: `undefined`\n\nDefault TTL. Can be overridden by specififying a TTL on `.set()`.\n\n#### options.compression\n\nType: `@keyv/compress-<compression_package_name>`<br>\nDefault: `undefined`\n\nCompression package to use. See [Compression](#compression) for more details.\n\n#### options.serialize\n\nType: `Function`<br>\nDefault: `JSONB.stringify`\n\nA custom serialization function.\n\n#### options.deserialize\n\nType: `Function`<br>\nDefault: `JSONB.parse`\n\nA custom deserialization function.\n\n#### options.store\n\nType: `Storage adapter instance`<br>\nDefault: `new Map()`\n\nThe storage adapter instance to be used by Keyv.\n\n#### options.adapter\n\nType: `String`<br>\nDefault: `undefined`\n\nSpecify an adapter to use. e.g `'redis'` or `'mongodb'`.\n\n### Instance\n\nKeys must always be strings. Values can be of any type.\n\n#### .set(key, value, [ttl])\n\nSet a value.\n\nBy default keys are persistent. You can set an expiry TTL in milliseconds.\n\nReturns a promise which resolves to `true`.\n\n#### .get(key, [options])\n\nReturns a promise which resolves to the retrieved value.\n\n##### options.raw\n\nType: `Boolean`<br>\nDefault: `false`\n\nIf set to true the raw DB object Keyv stores internally will be returned instead of just the value.\n\nThis contains the TTL timestamp.\n\n#### .delete(key)\n\nDeletes an entry.\n\nReturns a promise which resolves to `true` if the key existed, `false` if not.\n\n#### .clear()\n\nDelete all entries in the current namespace.\n\nReturns a promise which is resolved when the entries have been cleared.\n\n#### .iterator()\n\nIterate over all entries of the current namespace.\n\nReturns a iterable that can be iterated by for-of loops. For example:\n\n```js\n// please note that the \"await\" keyword should be used here\nfor await (const [key, value] of this.keyv.iterator()) {\n  console.log(key, value);\n};\n```\n\n# How to Contribute\n\nIn this section of the documentation we will cover:\n\n1) How to set up this repository locally\n2) How to get started with running commands\n3) How to contribute changes using Pull Requests\n\n## Dependencies\n\nThis package requires the following dependencies to run:\n\n1) [Yarn V1](https://yarnpkg.com/getting-started/install)\n3) [Docker](https://docs.docker.com/get-docker/)\n\n## Setting up your workspace\n\nTo contribute to this repository, start by setting up this project locally:\n\n1) Fork this repository into your Git account\n2) Clone the forked repository to your local directory using `git clone`\n3) Install any of the above missing dependencies\n\n## Launching the project\n\nOnce the project is installed locally, you are ready to start up its services:\n\n1) Ensure that your Docker service is running.\n2) From the root directory of your project, run the `yarn` command in the command prompt to install yarn.\n3) Run the `yarn bootstrap` command to  install any necessary dependencies.\n4) Run `yarn test:services:start` to start up this project's Docker container. The container will launch all services within your workspace.\n\n## Available Commands\n\nOnce the project is running, you can execute a variety of commands. The root workspace and each subpackage contain a `package.json` file with a  `scripts` field listing all the commands that can be executed from that directory. This project also supports native `yarn`, and `docker` commands.\n\nHere, we'll cover the primary commands that can be executed from the root directory. Unless otherwise noted, these commands can also be executed from a subpackage. If executed from a subpackage, they will only affect that subpackage, rather than the entire workspace.\n\n### `yarn`\n\nThe `yarn` command installs yarn in the workspace.\n\n### `yarn bootstrap`\n\nThe `yarn bootstrap` command installs all dependencies in the workspace.\n\n### `yarn test:services:start`\n\nThe `yarn test:services:start` command starts up the project's Docker container, launching all services in the workspace. This command must be executed from the root directory.\n\n### `yarn test:services:stop`\n\nThe `yarn test:services:stop` command brings down the project's Docker container, halting all services. This command must be executed from the root directory.\n\n### `yarn test`\n\nThe `yarn test` command runs all tests in the workspace.\n\n### `yarn clean`\n\nThe `yarn clean` command removes yarn and all dependencies installed by yarn. After executing this command, you must repeat the steps in *Setting up your workspace* to rebuild your workspace.\n\n## Contributing Changes\n\nNow that you've set up your workspace, you're ready to contribute changes to the `keyv` repository.\n\n1) Make any changes that you would like to contribute in your local workspace.\n2) After making these changes, ensure that the project's tests still pass by executing the `yarn test` command in the root directory.\n3) Commit your changes and push them to your forked repository.\n4) Navigate to the original `keyv` repository and go the *Pull Requests* tab.\n5) Click the *New pull request* button, and open a pull request for the branch in your repository that contains your changes.\n6) Once your pull request is created, ensure that all checks have passed and that your branch has no conflicts with the base branch. If there are any issues, resolve these changes in your local repository, and then commit and push them to git.\n7) Similarly, respond to any reviewer comments or requests for changes by making edits to your local repository and pushing them to Git.\n8) Once the pull request has been reviewed, those with write access to the branch will be able to merge your changes into the `keyv` repository.\n\nIf you need more information on the steps to create a pull request, you can find a detailed walkthrough in the [Github documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork)\n\n## License\n\nMIT Â© Jared Wray\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/keyv/-/keyv-4.5.2.tgz#0e310ce73bf7851ec702f2eaf46ec4e3805cce56",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/keyv/-/keyv-4.5.2.tgz",
    "hash": "0e310ce73bf7851ec702f2eaf46ec4e3805cce56",
    "integrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g==",
    "registry": "npm",
    "packageName": "keyv",
    "cacheIntegrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g== sha1-DjEM5zv3hR7HAvLq9G7E44BczlY="
  },
  "registry": "npm",
  "hash": "0e310ce73bf7851ec702f2eaf46ec4e3805cce56"
}