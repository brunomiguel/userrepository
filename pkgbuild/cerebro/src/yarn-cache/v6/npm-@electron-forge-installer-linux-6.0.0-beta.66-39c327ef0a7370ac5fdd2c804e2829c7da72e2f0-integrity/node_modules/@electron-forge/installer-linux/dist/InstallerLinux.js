"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InstallerOptions", {
    enumerable: true,
    get: function() {
        return _installerBase.InstallerOptions;
    }
});
exports.default = void 0;
var _installerBase = _interopRequireWildcard(require("@electron-forge/installer-base"));
var _childProcess = require("child_process");
var _util = require("util");
var _sudoPrompt = _interopRequireDefault(require("sudo-prompt"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class InstallerLinux extends _installerBase.default {
    constructor(...args1){
        super(...args1);
        this.which = async (type, prog, promise)=>{
            if ((0, _childProcess).spawnSync('which', [
                prog
            ]).status === 0) {
                await promise();
            } else {
                throw new Error(`${prog} is required to install ${type} packages`);
            }
        };
        this.sudo = (type, program, args)=>this.which(type, program, ()=>(0, _util).promisify(_sudoPrompt.default.exec)(`${program} ${args}`, {
                    name: 'Electron Forge'
                })
            )
        ;
    }
}
exports.default = InstallerLinux;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJMaW51eC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW5zdGFsbGVyQmFzZSwgeyBJbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1iYXNlJztcblxuaW1wb3J0IHsgc3Bhd25TeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCBzdWRvUHJvbXB0IGZyb20gJ3N1ZG8tcHJvbXB0JztcblxuZXhwb3J0IHsgSW5zdGFsbGVyT3B0aW9ucyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBJbnN0YWxsZXJMaW51eCBleHRlbmRzIEluc3RhbGxlckJhc2Uge1xuICB3aGljaCA9IGFzeW5jICh0eXBlOiBzdHJpbmcsIHByb2c6IHN0cmluZywgcHJvbWlzZTogKCkgPT4gUHJvbWlzZTx1bmtub3duPik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmIChzcGF3blN5bmMoJ3doaWNoJywgW3Byb2ddKS5zdGF0dXMgPT09IDApIHtcbiAgICAgIGF3YWl0IHByb21pc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb2d9IGlzIHJlcXVpcmVkIHRvIGluc3RhbGwgJHt0eXBlfSBwYWNrYWdlc2ApO1xuICAgIH1cbiAgfTtcblxuICBzdWRvID0gKHR5cGU6IHN0cmluZywgcHJvZ3JhbTogc3RyaW5nLCBhcmdzOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+XG4gICAgdGhpcy53aGljaCh0eXBlLCBwcm9ncmFtLCAoKSA9PiBwcm9taXNpZnkoc3Vkb1Byb21wdC5leGVjKShgJHtwcm9ncmFtfSAke2FyZ3N9YCwgeyBuYW1lOiAnRWxlY3Ryb24gRm9yZ2UnIH0pKTtcbn1cbiJdLCJuYW1lcyI6WyJJbnN0YWxsZXJPcHRpb25zIiwiSW5zdGFsbGVyTGludXgiLCJJbnN0YWxsZXJCYXNlIiwid2hpY2giLCJ0eXBlIiwicHJvZyIsInByb21pc2UiLCJzcGF3blN5bmMiLCJzdGF0dXMiLCJFcnJvciIsInN1ZG8iLCJwcm9ncmFtIiwiYXJncyIsInByb21pc2lmeSIsInN1ZG9Qcm9tcHQiLCJleGVjIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFNU0EsQ0FBZ0I7OztlQUFoQkEsY0FBZ0I7Ozs7QUFOdUIsR0FBZ0MsQ0FBaEMsY0FBZ0M7QUFFdEQsR0FBZSxDQUFmLGFBQWU7QUFDZixHQUFNLENBQU4sS0FBTTtBQUNULEdBQWEsQ0FBYixXQUFhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFJTkMsY0FBYyxTQUFTQyxjQUFhOzs7UUFBbkQsSUFXZCxDQVZDQyxLQUFLLFVBQVVDLElBQVksRUFBRUMsSUFBWSxFQUFFQyxPQUErQixHQUFvQixDQUFDO1lBQzdGLEVBQUUsTUFBRUMsYUFBUyxZQUFDLENBQU8sUUFBRSxDQUFDRjtnQkFBQUEsSUFBSTtZQUFBLENBQUMsRUFBRUcsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUM1QyxLQUFLLENBQUNGLE9BQU87WUFDZixDQUFDLE1BQU0sQ0FBQztnQkFDTixLQUFLLENBQUMsR0FBRyxDQUFDRyxLQUFLLElBQUlKLElBQUksQ0FBQyx3QkFBd0IsRUFBRUQsSUFBSSxDQUFDLFNBQVM7WUFDbEUsQ0FBQztRQUNILENBQUM7UUFQWSxJQVdkLENBRkNNLElBQUksSUFBSU4sSUFBWSxFQUFFTyxPQUFlLEVBQUVDLElBQVksR0FDakQsSUFBSSxDQUFDVCxLQUFLLENBQUNDLElBQUksRUFBRU8sT0FBTyxVQUFRRSxLQUFTLFlBQUNDLFdBQVUsU0FBQ0MsSUFBSSxLQUFLSixPQUFPLENBQUMsQ0FBQyxFQUFFQyxJQUFJLElBQUksQ0FBQztvQkFBQ0ksSUFBSSxFQUFFLENBQWdCO2dCQUFDLENBQUM7Ozs7O2tCQVZqRmYsY0FBYyJ9