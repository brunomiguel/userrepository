{
  "manifest": {
    "name": "opn",
    "version": "5.5.0",
    "description": "A better node-open. Opens stuff like websites, files, executables. Cross-platform.",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/opn.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo"
    },
    "files": [
      "index.js",
      "xdg-open"
    ],
    "keywords": [
      "app",
      "open",
      "opn",
      "opener",
      "opens",
      "launch",
      "start",
      "xdg-open",
      "xdg",
      "default",
      "cmd",
      "browser",
      "editor",
      "executable",
      "exe",
      "url",
      "urls",
      "arguments",
      "args",
      "spawn",
      "exec",
      "child",
      "process",
      "website",
      "file"
    ],
    "dependencies": {
      "is-wsl": "^1.1.0"
    },
    "devDependencies": {
      "ava": "^0.25.0",
      "xo": "^0.20.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-opn-5.5.0-fc7164fab56d235904c51c3b27da6758ca3b9bfc-integrity/node_modules/opn/package.json",
    "readmeFilename": "readme.md",
    "readme": "# opn\n\n> A better [node-open](https://github.com/pwnall/node-open). Opens stuff like websites, files, executables. Cross-platform.\n\nIf need this for Electron, use [`shell.openItem()`](https://electronjs.org/docs/api/shell#shellopenitemfullpath) instead.\n\n\n#### Why?\n\n- Actively maintained\n- Supports app arguments\n- Safer as it uses `spawn` instead of `exec`\n- Fixes most of the open `node-open` issues\n- Includes the latest [`xdg-open` script](http://cgit.freedesktop.org/xdg/xdg-utils/commit/?id=c55122295c2a480fa721a9614f0e2d42b2949c18) for Linux\n\n\n## Install\n\n```\n$ npm install opn\n```\n\n\n## Usage\n\n```js\nconst opn = require('opn');\n\n// Opens the image in the default image viewer\nopn('unicorn.png').then(() => {\n\t// image viewer closed\n});\n\n// Opens the url in the default browser\nopn('http://sindresorhus.com');\n\n// Specify the app to open in\nopn('http://sindresorhus.com', {app: 'firefox'});\n\n// Specify app arguments\nopn('http://sindresorhus.com', {app: ['google chrome', '--incognito']});\n```\n\n\n## API\n\nUses the command `open` on macOS, `start` on Windows and `xdg-open` on other platforms.\n\n### opn(target, [options])\n\nReturns a promise for the [spawned child process](https://nodejs.org/api/child_process.html#child_process_class_childprocess). You would normally not need to use this for anything, but it can be useful if you'd like to attach custom event listeners or perform other operations directly on the spawned process.\n\n#### target\n\nType: `string`\n\nThe thing you want to open. Can be a URL, file, or executable.\n\nOpens in the default app for the file type. For example, URLs opens in your default browser.\n\n#### options\n\nType: `Object`\n\n##### wait\n\nType: `boolean`<br>\nDefault: `true`\n\nWait for the opened app to exit before fulfilling the promise. If `false` it's fulfilled immediately when opening the app.\n\nOn Windows you have to explicitly specify an app for it to be able to wait.\n\n##### app\n\nType: `string` `Array`\n\nSpecify the app to open the `target` with, or an array with the app and app arguments.\n\nThe app name is platform dependent. Don't hard code it in reusable modules. For example, Chrome is `google chrome` on macOS, `google-chrome` on Linux and `chrome` on Windows.\n\n\n## Related\n\n- [opn-cli](https://github.com/sindresorhus/opn-cli) - CLI for this module\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/opn/-/opn-5.5.0.tgz#fc7164fab56d235904c51c3b27da6758ca3b9bfc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/opn/-/opn-5.5.0.tgz",
    "hash": "fc7164fab56d235904c51c3b27da6758ca3b9bfc",
    "integrity": "sha512-PqHpggC9bLV0VeWcdKhkpxY+3JTzetLSqTCWL/z/tFIbI6G8JCjondXklT1JinczLz2Xib62sSp0T/gKT4KksA==",
    "registry": "npm",
    "packageName": "opn",
    "cacheIntegrity": "sha512-PqHpggC9bLV0VeWcdKhkpxY+3JTzetLSqTCWL/z/tFIbI6G8JCjondXklT1JinczLz2Xib62sSp0T/gKT4KksA== sha1-/HFk+rVtI1kExRw7J9pnWMo7m/w="
  },
  "registry": "npm",
  "hash": "fc7164fab56d235904c51c3b27da6758ca3b9bfc"
}