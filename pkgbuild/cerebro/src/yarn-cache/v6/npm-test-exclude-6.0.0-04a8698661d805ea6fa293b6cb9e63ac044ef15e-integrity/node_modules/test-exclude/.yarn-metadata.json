{
  "manifest": {
    "name": "test-exclude",
    "version": "6.0.0",
    "description": "test for inclusion or exclusion of paths using globs",
    "main": "index.js",
    "files": [
      "*.js",
      "!nyc.config.js"
    ],
    "scripts": {
      "release": "standard-version",
      "test": "nyc tap",
      "snap": "npm test -- --snapshot"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/istanbuljs/test-exclude.git"
    },
    "keywords": [
      "exclude",
      "include",
      "glob",
      "package",
      "config"
    ],
    "author": {
      "name": "Ben Coe",
      "email": "ben@npmjs.com"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/istanbuljs/test-exclude/issues"
    },
    "homepage": "https://istanbul.js.org/",
    "dependencies": {
      "@istanbuljs/schema": "^0.1.2",
      "glob": "^7.1.4",
      "minimatch": "^3.0.4"
    },
    "devDependencies": {
      "nyc": "^15.0.0-beta.3",
      "standard-version": "^7.0.0",
      "tap": "^14.10.5"
    },
    "engines": {
      "node": ">=8"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-test-exclude-6.0.0-04a8698661d805ea6fa293b6cb9e63ac044ef15e-integrity/node_modules/test-exclude/package.json",
    "readmeFilename": "README.md",
    "readme": "# test-exclude\n\nThe file include/exclude logic used by [nyc] and [babel-plugin-istanbul].\n\n[![Build Status](https://travis-ci.org/istanbuljs/test-exclude.svg)](https://travis-ci.org/istanbuljs/test-exclude)\n[![Coverage Status](https://coveralls.io/repos/github/istanbuljs/test-exclude/badge.svg?branch=master)](https://coveralls.io/github/istanbuljs/test-exclude?branch=master)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n[![Greenkeeper badge](https://badges.greenkeeper.io/istanbuljs/test-exclude.svg)](https://greenkeeper.io/)\n\n## Usage\n\n```js\nconst TestExclude = require('test-exclude');\nconst exclude = new TestExclude();\nif (exclude().shouldInstrument('./foo.js')) {\n    // let's instrument this file for test coverage!\n}\n```\n\n### TestExclude(options)\n\nThe test-exclude constructor accepts an options object.  The defaults are taken from\n[@istanbuljs/schema].\n\n#### options.cwd\n\nThis is the base directory by which all comparisons are performed.  Files outside `cwd`\nare not included.\n\nDefault: `process.cwd()`\n\n#### options.exclude\n\nArray of path globs to be ignored.  Note this list does not include `node_modules` which\nis added separately.  See [@istanbuljs/schema/default-excludes.js] for default list.\n\n#### options.excludeNodeModules\n\nBy default `node_modules` is excluded.  Setting this option `true` allows `node_modules`\nto be included.\n\n#### options.include\n\nArray of path globs that can be included.  By default this is unrestricted giving a result\nsimilar to `['**']` but more optimized.\n\n#### options.extension\n\nArray of extensions that can be included.  This ensures that nyc only attempts to process\nfiles which it might understand.  Note use of some formats may require adding parser\nplugins to your nyc or babel configuration.\n\nDefault: `['.js', '.cjs', '.mjs', '.ts', '.tsx', '.jsx']`\n\n### TestExclude#shouldInstrument(filename): boolean\n\nTest if `filename` matches the rules of this test-exclude instance.\n\n```js\nconst exclude = new TestExclude();\nexclude.shouldInstrument('index.js'); // true\nexclude.shouldInstrument('test.js'); // false\nexclude.shouldInstrument('README.md'); // false\nexclude.shouldInstrument('node_modules/test-exclude/index.js'); // false\n```\n\nIn this example code:\n* `index.js` is true because it matches the default `options.extension` list\n  and is not part of the default `options.exclude` list.\n* `test.js` is excluded because it matches the default `options.exclude` list.\n* `README.md` is not matched by the default `options.extension`\n* `node_modules/test-exclude/index.js` is excluded because `options.excludeNodeModules`\n  is true by default.\n\n### TestExculde#globSync(cwd = options.cwd): Array[string]\n\nThis synchronously retrieves a list of files within `cwd` which should be instrumented.\nNote that setting `cwd` to a parent of `options.cwd` is ineffective, this argument can\nonly be used to further restrict the result.\n\n### TestExclude#glob(cwd = options.cwd): Promise<Array[string]>\n\nThis function does the same as `TestExclude#globSync` but does so asynchronously.  The\nPromise resolves to an Array of strings.\n\n\n## `test-exclude` for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `test-exclude` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-test-exclude?utm_source=npm-test-exclude&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n[nyc]: https://github.com/istanbuljs/nyc\n[babel-plugin-istanbul]: https://github.com/istanbuljs/babel-plugin-istanbul\n[@istanbuljs/schema]: https://github.com/istanbuljs/schema\n[@istanbuljs/schema/default-excludes.js]: https://github.com/istanbuljs/schema/blob/master/default-exclude.js\n",
    "licenseText": "Copyright (c) 2016, Contributors\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice\nappear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE\nLIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/test-exclude/-/test-exclude-6.0.0.tgz#04a8698661d805ea6fa293b6cb9e63ac044ef15e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/test-exclude/-/test-exclude-6.0.0.tgz",
    "hash": "04a8698661d805ea6fa293b6cb9e63ac044ef15e",
    "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
    "registry": "npm",
    "packageName": "test-exclude",
    "cacheIntegrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w== sha1-BKhphmHYBepvopO2y55jrARO8V4="
  },
  "registry": "npm",
  "hash": "04a8698661d805ea6fa293b6cb9e63ac044ef15e"
}