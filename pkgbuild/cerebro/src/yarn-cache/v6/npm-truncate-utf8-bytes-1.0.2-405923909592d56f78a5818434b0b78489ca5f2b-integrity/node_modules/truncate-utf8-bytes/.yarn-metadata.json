{
  "manifest": {
    "name": "truncate-utf8-bytes",
    "version": "1.0.2",
    "description": "Truncate string to given length in bytes",
    "main": "index.js",
    "browser": "browser.js",
    "scripts": {
      "test": "tape test.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/parshap/truncate-utf8-bytes.git"
    },
    "keywords": [
      "truncate",
      "utf8"
    ],
    "author": {
      "name": "Carl Xiong",
      "email": "xiongc05@gmail.com"
    },
    "license": "WTFPL",
    "bugs": {
      "url": "https://github.com/parshap/truncate-utf8-bytes/issues"
    },
    "homepage": "https://github.com/parshap/truncate-utf8-bytes#readme",
    "devDependencies": {
      "tape": "^4.2.2"
    },
    "dependencies": {
      "utf8-byte-length": "^1.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-truncate-utf8-bytes-1.0.2-405923909592d56f78a5818434b0b78489ca5f2b-integrity/node_modules/truncate-utf8-bytes/package.json",
    "contributors": [
      {
        "name": "Carl Xiong",
        "email": "xiongc05@gmail.com"
      },
      {
        "name": "Parsha Pourkhomami",
        "email": "parshap@gmail.com"
      }
    ],
    "readmeFilename": "README.md",
    "readme": "# truncate-utf8-bytes [![build status](https://secure.travis-ci.org/parshap/truncate-utf8-bytes.svg?branch=master)](http://travis-ci.org/parshap/truncate-utf8-bytes)\n\nTruncate a string to the given length in bytes. Correctly handles\nmulti-byte characters and surrogate pairs.\n\nA browser implementation that doesn't use `Buffer.byteLength` is\nprovided to minimize build size.\n\n## Example\n\n```js\nvar truncate = require(\"truncate-utf8-bytes\")\nvar str = \"a☃\" // a = 1 byte, ☃ = 3 bytes\nconsole.log(truncate(str, 2))\n// -> \"a\"\n```\n\n## API\n\n### `var truncate = require(\"truncate-utf8-bytes\")`\n\n*When using browserify or webpack*, this automatically resolves to an\nimplementation that does not use `Buffer.byteLength`.\n\n### `truncate(string, length)`\n\nReturns `string` truncated to at most `length` bytes in length.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/truncate-utf8-bytes/-/truncate-utf8-bytes-1.0.2.tgz#405923909592d56f78a5818434b0b78489ca5f2b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/truncate-utf8-bytes/-/truncate-utf8-bytes-1.0.2.tgz",
    "hash": "405923909592d56f78a5818434b0b78489ca5f2b",
    "integrity": "sha512-95Pu1QXQvruGEhv62XCMO3Mm90GscOCClvrIUwCM0PYOXK3kaF3l3sIHxx71ThJfcbM2O5Au6SO3AWCSEfW4mQ==",
    "registry": "npm",
    "packageName": "truncate-utf8-bytes",
    "cacheIntegrity": "sha512-95Pu1QXQvruGEhv62XCMO3Mm90GscOCClvrIUwCM0PYOXK3kaF3l3sIHxx71ThJfcbM2O5Au6SO3AWCSEfW4mQ== sha1-QFkjkJWS1W94pYGENLC3hInKXys="
  },
  "registry": "npm",
  "hash": "405923909592d56f78a5818434b0b78489ca5f2b"
}