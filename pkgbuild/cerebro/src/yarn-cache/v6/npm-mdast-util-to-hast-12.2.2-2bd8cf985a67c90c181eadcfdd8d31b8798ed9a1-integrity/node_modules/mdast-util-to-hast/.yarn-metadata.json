{
  "manifest": {
    "name": "mdast-util-to-hast",
    "version": "12.2.2",
    "description": "mdast utility to transform to hast",
    "license": "MIT",
    "keywords": [
      "unist",
      "mdast",
      "mdast-util",
      "hast",
      "hast-util",
      "util",
      "utility",
      "markdown",
      "html"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/mdast-util-to-hast.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/mdast-util-to-hast/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "complex-types.d.ts",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "@types/mdurl": "^1.0.0",
      "mdast-util-definitions": "^5.0.0",
      "mdurl": "^1.0.0",
      "micromark-util-sanitize-uri": "^1.0.0",
      "trim-lines": "^3.0.0",
      "unist-builder": "^3.0.0",
      "unist-util-generated": "^2.0.0",
      "unist-util-position": "^4.0.0",
      "unist-util-visit": "^4.0.0"
    },
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "hast-util-to-html": "^8.0.0",
      "mdast-util-from-markdown": "^1.0.0",
      "mdast-util-gfm": "^2.0.0",
      "micromark-extension-gfm": "^2.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^11.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.52.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{lib/**/**,test/**}*.d.ts\" \"index.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier -w . --loglevel warn  && xo --fix",
      "test-api": "node test/index.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test/index.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "max-depth": "off",
        "import/no-cycle": "error"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm",
        [
          "lint-no-html",
          false
        ]
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "#": "needed `any`s",
      "ignoreFiles": [
        "lib/index.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-mdast-util-to-hast-12.2.2-2bd8cf985a67c90c181eadcfdd8d31b8798ed9a1-integrity/node_modules/mdast-util-to-hast/package.json",
    "readmeFilename": "readme.md",
    "readme": "# mdast-util-to-hast\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[mdast][] utility to transform to [hast][].\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`toHast(node[, options])`](#tohastnode-options)\n    *   [`defaultHandlers`](#defaulthandlers)\n    *   [`all(h, parent)`](#allh-parent)\n    *   [`one(h, node, parent)`](#oneh-node-parent)\n*   [Examples](#examples)\n    *   [Example: supporting HTML in markdown naïvely](#example-supporting-html-in-markdown-naïvely)\n    *   [Example: supporting HTML in markdown properly](#example-supporting-html-in-markdown-properly)\n    *   [Example: footnotes in languages other than English](#example-footnotes-in-languages-other-than-english)\n    *   [Example: supporting custom nodes](#example-supporting-custom-nodes)\n*   [Algorithm](#algorithm)\n*   [CSS](#css)\n*   [Syntax tree](#syntax-tree)\n    *   [Nodes](#nodes)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a utility that takes an [mdast][] (markdown) syntax tree as\ninput and turns it into a [hast][] (HTML) syntax tree.\n\n## When should I use this?\n\nThis project is useful when you want to deal with ASTs and turn markdown to\nHTML.\n\nThe hast utility [`hast-util-to-mdast`][hast-util-to-mdast] does the inverse of\nthis utility.\nIt turns HTML into markdown.\n\nThe remark plugin [`remark-rehype`][remark-rehype] wraps this utility to also\nturn markdown to HTML at a higher-level (easier) abstraction.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install mdast-util-to-hast\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {toHast} from \"https://esm.sh/mdast-util-to-hast@12\"\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {toHast} from \"https://esm.sh/mdast-util-to-hast@12?bundle\"\n</script>\n```\n\n## Use\n\nSay we have the following `example.md`:\n\n```markdown\n## Hello **World**!\n```\n\n…and next to it a module `example.js`:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst markdown = String(await fs.readFile('example.md'))\nconst mdast = fromMarkdown(markdown)\nconst hast = toHast(mdast)\nconst html = toHtml(hast)\n\nconsole.log(html)\n```\n\n…now running `node example.js` yields:\n\n```html\n<h2>Hello <strong>World</strong>!</h2>\n```\n\n## API\n\nThis package exports the identifiers `toHast`, `defaultHandlers`, `all`, and\n`one`.\nThere is no default export.\n\n### `toHast(node[, options])`\n\n[mdast][] utility to transform to [hast][].\n\n##### `options`\n\nConfiguration (optional).\n\n###### `options.allowDangerousHtml`\n\nWhether to persist raw HTML in markdown in the hast tree (`boolean`, default:\n`false`).\nRaw HTML is available in mdast as [`html`][mdast-html] nodes and can be embedded\nin hast as semistandard `raw` nodes.\nMost utilities ignore `raw` nodes but two notable ones don’t:\n\n*   [`hast-util-to-html`][hast-util-to-html] also has an option\n    `allowDangerousHtml` which will output the raw HTML.\n    This is typically discouraged as noted by the option name but is useful if\n    you completely trust authors\n*   [`hast-util-raw`][hast-util-raw] can handle the raw embedded HTML strings by\n    parsing them into standard hast nodes (`element`, `text`, etc).\n    This is a heavy task as it needs a full HTML parser, but it is the only way\n    to support untrusted content\n\n###### `options.clobberPrefix`\n\nPrefix to use before the `id` attribute on footnotes to prevent it from\n*clobbering* (`string`, default: `'user-content-'`).\nDOM clobbering is this:\n\n```html\n<p id=x></p>\n<script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n```\n\nElements by their ID are made available by browsers on the `window` object,\nwhich is a security risk.\nUsing a prefix solves this problem.\n\nMore information on how to handle clobbering and the prefix is explained in\n[Example: headings (DOM clobbering) in `rehype-sanitize`][clobber-example].\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark.\n> They are supported by GitHub, so they can be enabled by using the utility\n> [`mdast-util-gfm`][mdast-util-gfm].\n\n###### `options.footnoteLabel`\n\nLabel to use for the footnotes section (`string`, default: `'Footnotes'`).\nAffects screen readers.\nChange it when the markdown is not in English.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark.\n> They are supported by GitHub, so they can be enabled by using the utility\n> [`mdast-util-gfm`][mdast-util-gfm].\n\n###### `options.footnoteLabelTagName`\n\nHTML tag to use for the footnote label (`string`, default: `h2`).\nCan be changed to match your document structure and play well with your CSS.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark.\n> They are supported by GitHub, so they can be enabled by using the utility\n> [`mdast-util-gfm`][mdast-util-gfm].\n\n###### `options.footnoteLabelProperties`\n\nProperties to use on the footnote label (`object`, default:\n`{className: ['sr-only']}`).\nImportantly, `id: 'footnote-label'` is always added, because footnote calls use\nit with `aria-describedby` to provide an accessible label.\nA `sr-only` class is added by default to hide this from sighted users.\nChange it to make the label visible, or add classes for other purposes.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark.\n> They are supported by GitHub, so they can be enabled by using the utility\n> [`mdast-util-gfm`][mdast-util-gfm].\n\n###### `options.footnoteBackLabel`\n\nLabel to use from backreferences back to their footnote call (`string`, default:\n`'Back to content'`).\nAffects screen readers.\nChange it when the markdown is not in English.\n\n> 👉 **Note**: this option affects footnotes.\n> Footnotes are not specified by CommonMark.\n> They are supported by GitHub, so they can be enabled by using the utility\n> [`mdast-util-gfm`][mdast-util-gfm].\n\n###### `options.handlers`\n\nObject mapping node types to functions handling the corresponding nodes.\nSee [`lib/handlers/`][handlers] for examples.\n\nIn a handler, you have access to `h`, which should be used to create hast nodes\nfrom mdast nodes.\nOn `h`, there are several fields that may be of interest.\n\n###### `options.passThrough`\n\nList of mdast node types to pass through (keep) in hast (`Array<string>`,\ndefault: `[]`).\nIf the passed through nodes have children, those children are expected to be\nmdast and will be handled.\n\nSimilar functionality can be achieved with a custom handler.\nA `passThrough` of `['customNode']` is equivalent to:\n\n```js\ntoHast(/* … */, {\n  handlers: {\n    customNode(h, node) {\n      return 'children' in node ? {...node, children: all(h, node)} : node\n    }\n  }\n})\n```\n\n###### `options.unknownHandler`\n\nHandler for unknown nodes (`Handler?`).\nUnknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\nThe default behavior for unknown nodes is:\n\n*   when the node has a `value` (and doesn’t have `data.hName`,\n    `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n    node\n*   otherwise, create a `<div>` element (which could be changed with\n    `data.hName`), with its children mapped from mdast to hast as well\n\n##### Returns\n\n[`HastNode`][hast-node].\n\n### `defaultHandlers`\n\nObject mapping mdast node types to functions that can handle them.\nSee [`lib/handlers/index.js`][default-handlers].\n\n### `all(h, parent)`\n\nHelper function for writing custom handlers passed to `options.handlers`.\nPass it `h` and a parent node (mdast) and it will turn the node’s children into\nan array of transformed nodes (hast).\n\n### `one(h, node, parent)`\n\nHelper function for writing custom handlers passed to `options.handlers`.\nPass it `h`, a `node`, and its `parent` (mdast) and it will turn `node` into\nhast content.\n\n## Examples\n\n### Example: supporting HTML in markdown naïvely\n\nIf you completely trust authors (or plugins) and want to allow them to HTML *in*\nmarkdown, and the last utility has an `allowDangerousHtml` option as well (such\nas `hast-util-to-html`) you can pass `allowDangerousHtml` to this utility\n(`mdast-util-to-hast`):\n\n```js\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst markdown = 'It <i>works</i>! <img onerror=\"alert(1)\">'\nconst mdast = fromMarkdown(markdown)\nconst hast = toHast(mdast, {allowDangerousHtml: true})\nconst html = toHtml(hast, {allowDangerousHtml: true})\n\nconsole.log(html)\n```\n\n…now running `node example.js` yields:\n\n```html\n<p>It <i>works</i>! <img onerror=\"alert(1)\"></p>\n```\n\n> ⚠️ **Danger**: observe that the XSS attack through the `onerror` attribute\n> is still present.\n\n### Example: supporting HTML in markdown properly\n\nIf you do not trust the authors of the input markdown, or if you want to make\nsure that further utilities can see HTML embedded in markdown, use\n[`hast-util-raw`][hast-util-raw].\nThe following example passes `allowDangerousHtml` to this utility\n(`mdast-util-to-hast`), then turns the raw embedded HTML into proper HTML nodes\n(`hast-util-raw`), and finally sanitizes the HTML by only allowing safe things\n(`hast-util-sanitize`):\n\n```js\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {toHast} from 'mdast-util-to-hast'\nimport {raw} from 'hast-util-raw'\nimport {sanitize} from 'hast-util-sanitize'\nimport {toHtml} from 'hast-util-to-html'\n\nconst markdown = 'It <i>works</i>! <img onerror=\"alert(1)\">'\nconst mdast = fromMarkdown(markdown)\nconst hast = raw(toHast(mdast, {allowDangerousHtml: true}))\nconst safeHast = sanitize(hast)\nconst html = toHtml(safeHast)\n\nconsole.log(html)\n```\n\n…now running `node example.js` yields:\n\n```html\n<p>It <i>works</i>! <img></p>\n```\n\n> 👉 **Note**: observe that the XSS attack through the `onerror` attribute\n> is no longer present.\n\n### Example: footnotes in languages other than English\n\nIf you know that the markdown is authored in a language other than English,\nand you’re using `micromark-extension-gfm` and `mdast-util-gfm` to match how\nGitHub renders markdown, and you know that footnotes are (or can?) be used, you\nshould translate the labels associated with them.\n\nLet’s first set the stage:\n\n```js\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown} from 'mdast-util-gfm'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst markdown = 'Bonjour[^1]\\n\\n[^1]: Monde!'\nconst mdast = fromMarkdown(markdown, {\n  extensions: [gfm()],\n  mdastExtensions: [gfmFromMarkdown()]\n})\nconst hast = toHast(mdast)\nconst html = toHtml(hast)\n\nconsole.log(html)\n```\n\n…now running `node example.js` yields:\n\n```html\n<p>Bonjour<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>Monde! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>\n```\n\nThis is a mix of English and French that screen readers can’t handle nicely.\nLet’s say our program does know that the markdown is in French.\nIn that case, it’s important to translate and define the labels relating to\nfootnotes so that screen reader users can properly pronounce the page:\n\n```diff\n@@ -9,7 +9,10 @@ const mdast = fromMarkdown(markdown, {\n   extensions: [gfm()],\n   mdastExtensions: [gfmFromMarkdown()]\n })\n-const hast = toHast(mdast)\n+const hast = toHast(mdast, {\n+  footnoteLabel: 'Notes de bas de page',\n+  footnoteBackLabel: 'Arrière'\n+})\n const html = toHtml(hast)\n\n console.log(html)\n```\n\n…now running `node example.js` with the above patch applied yields:\n\n```diff\n@@ -1,8 +1,8 @@\n <p>Bonjour<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n-<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n+<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Notes de bas de page</h2>\n <ol>\n <li id=\"user-content-fn-1\">\n-<p>Monde! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n+<p>Monde! <a href=\"#user-content-fnref-1\" data-footnote-backref class=\"data-footnote-backref\" aria-label=\"Arrière\">↩</a></p>\n </li>\n </ol>\n </section>\n```\n\n### Example: supporting custom nodes\n\nThis project supports CommonMark and the GFM constructs (footnotes,\nstrikethrough, tables) and the frontmatter constructs YAML and TOML.\nSupport can be extended to other constructs in two ways: a) with handlers, b)\nthrough fields on nodes.\n\nFor example, when we represent a mark element in markdown and want to turn it\ninto a `<mark>` element in HTML, we can use a handler:\n\n```js\nimport {toHast, all} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst mdast = {\n  type: 'paragraph',\n  children: [{type: 'mark', children: [{type: 'text', value: 'x'}]}]\n}\n\nconst hast = toHast(mdast, {\n  handlers: {\n    mark(h, node) {\n      return h(node, 'mark', all(h, node))\n    }\n  }\n})\n\nconsole.log(toHtml(hast))\n```\n\nWe can do the same through certain fields on nodes:\n\n```js\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\nconst mdast = {\n  type: 'paragraph',\n  children: [\n    {\n      type: 'mark',\n      children: [{type: 'text', value: 'x'}],\n      data: {hName: 'mark'}\n    }\n  ]\n}\n\nconsole.log(toHtml(toHast(mdast)))\n```\n\n## Algorithm\n\nThis project by default handles CommonMark, GFM (footnotes, strikethrough,\ntables) and common frontmatter (YAML, TOML).\n\nExisting handlers can be overwritten and handlers for more nodes can be added.\nIt’s also possible to define how mdast is turned into hast through fields on\nnodes.\n\n##### Default handling\n\nThe following table gives insight into what input turns into what output:\n\n<table>\n<thead>\n<tr>\n<th scope=\"col\">mdast node</th>\n<th scope=\"col\">markdown example</th>\n<th scope=\"col\">hast node</th>\n<th scope=\"col\">html example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th scope=\"row\">\n\n[`blockquote`](https://github.com/syntax-tree/mdast#blockquote)\n\n</th>\n<td>\n\n```markdown\n> A greater than…\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`blockquote`)\n\n</td>\n<td>\n\n```html\n<blockquote>\n<p>A greater than…</p>\n</blockquote>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`break`](https://github.com/syntax-tree/mdast#break)\n\n</th>\n<td>\n\n```markdown\nA backslash\\\nbefore a line break…\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`br`)\n\n</td>\n<td>\n\n```html\n<p>A backslash<br>\nbefore a line break…</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`code`](https://github.com/syntax-tree/mdast#code)\n\n</th>\n<td>\n\n````markdown\n```js\nbacktick.fences('for blocks')\n```\n````\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`pre` and `code`)\n\n</td>\n<td>\n\n```html\n<pre><code className=\"language-js\">backtick.fences('for blocks')\n</code></pre>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`delete`](https://github.com/syntax-tree/mdast#delete) (GFM)\n\n</th>\n<td>\n\n```markdown\nTwo ~~tildes~~ for delete.\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`del`)\n\n</td>\n<td>\n\n```html\n<p>Two <del>tildes</del> for delete.</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`emphasis`](https://github.com/syntax-tree/mdast#emphasis)\n\n</th>\n<td>\n\n```markdown\nSome *asterisks* for emphasis.\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`em`)\n\n</td>\n<td>\n\n```html\n<p>Some <em>asterisks</em> for emphasis.</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`footnoteReference`](https://github.com/syntax-tree/mdast#footnotereference),\n[`footnoteDefinition`](https://github.com/syntax-tree/mdast#footnotedefinition)\n(GFM)\n\n</th>\n<td>\n\n```markdown\nWith a [^caret].\n\n[^caret]: Stuff\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`section`, `sup`, `a`)\n\n</td>\n<td>\n\n```html\n<p>With a <sup><a href=\"#fn-caret\" …>1</a></sup>.</p>…\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`heading`](https://github.com/syntax-tree/mdast#heading)\n\n</th>\n<td>\n\n```markdown\n# One number sign…\n###### Six number signs…\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`h1`…`h6`)\n\n</td>\n<td>\n\n```html\n<h1>One number sign…</h1>\n<h6>Six number signs…</h6>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`html`](https://github.com/syntax-tree/mdast#html)\n\n</th>\n<td>\n\n```html\n<kbd>CMD+S</kbd>\n```\n\n</td>\n<td>\n\nNothing (default), `raw` (when `allowDangerousHtml: true`)\n\n</td>\n<td>\n\nn/a\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`image`](https://github.com/syntax-tree/mdast#image)\n\n</th>\n<td>\n\n```markdown\n![Alt text](/logo.png \"title\")\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`img`)\n\n</td>\n<td>\n\n```html\n<p><img src=\"/logo.png\" alt=\"Alt text\" title=\"title\"></p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`imageReference`](https://github.com/syntax-tree/mdast#imagereference),\n[`definition`](https://github.com/syntax-tree/mdast#definition)\n\n</th>\n<td>\n\n```markdown\n![Alt text][logo]\n\n[logo]: /logo.png \"title\"\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`img`)\n\n</td>\n<td>\n\n```html\n<p><img src=\"/logo.png\" alt=\"Alt text\" title=\"title\"></p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`inlineCode`](https://github.com/syntax-tree/mdast#inlinecode)\n\n</th>\n<td>\n\n```markdown\nSome `backticks` for inline code.\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`code`)\n\n</td>\n<td>\n\n```html\n<p>Some <code>backticks</code> for inline code.</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`link`](https://github.com/syntax-tree/mdast#link)\n\n</th>\n<td>\n\n```markdown\n[Example](https://example.com \"title\")\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`a`)\n\n</td>\n<td>\n\n```html\n<p><a href=\"https://example.com\" title=\"title\">Example</a></p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`linkReference`](https://github.com/syntax-tree/mdast#linkreference),\n[`definition`](https://github.com/syntax-tree/mdast#definition)\n\n</th>\n<td>\n\n```markdown\n[Example][]\n\n[example]: https://example.com \"title\"\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`a`)\n\n</td>\n<td>\n\n```html\n<p><a href=\"https://example.com\" title=\"title\">Example</a></p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`list`](https://github.com/syntax-tree/mdast#list),\n[`listItem`](https://github.com/syntax-tree/mdast#listitem)\n\n</th>\n<td>\n\n```markdown\n* asterisks for unordered items\n\n1. decimals and a dot for ordered items\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`li` and `ol` or `ul`)\n\n</td>\n<td>\n\n```html\n<ul>\n<li>asterisks for unordered items</li>\n</ul>\n<ol>\n<li>decimals and a dot for ordered items</li>\n</ol>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`paragraph`](https://github.com/syntax-tree/mdast#paragraph)\n\n</th>\n<td>\n\n```markdown\nJust some text…\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`p`)\n\n</td>\n<td>\n\n```html\n<p>Just some text…</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`root`](https://github.com/syntax-tree/mdast#root)\n\n</th>\n<td>\n\n```markdown\nAnything!\n```\n\n</td>\n<td>\n\n[`root`](https://github.com/syntax-tree/hast#root)\n\n</td>\n<td>\n\n```html\n<p>Anything!</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`strong`](https://github.com/syntax-tree/mdast#strong)\n\n</th>\n<td>\n\n```markdown\nTwo **asterisks** for strong.\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`strong`)\n\n</td>\n<td>\n\n```html\n<p>Two <strong>asterisks</strong> for strong.</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`text`](https://github.com/syntax-tree/mdast#text)\n\n</th>\n<td>\n\n```markdown\nAnything!\n```\n\n</td>\n<td>\n\n[`text`](https://github.com/syntax-tree/hast#text)\n\n</td>\n<td>\n\n```html\n<p>Anything!</p>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`table`](https://github.com/syntax-tree/mdast#table),\n[`tableRow`](https://github.com/syntax-tree/mdast#tablerow),\n[`tableCell`](https://github.com/syntax-tree/mdast#tablecell)\n\n</th>\n<td>\n\n```markdown\n| Pipes |\n| ----- |\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`table`, `thead`, `tbody`, `tr`, `td`, `th`)\n\n</td>\n<td>\n\n```html\n<table>\n<thead>\n<tr>\n<th>Pipes</th>\n</tr>\n</thead>\n</table>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`thematicBreak`](https://github.com/syntax-tree/mdast#thematicbreak)\n\n</th>\n<td>\n\n```markdown\nThree asterisks for a thematic break:\n\n***\n```\n\n</td>\n<td>\n\n[`element`](https://github.com/syntax-tree/hast#element) (`hr`)\n\n</td>\n<td>\n\n```html\n<p>Three asterisks for a thematic break:</p>\n<hr>\n```\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n`toml` (frontmatter)\n\n</th>\n<td>\n\n```markdown\n+++\nfenced = true\n+++\n```\n\n</td>\n<td>\n\nNothing\n\n</td>\n<td>\n\nn/a\n\n</td>\n</tr>\n<tr>\n<th scope=\"row\">\n\n[`yaml`](https://github.com/syntax-tree/mdast#yaml) (frontmatter)\n\n</th>\n<td>\n\n```markdown\n---\nfenced: yes\n---\n```\n\n</td>\n<td>\n\nNothing\n\n</td>\n<td>\n\nn/a\n\n</td>\n</tr>\n</tbody>\n</table>\n\n> 👉 **Note**: GFM prescribes that the obsolete `align` attribute on `td` and\n> `th` elements is used.\n> To use `style` attributes instead of obsolete features, combine this utility\n> with [`@mapbox/hast-util-table-cell-style`][hast-util-table-cell-style].\n\n> 🧑‍🏫 **Info**: this project is concerned with turning one syntax tree into\n> another.\n> It does not deal with markdown syntax or HTML syntax.\n> The preceding examples are illustrative rather than authoritative or\n> exhaustive.\n\n##### Fields on nodes\n\nA frequent problem arises when having to turn one syntax tree into another.\nAs the original tree (in this case, mdast for markdown) is in some cases\nlimited compared to the destination (in this case, hast for HTML) tree,\nis it possible to provide more info in the original to define what the\nresult will be in the destination?\nThis is possible by defining data on mdast nodes, which this utility will read\nas instructions on what hast nodes to create.\n\nAn example is math, which is a nonstandard markdown extension, that this utility\ndoesn’t understand.\nTo solve this, `mdast-util-math` defines instructions on mdast nodes that this\nplugin does understand because they define a certain hast structure.\n\nThe following fields can be used:\n\n*   `node.data.hName` configures the element’s tag name\n*   `node.data.hProperties` is mixed into the element’s properties\n*   `node.data.hChildren` configures the element’s children\n\n###### `hName`\n\n`node.data.hName` sets the tag name of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'strong',\n  data: {hName: 'b'},\n  children: [{type: 'text', value: 'Alpha'}]\n}\n```\n\n…yields ([hast][]):\n\n```js\n{\n  type: 'element',\n  tagName: 'b',\n  properties: {},\n  children: [{type: 'text', value: 'Alpha'}]\n}\n```\n\n###### `hProperties`\n\n`node.data.hProperties` sets the properties of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'image',\n  src: 'circle.svg',\n  alt: 'Big red circle on a black background',\n  title: null,\n  data: {hProperties: {className: ['responsive']}}\n}\n```\n\n…yields ([hast][]):\n\n```js\n{\n  type: 'element',\n  tagName: 'img',\n  properties: {\n    src: 'circle.svg',\n    alt: 'Big red circle on a black background',\n    className: ['responsive']\n  },\n  children: []\n}\n```\n\n###### `hChildren`\n\n`node.data.hChildren` sets the children of an element.\nThe following [mdast][]:\n\n```js\n{\n  type: 'code',\n  lang: 'js',\n  data: {\n    hChildren: [\n      {\n        type: 'element',\n        tagName: 'span',\n        properties: {className: ['hljs-meta']},\n        children: [{type: 'text', value: '\"use strict\"'}]\n      },\n      {type: 'text', value: ';'}\n    ]\n  },\n  value: '\"use strict\";'\n}\n```\n\n…yields ([hast][]):\n\n```js\n{\n  type: 'element',\n  tagName: 'pre',\n  properties: {},\n  children: [{\n    type: 'element',\n    tagName: 'code',\n    properties: {className: ['language-js']},\n    children: [\n      {\n        type: 'element',\n        tagName: 'span',\n        properties: {className: ['hljs-meta']},\n        children: [{type: 'text', value: '\"use strict\"'}]\n      },\n      {type: 'text', value: ';'}\n    ]\n  }]\n}\n```\n\n> 👉 **Note**: the `pre` and `language-js` class are normal `mdast-util-to-hast`\n> functionality.\n\n## CSS\n\nAssuming you know how to use (semantic) HTML and CSS, then it should generally\nbe straight forward to style the HTML produced by this plugin.\nWith CSS, you can get creative and style the results as you please.\n\nSome semistandard features, notably GFMs tasklists and footnotes, generate HTML\nthat be unintuitive, as it matches exactly what GitHub produces for their\nwebsite.\nThere is a project, [`sindresorhus/github-markdown-css`][github-markdown-css],\nthat exposes the stylesheet that GitHub uses for rendered markdown, which might\neither be inspirational for more complex features, or can be used as-is to\nexactly match how GitHub styles rendered markdown.\n\nThe following CSS is needed to make footnotes look a bit like GitHub:\n\n```css\n/* Style the footnotes section. */\n.footnotes {\n  font-size: smaller;\n  color: #8b949e;\n  border-top: 1px solid #30363d;\n}\n\n/* Hide the section label for visual users. */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  word-wrap: normal;\n  border: 0;\n}\n\n/* Place `[` and `]` around footnote calls. */\n[data-footnote-ref]::before {\n  content: '[';\n}\n\n[data-footnote-ref]::after {\n  content: ']';\n}\n```\n\n## Syntax tree\n\nThe following interfaces are added to **[hast][]** by this utility.\n\n### Nodes\n\n#### `Raw`\n\n```idl\ninterface Raw <: Literal {\n  type: \"raw\"\n}\n```\n\n**Raw** (**[Literal][dfn-literal]**) represents a string if raw HTML inside\nhast.\nRaw nodes are typically ignored but are handled by\n[`hast-util-to-html`][hast-util-to-html] and [`hast-util-raw`][hast-util-raw].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt also exports `Options`, `Handler`, `Handlers`, `H`, and `Raw` types.\n\nIf you’re working with raw nodes in the hast syntax tree (which are added when\n`allowDangerousHtml: true`), make sure to import this utility somewhere in your\ntypes, as that registers the new node types in the tree.\n\n```js\n/** @typedef {import('mdast-util-to-hast')} */\nimport {visit} from 'unist-util-visit'\n\n/** @type {import('hast').Root} */\nconst tree = { /* … */ }\n\nvisit(tree, (node) => {\n  // `node` can now be `raw`.\n})\n```\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Security\n\nUse of `mdast-util-to-hast` can open you up to a\n[cross-site scripting (XSS)][xss] attack.\nEmbedded hast properties (`hName`, `hProperties`, `hChildren`), custom handlers,\nand the `allowDangerousHtml` option all provide openings.\n\nThe following example shows how a script is injected where a benign code block\nis expected with embedded hast properties:\n\n```js\nconst code = {type: 'code', value: 'alert(1)'}\n\ncode.data = {hName: 'script'}\n```\n\nYields:\n\n```html\n<script>alert(1)</script>\n```\n\nThe following example shows how an image is changed to fail loading and\ntherefore run code in a browser.\n\n```js\nconst image = {type: 'image', url: 'existing.png'}\n\nimage.data = {hProperties: {src: 'missing', onError: 'alert(2)'}}\n```\n\nYields:\n\n```html\n<img src=\"missing\" onerror=\"alert(2)\">\n```\n\nThe following example shows the default handling of embedded HTML:\n\n```markdown\n# Hello\n\n<script>alert(3)</script>\n```\n\nYields:\n\n```html\n<h1>Hello</h1>\n```\n\nPassing `allowDangerousHtml: true` to `mdast-util-to-hast` is typically still\nnot enough to run unsafe code:\n\n```html\n<h1>Hello</h1>\n&#x3C;script>alert(3)&#x3C;/script>\n```\n\nIf `allowDangerousHtml: true` is also given to `hast-util-to-html` (or\n`rehype-stringify`), the unsafe code runs:\n\n```html\n<h1>Hello</h1>\n<script>alert(3)</script>\n```\n\nUse [`hast-util-sanitize`][hast-util-sanitize] to make the hast tree safe.\n\n## Related\n\n*   [`hast-util-to-mdast`](https://github.com/syntax-tree/hast-util-to-mdast)\n    — transform hast to mdast\n*   [`hast-util-to-xast`](https://github.com/syntax-tree/hast-util-to-xast)\n    — transform hast to xast\n*   [`hast-util-sanitize`](https://github.com/syntax-tree/hast-util-sanitize)\n    — sanitize hast nodes\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-to-hast/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-to-hast/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-to-hast.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-to-hast\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-to-hast.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-to-hast\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-to-hast.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-to-hast\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[mdast-html]: https://github.com/syntax-tree/mdast#html\n\n[hast-util-table-cell-style]: https://github.com/mapbox/hast-util-table-cell-style\n\n[hast]: https://github.com/syntax-tree/hast\n\n[hast-node]: https://github.com/syntax-tree/hast#nodes\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[handlers]: lib/handlers\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[mdast-util-gfm]: https://github.com/syntax-tree/mdast-util-gfm\n\n[hast-util-to-mdast]: https://github.com/syntax-tree/hast-util-to-mdast\n\n[hast-util-to-html]: https://github.com/syntax-tree/hast-util-to-html\n\n[hast-util-raw]: https://github.com/syntax-tree/hast-util-raw\n\n[hast-util-sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[clobber-example]: https://github.com/rehypejs/rehype-sanitize#example-headings-dom-clobbering\n\n[default-handlers]: lib/handlers/index.js\n\n[github-markdown-css]: https://github.com/sindresorhus/github-markdown-css\n\n[dfn-literal]: https://github.com/syntax-tree/hast#literal\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mdast-util-to-hast/-/mdast-util-to-hast-12.2.2.tgz#2bd8cf985a67c90c181eadcfdd8d31b8798ed9a1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mdast-util-to-hast/-/mdast-util-to-hast-12.2.2.tgz",
    "hash": "2bd8cf985a67c90c181eadcfdd8d31b8798ed9a1",
    "integrity": "sha512-lVkUttV9wqmdXFtEBXKcepvU/zfwbhjbkM5rxrquLW55dS1DfOrnAXCk5mg1be1sfY/WfMmayGy1NsbK1GLCYQ==",
    "registry": "npm",
    "packageName": "mdast-util-to-hast",
    "cacheIntegrity": "sha512-lVkUttV9wqmdXFtEBXKcepvU/zfwbhjbkM5rxrquLW55dS1DfOrnAXCk5mg1be1sfY/WfMmayGy1NsbK1GLCYQ== sha1-K9jPmFpnyQwYHq3P3Y0xuHmO2aE="
  },
  "registry": "npm",
  "hash": "2bd8cf985a67c90c181eadcfdd8d31b8798ed9a1"
}