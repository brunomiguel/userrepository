{
  "manifest": {
    "name": "appdmg",
    "version": "0.6.4",
    "license": "MIT",
    "author": {
      "name": "Linus Unnebäck",
      "email": "linus@folkdatorn.se"
    },
    "bin": {
      "appdmg": "bin/appdmg.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/LinusU/node-appdmg.git"
    },
    "dependencies": {
      "async": "^1.4.2",
      "ds-store": "^0.1.5",
      "execa": "^1.0.0",
      "fs-temp": "^1.0.0",
      "fs-xattr": "^0.3.0",
      "image-size": "^0.7.4",
      "is-my-json-valid": "^2.20.0",
      "minimist": "^1.1.3",
      "parse-color": "^1.0.0",
      "path-exists": "^4.0.0",
      "repeat-string": "^1.5.4"
    },
    "engines": {
      "node": ">=8.5"
    },
    "os": [
      "darwin"
    ],
    "scripts": {
      "test": "standard && mocha -b"
    },
    "devDependencies": {
      "capture-window": "^0.1.3",
      "looks-same": "^7.2.1",
      "mocha": "^6.1.4",
      "standard": "^12.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-appdmg-0.6.4-283b85cc761c1d924f2370bd5cdbd92824b12ef3-integrity/node_modules/appdmg/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-appdmg\n\nGenerate beautiful DMG-images for your OS X applications.\n\n## Installation\n\n```sh\nnpm install -g appdmg\n```\n\n## Usage\n\n```sh\nappdmg <json-path> <dmg-path>\n```\n\n- `json-path`: Path to the JSON Specification file\n- `dmg-path`:  Path at which to place the final DMG\n\n## Test\n\nTo produce a test DMG to your desktop, run the following command:\n\n```sh\nappdmg test/assets/appdmg.json ~/Desktop/test.dmg\n```\n\n## JSON Input\n\n![Visualization](/help/help.png?raw=true)\n\nThe JSON input for the image follows a simple structure. All paths are relative to\nthe JSON file's path.\n\n### Example\n\n```json\n{\n  \"title\": \"Test Application\",\n  \"icon\": \"test-app.icns\",\n  \"background\": \"test-background.png\",\n  \"contents\": [\n    { \"x\": 448, \"y\": 344, \"type\": \"link\", \"path\": \"/Applications\" },\n    { \"x\": 192, \"y\": 344, \"type\": \"file\", \"path\": \"TestApp.app\" }\n  ]\n}\n```\n\n### Specification\n\n- `title` (string, required) - The title of the produced DMG, which will be shown when mounted\n- `icon` (string, optional) - Path to your icon, which will be shown when mounted\n- `background` (string, optional) - Path to your background\n- `background-color` (string, optional) - Background color (accepts css colors)\n- `icon-size` (number, optional) - Size of all the icons inside the DMG\n- `window` (object, optional) - Window options\n  - `position` (object, optional) - Position when opened\n    - `x` (number, required) - X position relative to left of the screen\n    - `y` (number, required) - Y position relative to bottom of the screen\n  - `size` (object, optional) - Window size\n    - `width` (number, required) - Window width\n    - `height` (number, required) - Window height\n- `format` (enum[string], optional) - Disk image format\n    - `UDRW` - UDIF read/write image\n    - `UDRO` - UDIF read-only image\n    - `UDCO` - UDIF ADC-compressed image\n    - `UDZO` - UDIF zlib-compressed image\n    - `UDBZ` - UDIF bzip2-compressed image (OS X 10.4+ only)\n    - `ULFO` - UDIF lzfse-compressed image (OS X 10.11+ only)\n- `contents` (array[object], required) - This is the contents of your DMG.\n    - `x` (number, required) - X position relative to icon center\n    - `y` (number, required) - Y position relative to icon center\n    - `type` (enum[string], required)\n      - `link` - Creates a link to the specified target\n      - `file` - Adds a file to the DMG\n      - `position` - Positions a present file\n    - `path` (string, required) - Path to the file\n    - `name` (string, optional) - Name of the file within the DMG\n- `code-sign` (object, optional) - Options for codesigning the DMG\n  - `signing-identity` (string, required) - The identity with which to sign the resulting DMG\n  - `identifier` (string, optional) - Explicitly set the unique identifier string that is embedded in code signatures\n\n`0.1.x` used a different JSON format. This format is still supported but\ndeprecated, please update your json.\n\n### Retina background\n\nFinder can display retina backgrounds if packaged correctly into a `.tiff`\nfile. `appdmg` will do this for you automatically if it can find a file\nwith the same name as the background appended with `@2x`.\n\nE.g. if the json contains `\"background\": \"TestBkg.png\"` then add a file\nwith the name `TestBkg@2x.png` into the same folder.\n\n## API\n\nThe application can also be called from within\nanother javascript file, example:\n\n```javascript\n\nconst appdmg = require('appdmg');\nconst ee = appdmg({ source: 'test/appdmg.json', target: 'test.dmg' });\n\nee.on('progress', function (info) {\n\n  // info.current is the current step\n  // info.total is the total number of steps\n  // info.type is on of 'step-begin', 'step-end'\n\n  // 'step-begin'\n  // info.title is the title of the current step\n\n  // 'step-end'\n  // info.status is one of 'ok', 'skip', 'fail'\n\n});\n\nee.on('finish', function () {\n  // There now is a `test.dmg` file\n});\n\nee.on('error', function (err) {\n  // An error occurred\n});\n\n```\n\nYou can also pass in the specification directly instead of reading it from a file. `basepath` should be a path which will be used to resolve other paths in the specification.\n\n```javascript\nconst ee = appdmg({\n  target: 'test.dmg',\n  basepath: __dirname,\n  specification: {\n    \"title\": \"Test Title\",\n    // ...\n  }\n});\n```\n\n## OS Support\n\nCurrently the only supported os is Mac OS X.\n\nTrack the status of this here: https://github.com/LinusU/node-appdmg/issues/14\n\n## Hidden files\n\nBy default hidden files will show for users with `com.apple.finder AppleShowAllFiles`\nset to `TRUE`. This can be worked around by moving all hidden files outside the initial\nwindow size (using `\"type\": \"position\"`), this has the side-effect of enabling a scrollbar.\n\nFiles to usually move:\n\n- `.background`\n- `.DS_Store`\n- `.Trashes`\n- `.VolumeIcon.icns`\n\n## Alternatives\n\n- [create-dmg](https://github.com/andreyvit/create-dmg/blob/master/README.md), a Bash script\n- [dmgbuild](https://pypi.python.org/pypi/dmgbuild), a Python version\n",
    "description": "Generate beautiful DMG-images for your OS X applications.",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Linus Unnebäck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/appdmg/-/appdmg-0.6.4.tgz#283b85cc761c1d924f2370bd5cdbd92824b12ef3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/appdmg/-/appdmg-0.6.4.tgz",
    "hash": "283b85cc761c1d924f2370bd5cdbd92824b12ef3",
    "integrity": "sha512-YTilgNF0DF2DSRzGzzGDxaTMLXlhe3b3HB8RAaoJJ/VJXZbOlzIAcZ7gdPniHUVUuHjGwnS7fUMd4FvO2Rp94A==",
    "registry": "npm",
    "packageName": "appdmg",
    "cacheIntegrity": "sha512-YTilgNF0DF2DSRzGzzGDxaTMLXlhe3b3HB8RAaoJJ/VJXZbOlzIAcZ7gdPniHUVUuHjGwnS7fUMd4FvO2Rp94A== sha1-KDuFzHYcHZJPI3C9XNvZKCSxLvM="
  },
  "registry": "npm",
  "hash": "283b85cc761c1d924f2370bd5cdbd92824b12ef3"
}