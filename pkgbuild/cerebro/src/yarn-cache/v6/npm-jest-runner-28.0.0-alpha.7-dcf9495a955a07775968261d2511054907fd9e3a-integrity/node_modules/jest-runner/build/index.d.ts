/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type {Config} from '@jest/types';
import Emittery = require('emittery');
import type {SerializableError} from '@jest/test-result';
import type {Test} from '@jest/test-result';
import type {TestEvents} from '@jest/test-result';
import type {TestResult} from '@jest/test-result';

export declare type OnTestFailure = (
  test: Test,
  serializableError: SerializableError,
) => Promise<void>;

export declare type OnTestStart = (test: Test) => Promise<void>;

export declare type OnTestSuccess = (
  test: Test,
  testResult: TestResult,
) => Promise<void>;

declare class TestRunner {
  private readonly _globalConfig;
  private readonly _context;
  private readonly eventEmitter;
  readonly __PRIVATE_UNSTABLE_API_supportsEventEmitters__: boolean;
  readonly isSerial?: boolean;
  constructor(globalConfig: Config.GlobalConfig, context?: TestRunnerContext);
  runTests(
    tests: Array<Test>,
    watcher: TestWatcher,
    onStart: OnTestStart | undefined,
    onResult: OnTestSuccess | undefined,
    onFailure: OnTestFailure | undefined,
    options: TestRunnerOptions,
  ): Promise<void>;
  private _createInBandTestRun;
  private _createParallelTestRun;
  on<Name extends keyof TestEvents>(
    eventName: Name,
    listener: (eventData: TestEvents[Name]) => void | Promise<void>,
  ): Emittery.UnsubscribeFn;
}
export default TestRunner;

export declare type TestRunnerContext = {
  changedFiles?: Set<string>;
  sourcesRelatedToTestsInChangedFiles?: Set<string>;
};

export declare type TestRunnerOptions = {
  serial: boolean;
};

export declare interface TestWatcher
  extends Emittery<{
    change: WatcherState;
  }> {
  state: WatcherState;
  setState(state: WatcherState): void;
  isInterrupted(): boolean;
  isWatchMode(): boolean;
}

declare type WatcherState = {
  interrupted: boolean;
};

export {};
