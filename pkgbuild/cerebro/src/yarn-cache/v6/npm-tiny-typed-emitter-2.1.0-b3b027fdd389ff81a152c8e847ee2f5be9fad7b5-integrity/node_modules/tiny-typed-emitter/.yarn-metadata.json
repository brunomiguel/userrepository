{
  "manifest": {
    "name": "tiny-typed-emitter",
    "version": "2.1.0",
    "description": "Fully type-checked EventEmitter",
    "main": "lib/index",
    "repository": {
      "type": "git",
      "url": "https://github.com/binier/tiny-typed-emitter.git"
    },
    "author": {
      "name": "Zurab Benashvili",
      "email": "zura.benashvili@gmail.com"
    },
    "license": "MIT",
    "keywords": [
      "tiny-typed-emitter",
      "typed-event-emitter",
      "typescript",
      "typescript-library",
      "typescript-boilerplate",
      "nodejs",
      "nodejs-library",
      "event",
      "events",
      "event-emitter",
      "event-emitters",
      "eventemitter",
      "eventemitter3",
      "definitelytyped",
      "typings",
      "definitely-typed"
    ],
    "files": [
      "lib/*"
    ],
    "scripts": {
      "release": "npm publish"
    },
    "devDependencies": {
      "@types/node": "^13.13.4",
      "typescript": "^3.8.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tiny-typed-emitter-2.1.0-b3b027fdd389ff81a152c8e847ee2f5be9fad7b5-integrity/node_modules/tiny-typed-emitter/package.json",
    "readmeFilename": "README.md",
    "readme": "# tiny-typed-emitter\n\nHave your events and their listeners type-checked with [no overhead](#no-overhead).\n\n[![npm version](https://badge.fury.io/js/tiny-typed-emitter.svg)](https://badge.fury.io/js/tiny-typed-emitter)\n\n## Install\n  Simply add the dependency using **npm**:\n```console\n$ npm i tiny-typed-emitter\n```\n  or using **yarn**:\n```console\n$ yarn add tiny-typed-emitter\n```\n\n## Usage\n\n1. import **tiny-typed-emitter** library:\n\n  ```ts\n  import { TypedEmitter } from 'tiny-typed-emitter';\n  ```\n\n2. define events and their listener signatures (**note:** quotes around event names are not mandatory):\n  ```ts\n  interface MyClassEvents {\n    'added': (el: string, wasNew: boolean) => void;\n    'deleted': (deletedCount: number) => void;\n  }\n  ```\n\n3. on this step depending on your use case, you can:\n  - define your custom class extending `EventEmitter`:\n    ```ts\n    class MyClass extends TypedEmitter<MyClassEvents> {\n      constructor() {\n        super();\n      }\n    }\n    ```\n  - create new event emitter instance:\n    ```ts\n    const emitter = new TypedEmitter<MyClassEvent>();\n    ```\n\n## Generic events interface\nTo use with generic events interface:\n\n```ts\ninterface MyClassEvents<T> {\n  'added': (el: T, wasNew: boolean) => void;\n}\n\nclass MyClass<T> extends TypedEmitter<MyClassEvents<T>> {\n\n}\n```\n\n## Compatible subclasses with different events\n\nThe type of `eventNames()` is a superset of the actual event names to make\nsubclasses of a `TypedEmitter` that introduce different events type\ncompatible. For example the following is possible:\n\n```ts\nclass Animal<E extends ListenerSignature<E>=ListenerSignature<unknown>> extends TypedEmitter<{spawn: () => void} & E> {\n  constructor() {\n    super();\n  }\n}\n\nclass Frog<E extends ListenerSignature<E>> extends Animal<{jump: () => void} & E> {\n}\n\nclass Bird<E extends ListenerSignature<E>> extends Animal<{fly: () => void} & E> {\n}\n\nconst animals: Animal[] = [new Frog(), new Bird()];\n```\n\n## No Overhead\nLibrary adds no overhead. All it does is it simply reexports renamed `EventEmitter`\nwith customized typings.\nYou can check **lib/index.js** to see the exported code.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Zurab Benashvili (binier) <zura.bena@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tiny-typed-emitter/-/tiny-typed-emitter-2.1.0.tgz#b3b027fdd389ff81a152c8e847ee2f5be9fad7b5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tiny-typed-emitter/-/tiny-typed-emitter-2.1.0.tgz",
    "hash": "b3b027fdd389ff81a152c8e847ee2f5be9fad7b5",
    "integrity": "sha512-qVtvMxeXbVej0cQWKqVSSAHmKZEHAvxdF8HEUBFWts8h+xEo5m/lEiPakuyZ3BnCBjOD8i24kzNOiOLLgsSxhA==",
    "registry": "npm",
    "packageName": "tiny-typed-emitter",
    "cacheIntegrity": "sha512-qVtvMxeXbVej0cQWKqVSSAHmKZEHAvxdF8HEUBFWts8h+xEo5m/lEiPakuyZ3BnCBjOD8i24kzNOiOLLgsSxhA== sha1-s7An/dOJ/4GhUsjoR+4vW+n617U="
  },
  "registry": "npm",
  "hash": "b3b027fdd389ff81a152c8e847ee2f5be9fad7b5"
}