{
  "manifest": {
    "name": "w3c-xmlserializer",
    "description": "A per-spec XML serializer implementation",
    "keywords": [
      "dom",
      "w3c",
      "xml",
      "xmlserializer"
    ],
    "version": "3.0.0",
    "license": "MIT",
    "dependencies": {
      "xml-name-validator": "^4.0.0"
    },
    "devDependencies": {
      "@domenic/eslint-config": "^1.4.0",
      "eslint": "^7.32.0",
      "jest": "^27.2.0",
      "jsdom": "^17.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jsdom/w3c-xmlserializer.git"
    },
    "files": [
      "lib/"
    ],
    "main": "lib/serialize.js",
    "scripts": {
      "test": "jest",
      "lint": "eslint ."
    },
    "engines": {
      "node": ">=12"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-w3c-xmlserializer-3.0.0-06cdc3eefb7e4d0b20a560a5a3aeb0d2d9a65923-integrity/node_modules/w3c-xmlserializer/package.json",
    "readmeFilename": "README.md",
    "readme": "# w3c-xmlserializer\n\nAn XML serializer that follows the [W3C specification](https://w3c.github.io/DOM-Parsing/).\n\nThis package can be used in Node.js, as long as you feed it a DOM node, e.g. one produced by [jsdom](https://github.com/jsdom/jsdom).\n\n## Basic usage\n\nAssume you have a DOM tree rooted at a node `node`. In Node.js, you could create this using [jsdom](https://github.com/jsdom/jsdom) as follows:\n\n```js\nconst { JSDOM } = require(\"jsdom\");\n\nconst { document } = new JSDOM().window;\nconst node = document.createElement(\"akomaNtoso\");\n```\n\nThen, you use this package as follows:\n\n\n```js\nconst serialize = require(\"w3c-xmlserializer\");\n\nconsole.log(serialize(node));\n// => '<akomantoso xmlns=\"http://www.w3.org/1999/xhtml\"></akomantoso>'\n```\n\n## `requireWellFormed` option\n\nBy default the input DOM tree is not required to be \"well-formed\"; any given input will serialize to some output string. You can instead require well-formedness via\n\n```js\nserialize(node, { requireWellFormed: true });\n```\n\nwhich will cause `Error`s to be thrown when non-well-formed constructs are encountered. [Per the spec](https://w3c.github.io/DOM-Parsing/#dfn-require-well-formed), this largely is about imposing constraints on the names of elements, attributes, etc.\n\nAs a point of reference, on the web platform:\n\n* The [`innerHTML` getter](https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml) uses the require-well-formed mode, i.e. trying to get the `innerHTML` of non-well-formed subtrees will throw.\n* The [`xhr.send()` method](https://xhr.spec.whatwg.org/#the-send()-method) does not require well-formedness, i.e. sending non-well-formed `Document`s will serialize and send them anyway.\n",
    "licenseText": "The MIT License (MIT)\n=====================\n\nCopyright © Sebastian Mayr\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the “Software”), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-3.0.0.tgz#06cdc3eefb7e4d0b20a560a5a3aeb0d2d9a65923",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-3.0.0.tgz",
    "hash": "06cdc3eefb7e4d0b20a560a5a3aeb0d2d9a65923",
    "integrity": "sha512-3WFqGEgSXIyGhOmAFtlicJNMjEps8b1MG31NCA0/vOF9+nKMUW1ckhi9cnNHmf88Rzw5V+dwIwsm2C7X8k9aQg==",
    "registry": "npm",
    "packageName": "w3c-xmlserializer",
    "cacheIntegrity": "sha512-3WFqGEgSXIyGhOmAFtlicJNMjEps8b1MG31NCA0/vOF9+nKMUW1ckhi9cnNHmf88Rzw5V+dwIwsm2C7X8k9aQg== sha1-Bs3D7vt+TQsgpWClo66w0tmmWSM="
  },
  "registry": "npm",
  "hash": "06cdc3eefb7e4d0b20a560a5a3aeb0d2d9a65923"
}