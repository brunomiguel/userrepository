export declare type Message = {
    id: string;
    value: Pattern | null;
    attributes: Record<string, Pattern>;
};
export declare type Term = {
    id: string;
    value: Pattern;
    attributes: Record<string, Pattern>;
};
export declare type Pattern = string | ComplexPattern;
export declare type ComplexPattern = Array<PatternElement>;
export declare type PatternElement = string | Expression;
export declare type Expression = SelectExpression | VariableReference | TermReference | MessageReference | FunctionReference | Literal;
export declare type SelectExpression = {
    type: "select";
    selector: Expression;
    variants: Array<Variant>;
    star: number;
};
export declare type VariableReference = {
    type: "var";
    name: string;
};
export declare type TermReference = {
    type: "term";
    name: string;
    attr: string | null;
    args: Array<Expression | NamedArgument>;
};
export declare type MessageReference = {
    type: "mesg";
    name: string;
    attr: string | null;
};
export declare type FunctionReference = {
    type: "func";
    name: string;
    args: Array<Expression | NamedArgument>;
};
export declare type Variant = {
    key: Literal;
    value: Pattern;
};
export declare type NamedArgument = {
    type: "narg";
    name: string;
    value: Literal;
};
export declare type Literal = StringLiteral | NumberLiteral;
export declare type StringLiteral = {
    type: "str";
    value: string;
};
export declare type NumberLiteral = {
    type: "num";
    value: number;
    precision: number;
};
