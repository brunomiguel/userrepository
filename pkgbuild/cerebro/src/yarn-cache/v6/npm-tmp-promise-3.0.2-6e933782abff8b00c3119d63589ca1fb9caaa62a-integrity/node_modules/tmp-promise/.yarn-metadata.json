{
  "manifest": {
    "name": "tmp-promise",
    "version": "3.0.2",
    "description": "The tmp package with promises support and disposers.",
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "mocha": "mocha",
      "check-types": "tsd",
      "test": "npm run mocha && npm run check-types",
      "publish": "node publish"
    },
    "keywords": [
      "tmp",
      "promise",
      "tempfile",
      "mkdtemp",
      "mktemp"
    ],
    "author": {
      "name": "Benjamin Gruenbaum and Collaborators."
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/benjamingr/tmp-promise.git"
    },
    "dependencies": {
      "tmp": "^0.2.0"
    },
    "devDependencies": {
      "@types/tmp": "^0.2.0",
      "mocha": "7.1.2",
      "tsd": "0.11.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tmp-promise-3.0.2-6e933782abff8b00c3119d63589ca1fb9caaa62a-integrity/node_modules/tmp-promise/package.json",
    "readmeFilename": "README.md",
    "readme": "# tmp-promise\n\n[![CircleCI](https://circleci.com/gh/benjamingr/tmp-promise.svg?style=svg)](https://circleci.com/gh/benjamingr/tmp-promise)\n[![npm version](https://badge.fury.io/js/tmp-promise.svg)](https://badge.fury.io/js/tmp-promise)\n\nA simple utility for creating temporary files or directories.\n\nThe [tmp](https://github.com/raszi/node-tmp) package with promises support. If you want to use `tmp` with `async/await` then this helper might be for you.\n\nThis documentation is mostly copied from that package's - but with promise usage instead of callback usage adapted.\n\n## Installation\n\n    npm i tmp-promise\n\n**Note:** Node.js 8+ is supported - older versions of Node.js are not supported by the Node.js foundation. If you need to use an older version of Node.js install tmp-promise@1.10\n\n    npm i tmp-promise@1.1.0\n\n## About\n\nThis adds promises support to a [widely used library][2]. This package is used to create temporary files and directories in a [Node.js][1] environment.\n \n\ntmp-promise offers both an asynchronous and a synchronous API. For all API calls, all\nthe parameters are optional.\n\nInternally, tmp uses crypto for determining random file names, or, when using templates, a six letter random identifier. And just in case that you do not have that much entropy left on your system, tmp will fall back to pseudo random numbers.\n\nYou can set whether you want to remove the temporary file on process exit or not, and the destination directory can also be set.\n\ntmp-promise also uses promise [disposers](http://stackoverflow.com/questions/28915677/what-is-the-promise-disposer-pattern) to provide a nice way to perform cleanup when you're done working with the files.\n\n## Usage (API Reference)\n\n### Asynchronous file creation\n\nSimple temporary file creation, the file will be closed and unlinked on process exit.\n\nWith Node.js 10 and es - modules:\n\n```js\nimport { file } from 'tmp-promise'\n\n(async () => {\n  const {fd, path, cleanup} = await file();\n  // work with file here in fd\n  cleanup();\n})(); \n```\n\nOr the older way:\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.file().then(o => {  \n  console.log(\"File: \", o.path);\n  console.log(\"Filedescriptor: \", o.fd);\n  \n  // If we don't need the file anymore we could manually call cleanup\n  // But that is not necessary if we didn't pass the keep option because the library\n  // will clean after itself.\n  o.cleanup();\n});\n```\n\nSimple temporary file creation with a [disposer](http://stackoverflow.com/questions/28915677/what-is-the-promise-disposer-pattern):\n\nWith Node.js 10 and es - modules:\n\n```js\nimport { withFile } from 'tmp-promise'\n\nwithFile(async ({path, fd}) => {\n  // when this function returns or throws - release the file \n  await doSomethingWithFile(db);\n});\n```\n\nOr the older way:\n\n```js\ntmp.withFile(o => {\n  console.log(\"File: \", o.path);\n  console.log(\"Filedescriptor: \", o.fd);\n  // the file remains opens until the below promise resolves\n  return somePromiseReturningFn();\n}).then(v => {\n  // file is closed here automatically, v is the value of somePromiseReturningFn\n});\n```\n\n\n### Synchronous file creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar tmpobj = tmp.fileSync();\nconsole.log(\"File: \", tmpobj.name);\nconsole.log(\"Filedescriptor: \", tmpobj.fd);\n  \n// If we don't need the file anymore we could manually call the removeCallback\n// But that is not necessary if we didn't pass the keep option because the library\n// will clean after itself.\ntmpobj.removeCallback();\n```\n\nNote that this might throw an exception if either the maximum limit of retries\nfor creating a temporary name fails, or, in case that you do not have the permission\nto write to the directory where the temporary file should be created in.\n\n### Asynchronous directory creation\n\nSimple temporary directory creation, it will be removed on process exit.\n\nIf the directory still contains items on process exit, then it won't be removed.\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.dir().then(o => {\n  console.log(\"Dir: \", o.path);\n  \n  // Manual cleanup\n  o.cleanup();\n});\n```\n\nIf you want to cleanup the directory even when there are entries in it, then\nyou can pass the `unsafeCleanup` option when creating it.\n\nYou can also use a [disposer](http://stackoverflow.com/questions/28915677/what-is-the-promise-disposer-pattern) here which takes care of cleanup automatically: \n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.withDir(o => {\n  console.log(\"Dir: \", o.path);\n  \n  // automatic cleanup when the below promise resolves\n  return somePromiseReturningFn(); \n}).then(v => {\n  // the directory has been cleaned here\n});\n```\n\n### Synchronous directory creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar tmpobj = tmp.dirSync();\nconsole.log(\"Dir: \", tmpobj.name);\n// Manual cleanup\ntmpobj.removeCallback();\n```\n\nNote that this might throw an exception if either the maximum limit of retries\nfor creating a temporary name fails, or, in case that you do not have the permission\nto write to the directory where the temporary directory should be created in.\n\n### Asynchronous filename generation\n\nIt is possible with this library to generate a unique filename in the specified\ndirectory.\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.tmpName().then(path => {\n    console.log(\"Created temporary filename: \", path);\n});\n```\n\n### Synchronous filename generation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar name = tmp.tmpNameSync();\nconsole.log(\"Created temporary filename: \", name);\n```\n\n## Advanced usage\n\n### Asynchronous file creation\n\nCreates a file with mode `0644`, prefix will be `prefix-` and postfix will be `.txt`.\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.file({ mode: 0644, prefix: 'prefix-', postfix: '.txt' }).then(o => {\n  console.log(\"File: \", o.path);\n  console.log(\"Filedescriptor: \", o.fd); \n});\n```\n\n### Synchronous file creation\n\nA synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar tmpobj = tmp.fileSync({ mode: 0644, prefix: 'prefix-', postfix: '.txt' });\nconsole.log(\"File: \", tmpobj.name);\nconsole.log(\"Filedescriptor: \", tmpobj.fd);\n```\n\n### Asynchronous directory creation\n\nCreates a directory with mode `0755`, prefix will be `myTmpDir_`.\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.dir({ mode: 0750, prefix: 'myTmpDir_' }).then(o => {\n  console.log(\"Dir: \", o.path);\n});\n```\n\n### Synchronous directory creation\n\nAgain, a synchronous version of the above.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar tmpobj = tmp.dirSync({ mode: 0750, prefix: 'myTmpDir_' });\nconsole.log(\"Dir: \", tmpobj.name);\n```\n\n\n### mkstemp like, asynchronously\n\nCreates a new temporary directory with mode `0700` and filename like `/tmp/tmp-nk2J1u`.\n\n```javascript\nvar tmp = require('tmp-promise');\ntmp.dir({ template: '/tmp/tmp-XXXXXX' }).then(console.log);\n```\n\n\n### mkstemp like, synchronously\n\nThis will behave similarly to the asynchronous version.\n\n```javascript\nvar tmp = require('tmp-promise');\n\nvar tmpobj = tmp.dirSync({ template: '/tmp/tmp-XXXXXX' });\nconsole.log(\"Dir: \", tmpobj.name);\n```\n\n### Asynchronous filename generation\n\nThe `tmpName()` function accepts the `prefix`, `postfix`, `dir`, etc. parameters also:\n\n```javascript\nvar tmp = require('tmp-promise');\n\ntmp.tmpName({ template: '/tmp/tmp-XXXXXX' }).then(path =>\n    console.log(\"Created temporary filename: \", path);\n);\n```\n\n### Synchronous filename generation\n\nThe `tmpNameSync()` function works similarly to `tmpName()`.\n\n```javascript\nvar tmp = require('tmp-promise');\nvar tmpname = tmp.tmpNameSync({ template: '/tmp/tmp-XXXXXX' });\nconsole.log(\"Created temporary filename: \", tmpname);\n```\n\n\n## Graceful cleanup\n\nOne may want to cleanup the temporary files even when an uncaught exception\noccurs. To enforce this, you can call the `setGracefulCleanup()` method:\n\n```javascript\nvar tmp = require('tmp');\n\ntmp.setGracefulCleanup();\n```\n\n## Options\n\nAll options are optional :)\n\n  * `mode`: the file mode to create with, it fallbacks to `0600` on file creation and `0700` on directory creation\n  * `prefix`: the optional prefix, fallbacks to `tmp-` if not provided\n  * `postfix`: the optional postfix, fallbacks to `.tmp` on file creation\n  * `template`: [`mkstemp`][3] like filename template, no default\n  * `dir`: the optional temporary directory, fallbacks to system default (guesses from environment)\n  * `tries`: how many times should the function try to get a unique filename before giving up, default `3`\n  * `keep`: signals that the temporary file or directory should not be deleted on exit, default is `false`, means delete\n    * Please keep in mind that it is recommended in this case to call the provided `cleanupCallback` function manually.\n  * `unsafeCleanup`: recursively removes the created temporary directory, even when it's not empty. default is `false`\n\n\n\n[1]: http://nodejs.org/\n[2]: https://www.npmjs.com/browse/depended/tmp\n[3]: http://www.kernel.org/doc/man-pages/online/pages/man3/mkstemp.3.html\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tmp-promise/-/tmp-promise-3.0.2.tgz#6e933782abff8b00c3119d63589ca1fb9caaa62a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tmp-promise/-/tmp-promise-3.0.2.tgz",
    "hash": "6e933782abff8b00c3119d63589ca1fb9caaa62a",
    "integrity": "sha512-OyCLAKU1HzBjL6Ev3gxUeraJNlbNingmi8IrHHEsYH8LTmEuhvYfqvhn2F/je+mjf4N58UmZ96OMEy1JanSCpA==",
    "registry": "npm",
    "packageName": "tmp-promise",
    "cacheIntegrity": "sha512-OyCLAKU1HzBjL6Ev3gxUeraJNlbNingmi8IrHHEsYH8LTmEuhvYfqvhn2F/je+mjf4N58UmZ96OMEy1JanSCpA== sha1-bpM3gqv/iwDDEZ1jWJyh+5yqpio="
  },
  "registry": "npm",
  "hash": "6e933782abff8b00c3119d63589ca1fb9caaa62a"
}