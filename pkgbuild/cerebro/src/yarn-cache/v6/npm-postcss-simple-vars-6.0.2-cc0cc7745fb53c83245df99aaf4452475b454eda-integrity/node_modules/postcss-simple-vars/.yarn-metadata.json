{
  "manifest": {
    "name": "postcss-simple-vars",
    "version": "6.0.2",
    "description": "PostCSS plugin for Sass-like variables",
    "keywords": [
      "postcss",
      "css",
      "postcss-plugin",
      "sass",
      "variables",
      "vars"
    ],
    "author": {
      "name": "Andrey Sitnik",
      "email": "andrey@sitnik.ru"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-simple-vars.git"
    },
    "engines": {
      "node": ">=10.0"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    "peerDependencies": {
      "postcss": "^8.2.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-simple-vars-6.0.2-cc0cc7745fb53c83245df99aaf4452475b454eda-integrity/node_modules/postcss-simple-vars/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Simple Variables\n\n<img align=\"right\" width=\"135\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"https://postcss.org/logo-leftp.svg\">\n\n[PostCSS] plugin for Sass-like variables.\n\nYou can use variables inside values, selectors and at-rule’s parameters.\n\n```pcss\n$dir:    top;\n$blue:   #056ef0;\n$column: 200px;\n\n.menu_link {\n  background: $blue;\n  width: $column;\n}\n.menu {\n  width: calc(4 * $column);\n  margin-$(dir): 10px;\n}\n```\n\n```css\n.menu_link {\n  background: #056ef0;\n  width: 200px;\n}\n.menu {\n  width: calc(4 * 200px);\n  margin-top: 10px;\n}\n```\n\nIf you want be closer to W3C spec,\nyou should use [postcss-custom-properties] and [postcss-at-rules-variables] plugins.\n\nAlso you should look at [postcss-map] for big complicated configs.\n\n[postcss-at-rules-variables]: https://github.com/GitScrum/postcss-at-rules-variables\n[postcss-custom-properties]:  https://github.com/postcss/postcss-custom-properties\n[postcss-map]:                https://github.com/pascalduez/postcss-map\n[PostCSS]:                    https://github.com/postcss/postcss\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-simple-vars\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n\n## Interpolation\n\nThere is special syntax if you want to use variable inside CSS words:\n\n```pcss\n$prefix: my-company-widget\n\n$prefix { }\n$(prefix)_button { }\n```\n\n\n## Comments\n\nYou could use variables in comments too (for example, to generate special\n[mdcss] comments). But syntax for comment variables is different to separate\nthem from PreCSS code examples:\n\n```pcss\n$width: 100px;\n/* $width: <<$(width)>> */\n```\n\ncompiles to:\n\n```css\n/* $width: 100px */\n```\n\n[mdcss]: https://github.com/jonathantneal/mdcss\n\n\n## Escaping\n\nIf you want to escape `$` in `content` property, use Unicode escape syntax.\n\n```css\n.foo::before {\n  content: \"\\0024x\";\n}\n```\n\n\n## Usage\n\n**Step 1:** Install plugin:\n\n```sh\nnpm install --save-dev postcss postcss-simple-vars\n```\n\n**Step 2:** Check you project for existed PostCSS config: `postcss.config.js`\nin the project root, `\"postcss\"` section in `package.json`\nor `postcss` in bundle config.\n\nIf you do not use PostCSS, add it according to [official docs]\nand set this plugin in settings.\n\n**Step 3:** Add the plugin to plugins list:\n\n```diff\nmodule.exports = {\n  plugins: [\n+   require('postcss-simple-vars'),\n    require('autoprefixer')\n  ]\n}\n```\n\n[official docs]: https://github.com/postcss/postcss#usage\n\n\n## Options\n\nCall plugin function to set options:\n\n```js\n    require('postcss-simple-vars')({ silent: true })\n```\n\n\n### `variables`\n\nSet default variables. It is useful to store colors or other constants\nin common file:\n\n```js\n// config/colors.js\n\nmodule.exports = {\n  blue: '#056ef0'\n}\n\n// postcss.config.js\n\nconst colors = require('./config/colors')\nconst vars   = require('postcss-simple-vars')\n\nmodule.exports = {\n  plugins: [\n    require('postcss-simple-vars')({ variables: colors })\n  ]\n}\n```\n\nYou can set a function returning object, if you want to update default\nvariables in webpack hot reload:\n\n```js\n    require('postcss-simple-vars')({\n      variables: function () {\n        return require('./config/colors');\n      }\n    })\n```\n\n\n### `onVariables`\n\nCallback invoked once all variables in css are known. The callback receives\nan object representing the known variables, including those explicitly-declared\nby the [`variables`](#variables) option.\n\n```js\n    require('postcss-simple-vars')({\n      onVariables (variables) {\n        console.log('CSS Variables');\n        console.log(JSON.stringify(variables, null, 2));\n      }\n    })\n```\n\n\n### `unknown`\n\nCallback on unknown variable name. It receives node instance, variable name\nand PostCSS Result object.\n\n```js\n    require('postcss-simple-vars')({\n      unknown (node, name, result) {\n        node.warn(result, 'Unknown variable ' + name);\n      }\n    })\n])\n```\n\n\n### `silent`\n\nLeft unknown variables in CSS and do not throw an error. Default is `false`.\n\n\n### `only`\n\nSet value only for variables from this object.\nOther variables will not be changed. It is useful for PostCSS plugin developers.\n\n\n### `keep`\n\nKeep variables as is and not delete them. Default is `false`.\n\n\n## Messages\n\nThis plugin passes `result.messages` for each variable:\n\n```js\nconst result = await postcss([vars]).process('$one: 1; $two: 2')\nconsole.log(result.messages)\n```\n\nwill output:\n\n```js\n[\n  {\n    plugin: 'postcss-simple-vars',\n    type: 'variable',\n    name: 'one'\n    value: '1'\n  },\n  {\n    plugin: 'postcss-simple-vars',\n    type: 'variable',\n    name: 'two'\n    value: '2'\n  }\n]\n```\n\nYou can get access to this variables in `result.messages` also\nin any plugin goes after `postcss-simple-vars`.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2015 Andrey Sitnik <andrey@sitnik.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-simple-vars/-/postcss-simple-vars-6.0.2.tgz#cc0cc7745fb53c83245df99aaf4452475b454eda",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-simple-vars/-/postcss-simple-vars-6.0.2.tgz",
    "hash": "cc0cc7745fb53c83245df99aaf4452475b454eda",
    "integrity": "sha512-tABK0OVtCa88TgJjgosa/1aLgiF4hTJBJxUjVE5idTGA0597OVdzWZvbySAF+HKo/sZidxSSpnWhUycDrxO8LA==",
    "registry": "npm",
    "packageName": "postcss-simple-vars",
    "cacheIntegrity": "sha512-tABK0OVtCa88TgJjgosa/1aLgiF4hTJBJxUjVE5idTGA0597OVdzWZvbySAF+HKo/sZidxSSpnWhUycDrxO8LA== sha1-zAzHdF+1PIMkXfmar0RSR1tFTto="
  },
  "registry": "npm",
  "hash": "cc0cc7745fb53c83245df99aaf4452475b454eda"
}