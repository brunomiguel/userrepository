{
  "manifest": {
    "name": "pollock",
    "version": "0.2.1",
    "description": "Simple lightweight library for adding abstract methods to types",
    "homepage": "https://github.com/neocotic/pollock",
    "bugs": {
      "url": "https://github.com/neocotic/pollock/issues"
    },
    "author": {
      "name": "Alasdair Mercer",
      "email": "mercer.alasdair@gmail.com",
      "url": "https://neocotic.com"
    },
    "license": "MIT",
    "keywords": [
      "abstract",
      "method"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/neocotic/pollock.git"
    },
    "devDependencies": {
      "codecov": "^3.1.0",
      "eslint": "^5.9.0",
      "eslint-config-notninja": "^0.4.0",
      "mocha": "^5.2.0",
      "npm-run-all": "^4.1.3",
      "nyc": "^13.1.0",
      "rimraf": "^2.6.2",
      "rollup": "^0.67.3",
      "rollup-plugin-commonjs": "^9.2.0",
      "rollup-plugin-node-resolve": "^3.4.0",
      "rollup-plugin-uglify": "^6.0.0"
    },
    "main": "index.js",
    "browser": "dist/pollock.js",
    "scripts": {
      "build": "npm-run-all lint compile test",
      "clean": "npm-run-all clean:*",
      "clean:coverage": "rimraf coverage",
      "clean:dist": "rimraf dist",
      "compile": "npm run clean:dist && rollup --config",
      "coverage": "nyc report && codecov",
      "lint": "npm-run-all lint:*",
      "lint:src": "eslint \"src/**/*.js\"",
      "lint:test": "eslint \"test/**/*.js\"",
      "test": "npm run clean:coverage && nyc mocha -R list \"test/**/*.spec.js\"",
      "posttest": "nyc check-coverage"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pollock-0.2.1-integrity/node_modules/pollock/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Pollock](https://raw.githack.com/neocotic/pollock/master/images/pollock.png)](https://github.com/neocotic/pollock)\n\nA simple lightweight JavaScript library for adding abstract methods to types which, when called, report a useful error\nindicating that they have not been implemented/overridden on the child type.\n\n[![Build Status](https://img.shields.io/travis/neocotic/pollock/develop.svg?style=flat-square)](https://travis-ci.org/neocotic/pollock)\n[![Coverage](https://img.shields.io/codecov/c/github/neocotic/pollock/develop.svg?style=flat-square)](https://codecov.io/gh/neocotic/pollock)\n[![Dev Dependency Status](https://img.shields.io/david/dev/neocotic/pollock.svg?style=flat-square)](https://david-dm.org/neocotic/pollock?type=dev)\n[![License](https://img.shields.io/npm/l/pollock.svg?style=flat-square)](https://github.com/neocotic/pollock/blob/master/LICENSE.md)\n[![Release](https://img.shields.io/npm/v/pollock.svg?style=flat-square)](https://www.npmjs.com/package/pollock)\n\n* [Install](#install)\n* [API](#api)\n* [Bugs](#bugs)\n* [Contributors](#contributors)\n* [License](#license)\n\n## Install\n\nInstall using the package manager for your desired environment(s):\n\n``` bash\n$ npm install --save pollock\n# OR:\n$ bower install --save pollock\n```\n\nIf you want to simply download the file to be used in the browser you can find them below:\n\n* [Development Version](https://unpkg.com/pollock/dist/pollock.js) (4.6kb - [Source Map](https://unpkg.com/pollock/dist/pollock.js.map))\n* [Production Version](https://unpkg.com/pollock/dist/pollock.min.js) (723b - [Source Map](https://unpkg.com/pollock/dist/pollock.min.js.map))\n\n## API\n\nThe API couldn't be simpler and consists of a single function, `pollock`:\n\n``` javascript\npollock(type, methodName[, options])\n```\n\nThe most common use case is to add an abstract instance method to a type (i.e. it's prototype) which, when called,\nthrows an error:\n\n``` javascript\nclass GraphicObject {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  moveTo(newX, newY) {\n    // ...\n  }\n}\n\npollock(GraphicObject, 'draw');\npollock(GraphicObject, 'resize');\n\nclass Circle extends GraphicObject {\n  draw() {\n    // ...\n  }\n\n  resize() {\n    // ...\n  }\n}\n\nclass Rectangle extends GraphicObject {\n  draw() {\n    // ...\n  }\n}\n```\n\nBy declaring the abstract methods `draw` and `resize`, it will make it much easier/quicker to discover cases where\nchildren of that type have not implemented those methods, but it's important to note it's only reported if/when the\nmethod is called.\n\n``` javascript\nconst circle = new Circle(0, 0);\ncircle.draw();\ncircle.resize();\n\nconst rect = new Rectangle(50, 50);\nrect.draw();\nrect.resize();\n//=> Error(GraphicObject#resize abstract method is not implemented)\n```\n\nThe examples in this document are all using ECMAScript 2015 classes, which your code may not be. Don't worry though,\npollock works with ECMAScript Version 5 as well. ECMAScript 2015 classes were used mainly because they better\ndemonstrate the inheritance without the noise of different type extension mechanisms.\n\n### Static Methods\n\nWhile pollock creates instance methods by default, enabling the `static` option will result in the abstract method being\nassigned directly to the type instead, effectively making it static.\n\n``` javascript\nclass GraphicObject {\n  // ...\n}\n\npollock(GraphicObject, 'getEdges', { static: true });\n\nclass Circle extends GraphicObject {\n  static getEdges() {\n    return 1;\n  }\n\n  // ...\n}\n\nclass Rectangle extends GraphicObject {\n  // ...\n}\n```\n\nThis behaves exactly as you'd expect it to and the only difference is in the error message; the character separating the\ntype and method names is different. This is to help differentiate such cases while debugging as, in theory, a single\ntype could have two abstract methods with the same name; one instance and one static.\n\n``` javascript\nCircle.getEdges();\n//=> 1\n\nRectangle.getEdges();\n//=> Error(GraphicObject.getEdges abstract method is not implemented)\n```\n\n### Asynchronous Methods\n\nIn most cases, throwing an error as soon as the abstract method is called is best, regardless of whether the method is\nintended to be synchronous or asynchronous in nature. However, pollock is flexible and allows you to easily support two\nof the most common asynchronous patterns should you wish: callbacks and promises.\n\n#### Callback\n\nIn order to have the abstract method invoke a callback function with the error instead of it being thrown, you just need\nto specify the index of the callback argument via the `callback` option.\n\n``` javascript\nclass UserService {\n  getUserCount(callback) {\n    this.getUsers((error, users) => {\n      if (error) {\n        callback(error);\n      } else {\n        callback(null, users.length);\n      }\n    });\n  }\n}\n\npollock(UserService, 'getUser', { callback: 1 });\npollock(UserService, 'getUsers', { callback: 0 });\n\nclass UserServiceImpl extends UserService {\n  getUsers(callback) {\n    // ...\n  }\n}\n```\n\nNow the error will be passed to the specified callback function argument when invoked.\n\n``` javascript\nconst userService = new UserServiceImpl();\nuserService.getUser(123, (error) => {\n  //=> Error(UserService#getUser abstract method is not implemented)\n});\n```\n\nIf the value of the `callback` option is negative (i.e. less than zero), then it will be applied to the end of argument\nlist passed to the abstract method. For example; to always treat the last argument as the callback function argument,\npass `-1`.\n\nIf the specified index is invalid or does not match an argument that is a function, then the abstract method will fall\nback on throwing the error instead.\n\n#### Promise\n\nFor the abstract method to return a ECMAScript 2015 `Promise` that has been rejected with the error instead of it being\nthrown, simply enable the `promise` option.\n\n``` javascript\nclass UserService {\n  getUserCount() {\n    return this.getUsers()\n      .then((users) => users.length);\n  }\n}\n\npollock(UserService, 'getUser', { promise: true });\npollock(UserService, 'getUsers', { promise: true });\n\nclass UserServiceImpl extends UserService {\n  getUser(id) {\n    // ...\n  }\n}\n```\n\nDone!\n\n``` javascript\nconst userService = new UserServiceImpl();\nuserService.getUsers()\n  .catch((error) => {\n    //=> Error(UserService#getUsers abstract method is not implemented)\n  });\n```\n\nIf the current environment does not support ECMAScript 2015's `Promise`, which is tested by detecting whether it's in\nthe global scope, then the abstract method will fall back on throwing the error instead.\n\n### Custom Type Name\n\nThe type name that is reported in the error message can be controlled using the `typeName` option. The type name\nresolution occurs in the following order:\n\n1. `typeName` option, if specified\n2. `type.name` property value, if available\n3. `\"<anonymous>\"` otherwise\n\nThis can be useful for cases where your code is minified and you don't want errors like \"p#lock abstract method is not\nimplemented\" or you're using a library/framework that creates the constructor function for you and results in the\nassigned name being lost/distorted.\n\n``` javascript\nconst GraphicObject = Nevis.extend({\n  // ...\n});\n\npollock(GraphicObject, 'draw', { typeName: 'GraphicObject' });\npollock(GraphicObject, 'resize', { typeName: 'GraphicObject' });\n```\n\n## Bugs\n\nIf you have any problems with pollock or would like to see changes currently in development you can do so\n[here](https://github.com/neocotic/pollock/issues).\n\n## Contributors\n\nIf you want to contribute, you're a legend! Information on how you can do so can be found in\n[CONTRIBUTING.md](https://github.com/neocotic/pollock/blob/master/CONTRIBUTING.md). We want your suggestions and pull\nrequests!\n\nA list of pollock contributors can be found in [AUTHORS.md](https://github.com/neocotic/pollock/blob/master/AUTHORS.md).\n\n## License\n\nCopyright Â© 2018 Alasdair Mercer\n\nSee [LICENSE.md](https://github.com/neocotic/pollock/raw/master/LICENSE.md) for more information on our MIT license.\n",
    "licenseText": "Copyright (C) 2018 Alasdair Mercer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy  \nof this software and associated documentation files (the \"Software\"), to deal  \nin the Software without restriction, including without limitation the rights  \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell  \ncopies of the Software, and to permit persons to whom the Software is  \nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all  \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  \nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/pollock/-/pollock-0.2.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/pollock/-/pollock-0.2.1.tgz",
    "hash": "",
    "integrity": "sha512-2Xy6LImSXm0ANKv9BKSVuCa6Z4ACbK7oUrl9gtUgqLkekL7n9C0mlWsOGYYuGbCG8xT0x3Q4F31C3ZMyVQjwsg==",
    "registry": "npm",
    "packageName": "pollock",
    "cacheIntegrity": "sha512-2Xy6LImSXm0ANKv9BKSVuCa6Z4ACbK7oUrl9gtUgqLkekL7n9C0mlWsOGYYuGbCG8xT0x3Q4F31C3ZMyVQjwsg== sha1-ASc641QlEUktB/HBD6U/FJs3xq0="
  },
  "registry": "npm",
  "hash": "d97cba2c89925e6d0034abfd04a495b826ba6780026caee852b97d82d520a8b91e90bee7f42d26956b0e19862e19b086f314f4c77438177d42dd93325508f0b2"
}