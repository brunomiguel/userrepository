{"version":3,"file":"interaction.min.js","sources":["../../src/InteractionData.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/InteractionEvent.ts","../../src/InteractionTrackingData.ts","../../src/TreeSearch.ts","../../src/interactiveTarget.ts","../../src/InteractionManager.ts"],"sourcesContent":["import { Point, IPointData } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\n\nexport type InteractivePointerEvent = PointerEvent | TouchEvent | MouseEvent;\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI\n */\nexport class InteractionData\n{\n    public global: Point;\n    public target: DisplayObject;\n    public originalEvent: InteractivePointerEvent;\n    public identifier: number;\n    public isPrimary: boolean;\n    public button: number;\n    public buttons: number;\n    public width: number;\n    public height: number;\n    public tiltX: number;\n    public tiltY: number;\n    public pointerType: string;\n    public pressure = 0;\n    public rotationAngle = 0;\n    public twist = 0;\n    public tangentialPressure = 0;\n\n    constructor()\n    {\n        /**\n         * This point stores the global coords of where the touch/mouse event happened\n         *\n         * @member {PIXI.Point}\n         */\n        this.global = new Point();\n\n        /**\n         * The target Sprite that was interacted with\n         *\n         * @member {PIXI.Sprite}\n         */\n        this.target = null;\n\n        /**\n         * When passed to an event handler, this will be the original DOM Event that was captured\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n         * @member {MouseEvent|TouchEvent|PointerEvent}\n         */\n        this.originalEvent = null;\n\n        /**\n         * Unique identifier for this interaction\n         *\n         * @member {number}\n         */\n        this.identifier = null;\n\n        /**\n         * Indicates whether or not the pointer device that created the event is the primary pointer.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n         * @type {Boolean}\n         */\n        this.isPrimary = false;\n\n        /**\n         * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n         * @type {number}\n         */\n        this.button = 0;\n\n        /**\n         * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n         * @type {number}\n         */\n        this.buttons = 0;\n\n        /**\n         * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n         * radiusX of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n         * @type {number}\n         */\n        this.width = 0;\n\n        /**\n         * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n         * radiusY of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n         * @type {number}\n         */\n        this.height = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n         * @type {number}\n         */\n        this.tiltX = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n         * @type {number}\n         */\n        this.tiltY = 0;\n\n        /**\n         * The type of pointer that triggered the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n         * @type {string}\n         */\n        this.pointerType = null;\n\n        /**\n         * Pressure applied by the pointing device during the event. A Touch's force property\n         * will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n         * @type {number}\n         */\n        this.pressure = 0;\n\n        /**\n         * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n         * @type {number}\n         */\n        this.rotationAngle = 0;\n\n        /**\n         * Twist of a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.twist = 0;\n\n        /**\n         * Barrel pressure on a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.tangentialPressure = 0;\n    }\n\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     * @readonly\n     * @member {number}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get pointerId(): number\n    {\n        return this.identifier;\n    }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     *\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Copies properties from normalized event data.\n     *\n     * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n     */\n    public copyEvent(event: Touch | InteractivePointerEvent): void\n    {\n        // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n        // it with \"false\" on later events when our shim for it on touch events might not be\n        // accurate\n        if ('isPrimary' in event && event.isPrimary)\n        {\n            this.isPrimary = true;\n        }\n        this.button = 'button' in event && event.button;\n        // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n        // event.which property instead, which conveys the same information.\n        const buttons = 'buttons' in event && event.buttons;\n\n        this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n        this.width = 'width' in event && event.width;\n        this.height = 'height' in event && event.height;\n        this.tiltX = 'tiltX' in event && event.tiltX;\n        this.tiltY = 'tiltY' in event && event.tiltY;\n        this.pointerType = 'pointerType' in event && event.pointerType;\n        this.pressure = 'pressure' in event && event.pressure;\n        this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n        this.twist = ('twist' in event && event.twist) || 0;\n        this.tangentialPressure = ('tangentialPressure' in event && event.tangentialPressure) || 0;\n    }\n\n    /**\n     * Resets the data for pooling.\n     */\n    public reset(): void\n    {\n        // isPrimary is the only property that we really need to reset - everything else is\n        // guaranteed to be overwritten\n        this.isPrimary = false;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { DisplayObject } from '@pixi/display';\nimport type { InteractionData } from './InteractionData';\n\nexport type InteractionCallback = (interactionEvent: InteractionEvent, displayObject: DisplayObject, hit?: boolean) => void;\n\n/**\n * Event class that mimics native DOM events.\n *\n * @class\n * @memberof PIXI\n */\nexport class InteractionEvent\n{\n    public stopped: boolean;\n    public stopsPropagatingAt: DisplayObject;\n    public stopPropagationHint: boolean;\n    public target: DisplayObject;\n    public currentTarget: DisplayObject;\n    public type: string;\n    public data: InteractionData;\n\n    constructor()\n    {\n        /**\n         * Whether this event will continue propagating in the tree.\n         *\n         * Remaining events for the {@link stopsPropagatingAt} object\n         * will still be dispatched.\n         *\n         * @member {boolean}\n         */\n        this.stopped = false;\n\n        /**\n         * At which object this event stops propagating.\n         *\n         * @private\n         * @member {PIXI.DisplayObject}\n         */\n        this.stopsPropagatingAt = null;\n\n        /**\n         * Whether we already reached the element we want to\n         * stop propagating at. This is important for delayed events,\n         * where we start over deeper in the tree again.\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.stopPropagationHint = false;\n\n        /**\n         * The object which caused this event to be dispatched.\n         * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.target = null;\n\n        /**\n         * The object whose event listener’s callback is currently being invoked.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.currentTarget = null;\n\n        /**\n         * Type of the event\n         *\n         * @member {string}\n         */\n        this.type = null;\n\n        /**\n         * InteractionData related to this event\n         *\n         * @member {PIXI.InteractionData}\n         */\n        this.data = null;\n    }\n\n    /**\n     * Prevents event from reaching any objects other than the current object.\n     *\n     */\n    public stopPropagation(): void\n    {\n        this.stopped = true;\n        this.stopPropagationHint = true;\n        this.stopsPropagatingAt = this.currentTarget;\n    }\n\n    /**\n     * Resets the event.\n     */\n    public reset(): void\n    {\n        this.stopped = false;\n        this.stopsPropagatingAt = null;\n        this.stopPropagationHint = false;\n        this.currentTarget = null;\n        this.target = null;\n    }\n}\n","export interface InteractionTrackingFlags\n{\n    OVER: number;\n    LEFT_DOWN: number;\n    RIGHT_DOWN: number;\n    NONE: number;\n}\n\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport class InteractionTrackingData\n{\n    public static FLAGS: Readonly<InteractionTrackingFlags> = Object.freeze({\n        NONE: 0,\n        OVER: 1 << 0,\n        LEFT_DOWN: 1 << 1,\n        RIGHT_DOWN: 1 << 2,\n    });\n\n    private readonly _pointerId: number;\n    private _flags: number;\n\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     * @private\n     */\n    constructor(pointerId: number)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    private _doSet(flag: number, yn: boolean): void\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get pointerId(): number\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get flags(): number\n    {\n        return this._flags;\n    }\n\n    set flags(flags: number)\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get none(): boolean\n    {\n        return this._flags === InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get over(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    }\n\n    set over(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get rightDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    set rightDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get leftDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    set leftDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    }\n}\n","import { Point } from '@pixi/math';\n\nimport type { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport type { Container, DisplayObject } from '@pixi/display';\n\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TreeSearch\n{\n    private readonly _tempPoint: Point;\n\n    constructor()\n    {\n        this._tempPoint = new Point();\n    }\n\n    /**\n     * Recursive implementation for findHit\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    public recursiveFindHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean, interactive?: boolean\n    ): boolean\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimization once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimization is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n        // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n        // https://github.com/pixijs/pixi.js/issues/5135\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!((displayObject._mask as any).containsPoint && (displayObject._mask as any).containsPoint(point)))\n                {\n                    hitTest = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && (displayObject as Container).children)\n        {\n            const children = (displayObject as Container).children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && (displayObject as any).containsPoint)\n                {\n                    if ((displayObject as any).containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    public findHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n    }\n}\n","import type { InteractionTrackingData } from './InteractionTrackingData';\n\ntype Cursor = 'auto'\n    | 'default'\n    | 'none'\n    | 'context-menu'\n    | 'help'\n    | 'pointer'\n    | 'progress'\n    | 'wait'\n    | 'cell'\n    | 'crosshair'\n    | 'text'\n    | 'vertical-text'\n    | 'alias'\n    | 'copy'\n    | 'move'\n    | 'no-drop'\n    | 'not-allowed'\n    | 'e-resize'\n    | 'n-resize'\n    | 'ne-resize'\n    | 'nw-resize'\n    | 's-resize'\n    | 'se-resize'\n    | 'sw-resize'\n    | 'w-resize'\n    | 'ns-resize'\n    | 'ew-resize'\n    | 'nesw-resize'\n    | 'col-resize'\n    | 'nwse-resize'\n    | 'row-resize'\n    | 'all-scroll'\n    | 'zoom-in'\n    | 'zoom-out'\n    | 'grab'\n    | 'grabbing';\n\nexport interface IHitArea {\n    contains(x: number, y: number): boolean;\n}\n\nexport interface InteractiveTarget {\n    interactive: boolean;\n    interactiveChildren: boolean;\n    hitArea: IHitArea;\n    cursor: Cursor | string;\n    buttonMode: boolean;\n    trackedPointers: {[x: number]: InteractionTrackingData};\n    _trackedPointers: {[x: number]: InteractionTrackingData};\n}\n\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\nexport const interactiveTarget: InteractiveTarget = {\n    interactive: false,\n    interactiveChildren: true,\n    hitArea: null,\n\n    /**\n     * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n     * Setting this changes the 'cursor' property to `'pointer'`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.buttonMode = true;\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    get buttonMode(): boolean\n    {\n        return this.cursor === 'pointer';\n    },\n    set buttonMode(value: boolean)\n    {\n        if (value)\n        {\n            this.cursor = 'pointer';\n        }\n        else if (this.cursor === 'pointer')\n        {\n            this.cursor = null;\n        }\n    },\n\n    /**\n     * This defines what cursor mode is used when the mouse cursor\n     * is hovered over the displayObject.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.cursor = 'wait';\n     * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    cursor: null,\n\n    /**\n     * Internal set of all active pointers, by identifier\n     *\n     * @member {Map<number, InteractionTrackingData>}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     */\n    get trackedPointers()\n    {\n        if (this._trackedPointers === undefined) this._trackedPointers = {};\n\n        return this._trackedPointers;\n    },\n\n    /**\n     * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n     *\n     * @private\n     * @type {Map<number, InteractionTrackingData>}\n     */\n    _trackedPointers: undefined,\n};\n","import { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { DisplayObject, TemporaryDisplayObject } from '@pixi/display';\nimport { InteractionData, InteractivePointerEvent } from './InteractionData';\nimport { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport { InteractionTrackingData } from './InteractionTrackingData';\nimport { TreeSearch } from './TreeSearch';\nimport { EventEmitter } from '@pixi/utils';\nimport { interactiveTarget } from './interactiveTarget';\n\nimport type { AbstractRenderer } from '@pixi/core';\nimport type { Point, IPointData } from '@pixi/math';\nimport type { Dict } from '@pixi/utils';\n\n// Mix interactiveTarget into DisplayObject.prototype\nDisplayObject.mixin(interactiveTarget);\n\nconst MOUSE_POINTER_ID = 1;\n\n// Mock interface for hitTestEvent - only used inside hitTest()\ninterface TestInteractionEvent\n{\n    target: DisplayObject;\n    data: {global: Point};\n}\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent: TestInteractionEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\nexport interface InteractionManagerOptions {\n    autoPreventDefault?: boolean;\n    interactionFrequency?: number;\n    useSystemTicker?: boolean;\n}\n\nexport interface DelayedEvent {\n    displayObject: DisplayObject;\n    eventString: string;\n    eventData: InteractionEvent;\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport class InteractionManager extends EventEmitter\n{\n    public readonly activeInteractionData: { [key: number]: InteractionData };\n    public readonly supportsTouchEvents: boolean;\n    public readonly supportsPointerEvents: boolean;\n    public interactionDataPool: InteractionData[];\n    public cursor: string;\n    public delayedEvents: DelayedEvent[];\n    public search: TreeSearch;\n    public renderer: AbstractRenderer;\n    public autoPreventDefault: boolean;\n    public interactionFrequency: number;\n    public mouse: InteractionData;\n    public eventData: InteractionEvent;\n    public moveWhenInside: boolean;\n    public cursorStyles: Dict<string | ((mode: string) => void) | CSSStyleDeclaration>;\n    public currentCursorMode: string;\n    public resolution: number;\n\n    protected interactionDOMElement: HTMLElement;\n    protected eventsAdded: boolean;\n    protected tickerAdded: boolean;\n    protected mouseOverRenderer: boolean;\n\n    private _useSystemTicker: boolean;\n    private _deltaTime: number;\n    private _didMove: boolean;\n    private _tempDisplayObject: DisplayObject;\n    private readonly _eventListenerOptions: { capture: true, passive: false };\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Maximum frequency (ms) at pointer over/out states will be checked.\n     * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     */\n    constructor(renderer: AbstractRenderer, options?: InteractionManagerOptions)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Maximum frequency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @protected\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM version works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Has the system ticker been added?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.tickerAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer? If working in worker mouse considered to be over renderer by default.\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = !('PointerEvent' in self);\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in self;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!self.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, Object>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        /**\n         * Delayed pointer events. Used to guarantee correct ordering of over/out events.\n         *\n         * @private\n         * @member {Array}\n         */\n        this.delayedEvents = [];\n\n        /**\n         * TreeSearch component that is used to hitTest stage tree\n         *\n         * @private\n         * @member {PIXI.TreeSearch}\n         */\n        this.search = new TreeSearch();\n\n        /**\n         * Used as a last rendered object in case renderer doesnt have _lastObjectRendered\n         * @member {DisplayObject}\n         * @private\n         */\n        this._tempDisplayObject = new TemporaryDisplayObject();\n\n        /**\n         * An options object specifies characteristics about the event listener.\n         * @private\n         * @readonly\n         * @member {Object.<string, boolean>}\n         */\n        this._eventListenerOptions = { capture: true, passive: false };\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.InteractionManager#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.InteractionManager#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.InteractionManager#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.InteractionManager#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.InteractionManager#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.InteractionManager#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.InteractionManager#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.InteractionManager#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.InteractionManager#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.InteractionManager#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.InteractionManager#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.InteractionManager#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.InteractionManager#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.InteractionManager#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.InteractionManager#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.InteractionManager#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.InteractionManager#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.InteractionManager#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.InteractionManager#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n    }\n\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    get useSystemTicker(): boolean\n    {\n        return this._useSystemTicker;\n    }\n    set useSystemTicker(useSystemTicker: boolean)\n    {\n        this._useSystemTicker = useSystemTicker;\n\n        if (useSystemTicker)\n        {\n            this.addTickerListener();\n        }\n        else\n        {\n            this.removeTickerListener();\n        }\n    }\n\n    /**\n     * Last rendered object or temp object\n     * @readonly\n     * @protected\n     * @member {PIXI.DisplayObject}\n     */\n    get lastObjectRendered(): DisplayObject\n    {\n        return (this.renderer._lastObjectRendered as DisplayObject) || this._tempDisplayObject;\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    public hitTest(globalPoint: Point, root?: DisplayObject): DisplayObject\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent as InteractionEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    public setTargetElement(element: HTMLElement, resolution = 1): void\n    {\n        this.removeTickerListener();\n\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n\n        this.addTickerListener();\n    }\n\n    /**\n     * Add the ticker listener\n     *\n     * @private\n     */\n    private addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /**\n     * Remove the ticker listener\n     *\n     * @private\n     */\n    private removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (self.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = 'none';\n            style.msTouchAction = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = 'none';\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            self.document.addEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n            self.addEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n            self.addEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n        }\n        else\n        {\n            self.document.addEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n            self.addEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (self.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            self.document.removeEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n            self.removeEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n            self.removeEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n        }\n        else\n        {\n            self.document.removeEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n            self.removeEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     *\n     * @param {number} deltaTime - time delta since the last call\n     */\n    public tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     */\n    public update(): void\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent as PointerEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursorMode(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (self.OffscreenCanvas && this.interactionDOMElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.interactionDOMElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.interactionDOMElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {PIXI.InteractionEvent} eventData - the event data object\n     * @private\n     */\n    private dispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        // Even if the event was stopped, at least dispatch any remaining events\n        // for the same display object.\n        if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if ((displayObject as any)[eventString])\n            {\n                (displayObject as any)[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n     * ordering of over/out events.\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    private delayDispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        this.delayedEvents.push({ displayObject, eventString, eventData });\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.interactionDOMElement as any).width,\n                height: (this.interactionDOMElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.interactionDOMElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.interactionDOMElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @protected\n     * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - indicates whether we want to calculate hits\n     *  or just iterate through all interactive objects\n     */\n    public processInteractive(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        const hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n\n        const delayedEvents = this.delayedEvents;\n\n        if (!delayedEvents.length)\n        {\n            return hit;\n        }\n        // Reset the propagation hint, because we start deeper in the tree again.\n        interactionEvent.stopPropagationHint = false;\n\n        const delayedLen = delayedEvents.length;\n\n        this.delayedEvents = [];\n\n        for (let i = 0; i < delayedLen; i++)\n        {\n            const { displayObject, eventString, eventData } = delayedEvents[i];\n\n            // When we reach the object we wanted to stop propagating at,\n            // set the propagation hint.\n            if (eventData.stopsPropagatingAt === displayObject)\n            {\n                eventData.stopPropagationHint = true;\n            }\n\n            this.dispatchEvent(displayObject, eventString, eventData);\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    private onPointerDown(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n\n            if (cancelable)\n            {\n                originalEvent.preventDefault();\n            }\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerDown(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    private onPointerComplete(originalEvent: InteractivePointerEvent, cancelled: boolean, func: InteractionCallback): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    private onPointerCancel(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     */\n    private processPointerCancel(interactionEvent: InteractionEvent, displayObject: DisplayObject): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    private onPointerUp(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerUp(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    private onPointerMove(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this._didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerMove(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    private onPointerOut(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    private processPointerOverOut(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    private onPointerOver(originalEvent: InteractivePointerEvent): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.InteractionData} - Interaction data for the given pointer identifier\n     */\n    private getInteractionDataForPointerId(event: PointerEvent): InteractionData\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    private releaseInteractionDataForPointerId(pointerId: number): void\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.InteractionEvent} the interaction event that was passed in\n     */\n    private configureInteractionEventForDOMEvent(interactionEvent: InteractionEvent, pointerEvent: PointerEvent,\n        interactionData: InteractionData\n    ): InteractionEvent\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            (pointerEvent as any).globalX = interactionData.global.x;\n            (pointerEvent as any).globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: InteractivePointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!self.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof self.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    public destroy(): void\n    {\n        this.removeEvents();\n\n        this.removeTickerListener();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this.search = null;\n    }\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n}\n"],"names":["this","global","Point","target","originalEvent","identifier","isPrimary","button","buttons","width","height","tiltX","tiltY","pointerType","pressure","rotationAngle","twist","tangentialPressure","Object","InteractionData","displayObject","point","globalPos","worldTransform","applyInverse","event","Number","isInteger","which","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","stopped","stopsPropagatingAt","stopPropagationHint","currentTarget","type","data","InteractionEvent","pointerId","_pointerId","_flags","InteractionTrackingData","FLAGS","NONE","flag","yn","flags","OVER","_doSet","RIGHT_DOWN","LEFT_DOWN","freeze","_tempPoint","TreeSearch","interactionEvent","func","hitTest","interactive","visible","hit","interactiveParent","hitTestChildren","hitArea","contains","x","y","_mask","containsPoint","interactiveChildren","children","i","length","child","childHit","recursiveFindHit","parent","interactiveTarget","buttonMode","cursor","value","trackedPointers","undefined","_trackedPointers","DisplayObject","mixin","MOUSE_POINTER_ID","hitTestEvent","renderer","options","_super","_this","autoPreventDefault","interactionFrequency","mouse","set","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","tickerAdded","mouseOverRenderer","self","supportsTouchEvents","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","resolution","delayedEvents","search","_tempDisplayObject","TemporaryDisplayObject","_eventListenerOptions","capture","passive","_useSystemTicker","useSystemTicker","setTargetElement","view","InteractionManager","addTickerListener","removeTickerListener","_lastObjectRendered","globalPoint","root","lastObjectRendered","processInteractive","element","removeEvents","addEvents","Ticker","system","add","tickerUpdate","UPDATE_PRIORITY","INTERACTION","remove","style","navigator","msPointerEnabled","msContentZooming","msTouchAction","touchAction","document","addEventListener","removeEventListener","deltaTime","_deltaTime","update","_didMove","k","interactionData","configureInteractionEventForDOMEvent","setCursorMode","mode","applyStyles","OffscreenCanvas","assign","call","eventString","emit","push","rect","parentElement","getBoundingClientRect","left","top","resolutionMultiplier","findHit","delayedLen","_a","displayObject_1","dispatchEvent","events","normalizeToPointerData","isNormalized","cancelable","preventDefault","eventLen","getInteractionDataForPointerId","isRightButton","id","rightDown","leftDown","cancelled","eventAppend","releaseInteractionDataForPointerId","onPointerComplete","trackingData","isTouch","isMouse","isMouseTap","test","isDown","over","none","delayDispatchEvent","pop","copyEvent","reset","pointerEvent","mapPositionToPoint","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","radiusX","radiusY","force","layerX","offsetX","layerY","offsetY","MouseEvent","tempEvent","removeAllListeners","EventEmitter"],"mappings":"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"}