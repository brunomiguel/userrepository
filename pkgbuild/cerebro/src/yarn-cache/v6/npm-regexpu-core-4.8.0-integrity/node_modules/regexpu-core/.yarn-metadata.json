{
  "manifest": {
    "name": "regexpu-core",
    "version": "4.8.0",
    "description": "regexpu’s core functionality (i.e. `rewritePattern(pattern, flag)`), capable of translating ES6 Unicode regular expressions to ES5.",
    "homepage": "https://mths.be/regexpu",
    "main": "rewrite-pattern.js",
    "engines": {
      "node": ">=4"
    },
    "keywords": [
      "codegen",
      "desugaring",
      "ecmascript",
      "es5",
      "es6",
      "harmony",
      "javascript",
      "refactoring",
      "regex",
      "regexp",
      "regular expressions",
      "rewriting",
      "syntax",
      "transformation",
      "transpile",
      "transpiler",
      "unicode"
    ],
    "license": "MIT",
    "author": {
      "name": "Mathias Bynens",
      "url": "https://mathiasbynens.be/"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mathiasbynens/regexpu-core.git"
    },
    "bugs": {
      "url": "https://github.com/mathiasbynens/regexpu-core/issues"
    },
    "files": [
      "LICENSE-MIT.txt",
      "rewrite-pattern.js",
      "data/character-class-escape-sets.js",
      "data/iu-mappings.js"
    ],
    "scripts": {
      "build": "node scripts/iu-mappings.js && node scripts/character-class-escape-sets.js",
      "test": "mocha tests",
      "cover": "istanbul cover --report html node_modules/.bin/_mocha tests -- -u exports -R spec"
    },
    "dependencies": {
      "regenerate": "^1.4.2",
      "regenerate-unicode-properties": "^9.0.0",
      "regjsgen": "^0.5.2",
      "regjsparser": "^0.7.0",
      "unicode-match-property-ecmascript": "^2.0.0",
      "unicode-match-property-value-ecmascript": "^2.0.0"
    },
    "devDependencies": {
      "codecov": "^3.8.3",
      "istanbul": "^0.4.5",
      "jsesc": "^3.0.2",
      "lodash": "^4.17.21",
      "mocha": "^9.1.1",
      "regexpu-fixtures": "2.1.4",
      "@unicode/unicode-14.0.0": "^1.2.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-regexpu-core-4.8.0-integrity/node_modules/regexpu-core/package.json",
    "readmeFilename": "README.md",
    "readme": "# regexpu-core [![Build status](https://github.com/mathiasbynens/regexpu-core/workflows/run-checks/badge.svg)](https://github.com/mathiasbynens/regexpu-core/actions?query=workflow%3Arun-checks) [![regexpu-core on npm](https://img.shields.io/npm/v/regexpu-core)](https://www.npmjs.com/package/regexpu-core)\n\n_regexpu_ is a source code transpiler that enables the use of ES2015 Unicode regular expressions in JavaScript-of-today (ES5).\n\n_regexpu-core_ contains _regexpu_’s core functionality, i.e. `rewritePattern(pattern, flag)`, which enables rewriting regular expressions that make use of [the ES2015 `u` flag](https://mathiasbynens.be/notes/es6-unicode-regex) into equivalent ES5-compatible regular expression patterns.\n\n## Installation\n\nTo use _regexpu-core_ programmatically, install it as a dependency via [npm](https://www.npmjs.com/):\n\n```bash\nnpm install regexpu-core --save\n```\n\nThen, `require` it:\n\n```js\nconst rewritePattern = require('regexpu-core');\n```\n\n## API\n\nThis module exports a single function named `rewritePattern`.\n\n### `rewritePattern(pattern, flags, options)`\n\nThis function takes a string that represents a regular expression pattern as well as a string representing its flags, and returns an ES5-compatible version of the pattern.\n\n```js\nrewritePattern('foo.bar', 'u');\n// → 'foo(?:[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uD7FF\\\\uDC00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF])bar'\n\nrewritePattern('[\\\\u{1D306}-\\\\u{1D308}a-z]', 'u');\n// → '(?:[a-z]|\\\\uD834[\\\\uDF06-\\\\uDF08])'\n\nrewritePattern('[\\\\u{1D306}-\\\\u{1D308}a-z]', 'ui');\n// → '(?:[a-z\\\\u017F\\\\u212A]|\\\\uD834[\\\\uDF06-\\\\uDF08])'\n```\n\n_regexpu-core_ can rewrite non-ES6 regular expressions too, which is useful to demonstrate how their behavior changes once the `u` and `i` flags are added:\n\n```js\n// In ES5, the dot operator only matches BMP symbols:\nrewritePattern('foo.bar');\n// → 'foo(?:[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uFFFF])bar'\n\n// But with the ES2015 `u` flag, it matches astral symbols too:\nrewritePattern('foo.bar', 'u');\n// → 'foo(?:[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uD7FF\\\\uDC00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF])bar'\n```\n\nThe optional `options` argument recognizes the following properties:\n\n#### `dotAllFlag` (default: `false`)\n\nSetting this option to `true` enables support for [the `s` (`dotAll`) flag](https://github.com/mathiasbynens/es-regexp-dotall-flag).\n\n```js\nrewritePattern('.');\n// → '[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uFFFF]'\n\nrewritePattern('.', '', {\n  'dotAllFlag': true\n});\n// → '[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uFFFF]'\n\nrewritePattern('.', 's', {\n  'dotAllFlag': true\n});\n// → '[\\\\0-\\\\uFFFF]'\n\nrewritePattern('.', 'su', {\n  'dotAllFlag': true\n});\n// → '(?:[\\\\0-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])'\n```\n\n#### `unicodePropertyEscape` (default: `false`)\n\nSetting this option to `true` enables [support for Unicode property escapes](property-escapes.md):\n\n```js\nrewritePattern('\\\\p{Script_Extensions=Anatolian_Hieroglyphs}', 'u', {\n  'unicodePropertyEscape': true\n});\n// → '(?:\\\\uD811[\\\\uDC00-\\\\uDE46])'\n```\n\n#### `lookbehind` (default: `false`)\n\nSetting this option to `true` enables support for [lookbehind assertions](https://github.com/tc39/proposal-regexp-lookbehind).\n\n```js\nrewritePattern('(?<=.)a', '', {\n  'lookbehind': true\n});\n// → '(?<=[\\\\0-\\\\t\\\\x0B\\\\f\\\\x0E-\\\\u2027\\\\u202A-\\\\uFFFF])a'\n```\n\n#### `namedGroup` (default: `false`)\n\nSetting this option to `true` enables support for [named capture groups](https://github.com/tc39/proposal-regexp-named-groups).\n\n```js\nrewritePattern('(?<name>.)\\k<name>', '', {\n  'namedGroup': true\n});\n// → '(.)\\1'\n```\n\n#### `onNamedGroup`\n\nThis option is a function that gets called when a named capture group is found. It receives two parameters:\nthe name of the group, and its index.\n\n```js\nrewritePattern('(?<name>.)\\k<name>', '', {\n  'namedGroup': true,\n  onNamedGroup(name, index) {\n    console.log(name, index);\n    // → 'name', 1\n  }\n});\n```\n\n#### `useUnicodeFlag` (default: `false`)\n\nSetting this option to `true` enables the use of Unicode code point escapes of the form `\\u{…}`. Note that in regular expressions, such escape sequences only work correctly when the ES2015 `u` flag is set. Enabling this setting often results in more compact output, although there are cases (such as `\\p{Lu}`) where it actually _increases_ the output size.\n\n```js\nrewritePattern('\\\\p{Script_Extensions=Anatolian_Hieroglyphs}', 'u', {\n  'unicodePropertyEscape': true,\n  'useUnicodeFlag': true\n});\n// → '[\\\\u{14400}-\\\\u{14646}]'\n```\n\n## For maintainers\n\n### How to publish a new release\n\n1. On the `main` branch, bump the version number in `package.json`:\n\n    ```sh\n    npm version patch -m 'Release v%s'\n    ```\n\n    Instead of `patch`, use `minor` or `major` [as needed](https://semver.org/).\n\n    Note that this produces a Git commit + tag.\n\n1. Push the release commit and tag:\n\n    ```sh\n    git push && git push --tags\n    ```\n\n    Our CI then automatically publishes the new release to npm.\n\n## Author\n\n| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](https://mathiasbynens.be/) |\n\n## License\n\n_regexpu-core_ is available under the [MIT](https://mths.be/mit) license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-4.8.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-4.8.0.tgz",
    "hash": "",
    "integrity": "sha512-1F6bYsoYiz6is+oz70NWur2Vlh9KWtswuRuzJOfeYUrfPX2o8n74AnUVaOGDbUqVGO9fNHu48/pjJO4sNVwsOg==",
    "registry": "npm",
    "packageName": "regexpu-core",
    "cacheIntegrity": "sha512-1F6bYsoYiz6is+oz70NWur2Vlh9KWtswuRuzJOfeYUrfPX2o8n74AnUVaOGDbUqVGO9fNHu48/pjJO4sNVwsOg== sha1-5WBbo2G2excYR4UBMnUC9EeamPA="
  },
  "registry": "npm",
  "hash": "d45e9b62ca188b3ea2b3ea33ef4356babd95961f4a5adb30b91bb324e7de614adf3d7da8f27ef802751568e1836d4a9518ef5f347bb8f3fa6324ee2c355c2c3a"
}