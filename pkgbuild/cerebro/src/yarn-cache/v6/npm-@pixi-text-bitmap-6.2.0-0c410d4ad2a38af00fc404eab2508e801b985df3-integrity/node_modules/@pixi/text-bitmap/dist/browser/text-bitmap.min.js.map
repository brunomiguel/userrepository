{"version":3,"file":"text-bitmap.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/BitmapFontData.ts","../../src/formats/TextFormat.ts","../../src/formats/XMLFormat.ts","../../src/formats/XMLStringFormat.ts","../../src/formats/index.ts","../../src/utils/drawGlyph.ts","../../src/utils/generateFillStyle.ts","../../src/utils/splitTextToCharacters.ts","../../src/utils/extractCharCode.ts","../../src/BitmapFont.ts","../../src/utils/resolveCharacters.ts","../../src/BitmapText.ts","../../src/BitmapFontLoader.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    public info: IBitmapFontDataInfo[];\n    public common: IBitmapFontDataCommon[];\n    public page: IBitmapFontDataPage[];\n    public char: IBitmapFontDataChar[];\n    public kerning: IBitmapFontDataKerning[];\n    public distanceField: IBitmapFontDataDistanceField[];\n\n    constructor()\n    {\n        /**\n         * @member {PIXI.IBitmapFontDataInfo[]}\n         * @readOnly\n         */\n        this.info = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataCommon[]}\n         * @readOnly\n         */\n        this.common = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataPage[]}\n         * @readOnly\n         */\n        this.page = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataChar[]}\n         * @readOnly\n         */\n        this.char = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataKerning[]}\n         * @readOnly\n         */\n        this.kerning = [];\n\n        this.distanceField = [];\n    }\n}\n\nexport interface IBitmapFontDataInfo {\n    face: string;\n    size: number;\n}\n\nexport interface IBitmapFontDataCommon {\n    lineHeight: number;\n}\n\nexport interface IBitmapFontDataPage {\n    id: number;\n    file: string;\n}\n\nexport interface IBitmapFontDataChar {\n    id: number;\n    page: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n}\n\nexport interface IBitmapFontDataKerning {\n    first: number;\n    second: number;\n    amount: number;\n}\n\nexport interface IBitmapFontDataDistanceField {\n    fieldType: string;\n    distanceRange: number;\n}\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataInfo\n * @property {string} face\n * @property {number} size\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataCommon\n * @property {number} lineHeight\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataPage\n * @property {number} id\n * @property {string} file\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataChar\n * @property {string} id\n * @property {number} page\n * @property {number} x\n * @property {number} y\n * @property {number} width\n * @property {number} height\n * @property {number} xoffset\n * @property {number} yoffset\n * @property {number} xadvance\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataKerning\n * @property {number} first\n * @property {number} second\n * @property {number} amount\n */\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\ninterface IBitmapFontRawData {\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: string;\n        distanceRange: string;\n    }[]\n}\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @class\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     *\n     * @static\n     * @private\n     * @param {string} txt - Raw string data to be converted\n     * @return {PIXI.BitmapFontData} Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        rawData.distanceField.forEach((df) => font.distanceField.push({\n            distanceRange: parseInt(df.distanceRange, 10),\n            fieldType: df.fieldType,\n        }));\n\n        return font;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {XMLDocument} xml\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.indexOf('<font>') > -1)\n        {\n            const xml = new self.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {string} xmlTxt\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new self.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n","import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n","import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    const dropShadowColor = style.dropShadowColor;\n    const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n    if (style.dropShadow)\n    {\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n","import { TextStyle, TextMetrics, TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string|CanvasGradient|CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[]|CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n","/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @private\n */\nexport function splitTextToCharacters(text: string): string[]\n{\n    return Array.from ? Array.from(text) : text.split('');\n}\n","/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @private\n */\nexport function extractCharCode(str: string): number\n{\n    return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n","import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph, extractCharCode } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions\n{\n    /**\n     * The character set to generate.\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * The resolution for rendering.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * The padding between glyphs in the atlas.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * The width of the texture atlas.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * The height of the texture atlas.\n     * @default 512\n     */\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     *\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     *\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     *\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     *\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     *\n     * @property {number} resolution=1\n     * @property {number} textureWidth=512\n     * @property {number} textureHeight=512\n     * @property {number} padding=4\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[]|Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     *\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string|XMLDocument|BitmapFontData,\n        textures: Texture|Texture[]|Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     *\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     *\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param style - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @return Font generated by style options.\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: HTMLCanvasElement;\n        let context: CanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = document.createElement('canvas');\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is `\n                        + `too small for ${style.fontSize}px fonts`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n","import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\nimport { splitTextToCharacters, extractCharCode } from './utils';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport type { Rectangle } from '@pixi/math';\nimport { Program, Renderer, Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { BLEND_MODES } from '@pixi/constants';\n\ninterface PageMeshData {\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData {\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n    public dirty: boolean;\n    protected _textWidth: number;\n    protected _textHeight: number;\n    protected _text: string;\n    protected _maxWidth: number;\n    protected _maxLineHeight: number;\n    protected _letterSpacing: number;\n    protected _anchor: ObservablePoint;\n    protected _fontName: string;\n    protected _fontSize: number;\n    protected _align: TextStyleAlign;\n    protected _activePagesMeshData: PageMeshData[];\n    protected _tint = 0xFFFFFF;\n    protected _roundPixels: boolean;\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        /**\n         * Collection of page mesh data.\n         *\n         * @member {object}\n         * @private\n         */\n        this._activePagesMeshData = [];\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the current text align.\n         *\n         * @member {string}\n         * @private\n         */\n        this._align = align;\n\n        /**\n         * Private tracker for the current tint.\n         *\n         * @member {number}\n         * @private\n         */\n        this._tint = tint;\n\n        /**\n         * Private tracker for the current font name.\n         *\n         * @member {string}\n         * @private\n         */\n        this._fontName = fontName;\n\n        /**\n         * Private tracker for the current font size.\n         *\n         * @member {number}\n         * @private\n         */\n        this._fontSize = fontSize || BitmapFont.available[fontName].size;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = maxWidth;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align. (Internally used)\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = letterSpacing;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering\n         *\n         * @member {boolean}\n         * @default PIXI.settings.ROUND_PIXELS\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Set to `true` if the BitmapText needs to be redrawn.\n         *\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Cached char texture is destroyed when BitmapText is destroyed\n         * @member {Record<number, Texture>}\n         * @private\n         */\n        this._textureCache = {};\n    }\n\n    /**\n     * Renders text and updates it when needed. This should only be called\n     * if the BitmapFont is regenerated.\n     */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const scale = this._fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / this._fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x + charData.texture.orig.width;// Use charRenderData position!\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            pageMeshDataPool.push(activePagesMeshData[i]);\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this._fontSize / size;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * renderer.resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    protected validate(): void\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The name of the BitmapFont.\n     *\n     * @member {string}\n     */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The size of the font to display.\n     *\n     * @member {number}\n     */\n    public get fontSize(): number\n    {\n        return this._fontSize;\n    }\n\n    public set fontSize(value: number)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { Texture } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(this: Loader, resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: LoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures, true);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: LoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /**\n     * Get folder path from a resource\n     * @private\n     * @param {PIXI.Loader} loader\n     * @param {PIXI.LoaderResource} resource\n     * @return {string}\n     */\n    private static getBaseUrl(loader: Loader, resource: LoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","this","info","common","page","char","kerning","distanceField","TextFormat","data","indexOf","txt","items","match","rawData","chars","kernings","i","name","attributeList","itemData","i_1","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","BitmapFontData","forEach","face","size","parseInt","lineHeight","id","file","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","df","distanceRange","fieldType","XMLFormat","XMLDocument","getElementsByTagName","length","getAttribute","xml","letter","XMLStringFormat","self","DOMParser","parseFromString","test","xmlTxt","parse","formats","autoDetectFormat","drawGlyph","canvas","context","metrics","resolution","style","text","fontProperties","translate","scale","tx","strokeThickness","ty","toFontString","lineWidth","textBaseline","lineJoin","miterLimit","fillStyle","lines","gradient","fill","isArray","dropShadowCorrection","dropShadowDistance","padding","slice","fillGradientStops","lengthPlus1","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","lastIterationStop","gradStopLineHeight","fontSize","thisLineTop","j","globalStop","clampedStop","Math","max","min","addColorStop","totalIterations","currentIteration","stop","generateFillStyle","strokeStyle","stroke","dropShadowColor","rgb","hex2rgb","string2hex","dropShadow","shadowColor","dropShadowAlpha","shadowBlur","dropShadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","strokeText","descent","fillText","setTransform","splitTextToCharacters","from","extractCharCode","str","codePointAt","charCodeAt","textures","ownsTextures","res","getResolutionOfUrl","pageTextures","_ownsTextures","_c","baseTexture","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","_d","page_1","_e","rect","Rectangle","frame","xOffset","yOffset","xAdvance","texture","Texture","_f","distanceFieldRange","distanceFieldType","toLowerCase","BitmapFont","destroy","fontData","format","Error","available","textStyle","options","_a","assign","defaultOptions","textureWidth","textureHeight","charsList","result","item","startCode","endCode","j_1","String","fromCharCode","resolveCharacters","TextStyle","fontFamily","positionX","positionY","maxCharHeight","baseTextures","document","createElement","getContext","BaseTexture","TextMetrics","measureText","ceil","textureGlyphWidth","fontStyle","len","c1","c2","undefined","uninstall","ALPHANUMERIC","pageMeshDataDefaultPageMeshData","pageMeshDataMSDFPageMeshData","charRenderDataPool","_super","_this","BitmapText","styleDefaults","align","tint","maxWidth","letterSpacing","fontName","_activePagesMeshData","_textWidth","_textHeight","_align","_tint","_fontName","_fontSize","_text","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","_roundPixels","settings","ROUND_PIXELS","_textureCache","__","constructor","prototype","create","__extends","pos","Point","lineWidths","lineSpaces","charsInput","pageMeshDataPool","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","spaceCount","charCode","charData","charRenderData","pop","EMPTY","prevSpaces","position","orig","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","uid","pageMeshData","geometry","MeshGeometry","material","meshBlendMode","MeshMaterial","BLEND_MODES","NORMAL","program","Program","uniforms","uFWidth","NORMAL_NPM","mesh","Mesh","blendMode","index","indexCount","vertexCount","uvsCount","total","vertices","uvs","indices","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","total_1","offset","round","xPos","yPos","pageMesh","textureFrame","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","i_2","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","validate","containerUpdateTransform","renderer","_b","worldTransform","a","c","dx","sqrt","dy","worldScale","abs","fontScale","_i","shader","_render","getLocalBounds","updateText","set","copyFrom","Container","BitmapFontLoader","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","TEXT","resource","next","baseUrl","getBaseUrl","completed","metadata","pageFile","keys","bitmapFont","install","url","exists","resources","bitmapResource","onAfterMiddleware","add","crossOrigin","loadType","LOAD_TYPE","IMAGE","imageMetadata","parentResource","loader","resUrl","isDataUrl","dirname","charAt","dir"],"mappings":"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"}