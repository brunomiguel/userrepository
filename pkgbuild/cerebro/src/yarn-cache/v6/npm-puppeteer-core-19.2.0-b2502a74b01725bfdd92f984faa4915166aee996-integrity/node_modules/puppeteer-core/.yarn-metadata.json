{
  "manifest": {
    "name": "puppeteer-core",
    "version": "19.2.0",
    "description": "A high-level API to control headless Chrome over the DevTools Protocol",
    "keywords": [
      "puppeteer",
      "chrome",
      "headless",
      "automation"
    ],
    "type": "commonjs",
    "main": "./lib/cjs/puppeteer/puppeteer-core.js",
    "types": "./lib/types.d.ts",
    "exports": {
      ".": {
        "types": "./lib/types.d.ts",
        "import": "./lib/esm/puppeteer/puppeteer-core.js",
        "require": "./lib/cjs/puppeteer/puppeteer-core.js"
      },
      "./internal/*": {
        "import": "./lib/esm/puppeteer/*",
        "require": "./lib/cjs/puppeteer/*"
      },
      "./*": {
        "import": "./*",
        "require": "./*"
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/puppeteer/puppeteer/tree/main/packages/puppeteer-core"
    },
    "engines": {
      "node": ">=14.1.0"
    },
    "scripts": {
      "build:third_party": "wireit",
      "build:tsc": "wireit",
      "build:types": "wireit",
      "build": "wireit",
      "check": "tsx tools/ensure-correct-devtools-protocol-package",
      "clean": "tsc -b --clean && rimraf lib src/generated",
      "format:types": "wireit",
      "generate:package-json": "wireit",
      "generate:sources": "wireit",
      "prepack": "wireit"
    },
    "wireit": {
      "prepack": {
        "command": "cp ../../README.md README.md",
        "files": [
          "../../README.md"
        ],
        "output": [
          "README.md"
        ]
      },
      "build": {
        "dependencies": [
          "build:third_party",
          "format:types",
          "generate:package-json"
        ]
      },
      "generate:sources": {
        "command": "tsx tools/generate_sources.ts",
        "files": [
          "tools/generate_sources.ts",
          "src/templates/**"
        ],
        "output": [
          "src/generated/**",
          "src/types.ts"
        ]
      },
      "build:third_party": {
        "command": "rollup --config rollup.third_party.config.js",
        "dependencies": [
          "build:tsc"
        ],
        "clean": false,
        "files": [
          "lib/esm/third_party/**",
          "lib/cjs/third_party/**"
        ],
        "output": [
          "lib/esm/third_party/**",
          "lib/cjs/third_party/**"
        ]
      },
      "generate:package-json": {
        "command": "echo '{\"type\": \"module\"}' > lib/esm/package.json",
        "clean": "if-file-deleted",
        "dependencies": [
          "build:tsc"
        ],
        "output": [
          "lib/esm/package.json"
        ]
      },
      "build:types": {
        "command": "api-extractor run --local",
        "dependencies": [
          "build:tsc"
        ],
        "files": [
          "tsconfig.json",
          "api-extractor.json",
          "lib/esm/puppeteer/types.d.ts"
        ],
        "output": [
          "lib/types.d.ts"
        ]
      },
      "format:types": {
        "command": "eslint --cache-location .eslintcache --cache --ext=ts --no-ignore --no-eslintrc -c=../../.eslintrc.types.cjs --fix lib/types.d.ts",
        "dependencies": [
          "build:types"
        ],
        "clean": false,
        "files": [
          "lib/types.d.ts",
          "../../.eslintrc.types.cjs"
        ],
        "output": [
          "lib/types.d.ts"
        ]
      },
      "build:tsc": {
        "command": "tsc -b",
        "clean": "if-file-deleted",
        "dependencies": [
          "generate:sources"
        ],
        "files": [
          "src/**",
          "compat/**",
          "**/tsconfig.*.json"
        ],
        "output": [
          "lib/esm/**",
          "lib/cjs/**"
        ]
      }
    },
    "files": [
      "lib",
      "!*.tsbuildinfo"
    ],
    "author": {
      "name": "The Chromium Authors"
    },
    "license": "Apache-2.0",
    "dependencies": {
      "cross-fetch": "3.1.5",
      "debug": "4.3.4",
      "devtools-protocol": "0.0.1056733",
      "extract-zip": "2.0.1",
      "https-proxy-agent": "5.0.1",
      "proxy-from-env": "1.1.0",
      "rimraf": "3.0.2",
      "tar-fs": "2.1.1",
      "unbzip2-stream": "1.4.3",
      "ws": "8.10.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-puppeteer-core-19.2.0-b2502a74b01725bfdd92f984faa4915166aee996-integrity/node_modules/puppeteer-core/package.json",
    "readmeFilename": "README.md",
    "readme": "# Puppeteer\n\n[![Build status](https://github.com/puppeteer/puppeteer/workflows/CI/badge.svg)](https://github.com/puppeteer/puppeteer/actions?query=workflow%3ACI)\n[![npm puppeteer package](https://img.shields.io/npm/v/puppeteer.svg)](https://npmjs.org/package/puppeteer)\n\n<img src=\"https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png\" height=\"200\" align=\"right\"/>\n\n#### [Guides](https://pptr.dev/guides) | [API](https://pptr.dev/api) | [FAQ](https://pptr.dev/faq) | [Contributing](https://pptr.dev/contributing) | [Troubleshooting](https://pptr.dev/troubleshooting)\n\n> Puppeteer is a Node.js library which provides a high-level API to control\n> Chrome/Chromium over the\n> [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/).\n> Puppeteer runs in\n> [headless](https://developers.google.com/web/updates/2017/04/headless-chrome)\n> mode by default, but can be configured to run in full (non-headless)\n> Chrome/Chromium.\n\n#### What can I do?\n\nMost things that you can do manually in the browser can be done using Puppeteer!\nHere are a few examples to get you started:\n\n- Generate screenshots and PDFs of pages.\n- Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e.\n  \"SSR\" (Server-Side Rendering)).\n- Automate form submission, UI testing, keyboard input, etc.\n- Create an automated testing environment using the latest JavaScript and\n  browser features.\n- Capture a\n  [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference)\n  of your site to help diagnose performance issues.\n- Test Chrome Extensions.\n\n## Getting Started\n\n### Installation\n\nTo use Puppeteer in your project, run:\n\n```bash\nnpm i puppeteer\n# or `yarn add puppeteer`\n# or `pnpm i puppeteer`\n```\n\nWhen you install Puppeteer, it automatically downloads a recent version of\nChromium (~170MB macOS, ~282MB Linux, ~280MB Windows) that is\n[guaranteed to work](https://pptr.dev/faq#q-why-doesnt-puppeteer-vxxx-work-with-chromium-vyyy)\nwith Puppeteer. For a version of Puppeteer without installation, see\n[`puppeteer-core`](#puppeteer-core).\n\n#### Configuring Puppeteer\n\nPuppeteer uses several defaults that can be customized through configuration\nfiles.\n\nFor example, to change the default cache directory Puppeteer uses to install\nbrowsers, you can add a `.puppeteerrc.cjs` (or `puppeteer.config.cjs`) at the\nroot of your application with the contents\n\n```js\nconst {join} = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Changes the cache location for Puppeteer.\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\nAfter adding the configuration file, you will need to remove and reinstall\n`puppeteer` for it to take effect.\n\nSee [Configuring\nPuppeteer](https://pptr.dev/guides/configuring-puppeteer) for more information.\n\n#### `puppeteer-core`\n\nEvery release since v1.7.0 we publish two packages:\n\n- [`puppeteer`](https://www.npmjs.com/package/puppeteer)\n- [`puppeteer-core`](https://www.npmjs.com/package/puppeteer-core)\n\n`puppeteer` is a _product_ for browser automation. When installed, it downloads\na version of Chromium, which it then drives using `puppeteer-core`. Being an\nend-user product, `puppeteer` automates several workflows using reasonable defaults [that can be customized](https://pptr.dev/guides/configuring-puppeteer).\n\n`puppeteer-core` is a _library_ to help drive anything that supports DevTools\nprotocol. Being a library, `puppeteer-core` is fully driven through its\nprogrammatic interface implying no defaults are assumed and `puppeteer-core`\nwill not download Chromium when installed.\n\nYou should use `puppeteer-core` if you are [connecting to a remote\nbrowser](https://pptr.dev/api/puppeteer.puppeteer.connect) or [managing browsers\nyourself](https://pptr.dev/api/puppeteer.browserfetcher). If you are managing\nbrowsers yourself, you will need to call\n[`puppeteer.launch`](https://pptr.dev/api/puppeteer.puppeteernode.launch) with\nan an explicit\n[`executablePath`](https://pptr.dev/api/puppeteer.launchoptions.executablepath)\n(or [`channel`](https://pptr.dev/api/puppeteer.launchoptions.channel) if it's installed in a standard location).\n\nWhen using `puppeteer-core`, remember to change the import:\n\n```ts\nimport puppeteer from 'puppeteer-core';\n```\n\n### Usage\n\nPuppeteer follows the latest\n[maintenance LTS](https://github.com/nodejs/Release#release-schedule) version of\nNode.\n\nPuppeteer will be familiar to people using other browser testing frameworks. You\n[launch](https://pptr.dev/api/puppeteer.puppeteernode.launch)/[connect](https://pptr.dev/api/puppeteer.puppeteernode.connect)\na [browser](https://pptr.dev/api/puppeteer.browser),\n[create](https://pptr.dev/api/puppeteer.browser.newpage) some\n[pages](https://pptr.dev/api/puppeteer.page), and then manipulate them with\n[Puppeteer's API](https://pptr.dev/api).\n\nFor more in-depth usage, check our [guides](https://pptr.dev/guides) and\n[examples](https://github.com/puppeteer/puppeteer/tree/main/examples).\n\n#### Example\n\nThe following example searches\n[developers.google.com/web](https://developers.google.com/web) for articles\ntagged \"Headless Chrome\" and scrape results from the results page.\n\n```ts\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  await page.goto('https://developers.google.com/web/');\n\n  // Type into search box.\n  await page.type('.devsite-search-field', 'Headless Chrome');\n\n  // Wait for suggest overlay to appear and click \"show all results\".\n  const allResultsSelector = '.devsite-suggest-all-results';\n  await page.waitForSelector(allResultsSelector);\n  await page.click(allResultsSelector);\n\n  // Wait for the results page to load and display the results.\n  const resultsSelector = '.gsc-results .gs-title';\n  await page.waitForSelector(resultsSelector);\n\n  // Extract the results from the page.\n  const links = await page.evaluate(resultsSelector => {\n    return [...document.querySelectorAll(resultsSelector)].map(anchor => {\n      const title = anchor.textContent.split('|')[0].trim();\n      return `${title} - ${anchor.href}`;\n    });\n  }, resultsSelector);\n\n  // Print all the files.\n  console.log(links.join('\\n'));\n\n  await browser.close();\n})();\n```\n\n### Default runtime settings\n\n**1. Uses Headless mode**\n\nPuppeteer launches Chromium in\n[headless mode](https://developers.google.com/web/updates/2017/04/headless-chrome).\nTo launch a full version of Chromium, set the\n[`headless`](https://pptr.dev/api/puppeteer.browserlaunchargumentoptions.headless)\noption when launching a browser:\n\n```ts\nconst browser = await puppeteer.launch({headless: false}); // default is true\n```\n\n**2. Runs a bundled version of Chromium**\n\nBy default, Puppeteer downloads and uses a specific version of Chromium so its\nAPI is guaranteed to work out of the box. To use Puppeteer with a different\nversion of Chrome or Chromium, pass in the executable's path when creating a\n`Browser` instance:\n\n```ts\nconst browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});\n```\n\nYou can also use Puppeteer with Firefox Nightly (experimental support). See\n[`Puppeteer.launch`](https://pptr.dev/api/puppeteer.puppeteernode.launch) for\nmore information.\n\nSee\n[`this article`](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/)\nfor a description of the differences between Chromium and Chrome.\n[`This article`](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.\n\n**3. Creates a fresh user profile**\n\nPuppeteer creates its own browser user profile which it **cleans up on every\nrun**.\n\n#### Using Docker\n\nSee our [guide on using Docker](https://pptr.dev/guides/docker).\n\n#### Using Chrome Extensions\n\nSee our\n[guide on using Chrome extensions](https://pptr.dev/guides/chrome-extensions).\n\n## Resources\n\n- [API Documentation](https://pptr.dev/api)\n- [Guides](https://pptr.dev/guides)\n- [Examples](https://github.com/puppeteer/puppeteer/tree/main/examples)\n- [Community list of Puppeteer resources](https://github.com/transitive-bullshit/awesome-puppeteer)\n\n## Contributing\n\nCheck out our [contributing guide](https://pptr.dev/contributing) to get an\noverview of Puppeteer development.\n\n## FAQ\n\nOur [FAQ](https://pptr.dev/faq) has migrated to\n[our site](https://pptr.dev/faq).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/puppeteer-core/-/puppeteer-core-19.2.0.tgz#b2502a74b01725bfdd92f984faa4915166aee996",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/puppeteer-core/-/puppeteer-core-19.2.0.tgz",
    "hash": "b2502a74b01725bfdd92f984faa4915166aee996",
    "integrity": "sha512-wdoZDzf46y1ScpPEUDAzIWDmvG272BbdqSvDMvtYNjy2UJZT/j5OS5k813o2lfT4HtOle79eByCLs24iXbat1g==",
    "registry": "npm",
    "packageName": "puppeteer-core",
    "cacheIntegrity": "sha512-wdoZDzf46y1ScpPEUDAzIWDmvG272BbdqSvDMvtYNjy2UJZT/j5OS5k813o2lfT4HtOle79eByCLs24iXbat1g== sha1-slAqdLAXJb/dkvmE+qSRUWau6ZY="
  },
  "registry": "npm",
  "hash": "b2502a74b01725bfdd92f984faa4915166aee996"
}