{
  "manifest": {
    "name": "gulp-replace",
    "version": "1.1.3",
    "description": "A string replace plugin for gulp",
    "dependencies": {
      "@types/node": "^14.14.41",
      "@types/vinyl": "^2.0.4",
      "istextorbinary": "^3.0.0",
      "replacestream": "^4.0.3",
      "yargs-parser": ">=5.0.0-security.0"
    },
    "devDependencies": {
      "concat-stream": "^2.0.0",
      "mocha": "^7.0.0",
      "npm-which": "^3.0.1",
      "should": "^13.2.3",
      "ts-node": "^9.1.1",
      "typescript": "^4.2.4",
      "vinyl": "^2.2.1"
    },
    "scripts": {
      "test": "mocha"
    },
    "main": "index.js",
    "types": "index.d.ts",
    "repository": {
      "type": "git",
      "url": "git://github.com/lazd/gulp-replace.git"
    },
    "keywords": [
      "gulpplugin",
      "replace"
    ],
    "author": {
      "name": "Larry Davis",
      "email": "lazdnet@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/lazd/gulp-replace/issues"
    },
    "engines": {
      "node": ">=10"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-gulp-replace-1.1.3-integrity/node_modules/gulp-replace/package.json",
    "readmeFilename": "README.md",
    "readme": "# gulp-replace [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url]\n\n> A string replace plugin for gulp\n\n[Read me for gulp 3](README-gulp3.md)\n\n## Usage\n\nFirst, install `gulp-replace` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-replace\n# or\nyarn add --dev gulp-replace\n```\n\nThen, add it to your `gulpfile.js`:\n\n### Simple string replace\n\n```javascript\nconst replace = require('gulp-replace');\nconst { src, dest } = require('gulp');\n\nfunction replaceTemplate() {\n  return src(['file.txt'])\n    .pipe(replace('bar', 'foo'))\n    .pipe(dest('build/'));\n};\n\nexports.replaceTemplate = replaceTemplate;\n```\n\n### Simple regex replace\n\n```javascript\nconst replace = require('gulp-replace');\nconst { src, dest } = require('gulp');\n\nfunction replaceTemplate() {\n  return src(['file.txt'])\n      // See https://mdn.io/string.replace#Specifying_a_string_as_a_parameter\n      .pipe(replace(/foo(.{3})/g, '$1foo'))\n      .pipe(dest('build/'));\n};\n\nexports.replaceTemplate = replaceTemplate;\n```\n\n### String replace with function callback\n\n```javascript\nconst replace = require('gulp-replace');\nconst { src, dest } = require('gulp');\n\nfunction replaceTemplate() {\n  return src(['file.txt'])\n    .pipe(replace('foo', function handleReplace(match){ return match.reverse(); })\n    .pipe(dest('build/'))\n};\n\nexports.replaceTemplate = replaceTemplate;\n```\n\n### Regex replace with function callback\n\n```javascript\nconst replace = require('gulp-replace');\nconst { src, dest } = require('gulp');\n\nfunction replaceTemplate() {\n  return src(['file.txt'])\n    .pipe(replace(/foo(.{3})/g, function handleReplace(match, p1, offset, string) {\n      // Replace foobaz with barbaz and log a ton of information\n      // See https://mdn.io/string.replace#Specifying_a_function_as_a_parameter\n      console.log('Found ' + match + ' with param ' + p1 + ' at ' + offset + ' inside of ' + string);\n      return 'bar' + p1;\n    }))\n    .pipe(dest('build/'));\n};\n\nexports.replaceTemplate = replaceTemplate;\n```\n\n### Function callback with file object\n\n```javascript\nconst replace = require('gulp-replace');\nconst { src, dest } = require('gulp');\n\nfunction replaceTemplate() {\n  return src(['file.txt'])\n    .pipe(replace('filename', function handleReplace() {\n         // Replaces instances of \"filename\" with \"file.txt\"\n         // this.file is also available for regex replace\n         // See https://github.com/gulpjs/vinyl#instance-properties for details on available properties\n         return this.file.relative;\n       }))\n    .pipe(dest('build/'));\n};\n\nexports.replaceTemplate = replaceTemplate;\n```\n\n## API\n\n`gulp-replace` can be called with a string or regex.\n\n### replace(string, replacement[, options])\n\n> CAUTION: `replacement` could **NOT be arrow function**, because arrow function could not bind `this`\n\n#### string\n\nType: `String`\n\nThe string to search for.\n\n#### replacement\n\nType: `String` or `Function`\n\nThe replacement string or function. If `replacement` is a function, it will be called once for each match and will be passed the string that is to be replaced.\n\nThe value of `this.file` will be equal to the [vinyl instance](https://github.com/gulpjs/vinyl#instance-properties) for the file being processed.\n\n### replace(regex, replacement[, options])\n\n#### regex\n\nType: `RegExp`\n\nThe regex pattern to search for. See the [MDN documentation for RegExp] for details.\n\n#### replacement\n\nType: `String` or `Function`\n\nThe replacement string or function. See the [MDN documentation for String.replace] for details on special replacement string patterns and arguments to the replacement function.\n\nThe value of `this.file` will be equal to the [vinyl instance](https://github.com/gulpjs/vinyl#instance-properties) for the file being processed.\n\n### gulp-replace options\n\nAn optional third argument, `options`, can be passed.\n\n#### options\n\nType: `Object`\n\n##### options.skipBinary\n\nType: `boolean`  \nDefault: `true`\n\nSkip binary files. This option is `true` by default. If you want to replace content in binary files, you must explicitly set it to `false`.\n\n[MDN documentation for RegExp]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n[MDN documentation for String.replace]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n\n[travis-url]: https://travis-ci.org/lazd/gulp-replace\n[travis-image]: https://secure.travis-ci.org/lazd/gulp-replace.svg?branch=master\n[npm-url]: https://npmjs.org/package/gulp-replace\n[npm-image]: https://badge.fury.io/js/gulp-replace.svg\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Larry Davis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/gulp-replace/-/gulp-replace-1.1.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/gulp-replace/-/gulp-replace-1.1.3.tgz",
    "hash": "",
    "integrity": "sha512-HcPHpWY4XdF8zxYkDODHnG2+7a3nD/Y8Mfu3aBgMiCFDW3X2GiOKXllsAmILcxe3KZT2BXoN18WrpEFm48KfLQ==",
    "registry": "npm",
    "packageName": "gulp-replace",
    "cacheIntegrity": "sha512-HcPHpWY4XdF8zxYkDODHnG2+7a3nD/Y8Mfu3aBgMiCFDW3X2GiOKXllsAmILcxe3KZT2BXoN18WrpEFm48KfLQ== sha1-hkHNynjmg+hXPKSgEufk67fk22A="
  },
  "registry": "npm",
  "hash": "1dc3c7a566385dd17ccf16240ce0c79c6dbeedade70ff63c31fbb768180c8821435b75f61a238a5e596c02620b7317b72994f6057a0dd7c5aba44166e3c29f2d"
}