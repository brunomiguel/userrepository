/// <reference types="react" />
import React from "react";
interface ValueFunc {
    (children: string): string;
}
interface ValuesAny {
    [key: string]: ValueFunc | unknown;
}
declare enum AvailableLocales {
    az = "az",
    bo = "bo",
    dz = "dz",
    id = "id",
    ja = "ja",
    jv = "jv",
    ka = "ka",
    km = "km",
    kn = "kn",
    ko = "ko",
    ms = "ms",
    th = "th",
    tr = "tr",
    vi = "vi",
    zh = "zh",
    af = "af",
    bn = "bn",
    bg = "bg",
    ca = "ca",
    da = "da",
    de = "de",
    el = "el",
    en = "en",
    eo = "eo",
    es = "es",
    et = "et",
    eu = "eu",
    fa = "fa",
    fi = "fi",
    fo = "fo",
    fur = "fur",
    fy = "fy",
    gl = "gl",
    gu = "gu",
    ha = "ha",
    he = "he",
    hu = "hu",
    is = "is",
    it = "it",
    ku = "ku",
    lb = "lb",
    ml = "ml",
    mn = "mn",
    mr = "mr",
    nah = "nah",
    nb = "nb",
    ne = "ne",
    nl = "nl",
    nn = "nn",
    no = "no",
    oc = "oc",
    om = "om",
    or = "or",
    pa = "pa",
    pap = "pap",
    ps = "ps",
    pt = "pt",
    so = "so",
    sq = "sq",
    sv = "sv",
    sw = "sw",
    ta = "ta",
    te = "te",
    tk = "tk",
    ur = "ur",
    zu = "zu",
    am = "am",
    bh = "bh",
    fil = "fil",
    fr = "fr",
    gun = "gun",
    hi = "hi",
    hy = "hy",
    ln = "ln",
    mg = "mg",
    nso = "nso",
    xbr = "xbr",
    ti = "ti",
    wa = "wa",
    be = "be",
    bs = "bs",
    hr = "hr",
    ru = "ru",
    sr = "sr",
    uk = "uk",
    cs = "cs",
    sk = "sk",
    ga = "ga",
    lt = "lt",
    sl = "sl",
    mk = "mk",
    mt = "mt",
    lv = "lv",
    pl = "pl",
    cy = "cy",
    ro = "ro",
    ar = "ar"
}
type Locales = keyof typeof AvailableLocales;
interface TranslatorInterface<T> {
    getMessage(key: string, params: ValuesAny): T;
    getPlural(key: string, number: number, params: ValuesAny): T;
}
interface I18nInterface {
    /**
     * Returns message by key for current locale
     * @param key
     */
    getMessage(key: string): string;
    /**
     * Returns current locale code
     * Locale codes should be in the list of Locales
     */
    getUILanguage(): Locales;
    /**
     * Returns base locale message
     * @param key
     */
    getBaseMessage(key: string): string;
    /**
     * Returns base locale code
     */
    getBaseUILanguage(): Locales;
}
type MessageConstructorInterface<T> = (formatted: string[]) => T;
declare class Translator<T> implements TranslatorInterface<T> {
    private i18n;
    private readonly messageConstructor;
    private values;
    constructor(i18n: I18nInterface, messageConstructor?: MessageConstructorInterface<any>, values?: ValuesAny);
    getMessage(key: string, params?: ValuesAny): T;
    getPlural(key: string, number: number, params?: ValuesAny): T;
}
interface ReactCustom {
    createElement: typeof React.createElement;
    Children: React.ReactChildren;
}
declare const translate: {
    createTranslator: <T = string>(i18n: I18nInterface, messageConstructor?: MessageConstructorInterface<T> | undefined, values?: ValuesAny | undefined) => Translator<T>;
    createReactTranslator: <T_1 = import("react").ReactNode>(i18n: I18nInterface, react: ReactCustom) => Translator<T_1>;
};
declare const validator: {
    isTranslationValid: (baseMessage: string, translatedMessage: string) => boolean;
    isPluralFormValid: (str: string, locale: "az" | "bo" | "dz" | "id" | "ja" | "jv" | "ka" | "km" | "kn" | "ko" | "ms" | "th" | "tr" | "vi" | "zh" | "af" | "bn" | "bg" | "ca" | "da" | "de" | "el" | "en" | "eo" | "es" | "et" | "eu" | "fa" | "fi" | "fo" | "fur" | "fy" | "gl" | "gu" | "ha" | "he" | "hu" | "is" | "it" | "ku" | "lb" | "ml" | "mn" | "mr" | "nah" | "nb" | "ne" | "nl" | "nn" | "no" | "oc" | "om" | "or" | "pa" | "pap" | "ps" | "pt" | "so" | "sq" | "sv" | "sw" | "ta" | "te" | "tk" | "ur" | "zu" | "am" | "bh" | "fil" | "fr" | "gun" | "hi" | "hy" | "ln" | "mg" | "nso" | "xbr" | "ti" | "wa" | "be" | "bs" | "hr" | "ru" | "sr" | "uk" | "cs" | "sk" | "ga" | "lt" | "sl" | "mk" | "mt" | "lv" | "pl" | "cy" | "ro" | "ar", key: string) => boolean;
};
export { I18nInterface, translate, validator };
