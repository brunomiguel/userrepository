{
  "manifest": {
    "name": "@adguard/translate",
    "version": "0.2.0",
    "main": "dist/index.js",
    "module": "dist/index.esm.js",
    "types": "dist/types/index.d.ts",
    "author": {
      "name": "Adguard Software Ltd"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/AdguardTeam/translate.git"
    },
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "rollup -c",
      "prepublishOnly": "npm run build",
      "test": "jest",
      "lint": "eslint src tests",
      "docs": "typedoc --out docs src"
    },
    "devDependencies": {
      "@babel/core": "^7.12.10",
      "@babel/plugin-proposal-class-properties": "^7.12.1",
      "@babel/preset-env": "^7.12.10",
      "@babel/preset-typescript": "^7.12.7",
      "@rollup/plugin-commonjs": "^17.0.0",
      "@rollup/plugin-node-resolve": "^11.0.1",
      "@types/jest": "^26.0.19",
      "@types/react": "^17.0.0",
      "@typescript-eslint/eslint-plugin": "^4.10.0",
      "@typescript-eslint/parser": "^4.10.0",
      "@wessberg/rollup-plugin-ts": "^1.3.8",
      "babel-jest": "^26.6.3",
      "eslint": "^7.15.0",
      "jest": "^26.6.3",
      "react": "^17.0.1",
      "rollup": "^2.35.1",
      "ts-node": "^9.1.1",
      "typedoc": "^0.19.2",
      "typescript": "^4.1.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@adguard-translate-0.2.0-6b74b037167ec0cae32e6b7423cb35eb1b08a1b3-integrity/node_modules/@adguard/translate/package.json",
    "readmeFilename": "README.md",
    "readme": "# AdGuard Translate\n\nSimple internationalization library with React integration\n\n* [Installation](#installation)\n    * [npm](#npm)\n    * [Yarn](#yarn)\n* [Usage](#usage)\n    * [Messages format](#messages-format)\n        * [Placeholders](#placeholders)\n        * [Tags support](#tags-support)\n            * [Default list of tags](#default-list-of-tags)\n        * [Plural strings](#plural-strings)\n    * [translate](#translate)\n        * [createTranslator](#create-translator)\n        * [createReactTranslator](#create-react-translator)\n    * [validator](#validator)\n        * [isTranslationValid](#is-translation-valid)\n        * [isPluralFormValid](#is-plural-form-valid)\n    * [API](#api)\n        * [createTranslator](#api-create-translator)\n        * [createReactTranslator](#api-create-react-translator)\n        * [isTranslationValid](#api-is-translation-valid)\n        * [isPluralFormValid](#api-is-plural-form-valid)\n* [Development](#development)\n    * [Build](#build)\n    * [Lint](#lint)\n    * [Test](#test)\n    * [Docs](#docs)\n    * [TODO](#todo)\n* [License](#license)\n\n## <a id=\"installation\"></a> Installation\n\n### <a id=\"npm\"></a> npm\n\n```\nnpm install @adguard/translate\n```\n\n### <a id=\"yarn\"></a> Yarn\n\n```\nyarn add @adguard/translate\n```\n\n## <a id=\"usage\"></a> Usage\n\n### <a id=\"messages-format\"></a> Messages format\n\nLibrary supports messages with placeholders, tags and plural forms\n\n#### <a id=\"placeholders\"></a> Placeholders\n\nPlaceholders should be wrapped in `%` mark\n\ne.g.\n\n```\n\"agreement_consent\": {\n    \"message\": \"Servers number %count%\",\n}\n```\n\n#### <a id=\"tags\"></a> Tags support\n\nLibrary supports open/close tags, and their values should be provided in the `translate` method\n\ne.g.\n\n```\n<a>link</a> to the text\n```\n\nand void tags\n\ne.g.\n\n```\n<img src=\"server.jpg\" >\n```\n\n##### <a id=\"default-list-of-tags\"></a> Default list of tags\n\nNext tags are not required in the `translate`, because they are provided by default\n\n```\n    <b>, <p>, <strong>, <tt>, <s>, <i>,\n```\n\n#### <a id=\"plural-strings\"></a> Plural strings\n\nLibrary supports plural strings translation.\n\ne.g.\n\n```\nНет серверов | %count% сервер | %count% сервера | %count% серверов\n```\n\nPlural strings should follow simple rules.\n\n1. Plural forms should be divided by `|`.\n2. Plural forms count should correspond to the language plural forms count ([table](https://github.com/translate/l10n-guide/blob/master/docs/l10n/pluralforms.rst)) + 1 (zero form).\n3. If first plural form is omitted, for the zero form you'll get empty string\n\n```\n| %count% сервер | %count% сервера | %count% серверов\n```\n\n### <a id=\"translate\"></a> translate\n\n```\n// import library\nimport { translate } from '@adguard/translate'\n\n// create i18n object which implements I18nInterface:\ninterface I18nInterface {\n    /**\n     * Returns message by key for current locale\n     * @param key\n     */\n    getMessage(key: string): string;\n\n    /**\n     * Returns current locale code\n     * Locale codes should be in the list of Locales\n     */\n    getUILanguage(): Locales;\n\n    /**\n     * Returns base locale message\n     * @param key\n     */\n    getBaseMessage(key: string): string;\n\n    /**\n     * Returns base locale code\n     */\n    getBaseUILanguage(): Locales;\n}\n\n// in the browser extension it will be \"browser.i18n\"\n\n// create translate function\nconst translator = translate.createTranslator(i18n)\n\n// e.g.\n//  string to translate:\n//  \"agreement_consent\": {\n//      \"message\": \"You agree to our <eula>EULA</eula>\",\n//  }\n```\n\n#### <a id=\"create-translator\"></a> createTranslator\n\nThis method can be used to translate simple strings and Vue template strings\n\n```\nconst translator = translate.createTranslator(browser.i18n);\nconst translatedString = translator.getMessage('agreement_consent', {\n    eula: (chunks) => `<button class=\"privacy-link\">${chunks}</button>`,\n});\n\nconsole.log(translatedString); // <button class=\"privacy-link\">EULA</button>\n```\n\n#### <a id=\"create-react-translator\"></a> createReactTranslator\n\n```\nconst reactTranslator = translate.createReactTranslator(browser.i18n, React);\n\n<div>\n    {reactTranslator.getMessage('agreement_consent', {\n        eula: (chunks) => (\n            <button\n                className=\"auth__term\"\n                onClick={handleEulaClick}\n            >\n                {chunks}\n            </button>\n        ),\n    })}\n</div>\n```\n\n### <a id=\"validator\"></a> validator\n\n```\n// import library\nimport { validator } from '@adguard/translate'\n```\n\n#### <a id=\"is-translation-valid\"></a> isTranslationValid\n\n```\nconst baseMessage = 'test string <a>has node</a>';\nconst targetMessage = 'тестовая строка <a>с нодой</a>';\n\nvalidator.isTranslationValid(baseMessage, targetMessage); // true\n```\n\n#### <a id=\"is-plural-form-valid\"></a> isPluralFormValid\n\n```\nvalidator.isPluralFormValid(%count% серверов | %count% сервер | %count% сервера | %count% серверов, 'ru', \"servers_count\"); // true, all 4 plural forms are provided\n\nvalidator.isPluralFormValid(%count% сервера | %count% серверов, 'ru', \"servers_count\"); // false, ru locale awaits for 4 plural forms provided\n```\n\n### <a id=\"api\"></a> API\n\n#### <a id=\"api-create-translator\"></a> createTranslator\n\n```\n/**\n * Creates translator instance strings, by default for simple strings\n * @param i18n - function which returns translated message by key\n * @param messageConstructor - function that will collect messages\n * @param values - map with default values for tag converters\n */\nconst createTranslator = (\n    i18n: I18nInterface,\n    messageConstructor?: MessageConstructorInterface,\n    values?: ValuesAny\n): Translator\n```\n\n#### <a id=\"api-create-react-translator\"></a> createReactTranslator\n\n```\n/**\n * Creates translation function for strings used in the React components\n * We do not import React directly, because translator module can be used\n * in the modules without React too\n *\n *\n * @param i18n - object with methods which get translated message by key and return current locale\n * @param React - instance of react library\n */\n  const createReactTranslator = (i18n: I18nInterface, React: ReactCustom): Translator\n```\n\n#### <a id=\"api-is-translation-valid\"></a> isTranslationValid\n\n```\n/**\n * Validates translation against base string by AST (abstract syntax tree) structure\n * @param baseMessage - base message\n * @param translatedMessage - translated message\n */\nconst isTranslationValid = (baseMessage: string, translatedMessage: string): boolean\n```\n\n#### <a id=\"api-is-plural-form-valid\"></a> isPluralFormValid\n\n```\n/**\n * Checks if plural forms are valid\n * @param str - message string\n * @param locale - message locale\n * @param key - message key, used for clearer log message\n */\nconst isPluralFormValid = (str: string, locale: Locales, key: string): boolean => {\n```\n\n## <a id=\"development\"></a> Development\n\nUse yarn to build the library\n\n### <a id=\"build\"></a> Build\n\nTo build the library run:\n\n```\nyarn build\n```\n\nBuild result would be in the `dist` directory\n\n### <a id=\"lint\"></a> Lint\n\nTo check lint errors run in terminal:\n\n```\nyarn lint\n```\n\n### <a id=\"test\"></a> Test\n\nThe library uses jest for running unit-tests. To launch the tests, run the following command in the terminal:\n\n```\nyarn test\n```\n\n### <a id=\"docs\"></a> Docs\n\nTo build documentation, run the following command in the terminal:\n\n```\nyarn docs\n```\n\n### <a id=\"todo\"></a> TODO\n\n- [ ] Create Vue plugin\n- [ ] Add utility to check if code contains unused or redundant translation messages\n\n### <a id=\"license\"></a> License\n\nMIT\n",
    "description": "Simple internationalization library with React integration",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Adguard Software Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@adguard/translate/-/translate-0.2.0.tgz#6b74b037167ec0cae32e6b7423cb35eb1b08a1b3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@adguard/translate/-/translate-0.2.0.tgz",
    "hash": "6b74b037167ec0cae32e6b7423cb35eb1b08a1b3",
    "integrity": "sha512-zvpaEKMABcCCuEr7WpGRGgfdzp8L0OMuM0KUI7uwWapX+/i75ifffbWnKxi/LUdZDJu8kJPnmLN/DD5hngZuQQ==",
    "registry": "npm",
    "packageName": "@adguard/translate",
    "cacheIntegrity": "sha512-zvpaEKMABcCCuEr7WpGRGgfdzp8L0OMuM0KUI7uwWapX+/i75ifffbWnKxi/LUdZDJu8kJPnmLN/DD5hngZuQQ== sha1-a3SwNxZ+wMrjLmt0I8s16xsIobM="
  },
  "registry": "npm",
  "hash": "6b74b037167ec0cae32e6b7423cb35eb1b08a1b3"
}