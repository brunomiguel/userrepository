{
  "manifest": {
    "name": "esm",
    "version": "3.2.25",
    "description": "Tomorrow's ECMAScript modules today!",
    "keywords": [
      "commonjs,",
      "ecmascript,",
      "export,",
      "import,",
      "modules,",
      "node,",
      "require"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/standard-things/esm.git"
    },
    "license": "MIT",
    "author": {
      "name": "John-David Dalton",
      "email": "john.david.dalton@gmail.com"
    },
    "main": "esm.js",
    "runkitExample": "require = require(\"esm\")(module)\nrequire(\"lodash-es\")",
    "engines": {
      "node": ">=6"
    },
    "husky": {
      "hooks": {
        "precommit": "npm run lint"
      }
    },
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "files": [
      "index.js",
      "esm.js",
      "esm/loader.js"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-esm-3.2.25-342c18c29d56157688ba5ce31f8431fbb795cc10-integrity/node_modules/esm/package.json",
    "readmeFilename": "README.md",
    "readme": "# esm\n\nThe brilliantly simple, babel-less, bundle-less ECMAScript module loader.\n\n> `esm` is the world’s most advanced ECMAScript module loader.\nThis fast, production ready, zero dependency loader is all you need to support\nECMAScript modules in Node 6+. See the release [post](https://medium.com/web-on-the-edge/tomorrows-es-modules-today-c53d29ac448c)\nand [video](https://www.youtube.com/watch?v=JcZ-FzfDq8A#t=5) for details!\n\nInstall\n---\n\n* __New projects__\n\n  Run `npm init esm` or `yarn create esm`.\n\n  :bulb: Use the `-y` flag to answer “yes” to all prompts.\n\n* __Existing projects__\n\n  Run `npm i esm` or `yarn add esm`.\n\nGetting started\n---\n\nThere are two ways to enable `esm`.\n\n1. Enable `esm` for packages:\n\n   Use `esm` to load the main ES module and export it as CommonJS.\n\n    __index.js__\n    ```js\n    // Set options as a parameter, environment variable, or rc file.\n    require = require(\"esm\")(module/*, options*/)\n    module.exports = require(\"./main.js\")\n    ```\n    __main.js__\n    ```js\n    // ESM syntax is supported.\n    export {}\n    ```\n    :bulb: These files are automagically created with `npm init esm` or `yarn create esm`.\n\n2. Enable `esm` for local runs:\n\n    ```shell\n    node -r esm main.js\n    ```\n    :bulb: Omit the filename to enable `esm` in the REPL.\n\nFeatures\n---\n\n:clap: By default, :100: percent CJS interoperability is enabled so you can get stuff done.<br>\n:lock: `.mjs` files are limited to basic functionality without support for `esm` options.\n\nOut of the box `esm` just works, no configuration necessary, and supports:\n\n* Passing all applicable [test262](https://github.com/tc39/test262) compliance tests\n* [`import`](https://ponyfoo.com/articles/es6-modules-in-depth#import)/[`export`](https://ponyfoo.com/articles/es6-modules-in-depth#export)\n* [`import.meta`](https://github.com/tc39/proposal-import-meta)\n* [Dynamic `import`](https://github.com/tc39/proposal-dynamic-import)\n* [Live bindings](https://ponyfoo.com/articles/es6-modules-in-depth#bindings-not-values)\n* [File URI scheme](https://en.wikipedia.org/wiki/File_URI_scheme)\n* Node `stdin`, [`--eval`](https://nodejs.org/api/cli.html#cli_e_eval_script), [`--print`](https://nodejs.org/api/cli.html#cli_p_print_script) flags\n* Node [`--check`](https://nodejs.org/api/cli.html#cli_c_check) flag _(Node 10+)_\n\nOptions\n---\n\nSpecify options with one of the following:\n\n* `\"esm\"` field in `package.json`\n* CJS/ESM in an `.esmrc.js`, `.esmrc.cjs`, or `.esmrc.mjs` file\n* [JSON6](https://github.com/d3x0r/json6) in an `.esmrc` or `.esmrc.json` file\n* JSON6 or file path in the `ESM_OPTIONS` environment variable\n* `ESM_DISABLE_CACHE` environment variable\n\n<table><tr><td colspan=2><code>{</code><tr><td valign=top><code>\"cjs\":true</code><td><p>A boolean or object for toggling CJS features in ESM.<details><summary>Features</summary><table><tr><td colspan=2><code>{</code><tr><td valign=top><code>\"cache\":true</code><td><p>A boolean for storing ES modules in <code>require.cache</code>.<tr><td valign=top><code>\"esModule\":true</code><td><p>A boolean for <code>__esModule</code> interoperability.<tr><td valign=top><code>\"extensions\":true</code><td><p>A boolean for respecting <code>require.extensions</code> in ESM.<tr><td valign=top><code>\"mutableNamespace\":true</code><td><p>A boolean for mutable <a href=https://ponyfoo.com/articles/es6-modules-in-depth#import-all-the-things>namespace objects</a>.<tr><td valign=top><code>\"namedExports\":true</code><td><p>A boolean for <a href=https://ponyfoo.com/articles/es6-modules-in-depth#importing-named-exports>importing named exports</a> of CJS modules.<tr><td valign=top><code>\"paths\":true</code><td><p>A boolean for following CJS <a href=https://github.com/nodejs/node-eps/blob/master/002-es-modules.md#432-removal-of-non-local-dependencies>path rules</a> in ESM.<tr><td valign=top><code>\"vars\":true</code><td><p>A boolean for <code>__dirname</code>, <code>__filename</code>, and <code>require</code> in ESM.<tr><td valign=top><code>\"dedefault\":false</code><td><p>A boolean for requiring ES modules without the dangling <code>require().default</code>.<tr><td valign=top><code>\"topLevelReturn\":false</code><td><p>A boolean for top-level <code>return</code> support.<tr><td colspan=2><code>}</code></table></details><tr><td valign=top><code>\"mainFields\":[\"main\"]</code><td><p>An array of fields checked when importing a package.<tr><td valign=top><code>\"mode\":\"auto\"</code><td><p>A string mode:<ul><li><code>\"auto\"</code> detect files with <code>import</code>, <code>import.meta</code>, <code>export</code>,<br><a href=https://github.com/tc39/proposal-modules-pragma><code>\"use module\"</code></a>, or <code>.mjs</code> as ESM.<li><code>\"all\"</code> files besides those with <code>\"use script\"</code> or <code>.cjs</code> are treated as ESM.<li><code>\"strict\"</code> to treat <strong>only</strong> <code>.mjs</code> files as ESM.</ul><tr><td valign=top><code>\"await\":false</code><td><p>A boolean for <a href=https://github.com/tc39/proposal-top-level-await>top-level <code>await</code></a> in modules without ESM exports. <em>(Node 10+)</em><tr><td valign=top><code>\"force\":false</code><td><p>A boolean to apply these options to all module loads.<tr><td valign=top><code>\"wasm\":false</code><td><p>A boolean for <a href=https://nodejs.org/api/globals.html#globals_webassembly>WebAssembly</a> module support. <em>(Node 8+)</em><tr><td colspan=2><code>}</code></table>\n\nDevOpts\n---\n\n<table><tr><td colspan=2><code>{</code><tr><td valign=top><code>\"cache\":true</code><td><p>A boolean for toggling cache creation or a cache directory path.<tr><td valign=top><code>\"sourceMap\":false</code><td><p>A boolean for including inline source maps.<tr><td colspan=2><code>}</code></table>\n\nTips\n---\n\n### Bundling\n\n* For bundlers like [`browserify`](http://browserify.org/)+[`esmify`](https://github.com/mattdesl/esmify),\n  [`parcel-bundler`](https://parceljs.org/), and [`webpack`](https://webpack.js.org/)\n  add a `\"module\"` field to `package.json` pointing to the main ES module.\n  ```json\n  \"main\": \"index.js\",\n  \"module\": \"main.js\"\n  ```\n\n  :bulb: This is automagically done with `npm init esm` or `yarn create esm`.\n\n### Extensions\n\n* Enable `esm` for [`wallaby.js`](https://wallabyjs.com/) following their\n  [integration example](https://wallabyjs.com/docs/integration/node.html#es-modules).\n\n### Loading\n\n* Load `esm` before loaders/monitors like\n  [`@babel/register`](https://babeljs.io/docs/en/next/babel-register.html),\n  [`newrelic`](https://github.com/newrelic/node-newrelic),\n  [`sqreen`](https://docs.sqreen.io/sqreen-for-nodejs/getting-started-2/), and\n  [`ts-node`](https://github.com/TypeStrong/ts-node#programmatic).\n\n* Load `esm` for [`jasmine`](https://jasmine.github.io/) using the\n  [`\"helpers\"`](https://jasmine.github.io/setup/nodejs.html#configuration)\n  field in `jasmine.json`:\n  ```json\n  \"helpers\": [\n    \"node_modules/esm\"\n  ]\n  ```\n\n* Load `esm` with “node-args\" options of:<br>\n  - [`pm2`](https://pm2.io/doc/en/runtime/reference/pm2-cli/#pm2-flags): `--node-args=\"-r esm\"`\n\n* Load `esm` with “require” options of\n  [`ava`](https://github.com/avajs/ava/blob/master/docs/recipes/es-modules.md),\n  [`mocha`](https://mochajs.org/#-require-module-r-module),\n  [`nodemon`](https://nodemon.io/),\n  [`nyc`](https://github.com/istanbuljs/nyc#require-additional-modules),\n  [`qunit`](https://github.com/qunitjs/qunit/releases/tag/2.6.0),\n  [`tape`](https://github.com/substack/tape#preloading-modules), and\n  [`webpack`](https://webpack.js.org/api/cli/#config-options).\n\n  :bulb: Builtin `require` cannot sideload `.mjs` files. However, `.js` files\n  can be sideloaded or `.mjs` files may be loaded with dynamic `import`.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright esm contributors\n\nBased on reify, copyright Ben Newman <https://github.com/benjamn/reify>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/esm/-/esm-3.2.25.tgz#342c18c29d56157688ba5ce31f8431fbb795cc10",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/esm/-/esm-3.2.25.tgz",
    "hash": "342c18c29d56157688ba5ce31f8431fbb795cc10",
    "integrity": "sha512-U1suiZ2oDVWv4zPO56S0NcR5QriEahGtdN2OR6FiOG4WJvcjBVFB0qI4+eKoWFH483PKGuLuu6V8Z4T5g63UVA==",
    "registry": "npm",
    "packageName": "esm",
    "cacheIntegrity": "sha512-U1suiZ2oDVWv4zPO56S0NcR5QriEahGtdN2OR6FiOG4WJvcjBVFB0qI4+eKoWFH483PKGuLuu6V8Z4T5g63UVA== sha1-NCwYwp1WFXaIulzjH4Qx+7eVzBA="
  },
  "registry": "npm",
  "hash": "342c18c29d56157688ba5ce31f8431fbb795cc10"
}