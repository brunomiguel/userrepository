"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipe = exports.ipcRenderer = exports.ipcMain = void 0;
var ipc_main_1 = __importDefault(require("./ipc-main"));
exports.ipcMain = ipc_main_1.default;
var ipc_renderer_1 = __importDefault(require("./ipc-renderer"));
exports.ipcRenderer = ipc_renderer_1.default;
var pipe = function (main, renderer) {
    main.emitter.on('send-to-renderer', function (channel) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        setTimeout(function () {
            var _a;
            return (_a = renderer.emitter).emit.apply(_a, __spread(['receive-from-main', channel], args));
        }, 1);
    });
    main.emitter.on('error-to-renderer', function (channel, err) {
        setTimeout(function () { return renderer.emitter.emit('error-from-main', channel, err); }, 1);
    });
    renderer.emitter.on('send-to-main', function (channel) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        setTimeout(function () {
            var _a;
            return (_a = main.emitter).emit.apply(_a, __spread(['receive-from-renderer', channel], args));
        }, 1);
    });
};
exports.pipe = pipe;
var createIPCMock = function () {
    var main = new ipc_main_1.default();
    var renderer = new ipc_renderer_1.default();
    pipe(main, renderer);
    var mock = {
        ipcMain: main,
        ipcRenderer: renderer,
    };
    return mock;
};
exports.default = createIPCMock;
