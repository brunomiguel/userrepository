"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var event_1 = __importDefault(require("./event"));
var events_1 = require("events");
var utils_1 = require("./utils");
var ipcRenderer = (function () {
    function ipcRenderer() {
        this.emitter = new events_1.EventEmitter();
        this.errorEmitter = new events_1.EventEmitter();
        this.emitter.on('receive-from-main', this._onReceiveFromMain.bind(this));
        this.emitter.on('error-from-main', this._onErrorFromMain.bind(this));
        this._event = new event_1.default(this.emitter, 'send-to-main');
    }
    ipcRenderer.prototype._onReceiveFromMain = function (channel) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.emitter).emit.apply(_a, __spread([channel, this._event], args));
    };
    ipcRenderer.prototype._onErrorFromMain = function (channel, err) {
        this.errorEmitter.emit(channel, this._event, err);
    };
    ipcRenderer.prototype.on = function (channel, listener) {
        this.emitter.on(channel, listener);
    };
    ipcRenderer.prototype.once = function (channel, listener) {
        this.emitter.once(channel, listener);
    };
    ipcRenderer.prototype.send = function (channel) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.emitter).emit.apply(_a, __spread(['send-to-main', channel], args));
    };
    ipcRenderer.prototype.removeListener = function (channel, listener) {
        this.emitter.removeListener(channel, listener);
    };
    ipcRenderer.prototype.removeAllListeners = function (channel) {
        this.emitter.removeAllListeners(channel);
    };
    ipcRenderer.prototype.invoke = function (channel) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var safeChannel = utils_1.internalPrefix(channel);
        return new Promise(function (resolve, reject) {
            var _a;
            var resolveFn = function (_ev) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                _this.errorEmitter.removeListener(safeChannel, rejectFn);
                resolve.apply(void 0, __spread(args));
            };
            var rejectFn = function (_ev, err) {
                _this.emitter.removeListener(safeChannel, resolveFn);
                reject(err);
            };
            _this.emitter.once(safeChannel, resolveFn);
            _this.errorEmitter.once(safeChannel, rejectFn);
            (_a = _this.emitter).emit.apply(_a, __spread(['send-to-main', safeChannel], args));
        });
    };
    ipcRenderer.prototype.sendSync = function (_channel) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        console.log(args);
    };
    ipcRenderer.prototype.sendTo = function (_webContentsId, _channel) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        console.log(args);
    };
    ipcRenderer.prototype.sendToHost = function (_channel) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        console.log(args);
    };
    ipcRenderer.prototype.postMessage = function (_channel, message, _transfer) {
        console.log(message);
    };
    ipcRenderer.prototype.addListener = function (_event, _listener) { };
    ipcRenderer.prototype.off = function (_event, _listener) { };
    ipcRenderer.prototype.setMaxListeners = function (_n) { };
    ipcRenderer.prototype.getMaxListeners = function () {
        return 1;
    };
    ipcRenderer.prototype.listeners = function (_event) {
        var undef = function () {
            console.log('undefined');
        };
        return [undef];
    };
    ipcRenderer.prototype.rawListeners = function (_event) {
        var undef = function () {
            console.log('undefined');
        };
        return [undef];
    };
    ipcRenderer.prototype.emit = function (_event) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return true;
    };
    ipcRenderer.prototype.listenerCount = function (_type) {
        return 1;
    };
    ipcRenderer.prototype.prependListener = function (_event, _listener) { };
    ipcRenderer.prototype.prependOnceListener = function (_event, _listener) { };
    ipcRenderer.prototype.eventNames = function () {
        return this.emitter.eventNames();
    };
    return ipcRenderer;
}());
exports.default = ipcRenderer;
