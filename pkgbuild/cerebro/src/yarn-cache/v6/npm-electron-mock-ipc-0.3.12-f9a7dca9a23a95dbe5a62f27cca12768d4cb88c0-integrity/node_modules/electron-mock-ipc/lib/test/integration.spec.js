"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __importDefault(require("@/index"));
var helper_1 = require("./helper");
describe('send event from renderer to main', function () {
    var ipcMain;
    var ipcRenderer;
    beforeEach(function () {
        var mocked = index_1.default();
        ipcMain = mocked.ipcMain;
        ipcRenderer = mocked.ipcRenderer;
    });
    describe('send and once', function () {
        it('should be received in main', function () {
            var testMessage = 'test';
            ipcMain.once('test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcRenderer.send('test-event', testMessage);
        });
        it('should be resent and received', function () {
            var testMessage = 'test';
            ipcRenderer.once('response-test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcMain.once('test-event', function (ev, obj) {
                ev.sender.send('response-test-event', obj);
            });
            ipcRenderer.send('test-event', testMessage);
        });
    });
    describe('send and on', function () {
        afterEach(function () {
            ipcMain.removeAllListeners('test-event');
            ipcRenderer.removeAllListeners('response-test-event');
        });
        it('should be received in main', function () {
            var testMessage = 'test';
            ipcMain.on('test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcRenderer.send('test-event', testMessage);
        });
        it('should be resent and received', function () {
            var testMessage = 'test';
            ipcRenderer.on('response-test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcMain.on('test-event', function (ev, obj) {
                ev.sender.send('response-test-event', obj);
            });
            ipcRenderer.send('test-event', testMessage);
        });
    });
    describe('invoke', function () {
        afterEach(function () {
            ipcMain.removeHandler('test-event');
        });
        it('should handle events', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handle('test-event', function (_event, args) { return __awaiter(void 0, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, helper_1.sleepMethod(args)];
                                    case 1:
                                        result = _a.sent();
                                        return [2, result];
                                }
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event', 'hoge')];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual('hoge');
                        return [2];
                }
            });
        }); });
        it('should handle error events', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handle('test-event', function (_event, _args) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                throw new Error();
                            });
                        }); });
                        return [4, expect(ipcRenderer.invoke('test-event', 'hoge')).rejects.toThrow(Error)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        it('should handle once an event', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handleOnce('test-event', function (_event, args) { return __awaiter(void 0, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, helper_1.sleepMethod(args)];
                                    case 1:
                                        result = _a.sent();
                                        return [2, result];
                                }
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event', 'hoge')];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual('hoge');
                        return [2];
                }
            });
        }); });
        it('should handle once an error event', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handleOnce('test-event', function (_event, _args) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                throw new Error();
                            });
                        }); });
                        return [4, expect(ipcRenderer.invoke('test-event', 'hoge')).rejects.toThrow(Error)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        it('removes event listeners it doesnt need', function () { return __awaiter(void 0, void 0, void 0, function () {
            var i, event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handle('test-event', function () { });
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < 20)) return [3, 4];
                        return [4, ipcRenderer.invoke('test-event')];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        ++i;
                        return [3, 1];
                    case 4:
                        event = ipcRenderer.errorEmitter.eventNames().find(function (n) { return typeof n === 'string' && n.match(/test-event/); });
                        expect(ipcRenderer.errorEmitter.listenerCount(event)).toBe(0);
                        return [2];
                }
            });
        }); });
    });
});
describe('send event from main to renderer', function () {
    var ipcMain;
    var ipcRenderer;
    beforeEach(function () {
        var mocked = index_1.default();
        ipcMain = mocked.ipcMain;
        ipcRenderer = mocked.ipcRenderer;
    });
    describe('send and once', function () {
        it('should be received in renderer', function () {
            var testMessage = 'test';
            ipcRenderer.once('test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcMain.send('test-event', testMessage);
        });
        it('should be resent and received', function () {
            var testMessage = 'test';
            ipcMain.once('response-test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcRenderer.once('test-event', function (ev, obj) {
                ev.sender.send('response-test-event', obj);
            });
            ipcMain.send('test-event', testMessage);
        });
    });
    describe('send and on', function () {
        afterEach(function () {
            ipcMain.removeAllListeners('response-test-event');
            ipcRenderer.removeAllListeners('test-event');
        });
        it('should be received in renderer', function () {
            var testMessage = 'test';
            ipcRenderer.on('test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcMain.send('test-event', testMessage);
        });
        it('should be resent and received', function () {
            var testMessage = 'test';
            ipcMain.on('response-test-event', function (_ev, obj) {
                expect(obj).toEqual(testMessage);
            });
            ipcRenderer.on('test-event', function (ev, obj) {
                ev.sender.send('response-test-event', obj);
            });
            ipcMain.send('test-event', testMessage);
        });
    });
});
describe('registered event handlers are returned from #eventNames', function () {
    var ipcMain;
    var ipcRenderer;
    beforeEach(function () {
        var mocked = index_1.default();
        ipcMain = mocked.ipcMain;
        ipcRenderer = mocked.ipcRenderer;
    });
    it('ipcMain should return the events that were registered', function () {
        ipcMain.on('test-event', function () { return null; });
        expect(ipcMain.eventNames()).toEqual(expect.arrayContaining(['test-event']));
    });
    it('ipcRenderer should return the events that were registered', function () {
        ipcRenderer.on('test-event', function () { return null; });
        expect(ipcRenderer.eventNames()).toEqual(expect.arrayContaining(['test-event']));
    });
});
describe('invoke from renderer does not emit in renderer', function () {
    var ipcMain;
    var ipcRenderer;
    beforeEach(function () {
        var mocked = index_1.default();
        ipcMain = mocked.ipcMain;
        ipcRenderer = mocked.ipcRenderer;
    });
    it('does not repeat when using invoke/handle', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mainFn, rendererFn, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mainFn = jest.fn(function () { return 'hello'; });
                    rendererFn = jest.fn();
                    ipcMain.handle('my-event', mainFn);
                    ipcRenderer.on('my-event', rendererFn);
                    return [4, ipcRenderer.invoke('my-event')];
                case 1:
                    result = _a.sent();
                    expect(result).toBe('hello');
                    expect(mainFn).toBeCalled();
                    expect(rendererFn).not.toBeCalled();
                    return [2];
            }
        });
    }); });
    it('does not repeat when using send/on', function (done) {
        var mainFn = jest.fn(function () { return 'hello'; });
        var rendererFn = jest.fn();
        ipcMain.on('my-event', mainFn);
        ipcRenderer.on('my-event', rendererFn);
        ipcRenderer.send('my-event');
        setTimeout(function () {
            expect(mainFn).toBeCalled();
            expect(rendererFn).not.toBeCalled();
            done();
        });
    });
});
describe('remove old listener', function () {
    var ipcMain;
    var ipcRenderer;
    beforeEach(function () {
        var mocked = index_1.default();
        ipcMain = mocked.ipcMain;
        ipcRenderer = mocked.ipcRenderer;
    });
    describe('ipcMain', function () {
        it('handle', function () { return __awaiter(void 0, void 0, void 0, function () {
            var first, second;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handle('test-event', function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, true];
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event')];
                    case 1:
                        first = _a.sent();
                        expect(first).toBeTruthy();
                        ipcMain.removeHandler('test-event');
                        ipcMain.handle('test-event', function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, false];
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event')];
                    case 2:
                        second = _a.sent();
                        expect(second).toBeFalsy();
                        return [2];
                }
            });
        }); });
        it('handleOnce', function () { return __awaiter(void 0, void 0, void 0, function () {
            var first, second;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipcMain.handleOnce('test-event', function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, true];
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event')];
                    case 1:
                        first = _a.sent();
                        expect(first).toBeTruthy();
                        ipcMain.removeHandler('test-event');
                        ipcMain.handleOnce('test-event', function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2, false];
                            });
                        }); });
                        return [4, ipcRenderer.invoke('test-event')];
                    case 2:
                        second = _a.sent();
                        expect(second).toBeFalsy();
                        return [2];
                }
            });
        }); });
    });
});
