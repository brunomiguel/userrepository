{
  "manifest": {
    "name": "electron-mock-ipc",
    "version": "0.3.12",
    "description": "Mock Electron's ipcMain and ipcRenderer",
    "main": "lib/src/index.js",
    "typings": "./lib/src/index.d.ts",
    "scripts": {
      "build": "tsc -p ./",
      "lint": "eslint --ext .js,.ts src test",
      "test": "NODE_ENV=test jest -u --maxWorkers=3"
    },
    "files": [
      "lib"
    ],
    "repository": {
      "type": "git",
      "url": "git@github.com:h3poteto/electron-mock-ipc.git"
    },
    "keywords": [
      "electron",
      "ipc",
      "ipcMain",
      "ipcRenderer"
    ],
    "author": {
      "name": "h3poteto"
    },
    "license": "MIT",
    "jest": {
      "moduleFileExtensions": [
        "ts",
        "js"
      ],
      "moduleNameMapper": {
        "^@/(.+)": "<rootDir>/src/$1",
        "^~/(.+)": "<rootDir>/$1"
      },
      "testMatch": [
        "**/test/**/*.spec.ts"
      ],
      "preset": "ts-jest/presets/default",
      "transform": {
        "^.+\\.(ts|tsx)$": "ts-jest"
      },
      "globals": {
        "ts-jest": {
          "tsConfig": "tsconfig.json"
        }
      }
    },
    "peerDependencies": {
      "electron": ">=6.0.0"
    },
    "devDependencies": {
      "@types/core-js": "^2.5.2",
      "@types/jest": "^27.4.0",
      "@types/node": "^17.0.8",
      "@typescript-eslint/eslint-plugin": "^1.11.0",
      "@typescript-eslint/parser": "^1.11.0",
      "eslint": "^5.16.0",
      "eslint-config-prettier": "^6.7.0",
      "eslint-config-standard": "^12.0.0",
      "eslint-plugin-import": "^2.17.3",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-prettier": "^3.1.0",
      "eslint-plugin-promise": "^4.1.1",
      "eslint-plugin-standard": "^5.0.0",
      "jest": "^27.0.6",
      "prettier": "^2.0.2",
      "ts-jest": "^27.0.3",
      "typescript": "^3.5.2",
      "electron": "^16.0.7"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-mock-ipc-0.3.12-f9a7dca9a23a95dbe5a62f27cca12768d4cb88c0-integrity/node_modules/electron-mock-ipc/package.json",
    "readmeFilename": "README.md",
    "readme": "# ElectronMockIPC\n[![Test](https://github.com/h3poteto/electron-mock-ipc/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/h3poteto/electron-mock-ipc/actions/workflows/test.yml)\n[![npm](https://img.shields.io/npm/v/electron-mock-ipc.svg)](https://www.npmjs.com/package/electron-mock-ipc)\n[![GitHub release](https://img.shields.io/github/release/h3poteto/electron-mock-ipc.svg)](https://github.com/h3poteto/electron-mock-ipc/releases)\n[![npm](https://img.shields.io/npm/dm/electron-mock-ipc)](https://www.npmjs.com/package/electron-mock-ipc)\n[![NPM](https://img.shields.io/npm/l/electron-mock-ipc)](/LICENSE.txt)\n\nThis is a mock library for ipcMain and ipcRenderer in Electron. They communicate with each other, so you can mock ipc methods in your tests without changing your production code.\n\n\n## Install\n\n```\n$ npm install --save-dev electron-mock-ipc\n```\n\nor\n\n```\n$ yarn add --dev electron-mock-ipc\n```\n\n## Usage\nThis library can use in jest, and mocha.\n\nAt first, please create a file to mock:\n\n```typescript\nimport createIPCMock from 'electron-mock-ipc'\n\nconst mocked = createIPCMock()\nconst ipcMain = mocked.ipcMain\nconst ipcRenderer = mocked.ipcRenderer\nexport { ipcMain, ipcRenderer }\n```\nand save it as `spec/mock/electron-mock.ts`.\n\n\n### Jest\nIn Jest, please replace electron object using `moduleNameMapper`. Please override it in `package.json`.\n\n```json\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"^electron$\": \"<rootDir>/spec/mock/electron-mock.ts\"\n    }\n  }\n```\n\nAfter that, all ipc objects are mocked, so you can write tests as below.\n\n```typescript\nimport { IpcMainEvent } from 'electron'\nimport { ipcMain } from '~/spec/mock/electron-mock'\nimport { targetMethod } from '~/src/target'\n\ndescribe('your test', () => {\n  it('should be received', async () => {\n    ipcMain.once('test-event', (event: IpcMainEvent, obj: string) => {\n      event.sender.send('response-test-event', 'response' + obj)\n    })\n    const res = await targetMethod()\n    expect(res).toEqual('responsehoge')\n  })\n})\n```\n\n### Mocha\nIn Mocha, you can not inject a mock object easily. So, please inject the ipcRenderer object in `preload.js`, and use `preload.js` to load electron.\n\n```javascript\nimport { ipcRenderer } from 'electron'\nimport { ipcRenderer as mock } from '~/spec/mock/electron-mock'\n\nif (process.env.NODE_ENV === 'test') {\n  global.ipcRenderer = mock\n} else {\n  global.ipcRenderer = ipcRenderer\n}\n```\n\n`preload.js` is used to disable nodeIntegration, please refer [here](https://stackoverflow.com/questions/52236641/electron-ipc-and-nodeintegration).\n\n\nAnd write test.\n\n```typescript\nimport { IpcMainEvent } from 'electron'\nimport { targetMethod } from '~/src/target'\nimport { ipcMain } from '~/spec/mock/electron'\nimport { describe, it } from 'mocha'\nimport { expect } from 'chai'\n\ndescribe('your test', () => {\n  it('should be received', async () => {\n    ipcMain.once('test-event', (event: IpcMainEvent, obj: string) => {\n      event.sender.send('response-test-event', 'response' + obj)\n    })\n    const res = await targetMethod()\n    expect(res).to.equal('responsehoge')\n  })\n})\n```\n\n## Example\nI prepared a test example, please refer [here](example).\n\n## License\n\nThe software is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Akira Fukushima\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-mock-ipc/-/electron-mock-ipc-0.3.12.tgz#f9a7dca9a23a95dbe5a62f27cca12768d4cb88c0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-mock-ipc/-/electron-mock-ipc-0.3.12.tgz",
    "hash": "f9a7dca9a23a95dbe5a62f27cca12768d4cb88c0",
    "integrity": "sha512-/uwZRpbX+k4E+GesmREg6XcQiTLNhi35M/cw8Czr+ij9k+EYTYY3UPkILnsTr5KTEeAx5/uypf/KwjZDQFDyjA==",
    "registry": "npm",
    "packageName": "electron-mock-ipc",
    "cacheIntegrity": "sha512-/uwZRpbX+k4E+GesmREg6XcQiTLNhi35M/cw8Czr+ij9k+EYTYY3UPkILnsTr5KTEeAx5/uypf/KwjZDQFDyjA== sha1-+afcqaI6ldvlpi8nzKEnaNTLiMA="
  },
  "registry": "npm",
  "hash": "f9a7dca9a23a95dbe5a62f27cca12768d4cb88c0"
}