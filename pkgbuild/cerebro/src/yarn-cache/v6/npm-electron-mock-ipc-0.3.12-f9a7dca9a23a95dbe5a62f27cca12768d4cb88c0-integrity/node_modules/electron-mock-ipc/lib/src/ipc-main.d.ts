/// <reference types="node" />
import { EventEmitter } from 'events';
import { IpcMain, IpcMainEvent, IpcMainInvokeEvent } from 'electron';
declare class ipcMain implements IpcMain {
    emitter: EventEmitter;
    private _event;
    constructor();
    _onReceiveFromRenderer(channel: string, ...args: any): void;
    on(channel: string, listener: (event: IpcMainEvent, ...args: any[]) => void): any;
    once(channel: string, listener: (event: IpcMainEvent, ...args: any[]) => void): any;
    send(channel: string, ...args: any): void;
    removeListener(channel: string, listener: (...args: any[]) => void): any;
    removeAllListeners(channel: string): any;
    handle(channel: string, listener: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<void> | any): void;
    handleOnce(channel: string, listener: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<void> | any): void;
    removeHandler(channel: string): void;
    addListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    off(_event: string | symbol, _listener: (...args: any[]) => void): any;
    setMaxListeners(_n: number): any;
    getMaxListeners(): number;
    listeners(_event: string | symbol): Function[];
    rawListeners(_event: string | symbol): Function[];
    emit(_event: string | symbol, ..._args: any[]): boolean;
    listenerCount(_type: string | symbol): number;
    prependListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    prependOnceListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    eventNames(): Array<string | symbol>;
}
export default ipcMain;
