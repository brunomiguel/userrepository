/// <reference types="node" />
import { EventEmitter } from 'events';
import { IpcRenderer, IpcRendererEvent } from 'electron';
declare class ipcRenderer implements IpcRenderer {
    emitter: EventEmitter;
    errorEmitter: EventEmitter;
    private _event;
    constructor();
    _onReceiveFromMain(channel: string, ...args: any): void;
    _onErrorFromMain(channel: string, err: any): void;
    on(channel: string, listener: (ev: IpcRendererEvent, ...args: any[]) => void): any;
    once(channel: string, listener: (ev: IpcRendererEvent, ...args: any) => void): any;
    send(channel: string, ...args: any[]): void;
    removeListener(channel: string, listener: (...args: any[]) => void): any;
    removeAllListeners(channel: string): any;
    invoke(channel: string, ...args: any[]): Promise<any>;
    sendSync(_channel: string, ...args: any[]): any;
    sendTo(_webContentsId: number, _channel: string, ...args: any[]): void;
    sendToHost(_channel: string, ...args: any[]): void;
    postMessage(_channel: string, message: any, _transfer?: MessagePort[]): void;
    addListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    off(_event: string | symbol, _listener: (...args: any[]) => void): any;
    setMaxListeners(_n: number): any;
    getMaxListeners(): number;
    listeners(_event: string | symbol): Function[];
    rawListeners(_event: string | symbol): Function[];
    emit(_event: string | symbol, ..._args: any[]): boolean;
    listenerCount(_type: string | symbol): number;
    prependListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    prependOnceListener(_event: string | symbol, _listener: (...args: any[]) => void): any;
    eventNames(): Array<string | symbol>;
}
export default ipcRenderer;
