"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var event_1 = __importDefault(require("./event"));
var events_1 = require("events");
var utils_1 = require("./utils");
var ipcMain = (function () {
    function ipcMain() {
        this.emitter = new events_1.EventEmitter();
        this.emitter.on('receive-from-renderer', this._onReceiveFromRenderer.bind(this));
        this._event = new event_1.default(this.emitter, 'send-to-renderer');
    }
    ipcMain.prototype._onReceiveFromRenderer = function (channel) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.emitter).emit.apply(_a, __spread([channel, this._event], args));
    };
    ipcMain.prototype.on = function (channel, listener) {
        this.emitter.on(channel, listener);
    };
    ipcMain.prototype.once = function (channel, listener) {
        this.emitter.once(channel, listener);
    };
    ipcMain.prototype.send = function (channel) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.emitter).emit.apply(_a, __spread(['send-to-renderer', channel], args));
    };
    ipcMain.prototype.removeListener = function (channel, listener) {
        this.emitter.removeListener(channel, listener);
    };
    ipcMain.prototype.removeAllListeners = function (channel) {
        this.emitter.removeAllListeners(channel);
    };
    ipcMain.prototype.handle = function (channel, listener) {
        var _this = this;
        var safeChannel = utils_1.internalPrefix(channel);
        this.emitter.on(safeChannel, function (event) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var res, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, listener.apply(void 0, __spread([event], args))];
                        case 1:
                            res = _a.sent();
                            this.emitter.emit('send-to-renderer', safeChannel, res);
                            return [3, 3];
                        case 2:
                            err_1 = _a.sent();
                            this.emitter.emit('error-to-renderer', safeChannel, err_1);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        });
    };
    ipcMain.prototype.handleOnce = function (channel, listener) {
        var _this = this;
        var safeChannel = utils_1.internalPrefix(channel);
        this.emitter.once(safeChannel, function (event) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var res, err_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, listener.apply(void 0, __spread([event], args))];
                        case 1:
                            res = _a.sent();
                            this.emitter.emit('send-to-renderer', safeChannel, res);
                            return [3, 3];
                        case 2:
                            err_2 = _a.sent();
                            this.emitter.emit('error-to-renderer', safeChannel, err_2);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        });
    };
    ipcMain.prototype.removeHandler = function (channel) {
        var safeChannel = utils_1.internalPrefix(channel);
        this.emitter.removeAllListeners(safeChannel);
    };
    ipcMain.prototype.addListener = function (_event, _listener) { };
    ipcMain.prototype.off = function (_event, _listener) { };
    ipcMain.prototype.setMaxListeners = function (_n) { };
    ipcMain.prototype.getMaxListeners = function () {
        return 1;
    };
    ipcMain.prototype.listeners = function (_event) {
        var undef = function () {
            console.log('undefined');
        };
        return [undef];
    };
    ipcMain.prototype.rawListeners = function (_event) {
        var undef = function () {
            console.log('undefined');
        };
        return [undef];
    };
    ipcMain.prototype.emit = function (_event) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
        return true;
    };
    ipcMain.prototype.listenerCount = function (_type) {
        return 1;
    };
    ipcMain.prototype.prependListener = function (_event, _listener) { };
    ipcMain.prototype.prependOnceListener = function (_event, _listener) { };
    ipcMain.prototype.eventNames = function () {
        return this.emitter.eventNames();
    };
    return ipcMain;
}());
exports.default = ipcMain;
