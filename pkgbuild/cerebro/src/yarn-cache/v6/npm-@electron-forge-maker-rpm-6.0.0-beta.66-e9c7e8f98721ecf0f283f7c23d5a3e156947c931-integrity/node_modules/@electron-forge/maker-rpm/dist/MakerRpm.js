"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MakerRpmConfig", {
    enumerable: true,
    get: function() {
        return _config.MakerRpmConfig;
    }
});
exports.rpmArch = rpmArch;
exports.default = void 0;
var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));
var _path = _interopRequireDefault(require("path"));
var _config = require("./Config");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function rpmArch(nodeArch) {
    switch(nodeArch){
        case 'ia32':
            return 'i386';
        case 'x64':
            return 'x86_64';
        case 'armv7l':
            return 'armv7hl';
        case 'arm':
            return 'armv6hl';
        default:
            return nodeArch;
    }
}
class MakerRpm extends _makerBase.default {
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-installer-redhat');
    }
    async make({ dir , makeDir , targetArch  }) {
        // eslint-disable-next-line global-require, import/no-unresolved, node/no-missing-require
        const installer = require('electron-installer-redhat');
        const outDir = _path.default.resolve(makeDir, 'rpm', targetArch);
        await this.ensureDirectory(outDir);
        const { packagePaths  } = await installer({
            ...this.config,
            arch: rpmArch(targetArch),
            src: dir,
            dest: outDir,
            rename: undefined
        });
        return packagePaths;
    }
    constructor(...args){
        super(...args);
        this.name = 'rpm';
        this.defaultPlatforms = [
            'linux'
        ];
        this.requiredExternalBinaries = [
            'rpmbuild'
        ];
    }
}
exports.default = MakerRpm;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclJwbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlQXJjaCwgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1ha2VyUnBtQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gcnBtQXJjaChub2RlQXJjaDogRm9yZ2VBcmNoKTogc3RyaW5nIHtcbiAgc3dpdGNoIChub2RlQXJjaCkge1xuICAgIGNhc2UgJ2lhMzInOlxuICAgICAgcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOlxuICAgICAgcmV0dXJuICd4ODZfNjQnO1xuICAgIGNhc2UgJ2FybXY3bCc6XG4gICAgICByZXR1cm4gJ2FybXY3aGwnO1xuICAgIGNhc2UgJ2FybSc6XG4gICAgICByZXR1cm4gJ2FybXY2aGwnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbm9kZUFyY2g7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJScG0gZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJScG1Db25maWc+IHtcbiAgbmFtZSA9ICdycG0nO1xuXG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnbGludXgnXTtcblxuICByZXF1aXJlZEV4dGVybmFsQmluYXJpZXM6IHN0cmluZ1tdID0gWydycG1idWlsZCddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbnN0YWxsZWQoJ2VsZWN0cm9uLWluc3RhbGxlci1yZWRoYXQnKTtcbiAgfVxuXG4gIGFzeW5jIG1ha2UoeyBkaXIsIG1ha2VEaXIsIHRhcmdldEFyY2ggfTogTWFrZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZSwgaW1wb3J0L25vLXVucmVzb2x2ZWQsIG5vZGUvbm8tbWlzc2luZy1yZXF1aXJlXG4gICAgY29uc3QgaW5zdGFsbGVyID0gcmVxdWlyZSgnZWxlY3Ryb24taW5zdGFsbGVyLXJlZGhhdCcpO1xuXG4gICAgY29uc3Qgb3V0RGlyID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsICdycG0nLCB0YXJnZXRBcmNoKTtcblxuICAgIGF3YWl0IHRoaXMuZW5zdXJlRGlyZWN0b3J5KG91dERpcik7XG4gICAgY29uc3QgeyBwYWNrYWdlUGF0aHMgfSA9IGF3YWl0IGluc3RhbGxlcih7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFyY2g6IHJwbUFyY2godGFyZ2V0QXJjaCksXG4gICAgICBzcmM6IGRpcixcbiAgICAgIGRlc3Q6IG91dERpcixcbiAgICAgIHJlbmFtZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIHJldHVybiBwYWNrYWdlUGF0aHM7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWFrZXJScG1Db25maWcgfTtcbiJdLCJuYW1lcyI6WyJNYWtlclJwbUNvbmZpZyIsInJwbUFyY2giLCJub2RlQXJjaCIsIk1ha2VyUnBtIiwiTWFrZXJCYXNlIiwiaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSIsImlzSW5zdGFsbGVkIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsIm91dERpciIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRGlyZWN0b3J5IiwicGFja2FnZVBhdGhzIiwiY29uZmlnIiwiYXJjaCIsInNyYyIsImRlc3QiLCJyZW5hbWUiLCJ1bmRlZmluZWQiLCJuYW1lIiwiZGVmYXVsdFBsYXRmb3JtcyIsInJlcXVpcmVkRXh0ZXJuYWxCaW5hcmllcyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFrRFNBLENBQWM7OztlQUFkQSxPQUFjOzs7UUE1Q1BDLE9BQU8sR0FBUEEsT0FBTzs7QUFOaUIsR0FBNEIsQ0FBNUIsVUFBNEI7QUFFbkQsR0FBTSxDQUFOLEtBQU07QUFFUSxHQUFVLENBQVYsT0FBVTs7Ozs7O1NBRXpCQSxPQUFPLENBQUNDLFFBQW1CLEVBQVUsQ0FBQztJQUNwRCxNQUFNLENBQUVBLFFBQVE7UUFDZCxJQUFJLENBQUMsQ0FBTTtZQUNULE1BQU0sQ0FBQyxDQUFNO1FBQ2YsSUFBSSxDQUFDLENBQUs7WUFDUixNQUFNLENBQUMsQ0FBUTtRQUNqQixJQUFJLENBQUMsQ0FBUTtZQUNYLE1BQU0sQ0FBQyxDQUFTO1FBQ2xCLElBQUksQ0FBQyxDQUFLO1lBQ1IsTUFBTSxDQUFDLENBQVM7O1lBRWhCLE1BQU0sQ0FBQ0EsUUFBUTs7QUFFckIsQ0FBQztNQUVvQkMsUUFBUSxTQUFTQyxVQUFTO0lBTzdDQyw0QkFBNEIsR0FBWSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUEyQjtJQUNyRCxDQUFDO1VBRUtDLElBQUksQ0FBQyxDQUFDLENBQUNDLEdBQUcsR0FBRUMsT0FBTyxHQUFFQyxVQUFVLEVBQWUsQ0FBQyxFQUFxQixDQUFDO1FBQ3pFLEVBQXlGLEFBQXpGLHVGQUF5RjtRQUN6RixLQUFLLENBQUNDLFNBQVMsR0FBR0MsT0FBTyxDQUFDLENBQTJCO1FBRXJELEtBQUssQ0FBQ0MsTUFBTSxHQUFHQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ04sT0FBTyxFQUFFLENBQUssTUFBRUMsVUFBVTtRQUV0RCxLQUFLLENBQUMsSUFBSSxDQUFDTSxlQUFlLENBQUNILE1BQU07UUFDakMsS0FBSyxDQUFDLENBQUMsQ0FBQ0ksWUFBWSxFQUFDLENBQUMsR0FBRyxLQUFLLENBQUNOLFNBQVMsQ0FBQyxDQUFDO2VBQ3JDLElBQUksQ0FBQ08sTUFBTTtZQUNkQyxJQUFJLEVBQUVsQixPQUFPLENBQUNTLFVBQVU7WUFDeEJVLEdBQUcsRUFBRVosR0FBRztZQUNSYSxJQUFJLEVBQUVSLE1BQU07WUFDWlMsTUFBTSxFQUFFQyxTQUFTO1FBQ25CLENBQUM7UUFDRCxNQUFNLENBQUNOLFlBQVk7SUFDckIsQ0FBQzs7O1FBMUJZLElBMkJkLENBMUJDTyxJQUFJLEdBQUcsQ0FBSztRQURDLElBMkJkLENBeEJDQyxnQkFBZ0IsR0FBb0IsQ0FBQztZQUFBLENBQU87UUFBQSxDQUFDO1FBSGhDLElBMkJkLENBdEJDQyx3QkFBd0IsR0FBYSxDQUFDO1lBQUEsQ0FBVTtRQUFBLENBQUM7OztrQkFMOUJ2QixRQUFRIn0=