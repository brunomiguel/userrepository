{
  "manifest": {
    "name": "convert-svg-to-png",
    "version": "0.5.0",
    "description": "Converts SVG to PNG using headless Chromium",
    "homepage": "https://github.com/neocotic/convert-svg",
    "bugs": {
      "url": "https://github.com/neocotic/convert-svg/issues"
    },
    "author": {
      "name": "Alasdair Mercer",
      "email": "mercer.alasdair@gmail.com",
      "url": "https://neocotic.com"
    },
    "license": "MIT",
    "keywords": [
      "convert",
      "converter",
      "svg",
      "png",
      "headless",
      "chromium"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/neocotic/convert-svg.git"
    },
    "dependencies": {
      "convert-svg-core": "^0.5.0"
    },
    "devDependencies": {
      "convert-svg-test-helper": "^0.5.0",
      "mocha": "^5.2.0"
    },
    "bin": {
      "convert-svg-to-png": "bin/convert-svg-to-png"
    },
    "main": "src/index.js",
    "engines": {
      "node": ">=8"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-convert-svg-to-png-0.5.0-integrity/node_modules/convert-svg-to-png/package.json",
    "readmeFilename": "README.md",
    "readme": "# convert-svg-to-png\n\nA [Node.js](https://nodejs.org) package for converting SVG to PNG using headless Chromium.\n\n[![Build Status](https://img.shields.io/travis/neocotic/convert-svg/develop.svg?style=flat-square)](https://travis-ci.org/neocotic/convert-svg)\n[![License](https://img.shields.io/github/license/neocotic/convert-svg.svg?style=flat-square)](https://github.com/neocotic/convert-svg/blob/master/LICENSE.md)\n[![Release](https://img.shields.io/github/release/neocotic/convert-svg.svg?style=flat-square)](https://github.com/neocotic/convert-svg/tree/master/packages/convert-svg-to-png)\n\n* [Install](#install)\n* [CLI](#cli)\n* [API](#api)\n* [Other Formats](#other-formats)\n* [Bugs](#bugs)\n* [Contributors](#contributors)\n* [License](#license)\n\n## Install\n\nInstall using [npm](https://www.npmjs.com):\n\n``` bash\n$ npm install --save convert-svg-to-png\n```\n\nYou'll need to have at least [Node.js](https://nodejs.org) 8 or newer.\n\nIf you want to use the command line interface you'll most likely want to install it globally so that you can run\n`convert-svg-to-png` from anywhere:\n\n``` bash\n$ npm install --global convert-svg-to-png\n```\n\n## CLI\n\n    Usage: convert-svg-to-png [options] [files...]\n\n\n      Options:\n\n        -V, --version          output the version number\n        --no-color             disables color output\n        --background <color>   specify background color for transparent regions in SVG\n        --base-url <url>       specify base URL to use for all relative URLs in SVG\n        --filename <filename>  specify filename for the PNG output when processing STDIN\n        --height <value>       specify height for PNG\n        --puppeteer <json>     specify a json object for puppeteer.launch options\n        --scale <value>        specify scale to apply to dimensions [1]\n        --width <value>        specify width for PNG\n        -h, --help             output usage information\n\nThe CLI can be used in the following ways:\n\n* Pass SVG files to be converted to PNG files as command arguments\n  * A [glob](https://www.npmjs.com/package/glob) pattern can be passed\n  * Each converted SVG file will result in a corresponding PNG with the same base file name (e.g.\n    `image.svg -> image.png`)\n* Pipe SVG buffer to be converted to PNG to command via STDIN\n  * If the `--filename` option is passed, the PNG will be written to a file resolved using its value\n  * Otherwise, the PNG will be streamed to STDOUT\n\n## API\n\n### `convert(input[, options])`\n\nConverts the specified `input` SVG into a PNG using the `options` provided via a headless Chromium instance.\n\n`input` can either be a SVG buffer or string.\n\nIf the width and/or height cannot be derived from `input` then they must be provided via their corresponding options.\nThis method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its calculated\n`viewBox` attribute.\n\nThis method is resolved with the PNG output buffer.\n\nAn error will occur if both the `baseFile` and `baseUrl` options have been provided, `input` does not contain an SVG\nelement or no `width` and/or `height` options were provided and this information could not be derived from `input`.\n\n#### Options\n\n| Option       | Type          | Default                 | Description                                                                                                                                                      |\n| ------------ | ------------- | ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `background` | String        | N/A                     | Background color to be used to fill transparent regions within the SVG. Will remain transparent if omitted.                                                      |\n| `baseFile`   | String        | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n| `baseUrl`    | String        | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n| `height`     | Number/String | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n| `puppeteer`  | Object        | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n| `scale`      | Number        | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n| `width`      | Number/String | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n\nThe `puppeteer` option is not available when calling this method on a `Converter` instance created using\n`createConverter`.\n\n#### Example\n\n``` javascript\nconst { convert } = require('convert-svg-to-png');\nconst express = require('express');\n\nconst app = express();\n\napp.post('/convert', async(req, res) => {\n  const png = await convert(req.body);\n\n  res.set('Content-Type', 'image/png');\n  res.send(png);\n});\n\napp.listen(3000);\n```\n\n### `convertFile(inputFilePath[, options])`\n\nConverts the SVG file at the specified path into a PNG using the `options` provided and writes it to the output file.\n\nThe output file is derived from `inputFilePath` unless the `outputFilePath` option is specified.\n\nIf the width and/or height cannot be derived from the input file then they must be provided via their corresponding\noptions. This method attempts to derive the dimensions from the input file via any `width`/`height` attributes or its\ncalculated `viewBox` attribute.\n\nThis method is resolved with the path of the PNG output file for reference.\n\nAn error will occur if both the `baseFile` and `baseUrl` options have been provided, the input file does not contain an\nSVG element, no `width` and/or `height` options were provided and this information could not be derived from input file,\nor a problem arises while reading the input file or writing the output file.\n\n#### Options\n\nHas the same options as the standard `convert` method but also supports the following additional options:\n\n| Option           | Type   | Default | Description                                                                                             |\n| ---------------- | ------ | ------- | ------------------------------------------------------------------------------------------------------- |\n| `outputFilePath` | String | N/A     | Path of the file to which the PNG output should be written to. Derived from input file path if omitted. |\n\n#### Example\n\n``` javascript\nconst { convertFile}  = require('convert-svg-to-png');\n\n(async() => {\n  const inputFilePath = '/path/to/my-image.svg';\n  const outputFilePath = await convertFile(inputFilePath);\n\n  console.log(outputFilePath);\n  //=> \"/path/to/my-image.png\"\n})();\n```\n\n### `createConverter([options])`\n\nCreates an instance of `Converter` using the `options` provided.\n\nIt is important to note that, after the first time either `Converter#convert` or `Converter#convertFile` are called, a\nheadless Chromium instance will remain open until `Converter#destroy` is called. This is done automatically when using\nthe `API` convert methods, however, when using `Converter` directly, it is the responsibility of the caller. Due to the\nfact that creating browser instances is expensive, this level of control allows callers to reuse a browser for multiple\nconversions. It's not recommended to keep an instance around for too long, as it will use up resources.\n\n#### Options\n\n| Option      | Type   | Default | Description                                                                                        |\n| ----------- | ------ | ------- | -------------------------------------------------------------------------------------------------- |\n| `puppeteer` | Object | N/A     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance. |\n\n#### Example\n\n``` javascript\nconst { createConverter } = require('convert-svg-to-png');\nconst fs = require('fs');\nconst util = require('util');\n\nconst readdir = util.promisify(fs.readdir);\n\nasync function convertSvgFiles(dirPath) {\n  const converter = createConverter();\n\n  try {\n    const filePaths = await readdir(dirPath);\n\n    for (const filePath of filePaths) {\n      await converter.convertFile(filePath);\n    }\n  } finally {\n    await converter.destroy();\n  }\n}\n```\n\n## Other Formats\n\nIf you would like to convert a SVG into a format other than PNG, check out our other converter packages below:\n\nhttps://github.com/neocotic/convert-svg\n\n## Bugs\n\nIf you have any problems with this package or would like to see changes currently in development you can do so\n[here](https://github.com/neocotic/convert-svg/issues).\n\n## Contributors\n\nIf you want to contribute, you're a legend! Information on how you can do so can be found in\n[CONTRIBUTING.md](https://github.com/neocotic/convert-svg/blob/master/CONTRIBUTING.md). We want your suggestions and\npull requests!\n\nA list of all contributors can be found in [AUTHORS.md](https://github.com/neocotic/convert-svg/blob/master/AUTHORS.md).\n\n## License\n\nCopyright © 2018 Alasdair Mercer\n\nSee [LICENSE.md](https://github.com/neocotic/convert-svg/raw/master/LICENSE.md) for more information on our MIT license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/convert-svg-to-png/-/convert-svg-to-png-0.5.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/convert-svg-to-png/-/convert-svg-to-png-0.5.0.tgz",
    "hash": "",
    "integrity": "sha512-Pzg2IEirPdN/VXovG9NY8H5Ww3PUEohMcyu9a11E0G0/oVcbPLWQYE3/S6mxpjidqzYr1i5iKLTKCiU9hctKFQ==",
    "registry": "npm",
    "packageName": "convert-svg-to-png",
    "cacheIntegrity": "sha512-Pzg2IEirPdN/VXovG9NY8H5Ww3PUEohMcyu9a11E0G0/oVcbPLWQYE3/S6mxpjidqzYr1i5iKLTKCiU9hctKFQ== sha1-UaYGHvPaIGvAGpanYXpNQvn+EVk="
  },
  "registry": "npm",
  "hash": "3f38362048ab3dd37f557a2f1bd358f07e56c373d412884c732bbd6b5d44d06d3fa1571b3cb590604dff4ba9b1a6389dab362bd62e6228b4ca0a253d85cb4a15"
}