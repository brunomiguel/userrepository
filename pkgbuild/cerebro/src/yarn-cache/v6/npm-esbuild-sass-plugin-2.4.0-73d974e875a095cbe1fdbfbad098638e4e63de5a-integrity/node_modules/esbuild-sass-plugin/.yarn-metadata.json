{
  "manifest": {
    "name": "esbuild-sass-plugin",
    "version": "2.4.0",
    "description": "esbuild plugin for sass/scss files supporting both css loader and css result import (lit-element)",
    "main": "lib/index.js",
    "keywords": [
      "esbuild",
      "plugin",
      "sass",
      "scss",
      "css",
      "postcss",
      "css-modules"
    ],
    "files": [
      "lib",
      "LICENSE",
      "README.MD"
    ],
    "author": {
      "name": "Gianluca Romeo",
      "email": "glromeo@gmail.com",
      "url": "https://github.com/glromeo/esbuild-sass-plugin"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/glromeo/esbuild-sass-plugin/issues"
    },
    "homepage": "https://github.com/glromeo/esbuild-sass-plugin#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/glromeo/esbuild-sass-plugin.git"
    },
    "scripts": {
      "setup": "cd test/fixture && yarn install && cd ../issues && yarn install && cd ../..",
      "build": "tsc",
      "build:watch": "tsc --watch",
      "test": "c8 mocha test/**/*.test.ts",
      "coverage": "c8 report --reporter=text-lcov | coveralls"
    },
    "mocha": {
      "require": [
        "ts-node/register"
      ]
    },
    "dependencies": {
      "esbuild": "^0.15.12",
      "resolve": "^1.22.1",
      "sass": "^1.55.0"
    },
    "devDependencies": {
      "@types/node": "^18.11.3",
      "@types/resolve": "^1.20.2",
      "@types/sass": "^1.43.1",
      "mocha-toolkit": "^1.0.7",
      "postcss": "^8.4.18",
      "postcss-modules": "^5.0.0",
      "postcss-url": "^10.1.3",
      "source-map": "^0.7.4",
      "ts-node": "^10.9.1",
      "typescript": "^4.8.4"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-esbuild-sass-plugin-2.4.0-73d974e875a095cbe1fdbfbad098638e4e63de5a-integrity/node_modules/esbuild-sass-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "![cooltext394785080075403](https://user-images.githubusercontent.com/160981/136289874-26ce7269-ea08-47dd-be31-9bf0ef7a0b8d.png)\n![image](https://user-images.githubusercontent.com/160981/150880682-4915c4dd-726b-4fea-8f3b-597d191f05bc.png)\n\n[![Build Status][travis-image]][travis-url]\n\nA plugin for [esbuild](https://esbuild.github.io/) to handle Sass & SCSS files.\n\n### Features\n* **PostCSS** & **CSS modules**\n* support for **constructable stylesheet** to be used in custom elements or `dynamic style` to be added to the html page\n* uses the **new [Dart Sass](https://www.npmjs.com/package/sass) Js API**.\n* caching\n* **url rewriting**\n* pre-compiling (to add **global resources** to the sass files)\n\n### Breaking Changes\n* `type` has been simplified and now accepts only a string. If you need different types in a project [you can use more\n  than one instance](https://github.com/glromeo/esbuild-sass-plugin/issues/60) of the plugin. \n  You can have a look at the [**multiple** fixture](https://github.com/glromeo/esbuild-sass-plugin/blob/main/test/fixture/multiple) \n  for an example where **lit CSS** and **CSS modules** are both used in the same app\n* The support for [node-sass](https://github.com/sass/node-sass) has been removed and for good.\n  Sadly, node-sass is at a dead end and so it's 1.x. I don't exclude updates or fixes on it but it's down in the list of\n  my priorities.\n\n### Install\n\n```console\n$ npm i esbuild-sass-plugin\n```\n\n### Usage\n\nJust add it to your esbuild plugins:\n\n```javascript\nimport {sassPlugin} from 'esbuild-sass-plugin'\n\nawait esbuild.build({\n  ...\n  plugins: [sassPlugin()]\n})\n```\nThere are two main options that control the plugin: `filter` which has the same meaning of filter in esbuild \n[onLoad](https://esbuild.github.io/plugins/#on-load) and `type` that's what specifies how the css should be\nrendered and imported. \n\nThe example above uses the default type `css` and will use esbuild CSS loader so your transpiled Sass \nwill be in `index.css` alongside your bundle.\n\nIn all other cases `esbuild` won't process the CSS content which instead will be handled by the plugin.\n> if you want `url()` resolution or other processing you have to use `postcss` like in [this example](https://github.com/glromeo/esbuild-sass-plugin/issues/92#issuecomment-1219209442) \n\n#### `type: \"style\"`\nIn this mode the stylesheet will be in the javascript bundle \nand will be dynamically added to the page when the bundle is loaded.\n\n#### `type: \"css-text\"`\nYou can use this mode if you want to use the resulting css text as a string import\n\n```javascript\nawait esbuild.build({\n  ...\n  plugins: [sassPlugin({\n    type: \"css-text\",\n    ...   // for the options availanle look at 'SassPluginOptions' in index.ts\n  })]\n})\n```\n\n...and in your module do something like\n\n```javascript\nimport cssText from './styles.scss'\n\ncustomElements.define('hello-world', class HelloWorld extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({mode: 'open'});\n    this.sheet = new CSSStyleSheet();\n    this.sheet.replaceSync(cssText);\n    this.shadowRoot.adoptedStyleSheets = [this.sheet];\n  }\n}\n```\n\n#### `type: \"lit-css\"`\nOr you can import a **lit-element** css result using `type: \"lit-css\"`\n\n```javascript\nimport styles from './styles.scss'\n\n@customElement(\"hello-world\")\nexport default class HelloWorld extends LitElement {\n\n  static styles = styles\n\n  render() {\n    ...\n  }\n}\n```\n\nLook in `test/fixtures` folder for more usage examples.\n\n### Options\n\nThe **options** passed to the plugin are a superset of Sass\n[compile string options](https://sass-lang.com/documentation/js-api/interfaces/StringOptionsWithImporter).\n\n| Option                                               | Type                                  | Default                                 |\n|------------------------------------------------------|---------------------------------------|-----------------------------------------|\n| [filter](https://esbuild.github.io/plugins/#on-load) | regular expression                    | <code>/\\.(s[ac]ss&vert;css)$/</code>    |\n| cache                                                | boolean or Map                        | `true` (there is one Map per namespace) |\n| type                                                 | `\"css\"`<br/>`\"style\"`<br/>`\"lit-css\"` | `\"css\"`                                 |\n| transform                                            | function                              | undefined                               |\n| [loadPaths](https://sass-lang.com/documentation/js-api/interfaces/Options#loadPaths) | string[] | []                                   |\n| precompile                                           | function                              | undefined                               |\n| importMapper                                         | function                              | undefined                               |\n| cssImports                                           | boolean                               | false                                   |\n| nonce                                                | string                                | undefined                               |\n| prefer                                               | string                                | preferred package.json field            |\n\n### What happened to `exclude` ?\nthe option has been removed in favour of using `filter`. The default filter is quite simple but also quite permissive.\nIf you have URLs in your imports and you want the plugin to ignore them you can just change the filter to something like:\n```javascript\nsassPlugin({\n  filter: /^(?!https?:).*\\.(s[ac]ss|css)$/\n  ...\n})\n```\n\n### `cssImports`\nwhen this is set to `true` the plugin rewrites the node-modules relative URLs startig with the `~` prefix so that\nesbuild can resolve them similarly to what `css-loader` does. \n> Although this practice is [kind of deprecated nowadays](https://webpack.js.org/loaders/sass-loader/#resolving-import-at-rules) \n> some packages out there still use this notation (e.g. `formio`)\n> \\\n> so I added this feature to help in cases [like this one](https://github.com/glromeo/esbuild-sass-plugin/issues/74).\n\n### `nonce`\nin presence of Content-Security-Policy \n[(CSP)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src) \nthe `nonce` option allows to specify the nonce attribute for the dynamically generated `<style>`\n\nIf the `nonce` string is a field access starting with `window`, `process` or `globalThis` it is left in the code without quotes.\n```javascript\nsassPlugin({\n  type: 'style',\n  nonce: 'window.__esbuild_nonce__'\n})\n```\nThis allows to define it globally or to leave it for a subsequent build to resolve it using [esbuild define](https://esbuild.github.io/api/#define).\n```javascript\ndefine: {'window.__esbuild_nonce__': '\"12345\"'}\n```\n\n### `prefer`\nwhen this option is specified it allows to import npm packages which have `sass` or `style` fields preferring those to `main`.\n\n> **NOTE**: This is an experimental feature\n> * it replaces the internal use of `require.resolve` with browserify `resolve.sync`\n> * it only applies to import prefixed by `~` \n\n### `importMapper`\n\nA function to customize/re-map the import path, both `import` statements in JavaScript/TypeScript code and `@import`\nin Sass/SCSS are covered.   \nYou can use this option to re-map import paths like tsconfig's `paths` option.\n\ne.g. given this `tsconfig.json` which maps image files paths\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@img/*\": [\n        \"./assets/images/*\"\n      ]\n    }\n  }\n}\n```\n\nnow you can resolve these paths with `importMapper`\n\n```javascript\nawait esbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    importMapper: (path) => path.replace(/^@img\\//, './assets/images/')\n  })]\n})\n```\n\n### `precompile`\n\n#### - Rewriting relative `url(...)`s\nIf your sass reference resources with relative urls (see [#48](https://github.com/glromeo/esbuild-sass-plugin/issues/48))\nesbuild will struggle to rewrite those urls because it doesn't have idea of the imports that the Sass compiler \nhas gone through. Fortunately the new importer API allows to rewrite those relative URLs in absolute ones which \nthen esbuild will be able to handle.\n\nHere is an example of how to do the `url(...)` rewrite ([make sure to handle `\\` in *Windows*](https://github.com/glromeo/esbuild-sass-plugin/issues/58))\n```javascript\nconst path = require('path')\n\nawait esbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    precompile(source, pathname) {\n      const basedir = path.dirname(pathname)\n      return source.replace(/(url\\(['\"]?)(\\.\\.?\\/)([^'\")]+['\"]?\\))/g, `$1${basedir}/$2$3`)\n    }\n  })]\n})\n```\n\n#### - Globals and other Shims (like sass-loader's additionalData)\nLook for a complete example in the [precompile](https://github.com/glromeo/esbuild-sass-plugin/tree/main/test/fixture/precompile) fixture.\n\nPrepending a variable for a specific `pathname`:\n```javascript\nconst context = { color: \"blue\" }\n\nawait esbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    precompile(source, pathname) {\n      const prefix = /\\/included\\.scss$/.test(pathname) ? `\n            $color: ${context.color};\n          ` : env\n      return prefix + source\n    }\n  })]\n})\n```\n\nPrepending an `@import` of globals file only for the root file that triggered the compilation (to avoid nested files from importing it again):\n```javascript\nconst context = { color: \"blue\" }\n\nawait esbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    precompile(source, pathname, isRoot) {\n      return isRoot ? `@import '/path/to/globals.scss';\\n${source}` : source\n    }\n  })]\n})\n```\n\n### `transform`\n\n```typescript\nasync (this: SassPluginOptions, css: string, resolveDir?: string) => Promise<string>\n``` \n\nIt's a function which will be invoked before passing the css to esbuild or wrapping it in a module.\\\nIt can be used to do **PostCSS** processing and/or to create **modules** like in the following examples.\n\n> **NOTE:** Since `v1.5.0` transform can return either a string or an esbuild `LoadResult` object. \\\n> This is what `postcssModules` uses to pass Javascript modules to esbuild bypassing the plugin output altogether.\n\n#### - PostCSS\n\nThe simplest use case is to invoke PostCSS like this:\n\n```javascript\nconst postcss = require('postcss')\nconst autoprefixer = require('autoprefixer')\nconst postcssPresetEnv = require('postcss-preset-env')\n\nesbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    async transform(source, resolveDir) {\n      const {css} = await postcss([autoprefixer, postcssPresetEnv({stage: 0})]).process(source)\n      return css\n    }\n  })]\n})\n\n```\n\n#### - CSS Modules\n\nA helper function is available to do all the work of calling PostCSS to create a CSS module. The usage is something\nlike:\n\n```javascript\nconst {sassPlugin, postcssModules} = require('esbuild-sass-plugin')\n\nesbuild.build({\n  ...,\n  plugins: [sassPlugin({\n    transform: postcssModules({\n      // ...put here the options for postcss-modules: https://github.com/madyankin/postcss-modules\n    })\n  })]\n})\n\n```\n`postcssModules` produces Javascript modules which are handled by esbuild's `js` loader, so the `type` option is **ignored**\n\n`postcssModules` also accepts an optional array of plugins for PostCSS as second parameter.\n\nLook into [fixture/css-modules](https://github.com/glromeo/esbuild-sass-plugin/tree/main/test/fixture/css-modules) for\nthe complete example.\n\n> **NOTE:** `postcss` and `postcss-modules` have to be added to your `package.json`.\n\n### pnpm\n\nThere's a working example of using `pnpm` with `@material` design\nin [issue/38](https://github.com/glromeo/esbuild-sass-plugin/tree/main/test/issues/38)\n\n### Benchmarks\n**Windows 10** Pro - **i7-4770K** CPU @ **3.50**GHz - RAM **24**GB - SSD **500**GB\n\nGiven 24 × 24 = 576 lit-element files & 576 imported CSS styles plus the import of the full bootstrap 5.1\n\n|                        | dart sass | dart sass (no cache)  | node-sass*  | node-sass (no cache) |\n|------------------------|-----------|-----------------------|-------------|----------------------|\n| **initial build**      | 2.750s    | 2.750s                | 1.903s      | 1.858s               |\n| rebuild (.ts change)   | 285.959ms | 1.950s                | 797.098ms   | 1.689s               |\n| rebuild (.ts change)   | 260.791ms | 1.799s                | 768.213ms   | 1.790s               |\n| rebuild (.scss change) | 234.152ms | 1.801s                | 770.619ms   | 1.652s               |\n| rebuild (.scss change) | 267.857ms | 1.738s                | 750.743ms   | 1.682s               |\n\n(*) node-sass is here just to give a term of comparison ...those samples were taken from 1.8.x\n\n[travis-url]: https://app.travis-ci.com/glromeo/esbuild-sass-plugin\n[travis-image]: https://app.travis-ci.com/glromeo/esbuild-sass-plugin.svg?branch=main\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Gianluca Romeo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/esbuild-sass-plugin/-/esbuild-sass-plugin-2.4.0.tgz#73d974e875a095cbe1fdbfbad098638e4e63de5a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/esbuild-sass-plugin/-/esbuild-sass-plugin-2.4.0.tgz",
    "hash": "73d974e875a095cbe1fdbfbad098638e4e63de5a",
    "integrity": "sha512-fJOkKjvsDFQzaraM9G8p0JX+LfcP9DF4lxmbSNErza31d4u8+cv3k6vl5WT5O0+Ya56t+Auzy2cVksuyMy44lA==",
    "registry": "npm",
    "packageName": "esbuild-sass-plugin",
    "cacheIntegrity": "sha512-fJOkKjvsDFQzaraM9G8p0JX+LfcP9DF4lxmbSNErza31d4u8+cv3k6vl5WT5O0+Ya56t+Auzy2cVksuyMy44lA== sha1-c9l06HWglcvh/b+60Jhjjk5j3lo="
  },
  "registry": "npm",
  "hash": "73d974e875a095cbe1fdbfbad098638e4e63de5a"
}