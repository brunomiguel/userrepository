{
  "manifest": {
    "name": "@typescript-eslint/parser",
    "version": "5.31.0",
    "description": "An ESLint custom parser which leverages TypeScript ESTree",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist",
      "_ts3.4",
      "README.md",
      "LICENSE"
    ],
    "engines": {
      "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/typescript-eslint/typescript-eslint.git",
      "directory": "packages/parser"
    },
    "bugs": {
      "url": "https://github.com/typescript-eslint/typescript-eslint/issues"
    },
    "license": "BSD-2-Clause",
    "keywords": [
      "ast",
      "ecmascript",
      "javascript",
      "typescript",
      "parser",
      "syntax",
      "eslint"
    ],
    "scripts": {
      "build": "tsc -b tsconfig.build.json",
      "postbuild": "downlevel-dts dist _ts3.4/dist",
      "clean": "tsc -b tsconfig.build.json --clean",
      "postclean": "rimraf dist && rimraf _ts3.4 && rimraf coverage",
      "format": "prettier --write \"./**/*.{ts,mts,cts,tsx,js,mjs,cjs,jsx,json,md,css}\" --ignore-path ../../.prettierignore",
      "lint": "eslint . --ignore-path='../../.eslintignore'",
      "test": "jest --coverage",
      "typecheck": "tsc -p tsconfig.json --noEmit"
    },
    "peerDependencies": {
      "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
    },
    "dependencies": {
      "@typescript-eslint/scope-manager": "5.31.0",
      "@typescript-eslint/types": "5.31.0",
      "@typescript-eslint/typescript-estree": "5.31.0",
      "debug": "^4.3.4"
    },
    "devDependencies": {
      "@types/glob": "*",
      "glob": "*",
      "typescript": "*"
    },
    "peerDependenciesMeta": {
      "typescript": {
        "optional": true
      }
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/typescript-eslint"
    },
    "typesVersions": {
      "<3.8": {
        "*": [
          "_ts3.4/*"
        ]
      }
    },
    "gitHead": "3983d84bb6affc3d14658380491ed74c0692fb0f",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@typescript-eslint-parser-5.31.0-7f42d7dcc68a0a6d80a0f3d9a65063aee7bb8d2c-integrity/node_modules/@typescript-eslint/parser/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">TypeScript ESLint Parser</h1>\n\n<p align=\"center\">An ESLint parser which leverages <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/typescript-estree\">TypeScript ESTree</a> to allow for ESLint to lint TypeScript source code.</p>\n\n<p align=\"center\">\n    <img src=\"https://github.com/typescript-eslint/typescript-eslint/workflows/CI/badge.svg\" alt=\"CI\" />\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/parser\"><img src=\"https://img.shields.io/npm/v/@typescript-eslint/parser.svg?style=flat-square\" alt=\"NPM Version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/parser\"><img src=\"https://img.shields.io/npm/dm/@typescript-eslint/parser.svg?style=flat-square\" alt=\"NPM Downloads\" /></a>\n</p>\n\n## Getting Started\n\n**[You can find our Getting Started docs here](https://typescript-eslint.io/docs/linting)**\n\nThese docs walk you through setting up ESLint, this parser, and our plugin. If you know what you're doing and just want to quick start, read on...\n\n## Quick-start\n\n### Installation\n\n```bash\n$ yarn add -D typescript @typescript-eslint/parser\n$ npm i --save-dev typescript @typescript-eslint/parser\n```\n\n### Usage\n\nIn your ESLint configuration file, set the `parser` property:\n\n```json\n{\n  \"parser\": \"@typescript-eslint/parser\"\n}\n```\n\nThere is sometimes an incorrect assumption that the parser itself is what does everything necessary to facilitate the use of ESLint with TypeScript. In actuality, it is the combination of the parser _and_ one or more plugins which allow you to maximize your usage of ESLint with TypeScript.\n\nFor example, once this parser successfully produces an AST for the TypeScript source code, it might well contain some information which simply does not exist in a standard JavaScript context, such as the data for a TypeScript-specific construct, like an `interface`.\n\nThe core rules built into ESLint, such as `indent` have no knowledge of such constructs, so it is impossible to expect them to work out of the box with them.\n\nInstead, you also need to make use of one more plugins which will add or extend rules with TypeScript-specific features.\n\nBy far the most common case will be installing the [`@typescript-eslint/eslint-plugin`](https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin) plugin, but there are also other relevant options available such a [`@typescript-eslint/eslint-plugin-tslint`](https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin-tslint).\n\n## Configuration\n\nThe following additional configuration options are available by specifying them in [`parserOptions`](https://eslint.org/docs/user-guide/configuring/language-options#specifying-parser-options) in your ESLint configuration file.\n\n```ts\ninterface ParserOptions {\n  ecmaFeatures?: {\n    jsx?: boolean;\n    globalReturn?: boolean;\n  };\n  ecmaVersion?: number | 'latest';\n\n  jsxPragma?: string | null;\n  jsxFragmentName?: string | null;\n  lib?: string[];\n\n  project?: string | string[];\n  projectFolderIgnoreList?: string[];\n  tsconfigRootDir?: string;\n  extraFileExtensions?: string[];\n  warnOnUnsupportedTypeScriptVersion?: boolean;\n\n  program?: import('typescript').Program;\n  moduleResolver?: string;\n\n  emitDecoratorMetadata?: boolean;\n}\n```\n\n### `parserOptions.ecmaFeatures.jsx`\n\nDefault `false`.\n\nEnable parsing JSX when `true`. More details can be found [here](https://www.typescriptlang.org/docs/handbook/jsx.html).\n\n**NOTE:** this setting does not affect known file types (`.js`, `.mjs`, `.cjs`, `.jsx`, `.ts`, `.mts`, `.cts`, `.tsx`, `.json`) because the TypeScript compiler has its own internal handling for known file extensions.\n\n<!-- https://github.com/microsoft/TypeScript/blob/d6e483b8dabd8fd37c00954c3f2184bb7f1eb90c/src/compiler/utilities.ts#L6281-L6285 -->\n\nThe exact behavior is as follows:\n\n- `.js`, `.mjs`, `.cjs`, `.jsx`, `.tsx` files are always parsed as if this is `true`.\n- `.ts`, `.mts`, `.cts` files are always parsed as if this is `false`.\n- For \"unknown\" extensions (`.md`, `.vue`):\n  - If `parserOptions.project` is _not_ provided:\n    - The setting will be respected.\n  - If `parserOptions.project` is provided (i.e. you are using rules with type information):\n    - **always parsed as if this is `false`**\n\n### `parserOptions.ecmaFeatures.globalReturn`\n\nDefault `false`.\n\nThis options allows you to tell the parser if you want to allow global `return` statements in your codebase.\n\n### `parserOptions.ecmaVersion`\n\nDefault `2018`.\n\nAccepts any valid ECMAScript version number or `'latest'`:\n\n- A version: es3, es5, es6, es7, es8, es9, es10, es11, es12, es13, ..., or\n- A year: es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, ..., or\n- `'latest'`\n\nWhen it's a version or a year, the value **must** be a number - so do not include the `es` prefix.\n\nSpecifies the version of ECMAScript syntax you want to use. This is used by the parser to determine how to perform scope analysis, and it affects the default\n\n### `parserOptions.jsxPragma`\n\nDefault `'React'`\n\nThe identifier that's used for JSX Elements creation (after transpilation).\nIf you're using a library other than React (like `preact`), then you should change this value. If you are using the [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) you can set this to `null`.\n\nThis should not be a member expression - just the root identifier (i.e. use `\"React\"` instead of `\"React.createElement\"`).\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.\n\n### `parserOptions.jsxFragmentName`\n\nDefault `null`\n\nThe identifier that's used for JSX fragment elements (after transpilation).\nIf `null`, assumes transpilation will always use a member of the configured `jsxPragma`.\nThis should not be a member expression - just the root identifier (i.e. use `\"h\"` instead of `\"h.Fragment\"`).\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.\n\n### `parserOptions.lib`\n\nDefault `['es2018']`\n\nFor valid options, see the [TypeScript compiler options](https://www.typescriptlang.org/tsconfig#lib).\n\nSpecifies the TypeScript `lib`s that are available. This is used by the scope analyser to ensure there are global variables declared for the types exposed by TypeScript.\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.\n\n### `parserOptions.project`\n\nDefault `undefined`.\n\nThis option allows you to provide a path to your project's `tsconfig.json`. **This setting is required if you want to use rules which require type information**. Relative paths are interpreted relative to the current working directory if `tsconfigRootDir` is not set. If you intend on running ESLint from directories other than the project root, you should consider using `tsconfigRootDir`.\n\n- Accepted values:\n\n  ```js\n  // path\n  project: './tsconfig.json';\n\n  // glob pattern\n  project: './packages/**/tsconfig.json';\n\n  // array of paths and/or glob patterns\n  project: ['./packages/**/tsconfig.json', './separate-package/tsconfig.json'];\n  ```\n\n- If you use project references, TypeScript will not automatically use project references to resolve files. This means that you will have to add each referenced tsconfig to the `project` field either separately, or via a glob.\n\n- TypeScript will ignore files with duplicate filenames in the same folder (for example, `src/file.ts` and `src/file.js`). TypeScript purposely ignore all but one of the files, only keeping the one file with the highest priority extension (the extension priority order (from highest to lowest) is `.ts`, `.tsx`, `.d.ts`, `.js`, `.jsx`). For more info see #955.\n\n- Note that if this setting is specified and `createDefaultProgram` is not, you must only lint files that are included in the projects as defined by the provided `tsconfig.json` files. If your existing configuration does not include all of the files you would like to lint, you can create a separate `tsconfig.eslint.json` as follows:\n\n  ```jsonc\n  {\n    // extend your base config so you don't have to redefine your compilerOptions\n    \"extends\": \"./tsconfig.json\",\n    \"include\": [\n      \"src/**/*.ts\",\n      \"test/**/*.ts\",\n      \"typings/**/*.ts\",\n      // etc\n\n      // if you have a mixed JS/TS codebase, don't forget to include your JS files\n      \"src/**/*.js\"\n    ]\n  }\n  ```\n\n### `parserOptions.tsconfigRootDir`\n\nDefault `undefined`.\n\nThis option allows you to provide the root directory for relative tsconfig paths specified in the `project` option above.\n\n### `parserOptions.projectFolderIgnoreList`\n\nDefault `[\"**/node_modules/**\"]`.\n\nThis option allows you to ignore folders from being included in your provided list of `project`s.\nThis is useful if you have configured glob patterns, but want to make sure you ignore certain folders.\n\nIt accepts an array of globs to exclude from the `project` globs.\n\nFor example, by default it will ensure that a glob like `./**/tsconfig.json` will not match any `tsconfig`s within your `node_modules` folder (some npm packages do not exclude their source files from their published packages).\n\n### `parserOptions.extraFileExtensions`\n\nDefault `undefined`.\n\nThis option allows you to provide one or more additional file extensions which should be considered in the TypeScript Program compilation.\nThe default extensions are `['.js', '.mjs', '.cjs', '.jsx', '.ts', '.mts', '.cts', '.tsx']`.\nAdd extensions starting with `.`, followed by the file extension. E.g. for a `.vue` file use `\"extraFileExtensions\": [\".vue\"]`.\n\n### `parserOptions.warnOnUnsupportedTypeScriptVersion`\n\nDefault `true`.\n\nThis option allows you to toggle the warning that the parser will give you if you use a version of TypeScript which is not explicitly supported\n\n### `parserOptions.createDefaultProgram`\n\nDefault `false`.\n\nThis option allows you to request that when the `project` setting is specified, files will be allowed when not included in the projects defined by the provided `tsconfig.json` files. **Using this option will incur significant performance costs. This option is primarily included for backwards-compatibility.** See the **`project`** section above for more information.\n\n### `parserOptions.programs`\n\nDefault `undefined`.\n\nThis option allows you to programmatically provide an array of one or more instances of a TypeScript Program object that will provide type information to rules.\nThis will override any programs that would have been computed from `parserOptions.project` or `parserOptions.createDefaultProgram`.\nAll linted files must be part of the provided program(s).\n\n### `parserOptions.moduleResolver`\n\nDefault `undefined`.\n\nThis option allows you to provide a custom module resolution. The value should point to a JS file that default exports (`export default`, or `module.exports =`, or `export =`) a file with the following interface:\n\n```ts\ninterface ModuleResolver {\n  version: 1;\n  resolveModuleNames(\n    moduleNames: string[],\n    containingFile: string,\n    reusedNames: string[] | undefined,\n    redirectedReference: ts.ResolvedProjectReference | undefined,\n    options: ts.CompilerOptions,\n  ): (ts.ResolvedModule | undefined)[];\n}\n```\n\n[Refer to the TypeScript Wiki for an example on how to write the `resolveModuleNames` function](https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#customizing-module-resolution).\n\nNote that if you pass custom programs via `options.programs` this option will not have any effect over them (you can simply add the custom resolution on them directly).\n\n### `parserOptions.emitDecoratorMetadata`\n\nDefault `undefined`.\n\nThis option allow you to tell parser to act as if `emitDecoratorMetadata: true` is set in `tsconfig.json`, but without [type-aware linting](https://typescript-eslint.io/docs/linting/typed-linting). In other words, you don't have to specify `parserOptions.project` in this case, making the linting process faster.\n\n## Utilities\n\n### `createProgram(configFile, projectDirectory)`\n\nThis serves as a utility method for users of the `parserOptions.programs` feature to create a TypeScript program instance from a config file.\n\n```ts\ndeclare function createProgram(\n  configFile: string,\n  projectDirectory?: string,\n): import('typescript').Program;\n```\n\nExample usage in .eslintrc.js:\n\n```js\nconst parser = require('@typescript-eslint/parser');\nconst programs = [parser.createProgram('tsconfig.json')];\nmodule.exports = {\n  parserOptions: {\n    programs,\n  },\n};\n```\n\n## Supported TypeScript Version\n\nPlease see [`typescript-eslint`](https://github.com/typescript-eslint/typescript-eslint) for the supported TypeScript version.\n\n**Please ensure that you are using a supported version before submitting any issues/bug reports.**\n\n## Reporting Issues\n\nPlease use the `@typescript-eslint/parser` issue template when creating your issue and fill out the information requested as best you can. This will really help us when looking into your issue.\n\n## License\n\nTypeScript ESLint Parser is licensed under a permissive BSD 2-clause license.\n\n## Contributing\n\n[See the contributing guide here](../../CONTRIBUTING.md)\n",
    "licenseText": "TypeScript ESLint Parser\nCopyright JS Foundation and other contributors, https://js.foundation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.31.0.tgz#7f42d7dcc68a0a6d80a0f3d9a65063aee7bb8d2c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.31.0.tgz",
    "hash": "7f42d7dcc68a0a6d80a0f3d9a65063aee7bb8d2c",
    "integrity": "sha512-UStjQiZ9OFTFReTrN+iGrC6O/ko9LVDhreEK5S3edmXgR396JGq7CoX2TWIptqt/ESzU2iRKXAHfSF2WJFcWHw==",
    "registry": "npm",
    "packageName": "@typescript-eslint/parser",
    "cacheIntegrity": "sha512-UStjQiZ9OFTFReTrN+iGrC6O/ko9LVDhreEK5S3edmXgR396JGq7CoX2TWIptqt/ESzU2iRKXAHfSF2WJFcWHw== sha1-f0LX3MaKCm2AoPPZplBjrue7jSw="
  },
  "registry": "npm",
  "hash": "7f42d7dcc68a0a6d80a0f3d9a65063aee7bb8d2c"
}