{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,WAAY,SAAQ,SAAS;IACxC,iBAAiB,CAAC,QAAiB;QACjC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM;QACJ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM,CAAC,QAKN;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,aAAa,CAAC,QAGb;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,aAAa,CAAC,QAGb;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,iBAAiB,CAAC,QAIjB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,oBAAoB,CAAC,QAGpB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,gBAAgB,CAAC,QAIhB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,gBAAgB,CAAC,QAKhB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,uBAAuB,CAAC,QAKvB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,iBAAiB,CAAC,QAKjB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,iBAAiB,CAAC,QAMjB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,qBAAqB,CAAC,QAGrB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,qBAAqB,CAAC,QAGrB;QACC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { FileSyncPlugin } from './definitions';\n\nexport class FileSyncWeb extends WebPlugin implements FileSyncPlugin {\n  cancelAllRequests(_options: unknown): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  keygen(): Promise<{ secretKey: string; publicKey: string }> {\n    throw new Error('Method not implemented.');\n  }\n  setEnv(_options: {\n    graphUUID: string;\n    env: string;\n    secretKey: string;\n    publicKey: string;\n  }): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  encryptFnames(_options: {\n    graphUUID: string;\n    filePaths: string[];\n  }): Promise<{ value: string[] }> {\n    throw new Error('Method not implemented.');\n  }\n  decryptFnames(_options: {\n    graphUUID: string;\n    filePaths: string[];\n  }): Promise<{ value: string[] }> {\n    throw new Error('Method not implemented.');\n  }\n  getLocalFilesMeta(_options: {\n    graphUUID: string;\n    basePath: string;\n    filePaths: string[];\n  }): Promise<{ result: any[] }> {\n    throw new Error('Method not implemented.');\n  }\n  getLocalAllFilesMeta(_options: {\n    graphUUID: string;\n    basePath: string;\n  }): Promise<{ result: any[] }> {\n    throw new Error('Method not implemented.');\n  }\n  deleteLocalFiles(_options: {\n    graphUUID: string;\n    basePath: string;\n    filePaths: string[];\n  }): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  updateLocalFiles(_options: {\n    graphUUID: string;\n    basePath: string;\n    filePaths: string[];\n    token: string;\n  }): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  updateLocalVersionFiles(_options: {\n    graphUUID: string;\n    basePath: string;\n    filePaths: string[];\n    token: string;\n  }): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  deleteRemoteFiles(_options: {\n    graphUUID: string;\n    filePaths: string[];\n    token: string;\n    txid: number;\n  }): Promise<{ txid: number }> {\n    throw new Error('Method not implemented.');\n  }\n  updateRemoteFiles(_options: {\n    graphUUID: string;\n    basePath: string;\n    filePaths: string[];\n    token: string;\n    txid: number;\n  }): Promise<{ txid: number }> {\n    throw new Error('Method not implemented.');\n  }\n  encryptWithPassphrase(_options: {\n    passphrase: string;\n    content: string;\n  }): Promise<{ data: string }> {\n    throw new Error('Method not implemented.');\n  }\n  decryptWithPassphrase(_options: {\n    passphrase: string;\n    content: string;\n  }): Promise<{ data: string }> {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}