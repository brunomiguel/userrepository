{
  "manifest": {
    "name": "jsx-ast-utils",
    "version": "3.3.3",
    "description": "AST utility module for statically analyzing JSX",
    "main": "lib/index.js",
    "scripts": {
      "prepack": "npmignore --auto --commentLines=autogenerated",
      "prebuild": "rimraf lib",
      "build": "babel src --out-dir lib",
      "prepublishOnly": "safe-publish-latest && npm test && npm run build",
      "prepublish": "not-in-publish || npm run prepublishOnly",
      "prelint": "npm run build",
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "npm run tests-only --",
      "posttest": "aud --production",
      "tests-only": "jest --coverage",
      "test:watch": "npm run tests-only -- --watch"
    },
    "devDependencies": {
      "@babel/core": "^7.18.10",
      "@babel/eslint-parser": "^7.18.9",
      "@babel/parser": "^7.18.11",
      "aud": "^2.0.0",
      "babel-cli": "^6.26.0",
      "babel-core": "^6.26.3",
      "babel-jest": "^20.0.3",
      "babel-plugin-transform-object-rest-spread": "^6.26.0",
      "babel-plugin-transform-replace-object-assign": "^1.0.0",
      "babel-polyfill": "^6.26.0",
      "babel-preset-env": "^1.7.0",
      "babylon": "^6.18.0",
      "eslint": "^8.21.0",
      "eslint-config-airbnb-base": "^15.0.0",
      "eslint-plugin-import": "^2.26.0",
      "flow-parser": "^0.126.1",
      "in-publish": "^2.0.1",
      "jest": "^20.0.4",
      "jest-cli": "^20.0.4",
      "npmignore": "^0.3.0",
      "object.entries": "^1.1.5",
      "object.fromentries": "^2.0.5",
      "rimraf": "^2.7.1",
      "safe-publish-latest": "^2.0.0"
    },
    "engines": {
      "node": ">=4.0"
    },
    "keywords": [
      "jsx",
      "ast",
      "lint",
      "eslint"
    ],
    "author": {
      "name": "Ethan Cohen"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jsx-eslint/jsx-ast-utils"
    },
    "license": "MIT",
    "dependencies": {
      "array-includes": "^3.1.5",
      "object.assign": "^4.1.3"
    },
    "publishConfig": {
      "ignore": [
        ".github/workflows",
        "jest.config.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-jsx-ast-utils-3.3.3-76b3e6e6cece5c69d49a5792c3d01bd1a0cdc7ea-integrity/node_modules/jsx-ast-utils/package.json",
    "readmeFilename": "README.md",
    "readme": "# jsx-ast-utils <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\nAST utility module for statically analyzing JSX.\n\n## Installation\n```sh\n$ npm i jsx-ast-utils --save\n```\n\n## Usage\nThis is a utility module to evaluate AST objects for JSX syntax. This can be super useful when writing linting rules for JSX code. It was originally in the code for [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y), however I thought it could be useful to be extracted and maintained separately so **you** could write new interesting rules to statically analyze JSX.\n\n### ESLint example\n```js\nimport { hasProp } from 'jsx-ast-utils';\n// OR: var hasProp = require('jsx-ast-utils').hasProp;\n// OR: const hasProp = require('jsx-ast-utils/hasProp');\n// OR: import hasProp from 'jsx-ast-utils/hasProp';\n\nmodule.exports = context => ({\n  JSXOpeningElement: node => {\n    const onChange = hasProp(node.attributes, 'onChange');\n\n    if (onChange) {\n      context.report({\n        node,\n        message: `No onChange!`\n      });\n    }\n  }\n});\n```\n\n## API\n### AST Resources\n1. [JSX spec](https://github.com/facebook/jsx/blob/master/AST.md)\n2. [JS spec](https://github.com/estree/estree/blob/master/spec.md)\n\n### hasProp\n```js\nhasProp(props, prop, options);\n```\nReturns boolean indicating whether an prop exists as an attribute on a JSX element node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### hasAnyProp\n\n```js\nhasAnyProp(props, prop, options);\n```\nReturns a boolean indicating if **any** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### hasEveryProp\n\n```js\nhasEveryProp(props, prop, options);\n```\nReturns a boolean indicating if **all** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n 1. `ignoreCase` - automatically set to `true`.\n 2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n    props, it will assume the prop you are looking for is not in the spread.\n    Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### getProp\n\n```js\ngetProp(props, prop, options);\n```\nReturns the JSXAttribute itself or undefined, indicating the prop is not present on the JSXOpeningElement.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n\n<hr />\n\n### elementType\n```js\nelementType(node)\n```\nReturns the tagName associated with a JSXElement.\n\n#### Node\nObject - The visited JSXElement node object.\n\n<hr />\n\n### getPropValue\n\n```js\ngetPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return the most *closely* associated value with the intention of the JSX.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n\n### getLiteralPropValue\n\n```js\ngetLiteralPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return a value only if we can extract a literal value from its attribute (i.e. values that have generic types in JavaScript - strings, numbers, booleans, etc.)\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n\n### propName\n\n```js\npropName(prop);\n```\nReturns the name associated with a JSXAttribute. For example, given `<div foo=\"bar\" />` and the JSXAttribute for `foo`, this will return the string `\"foo\"`.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n\n### eventHandlers\n\n```js\nconsole.log(eventHandlers);\n/*\n[\n  'onCopy',\n  'onCut',\n  'onPaste',\n  'onCompositionEnd',\n  'onCompositionStart',\n  'onCompositionUpdate',\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n  'onFocus',\n  'onBlur',\n  'onChange',\n  'onInput',\n  'onSubmit',\n  'onClick',\n  'onContextMenu',\n  'onDblClick',\n  'onDoubleClick',\n  'onDrag',\n  'onDragEnd',\n  'onDragEnter',\n  'onDragExit',\n  'onDragLeave',\n  'onDragOver',\n  'onDragStart',\n  'onDrop',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onSelect',\n  'onTouchCancel',\n  'onTouchEnd',\n  'onTouchMove',\n  'onTouchStart',\n  'onScroll',\n  'onWheel',\n  'onAbort',\n  'onCanPlay',\n  'onCanPlayThrough',\n  'onDurationChange',\n  'onEmptied',\n  'onEncrypted',\n  'onEnded',\n  'onError',\n  'onLoadedData',\n  'onLoadedMetadata',\n  'onLoadStart',\n  'onPause',\n  'onPlay',\n  'onPlaying',\n  'onProgress',\n  'onRateChange',\n  'onSeeked',\n  'onSeeking',\n  'onStalled',\n  'onSuspend',\n  'onTimeUpdate',\n  'onVolumeChange',\n  'onWaiting',\n  'onLoad',\n  'onError',\n  'onAnimationStart',\n  'onAnimationEnd',\n  'onAnimationIteration',\n  'onTransitionEnd',\n]\n*/\n```\n\nContains a flat list of common event handler props used in JSX to attach behaviors\nto DOM events.\n\n#### eventHandlersByType\n\nThe same list as `eventHandlers`, grouped into types.\n\n```js\nconsole.log(eventHandlersByType);\n/*\n{\n  clipboard: [ 'onCopy', 'onCut', 'onPaste' ],\n  composition: [ 'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate' ],\n  keyboard: [ 'onKeyDown', 'onKeyPress', 'onKeyUp' ],\n  focus: [ 'onFocus', 'onBlur' ],\n  form: [ 'onChange', 'onInput', 'onSubmit' ],\n  mouse: [ 'onClick', 'onContextMenu', 'onDblClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp' ],\n  selection: [ 'onSelect' ],\n  touch: [ 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart' ],\n  ui: [ 'onScroll' ],\n  wheel: [ 'onWheel' ],\n  media: [ 'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting' ],\n  image: [ 'onLoad', 'onError' ],\n  animation: [ 'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration' ],\n  transition: [ 'onTransitionEnd' ],\n}\n*/\n```\n\n\n[1]: https://npmjs.org/package/jsx-ast-utils\n[2]: https://versionbadg.es/jsx-eslint/jsx-ast-utils.svg\n[5]: https://david-dm.org/jsx-eslint/jsx-ast-utils.svg\n[6]: https://david-dm.org/jsx-eslint/jsx-ast-utils\n[7]: https://david-dm.org/jsx-eslint/jsx-ast-utils/dev-status.svg\n[8]: https://david-dm.org/jsx-eslint/jsx-ast-utils#info=devDependencies\n[11]: https://nodei.co/npm/jsx-ast-utils.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/jsx-ast-utils.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/jsx-ast-utils.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=jsx-ast-utils\n[codecov-image]: https://codecov.io/gh/jsx-eslint/jsx-ast-utils/branch/main/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/jsx-eslint/jsx-ast-utils/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/jsx-eslint/jsx-ast-utils\n[actions-url]: https://github.com/jsx-eslint/jsx-ast-utils/actions\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2016 Ethan Cohen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jsx-ast-utils/-/jsx-ast-utils-3.3.3.tgz#76b3e6e6cece5c69d49a5792c3d01bd1a0cdc7ea",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jsx-ast-utils/-/jsx-ast-utils-3.3.3.tgz",
    "hash": "76b3e6e6cece5c69d49a5792c3d01bd1a0cdc7ea",
    "integrity": "sha512-fYQHZTZ8jSfmWZ0iyzfwiU4WDX4HpHbMCZ3gPlWYiCl3BoeOTsqKBqnTVfH2rYT7eP5c3sVbeSPHnnJOaTrWiw==",
    "registry": "npm",
    "packageName": "jsx-ast-utils",
    "cacheIntegrity": "sha512-fYQHZTZ8jSfmWZ0iyzfwiU4WDX4HpHbMCZ3gPlWYiCl3BoeOTsqKBqnTVfH2rYT7eP5c3sVbeSPHnnJOaTrWiw== sha1-drPm5s7OXGnUmleSw9Ab0aDNx+o="
  },
  "registry": "npm",
  "hash": "76b3e6e6cece5c69d49a5792c3d01bd1a0cdc7ea"
}