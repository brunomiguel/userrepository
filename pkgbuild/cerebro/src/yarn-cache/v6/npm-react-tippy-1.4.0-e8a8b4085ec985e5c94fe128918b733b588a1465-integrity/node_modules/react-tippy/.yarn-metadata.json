{
  "manifest": {
    "name": "react-tippy",
    "version": "1.4.0",
    "description": "React tippy",
    "main": "dist/react-tippy.js",
    "files": [
      "dist",
      "index.d.ts"
    ],
    "author": {
      "name": "Khoa Thai"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/tvkhoa/react-tippy.git"
    },
    "bugs": {
      "url": "https://github.com/tvkhoa/react-tippy/issues"
    },
    "homepage": "https://github.com/tvkhoa/react-tippy",
    "devDependencies": {
      "babel": "^6.23.0",
      "babel-core": "^6.24.0",
      "babel-eslint": "^7.2.0",
      "babel-loader": "^6.4.1",
      "babel-plugin-add-module-exports": "^0.2.1",
      "babel-plugin-lodash": "^3.2.11",
      "babel-plugin-transform-flow-strip-types": "^6.22.0",
      "babel-plugin-transform-object-rest-spread": "^6.23.0",
      "babel-preset-es2015": "^6.24.0",
      "babel-preset-react": "^6.24.1",
      "chai": "^3.5.0",
      "eslint": "^4.18.2",
      "eslint-loader": "^1.6.3",
      "eslint-plugin-import": "^2.2.0",
      "flow-bin": "^0.42.0",
      "lodash-webpack-plugin": "^0.11.2",
      "mocha": "^3.2.0",
      "react": "^15.5.3",
      "react-dom": "^15.5.3",
      "react-redux": "^5.0.5",
      "react-scripts": "0.9.5",
      "recompose": "^0.23.1",
      "redux": "^3.7.1",
      "redux-state-action": "^1.0.8",
      "redux-thunk": "^2.2.0",
      "webpack": "^2.3.0",
      "yargs": "^7.0.2",
      "@types/react": "*"
    },
    "dependencies": {
      "popper.js": "^1.11.1"
    },
    "scripts": {
      "build": "webpack --config webpacklib.config.js --env build",
      "start": "react-scripts start"
    },
    "typings": "./index.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-tippy-1.4.0-e8a8b4085ec985e5c94fe128918b733b588a1465-integrity/node_modules/react-tippy/package.json",
    "readmeFilename": "README.md",
    "readme": "## React Tippy\n\n[![React Version](https://img.shields.io/badge/react-16.x-blue)](https://reactjs.org/)\n\nA lightweight tooltip for React. Demo at [Demo page here...](https://tvkhoa.github.io/testlib)\n\nBased on `tippy.js` and powered by `Popper.js`\n\n![Example](https://raw.githubusercontent.com/tvkhoa/react-tippy/master/doc/doc.gif)\n\n\n## Why you should use it?\n\nIt is designed to work friendly with React, it provides `<Tooltip>` element or a higher-order component.\n\nIt uses `React DOM` to render tooltip content. Therefore, you can fully use it in your React project without doubt.\n\nIt is an enhancement of Tippy.js for using in React.\n\n\n\n## Getting Started\n\n```\nyarn add react-tippy\n\n```\n\n## How to use\n\nFirst, you need import css\n\n```javascript\nimport 'react-tippy/dist/tippy.css'\n\n```\n\nThere are 2 ways for you to use react Tippy\n\n### Tooltip Component\n\n```javascript\nimport {\n  Tooltip,\n} from 'react-tippy';\n\n\n<Tooltip\n  // options\n  title=\"Welcome to React\"\n  position=\"bottom\"\n  trigger=\"click\"\n>\n  <p>\n    Click here to show popup\n  </p>\n</Tooltip>\n\n```\n\n### High Order Component\n\n`withTooltip(Component, options)`\n\n\n```javascript\nimport {\n  withTooltip,\n} from 'react-tippy';\n\n\nconst Header = () => (\n  <h2>Header here</h2>\n);\n\nconst HeaderWithTooltip = withTooltip(Header, {\n  title: 'Welcome to React with tooltip',\n});\n\n```\n\n\n## Props\n\n|Setting|Default|Options|Role|\n|--- |--- |--- |--- |\n|disabled|`false`|`true` `false`|Show or not show tooltip|\n|open|`undefined`|`true` `false`|Just only use it if you want to `show/hide it manually`. Usually, you don't need it|\n|useContext|`undefined`|`true` `false`|Define that you're using context in your tooltip content (or `html` props). It's useful when you want your tooltip content can connect to redux store|\n|onRequestClose|`noop function`|Function|Just only use it if you want to `show/hide it manually`. This event is fired when you click outside of your tooltip, should be used with the prop `interaction` to keep your tooltip showing|\n|position|`top`|`top` `bottom` `left` `right`|Specifies which direction to position the tooltip on the element. Add the suffix `-start` or `-end` to shift the position. `top-end` is an example.|\n|trigger|`mouseenter focus`|`mouseenter` `focus` `click` `manual`|Specifies which type of events will trigger a tooltip to show. Separate each by a space. mouseenter is for hovering and touch on mobile, and focus is for keyboard navigation. Use manual if you want to show/hide the tooltip manually/programmatically (see below).|\n|tabIndex|`undefined`|number|set tabIndex so element can receive focus|\n|interactive|`false`|`true` `false`|Makes a tooltip interactive, i.e. will not close when the user hovers over or clicks on the tooltip. This lets you create a popover (similar to Bootstrap) when used in conjunction with a click trigger.|\n|interactiveBorder|2|Any number (pixels)|Specifies the size of the invisible border around an interactive tooltip that will prevent it from closing. Only applies to `mouseenter` triggered tooltips.|\n|delay|0|Any integer >= 0 (milliseconds)|Specifies how long it takes after a trigger event is fired for a tooltip to show.|\n|hideDelay|0|Any integer >= 0 (milliseconds)|Specifies how long it takes after a leave event is fired for a tooltip to hide. Not applicable when clicking on the document to hide tooltips.|\n|animation|`shift`|`shift` `perspective` `fade` `scale` `none`|Specifies the type of transition animation a tooltip has.|\n|arrow|`false`|`true` `false`|Adds an arrow pointing to the tooltipped element. Setting this to true disables animateFill.|\n|arrowSize|`regular`|`small` `regular` `big`|Specifies how big the tooltip's arrow is.|\n|animateFill|`true`|`true` `false`|Adds a material design-esque filling animation. This is disabled if you have arrow set to true.|\n|duration|375|Any integer >= 0 (milliseconds)|Specifies how long the transition animation takes to complete when showing a tooltip.|\n|distance|10|Any number (pixels)|Specifies how far away the tooltip is from its element.|\n|offset|0|Any number (pixels)|Offsets the tooltip on its opposite axis. For position top and bottom, it acts as offsetX. For position left and right, it acts as offsetY.|\n|hideOnClick|`true`|`true` `false` `'persistent'`|Specifies whether to hide a tooltip upon clicking its element after hovering over.|\n|multiple|`false`|`true` `false`|Specifies whether to allow multiple tooltips open on the page (click trigger only).|\n|followCursor|`false`|`true` `false`|Specifies whether to follow the user's mouse cursor (mouse devices only).|\n|inertia|`false`|`true` `false`|Modifies the transition-timing-function with a cubic bezier to create a \"slingshot\" intertial effect.|\n|transitionFlip|`true`|`true` `false`|Specifies whether to transition between flips or not. Uses the same transition timing as duration|\n|popperOptions|{}|Object|Allows more control over tooltip positioning and behavior. See right below.|\n|html|null|react element|Tooltip content. If you don't define html, the title will be used|\n|rawTemplate|undefined|`template id` or `dom element`|USED WITH CAUTION. Support creating html templates from tippyjs. But IMO, it's not good to render raw html in React, it's a way to work around if you want to render some complex html generated by 3rd party such as SVG chart(in case you can not find React lib to render chart)|\n|unmountHTMLWhenHide|`false`|`true` `false`|By default, html component will be mounted at first show and unmount only when your tooltip component is unmounted. When you set unmountHTMLWhenHide is `true`, it will be unmounted whenever tooltip is hidden.|\n|size|`regular`|`small` `regular` `big`|Specifies how big the tooltip is.|\n|sticky|`false`|`true` `false`|Specifies whether the tooltip should stick to its element reference when it's showing (for example, if the element is animated/moves).|\n|stickyDuration|200|Any number (milliseconds)|Specifies the 'smoothing' transition when the popper's position updates as its element moves.|\n|tag|`div`|A HTML element tag name e.g. `span`|Specifies the HTML element used to wrap the content that triggers the tooltip. When using a tooltip inline, `span` is more likely to be valid markup. When using a higher-order component with a block-level element, a `div` or `a` is more likely to be valid markup.|\n|touchHold|false|`true` `false`|Changes the trigger behavior on touch devices. It will change it from a tap to show and tap off to hide, to a tap and hold to show, and a release to hide.|\n|onShow|noop|function|Callback when the tooltip has been triggered and has started to transition in|\n|onShown|noop|function|Callback when the tooltip has fully transitioned in and is showing|\n|onHide|noop|function|Callback when the tooltip has begun to transition out|\n|onHidden|noop|function|Callback when the tooltip has fully transitioned out and is hidden|\n|theme|`dark`|`dark` `light` `transparent`|The CSS styling theme.|\n|className|''|string|className of container|\n|style|{}|React inline style (object)|style of container|\n\n\n## Custom tooltip content\n\nYou need to pass element to option `html`\n\n```javascript\nimport {\n  Tooltip,\n} from 'react-tippy';\n\n\n<Tooltip\n  html={(\n    <div>\n      <strong>\n        Hello\n      </strong>\n    </div>\n  )}\n>\n  // ...\n</Tooltip>\n\n```\n\n## Interactive html tooltip\nYou can use `interactive` prop and `html` for your interactive tooltip\n\n```javascript\n  <Tooltip\n    trigger=\"click\"\n    interactive\n    html={(\n      <div>\n        <p>{tooltipContent}</p>\n        <input\n          type=\"text\"\n          value={tooltipContent}\n          onChange={(e) => {setTooltipContent(e.target.value)}}\n        />\n      </div>\n    )}\n  >\n    ...\n  </Tooltip>\n```\n\n## Show/hide your tooltip manually\n\n```javascript\n<Tooltip\n  title={tooltipContent}\n  open={open}\n  onRequestClose={() => {console.log('call'); setIsOpen(false)}}\n>\n  <span className=\"App-intro\" onClick={() => { setIsOpen(true) }}>\n    This will show {tooltipContent}\n  </span>\n</Tooltip>\n```\n\n## Browser support\n\nTippy gracefully degrades on older browsers (and with JavaScript disabled) by using the browser's default title tooltip.\n\nIf you want to support older browsers, please add `polyfill` by yourself.\n\n### Supported browsers\n\nBrowsers which support requestAnimationFrame. See [caniuse](https://caniuse.com/#search=requestAnimationFrame). If your audience has low Opera Mini usage (common in western countries), then support should be >96%.\n\n### Touch devices\n\nTippy works on touch devices almost the same as on desktop/mouse devices. However on iOS devices, in order for tooltips to close when tapping anywhere on the body and to trigger hover events on non-clickable elements, a .tippy-touch { cursor: pointer !important; } class is added to the body.\n\n## Accessibility\n\nTooltips have ARIA labelling to ensure accessibility.\n\n\n# Troubleshoot\n\n## I cannot connect html props with redux connect. Or can I use context in tooltip content?\n\nreact-tippy provides `useContext` for Tooltip component. It can allow you to use context in tooltip content. Therefore, you can totally connect it to redux.\n\n```javascript\n<Tooltip\n  trigger=\"click\"\n  useContext\n  html={(\n    <TooltipContent />\n  )}\n>\n  Click here\n</Tooltip>\n```\n\n## Could I change tooltip style (width, height, ...)?\n\nYou can change css to have your tooltip width. If you use `html` props, you can do like this:\n\n```javascript\nhtml={(\n  <div style={{ width: 400 }}>\n    // content here\n  </div>\n)}\n```\n\n\n# License\nMIT. Also check Popper.js' license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-tippy/-/react-tippy-1.4.0.tgz#e8a8b4085ec985e5c94fe128918b733b588a1465",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-tippy/-/react-tippy-1.4.0.tgz",
    "hash": "e8a8b4085ec985e5c94fe128918b733b588a1465",
    "integrity": "sha512-r/hM5XK9Ztr2ZY7IWKuRmISTlUPS/R6ddz6PO2EuxCgW+4JBcGZRPU06XcVPRDCOIiio8ryBQFrXMhFMhsuaHA==",
    "registry": "npm",
    "packageName": "react-tippy",
    "cacheIntegrity": "sha512-r/hM5XK9Ztr2ZY7IWKuRmISTlUPS/R6ddz6PO2EuxCgW+4JBcGZRPU06XcVPRDCOIiio8ryBQFrXMhFMhsuaHA== sha1-6Ki0CF7JheXJT+EokYtzO1iKFGU="
  },
  "registry": "npm",
  "hash": "e8a8b4085ec985e5c94fe128918b733b588a1465"
}