{
  "manifest": {
    "name": "dotenv",
    "version": "16.0.3",
    "description": "Loads environment variables from .env file",
    "main": "lib/main.js",
    "types": "lib/main.d.ts",
    "exports": {
      ".": {
        "require": "./lib/main.js",
        "types": "./lib/main.d.ts",
        "default": "./lib/main.js"
      },
      "./config": "./config.js",
      "./config.js": "./config.js",
      "./lib/env-options": "./lib/env-options.js",
      "./lib/env-options.js": "./lib/env-options.js",
      "./lib/cli-options": "./lib/cli-options.js",
      "./lib/cli-options.js": "./lib/cli-options.js",
      "./package.json": "./package.json"
    },
    "scripts": {
      "dts-check": "tsc --project tests/types/tsconfig.json",
      "lint": "standard",
      "lint-readme": "standard-markdown",
      "pretest": "npm run lint && npm run dts-check",
      "test": "tap tests/*.js --100 -Rspec",
      "prerelease": "npm test",
      "release": "standard-version"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/motdotla/dotenv.git"
    },
    "keywords": [
      "dotenv",
      "env",
      ".env",
      "environment",
      "variables",
      "config",
      "settings"
    ],
    "readmeFilename": "README.md",
    "license": "BSD-2-Clause",
    "devDependencies": {
      "@types/node": "^17.0.9",
      "decache": "^4.6.1",
      "dtslint": "^3.7.0",
      "sinon": "^12.0.1",
      "standard": "^16.0.4",
      "standard-markdown": "^7.1.0",
      "standard-version": "^9.3.2",
      "tap": "^15.1.6",
      "tar": "^6.1.11",
      "typescript": "^4.5.4"
    },
    "engines": {
      "node": ">=12"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dotenv-16.0.3-115aec42bac5053db3c456db30cc243a5a836a07-integrity/node_modules/dotenv/package.json",
    "readme": "<div align=\"center\">\n\n<p>\n  <sup>\n    <a href=\"https://github.com/sponsors/motdotla\">Dotenv is supported by the community.</a>\n  </sup>\n</p>\n<sup>Special thanks to:</sup>\n<br>\n<br>\n<a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=dotenv_p_20220831\">\n  <div>\n    <img src=\"https://res.cloudinary.com/dotenv-org/image/upload/v1661980709/warp_hi8oqj.png\" width=\"230\" alt=\"Warp\">\n  </div>\n  <b>Warp is a blazingly fast, Rust-based terminal reimagined to work like a modern app.</b>\n  <div>\n    <sup>Get more done in the CLI with real text editing, block-based output, and AI command search.</sup>\n  </div>\n</a>\n<br>\n<a href=\"https://retool.com/?utm_source=sponsor&utm_campaign=dotenv\">\n  <div>\n    <img src=\"https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_300/v1664466968/logo-full-black_vidfqf.png\" width=\"270\" alt=\"Retool\">\n  </div>\n  <b>Retool helps developers build custom internal software, like CRUD apps and admin panels, really fast.</b>\n  <div>\n    <sup>Build UIs visually with flexible components, connect to any data source, and write business logic in JavaScript.</sup>\n  </div>\n</a>\n<hr>\n<br>\n<br>\n<br>\n<br>\n\n</div>\n\n[![dotenv-vault](https://badge.dotenv.org/works-with.svg?r=1)](https://www.dotenv.org/r/github.com/dotenv-org/dotenv-vault?r=1) \n\n# dotenv\n\n<img src=\"https://raw.githubusercontent.com/motdotla/dotenv/master/dotenv.svg\" alt=\"dotenv\" align=\"right\" width=\"200\" />\n\nDotenv is a zero-dependency module that loads environment variables from a `.env` file into [`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env). Storing configuration in the environment separate from code is based on [The Twelve-Factor App](http://12factor.net/config) methodology.\n\n[![BuildStatus](https://img.shields.io/travis/motdotla/dotenv/master.svg?style=flat-square)](https://travis-ci.org/motdotla/dotenv)\n[![Build status](https://ci.appveyor.com/api/projects/status/github/motdotla/dotenv?svg=true)](https://ci.appveyor.com/project/motdotla/dotenv/branch/master)\n[![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![Coverage Status](https://img.shields.io/coveralls/motdotla/dotenv/master.svg?style=flat-square)](https://coveralls.io/github/motdotla/dotenv?branch=coverall-intergration)\n[![LICENSE](https://img.shields.io/github/license/motdotla/dotenv.svg)](LICENSE)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Featured on Openbase](https://badges.openbase.com/js/featured/dotenv.svg?token=eE0hWPkhC2JGSD4G9hwg5C54EBxjJAyvurGfQsYoKiQ=)](https://openbase.com/js/dotenv?utm_source=embedded&utm_medium=badge&utm_campaign=featured-badge&utm_term=js/dotenv)\n[![Limited Edition Tee Original](https://img.shields.io/badge/Limited%20Edition%20Tee%20%F0%9F%91%95-Original-yellow?labelColor=black&style=plastic)](https://dotenv.gumroad.com/l/original)\n[![Limited Edition Tee Redacted](https://img.shields.io/badge/Limited%20Edition%20Tee%20%F0%9F%91%95-Redacted-gray?labelColor=black&style=plastic)](https://dotenv.gumroad.com/l/redacted)\n\n## Install\n\n```bash\n# install locally (recommended)\nnpm install dotenv --save\n```\n\nOr installing with yarn? `yarn add dotenv`\n\n## Usage\n\nCreate a `.env` file in the root of your project:\n\n```dosini\nS3_BUCKET=\"YOURS3BUCKET\"\nSECRET_KEY=\"YOURSECRETKEYGOESHERE\"\n```\n\nAs early as possible in your application, import and configure dotenv:\n\n```javascript\nrequire('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n```\n\n.. or using ES6?\n\n```javascript\nimport * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\ndotenv.config()\nimport express from 'express'\n```\n\nThat's it. `process.env` now has the keys and values you defined in your `.env` file:\n\n```javascript\nrequire('dotenv').config()\n\n...\n\ns3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})\n```\n\n### Multiline values\n\nIf you need multiline variables, for example private keys, those are now supported (`>= v15.0.0`) with line breaks:\n\n```dosini\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END RSA PRIVATE KEY-----\"\n```\n\nAlternatively, you can double quote strings and use the `\\n` character:\n\n```dosini\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END RSA PRIVATE KEY-----\\n\"\n```\n\n### Comments\n\nComments may be added to your file on their own line or inline:\n\n```dosini\n# This is a comment\nSECRET_KEY=YOURSECRETKEYGOESHERE # comment\nSECRET_HASH=\"something-with-a-#-hash\"\n```\n\nComments begin where a `#` exists, so if your value contains a `#` please wrap it in quotes. This is a breaking change from `>= v15.0.0` and on.\n\n### Parsing\n\nThe engine which parses the contents of your file containing environment variables is available to use. It accepts a String or Buffer and will return an Object with the parsed keys and values.\n\n```javascript\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n### Preload\n\nYou can use the `--require` (`-r`) [command line option](https://nodejs.org/api/cli.html#-r---require-module) to preload dotenv. By doing this, you do not need to require and load dotenv in your application code.\n\n```bash\n$ node -r dotenv/config your_script.js\n```\n\nThe configuration options below are supported as command line arguments in the format `dotenv_config_<option>=value`\n\n```bash\n$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env dotenv_config_debug=true\n```\n\nAdditionally, you can use environment variables to set configuration options. Command line arguments will precede these.\n\n```bash\n$ DOTENV_CONFIG_<OPTION>=value node -r dotenv/config your_script.js\n```\n\n```bash\n$ DOTENV_CONFIG_ENCODING=latin1 DOTENV_CONFIG_DEBUG=true node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env\n```\n\n### Variable Expansion\n\nYou need to add the value of another variable in one of your variables? Use [dotenv-expand](https://github.com/motdotla/dotenv-expand).\n\n### Syncing\n\nYou need to keep `.env` files in sync between machines, environments, or team members? Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault).\n\n## Examples\n\nSee [examples](https://github.com/dotenv-org/examples) of using dotenv with various frameworks, languages, and configurations.\n\n* [nodejs](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs)\n* [nodejs (debug on)](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs-debug)\n* [nodejs (override on)](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs-override)\n* [esm](https://github.com/dotenv-org/examples/tree/master/dotenv-esm)\n* [esm (preload)](https://github.com/dotenv-org/examples/tree/master/dotenv-esm-preload)\n* [typescript](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript)\n* [typescript parse](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript-parse)\n* [typescript config](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript-config)\n* [webpack](https://github.com/dotenv-org/examples/tree/master/dotenv-webpack)\n* [webpack (plugin)](https://github.com/dotenv-org/examples/tree/master/dotenv-webpack2)\n* [react](https://github.com/dotenv-org/examples/tree/master/dotenv-react)\n* [react (typescript)](https://github.com/dotenv-org/examples/tree/master/dotenv-react-typescript)\n* [express](https://github.com/dotenv-org/examples/tree/master/dotenv-express)\n* [nestjs](https://github.com/dotenv-org/examples/tree/master/dotenv-nestjs)\n\n## Documentation\n\nDotenv exposes two functions:\n\n* `config`\n* `parse`\n\n### Config\n\n`config` will read your `.env` file, parse the contents, assign it to\n[`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env),\nand return an Object with a `parsed` key containing the loaded content or an `error` key if it failed.\n\n```js\nconst result = dotenv.config()\n\nif (result.error) {\n  throw result.error\n}\n\nconsole.log(result.parsed)\n```\n\nYou can additionally, pass options to `config`.\n\n#### Options\n\n##### Path\n\nDefault: `path.resolve(process.cwd(), '.env')`\n\nSpecify a custom path if your file containing environment variables is located elsewhere.\n\n```js\nrequire('dotenv').config({ path: '/custom/path/to/.env' })\n```\n\n##### Encoding\n\nDefault: `utf8`\n\nSpecify the encoding of your file containing environment variables.\n\n```js\nrequire('dotenv').config({ encoding: 'latin1' })\n```\n\n##### Debug\n\nDefault: `false`\n\nTurn on logging to help debug why certain keys or values are not being set as you expect.\n\n```js\nrequire('dotenv').config({ debug: process.env.DEBUG })\n```\n\n##### Override\n\nDefault: `false`\n\nOverride any environment variables that have already been set on your machine with values from your .env file.\n\n```js\nrequire('dotenv').config({ override: true })\n```\n\n### Parse\n\nThe engine which parses the contents of your file containing environment\nvariables is available to use. It accepts a String or Buffer and will return\nan Object with the parsed keys and values.\n\n```js\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n#### Options\n\n##### Debug\n\nDefault: `false`\n\nTurn on logging to help debug why certain keys or values are not being set as you expect.\n\n```js\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('hello world')\nconst opt = { debug: true }\nconst config = dotenv.parse(buf, opt)\n// expect a debug message because the buffer is not in KEY=VAL form\n```\n\n## FAQ\n\n### Why is the `.env` file not loading my environment variables successfully?\n\nMost likely your `.env` file is not in the correct place. [See this stack overflow](https://stackoverflow.com/questions/42335016/dotenv-file-is-not-loading-environment-variables).\n\nTurn on debug mode and try again..\n\n```js\nrequire('dotenv').config({ debug: true })\n```\n\nYou will receive a helpful error outputted to your console.\n\n### Should I commit my `.env` file?\n\nNo. We **strongly** recommend against committing your `.env` file to version\ncontrol. It should only include environment-specific values such as database\npasswords or API keys. Your production database should have a different\npassword than your development database.\n\n### Should I have multiple `.env` files?\n\nNo. We **strongly** recommend against having a \"main\" `.env` file and an \"environment\" `.env` file like `.env.test`. Your config should vary between deploys, and you should not be sharing values between environments.\n\n> In a twelve-factor app, env vars are granular controls, each fully orthogonal to other env vars. They are never grouped together as “environments”, but instead are independently managed for each deploy. This is a model that scales up smoothly as the app naturally expands into more deploys over its lifetime.\n>\n> – [The Twelve-Factor App](http://12factor.net/config)\n\n### What rules does the parsing engine follow?\n\nThe parsing engine currently supports the following rules:\n\n- `BASIC=basic` becomes `{BASIC: 'basic'}`\n- empty lines are skipped\n- lines beginning with `#` are treated as comments\n- `#` marks the beginning of a comment (unless when the value is wrapped in quotes)\n- empty values become empty strings (`EMPTY=` becomes `{EMPTY: ''}`)\n- inner quotes are maintained (think JSON) (`JSON={\"foo\": \"bar\"}` becomes `{JSON:\"{\\\"foo\\\": \\\"bar\\\"}\"`)\n- whitespace is removed from both ends of unquoted values (see more on [`trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)) (`FOO=  some value  ` becomes `{FOO: 'some value'}`)\n- single and double quoted values are escaped (`SINGLE_QUOTE='quoted'` becomes `{SINGLE_QUOTE: \"quoted\"}`)\n- single and double quoted values maintain whitespace from both ends (`FOO=\"  some value  \"` becomes `{FOO: '  some value  '}`)\n- double quoted values expand new lines (`MULTILINE=\"new\\nline\"` becomes\n\n```\n{MULTILINE: 'new\nline'}\n```\n\n- backticks are supported (`` BACKTICK_KEY=`This has 'single' and \"double\" quotes inside of it.` ``)\n\n### What happens to environment variables that were already set?\n\nBy default, we will never modify any environment variables that have already been set. In particular, if there is a variable in your `.env` file which collides with one that already exists in your environment, then that variable will be skipped.\n\nIf instead, you want to override `process.env` use the `override` option.\n\n```javascript\nrequire('dotenv').config({ override: true })\n```\n\n### How come my environment variables are not showing up for React?\n\nYour React code is run in Webpack, where the `fs` module or even the `process` global itself are not accessible out-of-the-box. `process.env` can only be injected through Webpack configuration.\n\nIf you are using [`react-scripts`](https://www.npmjs.com/package/react-scripts), which is distributed through [`create-react-app`](https://create-react-app.dev/), it has dotenv built in but with a quirk. Preface your environment variables with `REACT_APP_`. See [this stack overflow](https://stackoverflow.com/questions/42182577/is-it-possible-to-use-dotenv-in-a-react-project) for more details.\n\nIf you are using other frameworks (e.g. Next.js, Gatsby...), you need to consult their documentation for how to inject environment variables into the client.\n\n### Can I customize/write plugins for dotenv?\n\nYes! `dotenv.config()` returns an object representing the parsed `.env` file. This gives you everything you need to continue setting values on `process.env`. For example:\n\n```js\nconst dotenv = require('dotenv')\nconst variableExpansion = require('dotenv-expand')\nconst myEnv = dotenv.config()\nvariableExpansion(myEnv)\n```\n\n### How do I use dotenv with `import`?\n\nSimply..\n\n```javascript\n// index.mjs (ESM)\nimport * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\ndotenv.config()\nimport express from 'express'\n```\n\nA little background..\n\n> When you run a module containing an `import` declaration, the modules it imports are loaded first, then each module body is executed in a depth-first traversal of the dependency graph, avoiding cycles by skipping anything already executed.\n>\n> – [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)\n\nWhat does this mean in plain language? It means you would think the following would work but it won't.\n\n```js\n// errorReporter.mjs\nimport { Client } from 'best-error-reporting-service'\n\nexport default new Client(process.env.API_KEY)\n\n// index.mjs\nimport dotenv from 'dotenv'\ndotenv.config()\n\nimport errorReporter from './errorReporter.mjs'\nerrorReporter.report(new Error('documented example'))\n```\n\n`process.env.API_KEY` will be blank.\n\nInstead the above code should be written as..\n\n```js\n// errorReporter.mjs\nimport { Client } from 'best-error-reporting-service'\n\nexport default new Client(process.env.API_KEY)\n\n// index.mjs\nimport * as dotenv from 'dotenv'\ndotenv.config()\n\nimport errorReporter from './errorReporter.mjs'\nerrorReporter.report(new Error('documented example'))\n```\n\nDoes that make sense? It's a bit unintuitive, but it is how importing of ES6 modules work. Here is a [working example of this pitfall](https://github.com/dotenv-org/examples/tree/master/dotenv-es6-import-pitfall).\n\nThere are two alternatives to this approach:\n\n1. Preload dotenv: `node --require dotenv/config index.js` (_Note: you do not need to `import` dotenv with this approach_)\n2. Create a separate file that will execute `config` first as outlined in [this comment on #133](https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822)\n\n### What about variable expansion?\n\nTry [dotenv-expand](https://github.com/motdotla/dotenv-expand)\n\n### What about syncing and securing .env files?\n\nUse [dotenv-vault](https://github.com/dotenv-org/dotenv-vault)\n\n## Contributing Guide\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## CHANGELOG\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n## Who's using dotenv?\n\n[These npm modules depend on it.](https://www.npmjs.com/browse/depended/dotenv)\n\nProjects that expand it often use the [keyword \"dotenv\" on npm](https://www.npmjs.com/search?q=keywords:dotenv).\n",
    "licenseText": "Copyright (c) 2015, Scott Motte\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dotenv/-/dotenv-16.0.3.tgz#115aec42bac5053db3c456db30cc243a5a836a07",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dotenv/-/dotenv-16.0.3.tgz",
    "hash": "115aec42bac5053db3c456db30cc243a5a836a07",
    "integrity": "sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ==",
    "registry": "npm",
    "packageName": "dotenv",
    "cacheIntegrity": "sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ== sha1-EVrsQrrFBT2zxFbbMMwkOlqDagc="
  },
  "registry": "npm",
  "hash": "115aec42bac5053db3c456db30cc243a5a836a07"
}