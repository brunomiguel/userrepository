/*!
 * @pixi/extract - v6.2.0
 * Compiled Mon, 01 Nov 2021 16:52:10 UTC
 *
 * @pixi/extract is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("@pixi/utils"),math=require("@pixi/math"),core=require("@pixi/core"),TEMP_RECT=new math.Rectangle,BYTES_PER_PIXEL=4,Extract=function(){function e(e){this.renderer=e}return e.prototype.image=function(e,r,t){var n=new Image;return n.src=this.base64(e,r,t),n},e.prototype.base64=function(e,r,t){return this.canvas(e).toDataURL(r,t)},e.prototype.canvas=function(r){var t,n,a,i=this.renderer,o=!1,s=!1;r&&(r instanceof core.RenderTexture?a=r:(a=this.renderer.generateTexture(r),s=!0)),a?(t=a.baseTexture.resolution,n=a.frame,o=!1,i.renderTexture.bind(a)):(t=this.renderer.resolution,o=!0,(n=TEMP_RECT).width=this.renderer.width,n.height=this.renderer.height,i.renderTexture.bind(null));var d=Math.floor(n.width*t+1e-4),h=Math.floor(n.height*t+1e-4),u=new utils.CanvasRenderTarget(d,h,1),c=new Uint8Array(BYTES_PER_PIXEL*d*h),x=i.gl;x.readPixels(n.x*t,n.y*t,d,h,x.RGBA,x.UNSIGNED_BYTE,c);var l=u.context.getImageData(0,0,d,h);if(e.arrayPostDivide(c,l.data),u.context.putImageData(l,0,0),o){var T=new utils.CanvasRenderTarget(u.width,u.height,1);T.context.scale(1,-1),T.context.drawImage(u.canvas,0,-h),u.destroy(),u=T}return s&&a.destroy(!0),u.canvas},e.prototype.pixels=function(r){var t,n,a,i=this.renderer,o=!1;r&&(r instanceof core.RenderTexture?a=r:(a=this.renderer.generateTexture(r),o=!0)),a?(t=a.baseTexture.resolution,n=a.frame,i.renderTexture.bind(a)):(t=i.resolution,(n=TEMP_RECT).width=i.width,n.height=i.height,i.renderTexture.bind(null));var s=n.width*t,d=n.height*t,h=new Uint8Array(BYTES_PER_PIXEL*s*d),u=i.gl;return u.readPixels(n.x*t,n.y*t,s,d,u.RGBA,u.UNSIGNED_BYTE,h),o&&a.destroy(!0),e.arrayPostDivide(h,h),h},e.prototype.destroy=function(){this.renderer=null},e.arrayPostDivide=function(e,r){for(var t=0;t<e.length;t+=4){var n=r[t+3]=e[t+3];0!==n?(r[t]=Math.round(Math.min(255*e[t]/n,255)),r[t+1]=Math.round(Math.min(255*e[t+1]/n,255)),r[t+2]=Math.round(Math.min(255*e[t+2]/n,255))):(r[t]=e[t],r[t+1]=e[t+1],r[t+2]=e[t+2])}},e}();exports.Extract=Extract;
//# sourceMappingURL=extract.min.js.map
