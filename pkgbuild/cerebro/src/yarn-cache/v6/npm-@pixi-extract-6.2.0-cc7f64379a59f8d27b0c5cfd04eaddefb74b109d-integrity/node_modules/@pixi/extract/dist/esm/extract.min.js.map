{"version":3,"file":"extract.min.js","sources":["../../src/Extract.ts"],"sourcesContent":["import { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\nexport class Extract implements IRendererPlugin\n{\n    private renderer: Renderer;\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    public image(target: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // we can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject|RenderTexture): Uint8Array\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param {number[] | Uint8Array | Uint8ClampedArray} pixels - array of pixel data\n     * @param {number[] | Uint8Array | Uint8ClampedArray} out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"names":["TEMP_RECT","Rectangle","renderer","this","Extract","target","format","quality","image","Image","src","base64","canvas","toDataURL","resolution","frame","renderTexture","flipY","generated","RenderTexture","generateTexture","baseTexture","bind","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","pixels","out","i","length","alpha","round","min"],"mappings":"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"}