"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getOptions;

var _schemaUtils = require("schema-utils");

var _options = _interopRequireDefault(require("./options.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @typedef {import("stylelint")} stylelint */

/**
 * @typedef {Object} Options
 * @property {string=} context
 * @property {boolean=} emitError
 * @property {boolean=} emitWarning
 * @property {boolean=} failOnError
 * @property {boolean=} failOnWarning
 * @property {Array<string> | string} files
 * @property {Function | string} formatter
 * @property {boolean=} lintDirtyModulesOnly
 * @property {boolean=} quiet
 * @property {string} stylelintPath
 */

/**
 * @param {Partial<Options>} pluginOptions
 * @returns {Options}
 */
function getOptions(pluginOptions) {
  const options = {
    files: '**/*.(s(c|a)ss|css)',
    formatter: 'string',
    stylelintPath: 'stylelint',
    ...pluginOptions
  }; // @ts-ignore

  (0, _schemaUtils.validate)(_options.default, options, {
    name: 'Stylelint Webpack Plugin',
    baseDataPath: 'options'
  }); // eslint-disable-next-line

  const stylelint = require(options.stylelintPath);

  options.formatter = getFormatter(stylelint, options.formatter);
  return options;
}
/**
 * @param {stylelint} stylelint
 * @param {Function | string} formatter
 * @returns {Function}
 */


function getFormatter({
  formatters
}, formatter) {
  if (typeof formatter === 'function') {
    return formatter;
  } // Try to get oficial formatter


  if (typeof formatter === 'string' && // @ts-ignore
  typeof formatters[formatter] === 'function') {
    // @ts-ignore
    return formatters[formatter];
  }

  return formatters.string;
}