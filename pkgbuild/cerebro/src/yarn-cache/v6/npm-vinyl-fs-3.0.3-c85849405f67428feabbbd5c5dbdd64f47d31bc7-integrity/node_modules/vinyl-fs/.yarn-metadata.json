{
  "manifest": {
    "name": "vinyl-fs",
    "version": "3.0.3",
    "description": "Vinyl adapter for the file system.",
    "author": {
      "name": "Gulp Team",
      "email": "team@gulpjs.com",
      "url": "http://gulpjs.com/"
    },
    "contributors": [
      {
        "name": "Eric Schoffstall",
        "email": "yo@contra.io"
      },
      {
        "name": "Blaine Bublitz",
        "email": "blaine.bublitz@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gulpjs/vinyl-fs.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 0.10"
    },
    "main": "index.js",
    "files": [
      "LICENSE",
      "index.js",
      "lib"
    ],
    "scripts": {
      "lint": "eslint . && jscs index.js lib/ test/",
      "pretest": "npm run lint",
      "test": "mocha --async-only",
      "cover": "istanbul cover _mocha --report lcovonly",
      "coveralls": "npm run cover && istanbul-coveralls"
    },
    "dependencies": {
      "fs-mkdirp-stream": "^1.0.0",
      "glob-stream": "^6.1.0",
      "graceful-fs": "^4.0.0",
      "is-valid-glob": "^1.0.0",
      "lazystream": "^1.0.0",
      "lead": "^1.0.0",
      "object.assign": "^4.0.4",
      "pumpify": "^1.3.5",
      "readable-stream": "^2.3.3",
      "remove-bom-buffer": "^3.0.0",
      "remove-bom-stream": "^1.2.0",
      "resolve-options": "^1.1.0",
      "through2": "^2.0.0",
      "to-through": "^2.0.0",
      "value-or-function": "^3.0.0",
      "vinyl": "^2.0.0",
      "vinyl-sourcemap": "^1.1.0"
    },
    "devDependencies": {
      "eslint": "^1.10.3",
      "eslint-config-gulp": "^2.0.0",
      "expect": "^1.19.0",
      "istanbul": "^0.4.3",
      "istanbul-coveralls": "^1.0.3",
      "jscs": "^2.4.0",
      "jscs-preset-gulp": "^1.0.0",
      "mississippi": "^1.2.0",
      "mocha": "^3.5.0",
      "rimraf": "^2.6.1"
    },
    "keywords": [
      "gulp",
      "vinyl-adapter",
      "vinyl",
      "file",
      "file system",
      "fs",
      "streams"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-vinyl-fs-3.0.3-c85849405f67428feabbbd5c5dbdd64f47d31bc7-integrity/node_modules/vinyl-fs/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# vinyl-fs\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\n[Vinyl][vinyl] adapter for the file system.\n\n## What is Vinyl?\n\n[Vinyl][vinyl] is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: `path` and `contents`. These are the main attributes on a [Vinyl][vinyl] object. A file does not necessarily represent something on your computerâ€™s file system. You have files on S3, FTP, Dropbox, Box, CloudThingly.io and other services. [Vinyl][vinyl] can be used to describe files from all of these sources.\n\n## What is a Vinyl Adapter?\n\nWhile Vinyl provides a clean way to describe a file, we now need a way to access these files. Each file source needs what we call a \"Vinyl adapter\". A Vinyl adapter simply exposes a `src(globs)` and a `dest(folder)` method. Each return a stream. The `src` stream produces Vinyl objects, and the `dest` stream consumes Vinyl objects. Vinyl adapters can expose extra methods that might be specific to their input/output medium, such as the `symlink` method `vinyl-fs` provides.\n\n## Usage\n\n```javascript\nvar map = require('map-stream');\nvar vfs = require('vinyl-fs');\n\nvar log = function(file, cb) {\n  console.log(file.path);\n  cb(null, file);\n};\n\nvfs.src(['./js/**/*.js', '!./js/vendor/*.js'])\n  .pipe(map(log))\n  .pipe(vfs.dest('./output'));\n```\n\n## API\n\n### `src(globs[, options])`\n\nTakes a glob string or an array of glob strings as the first argument and an options object as the second.\nReturns a stream of [vinyl] `File` objects.\n\n__Note: UTF-8 BOM will be removed from all UTF-8 files read with `.src` unless disabled in the options.__\n\n#### Globs\n\nGlobs are executed in order, so negations should follow positive globs.\n\nFor example:\n\n```js\nfs.src(['!b*', '*'])\n```\n\nwould not exclude any files, but the following would exclude all files starting with \"b\":\n\n```js\nfs.src(['*', '!b*'])\n```\n\n#### Options\n\n- Values passed to the options must be of the expected type, otherwise they will be ignored.\n- All options can be passed a function instead of a value. The function will be called with the [vinyl] `File` object as its only argument and must return a value of the expected type for that option.\n\n##### `options.buffer`\n\nWhether or not you want to buffer the file contents into memory. Setting to `false` will make `file.contents` a paused Stream.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.read`\n\nWhether or not you want the file to be read at all. Useful for stuff like removing files. Setting to `false` will make `file.contents = null` and will disable writing the file to disk via `.dest()`.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.since`\n\nOnly streams files that have been modified since the time specified.\n\nType: `Date` or `Number`\n\nDefault: `undefined`\n\n##### `options.removeBOM`\n\nCauses the BOM to be removed on UTF-8 encoded files. Set to `false` if you need the BOM for some reason.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.sourcemaps`\n\nEnables sourcemap support on files passed through the stream.  Will load inline sourcemaps and resolve sourcemap links from files.\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.resolveSymlinks`\n\nWhether or not to recursively resolve symlinks to their targets. Set to `false` to preserve them as symlinks and make `file.symlink` equal the original symlink's target path.\n\nType: `Boolean`\n\nDefault: `true`\n\n##### `options.dot`\n\nWhether or not you want globs to match on dot files (e.g. `.gitignore`).\n\n__Note: This option is not resolved from a function because it is passed verbatim to node-glob.__\n\nType: `Boolean`\n\nDefault: `false`\n\n##### other\n\nAny glob-related options are documented in [glob-stream] and [node-glob] and are forwarded verbatim.\n\n### `dest(folder[, options])`\n\nTakes a folder path string or a function as the first argument and an options object as the second. If given a function, it will be called with each [vinyl] `File` object and must return a folder path.\nReturns a stream that accepts [vinyl] `File` objects, writes them to disk at the folder/cwd specified, and passes them downstream so you can keep piping these around.\n\nOnce the file is written to disk, an attempt is made to determine if the `stat.mode`, `stat.mtime` and `stat.atime` of the [vinyl] `File` object differ from the file on the filesystem.\nIf they differ and the running process owns the file, the corresponding filesystem metadata is updated.\nIf they don't differ or the process doesn't own the file, the attempt is skipped silently.\n__This functionality is disabled on Windows operating systems or any other OS that doesn't support `process.getuid` or `process.geteuid` in node. This is due to Windows having very unexpected results through usage of `fs.fchmod` and `fs.futimes`.__\n\n__Note: The `fs.futimes()` method internally converts `stat.mtime` and `stat.atime` timestamps to seconds; this division by `1000` may cause some loss of precision in 32-bit Node.js.__\n\nIf the file has a `symlink` attribute specifying a target path, then a symlink will be created.\n\n__Note: The file will be modified after being written to this stream.__\n  - `cwd`, `base`, and `path` will be overwritten to match the folder.\n  - `stat` will be updated to match the file on the filesystem.\n  - `contents` will have it's position reset to the beginning if it is a stream.\n\n#### Options\n\n- Values passed to the options must be of the expected type, otherwise they will be ignored.\n- All options can be passed a function instead of a value. The function will be called with the [vinyl] `File` object as its only argument and must return a value of the expected type for that option.\n\n##### `options.cwd`\n\nThe working directory the folder is relative to.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.mode`\n\nThe mode the files should be created with. This option is only resolved if the [vinyl] `File` is not symbolic.\n\nType: `Number`\n\nDefault: The `mode` of the input file (`file.stat.mode`) if any, or the process mode if the input file has no `mode` property.\n\n##### `options.dirMode`\n\nThe mode directories should be created with.\n\nType: `Number`\n\nDefault: The process `mode`.\n\n##### `options.overwrite`\n\nWhether or not existing files with the same path should be overwritten.\n\nType: `Boolean`\n\nDefault: `true` (always overwrite existing files)\n\n##### `options.append`\n\nWhether or not new data should be appended after existing file contents (if any).\n\nType: `Boolean`\n\nDefault: `false` (always replace existing contents, if any)\n\n##### `options.sourcemaps`\n\nEnables sourcemap support on files passed through the stream.  Will write inline soucemaps if specified as `true`.\nSpecifying a `String` path will write external sourcemaps at the given path.\n\nExamples:\n\n```js\n// Write as inline comments\nvfs.dest('./', { sourcemaps: true });\n\n// Write as files in the same folder\nvfs.dest('./', { sourcemaps: '.' });\n```\n\nType: `Boolean` or `String`\n\nDefault: `undefined` (do not write sourcemaps)\n\n##### `options.relativeSymlinks`\n\nWhen creating a symlink, whether or not the created symlink should be relative. If `false`, the symlink will be absolute.\n\n__Note: This option will be ignored if a `junction` is being created, as they must be absolute.__\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.useJunctions`\n\nWhen creating a symlink, whether or not a directory symlink should be created as a `junction`.\nThis option is only relevant on Windows and ignored elsewhere. Please refer to the [Symbolic Links on Windows][symbolic-caveats] section below.\n\nType: `Boolean`\n\nDefault: `true`\n\n### `symlink(folder[, options])`\n\nTakes a folder path string or a function as the first argument and an options object as the second. If given a function, it will be called with each [vinyl] `File` object and must return a folder path.\nReturns a stream that accepts [vinyl] `File` objects, creates a symbolic link (i.e. symlink) at the folder/cwd specified, and passes them downstream so you can keep piping these around.\n\n__Note: The file will be modified after being written to this stream.__\n  - `cwd`, `base`, and `path` will be overwritten to match the folder.\n  - `stat` will be updated to match the symlink on the filesystem.\n  - `contents` will be set to `null`.\n  - `symlink` will be added or replaced to be the original path.\n\n__Note: On Windows, directory links are created using Junctions by default. Use the `useJunctions` option to disable this behavior.__\n\n#### Options\n\n- Values passed to the options must be of the expected type, otherwise they will be ignored.\n- All options can be passed a function instead of a value. The function will be called with the [vinyl] `File` object as its only argument and must return a value of the expected type for that option.\n\n##### `options.cwd`\n\nThe working directory the folder is relative to.\n\nType: `String`\n\nDefault: `process.cwd()`\n\n##### `options.dirMode`\n\nThe mode directories should be created with.\n\nType: `Number`\n\nDefault: The process mode.\n\n##### `options.overwrite`\n\nWhether or not existing files with the same path should be overwritten.\n\nType: `Boolean`\n\nDefault: `true` (always overwrite existing files)\n\n##### `options.relativeSymlinks`\n\nWhether or not the created symlinks should be relative. If `false`, the symlink will be absolute.\n\n__Note: This option will be ignored if a `junction` is being created, as they must be absolute.__\n\nType: `Boolean`\n\nDefault: `false`\n\n##### `options.useJunctions`\n\nWhen creating a symlink, whether or not a directory symlink should be created as a `junction`.\nThis option is only relevant on Windows and ignored elsewhere. Please refer to the [Symbolic Links on Windows][symbolic-caveats] section below.\n\nType: `Boolean`\n\nDefault: `true`\n\n#### Symbolic Links on Windows\n\nWhen creating symbolic links on Windows, we pass a `type` argument to Node's\n`fs` module which specifies the kind of target we link to (one of `'file'`,\n`'dir'` or `'junction'`). Specifically, this will be `'file'` when the target\nis a regular file, `'junction'` if the target is a directory, or `'dir'` if\nthe target is a directory and the user overrides the `useJunctions` option\ndefault.\n\nHowever, if the user tries to make a \"dangling\" link (pointing to a non-existent\ntarget) we won't be able to determine automatically which type we should use.\nIn these cases, `vinyl-fs` will behave slightly differently depending on\nwhether the dangling link is being created via `symlink()` or via `dest()`.\n\nFor dangling links created via `symlink()`, the incoming vinyl represents the\ntarget and so we will look to its stats to guess the desired type. In\nparticular, if `isDirectory()` returns false then we'll create a `'file'` type\nlink, otherwise we will create a `'junction'` or a `'dir'` type link depending\non the value of the `useJunctions` option.\n\nFor dangling links created via `dest()`, the incoming vinyl represents the link -\ntypically read off disk via `src()` with the `resolveSymlinks` option set to\nfalse. In this case, we won't be able to make any reasonable guess as to the\ntype of link and we default to using `'file'`, which may cause unexpected behavior\nif you are creating a \"dangling\" link to a directory. It is advised to avoid this\nscenario.\n\n\n[symbolic-caveats]: #symbolic-links-on-windows\n[glob-stream]: https://github.com/gulpjs/glob-stream\n[node-glob]: https://github.com/isaacs/node-glob\n[gaze]: https://github.com/shama/gaze\n[glob-watcher]: https://github.com/wearefractal/glob-watcher\n[vinyl]: https://github.com/wearefractal/vinyl\n\n[downloads-image]: http://img.shields.io/npm/dm/vinyl-fs.svg\n[npm-url]: https://www.npmjs.com/package/vinyl-fs\n[npm-image]: http://img.shields.io/npm/v/vinyl-fs.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/vinyl-fs\n[travis-image]: http://img.shields.io/travis/gulpjs/vinyl-fs.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/vinyl-fs\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/vinyl-fs.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/vinyl-fs\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/vinyl-fs/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013-2017 Blaine Bublitz <blaine.bublitz@gmail.com>, Eric Schoffstall <yo@contra.io> and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vinyl-fs/-/vinyl-fs-3.0.3.tgz#c85849405f67428feabbbd5c5dbdd64f47d31bc7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vinyl-fs/-/vinyl-fs-3.0.3.tgz",
    "hash": "c85849405f67428feabbbd5c5dbdd64f47d31bc7",
    "integrity": "sha512-vIu34EkyNyJxmP0jscNzWBSygh7VWhqun6RmqVfXePrOwi9lhvRs//dOaGOTRUQr4tx7/zd26Tk5WeSVZitgng==",
    "registry": "npm",
    "packageName": "vinyl-fs",
    "cacheIntegrity": "sha512-vIu34EkyNyJxmP0jscNzWBSygh7VWhqun6RmqVfXePrOwi9lhvRs//dOaGOTRUQr4tx7/zd26Tk5WeSVZitgng== sha1-yFhJQF9nQo/qu71cXb3WT0fTG8c="
  },
  "registry": "npm",
  "hash": "c85849405f67428feabbbd5c5dbdd64f47d31bc7"
}