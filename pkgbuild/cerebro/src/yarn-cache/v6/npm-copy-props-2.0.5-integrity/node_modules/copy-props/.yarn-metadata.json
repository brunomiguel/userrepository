{
  "manifest": {
    "name": "copy-props",
    "version": "2.0.5",
    "description": "Copy properties deeply between two objects.",
    "main": "index.js",
    "files": [
      "index.js"
    ],
    "scripts": {
      "lint": "eslint .",
      "test": "mocha",
      "coverage": "nyc --reporter=lcov --reporter=text-summary npm test",
      "coveralls": "nyc --reporter=text-lcov npm test | coveralls",
      "web:build": "browserify index.js --standalone copyProps -o web/copy-props.js && cd web && uglifyjs copy-props.js --compress --mangle -o copy-props.min.js --source-map url=copy-props.min.js.map",
      "chrome:install": "npm i --no-save mocha-chrome",
      "chrome:test": "mocha-chrome test/web/browser-test.html",
      "build": "npm run lint && npm run coverage && npm run web:build && node test/web/make.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/gulpjs/copy-props.git"
    },
    "keywords": [
      "object",
      "property",
      "copy",
      "deep",
      "map",
      "convert"
    ],
    "author": {
      "name": "Gulp Team",
      "email": "team@gulpjs.com",
      "url": "https://gulpjs.com/"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/gulpjs/copy-props/issues"
    },
    "homepage": "https://github.com/gulpjs/copy-props#readme",
    "dependencies": {
      "each-props": "^1.3.2",
      "is-plain-object": "^5.0.0"
    },
    "devDependencies": {
      "browserify": "^16.5.2",
      "chai": "^3.5.0",
      "coveralls": "^3.1.0",
      "eslint": "^7.9.0",
      "eslint-config-gulp": "^5.0.1",
      "mocha": "^3.5.3",
      "nyc": "^15.1.0",
      "uglify-js": "^3.10.4"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-copy-props-2.0.5-integrity/node_modules/copy-props/package.json",
    "readmeFilename": "README.md",
    "readme": "# [copy-props][repo-url] [![NPM][npm-img]][npm-url] [![MIT License][mit-img]][mit-url] [![Build Status][travis-img]][travis-url] [![Build Status][appveyor-img]][appveyor-url] [![Coverage Status][coverage-img]][coverage-url]\n\nCopy properties between two objects deeply.\n\n## Install\n\nTo install from npm:\n\n```sh\n$ npm i copy-props --save\n```\n\n## Load this module\n\nFor Node.js:\n\n```js\nconst copyProps = require('copy-props');\n```\n\nFor Web browser:\n\n```html\n<script src=\"copy-props.min.js\"></script>\n```\n\n## Usage\n\nCopy *src* to *dst* simply (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\nvar dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\ncopyProps(src, dst);\n// => { a: 1, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc' }\n```\n\nCopy *src* to *dst* with property mapping (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\nvar dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\ncopyProps(src, dst, {\n  a: 'f.a',\n  'b.b1': 'f.b1',\n  'b.b2': 'f.b2',\n  'c': 'f.c',\n});\n// => { f: { a: 1, b1: 'bbb', b2: 'yyy', c: 'ccc' }, e: 'zzz' }\n```\n\nCopy *src* to *dst* with convert function (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' } };\nvar dst = { a: 0 };\n\ncopyProps(src, dst, function(srcInfo) {\n  if (srcInfo.keyChain === 'a') {\n    return srcInfo.value * 2;\n  }\n  if (srcInfo.keyChain === 'b.b1') {\n    return srcInfo.value.toUpperCase();\n  }\n});\n// => { a: 2, b: { b1: 'BBB' } }\n```\n\nCan use an array instead of a map as property mapping :\n\n```js\nvar src = { a: 1, b: { c: 'CCC' }, d: { e: 'EEE' } };\nvar dst = { a: 9, b: { c: 'xxx' }, d: { e: 'yyy' } };\nvar fromto = [ 'b.c', 'd.e' ];\ncopyProps(src, dst, fromto);\n// => { a: 9, b: { c: 'CCC' }, d: { e: 'EEE' } }\n```\n\nCan copy reversively (from *dst* to *src*) by reverse flag (and return *src*):\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\nvar dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\ncopyProps(src, dst, true);\n// => { a: 2, b: { b1: 'xxx', b2: 'yyy' }, c: 'ccc' }\n```\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\nvar dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\ncopyProps(src, dst, {\n  a: 'f.a',\n  'b.b2': 'f.b2',\n  'c': 'f.c',\n}, true);\n// => { a: 2, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc', d: 'ddd' }\n```\n\nIf a value of source property is undefined (when not using converter), or a result of converter is undefined (when using converter), the value is not copied.\n\n```js\nvar src = { a: 'A', b: undefined, c: null, d: 1 };\nvar dst = { a: 'a', b: 'b', c: 'c' };\n\ncopyProps(src, dst, function(srcInfo) {\n  if (srcInfo.keyChain === 'd') {\n    return undefined;\n  } else {\n    return srcInfo.value;\n  }\n});\n// => { a: 'A', b: 'b', c: null }\n```\n\nYou can operate the parent node object directly in converter.\n\n```js\nvar src = { a: 1, b: 2 };\nvar dst = {};\n\ncopyProps(src, dst, function(srcInfo, dstInfo) {\n  Object.defineProperty(dstInfo.parent, dstInfo.key, {\n    writable: false,\n    enumerable: true,\n    configurable: false,\n    value: srcInfo.value * 2\n  })\n}); // => { a: 2, b: 4 }\n\ndst // => { a: 2, b: 4 }\ndst.a = 9\ndst // -> { a: 2, b: 4 }\n```\n\n## API\n\n### <u>copyProps(src, dst [, fromto] [, converter] [, reverse]) => object</u>\n\nCopy properties of *src* to *dst* deeply.\nIf *fromto* is given, it is able to copy between different properties.\nIf *converter* is given, it is able to convert the terminal values.\n\n#### Parameters:\n\n| Parameter   |  Type  | Description                                      |\n|:------------|:------:|:-------------------------------------------------|\n| *src*       | object | A source object of copy.                         |\n| *dst*       | object | A destinate object of copy.                      |\n| *fromto*    | object &#124; array | An object mapping properties between *src* and *dst*. (Optional) |\n| *converter* |function| A function to convert terminal values in *src*. (Optional) |\n| *reverse*   |boolean | True, if copying reversively from dst to src and returns src object. `fromto` is also reversively used from value to key. This default value is `false`. (Optional) |\n\n#### Returns:\n\n*dst* object after copying.\n\n**Type:** object\n\n* **Format of <i>fromto</i>**\n\n    *fromto* is a non-nested key-value object. And the *key*s are property key    chains of *src* and the *value*s are property key chains of *dst*. \n    The key chain is a string which is concatenated property keys on each level with dots, like `'aaa.bbb.ccc'`.\n\n    The following example copys the value of `src.aaa.bbb.ccc` to `dst.xxx.yyy`.\n\n    ```js\n    copyProps(src, dst, {\n      'aaa.bbb.ccc' : 'xxx.yyy'\n    })\n    ```\n\n    *fromto* can be an array. In that case, the array works as a map which has pairs of same key and value.\n    \n* **API of <i>converter</i>**\n\n    **<u>converter(srcInfo, dstInfo) : Any</u>**\n\n    *converter* is a function to convert terminal values of propeerties of *src*.\n\n    **Parameters:**\n\n    | Parameter   |  Type  | Description                                  |\n    |:------------|:------:|:---------------------------------------------|\n    | *srcInfo*   | object | An object which has informations about the current node of *src*. |\n    | *dstInfo*   | object | An object which has informations about the current node of *dst*. |\n    \n    **Return:**\n    \n    The converted value to be set as a destination property value. If this value is undefined, the destination property is not set to the destination node object.\n    \n    **Type:** *Any*\n    \n    * **Properties of <i>srcInfo</i> and <i>dstInfo</i>**\n\n        *srcInfo* and *dstInfo* has same properties, as follows:\n    \n        | Property   |  Type  | Description                               |\n        |:-----------|:------:|:------------------------------------------|\n        | *value*    | *Any*  | The value of the current node.            |\n        | *key*      | string | The key name of the current node.         |\n        | *keyChain* | string | The full key of the current node concatenated with dot. |\n        | *depth*    | number | The depth of the current node.            |\n        | *parent*   | object | The parent node of the current node.      |\n\n\n## License\n\nCopyright (C) 2016-2021 Gulp Team.\n\nThis program is free software under [MIT][mit-url] License.\nSee the file LICENSE in this distribution for more details.\n\n[repo-url]: https://github.com/gulpjs/copy-props/\n[npm-img]: https://img.shields.io/badge/npm-v2.0.5-blue.svg\n[npm-url]: https://www.npmjs.org/package/copy-props/\n[mit-img]: https://img.shields.io/badge/license-MIT-green.svg\n[mit-url]: https://opensource.org/licenses.MIT\n[travis-img]: https://travis-ci.org/gulpjs/copy-props.svg?branch=master\n[travis-url]: https://travis-ci.org/gulpjs/copy-props\n[appveyor-img]: https://ci.appveyor.com/api/projects/status/github/gulpjs/copy-props?branch=master&svg=true\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/copy-props\n[coverage-img]: https://coveralls.io/repos/github/gulpjs/copy-props/badge.svg?branch=master\n[coverage-url]: https://coveralls.io/github/gulpjs/copy-props?branch=master\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016-2021 Gulp Team.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.5.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.5.tgz",
    "hash": "",
    "integrity": "sha512-XBlx8HSqrT0ObQwmSzM7WE5k8FxTV75h1DX1Z3n6NhQ/UYYAvInWYmG06vFt7hQZArE2fuO62aihiWIVQwh1sw==",
    "registry": "npm",
    "packageName": "copy-props",
    "cacheIntegrity": "sha512-XBlx8HSqrT0ObQwmSzM7WE5k8FxTV75h1DX1Z3n6NhQ/UYYAvInWYmG06vFt7hQZArE2fuO62aihiWIVQwh1sw== sha1-A8+a4yjU67Nvjx2AREimr57j8tI="
  },
  "registry": "npm",
  "hash": "5c1971f074aaad3d0e6d0c264b333b584e64f05c5357be61d435f56779fa36143f518600bc89d66261b4eaf16dee141902b1367ee3bad9a8a1896215430875b3"
}