{
  "manifest": {
    "name": "node-domexception",
    "version": "1.0.0",
    "description": "An implementation of the DOMException class from NodeJS",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jimmywarting/node-domexception.git"
    },
    "engines": {
      "node": ">=10.5.0"
    },
    "author": {
      "name": "Jimmy Wärting"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jimmywarting/node-domexception/issues"
    },
    "homepage": "https://github.com/jimmywarting/node-domexception#readme",
    "funding": [
      {
        "type": "github",
        "url": "https://github.com/sponsors/jimmywarting"
      },
      {
        "type": "github",
        "url": "https://paypal.me/jimmywarting"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-node-domexception-1.0.0-6888db46a1f71c0b76b3f7555016b63fe64766e5-integrity/node_modules/node-domexception/package.json",
    "readmeFilename": "README.md",
    "readme": "# DOMException\nAn implementation of the DOMException class from NodeJS\n\nNodeJS has DOMException built in, but it's not globally available, and you can't require/import it from somewhere.\n\nThis package exposes the [`DOMException`](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) class that comes from NodeJS itself. (including all of the legacy codes)\n\n<sub>(plz don't depend on this package in any other environment other than node >=10.5)</sub>\n\n```js\nimport DOMException from 'node-domexception'\nimport { MessageChannel } from 'worker_threads'\n\nasync function hello() {\n  const port = new MessageChannel().port1\n  const ab = new ArrayBuffer()\n  port.postMessage(ab, [ab, ab])\n}\n\nhello().catch(err => {\n  console.assert(err.name === 'DataCloneError')\n  console.assert(err.code === 25)\n  console.assert(err instanceof DOMException)\n})\n\nconst e1 = new DOMException('Something went wrong', 'BadThingsError')\nconsole.assert(e1.name === 'BadThingsError')\nconsole.assert(e1.code === 0)\n\nconst e2 = new DOMException('Another exciting error message', 'NoModificationAllowedError')\nconsole.assert(e2.name === 'NoModificationAllowedError')\nconsole.assert(e2.code === 7)\n\nconsole.assert(DOMException.INUSE_ATTRIBUTE_ERR === 10)\n```\n\n# Background\n\nThe only possible way is to use some web-ish tools that have been introduced into NodeJS that throws a DOMException and catch the constructor. This is exactly what this package dose for you and exposes it.<br>\nThis way you will have the same class that NodeJS has and you can check if the error is a instance of DOMException.<br>\nThe instanceof check would not have worked with a custom class such as the DOMException provided by domenic which also is much larger in size since it has to re-construct the hole class from the ground up.\n\nThe DOMException is used in many places such as the Fetch API, File & Blobs, PostMessaging and more. <br>\nWhy they decided to call it **DOM**, I don't know\n\nPlease consider sponsoring if you find this helpful\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Jimmy Wärting\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-domexception/-/node-domexception-1.0.0.tgz#6888db46a1f71c0b76b3f7555016b63fe64766e5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-domexception/-/node-domexception-1.0.0.tgz",
    "hash": "6888db46a1f71c0b76b3f7555016b63fe64766e5",
    "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
    "registry": "npm",
    "packageName": "node-domexception",
    "cacheIntegrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ== sha1-aIjbRqH3HAt2s/dVUBa2P+ZHZuU="
  },
  "registry": "npm",
  "hash": "6888db46a1f71c0b76b3f7555016b63fe64766e5"
}