{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/renderer/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { eventFromException, eventFromMessage } from '@sentry/browser';\nimport { BaseBackend, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Scope, Severity } from '@sentry/types';\nimport { walk as walkUtil } from '@sentry/utils';\n\nimport { CommonBackend, ElectronOptions, getNameFallback, IPC } from '../common';\nimport { requiresNativeHandlerRenderer } from '../electron-version';\n\n/** Walks an object to perform a normalization on it with a maximum depth of 50 */\nfunction walk(key: string, value: any): any {\n  return walkUtil(key, value, 50);\n}\n\ninterface AllElectron {\n  crashReporter: Electron.CrashReporter;\n  contextBridge: Electron.ContextBridge;\n  ipcRenderer: Electron.IpcRenderer;\n}\n\n/** Requires and returns electron or undefined if it's unavailable  */\nfunction requireElectron(): AllElectron | undefined {\n  try {\n    return require('electron');\n  } catch (e) {\n    //\n  }\n\n  return undefined;\n}\n\n/**\n * We store the IPC interface on window so it's the same for both regular and isolated contexts\n */\ndeclare global {\n  interface Window {\n    __SENTRY_IPC__:\n      | {\n          sendScope: (scope: Scope) => void;\n          sendEvent: (event: Event) => void;\n          pingMain: (success: () => void) => void;\n        }\n      | undefined;\n  }\n}\n\n/** Timeout used for registering with the main process. */\nconst PING_TIMEOUT = 500;\n\n/** Backend implementation for Electron renderer backends. */\nexport class RendererBackend extends BaseBackend<ElectronOptions> implements CommonBackend<ElectronOptions> {\n  /** Creates a new Electron backend instance. */\n  public constructor(options: ElectronOptions) {\n    // Disable session tracking until we've decided how this should work with Electron\n    options.autoSessionTracking = false;\n\n    if (options.enableJavaScript === false) {\n      options.enabled = false;\n    }\n    super(options);\n\n    const electron = requireElectron();\n\n    if (electron) {\n      // We are either in a preload script or nodeIntegration is enabled\n      if (this._isNativeEnabled()) {\n        this._installNativeHandler(electron.crashReporter);\n      }\n\n      this._hookIPC(electron.ipcRenderer, electron.contextBridge);\n      this._pingMainProcess();\n    } else {\n      // We are in a renderer with contextIsolation = true\n      if (window.__SENTRY_IPC__ == undefined) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'contextIsolation is enabled but IPC has not been exposed. Did you call \"init\" in the preload script?',\n        );\n      }\n    }\n\n    this._setupScopeListener();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    // Ensure breadcrumbs is not `undefined` as `walk` translates it into a string\n    event.breadcrumbs = event.breadcrumbs || [];\n    window.__SENTRY_IPC__?.sendEvent(event);\n  }\n\n  /**\n   * Attaches IPC methods to window and uses contextBridge when available\n   */\n  private _hookIPC(ipcRenderer: Electron.IpcRenderer, contextBridge: Electron.ContextBridge | undefined): void {\n    const ipcObject = {\n      // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if\n      // objects have functions. Calling walk makes sure to break circular references.\n      sendScope: (scope: Scope) => ipcRenderer.send(IPC.SCOPE, JSON.stringify(scope, walk)),\n      sendEvent: (event: Event) => ipcRenderer.send(IPC.EVENT, JSON.stringify(event, walk)),\n      pingMain: (success: () => void) => {\n        ipcRenderer.once(IPC.PING, () => {\n          success();\n        });\n        ipcRenderer.send(IPC.PING);\n      },\n    };\n\n    window.__SENTRY_IPC__ = ipcObject;\n\n    // We attempt to use contextBridge if it's available (Electron >= 6)\n    if (contextBridge) {\n      // This will fail if contextIsolation is not enabled but we have no other way to detect this from the renderer\n      try {\n        contextBridge.exposeInMainWorld('__SENTRY_IPC__', ipcObject);\n      } catch (e) {\n        //\n      }\n    }\n  }\n\n  /**\n   * Sends the scope to the main process once it updates.\n   */\n  private _setupScopeListener(): void {\n    const scope = getCurrentHub().getScope();\n    if (scope) {\n      scope.addScopeListener(updatedScope => {\n        window.__SENTRY_IPC__?.sendScope(updatedScope);\n        scope.clearBreadcrumbs();\n      });\n    }\n  }\n\n  /** Returns whether native reports are enabled. */\n  private _isNativeEnabled(): boolean {\n    // On macOS, we should start the Electron CrashReporter only in the main\n    // process. It uses Crashpad internally, which will catch errors from all\n    // sub processes thanks to out-of-processes crash handling. On other\n    // platforms we need to start the CrashReporter in every sub process. For\n    // more information see: https://goo.gl/nhqqwD\n    if (process.platform === 'darwin') {\n      return false;\n    }\n\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this._options.enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private _installNativeHandler(crashReporter: Electron.CrashReporter): void {\n    // this is only necessary for electron versions before 8\n    if (!requiresNativeHandlerRenderer()) {\n      return;\n    }\n\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: this._options.appName || getNameFallback(),\n      submitURL: '',\n      uploadToServer: false,\n    });\n  }\n\n  /** Checks if the main processes is available and logs a warning if not. */\n  private _pingMainProcess(): void {\n    // For whatever reason we have to wait PING_TIMEOUT until we send the ping\n    // to main.\n    setTimeout(() => {\n      const timeout = setTimeout(() => {\n        // eslint-disable-next-line no-console\n        console.warn('Could not connect to Sentry main process. Did you call init in the Electron main process?');\n      }, PING_TIMEOUT);\n\n      window.__SENTRY_IPC__?.pingMain(() => clearTimeout(timeout));\n    }, PING_TIMEOUT);\n  }\n}\n"]}