{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/main/context.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Event } from '@sentry/types';\nimport * as child from 'child_process';\nimport { app } from 'electron';\nimport { platform, release } from 'os';\nimport { join } from 'path';\n\nimport { getNameFallback } from '../common';\nimport { readDirAsync, readFileAsync } from './fs';\n\n/** SDK version used in every event. */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const SDK_VERSION: string = require('../../package.json').version;\n\nexport const SDK_NAME = 'sentry.javascript.electron';\n\n/** Operating system context information. */\ninterface OsContext {\n  /** The name of the operating system. */\n  name?: string;\n  /** The operating system version. */\n  version?: string;\n  /** Operating system specific build identifier */\n  build?: string;\n  /** Version-independent kernel version. */\n  kernel_version?: string;\n}\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: string[];\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/** Cached event prototype with default values. */\nlet defaultsPromise: Promise<Event>;\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Returns the build type of this app, if possible. */\nfunction getBuildType(): string | undefined {\n  if (process.mas) {\n    return 'app-store';\n  }\n\n  if (process.windowsStore) {\n    return 'windows-store';\n  }\n\n  return undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Mac OS X',\n    version: `10.${Number(release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      child.execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: release(),\n      };\n  }\n}\n\n/**\n * Computes Electron-specific default fields for events.\n *\n * The event defaults include contexts for the Electron, Node and Chrome\n * runtimes, limited device information, operating system context and defaults\n * for the release and environment.\n */\nasync function getEventDefaults(appName: string | undefined): Promise<Event> {\n  const name = appName || getNameFallback();\n\n  return {\n    contexts: {\n      app: {\n        app_name: name,\n        app_version: app.getVersion(),\n        build_type: getBuildType(),\n      },\n      browser: {\n        name: 'Chrome',\n      },\n      chrome: {\n        name: 'Chrome',\n        type: 'runtime',\n        version: process.versions.chrome,\n      },\n      device: {\n        arch: process.arch,\n        family: 'Desktop',\n      },\n      node: {\n        name: 'Node',\n        type: 'runtime',\n        version: process.versions.node,\n      },\n      os: (await getOsContext()) as Record<string, string>,\n      runtime: {\n        name: 'Electron',\n        version: process.versions.electron,\n      },\n    },\n    environment: process.defaultApp ? 'development' : 'production',\n    extra: { crashed_process: 'browser' },\n    release: `${name.replace(/\\W/g, '-')}@${app.getVersion()}`,\n    user: { ip_address: '{{auto}}' },\n  };\n}\n\n/** Merges the given event payload with SDK defaults. */\nexport async function addEventDefaults(appName: string | undefined, event: Event): Promise<Event> {\n  // The event defaults are cached as long as the app is running. We create the\n  // promise here synchronously to avoid multiple events computing them at the\n  // same time.\n  if (!defaultsPromise) {\n    defaultsPromise = getEventDefaults(appName);\n  }\n\n  const { contexts = {} } = event;\n  const { contexts: defaultContexts = {}, ...defaults } = await defaultsPromise;\n\n  // Perform a manual deep merge of the defaults with the event data.\n  // TODO: Use a proper deep merge here, instead.\n  return {\n    ...defaults,\n    ...event,\n    sdk: {\n      name: SDK_NAME,\n      packages: [\n        {\n          name: 'npm:@sentry/electron',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    },\n    contexts: {\n      ...defaultContexts,\n      ...contexts,\n      app: { ...defaultContexts.app, ...contexts.app },\n      device: { ...defaultContexts.device, ...contexts.device },\n      os: { ...defaultContexts.os, ...contexts.os },\n      runtime: { ...defaultContexts.runtime, ...contexts.runtime },\n    },\n    extra: { ...defaults.extra, ...event.extra },\n    user: { ...defaults.user, ...event.user },\n  };\n}\n"]}