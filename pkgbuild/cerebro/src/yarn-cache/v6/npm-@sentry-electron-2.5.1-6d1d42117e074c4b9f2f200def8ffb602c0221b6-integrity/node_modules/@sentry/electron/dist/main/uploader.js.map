{"version":3,"file":"uploader.js","sourceRoot":"","sources":["../../src/main/uploader.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { API } from '@sentry/core';\nimport { Event, Status, Transport } from '@sentry/types';\nimport { Dsn, forget, logger, timestampWithMs } from '@sentry/utils';\nimport { basename, join } from 'path';\n\nimport { supportsCrashpadOnWindows } from '../electron-version';\nimport { mkdirp, readDirAsync, readFileAsync, renameAsync, statAsync, unlinkAsync } from './fs';\nimport { Store } from './store';\nimport { NetTransport, SentryElectronRequest } from './transports/net';\n\n/** Maximum number of days to keep a minidump before deleting it. */\nconst MAX_AGE = 30;\n\n/** Maximum number of requests that we store/queue if something goes wrong. */\nconst MAX_REQUESTS_COUNT = 10;\n\n/** Supported types of Electron CrashReporters. */\ntype CrashReporterType = 'crashpad' | 'breakpad';\n\n/**\n * Payload for a minidump request comprising a persistent file system path and\n * event metadata.\n */\nexport interface MinidumpRequest {\n  /** Path to the minidump file. */\n  path: string;\n  /** Associated event data. */\n  event: Event;\n}\n\n/**\n * A service that discovers Minidump crash reports and uploads them to Sentry.\n */\nexport class MinidumpUploader {\n  /** The type of the Electron CrashReporter used to search for Minidumps. */\n  private readonly _type: CrashReporterType;\n\n  /** The sub-directory where crashpad dumps can be found */\n  private readonly _crashpadSubDirectory: string;\n\n  /** List of minidumps that have been found already. */\n  private readonly _knownPaths: string[];\n\n  /**\n   * Store to persist queued Minidumps beyond application crashes or lost\n   * internet connection.\n   */\n  private readonly _queue: Store<MinidumpRequest[]>;\n\n  /** API object */\n  private readonly _api: API;\n\n  /**\n   * Creates a new uploader instance.\n   *\n   * @param dsn The Sentry DSN.\n   * @param crashesDirectory The directory Electron stores crashes in.\n   * @param cacheDirectory A persistent directory to cache minidumps.\n   */\n  public constructor(\n    dsn: Dsn,\n    private readonly _crashesDirectory: string,\n    private readonly _cacheDirectory: string,\n    private readonly _transport: Transport,\n  ) {\n    const crashpadWindows = process.platform === 'win32' && supportsCrashpadOnWindows();\n    this._type = process.platform === 'darwin' || crashpadWindows ? 'crashpad' : 'breakpad';\n    this._crashpadSubDirectory = process.platform === 'darwin' ? 'completed' : 'reports';\n    this._knownPaths = [];\n\n    this._api = new API(dsn);\n    this._queue = new Store(this._cacheDirectory, 'queue', []);\n  }\n\n  /**\n   * Returns the minidump endpoint in Sentry\n   * @param dsn Dsn\n   */\n  public static minidumpUrlFromDsn(dsn: Dsn): string {\n    const { host, path, projectId, port, protocol, user } = dsn;\n    return `${protocol}://${host}${port !== '' ? `:${port}` : ''}${\n      path !== '' ? `/${path}` : ''\n    }/api/${projectId}/minidump/?sentry_key=${user}`;\n  }\n\n  /**\n   * Uploads a minidump file to Sentry.\n   *\n   * @param path Absolute path to the minidump file.\n   * @param event Event data to attach to the minidump.\n   * @returns A promise that resolves when the upload is complete.\n   */\n  public async uploadMinidump(request: MinidumpRequest): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (typeof (this._transport as any).sendRequest !== 'function') {\n      logger.warn(\"Your transport doesn't implement sendRequest\");\n      logger.warn('Skipping sending minidump');\n      return;\n    }\n    logger.log('Sending minidump', request.path);\n\n    const transport = this._transport as NetTransport;\n    try {\n      let response;\n      if (!transport.isRateLimited('event')) {\n        const requestForTransport = await this._toMinidumpRequest(transport, request.event, request.path);\n        response = await transport.sendRequest(requestForTransport);\n      }\n\n      // We either succeeded or something went horribly wrong. Either way, we\n      // can remove the minidump file.\n      try {\n        await unlinkAsync(request.path);\n      } catch (e) {\n        logger.warn('Could not delete', request.path);\n      }\n\n      // Forget this minidump in all caches\n      // tslint:disable-next-line: strict-comparisons\n      this._queue.update(queued => queued.filter(stored => stored !== request));\n      this._knownPaths.splice(this._knownPaths.indexOf(request.path), 1);\n\n      // If we were successful, we can try to flush the remaining queue\n      if (response && response.status === Status.Success) {\n        await this.flushQueue();\n      }\n    } catch (err) {\n      // TODO: Test this\n      logger.warn('Failed to upload minidump', err);\n\n      // User's internet connection was down so we queue it as well\n      const error = err ? (err as { code: string }) : { code: '' };\n      if (error.code === 'ENOTFOUND') {\n        await this._queueMinidump(request);\n      }\n    }\n  }\n\n  /**\n   * Searches for new, unknown minidump files in the crash directory.\n   * @returns A promise that resolves to absolute paths of those dumps.\n   */\n  public async getNewMinidumps(): Promise<string[]> {\n    const minidumps = this._type === 'crashpad' ? await this._scanCrashpadFolder() : await this._scanBreakpadFolder();\n    logger.log(`Found ${minidumps.length} minidumps`);\n\n    const oldestMs = new Date().getTime() - MAX_AGE * 24 * 3600 * 1000;\n    return this._filterAsync(minidumps, async path => {\n      // Skip files that we have seen before\n      if (this._knownPaths.indexOf(path) >= 0) {\n        return false;\n      }\n\n      // Lock this minidump until we have uploaded it or an error occurs and we\n      // remove it from the file system.\n      this._knownPaths.push(path);\n\n      // We do not want to upload minidumps that have been generated before a\n      // certain threshold. Those old files can be deleted immediately.\n      const stats = await statAsync(path);\n      if (stats.birthtimeMs < oldestMs) {\n        try {\n          await unlinkAsync(path);\n        } catch (e) {\n          logger.warn('Could not delete', path);\n        }\n        this._knownPaths.splice(this._knownPaths.indexOf(path), 1);\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  /** Flushes locally cached minidumps from the queue. */\n  public async flushQueue(): Promise<void> {\n    await Promise.all(this._queue.get().map(async request => this.uploadMinidump(request)));\n  }\n\n  /**\n   * Helper to filter an array with asynchronous callbacks.\n   *\n   * @param array An array containing items to filter.\n   * @param predicate An async predicate evaluated on every item.\n   * @param thisArg Optional value passed as \"this\" into the callback.\n   * @returns An array containing only values where the callback returned true.\n   */\n  private async _filterAsync<T>(\n    array: T[],\n    predicate: (item: T) => Promise<boolean> | boolean,\n    thisArg?: any,\n  ): Promise<T[]> {\n    const verdicts = await Promise.all(array.map(predicate, thisArg));\n    return array.filter((_, index) => verdicts[index]);\n  }\n\n  /** Scans the Crashpad directory structure for minidump files. */\n  private async _scanCrashpadFolder(): Promise<string[]> {\n    forget(this._deleteCrashpadMetadataFile());\n\n    // Crashpad moves minidump files directly into the 'completed' or 'reports' folder. We can\n    // load them from there, upload to the server, and then delete it.\n    const dumpDirectory = join(this._crashesDirectory, this._crashpadSubDirectory);\n    const files = await readDirAsync(dumpDirectory);\n    return files.filter(file => file.endsWith('.dmp')).map(file => join(dumpDirectory, file));\n  }\n\n  /** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */\n  private async _deleteCrashpadMetadataFile(waitMs: number = 100): Promise<void> {\n    if (waitMs > 2000) {\n      return;\n    }\n\n    const metadataPath = join(this._crashesDirectory, 'metadata');\n    try {\n      await unlinkAsync(metadataPath);\n      logger.log('Deleted Crashpad metadata file', metadataPath);\n    } catch (e) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (e.code && e.code == 'EBUSY') {\n        // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing\n        // off and waiting longer each time.\n        setTimeout(async () => {\n          await this._deleteCrashpadMetadataFile(waitMs * 2);\n        }, waitMs);\n      }\n    }\n  }\n\n  /** Scans the Breakpad directory structure for minidump files. */\n  private async _scanBreakpadFolder(): Promise<string[]> {\n    // Breakpad stores all minidump files along with a metadata file directly in\n    // the crashes directory.\n    const files = await readDirAsync(this._crashesDirectory);\n\n    // Remove all metadata files and forget about them.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(\n      files\n        .filter(file => file.endsWith('.txt') && !file.endsWith('log.txt'))\n        .map(async file => {\n          const path = join(this._crashesDirectory, file);\n          try {\n            await unlinkAsync(path);\n          } catch (e) {\n            logger.warn('Could not delete', path);\n          }\n        }),\n    );\n\n    return files.filter(file => file.endsWith('.dmp')).map(file => join(this._crashesDirectory, file));\n  }\n\n  /** Crudely parses the dump file from the Breakpad multipart file */\n  private async _parseBreakpadMultipartFile(file: Buffer): Promise<Buffer | undefined> {\n    const binaryStart = file.lastIndexOf('Content-Type: application/octet-stream');\n    if (binaryStart > 0) {\n      const dumpStart = file.indexOf('MDMP', binaryStart);\n      const dumpEnd = file.lastIndexOf('----------------------------');\n\n      if (dumpStart > 0 && dumpEnd > 0 && dumpEnd > dumpStart) {\n        return file.slice(dumpStart, dumpEnd);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Enqueues a minidump with event information for later upload.\n   * @param request The request containing a minidump and event info.\n   */\n  private async _queueMinidump(request: MinidumpRequest): Promise<void> {\n    const filename = basename(request.path);\n\n    // Only enqueue if this minidump hasn't been enqueued before. Compare the\n    // filename instead of the full path, because we will move the file to a\n    // temporary location later on.\n    if (this._queue.get().some(req => basename(req.path) === filename)) {\n      return;\n    }\n\n    // Move the minidump file to a separate cache directory and enqueue it. Even\n    // if the Electron CrashReporter's cache directory gets wiped or changes,\n    // this will allow us to retry uploading the file later.\n    const queuePath = join(this._cacheDirectory, filename);\n    await mkdirp(this._cacheDirectory);\n    await renameAsync(request.path, queuePath);\n\n    // Remove stale minidumps in case we go over limit. Note that we have to\n    // re-fetch the queue as it might have changed in the meanwhile. It is\n    // important to store the queue value again immediately to avoid phantom\n    // reads.\n    const requests = [...this._queue.get(), { ...request, path: queuePath }];\n    const stale = requests.splice(-MAX_REQUESTS_COUNT);\n    this._queue.set(requests);\n\n    await Promise.all(\n      stale.map(async req => {\n        try {\n          await unlinkAsync(req.path);\n        } catch (e) {\n          logger.warn('Could not delete', req.path);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Create minidump request to dispatch to the transpoirt\n   */\n  private async _toMinidumpRequest(\n    transport: NetTransport,\n    event: Event,\n    minidumpPath: string,\n  ): Promise<SentryElectronRequest> {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      // Internal helper that uses `perf_hooks` to get clock reading\n      sent_at: new Date(timestampWithMs() * 1000).toISOString(),\n    });\n\n    // If attachments are ratelimited we add this hint so users know\n    if (transport.isRateLimited('attachment')) {\n      event.message = 'Ratelimited - Minidump Event';\n    }\n\n    const itemHeaders = JSON.stringify({\n      content_type: 'application/json',\n      type: 'event',\n    });\n\n    const eventPayload = JSON.stringify(event);\n    let bodyBuffer = Buffer.from(`${envelopeHeaders}\\n${itemHeaders}\\n${eventPayload}\\n`);\n\n    // Only add attachment if they are not rate limited\n    if (!transport.isRateLimited('attachment')) {\n      let minidumpContent = (await readFileAsync(minidumpPath)) as Buffer;\n\n      // For Breakpad we need to get the dump from a multipart encoded file\n      if (this._type !== 'crashpad') {\n        const dump = await this._parseBreakpadMultipartFile(minidumpContent);\n        if (dump) {\n          minidumpContent = dump;\n        }\n      }\n\n      const minidumpHeader = JSON.stringify({\n        attachment_type: 'event.minidump',\n        length: minidumpContent.length,\n        type: 'attachment',\n        filename: basename(minidumpPath),\n      });\n\n      bodyBuffer = Buffer.concat([bodyBuffer, Buffer.from(`${minidumpHeader}\\n`), minidumpContent, Buffer.from('\\n')]);\n    } else {\n      logger.warn('Will not add minidump to request since they are rate limited.');\n    }\n\n    return {\n      body: bodyBuffer,\n      url: this._api.getEnvelopeEndpointWithUrlEncodedAuth(),\n      type: 'event',\n    };\n  }\n}\n"]}