{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/renderer/client.ts"],"names":[],"mappings":";;;AAAA,2CAAiG;AACjG,qCAAgE;AAEhE,uCAAuC;AAGvC,qCAA4C;AAE5C,8DAA8D;AAC9D;IAAoC,0CAA4C;IAC9E;;;OAGG;IACH,wBAAmB,OAAwB;eACzC,kBAAM,yBAAe,EAAE,OAAO,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACI,wCAAe,GAAtB;QACE,cAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACzD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,yCAAgB,GAAvB,UAAwB,OAAiC;QAAjC,wBAAA,EAAA,YAAiC;QACvD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpB,OAAO,CAAC,OAAO,GAAG,oBAAa,EAAE,CAAC,WAAW,EAAE,CAAC;SACjD;QACD,4BAAkB,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACO,sCAAa,GAAvB,UAAwB,KAAY,EAAE,KAAa,EAAE,IAAgB;QACnE,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;QAChD,KAAK,CAAC,GAAG,yCACJ,KAAK,CAAC,GAAG,KACZ,IAAI,EAAE,kBAAQ,EACd,QAAQ,iEACH,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC5C;oBACE,IAAI,EAAE,qBAAqB;oBAC3B,OAAO,EAAE,qBAAW;iBACrB;gBAEH,OAAO,EAAE,qBAAW,GACrB,CAAC;QACF,OAAO,iBAAM,aAAa,YAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IACH,qBAAC;AAAD,CAAC,AAnDD,CAAoC,iBAAU,GAmD7C;AAnDY,wCAAc","sourcesContent":["import { injectReportDialog, ReportDialogOptions, SDK_NAME, SDK_VERSION } from '@sentry/browser';\nimport { BaseClient, getCurrentHub, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { ElectronClient, ElectronOptions } from '../common';\nimport { RendererBackend } from './backend';\n\n/** Frontend implementation for Electron renderer backends. */\nexport class RendererClient extends BaseClient<RendererBackend, ElectronOptions> implements ElectronClient {\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(RendererBackend, options);\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  public captureMinidump(): string | undefined {\n    logger.warn('captureMinidump is a noop on the renderer');\n    return undefined;\n  }\n\n  /**\n   * Basically calling {@link BrowserClient.showReportDialog}\n   * @inheritdoc\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    if (!options.eventId) {\n      options.eventId = getCurrentHub().lastEventId();\n    }\n    injectReportDialog(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n    return super._prepareEvent(event, scope, hint);\n  }\n}\n"]}