{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;AACA,qCAA2C;AAsJnB,8FAtJf,kBAAW,OAsJiB;AAnJrC,uCAA4C;AAG/B,QAAA,GAAG,GAAG;IACjB,sEAAsE;IACtE,IAAI,EAAE,sBAAsB;IAC5B,qEAAqE;IACrE,KAAK,EAAE,uBAAuB;IAC9B,uCAAuC;IACvC,KAAK,EAAE,uBAAuB;CAC/B,CAAC;AAwGF,sDAAsD;AACtD,SAAgB,eAAe;IAC7B,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;QAClC,MAAM,IAAI,mBAAW,CACnB,kGAAkG,CACnG,CAAC;KACH;IAED,IAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IAErC,+BAA+B;IAC/B,sEAAsE;IACtE,IAAI,QAAQ,IAAI,QAAQ,CAAC,GAAG,EAAE;QAC5B,sEAAsE;QACtE,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAe,CAAC;QACzC,OAAO,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1C;IAED,uEAAuE;IACvE,sEAAsE;IACtE,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;QACjC,MAAM,IAAI,mBAAW,CACnB,mHAAmH,CACpH,CAAC;KACH;IAED,0CAA0C;IAC1C,sEAAsE;IACtE,IAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAe,CAAC;IAC1C,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;AAC/B,CAAC;AA7BD,0CA6BC","sourcesContent":["import { BrowserOptions, ReportDialogOptions } from '@sentry/browser';\nimport { BaseBackend } from '@sentry/core';\nimport { NodeOptions } from '@sentry/node';\nimport { Client, Event, Options, Scope } from '@sentry/types';\nimport { SentryError } from '@sentry/utils';\nimport { App } from 'electron';\n\nexport const IPC = {\n  /** IPC to ping the main process when initializing in the renderer. */\n  PING: 'sentry-electron.ping',\n  /** IPC to send a captured event (exception or message) to Sentry. */\n  EVENT: 'sentry-electron.event',\n  /** IPC to capture a scope globally. */\n  SCOPE: 'sentry-electron.scope',\n};\n\n/**\n * Configuration options for {@link ElectronOptions}.\n *\n * By default, all native crashes and JavaScript errors will be captured and\n * sent to Sentry. Note that these settings have to be specified during startup\n * and cannot be changed later.\n *\n * This options object can also contain options for the Browser and Node SDKs,\n * which are being used under the hood to record JavaScript errors. Please refer\n * to their documentation for a description of the fields.\n *\n * @see BrowserOptions\n * @see NodeOptions\n * @see ElectronOptions\n */\nexport interface ElectronOptions extends Options, BrowserOptions, NodeOptions {\n  /**\n   * The name of the application. Primarily used for crash directory naming. If this property is not supplied,\n   * it will be retrieved using the Electron `app.getName/name` API. If you disable the Electron `remote` module in\n   * the renderer, this property is required.\n   */\n  appName?: string;\n\n  /**\n   * Enables crash reporting for JavaScript errors in this process. Defaults to\n   * `true`.\n   */\n  enableJavaScript?: boolean;\n\n  /**\n   * Enables crash reporting for native crashes of this process (via Minidumps).\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Enables the Sentry internal uploader for minidumps.\n   * Defaults to `true`.\n   */\n  useSentryMinidumpUploader?: boolean;\n\n  /**\n   * This sets `uploadToServer` of the crashReporter to `true`. The SDK also tries to set data (Sentry Event)\n   * with `crashReporter.addExtraParameter` to provide more context. Keep in mind, you should set\n   * `useSentryMinidumpUploader` to `false` otherwise you recieve the crash report twice.\n   * Defaults to `false`.\n   */\n  useCrashpadMinidumpUploader?: boolean;\n\n  /**\n   * Enables event reporting for BrowserWindow 'unresponsive' events\n   * Defaults to `true`.\n   */\n  enableUnresponsive?: boolean;\n\n  /**\n   * Callback to allow custom naming of renderer processes\n   * If the callback is not set, or it returns `undefined`, the default naming\n   * scheme is used.\n   */\n  getRendererName?(contents: Electron.WebContents): string | undefined;\n}\n\n/** Common interface for Electron clients. */\nexport interface ElectronClient extends Client<ElectronOptions> {\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope Optional The SDK scope used to upload.\n   */\n  captureMinidump(path: string, event?: Event, scope?: Scope): string | undefined;\n\n  /**\n   * Shows Report Dialog\n   */\n  showReportDialog(options: ReportDialogOptions): void;\n}\n\n/** Name retrieval references for both Electron <v5 and v7< */\ndeclare interface CrossApp extends App {\n  /**\n   * A `String` property that indicates the current application's name, which is the\n   * name in the application's `package.json` file.\n   *\n   * Usually the `name` field of `package.json` is a short lowercase name, according\n   * to the npm modules spec. You should usually also specify a `productName` field,\n   * which is your application's full capitalized name, and which will be preferred\n   * over `name` by Electron.\n   */\n  name: string;\n\n  /**\n   * Usually the name field of package.json is a short lowercased name, according to\n   * the npm modules spec. You should usually also specify a productName field, which\n   * is your application's full capitalized name, and which will be preferred over\n   * name by Electron.\n   */\n  getName(): string;\n}\n\n/** Get the name of an electron app for <v5 and v7< */\nexport function getNameFallback(): string {\n  if (typeof require === 'undefined') {\n    throw new SentryError(\n      'Could not require(\"electron\") to get appName. Please ensure you pass `appName` to Sentry options',\n    );\n  }\n\n  const electron = require('electron');\n\n  // if we're in the main process\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (electron && electron.app) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const appMain = electron.app as CrossApp;\n    return appMain.name || appMain.getName();\n  }\n\n  // We're in the renderer process but the remote module is not available\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!electron || !electron.remote) {\n    throw new SentryError(\n      'The Electron `remote` module was not available to get appName. Please ensure you pass `appName` to Sentry options',\n    );\n  }\n\n  // Remote is available so get the app name\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const a = electron.remote.app as CrossApp;\n  return a.name || a.getName();\n}\n\n/** Common interface for Electron backends. */\nexport { BaseBackend as CommonBackend };\n"]}