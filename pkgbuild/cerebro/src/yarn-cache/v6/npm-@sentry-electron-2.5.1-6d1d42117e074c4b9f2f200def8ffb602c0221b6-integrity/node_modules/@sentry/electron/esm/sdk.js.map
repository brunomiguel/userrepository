{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAIhD,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,UAAU,IAAI,CAAC,OAAwB;IAC3C,YAAY,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAiC;IAAjC,wBAAA,EAAA,YAAiC;IAC/D,aAAa,EAAE,CAAC,SAAS,EAAqB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAC5E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAAC,IAAY,EAAE,KAAiB;IAAjB,sBAAA,EAAA,UAAiB;IAC7D,aAAa,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAChD,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAgB,KAAK,CAAC,OAAgB;;;;YACpC,MAAM,GAAG,aAAa,EAAE,CAAC,SAAS,EAAkB,CAAC;YAC3D,IAAI,MAAM,EAAE;gBACV,sBAAO,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC;aAC9B;YACD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;;;CAC9B;AAED;;;;;GAKG;AACH,MAAM,UAAgB,KAAK,CAAC,OAAgB;;;;YACpC,MAAM,GAAG,aAAa,EAAE,CAAC,SAAS,EAAkB,CAAC;YAC3D,IAAI,MAAM,EAAE;gBACV,sBAAO,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC;aAC9B;YACD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;;;CAC9B","sourcesContent":["import { ReportDialogOptions } from '@sentry/browser';\nimport { getCurrentHub } from '@sentry/core';\nimport { _callOnClient } from '@sentry/minimal';\nimport { Event } from '@sentry/types';\n\nimport { ElectronClient, ElectronOptions } from './common';\nimport { specificInit } from './dispatch';\n\n/**\n * The Sentry Electron SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * entry modules. This applies to the main process as well as all renderer\n * processes or further sub processes you spawn. To set context information or\n * send manual events, use the provided methods.\n *\n * @example\n * const { init } = require('@sentry/electron');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { configureScope } from '@sentry/electron';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTags({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/electron';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/electron';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see ElectronOptions for documentation on configuration options.\n */\nexport function init(options: ElectronOptions): void {\n  specificInit(options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  (getCurrentHub().getClient() as ElectronClient).showReportDialog(options);\n}\n\n/**\n * Uploads a native crash dump (Minidump) to Sentry.\n *\n * @param path The relative or absolute path to the minidump.\n * @param event Optional event payload to attach to the minidump.\n */\nexport function captureMinidump(path: string, event: Event = {}): void {\n  _callOnClient('captureMinidump', path, event);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<ElectronClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<ElectronClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return Promise.reject(false);\n}\n"]}