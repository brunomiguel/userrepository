{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/main/backend.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport {\n  addBreadcrumb,\n  BaseBackend,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getCurrentHub,\n  Scope,\n} from '@sentry/core';\nimport { NodeBackend } from '@sentry/node';\nimport { Event, EventHint, ScopeContext, Severity, Transport, TransportOptions } from '@sentry/types';\nimport { Dsn, forget, logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter, ipcMain } from 'electron';\nimport { join } from 'path';\n\nimport { CommonBackend, ElectronOptions, getNameFallback, IPC } from '../common';\nimport { supportsGetPathCrashDumps, supportsRenderProcessGone } from '../electron-version';\nimport { addEventDefaults } from './context';\nimport { captureMinidump } from './index';\nimport { normalizeEvent, normalizeUrl } from './normalize';\nimport { Store } from './store';\nimport { NetTransport } from './transports/net';\nimport { MinidumpUploader } from './uploader';\n\n/** Gets the path to the Sentry cache directory. */\nfunction getCachePath(): string {\n  return join(app.getPath('userData'), 'sentry');\n}\n\n/**\n * Returns a promise that resolves when app is ready.\n */\nexport async function isAppReady(): Promise<boolean> {\n  return (\n    app.isReady() ||\n    new Promise<boolean>(resolve => {\n      app.once('ready', () => {\n        resolve(true);\n      });\n    })\n  );\n}\n\n/** Is object defined and has keys */\nfunction hasKeys(obj: any): boolean {\n  return obj != undefined && Object.keys(obj).length > 0;\n}\n\n/** Gets a Scope object with user, tags and extra */\nfunction getScope(): Partial<ScopeContext> {\n  const scope = getCurrentHub().getScope() as any | undefined;\n\n  if (!scope) {\n    return {};\n  }\n\n  return {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    ...(hasKeys(scope._user) && { user: scope._user }),\n    ...(hasKeys(scope._tags) && { tags: scope._tags }),\n    ...(hasKeys(scope._extra) && { extra: scope._extra }),\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  };\n}\n\n/** Backend implementation for Electron renderer backends. */\nexport class MainBackend extends BaseBackend<ElectronOptions> implements CommonBackend<ElectronOptions> {\n  /** The inner SDK used to record Node events. */\n  private readonly _inner: NodeBackend;\n\n  /** Store to persist context information beyond application crashes. */\n  private readonly _scopeStore: Store<Scope>;\n\n  /** Temp store for the scope of last run */\n  private _scopeLastRun?: Scope;\n\n  /** Uploader for minidump files. */\n  private _uploader?: MinidumpUploader;\n\n  /** Counter used to ensure no race condition when updating extra params */\n  private _updateEpoch: number;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(options: ElectronOptions) {\n    // Disable session tracking until we've decided how this should work with Electron\n    options.autoSessionTracking = false;\n\n    super(options);\n\n    this._inner = new NodeBackend(options);\n    this._scopeStore = new Store<Scope>(getCachePath(), 'scope_v2', new Scope());\n    // We need to store the scope in a variable here so it can be attached to minidumps\n    this._scopeLastRun = this._scopeStore.get();\n    this._updateEpoch = 0;\n\n    this._setupScopeListener();\n\n    if (this._isNativeEnabled()) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      forget(this._installNativeHandler());\n    }\n\n    this._installIPC();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return this._inner.eventFromMessage(message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._inner.sendEvent(event);\n  }\n\n  /**\n   * Uploads the given minidump and attaches event information.\n   *\n   * @param path A relative or absolute path to the minidump file.\n   * @param event Optional event information to add to the minidump request.\n   */\n  public uploadMinidump(path: string, event: Event = {}): void {\n    if (this._uploader) {\n      forget(this._uploader.uploadMinidump({ path, event }));\n    }\n  }\n\n  /**\n   * Setup Transport\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions: TransportOptions = {\n      ...this._options.transportOptions,\n      ...(this._options.httpProxy && { httpProxy: this._options.httpProxy }),\n      ...(this._options.httpsProxy && { httpsProxy: this._options.httpsProxy }),\n      ...(this._options.caCerts && { caCerts: this._options.caCerts }),\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    return new NetTransport(transportOptions);\n  }\n\n  /**\n   * Adds a scope listener to persist changes to disk.\n   */\n  private _setupScopeListener(): void {\n    const hubScope = getCurrentHub().getScope();\n    if (hubScope) {\n      hubScope.addScopeListener(updatedScope => {\n        const scope = Scope.clone(updatedScope);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (scope as any)._eventProcessors = [];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (scope as any)._scopeListeners = [];\n\n        this._scopeStore.set(scope);\n\n        // If we use the Crashpad minidump uploader we have to set extra whenever the scope updates\n        //\n        // We do not currently set addExtraParameter on Linux because Breakpad is limited\n        if (this._options.useCrashpadMinidumpUploader === true && process.platform !== 'linux') {\n          this._updateExtraParams(scope);\n        }\n      });\n    }\n  }\n\n  /** Updates Electron uploader extra params */\n  private _updateExtraParams(scope: Scope): void {\n    this._updateEpoch += 1;\n    const currentEpoch = this._updateEpoch;\n\n    forget(\n      this._getNativeUploaderEvent(scope).then(event => {\n        if (currentEpoch !== this._updateEpoch) return;\n\n        // Update the extra parameters in the main process\n        const mainParams = this._getNativeUploaderExtraParams(event);\n        for (const key of Object.keys(mainParams)) {\n          crashReporter.addExtraParameter(key, mainParams[key]);\n        }\n      }),\n    );\n  }\n\n  /** Builds up an event to send with the native Electron uploader */\n  private async _getNativeUploaderEvent(scope: Scope): Promise<Event> {\n    // Basic SDK info\n    let event: Event = {\n      tags: { event_type: 'native' },\n    };\n\n    // Apply the scope to the event\n    await scope.applyToEvent(event);\n    // Add all the extra context\n    event = await addEventDefaults(this._options.appName, event);\n    return normalizeEvent(event);\n  }\n\n  /** Chunks up event JSON into 1 or more parameters for use with the native Electron uploader\n   *\n   * Returns chunks with keys and values:\n   * {\n   *    sentry__1: '{ json...',\n   *    sentry__2: 'more json...',\n   *    sentry__x: 'end json }',\n   * }\n   */\n  private _getNativeUploaderExtraParams(event: Event): { [key: string]: string } {\n    const maxBytes = 20300;\n\n    /** Max chunk sizes are in bytes so we can't chunk by characters or UTF8 could bite us.\n     *\n     * We attempt to split by space (32) and double quote characters (34) as there are plenty in JSON\n     * and they are guaranteed to not be the first byte of a multi-byte UTF8 character.\n     */\n    let buf = Buffer.from(JSON.stringify(event));\n    const chunks = [];\n    while (buf.length) {\n      // Find last '\"'\n      let i = buf.lastIndexOf(34, maxBytes + 1);\n      // Or find last ' '\n      if (i < 0) i = buf.lastIndexOf(32, maxBytes + 1);\n      // Or find first '\"'\n      if (i < 0) i = buf.indexOf(34, maxBytes);\n      // Or find first ' '\n      if (i < 0) i = buf.indexOf(32, maxBytes);\n      // We couldn't find any space or quote chars so split at maxBytes and hope for the best 🤷‍♂️\n      if (i < 0) i = maxBytes;\n      chunks.push(buf.slice(0, i + 1).toString());\n      buf = buf.slice(i + 1);\n    }\n\n    return chunks.reduce((acc, cur, i) => {\n      acc[`sentry__${i + 1}`] = cur;\n      return acc;\n    }, {} as { [key: string]: string });\n  }\n\n  /** Returns whether native reports are enabled. */\n  private _isNativeEnabled(): boolean {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this._options.enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private async _installNativeHandler(): Promise<void> {\n    // We are only called by the frontend if the SDK is enabled and a valid DSN\n    // has been configured. If no DSN is present, this indicates a programming\n    // error.\n    const dsnString = this._options.dsn;\n    if (!dsnString) {\n      throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n    }\n\n    // We don't add globalExtra for Linux because Breakpad doesn't support JSON like strings:\n    // https://github.com/electron/electron/issues/29711\n    const globalExtra =\n      process.platform !== 'linux' ? { sentry___initialScope: JSON.stringify(getScope()) } : undefined;\n\n    const dsn = new Dsn(dsnString);\n\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: this._options.appName || getNameFallback(),\n      submitURL: MinidumpUploader.minidumpUrlFromDsn(dsn),\n      uploadToServer: this._options.useCrashpadMinidumpUploader || false,\n      compress: true,\n      globalExtra,\n    });\n\n    if (this._options.useSentryMinidumpUploader !== false) {\n      // The crashReporter has a method to retrieve the directory\n      // it uses to store minidumps in. The structure in this directory depends\n      // on the crash library being used (Crashpad or Breakpad).\n      const crashesDirectory = supportsGetPathCrashDumps()\n        ? app.getPath('crashDumps')\n        : // unsafe member access required because of older versions of Electron\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          (crashReporter as any).getCrashesDirectory();\n\n      this._uploader = new MinidumpUploader(dsn, crashesDirectory, getCachePath(), this.getTransport());\n\n      // Flush already cached minidumps from the queue.\n      forget(this._uploader.flushQueue());\n\n      // Start to submit recent minidump crashes. This will load breadcrumbs and\n      // context information that was cached on disk prior to the crash.\n      forget(this._sendNativeCrashes({}));\n    }\n\n    /**\n     * Helper function for sending renderer crashes\n     */\n    const sendRendererCrash = async (\n      contents: Electron.WebContents,\n      details?: Electron.RenderProcessGoneDetails,\n    ): Promise<void> => {\n      if (this._options.useSentryMinidumpUploader !== false) {\n        try {\n          await this._sendNativeCrashes(this._getNewEventWithElectronContext(contents, details));\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n      }\n\n      addBreadcrumb({\n        category: 'exception',\n        level: Severity.Critical,\n        message: 'Renderer Crashed',\n      });\n    };\n\n    // Every time a subprocess or renderer crashes, start sending minidumps\n    // right away.\n    app.on('web-contents-created', (_, contents) => {\n      if (supportsRenderProcessGone()) {\n        contents.on('render-process-gone', async (_event, details) => {\n          await sendRendererCrash(contents, details);\n        });\n      } else {\n        // unsafe member access required because of older versions of Electron\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (contents as any).on('crashed', async () => {\n          await sendRendererCrash(contents);\n        });\n      }\n\n      if (this._options.enableUnresponsive !== false) {\n        contents.on('unresponsive', () => {\n          captureMessage('BrowserWindow Unresponsive');\n        });\n      }\n    });\n  }\n\n  /** Installs IPC handlers to receive events and metadata from renderers. */\n  private _installIPC(): void {\n    ipcMain.on(IPC.PING, (event: Electron.IpcMainEvent) => {\n      event.sender.send(IPC.PING);\n    });\n\n    ipcMain.on(IPC.EVENT, (ipc: Electron.IpcMainEvent, jsonEvent: string) => {\n      let event: Event;\n      try {\n        event = JSON.parse(jsonEvent) as Event;\n      } catch {\n        // eslint-disable-next-line no-console\n        console.warn('sentry-electron received an invalid IPC_EVENT message');\n        return;\n      }\n\n      event.contexts = {\n        ...this._getNewEventWithElectronContext(ipc.sender).contexts,\n        ...event.contexts,\n      };\n\n      captureEvent(event);\n    });\n\n    ipcMain.on(IPC.SCOPE, (_: any, jsonRendererScope: string) => {\n      let rendererScope: Scope;\n      try {\n        rendererScope = JSON.parse(jsonRendererScope) as Scope;\n      } catch {\n        // eslint-disable-next-line no-console\n        console.warn('sentry-electron received an invalid IPC_SCOPE message');\n        return;\n      }\n      const sentScope = Scope.clone(rendererScope) as any;\n      /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n      configureScope(scope => {\n        if (hasKeys(sentScope._user)) {\n          scope.setUser(sentScope._user);\n        }\n\n        if (hasKeys(sentScope._tags)) {\n          scope.setTags(sentScope._tags);\n        }\n\n        if (hasKeys(sentScope._extra)) {\n          scope.setExtras(sentScope._extra);\n        }\n\n        // Since we do not have updates for individual breadcrumbs any more and only for the whole scope\n        // we just add the last added breadcrumb on scope updates\n        scope.addBreadcrumb(sentScope._breadcrumbs.pop(), this._options.maxBreadcrumbs);\n      });\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    });\n  }\n\n  /** Loads new native crashes from disk and sends them to Sentry. */\n  private async _sendNativeCrashes(event: Event): Promise<void> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    if (this._options.useSentryMinidumpUploader === false) {\n      // In case we are not using the Sentry Minidump uploader we don't want to throw an error\n      return;\n    }\n\n    const uploader = this._uploader;\n    if (uploader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    try {\n      const paths = await uploader.getNewMinidumps();\n      // We only want to read the scope from disk in case there was a crash last run\n      if (paths.length > 0) {\n        const currentCloned = Scope.clone(getCurrentHub().getScope());\n        const storedScope = Scope.clone(this._scopeLastRun);\n        let newEvent = await storedScope.applyToEvent(event);\n        if (newEvent) {\n          newEvent = await currentCloned.applyToEvent(newEvent);\n          paths.map(path => {\n            captureMinidump(path, { ...newEvent });\n          });\n        }\n        // Unset to recover memory\n        this._scopeLastRun = undefined;\n      }\n    } catch (_oO) {\n      logger.error('Error while sending native crash.');\n    }\n  }\n\n  /** Returns extra information from a renderer's web contents. */\n  private _getNewEventWithElectronContext(\n    contents: Electron.WebContents,\n    details?: Electron.RenderProcessGoneDetails,\n  ): Event {\n    const customName = this._options.getRendererName && this._options.getRendererName(contents);\n    const electronContext: Record<string, any> = {\n      crashed_process: customName || `renderer[${contents.id}]`,\n      crashed_url: normalizeUrl(contents.getURL()),\n    };\n    if (details) {\n      // We need to do it like this, otherwise we normalize undefined to \"[undefined]\" in the UI\n      electronContext.details = details;\n    }\n    return {\n      contexts: {\n        electron: electronContext,\n      },\n    };\n  }\n}\n"]}