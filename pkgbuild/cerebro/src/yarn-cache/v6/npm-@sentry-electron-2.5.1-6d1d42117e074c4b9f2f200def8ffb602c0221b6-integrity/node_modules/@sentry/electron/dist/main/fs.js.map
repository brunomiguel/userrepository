{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../src/main/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdir, mkdirSync, readdir, readFile, rename, stat, Stats, statSync, unlink } from 'fs';\nimport { dirname, resolve } from 'path';\n\n/**\n * Asynchronously reads given files content.\n *\n * @param path A relative or absolute path to the file\n * @returns A Promise that resolves when the file has been read.\n */\nexport async function readFileAsync(\n  path: string,\n  options?: { encoding?: string; flag?: string },\n): Promise<string | Buffer> {\n  // We cannot use util.promisify here because that was only introduced in Node\n  // 8 and we need to support older Node versions.\n  return new Promise<string | Buffer>((res, reject) => {\n    readFile(path, options as any, (err: any, data: any) => {\n      if (err) {\n        reject(err);\n      } else {\n        res(data);\n      }\n    });\n  });\n}\n\n/**\n * Asynchronously creates the given directory.\n *\n * @param path A relative or absolute path to the directory.\n * @param mode The permission mode.\n * @returns A Promise that resolves when the path has been created.\n */\nasync function mkdirAsync(path: string, mode: number): Promise<void> {\n  // We cannot use util.promisify here because that was only introduced in Node\n  // 8 and we need to support older Node versions.\n  return new Promise<void>((res, reject) => {\n    mkdir(path, mode, err => {\n      if (err) {\n        reject(err);\n      } else {\n        res();\n      }\n    });\n  });\n}\n\n/**\n * Recursively creates the given path.\n *\n * @param path A relative or absolute path to create.\n * @returns A Promise that resolves when the path has been created.\n */\nexport async function mkdirp(path: string): Promise<void> {\n  // eslint-disable-next-line no-bitwise\n  const realPath = resolve(path);\n\n  try {\n    return mkdirAsync(realPath, 0o777);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      await mkdirp(dirname(realPath));\n      return mkdirAsync(realPath, 0o777);\n    }\n\n    try {\n      if (!statSync(realPath).isDirectory()) {\n        throw err;\n      }\n    } catch (_) {\n      throw err;\n    }\n  }\n}\n\n/**\n * Synchronous version of {@link mkdirp}.\n *\n * @param path A relative or absolute path to create.\n */\nexport function mkdirpSync(path: string): void {\n  const realPath = resolve(path);\n\n  try {\n    mkdirSync(realPath, 0o777);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      mkdirpSync(dirname(realPath));\n      mkdirSync(realPath, 0o777);\n    } else {\n      try {\n        if (!statSync(realPath).isDirectory()) {\n          throw err;\n        }\n      } catch (_) {\n        throw err;\n      }\n    }\n  }\n}\n\n/**\n * Read stats async\n */\nexport function statAsync(path: string): Promise<Stats> {\n  return new Promise<Stats>((res, reject) => {\n    stat(path, (err, stats) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      res(stats);\n    });\n  });\n}\n\n/**\n * unlink async\n */\nexport function unlinkAsync(path: string): Promise<void> {\n  return new Promise<void>((res, reject) => {\n    unlink(path, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      res();\n    });\n  });\n}\n\n/**\n * readdir async\n */\nexport function readDirAsync(path: string): Promise<string[]> {\n  return new Promise<string[]>((res, reject) => {\n    readdir(path, (err, files) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      res(files);\n    });\n  });\n}\n\n/**\n * rename async\n */\nexport function renameAsync(oldPath: string, newPath: string): Promise<void> {\n  return new Promise<void>((res, reject) => {\n    rename(oldPath, newPath, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      res();\n    });\n  });\n}\n"]}