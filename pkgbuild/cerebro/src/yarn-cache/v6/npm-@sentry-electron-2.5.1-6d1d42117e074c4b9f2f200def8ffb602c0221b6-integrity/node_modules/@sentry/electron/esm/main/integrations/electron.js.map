{"version":3,"file":"electron.js","sourceRoot":"","sources":["../../../src/main/integrations/electron.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EACL,GAAG,EACH,YAAY,EACZ,MAAM;AACN,oDAAoD;EACrD,MAAM,UAAU,CAAC;AAIlB,qDAAqD;AACrD;IAAA;QAME;;WAEG;QACI,SAAI,GAAW,QAAQ,CAAC,EAAE,CAAC;IA6DpC,CAAC;IA3DC;;OAEG;IACI,4BAAS,GAAhB;QAAA,iBAyBC;QAxBC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAA5B,CAA4B,CAAC,CAAC;QAE/E,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YAChB,sCAAsC;YACtC,KAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC9C,KAAI,CAAC,sBAAsB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAC,CAAC,EAAE,QAAQ;YACzC,yDAAyD;YACzD,oDAAoD;YACpD,YAAY,CAAC;gBACX,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;oBAC1B,OAAO;iBACR;gBAED,IAAM,OAAO,GAAI,aAAa,EAAE,CAAC,SAAS,EAAqB,CAAC,UAAU,EAAE,CAAC;gBAC7E,IAAM,UAAU,GAAG,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAEhF,KAAI,CAAC,sBAAsB,CAAC,UAAU,IAAI,iBAAe,QAAQ,CAAC,EAAE,MAAG,EAAE,QAAe,EAAE,UAAA,KAAK;oBAC7F,OAAA,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAAtD,CAAsD,CACvD,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,yCAAsB,GAA9B,UACE,QAAgB,EAChB,OAA4B,EAC5B,aAA0C;QAG1C,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAS,CAAC;QAEhD,OAAO,CAAC,IAAI,GAAG,UAAC,KAAa;YAAE,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,6BAAO;;YACpC,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;gBACvD,IAAM,UAAU,GAAG;oBACjB,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAK,QAAQ,SAAI,KAAO;oBAC/B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI;oBACtC,IAAI,EAAE,IAAI;iBACX,CAAC;gBACF,IAAM,MAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACtD,IAAI,MAAI,EAAE;oBACR,aAAa,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBAC3C;aACF;YAED,OAAO,IAAI,8BAAC,KAAK,UAAK,IAAI,IAAE;QAC9B,CAAC,CAAC;IACJ,CAAC;IApED;;OAEG;IACW,WAAE,GAAW,UAAU,CAAC;IAkExC,eAAC;CAAA,AAtED,IAsEC;SAtEY,QAAQ","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport {\n  app,\n  powerMonitor,\n  screen,\n  // tslint:disable-next-line:no-implicit-dependencies\n} from 'electron';\n\nimport { ElectronClient } from '../../common';\n\n/** Electron integration that cleans up the event. */\nexport class Electron implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Electron';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Electron.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._instrumentBreadcrumbs('app', app, event => !event.startsWith('remote-'));\n\n    app.once('ready', () => {\n      // We can't access these until 'ready'\n      this._instrumentBreadcrumbs('Screen', screen);\n      this._instrumentBreadcrumbs('PowerMonitor', powerMonitor);\n    });\n\n    app.on('web-contents-created', (_, contents) => {\n      // SetImmediate is required for contents.id to be correct\n      // https://github.com/electron/electron/issues/12036\n      setImmediate(() => {\n        if (contents.isDestroyed()) {\n          return;\n        }\n\n        const options = (getCurrentHub().getClient() as ElectronClient).getOptions();\n        const customName = options.getRendererName && options.getRendererName(contents);\n\n        this._instrumentBreadcrumbs(customName || `WebContents[${contents.id}]`, contents as any, event =>\n          ['dom-ready', 'load-url', 'destroyed'].includes(event),\n        );\n      });\n    });\n  }\n\n  /**\n   * Hooks into the Electron EventEmitter to capture breadcrumbs for the\n   * specified events.\n   */\n  private _instrumentBreadcrumbs(\n    category: string,\n    emitter: NodeJS.EventEmitter,\n    shouldInclude?: (event: string) => boolean,\n  ): void {\n    type Emit = (event: string, ...args: unknown[]) => boolean;\n    const emit = emitter.emit.bind(emitter) as Emit;\n\n    emitter.emit = (event: string, ...args) => {\n      if (shouldInclude === undefined || shouldInclude(event)) {\n        const breadcrumb = {\n          category: 'electron',\n          message: `${category}.${event}`,\n          timestamp: new Date().getTime() / 1000,\n          type: 'ui',\n        };\n        const self = getCurrentHub().getIntegration(Electron);\n        if (self) {\n          getCurrentHub().addBreadcrumb(breadcrumb);\n        }\n      }\n\n      return emit(event, ...args);\n    };\n  }\n}\n"]}