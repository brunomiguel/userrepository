{"version":3,"file":"onuncaughtexception.js","sourceRoot":"","sources":["../../../src/main/integrations/onuncaughtexception.ts"],"names":[],"mappings":";;;AAAA,qCAA6C;AAE7C,uCAA6D;AAC7D,uCAAwC;AACxC,qCAAkC;AAElC,+BAA+B;AAC/B;IAWE;;OAEG;IACH,6BACmB,QAGX;QAHW,yBAAA,EAAA,aAGX;QAHW,aAAQ,GAAR,QAAQ,CAGnB;QAZR;;WAEG;QACI,SAAI,GAAW,mBAAmB,CAAC,EAAE,CAAC;IAU1C,CAAC;IAEJ;;OAEG;IACI,uCAAS,GAAhB;QAAA,iBAuCC;QAtCC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAC,KAAY;YAClD,IAAM,IAAI,GAAG,oBAAa,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;YACjE,IAAI,IAAI,EAAE;gBACR,oBAAa,EAAE,CAAC,SAAS,CAAC,UAAM,KAAK;;;;;;gCACnC,KAAK,CAAC,iBAAiB,CAAC,UAAO,KAAY;;wCAAK,sBAAA,uCAC3C,KAAK,KACR,KAAK,EAAE,gBAAQ,CAAC,KAAK,IACrB,EAAA;;qCAAA,CAAC,CAAC;gCAEA,QAAQ,GAAG,KAAK,CAAC;gCACrB,IAAI,CAAC,eAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE;oCAClC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;oCACvB,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;oCACjC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;oCAC7B,QAAQ,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;iCAC5B;gCAEK,UAAU,GAAG,oBAAa,EAAE,CAAC,SAAS,EAAgB,CAAC;gCAC7D,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,EAAE,oBAAa,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;gCAChG,qBAAM,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,eAAe,IAAI,IAAI,CAAC,EAAA;;gCAAvE,SAAuE,CAAC;gCAExE,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;oCAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iCACnC;qCAAM,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;oCACjE,8DAA8D;oCAC9D,0DAA0D;oCAC1D,sCAAsC;oCACtC,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;oCACrC,sCAAsC;oCACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oCACf,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;oCAClB,KAAK,GAAG,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAI,KAAK,CAAC,IAAI,UAAK,KAAK,CAAC,OAAS,CAAC;oCACpE,OAAO,GAAG,0BAAwB,KAAO,CAAC;oCAChD,iBAAM,CAAC,YAAY,CAAC,iDAAiD,EAAE,OAAO,CAAC,CAAC;iCACjF;;;;qBACF,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IA9DD;;OAEG;IACW,sBAAE,GAAW,qBAAqB,CAAC;IA4DnD,0BAAC;CAAA,AAhED,IAgEC;AAhEY,kDAAmB","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport { isError } from '@sentry/utils';\nimport { dialog } from 'electron';\n\n/** Capture unhandled erros. */\nexport class OnUncaughtException implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'OnUncaughtException';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = OnUncaughtException.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      /** Fatal Error callback */\n      onFatalError?(firstError: Error, secondError?: Error): void;\n    } = {},\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    global.process.on('uncaughtException', (error: Error) => {\n      const self = getCurrentHub().getIntegration(OnUncaughtException);\n      if (self) {\n        getCurrentHub().withScope(async scope => {\n          scope.addEventProcessor(async (event: Event) => ({\n            ...event,\n            level: Severity.Fatal,\n          }));\n\n          let theError = error;\n          if (!isError(error) && error.stack) {\n            theError = new Error();\n            theError.message = error.message;\n            theError.stack = error.stack;\n            theError.name = error.name;\n          }\n\n          const nodeClient = getCurrentHub().getClient() as NodeClient;\n          nodeClient.captureException(theError, { originalException: error }, getCurrentHub().getScope());\n          await nodeClient.flush(nodeClient.getOptions().shutdownTimeout || 2000);\n\n          if (this._options.onFatalError) {\n            this._options.onFatalError(error);\n          } else if (global.process.listenerCount('uncaughtException') <= 2) {\n            // In addition to this handler there is always one in Electron\n            // The dialog is only shown if there are no other handlers\n            // eslint-disable-next-line no-console\n            console.error('Uncaught Exception:');\n            // eslint-disable-next-line no-console\n            console.error(error);\n            const ref = error.stack;\n            const stack = ref !== undefined ? ref : `${error.name}: ${error.message}`;\n            const message = `Uncaught Exception:\\n${stack}`;\n            dialog.showErrorBox('A JavaScript error occurred in the main process', message);\n          }\n        });\n      }\n    });\n  }\n}\n"]}