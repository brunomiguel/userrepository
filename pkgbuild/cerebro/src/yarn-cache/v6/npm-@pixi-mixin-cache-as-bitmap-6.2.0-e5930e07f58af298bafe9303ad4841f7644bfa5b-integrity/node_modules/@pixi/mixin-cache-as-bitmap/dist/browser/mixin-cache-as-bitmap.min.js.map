{"version":3,"file":"mixin-cache-as-bitmap.min.js","sources":["../../src/index.ts"],"sourcesContent":["import { Texture, BaseTexture, RenderTexture, Renderer, MaskData, AbstractRenderer } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { IPointData, Matrix, Rectangle } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends AbstractRenderer {\n    context: CanvasRenderingContext2D;\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: AbstractRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions|boolean) => void;\n    public originalMask: Container|MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     *\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     *\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: AbstractRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @method\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions|boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"names":["_tempMatrix","Matrix","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","_cacheAsBitmapMultisample","MSAA_QUALITY","NONE","this","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","DisplayObject","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","cacheAsBitmapMultisample","multisample","value","data","CacheData","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","clear","skipUpdateTransform","framebuffer","blit","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"mappings":"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"}