{
  "manifest": {
    "name": "async-done",
    "version": "1.3.2",
    "description": "Allows libraries to handle various caller provided asynchronous functions uniformly. Maps promises, observables, child processes and streams, and callbacks to callback style.",
    "author": {
      "name": "Gulp Team",
      "email": "team@gulpjs.com",
      "url": "https://gulpjs.com/"
    },
    "contributors": [
      {
        "name": "Blaine Bublitz",
        "email": "blaine.bublitz@gmail.com"
      },
      {
        "name": "Pawel Kozlowski",
        "email": "pkozlowski.opensource@gmail.com"
      },
      {
        "name": "Matthew Podwysocki",
        "email": "matthew.podwysocki@gmail.com"
      },
      {
        "name": "Charles Samborski",
        "email": "demurgos@demurgos.net"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gulpjs/async-done.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 0.10"
    },
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.js",
      "index.d.ts",
      "LICENSE"
    ],
    "scripts": {
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "nyc mocha --async-only",
      "test-types": "tsc -p test/types",
      "azure-pipelines": "nyc mocha --async-only --reporter xunit -O output=test.xunit",
      "coveralls": "nyc report --reporter=text-lcov | coveralls"
    },
    "dependencies": {
      "end-of-stream": "^1.1.0",
      "once": "^1.3.2",
      "process-nextick-args": "^2.0.0",
      "stream-exhaust": "^1.0.1"
    },
    "devDependencies": {
      "@types/node": "^9.3.0",
      "coveralls": "github:phated/node-coveralls#2.x",
      "eslint": "^2.13.1",
      "eslint-config-gulp": "^3.0.1",
      "expect": "^1.20.2",
      "mocha": "^3.0.0",
      "nyc": "^10.3.2",
      "pumpify": "^1.3.6",
      "rxjs": "^5.5.6",
      "through2": "^2.0.0",
      "typescript": "^2.6.2",
      "when": "^3.7.3"
    },
    "keywords": [
      "promises",
      "callbacks",
      "observables",
      "streams",
      "end",
      "completion",
      "complete",
      "finish",
      "done",
      "async",
      "error handling"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-async-done-1.3.2-integrity/node_modules/async-done/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# async-done\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Azure Pipelines Build Status][azure-pipelines-image]][azure-pipelines-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nAllows libraries to handle various caller provided asynchronous functions uniformly. Maps promises, observables, child processes and streams, and callbacks to callback style.\n\nAs async conventions evolve, it is useful to be able to deal with several different *styles* of async completion uniformly. With this module you can handle completion using a node-style callback, regardless of a return value that's a promise, observable, child process or stream.\n\n## Usage\n\n### Successful completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(null, 2);\n}, function(error, result){\n  // `error` will be null on successful execution of the first function.\n  // `result` will be the result from the first function.\n});\n```\n\n### Failed completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(new Error('Some Error Occurred'));\n}, function(error, result){\n  // `error` will be an error from the first function.\n  // `result` will be undefined on failed execution of the first function.\n});\n```\n\n## API\n\n### `asyncDone(fn, callback)`\n\nTakes a function to execute (`fn`) and a function to call on completion (`callback`).\n\n#### `fn([done])`\n\nOptionally takes a callback to call when async tasks are complete.\n\n#### Completion and Error Resolution\n\n* `Callback` (`done`) called\n  - Completion: called with null error\n  - Error: called with non-null error\n* `Stream` or `EventEmitter` returned\n  - Completion: [end-of-stream][end-of-stream] module\n  - Error: [domains][domains]\n  - __Note:__ Only actual streams are supported, not faux-streams; Therefore, modules like [`event-stream`][event-stream] are not supported.\n* `Child Process` returned\n  - Completion [end-of-stream][end-of-stream] module\n  - Error: [domains][domains]\n* `Promise` returned\n  - Completion: [onFulfilled][promise-onfulfilled] method called\n  - Error: [onRejected][promise-onrejected] method called\n* `Observable` (e.g. from [RxJS v5][rxjs5-observable] or [RxJS v4][rxjs5-observable]) returned\n  - Completion: [complete][rxjs5-observer-complete] method called\n  - Error: [error][rxjs5-observer-error] method called\n\n__Warning:__ Sync tasks are __not supported__ and your function will never complete if the one of the above strategies is not used to signal completion. However, thrown errors will be caught by the domain.\n\n#### `callback(error, result)`\n\nIf an error doesn't occur in the execution of the `fn` function, the `callback` method will receive the results as its second argument. Note: Some streams don't received any results.\n\nIf an error occurred in the execution of the `fn` function, The `callback` method will receive an error as its first argument.\n\nErrors can be caused by:\n\n* A thrown error\n* An error passed to a `done` callback\n* An `error` event emitted on a returned `Stream`, `EventEmitter` or `Child Process`\n* A rejection of a returned `Promise` - If the `Promise` is not rejected with a value, we generate a new `Error`\n* The `onError` handler being called on an `Observable`\n\n## License\n\nMIT\n\n[downloads-image]: https://img.shields.io/npm/dm/async-done.svg\n[npm-url]: https://www.npmjs.com/package/async-done\n[npm-image]: https://img.shields.io/npm/v/async-done.svg\n\n[azure-pipelines-url]: https://dev.azure.com/gulpjs/gulp/_build/latest?definitionId=6&branchName=master\n[azure-pipelines-image]: https://dev.azure.com/gulpjs/gulp/_apis/build/status/async-done?branchName=master\n\n[travis-url]: https://travis-ci.org/gulpjs/async-done\n[travis-image]: https://img.shields.io/travis/gulpjs/async-done.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/async-done\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/async-done.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/async-done\n[coveralls-image]: https://img.shields.io/coveralls/gulpjs/async-done/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n\n[end-of-stream]: https://www.npmjs.com/package/end-of-stream\n[domains]: http://nodejs.org/api/domain.html\n[event-stream]: https://github.com/dominictarr/event-stream\n[promise-onfulfilled]: http://promisesaplus.com/#point-26\n[promise-onrejected]: http://promisesaplus.com/#point-30\n[rx4-observable]: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md\n[rxjs5-observable]: http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html\n[rxjs5-observer-complete]: http://reactivex.io/rxjs/class/es6/MiscJSDoc.js~ObserverDoc.html#instance-method-complete\n[rxjs5-observer-error]: http://reactivex.io/rxjs/class/es6/MiscJSDoc.js~ObserverDoc.html#instance-method-error\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Blaine Bublitz, Eric Schoffstall and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/async-done/-/async-done-1.3.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/async-done/-/async-done-1.3.2.tgz",
    "hash": "",
    "integrity": "sha512-uYkTP8dw2og1tu1nmza1n1CMW0qb8gWWlwqMmLb7MhBVs4BXrFziT6HXUd+/RlRA/i4H9AkofYloUbs1fwMqlw==",
    "registry": "npm",
    "packageName": "async-done",
    "cacheIntegrity": "sha512-uYkTP8dw2og1tu1nmza1n1CMW0qb8gWWlwqMmLb7MhBVs4BXrFziT6HXUd+/RlRA/i4H9AkofYloUbs1fwMqlw== sha1-XhWqcplipLB0FPUoqIzfGOCykKI="
  },
  "registry": "npm",
  "hash": "b989133fc770da8835b6ed679b36b59f508c5b4a9bf20596970a8c98b6fb321055b38057ac5ce24fa1d751dfbf465440fe2e07f409287d896851bb357f032a97"
}