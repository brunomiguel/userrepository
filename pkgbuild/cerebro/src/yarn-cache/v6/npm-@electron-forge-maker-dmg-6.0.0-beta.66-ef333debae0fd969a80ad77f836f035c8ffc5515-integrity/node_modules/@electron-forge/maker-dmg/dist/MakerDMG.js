"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MakerDMGConfig", {
    enumerable: true,
    get: function() {
        return _config.MakerDMGConfig;
    }
});
exports.default = void 0;
var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _config = require("./Config");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MakerDMG extends _makerBase.default {
    isSupportedOnCurrentPlatform() {
        return process.platform === 'darwin';
    }
    async make({ dir , makeDir , appName , packageJSON , targetArch  }) {
        // eslint-disable-next-line global-require
        const electronDMG = require('electron-installer-dmg');
        const outPath = _path.default.resolve(makeDir, `${this.config.name || appName}.dmg`);
        const forgeDefaultOutPath = _path.default.resolve(makeDir, `${appName}-${packageJSON.version}-${targetArch}.dmg`);
        await this.ensureFile(outPath);
        const dmgConfig = {
            overwrite: true,
            name: appName,
            ...this.config,
            appPath: _path.default.resolve(dir, `${appName}.app`),
            out: _path.default.dirname(outPath)
        };
        const opts = await electronDMG(dmgConfig);
        if (!this.config.name) {
            await this.ensureFile(forgeDefaultOutPath);
            await _fsExtra.default.rename(outPath, forgeDefaultOutPath);
            return [
                forgeDefaultOutPath
            ];
        }
        return [
            opts.dmgPath
        ];
    }
    constructor(...args){
        super(...args);
        this.name = 'dmg';
        this.defaultPlatforms = [
            'darwin',
            'mas'
        ];
    }
}
exports.default = MakerDMG;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlckRNRy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTWFrZXJETUdDb25maWcgfSBmcm9tICcuL0NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyRE1HIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyRE1HQ29uZmlnPiB7XG4gIG5hbWUgPSAnZG1nJztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ2RhcndpbicsICdtYXMnXTtcblxuICBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJztcbiAgfVxuXG4gIGFzeW5jIG1ha2UoeyBkaXIsIG1ha2VEaXIsIGFwcE5hbWUsIHBhY2thZ2VKU09OLCB0YXJnZXRBcmNoIH06IE1ha2VyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgICBjb25zdCBlbGVjdHJvbkRNRyA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1kbWcnKTtcblxuICAgIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUobWFrZURpciwgYCR7dGhpcy5jb25maWcubmFtZSB8fCBhcHBOYW1lfS5kbWdgKTtcbiAgICBjb25zdCBmb3JnZURlZmF1bHRPdXRQYXRoID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsIGAke2FwcE5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0tJHt0YXJnZXRBcmNofS5kbWdgKTtcblxuICAgIGF3YWl0IHRoaXMuZW5zdXJlRmlsZShvdXRQYXRoKTtcbiAgICBjb25zdCBkbWdDb25maWcgPSB7XG4gICAgICBvdmVyd3JpdGU6IHRydWUsXG4gICAgICBuYW1lOiBhcHBOYW1lLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBhcHBQYXRoOiBwYXRoLnJlc29sdmUoZGlyLCBgJHthcHBOYW1lfS5hcHBgKSxcbiAgICAgIG91dDogcGF0aC5kaXJuYW1lKG91dFBhdGgpLFxuICAgIH07XG4gICAgY29uc3Qgb3B0cyA9IGF3YWl0IGVsZWN0cm9uRE1HKGRtZ0NvbmZpZyk7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5uYW1lKSB7XG4gICAgICBhd2FpdCB0aGlzLmVuc3VyZUZpbGUoZm9yZ2VEZWZhdWx0T3V0UGF0aCk7XG4gICAgICBhd2FpdCBmcy5yZW5hbWUob3V0UGF0aCwgZm9yZ2VEZWZhdWx0T3V0UGF0aCk7XG4gICAgICByZXR1cm4gW2ZvcmdlRGVmYXVsdE91dFBhdGhdO1xuICAgIH1cblxuICAgIHJldHVybiBbb3B0cy5kbWdQYXRoXTtcbiAgfVxufVxuXG5leHBvcnQgeyBNYWtlckRNR0NvbmZpZyB9O1xuIl0sIm5hbWVzIjpbIk1ha2VyRE1HQ29uZmlnIiwiTWFrZXJETUciLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwicHJvY2VzcyIsInBsYXRmb3JtIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJhcHBOYW1lIiwicGFja2FnZUpTT04iLCJ0YXJnZXRBcmNoIiwiZWxlY3Ryb25ETUciLCJyZXF1aXJlIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiY29uZmlnIiwibmFtZSIsImZvcmdlRGVmYXVsdE91dFBhdGgiLCJ2ZXJzaW9uIiwiZW5zdXJlRmlsZSIsImRtZ0NvbmZpZyIsIm92ZXJ3cml0ZSIsImFwcFBhdGgiLCJvdXQiLCJkaXJuYW1lIiwib3B0cyIsImZzIiwicmVuYW1lIiwiZG1nUGF0aCIsImRlZmF1bHRQbGF0Zm9ybXMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBMENTQSxDQUFjOzs7ZUFBZEEsT0FBYzs7OztBQTFDaUIsR0FBNEIsQ0FBNUIsVUFBNEI7QUFHckQsR0FBVSxDQUFWLFFBQVU7QUFDUixHQUFNLENBQU4sS0FBTTtBQUNRLEdBQVUsQ0FBVixPQUFVOzs7Ozs7TUFFcEJDLFFBQVEsU0FBU0MsVUFBUztJQUs3Q0MsNEJBQTRCLEdBQVksQ0FBQztRQUN2QyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsUUFBUSxLQUFLLENBQVE7SUFDdEMsQ0FBQztVQUVLQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxHQUFHLEdBQUVDLE9BQU8sR0FBRUMsT0FBTyxHQUFFQyxXQUFXLEdBQUVDLFVBQVUsRUFBZSxDQUFDLEVBQXFCLENBQUM7UUFDL0YsRUFBMEMsQUFBMUMsd0NBQTBDO1FBQzFDLEtBQUssQ0FBQ0MsV0FBVyxHQUFHQyxPQUFPLENBQUMsQ0FBd0I7UUFFcEQsS0FBSyxDQUFDQyxPQUFPLEdBQUdDLEtBQUksU0FBQ0MsT0FBTyxDQUFDUixPQUFPLEtBQUssSUFBSSxDQUFDUyxNQUFNLENBQUNDLElBQUksSUFBSVQsT0FBTyxDQUFDLElBQUk7UUFDekUsS0FBSyxDQUFDVSxtQkFBbUIsR0FBR0osS0FBSSxTQUFDQyxPQUFPLENBQUNSLE9BQU8sS0FBS0MsT0FBTyxDQUFDLENBQUMsRUFBRUMsV0FBVyxDQUFDVSxPQUFPLENBQUMsQ0FBQyxFQUFFVCxVQUFVLENBQUMsSUFBSTtRQUV0RyxLQUFLLENBQUMsSUFBSSxDQUFDVSxVQUFVLENBQUNQLE9BQU87UUFDN0IsS0FBSyxDQUFDUSxTQUFTLEdBQUcsQ0FBQztZQUNqQkMsU0FBUyxFQUFFLElBQUk7WUFDZkwsSUFBSSxFQUFFVCxPQUFPO2VBQ1YsSUFBSSxDQUFDUSxNQUFNO1lBQ2RPLE9BQU8sRUFBRVQsS0FBSSxTQUFDQyxPQUFPLENBQUNULEdBQUcsS0FBS0UsT0FBTyxDQUFDLElBQUk7WUFDMUNnQixHQUFHLEVBQUVWLEtBQUksU0FBQ1csT0FBTyxDQUFDWixPQUFPO1FBQzNCLENBQUM7UUFDRCxLQUFLLENBQUNhLElBQUksR0FBRyxLQUFLLENBQUNmLFdBQVcsQ0FBQ1UsU0FBUztRQUN4QyxFQUFFLEdBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUNDLElBQUksRUFBRSxDQUFDO1lBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0YsbUJBQW1CO1lBQ3pDLEtBQUssQ0FBQ1MsUUFBRSxTQUFDQyxNQUFNLENBQUNmLE9BQU8sRUFBRUssbUJBQW1CO1lBQzVDLE1BQU0sQ0FBQyxDQUFDQTtnQkFBQUEsbUJBQW1CO1lBQUEsQ0FBQztRQUM5QixDQUFDO1FBRUQsTUFBTSxDQUFDLENBQUNRO1lBQUFBLElBQUksQ0FBQ0csT0FBTztRQUFBLENBQUM7SUFDdkIsQ0FBQzs7O1FBaENZLElBaUNkLENBaENDWixJQUFJLEdBQUcsQ0FBSztRQURDLElBaUNkLENBOUJDYSxnQkFBZ0IsR0FBb0IsQ0FBQztZQUFBLENBQVE7WUFBRSxDQUFLO1FBQUEsQ0FBQzs7O2tCQUhsQzlCLFFBQVEifQ==