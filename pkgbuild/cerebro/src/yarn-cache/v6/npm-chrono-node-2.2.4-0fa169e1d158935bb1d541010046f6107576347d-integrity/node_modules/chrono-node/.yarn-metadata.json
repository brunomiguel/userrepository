{
  "manifest": {
    "name": "chrono-node",
    "description": "A natural language date parser in Javascript",
    "homepage": "http://github.com/wanasit/chrono",
    "repository": {
      "type": "git",
      "url": "https://github.com/wanasit/chrono.git"
    },
    "prettier": {
      "quoteProps": "preserve"
    },
    "jest": {
      "verbose": true,
      "testURL": "http://localhost/",
      "preset": "ts-jest"
    },
    "license": "MIT",
    "version": "2.2.4",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "devDependencies": {
      "@types/jest": "^26.0.4",
      "@typescript-eslint/eslint-plugin": "^4.7.0",
      "@typescript-eslint/parser": "^4.7.0",
      "eslint": "^7.13.0",
      "eslint-config-prettier": "^6.15.0",
      "husky": "^4.2.5",
      "jest": "^26.1.0",
      "prettier": "^2.0.5",
      "ts-jest": "^26.1.1",
      "typedoc": "^0.20.25",
      "typescript": "^4.1.3"
    },
    "husky": {
      "hooks": {
        "pre-commit": "npm run prettier && npm run test:silent"
      }
    },
    "scripts": {
      "build": "tsc -p tsconfig.build.json",
      "document": "typedoc",
      "prepare": "npm run build",
      "eslint": "eslint src test",
      "prettier": "npm run prettier:src && npm run prettier:test",
      "prettier:src": "prettier --write src --loglevel=warn",
      "prettier:test": "prettier --write test --loglevel=warn",
      "watch": "jest --watch",
      "test": "jest --coverage",
      "test:silent": "jest --silent",
      "coveralls": "npm run test && cat coverage/lcov.info | coveralls"
    },
    "dependencies": {
      "dayjs": "^1.10.0"
    },
    "eslintConfig": {
      "env": {
        "es6": true,
        "node": true,
        "browser": true
      },
      "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
          "modules": true
        },
        "project": "./tsconfig.json"
      },
      "parser": "@typescript-eslint/parser",
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier",
        "prettier/@typescript-eslint"
      ],
      "plugins": [
        "@typescript-eslint"
      ],
      "reportUnusedDisableDirectives": true,
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "args": "none"
          }
        ],
        "prefer-const": "warn"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-chrono-node-2.2.4-0fa169e1d158935bb1d541010046f6107576347d-integrity/node_modules/chrono-node/package.json",
    "readmeFilename": "README.md",
    "readme": "# Chrono (v2)\n\nA natural language date parser in Javascript. \n\n[![Build Status](https://travis-ci.org/wanasit/chrono.svg?branch=master)](https://travis-ci.org/wanasit/chrono)\n[![Coverage Status](https://img.shields.io/coveralls/wanasit/chrono.svg)](https://coveralls.io/r/wanasit/chrono?branch=master)\n\nIt is designed to handle most date/time format and extract information from any given text:\n\n* _Today_, _Tomorrow_, _Yesterday_, _Last Friday_, etc\n* _17 August 2013 - 19 August 2013_\n* _This Friday from 13:00 - 16.00_\n* _5 days ago_\n* _2 weeks from now_\n* _Sat Aug 17 2013 18:40:39 GMT+0900 (JST)_\n* _2014-11-30T08:15:30-05:30_\n\n### Installation\n\nWith npm:\n```bash\n$ npm install --save chrono-node\n```\n    \n```javascript\nimport * as chrono from 'chrono-node';\n\nchrono.parseDate('An appointment on Sep 12-13'); \n```\nFor Node.js:\n```javascript\nconst chrono = require('chrono-node');\n\n// or `import chrono from 'chrono-node'` for ECMAScript\n```\n\n### What's changed in the v2\nFor Users\n* Chrono’s default now handles only international English. While in the previous version, it tried to parse with all known languages.\n* The current fully supported languages are `en`, `ja`, and `fr` (`de` and `pt` are partially supported). Other languages from v1 (`nl` and `zh`) are under development.\n\nFor contributors and advanced users\n* The project is rewritten in TypeScript\n* New [Parser](#parser) and [Refiner](#refiner) interface \n* New source code structure. All parsers, refiners, and configuration should be under a locale directory (See. `locales/en`)\n\n**Note: [v1.x.x](https://github.com/wanasit/chrono/tree/v1.x.x) will still be supported for the time being.**\n\n## Usage\n\nSimply pass a `string` to functions `chrono.parseDate` or `chrono.parse`. \n\n```javascript\nimport * as chrono from 'chrono-node';\n\nchrono.parseDate('An appointment on Sep 12-13');\n// Fri Sep 12 2014 12:00:00 GMT-0500 (CDT)\n    \nchrono.parse('An appointment on Sep 12-13');\n/* [{ \n    index: 18,\n    text: 'Sep 12-13',\n    start: ...\n}] */\n```\n\nFor more advanced usage, here is the typescript definition of the `parse` function:\n```typescript\nparse(text: string, refDate?: Date, option?: ParsingOption): ParsedResult[] {...}\n```\n\n#### Reference Date\n\nToday's \"Friday\" is different from last month's \"Friday\". \nThe meaning of the referenced dates depends on when they are mentioned. \nChrono lets you define a reference date using `chrono.parse(text, ref)` and `chrono.parseDate(text, ref)`.    \n\n```javascript\nchrono.parseDate('Friday', new Date(2012, 7, 23)); \n// Fri Aug 24 2012 12:00:00 GMT+0700 (ICT)\n\nchrono.parseDate('Friday', new Date(2012, 7, 1)); \n// Fri Aug 03 2012 12:00:00 GMT+0700 (ICT)\n```\n\n### Parsing Options\n\n`forwardDate` (boolean) to assume the results should happen after the reference date (forward into the future)\n\n```javascript\nconst referenceDate = new Date(2012, 7, 25);\n// Sat Aug 25 2012 00:00:00 GMT+0900 -- The reference date was Saturday\n\nchrono.parseDate('Friday', referenceDate);\n// Fri Aug 24 2012 12:00:00 GMT+0900 (JST) -- The day before was Friday\n\nchrono.parseDate('Friday', referenceDate, { forwardDate: true });\n// Fri Aug 31 2012 12:00:00 GMT+0900 (JST) -- The following Friday\n```\n\n### Parsed Results and Components\n\n#### ParsedResult\n* `refDate: Date` The [reference date](#reference-date) of this result\n* `index: number` The location within the input text of this result  \n* `text: string`  The text this result that appears in the input \n* `start: ParsedComponents` The parsed date components as a [ParsedComponents](#parsedcomponents) object\n* `end?: ParsedComponents`  Similar to `start`\n* `date: () => Date` Create a javascript Date\n\n#### ParsedComponents\n* `get: (c: Component) => number | null`    Get known or implied value for the component\n* `isCertain: (c: Component) => boolean`    Check if the component has a known value\n* `date: () => Date`    Create a javascript Date\n\nFor example:\n```js\nconst results = chrono.parse('I have an appointment tomorrow from 10 to 11 AM');\n\nresults[0].index;     // 15\nresults[0].text;      // 'tomorrow from 10 to 11 AM'\nresults[0].refDate;   // Sat Dec 13 2014 21:50:14 GMT-0600 (CST)\n\n// `start` is Sat Dec 14 2014 10:00:00\nresults[0].start.get('day');    // 14 (the 14th, the day after refDate)\nresults[0].start.get('month');  // 12 (or December)\nresults[0].start.get('hour');   // 10 \nresults[0].start.date();        // Sun Dec 14 2014 10:00:00 GMT-0600 (CST)\n\n...\nresults[0].end.date();  // Sun Dec 14 2014 11:00:00 GMT-0600 (CST)\n```\n\n### Strict vs Casual configuration\n\nChrono comes with `strict` mode that parse only formal date patterns. \n\n```js\n// 'strict' mode\nchrono.strict.parseDate('Today');       // null\nchrono.strict.parseDate('Friday');      // null\nchrono.strict.parseDate('2016-07-01');  // Fri Jul 01 2016 12:00:00 ...\nchrono.strict.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\n\n// 'casual' mode (default) \nchrono.parseDate('Today');              // Thu Jun 30 2016 12:00:00 ...\nchrono.casual.parseDate('Friday');      // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('2016-07-01');  // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\n```\n\n### Locales\n\nBy default, Chrono is configured to handle **only international English**. \nThis differs from the previous version of Chrono that would try all locales by default.\n\nThere are several locales supported contributed by multiple developers under `./locales` directory.\n\n```js\n// default English (US)\nchrono.parseDate('6/10/2018');    \n\nchrono.en.parseDate('6/10/2018'); \nchrono.ja.parseDate('昭和６４年１月７日'); \n```\n\nCurrent supported locale options are: `en`, `ja`\n\n## Customize Chrono\n\nChrono’s extraction pipeline configuration consists of `parsers: Parser[]` and `refiners: Refiner[]`.\n\n* First, each parser independently extracts patterns from input text input and create parsing results  ([ParsingResult](#parsedresult)).\n* Then, the parsing results are combined, sorted, and refined with the refiners. In the refining phase, the results can be filtered-out, merged, or attached with additional information.\n\n### Parser\n\n```typescript\ninterface Parser {\n    pattern: (context: ParsingContext) => RegExp,\n    extract: (context: ParsingContext, match: RegExpMatchArray) =>\n        (ParsingComponents | ParsingResult | {[c in Component]?: number} | null)\n}\n```\n\nParser is a module for low-level pattern-based parsing. \nIdeally, each parser should be designed to handle a single specific date format. \n\nUser can create a new parser for supporting new date formats or languages\n by providing RegExp pattern `pattern()` and extracting result or components from the RegExp match `extract()`.\n\n```javascript\nconst custom = chrono.casual.clone();\ncustom.parsers.push({\n    pattern: () => { return /\\bChristmas\\b/i },\n    extract: (context, match) => {\n        return {\n            day: 25, month: 12\n        }\n    }\n});\n\ncustom.parseDate(\"I'll arrive at 2.30AM on Christmas night\");\n// Wed Dec 25 2013 02:30:00 GMT+0900 (JST)\n// 'at 2.30AM on Christmas'\n```\n\n### Refiner\n\n```typescript\ninterface Refiner {\n    refine: (context: ParsingContext, results: ParsingResult[]) => ParsingResult[]\n}\n```\n\nRefiner is a higher level module for improving or manipulating the results. User can add a new type of refiner to customize Chrono's results or to add some custom logic to Chrono.\n\n```javascript\nconst custom = chrono.casual.clone();\ncustom.refiners.push({\n    refine: (context, results) => {\n        // If there is no AM/PM (meridiem) specified,\n        //  let all time between 1:00 - 4:00 be PM (13.00 - 16.00)\n        results.forEach((result) => {\n            if (!result.start.isCertain('meridiem') &&\n                result.start.get('hour') >= 1 && result.start.get('hour') < 4) {\n\n                result.start.assign('meridiem', 1);\n                result.start.assign('hour', result.start.get('hour') + 12);\n            }\n        });\n        return results;\n    }\n});\n\n// This will be parsed as PM.\n// > Tue Dec 16 2014 14:30:00 GMT-0600 (CST) \ncustom.parseDate(\"This is at 2.30\");\n\n// Unless the 'AM' part is specified\n// > Tue Dec 16 2014 02:30:00 GMT-0600 (CST)\ncustom.parseDate(\"This is at 2.30 AM\");\n```\n\nIn the example, the custom refiner assigns PM to parsing results with ambiguous [meridiem](http://en.wikipedia.org/wiki/12-hour_clock). \nThe `refine` method of the refiner class will be called with parsing [results](#parsedresult) (from [parsers](#parser) or other previous refiners). \nThe method must return an array of the new results (which, in this case, we modified those results in place).\n\n### More documentation\n\nCheckout the Typescript Documentation in the project's [Github page](http://wanasit.github.io/chrono/).\n\n## Development Guides\n\nThis guide explains how to set up chrono project for prospective contributors.\n\n```bash\n# Clone and install library\n$ git clone https://github.com/wanasit/chrono.git chrono\n$ cd chrono\n$ npm install\n\n```\n\nParsing date from text is complicated. A small change can have effects on unexpected places. \nSo, Chrono is a heavily tested library. \nCommits that break a test shouldn't be allowed in any condition.\n\nChrono's unit testing is based-on [Jest](https://facebook.github.io/jest/). \n\n```bash\n# Run the test\n$ npm run test\n\n# Run the test in watch mode\n$ npm run watch\n```\n\nChrono's source files is in `src` directory. \nThe built bundle (`dist/*`) is created by running [Webpack](https://webpack.js.org/) via the following command \n\n```bash\n$ npm run build\n```\n\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2014, Wanasit Tanakitrungruang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/chrono-node/-/chrono-node-2.2.4.tgz#0fa169e1d158935bb1d541010046f6107576347d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/chrono-node/-/chrono-node-2.2.4.tgz",
    "hash": "0fa169e1d158935bb1d541010046f6107576347d",
    "integrity": "sha512-58ERHGfWtWzBxckF9ZyFuwJjcreLDr7C79lHEynSqZ7J8y1JfMa8ok1TvCCf/TOZmkGME1ZSaEEb0DqqWaNFHg==",
    "registry": "npm",
    "packageName": "chrono-node",
    "cacheIntegrity": "sha512-58ERHGfWtWzBxckF9ZyFuwJjcreLDr7C79lHEynSqZ7J8y1JfMa8ok1TvCCf/TOZmkGME1ZSaEEb0DqqWaNFHg== sha1-D6Fp4dFYk1ux1UEBAEb2EHV2NH0="
  },
  "registry": "npm",
  "hash": "0fa169e1d158935bb1d541010046f6107576347d"
}