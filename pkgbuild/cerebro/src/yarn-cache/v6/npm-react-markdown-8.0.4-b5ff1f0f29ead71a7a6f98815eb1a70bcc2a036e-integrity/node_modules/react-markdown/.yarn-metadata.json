{
  "manifest": {
    "name": "react-markdown",
    "version": "8.0.4",
    "description": "React component to render markdown",
    "license": "MIT",
    "keywords": [
      "remark",
      "unified",
      "markdown",
      "commonmark",
      "gfm",
      "ast",
      "react",
      "react-component",
      "component"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/remarkjs/react-markdown.git"
    },
    "bugs": {
      "url": "https://github.com/remarkjs/react-markdown/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Espen Hovlandsdal",
      "email": "espen@hovlandsdal.com"
    },
    "contributors": [
      {
        "name": "Espen Hovlandsdal",
        "email": "espen@hovlandsdal.com"
      },
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Thomas Lindstrøm",
        "email": "t@hom.as"
      },
      {
        "name": "Fabian Irsara",
        "email": "info@fabianirsara.com"
      },
      {
        "name": "René Kooi",
        "email": "renee@kooi.me"
      },
      {
        "name": "Nicolas Venegas",
        "email": "nvenegas@atlassian.com"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      },
      {
        "name": "Linus Unnebäck",
        "email": "linus@folkdatorn.se"
      },
      {
        "name": "Peng Guanwen",
        "email": "pg999w@outlook.com"
      },
      {
        "name": "mudrz",
        "email": "mudrz@outlook.com"
      },
      {
        "name": "Jesse Pinho",
        "email": "jesse@jessepinho.com"
      },
      {
        "name": "Florentin Luca Rieger",
        "email": "florentin.rieger@gmail.com"
      },
      {
        "name": "Frank",
        "email": "frankieali4@gmail.com"
      },
      {
        "name": "Igor Kamyshev",
        "email": "garik.novel@gmail.com"
      },
      {
        "name": "Jack Williams",
        "email": "jsw547@gmail.com"
      },
      {
        "name": "Jakub Chrzanowski",
        "email": "jakub@chrzanowski.info"
      },
      {
        "name": "Jeremy Moseley",
        "email": "jeremy@jeremymoseley.net"
      },
      {
        "name": "Kelvin Chan",
        "email": "kchan@securitycompass.com"
      },
      {
        "name": "Kohei Asai",
        "email": "me@axross.io"
      },
      {
        "name": "Marshall Smith",
        "email": "marshall@radialdevgroup.com"
      },
      {
        "name": "Nathan Bierema",
        "email": "nbierema@gmail.com"
      },
      {
        "name": "Petr Gazarov",
        "email": "petrgazarov@gmail.com"
      },
      {
        "name": "Phil Rajchgot",
        "email": "tophil@outlook.com"
      },
      {
        "name": "Rasmus Eneman",
        "email": "rasmus@eneman.eu"
      },
      {
        "name": "Riku Rouvila",
        "email": "riku.rouvila@gmail.com"
      },
      {
        "name": "Robin Wieruch",
        "email": "wrobin@gmx.net"
      },
      {
        "name": "Rostyslav Melnychuk",
        "email": "blackswordgc@gmail.com"
      },
      {
        "name": "Ted Piotrowski",
        "email": "tppiotrowski@gmail.com"
      },
      {
        "name": "Thibaud Courtoison",
        "email": "do.not.press.enter@gmail.com"
      },
      {
        "name": "Tiago Roldão",
        "email": "focus5.6@gmail.com"
      },
      {
        "name": "cerkiewny",
        "email": "mstarzycki@gmail.com"
      },
      {
        "name": "evoye",
        "email": "rosej@gmx.net"
      },
      {
        "name": "gRoberts84",
        "email": "gavin@gav-roberts.co.uk"
      },
      {
        "name": "Alexander Wallin",
        "email": "office@alexanderwallin.com"
      },
      {
        "name": "vanchagreen",
        "email": "vanchagreen@gmail.com"
      },
      {
        "name": "Alexander Wong",
        "email": "admin@alexander-wong.com"
      },
      {
        "name": "André Staltz",
        "email": "andre@staltz.com"
      },
      {
        "name": "Angus MacIsaac",
        "email": "angus.macisaac@busbud.com"
      },
      {
        "name": "Beau Roberts",
        "email": "beau.roberts@autodesk.com"
      },
      {
        "name": "Charlie Chen",
        "email": "doveccl@live.com"
      },
      {
        "name": "Christoph Werner",
        "email": "christoph@codepunkt.de"
      },
      {
        "name": "Danny",
        "email": "dannyharding10@gmail.com"
      },
      {
        "name": "Dennis S",
        "email": "denis.s@svsg.co"
      },
      {
        "name": "Evan Hensleigh",
        "email": "futuraprime@gmail.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "unpkg": "react-markdown.min.js",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js",
      "react-markdown.min.js"
    ],
    "dependencies": {
      "@types/hast": "^2.0.0",
      "@types/prop-types": "^15.0.0",
      "@types/unist": "^2.0.0",
      "comma-separated-tokens": "^2.0.0",
      "hast-util-whitespace": "^2.0.0",
      "prop-types": "^15.0.0",
      "property-information": "^6.0.0",
      "react-is": "^18.0.0",
      "remark-parse": "^10.0.0",
      "remark-rehype": "^10.0.0",
      "space-separated-tokens": "^2.0.0",
      "style-to-object": "^0.3.0",
      "unified": "^10.0.0",
      "unist-util-visit": "^4.0.0",
      "vfile": "^5.0.0"
    },
    "peerDependencies": {
      "@types/react": ">=16",
      "react": ">=16"
    },
    "devDependencies": {
      "@types/react": "^18.0.0",
      "@types/react-dom": "^18.0.0",
      "@types/react-is": "^17.0.0",
      "c8": "^7.0.0",
      "esbuild": "^0.15.0",
      "eslint-config-xo-react": "^0.27.0",
      "eslint-plugin-es": "^4.0.0",
      "eslint-plugin-react": "^7.0.0",
      "eslint-plugin-react-hooks": "^4.0.0",
      "eslint-plugin-security": "^1.0.0",
      "prettier": "^2.0.0",
      "react": "^18.0.0",
      "react-dom": "^18.0.0",
      "rehype-raw": "^6.0.0",
      "remark-cli": "^11.0.0",
      "remark-gfm": "^3.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "remark-toc": "^8.0.0",
      "rimraf": "^3.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "uvu": "^0.5.0",
      "xo": "^0.53.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{lib/**/**,test/**,script/**,}*.d.ts\" && tsc && type-coverage && esbuild index.js --bundle --minify --target=es2015 --outfile=react-markdown.min.js --global-name=ReactMarkdown --banner:js=\"(function (g, f) {typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = f() : typeof define === 'function' && define.amd ? define([], f) : (g = typeof globalThis !== 'undefined' ? globalThis : g || self, g.ReactMarkdown = f()); }(this, (function () { 'use strict';\" --footer:js=\"return ReactMarkdown;})));\"",
      "format": "remark . -qfo --ignore-pattern test/ && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --no-warnings --experimental-loader=./test/loader.js ./node_modules/.bin/uvu test \"\\.jsx$\"",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm",
        [
          "gfm",
          {
            "tablePipeAlign": false
          }
        ],
        [
          "lint-table-pipe-alignment",
          false
        ],
        [
          "lint-no-html",
          false
        ]
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "#": "below is ignored because some proptypes will `any`",
      "ignoreFiles": [
        "lib/react-markdown.d.ts",
        "index.d.ts"
      ]
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "extends": "xo-react",
      "envs": [
        "shared-node-browser"
      ],
      "overrides": [
        {
          "files": [
            "lib/**/*.js"
          ],
          "extends": [
            "plugin:es/restrict-to-es2019",
            "plugin:security/recommended"
          ],
          "rules": {
            "complexity": "off",
            "security/detect-object-injection": "off"
          }
        },
        {
          "files": [
            "test/**/*.jsx"
          ],
          "rules": {
            "n/file-extension-in-import": "off",
            "react/no-children-prop": "off",
            "react/prop-types": "off"
          }
        }
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-markdown-8.0.4-b5ff1f0f29ead71a7a6f98815eb1a70bcc2a036e-integrity/node_modules/react-markdown/package.json",
    "readmeFilename": "readme.md",
    "readme": "<!--\nNotes for maintaining this document:\n\n*   Update the link for `cm-html` once in a while\n-->\n\n# react-markdown\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nReact component to render markdown.\n\n## Feature highlights\n\n*   [x] **[safe][security] by default**\n    (no `dangerouslySetInnerHTML` or XSS attacks)\n*   [x] **[components][]**\n    (pass your own component to use instead of `<h2>` for `## hi`)\n*   [x] **[plugins][]**\n    (many plugins you can pick and choose from)\n*   [x] **[compliant][syntax]**\n    (100% to CommonMark, 100% to GFM with a plugin)\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`props`](#props)\n    *   [`uriTransformer`](#uritransformer)\n*   [Examples](#examples)\n    *   [Use a plugin](#use-a-plugin)\n    *   [Use a plugin with options](#use-a-plugin-with-options)\n    *   [Use custom components (syntax highlight)](#use-custom-components-syntax-highlight)\n    *   [Use remark and rehype plugins (math)](#use-remark-and-rehype-plugins-math)\n*   [Plugins](#plugins)\n*   [Syntax](#syntax)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Architecture](#architecture)\n*   [Appendix A: HTML in markdown](#appendix-a-html-in-markdown)\n*   [Appendix B: Components](#appendix-b-components)\n*   [Security](#security)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis package is a [React][] component that can be given a string of markdown\nthat it’ll safely render to React elements.\nYou can pass plugins to change how markdown is transformed to React elements and\npass components that will be used instead of normal HTML elements.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   to try out `react-markdown`, see [our demo][demo]\n\n## When should I use this?\n\nThere are other ways to use markdown in React out there so why use this one?\nThe two main reasons are that they often rely on `dangerouslySetInnerHTML` or\nhave bugs with how they handle markdown.\n`react-markdown` uses a syntax tree to build the virtual dom which allows for\nupdating only the changing DOM instead of completely overwriting.\n`react-markdown` is 100% CommonMark compliant and has plugins to support other\nsyntax extensions (such as GFM).\n\nThese features are supported because we use [unified][], specifically [remark][]\nfor markdown and [rehype][] for HTML, which are popular tools to transform\ncontent with plugins.\n\nThis package focusses on making it easy for beginners to safely use markdown in\nReact.\nWhen you’re familiar with unified, you can use a modern hooks based alternative\n[`react-remark`][react-remark] or [`rehype-react`][rehype-react] manually.\nIf you instead want to use JavaScript and JSX *inside* markdown files, use\n[MDX][].\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install react-markdown\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport ReactMarkdown from 'https://esm.sh/react-markdown@7'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import ReactMarkdown from 'https://esm.sh/react-markdown@7?bundle'\n</script>\n```\n\n## Use\n\nA basic hello world:\n\n```jsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport ReactDom from 'react-dom'\n\nReactDom.render(<ReactMarkdown># Hello, *world*!</ReactMarkdown>, document.body)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<h1>\n  Hello, <em>world</em>!\n</h1>\n```\n\n</details>\n\nHere is an example that shows passing the markdown as a string and how\nto use a plugin ([`remark-gfm`][gfm], which adds support for strikethrough,\ntables, tasklists and URLs directly):\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `Just a link: https://reactjs.com.`\n\nReactDom.render(\n  <ReactMarkdown children={markdown} remarkPlugins={[remarkGfm]} />,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  Just a link: <a href=\"https://reactjs.com\">https://reactjs.com</a>.\n</p>\n```\n\n</details>\n\n## API\n\nThis package exports the following identifier:\n[`uriTransformer`][uri-transformer].\nThe default export is `ReactMarkdown`.\n\n### `props`\n\n*   `children` (`string`, default: `''`)\\\n    markdown to parse\n*   `components` (`Record<string, Component>`, default: `{}`)\\\n    object mapping tag names to React components\n*   `remarkPlugins` (`Array<Plugin>`, default: `[]`)\\\n    list of [remark plugins][remark-plugins] to use\n*   `rehypePlugins` (`Array<Plugin>`, default: `[]`)\\\n    list of [rehype plugins][rehype-plugins] to use\n*   `remarkRehypeOptions` (`Object?`, default: `undefined`)\\\n    options to pass through to [`remark-rehype`][remark-rehype]\n*   `className` (`string?`)\\\n    wrap the markdown in a `div` with this class name\n*   `skipHtml` (`boolean`, default: `false`)\\\n    ignore HTML in markdown completely\n*   `sourcePos` (`boolean`, default: `false`)\\\n    pass a prop to all components with a serialized position\n    (`data-sourcepos=\"3:1-3:13\"`)\n*   `rawSourcePos` (`boolean`, default: `false`)\\\n    pass a prop to all components with their [position][]\n    (`sourcePosition: {start: {line: 3, column: 1}, end:…}`)\n*   `includeElementIndex` (`boolean`, default: `false`)\\\n    pass the `index` (number of elements before it) and `siblingCount` (number\n    of elements in parent) as props to all components\n*   `allowedElements` (`Array<string>`, default: `undefined`)\\\n    tag names to allow (can’t combine w/ `disallowedElements`), all tag names\n    are allowed by default\n*   `disallowedElements` (`Array<string>`, default: `undefined`)\\\n    tag names to disallow (can’t combine w/ `allowedElements`), all tag names\n    are allowed by default\n*   `allowElement` (`(element, index, parent) => boolean?`, optional)\\\n    function called to check if an element is allowed (when truthy) or not,\n    `allowedElements` or `disallowedElements` is used first!\n*   `unwrapDisallowed` (`boolean`, default: `false`)\\\n    extract (unwrap) the children of not allowed elements, by default, when\n    `strong` is disallowed, it and it’s children are dropped, but with\n    `unwrapDisallowed` the element itself is replaced by its children\n*   `linkTarget` (`string` or `(href, children, title) => string`, optional)\\\n    target to use on links (such as `_blank` for `<a target=\"_blank\"…`)\n*   `transformLinkUri` (`(href, children, title) => string`, default:\n    [`uriTransformer`][uri-transformer], optional)\\\n    change URLs on links, pass `null` to allow all URLs, see [security][]\n*   `transformImageUri` (`(src, alt, title) => string`, default:\n    [`uriTransformer`][uri-transformer], optional)\\\n    change URLs on images, pass `null` to allow all URLs, see [security][]\n\n### `uriTransformer`\n\nOur default URL transform, which you can overwrite (see props above).\nIt’s given a URL and cleans it, by allowing only `http:`, `https:`, `mailto:`,\nand `tel:` URLs, absolute paths (`/example.png`), and hashes (`#some-place`).\n\nSee the [source code here][uri].\n\n## Examples\n\n### Use a plugin\n\nThis example shows how to use a remark plugin.\nIn this case, [`remark-gfm`][gfm], which adds support for strikethrough, tables,\ntasklists and URLs directly:\n\n```jsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport ReactDom from 'react-dom'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `A paragraph with *emphasis* and **strong importance**.\n\n> A block quote with ~strikethrough~ and a URL: https://reactjs.org.\n\n* Lists\n* [ ] todo\n* [x] done\n\nA table:\n\n| a | b |\n| - | - |\n`\n\nReactDom.render(\n  <ReactMarkdown children={markdown} remarkPlugins={[remarkGfm]} />,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<>\n  <p>\n    A paragraph with <em>emphasis</em> and <strong>strong importance</strong>.\n  </p>\n  <blockquote>\n    <p>\n      A block quote with <del>strikethrough</del> and a URL:{' '}\n      <a href=\"https://reactjs.org\">https://reactjs.org</a>.\n    </p>\n  </blockquote>\n  <ul>\n    <li>Lists</li>\n    <li>\n      <input checked={false} readOnly={true} type=\"checkbox\" /> todo\n    </li>\n    <li>\n      <input checked={true} readOnly={true} type=\"checkbox\" /> done\n    </li>\n  </ul>\n  <p>A table:</p>\n  <table>\n    <thead>\n      <tr>\n        <td>a</td>\n        <td>b</td>\n      </tr>\n    </thead>\n  </table>\n</>\n```\n\n</details>\n\n### Use a plugin with options\n\nThis example shows how to use a plugin and give it options.\nTo do that, use an array with the plugin at the first place, and the options\nsecond.\n[`remark-gfm`][gfm] has an option to allow only double tildes for strikethrough:\n\n```jsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport ReactDom from 'react-dom'\nimport remarkGfm from 'remark-gfm'\n\nReactDom.render(\n  <ReactMarkdown remarkPlugins={[[remarkGfm, {singleTilde: false}]]}>\n    This ~is not~ strikethrough, but ~~this is~~!\n  </ReactMarkdown>,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  This ~is not~ strikethrough, but <del>this is</del>!\n</p>\n```\n\n</details>\n\n### Use custom components (syntax highlight)\n\nThis example shows how you can overwrite the normal handling of an element by\npassing a component.\nIn this case, we apply syntax highlighting with the seriously super amazing\n[`react-syntax-highlighter`][react-syntax-highlighter] by\n[**@conorhastings**][conor]:\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// Did you know you can use tildes instead of backticks for code in markdown? ✨\nconst markdown = `Here is some JavaScript code:\n\n~~~js\nconsole.log('It works!')\n~~~\n`\n\nReactDom.render(\n  <ReactMarkdown\n    children={markdown}\n    components={{\n      code({node, inline, className, children, ...props}) {\n        const match = /language-(\\w+)/.exec(className || '')\n        return !inline && match ? (\n          <SyntaxHighlighter\n            children={String(children).replace(/\\n$/, '')}\n            style={dark}\n            language={match[1]}\n            PreTag=\"div\"\n            {...props}\n          />\n        ) : (\n          <code className={className} {...props}>\n            {children}\n          </code>\n        )\n      }\n    }}\n  />,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<>\n  <p>Here is some JavaScript code:</p>\n  <pre>\n    <SyntaxHighlighter language=\"js\" style={dark} PreTag=\"div\" children=\"console.log('It works!')\" />\n  </pre>\n</>\n```\n\n</details>\n\n### Use remark and rehype plugins (math)\n\nThis example shows how a syntax extension (through [`remark-math`][math])\nis used to support math in markdown, and a transform plugin\n([`rehype-katex`][katex]) to render that math.\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport remarkMath from 'remark-math'\nimport rehypeKatex from 'rehype-katex'\n\nimport 'katex/dist/katex.min.css' // `rehype-katex` does not import the CSS for you\n\nReactDom.render(\n  <ReactMarkdown\n    children={`The lift coefficient ($C_L$) is a dimensionless coefficient.`}\n    remarkPlugins={[remarkMath]}\n    rehypePlugins={[rehypeKatex]}\n  />,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  The lift coefficient (\n  <span className=\"math math-inline\">\n    <span className=\"katex\">\n      <span className=\"katex-mathml\">\n        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">{/* … */}</math>\n      </span>\n      <span className=\"katex-html\" aria-hidden=\"true\">\n        {/* … */}\n      </span>\n    </span>\n  </span>\n  ) is a dimensionless coefficient.\n</p>\n```\n\n</details>\n\n## Plugins\n\nWe use [unified][], specifically [remark][] for markdown and [rehype][] for\nHTML, which are tools to transform content with plugins.\nHere are three good ways to find plugins:\n\n*   [`awesome-remark`][awesome-remark] and [`awesome-rehype`][awesome-rehype]\n    — selection of the most awesome projects\n*   [List of remark plugins][remark-plugins] and\n    [list of rehype plugins][rehype-plugins]\n    — list of all plugins\n*   [`remark-plugin`][remark-plugin] and [`rehype-plugin`][rehype-plugin] topics\n    — any tagged repo on GitHub\n\n## Syntax\n\n`react-markdown` follows CommonMark, which standardizes the differences between\nmarkdown implementations, by default.\nSome syntax extensions are supported through plugins.\n\nWe use [`micromark`][micromark] under the hood for our parsing.\nSee its documentation for more information on markdown, CommonMark, and\nextensions.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports `Options` and `Components` types, which specify the interface of the\naccepted props and components.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\nThey work in all modern browsers (essentially: everything not IE 11).\nYou can use a bundler (such as esbuild, webpack, or Rollup) to use this package\nin your project, and use its options (or plugins) to add support for legacy\nbrowsers.\n\n## Architecture\n\n<pre><code>                                                           react-markdown\n         +----------------------------------------------------------------------------------------------------------------+\n         |                                                                                                                |\n         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |\n         |  |          |        |                |        |               |       |                |       |            | |\n<a href=\"https://commonmark.org\">markdown</a>-+->+  <a href=\"https://github.com/remarkjs/remark\">remark</a>  +-<a href=\"https://github.com/syntax-tree/mdast\">mdast</a>->+ <a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md\">remark plugins</a> +-<a href=\"https://github.com/syntax-tree/mdast\">mdast</a>->+ <a href=\"https://github.com/remarkjs/remark-rehype\">remark-rehype</a> +-<a href=\"https://github.com/syntax-tree/hast\">hast</a>->+ <a href=\"https://github.com/rehypejs/rehype/blob/main/doc/plugins.md\">rehype plugins</a> +-<a href=\"https://github.com/syntax-tree/hast\">hast</a>->+ <a href=\"#appendix-b-components\">components</a> +-+->react elements\n         |  |          |        |                |        |               |       |                |       |            | |\n         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |\n         |                                                                                                                |\n         +----------------------------------------------------------------------------------------------------------------+\n</code></pre>\n\nTo understand what this project does, it’s important to first understand what\nunified does: please read through the [`unifiedjs/unified`][unified] readme (the\npart until you hit the API section is required reading).\n\n`react-markdown` is a unified pipeline — wrapped so that most folks don’t need\nto directly interact with unified.\nThe processor goes through these steps:\n\n*   parse markdown to mdast (markdown syntax tree)\n*   transform through remark (markdown ecosystem)\n*   transform mdast to hast (HTML syntax tree)\n*   transform through rehype (HTML ecosystem)\n*   render hast to React with components\n\n## Appendix A: HTML in markdown\n\n`react-markdown` typically escapes HTML (or ignores it, with `skipHtml`)\nbecause it is dangerous and defeats the purpose of this library.\n\nHowever, if you are in a trusted environment (you trust the markdown), and\ncan spare the bundle size (±60kb minzipped), then you can use\n[`rehype-raw`][raw]:\n\n```jsx\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport rehypeRaw from 'rehype-raw'\n\nconst input = `<div class=\"note\">\n\nSome *emphasis* and <strong>strong</strong>!\n\n</div>`\n\nReactDom.render(\n  <ReactMarkdown rehypePlugins={[rehypeRaw]} children={input} />,\n  document.body\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<div class=\"note\">\n  <p>Some <em>emphasis</em> and <strong>strong</strong>!</p>\n</div>\n```\n\n</details>\n\n**Note**: HTML in markdown is still bound by how [HTML works in\nCommonMark][cm-html].\nMake sure to use blank lines around block-level HTML that again contains\nmarkdown!\n\n## Appendix B: Components\n\nYou can also change the things that come from markdown:\n\n```jsx\n<ReactMarkdown\n  components={{\n    // Map `h1` (`# heading`) to use `h2`s.\n    h1: 'h2',\n    // Rewrite `em`s (`*like so*`) to `i` with a red foreground color.\n    em: ({node, ...props}) => <i style={{color: 'red'}} {...props} />\n  }}\n/>\n```\n\nThe keys in components are HTML equivalents for the things you write with\nmarkdown (such as `h1` for `# heading`).\nNormally, in markdown, those are: `a`, `blockquote`, `br`, `code`, `em`, `h1`,\n`h2`, `h3`, `h4`, `h5`, `h6`, `hr`, `img`, `li`, `ol`, `p`, `pre`, `strong`, and\n`ul`.\nWith [`remark-gfm`][gfm], you can also use: `del`, `input`, `table`, `tbody`,\n`td`, `th`, `thead`, and `tr`.\nOther remark or rehype plugins that add support for new constructs will also\nwork with `react-markdown`.\n\nThe props that are passed are what you probably would expect: an `a` (link) will\nget `href` (and `title`) props, and `img` (image) an `src`, `alt` and `title`,\netc.\nThere are some extra props passed.\n\n*   `code`\n    *   `inline` (`boolean?`)\n        — set to `true` for inline code\n    *   `className` (`string?`)\n        — set to `language-js` or so when using ` ```js `\n*   `h1`, `h2`, `h3`, `h4`, `h5`, `h6`\n    *   `level` (`number` between 1 and 6)\n        — heading rank\n*   `input` (when using [`remark-gfm`][gfm])\n    *   `checked` (`boolean`)\n        — whether the item is checked\n    *   `disabled` (`true`)\n    *   `type` (`'checkbox'`)\n*   `li`\n    *   `index` (`number`)\n        — number of preceding items (so first gets `0`, etc.)\n    *   `ordered` (`boolean`)\n        — whether the parent is an `ol` or not\n    *   `checked` (`boolean?`)\n        — `null` normally, `boolean` when using [`remark-gfm`][gfm]’s tasklists\n    *   `className` (`string?`)\n        — set to `task-list-item` when using [`remark-gfm`][gfm] and the\n        item1 is a tasklist\n*   `ol`, `ul`\n    *   `depth` (`number`)\n        — number of ancestral lists (so first gets `0`, etc.)\n    *   `ordered` (`boolean`)\n        — whether it’s an `ol` or not\n    *   `className` (`string?`)\n        — set to `contains-task-list` when using [`remark-gfm`][gfm] and the\n        list contains one or more tasklists\n*   `td`, `th` (when using [`remark-gfm`][gfm])\n    *   `style` (`Object?`)\n        — something like `{textAlign: 'left'}` depending on how the cell is\n        aligned\n    *   `isHeader` (`boolean`)\n        — whether it’s a `th` or not\n*   `tr` (when using [`remark-gfm`][gfm])\n    *   `isHeader` (`boolean`)\n        — whether it’s in the `thead` or not\n\nEvery component will receive a `node` (`Object`).\nThis is the original [hast](https://github.com/syntax-tree/hast) element being\nturned into a React element.\n\nEvery element will receive a `key` (`string`).\nSee [React’s docs](https://reactjs.org/docs/lists-and-keys.html#keys) for more\ninfo.\n\nOptionally, components will also receive:\n\n*   `data-sourcepos` (`string`)\n    — see `sourcePos` option\n*   `sourcePosition` (`Object`)\n    — see `rawSourcePos` option\n*   `index` and `siblingCount` (`number`)\n    — see `includeElementIndex` option\n*   `target` on `a` (`string`)\n    — see `linkTarget` option\n\n## Security\n\nUse of `react-markdown` is secure by default.\nOverwriting `transformLinkUri` or `transformImageUri` to something insecure will\nopen you up to XSS vectors.\nFurthermore, the `remarkPlugins`, `rehypePlugins`, and `components` you use may\nbe insecure.\n\nTo make sure the content is completely safe, even after what plugins do,\nuse [`rehype-sanitize`][sanitize].\nIt lets you define your own schema of what is and isn’t allowed.\n\n## Related\n\n*   [`MDX`](https://github.com/mdx-js/mdx)\n    — JSX *in* markdown\n*   [`remark-gfm`](https://github.com/remarkjs/remark-gfm)\n    — add support for GitHub flavored markdown support\n*   [`react-remark`][react-remark]\n    — modern hook based alternative\n*   [`rehype-react`][rehype-react]\n    — turn HTML into React elements\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Espen Hovlandsdal][author]\n\n[build-badge]: https://github.com/remarkjs/react-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/react-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/react-markdown.svg\n\n[coverage]: https://codecov.io/github/remarkjs/react-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/react-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/react-markdown\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/react-markdown.svg\n\n[size]: https://bundlephobia.com/result?p=react-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esmsh]: https://esm.sh\n\n[health]: https://github.com/remarkjs/.github\n\n[contributing]: https://github.com/remarkjs/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/remarkjs/.github/blob/HEAD/code-of-conduct.md\n\n[license]: license\n\n[author]: https://espen.codes/\n\n[micromark]: https://github.com/micromark/micromark\n\n[remark]: https://github.com/remarkjs/remark\n\n[demo]: https://remarkjs.github.io/react-markdown/\n\n[position]: https://github.com/syntax-tree/unist#position\n\n[gfm]: https://github.com/remarkjs/remark-gfm\n\n[math]: https://github.com/remarkjs/remark-math\n\n[katex]: https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex\n\n[raw]: https://github.com/rehypejs/rehype-raw\n\n[sanitize]: https://github.com/rehypejs/rehype-sanitize\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[remark-rehype]: https://github.com/remarkjs/remark-rehype\n\n[awesome-remark]: https://github.com/remarkjs/awesome-remark\n\n[awesome-rehype]: https://github.com/rehypejs/awesome-rehype\n\n[remark-plugin]: https://github.com/topics/remark-plugin\n\n[rehype-plugin]: https://github.com/topics/rehype-plugin\n\n[cm-html]: https://spec.commonmark.org/0.30/#html-blocks\n\n[uri]: https://github.com/remarkjs/react-markdown/blob/main/lib/uri-transformer.js\n\n[uri-transformer]: #uritransformer\n\n[react]: http://reactjs.org\n\n[cheat]: https://commonmark.org/help/\n\n[unified]: https://github.com/unifiedjs/unified\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[react-remark]: https://github.com/remarkjs/react-remark\n\n[rehype-react]: https://github.com/rehypejs/rehype-react\n\n[mdx]: https://github.com/mdx-js/mdx/\n\n[typescript]: https://www.typescriptlang.org\n\n[security]: #security\n\n[components]: #appendix-b-components\n\n[plugins]: #plugins\n\n[syntax]: #syntax\n\n[react-syntax-highlighter]: https://github.com/react-syntax-highlighter/react-syntax-highlighter\n\n[conor]: https://github.com/conorhastings\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Espen Hovlandsdal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-markdown/-/react-markdown-8.0.4.tgz#b5ff1f0f29ead71a7a6f98815eb1a70bcc2a036e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-markdown/-/react-markdown-8.0.4.tgz",
    "hash": "b5ff1f0f29ead71a7a6f98815eb1a70bcc2a036e",
    "integrity": "sha512-2oxHa6oDxc1apg/Gnc1Goh06t3B617xeywqI/92wmDV9FELI6ayRkwge7w7DoEqM0gRpZGTNU6xQG+YpJISnVg==",
    "registry": "npm",
    "packageName": "react-markdown",
    "cacheIntegrity": "sha512-2oxHa6oDxc1apg/Gnc1Goh06t3B617xeywqI/92wmDV9FELI6ayRkwge7w7DoEqM0gRpZGTNU6xQG+YpJISnVg== sha1-tf8fDynq1xp6b5iBXrGnC8wqA24="
  },
  "registry": "npm",
  "hash": "b5ff1f0f29ead71a7a6f98815eb1a70bcc2a036e"
}