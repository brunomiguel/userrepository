{
  "manifest": {
    "name": "electron-window-state",
    "version": "5.0.3",
    "description": "Simple module that helps to save and restore size and position of Electron windows.",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/mawie81/electron-window-state.git"
    },
    "main": "index.js",
    "author": {
      "name": "Marcel Wiehle"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "keywords": [
      "electron"
    ],
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "dependencies": {
      "jsonfile": "^4.0.0",
      "mkdirp": "^0.5.1"
    },
    "devDependencies": {
      "ava": "^0.25.0",
      "mockery": "^2.1.0",
      "sinon": "^6.1.5",
      "xo": "^0.22.0"
    },
    "xo": {
      "space": true,
      "ignores": [
        "index.d.ts"
      ],
      "rules": {
        "brace-style": [
          2,
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "prefer-object-spread": 0
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-window-state-5.0.3-4f36d09e3f953d87aff103bf010f460056050aa8-integrity/node_modules/electron-window-state/package.json",
    "readmeFilename": "readme.md",
    "readme": "# electron-window-state [![Build Status](https://travis-ci.org/mawie81/electron-window-state.svg)](https://travis-ci.org/mawie81/electron-window-state)\n\n> A library to store and restore window sizes and positions for your\n[Electron](http://electron.atom.io) app\n\n*Heavily influenced by the implementation in [electron-boilerplate](https://github.com/szwacz/electron-boilerplate).*\n\n## Install\n\n```\n$ npm install --save electron-window-state\n```\n\n## Usage\n\n```js\nconst windowStateKeeper = require('electron-window-state');\nlet win;\n\napp.on('ready', function () {\n  // Load the previous state with fallback to defaults\n  let mainWindowState = windowStateKeeper({\n    defaultWidth: 1000,\n    defaultHeight: 800\n  });\n\n  // Create the window using the state information\n  win = new BrowserWindow({\n    'x': mainWindowState.x,\n    'y': mainWindowState.y,\n    'width': mainWindowState.width,\n    'height': mainWindowState.height\n  });\n\n  // Let us register listeners on the window, so we can update the state\n  // automatically (the listeners will be removed when the window is closed)\n  // and restore the maximized or full screen state\n  mainWindowState.manage(win);\n});\n```\n\nPlease do not set `useContentSize` to `true` at creating `BrowserWindow` instance\nbecause it changes how to calculate window size.\n\n## API\n\n#### windowStateKeeper(opts)\n\nNote: Don't call this function before the `ready` event is fired.\n\n##### opts\n\n`defaultWidth` - *Number*\n\n  The width that should be returned if no file exists yet. Defaults to `800`.\n\n`defaultHeight` - *Number*\n\n  The height that should be returned if no file exists yet. Defaults to `600`.\n\n`path` - *String*\n\n  The path where the state file should be written to. Defaults to\n  `app.getPath('userData')`\n\n`file` - *String*\n\n  The name of file. Defaults to `window-state.json`\n\n`maximize` - *Boolean*\n\n  Should we automatically maximize the window, if it was last closed\n  maximized. Defaults to `true`\n\n`fullScreen` - *Boolean*\n\n  Should we automatically restore the window to full screen, if it was last\n  closed full screen. Defaults to `true`\n\n### state object\n\n```js\nconst windowState = windowStateKeeper({\n  defaultWidth: 1000,\n  defaultHeight: 800\n});\n```\n\n`x` - *Number*\n\n  The saved `x` coordinate of the loaded state. `undefined` if the state has not\n  been saved yet.\n\n`y` - *Number*\n\n  The saved `y` coordinate of the loaded state. `undefined` if the state has not\n  been saved yet.\n\n`width` - *Number*\n\n  The saved `width` of loaded state. `defaultWidth` if the state has not been\n  saved yet.\n\n`height` - *Number*\n\n  The saved `heigth` of loaded state. `defaultHeight` if the state has not been\n  saved yet.\n\n`isMaximized` - *Boolean*\n\n  `true` if the window state was saved while the window was maximized.\n  `undefined` if the state has not been saved yet.\n\n`isFullScreen` - *Boolean*\n\n  `true` if the window state was saved while the window was in full screen\n  mode. `undefined` if the state has not been saved yet.\n\n`manage(window)` - *Function*\n\n  Register listeners on the given `BrowserWindow` for events that are\n  related to size or position changes (`resize`, `move`). It will also restore\n  the window's maximized or full screen state.\n  When the window is closed we automatically remove the listeners and save the\n  state.\n\n`unmanage` - *Function*\n\n  Removes all listeners of the managed `BrowserWindow` in case it does not\n  need to be managed anymore.\n\n`saveState(window)` - *Function*\n\n  Saves the current state of the given `BrowserWindow`. This exists mostly for\n  legacy purposes, and in most cases it's better to just use `manage`.\n\n## License\n\nMIT Â© [Marcel Wiehle](http://marcel.wiehle.me)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Jakub Szwacz\nCopyright (c) Marcel Wiehle <marcel@wiehle.me> (http://marcel.wiehle.me)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-window-state/-/electron-window-state-5.0.3.tgz#4f36d09e3f953d87aff103bf010f460056050aa8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-window-state/-/electron-window-state-5.0.3.tgz",
    "hash": "4f36d09e3f953d87aff103bf010f460056050aa8",
    "integrity": "sha512-1mNTwCfkolXl3kMf50yW3vE2lZj0y92P/HYWFBrb+v2S/pCka5mdwN3cagKm458A7NjndSwijynXgcLWRodsVg==",
    "registry": "npm",
    "packageName": "electron-window-state",
    "cacheIntegrity": "sha512-1mNTwCfkolXl3kMf50yW3vE2lZj0y92P/HYWFBrb+v2S/pCka5mdwN3cagKm458A7NjndSwijynXgcLWRodsVg== sha1-TzbQnj+VPYev8QO/AQ9GAFYFCqg="
  },
  "registry": "npm",
  "hash": "4f36d09e3f953d87aff103bf010f460056050aa8"
}