{
  "manifest": {
    "name": "terser-webpack-plugin",
    "version": "5.3.6",
    "description": "Terser plugin for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/terser-webpack-plugin.git"
    },
    "author": {
      "name": "webpack Contrib Team"
    },
    "homepage": "https://github.com/webpack-contrib/terser-webpack-plugin",
    "bugs": {
      "url": "https://github.com/webpack-contrib/terser-webpack-plugin/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/index.js",
    "types": "types/index.d.ts",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "clean": "del-cli dist types",
      "prebuild": "npm run clean",
      "build:types": "tsc --declaration --emitDeclarationOnly --outDir types && prettier \"types/**/*.ts\" --write",
      "build:code": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "build": "npm-run-all -p \"build:**\"",
      "commitlint": "commitlint --from=master",
      "security": "npm audit --production",
      "lint:prettier": "prettier --list-different .",
      "lint:js": "eslint --cache .",
      "lint:types": "tsc --pretty --noEmit",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "husky install && npm run build",
      "release": "standard-version"
    },
    "files": [
      "dist",
      "types"
    ],
    "peerDependencies": {
      "webpack": "^5.1.0"
    },
    "peerDependenciesMeta": {
      "@swc/core": {
        "optional": true
      },
      "uglify-js": {
        "optional": true
      },
      "esbuild": {
        "optional": true
      }
    },
    "dependencies": {
      "@jridgewell/trace-mapping": "^0.3.14",
      "jest-worker": "^27.4.5",
      "schema-utils": "^3.1.1",
      "serialize-javascript": "^6.0.0",
      "terser": "^5.14.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.18.6",
      "@babel/core": "^7.18.6",
      "@babel/preset-env": "^7.18.6",
      "@commitlint/cli": "^17.0.3",
      "@commitlint/config-conventional": "^17.0.3",
      "@swc/core": "^1.2.220",
      "@types/serialize-javascript": "^5.0.2",
      "@types/uglify-js": "^3.16.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^28.1.2",
      "copy-webpack-plugin": "^9.0.1",
      "cross-env": "^7.0.3",
      "del": "^6.0.0",
      "del-cli": "^3.0.1",
      "esbuild": "^0.14.51",
      "eslint": "^7.32.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-import": "^2.25.4",
      "file-loader": "^6.2.0",
      "husky": "^7.0.2",
      "jest": "^27.5.1",
      "lint-staged": "^13.0.3",
      "memfs": "^3.4.7",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.7.1",
      "standard-version": "^9.3.1",
      "typescript": "^4.7.4",
      "uglify-js": "^3.16.1",
      "webpack": "^5.73.0",
      "webpack-cli": "^4.10.0",
      "worker-loader": "^3.0.8"
    },
    "keywords": [
      "uglify",
      "uglify-js",
      "uglify-es",
      "terser",
      "webpack",
      "webpack-plugin",
      "minification",
      "compress",
      "compressor",
      "min",
      "minification",
      "minifier",
      "minify",
      "optimize",
      "optimizer"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-terser-webpack-plugin-5.3.6-5590aec31aa3c6f771ce1b1acca60639eab3195c-integrity/node_modules/terser-webpack-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# terser-webpack-plugin\n\nThis plugin uses [terser](https://github.com/terser/terser) to minify/minimize your JavaScript.\n\n## Getting Started\n\nWebpack v5 comes with the latest `terser-webpack-plugin` out of the box. If you are using Webpack v5 or above and wish to customize the options, you will still need to install `terser-webpack-plugin`. Using Webpack v4, you have to install `terser-webpack-plugin` v4.\n\nTo begin, you'll need to install `terser-webpack-plugin`:\n\n```console\nnpm install terser-webpack-plugin --save-dev\n```\n\nor\n\n```console\nyarn add -D terser-webpack-plugin\n```\n\nor\n\n```console\npnpm add -D terser-webpack-plugin\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst TerserPlugin = require(\"terser-webpack-plugin\");\n\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [new TerserPlugin()],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Note about source maps\n\n**Works only with `source-map`, `inline-source-map`, `hidden-source-map` and `nosources-source-map` values for the [`devtool`](https://webpack.js.org/configuration/devtool/) option.**\n\nWhy?\n\n- `eval` wraps modules in `eval(\"string\")` and the minimizer does not handle strings.\n- `cheap` has not column information and minimizer generate only a single line, which leave only a single mapping.\n\nUsing supported `devtool` values enable source map generation.\n\n## Options\n\n- **[`test`](#test)**\n- **[`include`](#include)**\n- **[`exclude`](#exclude)**\n- **[`parallel`](#parallel)**\n- **[`minify`](#minify)**\n- **[`terserOptions`](#terseroptions)**\n- **[`extractComments`](#extractcomments)**\n\n### `test`\n\nType:\n\n```ts\ntype test = string | RegExp | Array<string | RegExp>;\n```\n\nDefault: `/\\.m?js(\\?.*)?$/i`\n\nTest to match files against.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        test: /\\.js(\\?.*)?$/i,\n      }),\n    ],\n  },\n};\n```\n\n### `include`\n\nType:\n\n```ts\ntype include = string | RegExp | Array<string | RegExp>;\n```\n\nDefault: `undefined`\n\nFiles to include.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        include: /\\/includes/,\n      }),\n    ],\n  },\n};\n```\n\n### `exclude`\n\nType:\n\n```ts\ntype exclude = string | RegExp | Array<string | RegExp>;\n```\n\nDefault: `undefined`\n\nFiles to exclude.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        exclude: /\\/excludes/,\n      }),\n    ],\n  },\n};\n```\n\n### `parallel`\n\nType:\n\n```ts\ntype parallel = boolean | number;\n```\n\nDefault: `true`\n\nUse multi-process parallel running to improve the build speed.\nDefault number of concurrent runs: `os.cpus().length - 1`.\n\n> **Note**\n>\n> Parallelization can speedup your build significantly and is therefore **highly recommended**.\n\n> **Warning**\n>\n> If you use **Circle CI** or any other environment that doesn't provide real available count of CPUs then you need to setup explicitly number of CPUs to avoid `Error: Call retries were exceeded` (see [#143](https://github.com/webpack-contrib/terser-webpack-plugin/issues/143), [#202](https://github.com/webpack-contrib/terser-webpack-plugin/issues/202)).\n\n#### `boolean`\n\nEnable/disable multi-process parallel running.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        parallel: true,\n      }),\n    ],\n  },\n};\n```\n\n#### `number`\n\nEnable multi-process parallel running and set number of concurrent runs.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        parallel: 4,\n      }),\n    ],\n  },\n};\n```\n\n### `minify`\n\nType:\n\n```ts\ntype minify = (\n  input: {\n    [file: string]: string;\n  },\n  sourceMap: import(\"@jridgewell/trace-mapping\").SourceMapInput | undefined,\n  minifyOptions: {\n    module?: boolean | undefined;\n    ecma?: import(\"terser\").ECMA | undefined;\n  },\n  extractComments:\n    | boolean\n    | \"all\"\n    | \"some\"\n    | RegExp\n    | ((\n        astNode: any,\n        comment: {\n          value: string;\n          type: \"comment1\" | \"comment2\" | \"comment3\" | \"comment4\";\n          pos: number;\n          line: number;\n          col: number;\n        }\n      ) => boolean)\n    | {\n        condition?:\n          | boolean\n          | \"all\"\n          | \"some\"\n          | RegExp\n          | ((\n              astNode: any,\n              comment: {\n                value: string;\n                type: \"comment1\" | \"comment2\" | \"comment3\" | \"comment4\";\n                pos: number;\n                line: number;\n                col: number;\n              }\n            ) => boolean)\n          | undefined;\n        filename?: string | ((fileData: any) => string) | undefined;\n        banner?:\n          | string\n          | boolean\n          | ((commentsFile: string) => string)\n          | undefined;\n      }\n    | undefined\n) => Promise<{\n  code: string;\n  map?: import(\"@jridgewell/trace-mapping\").SourceMapInput | undefined;\n  errors?: (string | Error)[] | undefined;\n  warnings?: (string | Error)[] | undefined;\n  extractedComments?: string[] | undefined;\n}>;\n```\n\nDefault: `TerserPlugin.terserMinify`\n\nAllows you to override default minify function.\nBy default plugin uses [terser](https://github.com/terser/terser) package.\nUseful for using and testing unpublished versions or forks.\n\n> **Warning**\n>\n> **Always use `require` inside `minify` function when `parallel` option enabled**.\n\n**webpack.config.js**\n\n```js\n// Can be async\nconst minify = (input, sourceMap, minimizerOptions, extractsComments) => {\n  // The `minimizerOptions` option contains option from the `terserOptions` option\n  // You can use `minimizerOptions.myCustomOption`\n\n  // Custom logic for extract comments\n  const { map, code } = require(\"uglify-module\") // Or require('./path/to/uglify-module')\n    .minify(input, {\n      /* Your options for minification */\n    });\n\n  return { map, code, warnings: [], errors: [], extractedComments: [] };\n};\n\n// Used to regenerate `fullhash`/`chunkhash` between different implementation\n// Example: you fix a bug in custom minimizer/custom function, but unfortunately webpack doesn't know about it, so you will get the same fullhash/chunkhash\n// to avoid this you can provide version of your custom minimizer\n// You don't need if you use only `contenthash`\nminify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-module/package.json\");\n  } catch (error) {\n    // Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          myCustomOption: true,\n        },\n        minify,\n      }),\n    ],\n  },\n};\n```\n\n### `terserOptions`\n\nType:\n\n```ts\ntype terserOptions = {\n  compress?: boolean | CompressOptions;\n  ecma?: ECMA;\n  enclose?: boolean | string;\n  ie8?: boolean;\n  keep_classnames?: boolean | RegExp;\n  keep_fnames?: boolean | RegExp;\n  mangle?: boolean | MangleOptions;\n  module?: boolean;\n  nameCache?: object;\n  format?: FormatOptions;\n  /** @deprecated */\n  output?: FormatOptions;\n  parse?: ParseOptions;\n  safari10?: boolean;\n  sourceMap?: boolean | SourceMapOptions;\n  toplevel?: boolean;\n};\n```\n\nDefault: [default](https://github.com/terser/terser#minify-options)\n\nTerser [options](https://github.com/terser/terser#minify-options).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          ecma: undefined,\n          parse: {},\n          compress: {},\n          mangle: true, // Note `mangle.properties` is `false` by default.\n          module: false,\n          // Deprecated\n          output: null,\n          format: null,\n          toplevel: false,\n          nameCache: null,\n          ie8: false,\n          keep_classnames: undefined,\n          keep_fnames: false,\n          safari10: false,\n        },\n      }),\n    ],\n  },\n};\n```\n\n### `extractComments`\n\nType:\n\n```ts\ntype extractComments =\n  | boolean\n  | string\n  | RegExp\n  | ((\n      astNode: any,\n      comment: {\n        value: string;\n        type: \"comment1\" | \"comment2\" | \"comment3\" | \"comment4\";\n        pos: number;\n        line: number;\n        col: number;\n      }\n    ) => boolean)\n  | {\n      condition?:\n        | boolean\n        | \"all\"\n        | \"some\"\n        | RegExp\n        | ((\n            astNode: any,\n            comment: {\n              value: string;\n              type: \"comment1\" | \"comment2\" | \"comment3\" | \"comment4\";\n              pos: number;\n              line: number;\n              col: number;\n            }\n          ) => boolean)\n        | undefined;\n      filename?: string | ((fileData: any) => string) | undefined;\n      banner?:\n        | string\n        | boolean\n        | ((commentsFile: string) => string)\n        | undefined;\n    };\n```\n\nDefault: `true`\n\nWhether comments shall be extracted to a separate file, (see [details](https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a)).\nBy default extract only comments using `/^\\**!|@preserve|@license|@cc_on/i` regexp condition and remove remaining comments.\nIf the original file is named `foo.js`, then the comments will be stored to `foo.js.LICENSE.txt`.\nThe `terserOptions.format.comments` option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted.\n\n#### `boolean`\n\nEnable/disable extracting comments.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: true,\n      }),\n    ],\n  },\n};\n```\n\n#### `string`\n\nExtract `all` or `some` (use `/^\\**!|@preserve|@license|@cc_on/i` RegExp) comments.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: \"all\",\n      }),\n    ],\n  },\n};\n```\n\n#### `RegExp`\n\nAll comments that match the given expression will be extracted to the separate file.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: /@extract/i,\n      }),\n    ],\n  },\n};\n```\n\n#### `function`\n\nAll comments that match the given expression will be extracted to the separate file.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: (astNode, comment) => {\n          if (/@extract/i.test(comment.value)) {\n            return true;\n          }\n\n          return false;\n        },\n      }),\n    ],\n  },\n};\n```\n\n#### `object`\n\nAllow to customize condition for extract comments, specify extracted file name and banner.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: {\n          condition: /^\\**!|@preserve|@license|@cc_on/i,\n          filename: (fileData) => {\n            // The \"fileData\" argument contains object with \"filename\", \"basename\", \"query\" and \"hash\"\n            return `${fileData.filename}.LICENSE.txt${fileData.query}`;\n          },\n          banner: (licenseFile) => {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n##### `condition`\n\nType:\n\n```ts\ntype condition =\n  | boolean\n  | \"all\"\n  | \"some\"\n  | RegExp\n  | ((\n      astNode: any,\n      comment: {\n        value: string;\n        type: \"comment1\" | \"comment2\" | \"comment3\" | \"comment4\";\n        pos: number;\n        line: number;\n        col: number;\n      }\n    ) => boolean)\n  | undefined;\n```\n\nCondition what comments you need extract.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: {\n          condition: \"some\",\n          filename: (fileData) => {\n            // The \"fileData\" argument contains object with \"filename\", \"basename\", \"query\" and \"hash\"\n            return `${fileData.filename}.LICENSE.txt${fileData.query}`;\n          },\n          banner: (licenseFile) => {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n##### `filename`\n\nType:\n\n```ts\ntype filename = string | ((fileData: any) => string) | undefined;\n```\n\nDefault: `[file].LICENSE.txt[query]`\n\nAvailable placeholders: `[file]`, `[query]` and `[filebase]` (`[base]` for webpack 5).\n\nThe file where the extracted comments will be stored.\nDefault is to append the suffix `.LICENSE.txt` to the original filename.\n\n> **Warning**\n>\n> We highly recommend using the `txt` extension. Using `js`/`cjs`/`mjs` extensions may conflict with existing assets which leads to broken code.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: {\n          condition: /^\\**!|@preserve|@license|@cc_on/i,\n          filename: \"extracted-comments.js\",\n          banner: (licenseFile) => {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n##### `banner`\n\nType:\n\n```ts\ntype banner = string | boolean | ((commentsFile: string) => string) | undefined;\n```\n\nDefault: `/*! For license information please see ${commentsFile} */`\n\nThe banner text that points to the extracted file and will be added on top of the original file.\nCan be `false` (no banner), a `String`, or a `Function<(string) -> String>` that will be called with the filename where extracted comments have been stored.\nWill be wrapped into comment.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: {\n          condition: true,\n          filename: (fileData) => {\n            // The \"fileData\" argument contains object with \"filename\", \"basename\", \"query\" and \"hash\"\n            return `${fileData.filename}.LICENSE.txt${fileData.query}`;\n          },\n          banner: (commentsFile) => {\n            return `My custom banner about license information ${commentsFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n```\n\n## Examples\n\n### Preserve Comments\n\nExtract all legal comments (i.e. `/^\\**!|@preserve|@license|@cc_on/i`) and preserve `/@license/i` comments.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          format: {\n            comments: /@license/i,\n          },\n        },\n        extractComments: true,\n      }),\n    ],\n  },\n};\n```\n\n### Remove Comments\n\nIf you avoid building with comments, use this config:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          format: {\n            comments: false,\n          },\n        },\n        extractComments: false,\n      }),\n    ],\n  },\n};\n```\n\n### [`uglify-js`](https://github.com/mishoo/UglifyJS)\n\n[`UglifyJS`](https://github.com/mishoo/UglifyJS) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        minify: TerserPlugin.uglifyJsMinify,\n        // `terserOptions` options will be passed to `uglify-js`\n        // Link to options - https://github.com/mishoo/UglifyJS#minify-options\n        terserOptions: {},\n      }),\n    ],\n  },\n};\n```\n\n### [`swc`](https://github.com/swc-project/swc)\n\n[`swc`](https://github.com/swc-project/swc) is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.\n\n> **Warning**\n>\n> the `extractComments` option is not supported and all comments will be removed by default, it will be fixed in future\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        minify: TerserPlugin.swcMinify,\n        // `terserOptions` options will be passed to `swc` (`@swc/core`)\n        // Link to options - https://swc.rs/docs/config-js-minify\n        terserOptions: {},\n      }),\n    ],\n  },\n};\n```\n\n### [`esbuild`](https://github.com/evanw/esbuild)\n\n[`esbuild`](https://github.com/evanw/esbuild) is an extremely fast JavaScript bundler and minifier.\n\n> **Warning**\n>\n> the `extractComments` option is not supported and all legal comments (i.e. copyright, licenses and etc) will be preserved\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        minify: TerserPlugin.esbuildMinify,\n        // `terserOptions` options will be passed to `esbuild`\n        // Link to options - https://esbuild.github.io/api/#minify\n        // Note: the `minify` options is true by default (and override other `minify*` options), so if you want to disable the `minifyIdentifiers` option (or other `minify*` options) please use:\n        // terserOptions: {\n        //   minify: false,\n        //   minifyWhitespace: true,\n        //   minifyIdentifiers: false,\n        //   minifySyntax: true,\n        // },\n        terserOptions: {},\n      }),\n    ],\n  },\n};\n```\n\n### Custom Minify Function\n\nOverride default minify function - use `uglify-js` for minification.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        minify: (file, sourceMap) => {\n          // https://github.com/mishoo/UglifyJS2#minify-options\n          const uglifyJsOptions = {\n            /* your `uglify-js` package options */\n          };\n\n          if (sourceMap) {\n            uglifyJsOptions.sourceMap = {\n              content: sourceMap,\n            };\n          }\n\n          return require(\"uglify-js\").minify(file, uglifyJsOptions);\n        },\n      }),\n    ],\n  },\n};\n```\n\n### Typescript\n\nWith default terser minify function:\n\n```ts\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: true,\n        },\n      }),\n    ],\n  },\n};\n```\n\nWith built-in minify functions:\n\n```ts\nimport type { JsMinifyOptions as SwcOptions } from \"@swc/core\";\nimport type { MinifyOptions as UglifyJSOptions } from \"uglify-js\";\nimport type { TransformOptions as EsbuildOptions } from \"esbuild\";\nimport type { MinifyOptions as TerserOptions } from \"terser\";\n\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin<SwcOptions>({\n        minify: TerserPlugin.swcMinify,\n        terserOptions: {\n          // `swc` options\n        },\n      }),\n      new TerserPlugin<UglifyJSOptions>({\n        minify: TerserPlugin.uglifyJsMinify,\n        terserOptions: {\n          // `uglif-js` options\n        },\n      }),\n      new TerserPlugin<EsbuildOptions>({\n        minify: TerserPlugin.esbuildMinify,\n        terserOptions: {\n          // `esbuild` options\n        },\n      }),\n\n      // Alternative usage:\n      new TerserPlugin<TerserOptions>({\n        minify: TerserPlugin.terserMinify,\n        terserOptions: {\n          // `terser` options\n        },\n      }),\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/terser-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/terser-webpack-plugin\n[node]: https://img.shields.io/node/v/terser-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[tests]: https://github.com/webpack-contrib/terser-webpack-plugin/workflows/terser-webpack-plugin/badge.svg\n[tests-url]: https://github.com/webpack-contrib/terser-webpack-plugin/actions\n[cover]: https://codecov.io/gh/webpack-contrib/terser-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/terser-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=terser-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=terser-webpack-plugin\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/terser-webpack-plugin/-/terser-webpack-plugin-5.3.6.tgz#5590aec31aa3c6f771ce1b1acca60639eab3195c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/terser-webpack-plugin/-/terser-webpack-plugin-5.3.6.tgz",
    "hash": "5590aec31aa3c6f771ce1b1acca60639eab3195c",
    "integrity": "sha512-kfLFk+PoLUQIbLmB1+PZDMRSZS99Mp+/MHqDNmMA6tOItzRt+Npe3E+fsMs5mfcM0wCtrrdU387UnV+vnSffXQ==",
    "registry": "npm",
    "packageName": "terser-webpack-plugin",
    "cacheIntegrity": "sha512-kfLFk+PoLUQIbLmB1+PZDMRSZS99Mp+/MHqDNmMA6tOItzRt+Npe3E+fsMs5mfcM0wCtrrdU387UnV+vnSffXQ== sha1-VZCuwxqjxvdxzhsazKYGOeqzGVw="
  },
  "registry": "npm",
  "hash": "5590aec31aa3c6f771ce1b1acca60639eab3195c"
}