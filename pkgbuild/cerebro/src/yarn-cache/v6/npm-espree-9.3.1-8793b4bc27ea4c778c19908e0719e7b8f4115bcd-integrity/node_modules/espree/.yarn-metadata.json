{
  "manifest": {
    "name": "espree",
    "description": "An Esprima-compatible JavaScript parser built on Acorn",
    "author": {
      "name": "Nicholas C. Zakas",
      "email": "nicholas+npm@nczconsulting.com"
    },
    "homepage": "https://github.com/eslint/espree",
    "main": "dist/espree.cjs",
    "type": "module",
    "exports": {
      ".": [
        {
          "import": "./espree.js",
          "require": "./dist/espree.cjs",
          "default": "./dist/espree.cjs"
        },
        "./dist/espree.cjs"
      ],
      "./package.json": "./package.json"
    },
    "version": "9.3.1",
    "files": [
      "lib",
      "dist/espree.cjs",
      "espree.js"
    ],
    "engines": {
      "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/eslint/espree.git"
    },
    "bugs": {
      "url": "http://github.com/eslint/espree.git"
    },
    "license": "BSD-2-Clause",
    "dependencies": {
      "acorn": "^8.7.0",
      "acorn-jsx": "^5.3.1",
      "eslint-visitor-keys": "^3.3.0"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^17.1.0",
      "@rollup/plugin-json": "^4.1.0",
      "@rollup/plugin-node-resolve": "^11.2.0",
      "c8": "^7.11.0",
      "chai": "^4.3.4",
      "eslint": "^7.22.0",
      "eslint-config-eslint": "^7.0.0",
      "eslint-plugin-jsdoc": "^32.2.0",
      "eslint-plugin-node": "^11.1.0",
      "eslint-release": "^3.2.0",
      "esprima": "latest",
      "esprima-fb": "^8001.2001.0-dev-harmony-fb",
      "json-diff": "^0.5.4",
      "mocha": "^8.3.1",
      "npm-run-all": "^4.1.5",
      "regenerate": "^1.4.0",
      "rollup": "^2.41.2",
      "shelljs": "^0.3.0",
      "shelljs-nodecli": "^0.1.1",
      "unicode-6.3.0": "^0.7.5"
    },
    "keywords": [
      "ast",
      "ecmascript",
      "javascript",
      "parser",
      "syntax",
      "acorn"
    ],
    "scripts": {
      "unit": "npm-run-all -s unit:*",
      "unit:esm": "c8 mocha --color --reporter progress --timeout 30000 'tests/lib/**/*.js'",
      "unit:cjs": "mocha --color --reporter progress --timeout 30000 tests/lib/commonjs.cjs",
      "test": "npm-run-all -p unit lint",
      "lint": "eslint \"*.?(c)js\" lib/ tests/lib/",
      "fixlint": "npm run lint -- --fix",
      "build": "rollup -c rollup.config.js",
      "update-version": "node tools/update-version.js",
      "pretest": "npm run build",
      "prepublishOnly": "npm run update-version && npm run build",
      "sync-docs": "node sync-docs.js",
      "generate-release": "eslint-generate-release",
      "generate-alpharelease": "eslint-generate-prerelease alpha",
      "generate-betarelease": "eslint-generate-prerelease beta",
      "generate-rcrelease": "eslint-generate-prerelease rc",
      "publish-release": "eslint-publish-release"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-espree-9.3.1-8793b4bc27ea4c778c19908e0719e7b8f4115bcd-integrity/node_modules/espree/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version](https://img.shields.io/npm/v/espree.svg)](https://www.npmjs.com/package/espree)\n[![Build Status](https://travis-ci.org/eslint/espree.svg?branch=master)](https://travis-ci.org/eslint/espree)\n[![npm downloads](https://img.shields.io/npm/dm/espree.svg)](https://www.npmjs.com/package/espree)\n[![Bountysource](https://www.bountysource.com/badge/tracker?tracker_id=9348450)](https://www.bountysource.com/trackers/9348450-eslint?utm_source=9348450&utm_medium=shield&utm_campaign=TRACKER_BADGE)\n\n# Espree\n\nEspree started out as a fork of [Esprima](http://esprima.org) v1.2.2, the last stable published released of Esprima before work on ECMAScript 6 began. Espree is now built on top of [Acorn](https://github.com/ternjs/acorn), which has a modular architecture that allows extension of core functionality. The goal of Espree is to produce output that is similar to Esprima with a similar API so that it can be used in place of Esprima.\n\n## Usage\n\nInstall:\n\n```\nnpm i espree\n```\n\nTo use in an ESM file:\n\n```js\nimport * as espree from \"espree\";\n\nconst ast = espree.parse(code);\n```\n\nTo use in a Common JS file:\n\n```js\nconst espree = require(\"espree\");\n\nconst ast = espree.parse(code);\n```\n\n## API\n\n### `parse()`\n\n`parse` parses the given code and returns a abstract syntax tree (AST). It takes two parameters.\n\n- `code` [string]() - the code which needs to be parsed.\n- `options (Optional)` [Object]() - read more about this [here](#options).\n\n```js\nimport * as espree from \"espree\";\n\nconst ast = espree.parse(code);\n```\n\n**Example :**\n\n```js\nconst ast = espree.parse('let foo = \"bar\"', { ecmaVersion: 6 });\nconsole.log(ast);\n```\n\n<details><summary>Output</summary>\n<p>\n\n```\nNode {\n  type: 'Program',\n  start: 0,\n  end: 15,\n  body: [\n    Node {\n      type: 'VariableDeclaration',\n      start: 0,\n      end: 15,\n      declarations: [Array],\n      kind: 'let'\n    }\n  ],\n  sourceType: 'script'\n}\n```\n\n</p>\n</details>\n\n### `tokenize()`\n\n`tokenize` returns the tokens of a given code. It takes two parameters.\n\n- `code` [string]() - the code which needs to be parsed.\n- `options (Optional)` [Object]() - read more about this [here](#options).\n\nEven if `options` is empty or undefined or `options.tokens` is `false`, it assigns it to `true` in order to get the `tokens` array\n\n**Example :**\n\n```js\nimport * as espree from \"espree\";\n\nconst tokens = espree.tokenize('let foo = \"bar\"', { ecmaVersion: 6 });\nconsole.log(tokens);\n```\n\n<details><summary>Output</summary>\n<p>\n\n```\nToken { type: 'Keyword', value: 'let', start: 0, end: 3 },\nToken { type: 'Identifier', value: 'foo', start: 4, end: 7 },\nToken { type: 'Punctuator', value: '=', start: 8, end: 9 },\nToken { type: 'String', value: '\"bar\"', start: 10, end: 15 }\n```\n\n</p>\n</details>\n\n### `version`\n\nReturns the current `espree` version\n\n### `VisitorKeys`\n\nReturns all visitor keys for traversing the AST from [eslint-visitor-keys](https://github.com/eslint/eslint-visitor-keys)\n\n### `latestEcmaVersion`\n\nReturns the latest ECMAScript supported by `espree`\n\n### `supportedEcmaVersions`\n\nReturns an array of all supported ECMAScript versions\n\n## Options\n\n```js\nconst options = {\n    // attach range information to each node\n    range: false,\n\n    // attach line/column location information to each node\n    loc: false,\n\n    // create a top-level comments array containing all comments\n    comment: false,\n\n    // create a top-level tokens array containing all tokens\n    tokens: false,\n\n    // Set to 3, 5 (the default), 6, 7, 8, 9, 10, 11, 12, or 13 to specify the version of ECMAScript syntax you want to use.\n    // You can also set to 2015 (same as 6), 2016 (same as 7), 2017 (same as 8), 2018 (same as 9), 2019 (same as 10), 2020 (same as 11), 2021 (same as 12), or 2022 (same as 13) to use the year-based naming.\n    // You can also set \"latest\" to use the most recently supported version.\n    ecmaVersion: 3,\n\n    allowReserved: true, // only allowed when ecmaVersion is 3\n\n    // specify which type of script you're parsing (\"script\", \"module\", or \"commonjs\")\n    sourceType: \"script\",\n\n    // specify additional language features\n    ecmaFeatures: {\n\n        // enable JSX parsing\n        jsx: false,\n\n        // enable return in global scope (set to true automatically when sourceType is \"commonjs\")\n        globalReturn: false,\n\n        // enable implied strict mode (if ecmaVersion >= 5)\n        impliedStrict: false\n    }\n}\n```\n\n## Esprima Compatibility Going Forward\n\nThe primary goal is to produce the exact same AST structure and tokens as Esprima, and that takes precedence over anything else. (The AST structure being the [ESTree](https://github.com/estree/estree) API with JSX extensions.) Separate from that, Espree may deviate from what Esprima outputs in terms of where and how comments are attached, as well as what additional information is available on AST nodes. That is to say, Espree may add more things to the AST nodes than Esprima does but the overall AST structure produced will be the same.\n\nEspree may also deviate from Esprima in the interface it exposes.\n\n## Contributing\n\nIssues and pull requests will be triaged and responded to as quickly as possible. We operate under the [ESLint Contributor Guidelines](http://eslint.org/docs/developer-guide/contributing), so please be sure to read them before contributing. If you're not sure where to dig in, check out the [issues](https://github.com/eslint/espree/issues).\n\nEspree is licensed under a permissive BSD 2-clause license.\n\n## Security Policy\n\nWe work hard to ensure that Espree is safe for everyone and that security issues are addressed quickly and responsibly. Read the full [security policy](https://github.com/eslint/.github/blob/master/SECURITY.md).\n\n## Build Commands\n\n* `npm test` - run all linting and tests\n* `npm run lint` - run all linting\n\n## Differences from Espree 2.x\n\n* The `tokenize()` method does not use `ecmaFeatures`. Any string will be tokenized completely based on ECMAScript 6 semantics.\n* Trailing whitespace no longer is counted as part of a node.\n* `let` and `const` declarations are no longer parsed by default. You must opt-in by using an `ecmaVersion` newer than `5` or setting `sourceType` to `module`.\n* The `esparse` and `esvalidate` binary scripts have been removed.\n* There is no `tolerant` option. We will investigate adding this back in the future.\n\n## Known Incompatibilities\n\nIn an effort to help those wanting to transition from other parsers to Espree, the following is a list of noteworthy incompatibilities with other parsers. These are known differences that we do not intend to change.\n\n### Esprima 1.2.2\n\n* Esprima counts trailing whitespace as part of each AST node while Espree does not. In Espree, the end of a node is where the last token occurs.\n* Espree does not parse `let` and `const` declarations by default.\n* Error messages returned for parsing errors are different.\n* There are two addition properties on every node and token: `start` and `end`. These represent the same data as `range` and are used internally by Acorn.\n\n### Esprima 2.x\n\n* Esprima 2.x uses a different comment attachment algorithm that results in some comments being added in different places than Espree. The algorithm Espree uses is the same one used in Esprima 1.2.2.\n\n## Frequently Asked Questions\n\n### Why another parser\n\n[ESLint](http://eslint.org) had been relying on Esprima as its parser from the beginning. While that was fine when the JavaScript language was evolving slowly, the pace of development increased dramatically and Esprima had fallen behind. ESLint, like many other tools reliant on Esprima, has been stuck in using new JavaScript language features until Esprima updates, and that caused our users frustration.\n\nWe decided the only way for us to move forward was to create our own parser, bringing us inline with JSHint and JSLint, and allowing us to keep implementing new features as we need them. We chose to fork Esprima instead of starting from scratch in order to move as quickly as possible with a compatible API.\n\nWith Espree 2.0.0, we are no longer a fork of Esprima but rather a translation layer between Acorn and Esprima syntax. This allows us to put work back into a community-supported parser (Acorn) that is continuing to grow and evolve while maintaining an Esprima-compatible parser for those utilities still built on Esprima.\n\n### Have you tried working with Esprima?\n\nYes. Since the start of ESLint, we've regularly filed bugs and feature requests with Esprima and will continue to do so. However, there are some different philosophies around how the projects work that need to be worked through. The initial goal was to have Espree track Esprima and eventually merge the two back together, but we ultimately decided that building on top of Acorn was a better choice due to Acorn's plugin support.\n\n### Why don't you just use Acorn?\n\nAcorn is a great JavaScript parser that produces an AST that is compatible with Esprima. Unfortunately, ESLint relies on more than just the AST to do its job. It relies on Esprima's tokens and comment attachment features to get a complete picture of the source code. We investigated switching to Acorn, but the inconsistencies between Esprima and Acorn created too much work for a project like ESLint.\n\nWe are building on top of Acorn, however, so that we can contribute back and help make Acorn even better.\n\n### What ECMAScript features do you support?\n\nEspree supports all ECMAScript 2021 features and partially supports ECMAScript 2022 features.\n\nBecause ECMAScript 2022 is still under development, we are implementing features as they are finalized. Currently, Espree supports:\n\n* [Class instance fields](https://github.com/tc39/proposal-class-fields)\n* [Class private instance methods and accessors](https://github.com/tc39/proposal-private-methods)\n* [Class static fields, static private methods and accessors](https://github.com/tc39/proposal-static-class-features)\n* [RegExp match indices](https://github.com/tc39/proposal-regexp-match-indices)\n* [Top-level await](https://github.com/tc39/proposal-top-level-await)\n* [Class static initialization blocks](https://github.com/tc39/proposal-class-static-block)\n* [Ergonomic brand checks for Private Fields](https://github.com/tc39/proposal-private-fields-in-in)\n\nSee [finished-proposals.md](https://github.com/tc39/proposals/blob/master/finished-proposals.md) to know what features are finalized.\n\n### How do you determine which experimental features to support?\n\nIn general, we do not support experimental JavaScript features. We may make exceptions from time to time depending on the maturity of the features.\n",
    "licenseText": "BSD 2-Clause License\n\nCopyright (c) Open JS Foundation\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/espree/-/espree-9.3.1.tgz#8793b4bc27ea4c778c19908e0719e7b8f4115bcd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/espree/-/espree-9.3.1.tgz",
    "hash": "8793b4bc27ea4c778c19908e0719e7b8f4115bcd",
    "integrity": "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ==",
    "registry": "npm",
    "packageName": "espree",
    "cacheIntegrity": "sha512-bvdyLmJMfwkV3NCRl5ZhJf22zBFo1y8bYh3VYb+bfzqNB4Je68P2sSuXyuFquzWLebHpNd2/d5uv7yoP9ISnGQ== sha1-h5O0vCfqTHeMGZCOBxnnuPQRW80="
  },
  "registry": "npm",
  "hash": "8793b4bc27ea4c778c19908e0719e7b8f4115bcd"
}