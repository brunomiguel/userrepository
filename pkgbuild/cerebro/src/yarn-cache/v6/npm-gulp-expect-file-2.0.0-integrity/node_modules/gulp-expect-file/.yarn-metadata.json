{
  "manifest": {
    "name": "gulp-expect-file",
    "version": "2.0.0",
    "author": {
      "name": "Kota Saito",
      "email": "kotas.nico@gmail.com"
    },
    "copyright": "2014 Kota Saito",
    "description": "Expect files in pipes for gulp.js",
    "license": "MIT",
    "homepage": "https://github.com/pioug/gulp-expect-file/",
    "bugs": {
      "url": "https://github.com/pioug/gulp-expect-file/issues"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/pioug/gulp-expect-file.git"
    },
    "main": "index.js",
    "scripts": {
      "test": "node_modules/.bin/mocha"
    },
    "keywords": [
      "gulpplugin",
      "test",
      "expect"
    ],
    "dependencies": {
      "ansi-colors": "^4.1.1",
      "async": "^3.2.0",
      "fancy-log": "^1.3.3",
      "minimatch": "^3.0.4",
      "plugin-error": "^1.0.1",
      "through2": "^4.0.2",
      "vinyl": "^2.2.1"
    },
    "devDependencies": {
      "eslint": "^7.27.0",
      "mocha": "^8.4.0",
      "mock-require": "^3.0.3",
      "prettier": "^2.3.0",
      "should": "^13.2.3",
      "temp": "^0.9.4"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-gulp-expect-file-2.0.0-integrity/node_modules/gulp-expect-file/package.json",
    "readmeFilename": "README.md",
    "readme": "# gulp-expect-file [![NPM version][npm-image]][npm-url] [![Build Status][gh-image]][gh-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\n> Expectation on generated files for gulp 3/4\n\nThis plugin is intended for testing other gulp plugin.\n\n![Screen Shot](http://pioug.github.io/gulp-expect-file/screenshot.png)\n\n## Usage\n\nFirst, install `gulp-expect-file` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-expect-file\n```\n\nThen, add it to your `gulpfile.js`:\n\n```js\nvar expect = require(\"gulp-expect-file\");\n\ngulp.task(\"copy\", function () {\n  gulp\n    .src([\"src/foo.txt\"])\n    .pipe(gulp.dest(\"dest/\"))\n    .pipe(expect(\"dest/foo.txt\"));\n});\n```\n\n## API\n\n### expect(expectation)\n\n#### expectation\n\nType: `String`, `Array`, `Object` or `Function`\n\nIt describes the expectation of files on pipe.\n\n| expectation                            | meaning                                                        |\n| -------------------------------------- | -------------------------------------------------------------- |\n| `\"foo.txt\"`                            | Expects `foo.txt` on pipe                                      |\n| `\"*.txt\"`                              | Expects any files matching glob `*.txt` on pipe                |\n| `[\"a.txt\", \"b.txt\"]`                   | Expects `a.txt` and `b.txt` both on pipe                       |\n| `{\"a.txt\": true, \"b.txt\": true}`       | Expects `a.txt` and `b.txt` both on pipe (same as above)       |\n| `{\"foo.txt\": \"text\"}`                  | Expects `foo.txt` with contents that has `\"text\"` as substring |\n| `{\"foo.txt\": /pattern/}`               | Expects `foo.txt` with contents that matches `/pattern/`       |\n| `function (file) { ... }`              | Call the tester function for each file on pipe                 |\n| `{\"foo.txt\": function (file) { ... }}` | Call the tester function for `foo.txt`                         |\n\nA tester function is called with [vinyl File object](https://github.com/wearefractal/vinyl) of target file.\n\nIt can return `true`, `null`, `undefined` for passing that file. `false`, `String` of error message, or any other value will fail testing on that file.\n\nSync version:\n\n```js\nfunction (file) {\n  return /\\.txt$/.test(file.path);\n}\n```\n\nAsync version:\n\n```js\nfunction (file, callback) {\n  process.nextTick(function () {\n    if (/\\.txt$/.test(file.path)) {\n      callback('not txt file');\n    } else {\n      callback();\n    }\n  });\n}\n```\n\n### expect(options, expectation)\n\n#### options.reportUnexpected\n\nType: `Boolean`\nDefault: `true`\n\nIf true, files not matching any expectation will be reported as failure.\n\nFor example, if `a.txt` and `b.txt` are on the pipe, `expect(['a.txt'])` will report that `b.txt` is unexpected.\n\n```js\ngulp.src([\"a.txt\", \"b.txt\"]).pipe(expect([\"a.txt\"]));\n\n// => FAIL: b.txt unexpected\n```\n\n#### options.reportMissing\n\nType: `Boolean`\nDefault: `true`\n\nIf true, expected files that are not on the pipe will be reported as failure.\n\nFor example, if `a.txt` is on the pipe, `expect(['a.txt', 'b.txt'])` will report that `b.txt` is missing.\n\n```js\ngulp.src([\"a.txt\"]).pipe(expect([\"a.txt\", \"b.txt\"]));\n\n// => FAIL: Missing 1 expected files: b.txt\n```\n\n#### options.checkRealFile\n\nType: `Boolean`\nDefault: `false`\n\nIf true, it also checks if the real file exists on the file system by `fs.exists()`.\n\n```js\ngulp\n  .src([\"exist.txt\", \"nonexist.txt\"])\n  .pipe(expect({ checkRealFile: true }, \"*.txt\"));\n\n// => FAIL: nonexist.txt not exists on filesystem\n```\n\n#### options.errorOnFailure\n\nType: `Boolean`\nDefault: `false`\n\nIf true, it emits `error` event when expectations got failed.\n\n```js\ngulp\n  .src([\"a.txt\"])\n  .pipe(expect({ errorOnFailure: true }, [\"b.txt\"]))\n  .on(\"error\", function (err) {\n    console.error(err);\n  });\n```\n\n#### options.silent\n\nType: `Boolean`\nDefault: `false`\n\nIf true, it does not report any results.\n\n#### options.verbose\n\nType: `Boolean`\nDefault: `false`\n\nIf true, it reports files that passed the expectation.\n\n### expect.real([options,] expectation)\n\nThis is just a shortcut for `expect({ checkRealFile: true }, expectation)`.\n\n[npm-url]: https://npmjs.org/package/gulp-expect-file\n[npm-image]: https://img.shields.io/npm/v/gulp-expect-file.svg\n[gh-url]: https://github.com/pioug/gulp-expect-file/actions/workflows/test.yml\n[gh-image]: https://github.com/pioug/gulp-expect-file/actions/workflows/test.yml/badge.svg\n[daviddm-url]: https://david-dm.org/pioug/gulp-expect-file\n[daviddm-image]: https://img.shields.io/david/pioug/gulp-expect-file.svg\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/gulp-expect-file/-/gulp-expect-file-2.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/gulp-expect-file/-/gulp-expect-file-2.0.0.tgz",
    "hash": "",
    "integrity": "sha512-VLBvmSoF85dQ71tQngx1GfAcJ0s9g50dcjrlX4eyZbF9sAEoGU8F04JtXXU6rBcGDAHXUs4+n1HUs0lgHKyW1Q==",
    "registry": "npm",
    "packageName": "gulp-expect-file",
    "cacheIntegrity": "sha512-VLBvmSoF85dQ71tQngx1GfAcJ0s9g50dcjrlX4eyZbF9sAEoGU8F04JtXXU6rBcGDAHXUs4+n1HUs0lgHKyW1Q== sha1-RxU2XZ4soS1A0G3aCyJyUePgVfI="
  },
  "registry": "npm",
  "hash": "54b06f992a05f39750ef5b509e0c7519f01c274b3d839d1d723ae55f87b265b17db00128194f05d3826d5d753aac17060c01d752ce3e9f51d4b349601cac96d5"
}