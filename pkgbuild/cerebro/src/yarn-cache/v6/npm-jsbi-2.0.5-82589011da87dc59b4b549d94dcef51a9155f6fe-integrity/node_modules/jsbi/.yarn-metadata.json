{
  "manifest": {
    "name": "jsbi",
    "version": "2.0.5",
    "devDependencies": {
      "eslint": "^5.4.0",
      "eslint-config-google": "^0.9.1",
      "rollup": "^0.65.0",
      "rollup-plugin-babel-minify": "^6.0.0"
    },
    "main": "dist/jsbi-cjs.js",
    "module": "dist/jsbi.mjs",
    "browser": "dist/jsbi-umd.js",
    "types": "jsbi.d.ts",
    "files": [
      "dist",
      "jsbi.d.ts"
    ],
    "scripts": {
      "build": "rollup --config rollup.config.mjs",
      "dev": "rollup --config rollup.config.mjs --watch",
      "test": "node --no-warnings --experimental-modules tests/tests.mjs; set -e; for file in benchmarks/*.mjs; do node --no-warnings --experimental-modules \"${file}\"; done",
      "pretest": "npm run build",
      "prepublish": "npm run ci",
      "lint": "eslint --fix jsbi.mjs",
      "generate-benchmarks": "for op in add and div mod mul neg not or sar shl sub xor; do scripts/generate-benchmark.py generate \"${op}\" > \"benchmarks/${op}.mjs\"; done",
      "ci": "npm run lint && git status && git diff-index --quiet HEAD -- && npm test"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-jsbi-2.0.5-82589011da87dc59b4b549d94dcef51a9155f6fe-integrity/node_modules/jsbi/package.json",
    "readmeFilename": "README.md",
    "readme": "# JSBI — pure-JavaScript BigInts [![Build status](https://travis-ci.com/GoogleChromeLabs/jsbi.svg?branch=master)](https://travis-ci.com/GoogleChromeLabs/jsbi)\n\nJSBI is a pure-JavaScript implementation of [the official ECMAScript BigInt proposal](https://tc39.github.io/proposal-bigint/), which is on track to become a part of the JavaScript language in the near future.\n\n## Installation\n\n```sh\nnpm install jsbi --save\n```\n\n## Usage\n\n```js\nimport JSBI from './jsbi.mjs';\n\nconst max = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nconsole.log(String(max));\n// → '9007199254740991'\nconst other = JSBI.BigInt('2');\nconst result = JSBI.add(max, other);\nconsole.log(String(result));\n// → '9007199254740993'\n```\n\nNote: explicitly call `toString` on any `JSBI` instances when `console.log()`ing them to see their numeric representation (e.g. `String(max)` or `max.toString()`). Without it (e.g. `console.log(max)`), you’ll instead see the object that represents the value.\n\nUse [babel-plugin-transform-jsbi-to-bigint](https://github.com/GoogleChromeLabs/babel-plugin-transform-jsbi-to-bigint) to transpile JSBI code into native BigInt code.\n\nRefer to the detailed instructions below for more information.\n\n## Why?\n\n[Native BigInts are already shipping](https://developers.google.com/web/updates/2018/05/bigint) in modern Chromium-based browsers (at the time of this writing, Google Chrome 67+, Opera 54+) and the latest Node.js builds ([v10.4](https://nodejs.org/en/download/releases/) and later), and they are expected to come to other browsers in the future — which means you can't use them yet if you want your code to run everywhere.\n\nTo use BigInts in your code today, you need a library. But there’s a difficulty: the BigInt proposal changes the behavior of operators (like `+`, `>=`, etc.) to work on BigInts. These changes are impossible to polyfill directly; and they are also making it infeasible (in most cases) to transpile BigInt code to fallback code using Babel or similar tools. The reason is that such a transpilation would have to replace every single operator in the program with a call to some function that performs type checks on its inputs, which would incur an unacceptable performance penalty.\n\nThe solution is to do it the other way round: write code using a library’s syntax, and [transpile it to native BigInt code](https://github.com/GoogleChromeLabs/babel-plugin-transform-jsbi-to-bigint) when available. JSBI is designed for exactly this purpose: it provides a BigInt “polyfill” implementation that behaves exactly like the upcoming native BigInts, but with a syntax that you can ship on all browsers, today.\n\nIts advantages over other, existing big-integer libraries are:\n\n- it behaves exactly like native BigInts will when they become available, so to migrate to those, you can mechanically update your code’s syntax; no re-thinking of its logic will be required. (There is no tool for this migration yet, but it should be easy to build one. Help welcome.)\n- strong focus on performance. On average, JSBI is performance-competitive with the native implementation that Google Chrome is currently shipping.\n\n## How?\n\nExcept for mechanical differences in syntax, you use JSBI-BigInts just [like you would use native BigInts](https://developers.google.com/web/updates/2018/05/bigint). Some things even look the same, after you replace `BigInt` with `JSBI.BigInt`:\n\n| Operation            | native BigInts      | JSBI                     |\n| -------------------- | ------------------- | ------------------------ |\n| Creation from String | `a = BigInt('456')` | `a = JSBI.BigInt('456')` |\n| Creation from Number | `a = BigInt(789)`   | `a = JSBI.BigInt(789)`   |\n| Conversion to String | `a.toString(radix)` | `a.toString(radix)`      |\n| Conversion to Number | `Number(a)`         | `JSBI.toNumber(a)`       |\n\nMost operators are replaced by method calls:\n\n| Operation                   | native BigInts | JSBI                              |\n| --------------------------- | -------------- | --------------------------------- |\n| Addition                    | `c = a + b`    | `c = JSBI.add(a, b)`              |\n| Subtraction                 | `c = a - b`    | `c = JSBI.subtract(a, b)`         |\n| Multiplication              | `c = a * b`    | `c = JSBI.multiply(a, b)`         |\n| Division                    | `c = a / b`    | `c = JSBI.divide(a, b)`           |\n| Remainder                   | `c = a % b`    | `c = JSBI.remainder(a, b)`        |\n| Exponentiation              | `c = a ** b`   | `c = JSBI.exponentiate(a, b)`     |\n| Negation                    | `b = -a`       | `b = JSBI.unaryMinus(a)`          |\n| Bitwise negation            | `b = ~a`       | `b = JSBI.bitwiseNot(a)`          |\n| Left shifting               | `c = a << b`   | `c = JSBI.leftShift(a, b)`        |\n| Right shifting              | `c = a >> b`   | `c = JSBI.signedRightShift(a, b)` |\n| Bitwise “and”               | `c = a & b`    | `c = JSBI.bitwiseAnd(a, b)`       |\n| Bitwise “or”                | `c = a \\| b`   | `c = JSBI.bitwiseOr(a, b)`        |\n| Bitwise “xor”               | `c = a ^ b`    | `c = JSBI.bitwiseXor(a, b)`       |\n| Comparison to other BigInts | `a === b`      | `JSBI.equal(a, b)`                |\n|                             | `a < b`        | `JSBI.lessThan(a, b)`             |\n|                             | `a <= b`       | `JSBI.lessThanOrEqual(a, b)`      |\n|                             | `a > b`        | `JSBI.greaterThan(a, b)`          |\n|                             | `a >= b`       | `JSBI.greaterThanOrEqual(a, b)`   |\n\nThe functions above operate only on BigInts. (They don’t perform type checks in the current implementation, because such checks are a waste of time when we assume that you know what you’re doing. Don’t try to call them with other inputs, or you’ll get “interesting” failures!)\n\nSome operations are particularly interesting when you give them inputs of mixed types, e.g. comparing a BigInt to a Number, or concatenating a string with a BigInt. In order to be symmetric (rather than having to be called on a BigInt as the left-hand side), they are implemented as static functions whose behavior imitates the respective native operands:\n\n| Operation                       | native BigInts | JSBI             |\n| ------------------------------- | -------------- | ---------------- |\n| Abstract equality comparison    | `x == y`       | `JSBI.EQ(x, y)`  |\n| Generic “less than”             | `x < y`        | `JSBI.LT(x, y)`  |\n| Generic “less than or equal”    | `x <= y`       | `JSBI.LE(x, y)`  |\n| Generic “greater than”          | `x > y`        | `JSBI.GT(x, y)`  |\n| Generic “greater than or equal” | `x >= y`       | `JSBI.GE(x, y)`  |\n| Generic addition                | `x + y`        | `JSBI.ADD(x, y)` |\n\nThe variable names `x` and `y` here indicate that the variables can refer to anything, for example: `JSBI.GT(101.5, BigInt('100'))` or `str = JSBI.ADD('result: ', BigInt('0x2A'))`.\n\nUnfortunately, there are also a few things that are not supported at all:\n\n| Unsupported operation | native BigInts | JSBI                                 |\n| --------------------- | -------------- | ------------------------------------ |\n| literals              | `a = 123n;`    | N/A ☹                                |\n| increment             | `a++`          | N/A ☹                                |\n|                       | `a + 1n`       | `JSBI.add(a, JSBI.BigInt('1'))`      |\n| decrement             | `a--`          | N/A ☹                                |\n|                       | `a - 1n`       | `JSBI.subtract(a, JSBI.BigInt('1'))` |\n\nIt is impossible to replicate the exact behavior of the native `++` and `--` operators with static functions. Since JSBI is intended to be transpiled away eventually, it doesn’t provide a similar-but-different alternative. You can use `JSBI.add()` and `JSBI.subtract()` instead.\n\n## When?\n\nNow! The JSBI library is ready for use today.\n\nOnce BigInts are natively supported everywhere, use [babel-plugin-transform-jsbi-to-bigint](https://github.com/GoogleChromeLabs/babel-plugin-transform-jsbi-to-bigint) to transpile your JSBI code into native BigInt code once and for all.\n\nView [our issue tracker](https://github.com/GoogleChromeLabs/jsbi/issues) to learn more about out our future plans for JSBI, and please join the discussion!\n\nA more vague future plan is to use the JSBI library (or an extension to it) as a staging ground for additional BigInt-related functionality. The official proposal is intentionally somewhat minimal, and leaves further “library functions” for follow-up proposals. Examples are a combined `exp`+`mod` function, and bit manipulation functions.\n\n## Development\n\n1. Clone this repository and `cd` into the local directory.\n\n1. Use the Node.js version specified in `.nvmrc`:\n\n     ```sh\n     nvm use\n     ```\n\n1. Install development dependencies:\n\n    ```sh\n    npm install\n    ```\n\n1. Run the tests:\n\n    ```sh\n    npm test\n    ```\n\n    See `npm run` for the list of commands.\n",
    "description": "JSBI is a pure-JavaScript implementation of [the official ECMAScript BigInt proposal](https://tc39.github.io/proposal-bigint/), which is on track to become a part of the JavaScript language in the near future.",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n",
    "license": "Apache*"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jsbi/-/jsbi-2.0.5.tgz#82589011da87dc59b4b549d94dcef51a9155f6fe",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jsbi/-/jsbi-2.0.5.tgz",
    "hash": "82589011da87dc59b4b549d94dcef51a9155f6fe",
    "integrity": "sha512-TzO/62Hxeb26QMb4IGlI/5X+QLr9Uqp1FPkwp2+KOICW+Q+vSuFj61c8pkT6wAns4WcK56X7CmSHhJeDGWOqxQ==",
    "registry": "npm",
    "packageName": "jsbi",
    "cacheIntegrity": "sha512-TzO/62Hxeb26QMb4IGlI/5X+QLr9Uqp1FPkwp2+KOICW+Q+vSuFj61c8pkT6wAns4WcK56X7CmSHhJeDGWOqxQ== sha1-gliQEdqH3Fm0tUnZTc71GpFV9v4="
  },
  "registry": "npm",
  "hash": "82589011da87dc59b4b549d94dcef51a9155f6fe"
}