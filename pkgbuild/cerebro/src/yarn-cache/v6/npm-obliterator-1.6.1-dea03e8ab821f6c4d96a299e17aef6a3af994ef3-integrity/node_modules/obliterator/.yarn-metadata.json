{
  "manifest": {
    "name": "obliterator",
    "version": "1.6.1",
    "description": "Higher order iterator library for JavaScript.",
    "main": "index.js",
    "scripts": {
      "lint": "eslint *.js",
      "prepublish": "npm run lint && npm test",
      "test": "mocha test.js && npm run test:types",
      "test:types": "tsc --lib es2015,dom --noEmit --noImplicitAny --noImplicitReturns ./test-types.ts"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/yomguithereal/obliterator.git"
    },
    "keywords": [
      "iterator"
    ],
    "author": {
      "name": "Guillaume Plique",
      "url": "http://github.com/Yomguithereal"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/yomguithereal/obliterator/issues"
    },
    "homepage": "https://github.com/yomguithereal/obliterator#readme",
    "devDependencies": {
      "@yomguithereal/eslint-config": "^4.0.0",
      "eslint": "^6.8.0",
      "mocha": "^7.0.0",
      "typescript": "^3.7.5"
    },
    "eslintConfig": {
      "extends": "@yomguithereal/eslint-config",
      "globals": {
        "ArrayBuffer": true,
        "Map": true,
        "Set": true,
        "Symbol": true,
        "Uint8Array": true,
        "Uint32Array": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-obliterator-1.6.1-dea03e8ab821f6c4d96a299e17aef6a3af994ef3-integrity/node_modules/obliterator/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://travis-ci.org/Yomguithereal/obliterator.svg)](https://travis-ci.org/Yomguithereal/obliterator)\n\n# Obliterator\n\nObliterator is a dead simple JavaScript/TypeScript library providing miscellaneous higher-order iterator functions such as combining two or more iterators into a single one.\n\n# Installation\n\n```\nnpm install --save obliterator\n```\n\nNote `obliterator` comes along with its TypeScript declarations.\n\n# Usage\n\n## Summary\n\n*Classes*\n\n* [Iterator](#iterator)\n\n*Functions*\n\n* [chain](#chain)\n* [combinations](#combinations)\n* [consume](#consume)\n* [filter](#filter)\n* [forEach](#foreach)\n* [map](#map)\n* [match](#match)\n* [permutations](#permutations)\n* [powerSet](#powerSet)\n* [split](#split)\n* [take](#take)\n\n## Iterator\n\nA handy Iterator class with safeguards and usable with ES2015's `for ... of` loop constructs & spread operator.\n\n```js\nimport Iterator from 'obliterator/iterator';\n// Or\nimport {Iterator} from 'obliterator';\n\nconst iterator = new Iterator(function() {\n  // Define what the `next` function does\n});\n\n// Checking that the given value is an iterator (native or else)\nIterator.is(value);\n\n// Creating an empty iterator\nconst emptyIterator = Iterator.empty();\n\n// Creating a simple iterator from a single value\nconst simpleIterator = Iterator.of(34);\n\n// Creating a simple iterator from multiple values\nconst multipleIterator = Iterator.of(1, 2, 3);\n```\n\n## chain\n\nVariadic function chaining all the given iterators.\n\n```js\nimport chain from 'obliterator/chain';\n// Or\nimport {chain} from 'obliterator';\n\nconst set1 = new Set('a');\nconst set2 = new Set('bc');\n\nconst chained = chain(set1.values(), set2.values());\n\nchained.next();\n>>> {done: false, value: 'a'}\nchained.next();\n>>> {done: false, value: 'b'}\n```\n\n## combinations\n\nReturns an iterator of combinations of the given array and of the given size.\n\nNote that for performance reasons, the yielded combination is always the same object.\n\n```js\nimport combinations from 'obliterator/combinations';\n// Or\nimport {combinations} from 'obliterator';\n\nconst iterator = combinations(['A', 'B', 'C', 'D'], 2);\n\niterator.next().value;\n>>> ['A', 'B']\niterator.next().value;\n>>> ['A', 'C']\n```\n\n## consume\n\nFunction consuming the given iterator fully or for n steps.\n\n```js\nimport consume from 'obliterator/consume';\n// Or\nimport {consume} from 'obliterator';\n\nconst set = new Set([1, 2, 3]);\n\n// Consuming the whole iterator\nlet iterator = set.values();\nconsume(iterator);\niterator.next().done\n>>> true\n\n// Consuming n steps\nlet iterator = set.values();\nconsume(iterator, 2);\niterator.next().value\n>>> 3\n```\n\n## filter\n\nFunction returning an iterator filtering another one's values using the given predicate.\n\n```js\nimport filter from 'obliterator/filter';\n// Or\nimport {filter} from 'obliterator';\n\nconst set = new Set([1, 2, 3, 4, 5]);\n\nconst even = x => x % 2 === 0;\n\nconst iterator = filter(even, set.values());\n\niterator.next().value\n>>> 2\niterator.next().value\n>>> 4\n```\n\n## forEach\n\nFunction able to iterate over almost any JavaScript iterable value using a callback.\n\nSupported values range from arrays, typed arrays, sets, maps, objects, strings, arguments, iterators, arbitrary iterables etc.\n\n```js\nimport forEach from 'obliterator/foreach';\n// Or\nimport {forEach} from 'obliterator';\n\nconst set = new Set(['apple', 'banana']);\n\nforEach(set.values(), (value, i) => {\n  console.log(i, value);\n});\n\n// Iterating over a string\nforEach('abc', (char, i) => ...);\n\n// Iterating over a map\nforEach(map, (value, key) => ...);\n```\n\nOptionally, one can use the `forEachWithNullKeys` function to iterate over mixed values but with the twist that iterables without proper keys (lists, sets etc.), will yield `null` instead of an index key.\n\n```js\nimport {forEachWithNullKeys} from 'obliterator/foreach';\n\nconst set = new Set(['apple', 'banana']);\n\nforEach(set, (value, key) => {\n  console.log(key, value);\n});\n>>> null, 'apple'\n>>> null, 'banana'\n```\n\n## map\n\nFunction returning an iterator mapping another one's values using the given function.\n\n```js\nimport map from 'obliterator/map';\n// Or\nimport {map} from 'obliterator';\n\nconst set = new Set([1, 2, 3, 4, 5]);\n\nconst triple = x => x * 3;\n\nconst iterator = map(triple, set.values());\n\niterator.next().value\n>>> 3\niterator.next().value\n>>> 6\n```\n\n## match\n\nFunction returning an iterator over the matches of a given regex applied to the target string.\n\n```js\nimport match from 'obliterator/match';\n// Or\nimport {match} from 'obliterator';\n\nconst iterator = match(/t/, 'test');\n\niterator.next().value.index\n>>> 0\niterator.next().value.index\n>>> 3\n```\n\n## permutations\n\nReturns an iterator of permutations of the given array and of the given size.\n\nNote that for performance reasons, the yielded permutation is always the same object.\n\n```js\nimport permutations from 'obliterator/permutations';\n// Or\nimport {permutations} from 'obliterator';\n\nlet iterator = permutations([1, 2, 3]);\n\niterator.next().value\n>>> [1, 2, 3]\niterator.next().value\n>>> [1, 3, 2]\n\niterator = permutations(['A', 'B', 'C', 'D'], 2);\n\niterator.next().value;\n>>> ['A', 'B']\niterator.next().value;\n>>> ['A', 'C']\n```\n\n## powerSet\n\nReturns an iterator of sets composing the power set of the given array.\n\n```js\nimport powerSet from 'obliterator/power-set';\n// Or\nimport {powerSet} from 'obliterator';\n\nconst iterator = powerSet(['A', 'B', 'C']);\n\niterator.next().value;\n>>> []\niterator.next().value;\n>>> ['A']\n```\n\n## split\n\nReturns an iterator over the splits of the target string, according to the given RegExp pattern.\n\n```js\nimport split from 'obliterator/split';\n// Or\nimport {split} from 'obliterator';\n\nconst iterator = split(/;/g, 'hello;world;super');\n\niterator.next().value;\n>>> 'hello'\niterator.next().value;\n>>> 'world'\n```\n\n## take\n\nFunction taking values from given iterator and returning them in an array.\n\n```js\nimport take from 'obliterator/take';\n// Or\nimport {take} from 'obliterator';\n\nconst set = new Set([1, 2, 3]);\n\n// To take n values from the iterator\ntake(set.values(), 2);\n>>> [1, 2]\n\n// To convert the full iterator into an array\ntake(set.values());\n>>> [1, 2, 3]\n```\n\n# Contribution\n\nContributions are obviously welcome. Please be sure to lint the code & add the relevant unit tests before submitting any PR.\n\n```\ngit clone git@github.com:Yomguithereal/obliterator.git\ncd obliterator\nnpm install\n\n# To lint the code\nnpm run lint\n\n# To run the unit tests\nnpm test\n```\n\n# License\n\n[MIT](LICENSE.txt)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Guillaume Plique (Yomguithereal)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/obliterator/-/obliterator-1.6.1.tgz#dea03e8ab821f6c4d96a299e17aef6a3af994ef3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/obliterator/-/obliterator-1.6.1.tgz",
    "hash": "dea03e8ab821f6c4d96a299e17aef6a3af994ef3",
    "integrity": "sha512-9WXswnqINnnhOG/5SLimUlzuU1hFJUc8zkwyD59Sd+dPOMf05PmnYG/d6Q7HZ+KmgkZJa1PxRso6QdM3sTNHig==",
    "registry": "npm",
    "packageName": "obliterator",
    "cacheIntegrity": "sha512-9WXswnqINnnhOG/5SLimUlzuU1hFJUc8zkwyD59Sd+dPOMf05PmnYG/d6Q7HZ+KmgkZJa1PxRso6QdM3sTNHig== sha1-3qA+irgh9sTZaimeF672o6+ZTvM="
  },
  "registry": "npm",
  "hash": "dea03e8ab821f6c4d96a299e17aef6a3af994ef3"
}