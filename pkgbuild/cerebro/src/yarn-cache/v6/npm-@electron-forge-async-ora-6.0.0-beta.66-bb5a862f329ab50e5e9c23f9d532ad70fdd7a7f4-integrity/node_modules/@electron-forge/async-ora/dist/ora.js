"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.fakeOra = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
require("log-symbols");
var _ora = _interopRequireDefault(require("ora"));
var _prettyMs = _interopRequireDefault(require("pretty-ms"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:async-ora');
const useFakeOra = Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'));
if (useFakeOra) {
    console.warn(_chalk.default.red('WARNING: DEBUG environment variable detected. Append the electron-forge:lifecycle namespace'));
    console.warn(_chalk.default.red('to the value of DEBUG in order to view progress indicators.'));
}
const fakeOra = (name)=>{
    let oraName = name;
    let startTime = null;
    const timing = ()=>startTime ? `-- after ${_chalk.default.cyan(`${(0, _prettyMs).default(Date.now() - startTime)}`)}` : null
    ;
    const fake = {
        start: ()=>{
            startTime = Date.now();
            d('Process Started:', fake.text);
            return fake;
        },
        fail: ()=>{
            d(_chalk.default.red(`Process Failed: ${fake.text}`), timing());
            return fake;
        },
        succeed: ()=>{
            d('Process Succeeded:', fake.text, timing());
            return fake;
        },
        stop: ()=>{
            d('Process Stopped:', fake.text, timing());
            return fake;
        },
        warn: (warning)=>{
            d('Process Warned:', warning, timing());
            return fake;
        },
        get text () {
            return oraName;
        },
        set text (newName){
            d('Process Renamed:', oraName, ' --> ', newName);
            oraName = newName;
        }
    };
    return fake;
};
exports.fakeOra = fakeOra;
var _default = useFakeOra ? fakeOra : _ora.default;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IFwibm8tY29uc29sZVwiOiBcIm9mZlwiICovXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IHJlYWxPcmEgZnJvbSAnb3JhJztcbmltcG9ydCBwcmV0dHlNcyBmcm9tICdwcmV0dHktbXMnO1xuXG5pbXBvcnQgeyBPcmFJbXBsIH0gZnJvbSAnLi9vcmEtaGFuZGxlcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6YXN5bmMtb3JhJyk7XG5cbmNvbnN0IHVzZUZha2VPcmEgPSBCb29sZWFuKHByb2Nlc3MuZW52LkRFQlVHICYmIHByb2Nlc3MuZW52LkRFQlVHLmluY2x1ZGVzKCdlbGVjdHJvbi1mb3JnZScpKTtcblxuaWYgKHVzZUZha2VPcmEpIHtcbiAgY29uc29sZS53YXJuKGNoYWxrLnJlZCgnV0FSTklORzogREVCVUcgZW52aXJvbm1lbnQgdmFyaWFibGUgZGV0ZWN0ZWQuIEFwcGVuZCB0aGUgZWxlY3Ryb24tZm9yZ2U6bGlmZWN5Y2xlIG5hbWVzcGFjZScpKTtcbiAgY29uc29sZS53YXJuKGNoYWxrLnJlZCgndG8gdGhlIHZhbHVlIG9mIERFQlVHIGluIG9yZGVyIHRvIHZpZXcgcHJvZ3Jlc3MgaW5kaWNhdG9ycy4nKSk7XG59XG5cbmV4cG9ydCBjb25zdCBmYWtlT3JhID0gKG5hbWU6IHN0cmluZyk6IE9yYUltcGwgPT4ge1xuICBsZXQgb3JhTmFtZSA9IG5hbWU7XG4gIGxldCBzdGFydFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjb25zdCB0aW1pbmcgPSAoKSA9PiAoc3RhcnRUaW1lID8gYC0tIGFmdGVyICR7Y2hhbGsuY3lhbihgJHtwcmV0dHlNcyhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKX1gKX1gIDogbnVsbCk7XG4gIGNvbnN0IGZha2U6IE9yYUltcGwgPSB7XG4gICAgc3RhcnQ6ICgpID0+IHtcbiAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBkKCdQcm9jZXNzIFN0YXJ0ZWQ6JywgZmFrZS50ZXh0KTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgZmFpbDogKCkgPT4ge1xuICAgICAgZChjaGFsay5yZWQoYFByb2Nlc3MgRmFpbGVkOiAke2Zha2UudGV4dH1gKSwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBzdWNjZWVkOiAoKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFN1Y2NlZWRlZDonLCBmYWtlLnRleHQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgc3RvcDogKCkgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBTdG9wcGVkOicsIGZha2UudGV4dCwgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICB3YXJuOiAod2FybmluZzogc3RyaW5nKSA9PiB7XG4gICAgICBkKCdQcm9jZXNzIFdhcm5lZDonLCB3YXJuaW5nLCB0aW1pbmcoKSk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgcmV0dXJuIG9yYU5hbWU7XG4gICAgfSxcbiAgICBzZXQgdGV4dChuZXdOYW1lOiBzdHJpbmcpIHtcbiAgICAgIGQoJ1Byb2Nlc3MgUmVuYW1lZDonLCBvcmFOYW1lLCAnIC0tPiAnLCBuZXdOYW1lKTtcbiAgICAgIG9yYU5hbWUgPSBuZXdOYW1lO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBmYWtlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlRmFrZU9yYSA/IGZha2VPcmEgOiByZWFsT3JhO1xuIl0sIm5hbWVzIjpbImQiLCJkZWJ1ZyIsInVzZUZha2VPcmEiLCJCb29sZWFuIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsImNoYWxrIiwicmVkIiwiZmFrZU9yYSIsIm5hbWUiLCJvcmFOYW1lIiwic3RhcnRUaW1lIiwidGltaW5nIiwiY3lhbiIsInByZXR0eU1zIiwiRGF0ZSIsIm5vdyIsImZha2UiLCJzdGFydCIsInRleHQiLCJmYWlsIiwic3VjY2VlZCIsInN0b3AiLCJ3YXJuaW5nIiwibmV3TmFtZSIsInJlYWxPcmEiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ2tCLEdBQU8sQ0FBUCxNQUFPO0FBQ1AsR0FBTyxDQUFQLE1BQU87O0FBRUwsR0FBSyxDQUFMLElBQUs7QUFDSixHQUFXLENBQVgsU0FBVzs7Ozs7O0FBSWhDLEtBQUssQ0FBQ0EsQ0FBQyxPQUFHQyxNQUFLLFVBQUMsQ0FBMEI7QUFFMUMsS0FBSyxDQUFDQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEtBQUssSUFBSUYsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQWdCO0FBRTNGLEVBQUUsRUFBRUwsVUFBVSxFQUFFLENBQUM7SUFDZk0sT0FBTyxDQUFDQyxJQUFJLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLENBQTZGO0lBQ3BISCxPQUFPLENBQUNDLElBQUksQ0FBQ0MsTUFBSyxTQUFDQyxHQUFHLENBQUMsQ0FBNkQ7QUFDdEYsQ0FBQztBQUVNLEtBQUssQ0FBQ0MsT0FBTyxJQUFJQyxJQUFZLEdBQWMsQ0FBQztJQUNqRCxHQUFHLENBQUNDLE9BQU8sR0FBR0QsSUFBSTtJQUNsQixHQUFHLENBQUNFLFNBQVMsR0FBa0IsSUFBSTtJQUNuQyxLQUFLLENBQUNDLE1BQU0sT0FBVUQsU0FBUyxJQUFJLFNBQVMsRUFBRUwsTUFBSyxTQUFDTyxJQUFJLFFBQUlDLFNBQVEsVUFBQ0MsSUFBSSxDQUFDQyxHQUFHLEtBQUtMLFNBQVMsU0FBUyxJQUFJOztJQUN4RyxLQUFLLENBQUNNLElBQUksR0FBWSxDQUFDO1FBQ3JCQyxLQUFLLE1BQVEsQ0FBQztZQUNaUCxTQUFTLEdBQUdJLElBQUksQ0FBQ0MsR0FBRztZQUNwQnBCLENBQUMsQ0FBQyxDQUFrQixtQkFBRXFCLElBQUksQ0FBQ0UsSUFBSTtZQUMvQixNQUFNLENBQUNGLElBQUk7UUFDYixDQUFDO1FBQ0RHLElBQUksTUFBUSxDQUFDO1lBQ1h4QixDQUFDLENBQUNVLE1BQUssU0FBQ0MsR0FBRyxFQUFFLGdCQUFnQixFQUFFVSxJQUFJLENBQUNFLElBQUksS0FBS1AsTUFBTTtZQUNuRCxNQUFNLENBQUNLLElBQUk7UUFDYixDQUFDO1FBQ0RJLE9BQU8sTUFBUSxDQUFDO1lBQ2R6QixDQUFDLENBQUMsQ0FBb0IscUJBQUVxQixJQUFJLENBQUNFLElBQUksRUFBRVAsTUFBTTtZQUN6QyxNQUFNLENBQUNLLElBQUk7UUFDYixDQUFDO1FBQ0RLLElBQUksTUFBUSxDQUFDO1lBQ1gxQixDQUFDLENBQUMsQ0FBa0IsbUJBQUVxQixJQUFJLENBQUNFLElBQUksRUFBRVAsTUFBTTtZQUN2QyxNQUFNLENBQUNLLElBQUk7UUFDYixDQUFDO1FBQ0RaLElBQUksR0FBR2tCLE9BQWUsR0FBSyxDQUFDO1lBQzFCM0IsQ0FBQyxDQUFDLENBQWlCLGtCQUFFMkIsT0FBTyxFQUFFWCxNQUFNO1lBQ3BDLE1BQU0sQ0FBQ0ssSUFBSTtRQUNiLENBQUM7WUFDR0UsSUFBSSxJQUFHLENBQUM7WUFDVixNQUFNLENBQUNULE9BQU87UUFDaEIsQ0FBQztZQUNHUyxJQUFJLEVBQUNLLE9BQWUsQ0FBRSxDQUFDO1lBQ3pCNUIsQ0FBQyxDQUFDLENBQWtCLG1CQUFFYyxPQUFPLEVBQUUsQ0FBTyxRQUFFYyxPQUFPO1lBQy9DZCxPQUFPLEdBQUdjLE9BQU87UUFDbkIsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUNQLElBQUk7QUFDYixDQUFDO1FBbkNZVCxPQUFPLEdBQVBBLE9BQU87ZUFxQ0xWLFVBQVUsR0FBR1UsT0FBTyxHQUFHaUIsSUFBTyJ9