{
  "manifest": {
    "name": "better-sqlite3-helper",
    "version": "3.1.6",
    "description": "A wrapper library that eases the work with better-sqlite3 with some new functions and a migration-system",
    "main": "src/database.js",
    "scripts": {
      "test": "cross-env NODE_ENV=test ./node_modules/mocha/bin/_mocha --ui bdd --recursive ./test"
    },
    "author": {
      "name": "Markus Madeja"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Kauto/better-sqlite3-helper.git"
    },
    "homepage": "http://intergenies.com/programs/nodejs/better-sqlite3-helper",
    "license": "MIT",
    "keywords": [
      "sqlite3",
      "sqlite",
      "sql",
      "database",
      "save",
      "custom",
      "helper",
      "better-sqlite3"
    ],
    "dependencies": {
      "better-sqlite3": "^7.1.2",
      "mkdirp": "^1.0.4"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "cross-env": "^7.0.3",
      "eslint": "^8.1.0",
      "eslint-config-standard": "^16.0.2",
      "eslint-plugin-import": "^2.25.2",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-promise": "^5.1.1",
      "mocha": "^9.1.3"
    },
    "optionalDependencies": {
      "app-root-path": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-better-sqlite3-helper-3.1.6-ba433a22023558c73833926037af45fffdb2b9c1-integrity/node_modules/better-sqlite3-helper/package.json",
    "readmeFilename": "README.md",
    "readme": "# better-sqlite3-helper\n\nA nodejs wrapper library for the work with [better-sqlite3](https://www.npmjs.com/package/better-sqlite3/) (\"The fastest and simplest library for SQLite3 in Node.js\"). It's intended for simple server-apps for nodejs and offer some new functions and a migration-system.\n\n<a href='https://ko-fi.com/kautode' target='_blank'><img height='35' style='border:0px;height:46px;' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=0' border='0' alt='Buy Me a Coffee at ko-fi.com' />\n  \n## New in Version 3.0\n[better-sqlite3](https://www.npmjs.com/package/better-sqlite3/) Version 7 is now used. This means that the option \"memory\" is removed (use path `:memory:` instead - worked in version 2 too) and support for Node.js versions < 10 is dropped. For older node versions you can continue using version 2 of this library.\n\n## New in Version 2.0\nAll commands of better-sqlite3 Version 5 (like [function](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#functionname-options-function---this) and [backup](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#backupdestination-options---promise)) can now be used too. Commands for Version 4 are removed. In addition there is now a TypeScript Declaration File for this library.\n\n## How to install\n\nInstall it for example with\n\n```bash\nnpm i better-sqlite3-helper\n```\n\n## How to use\n\nIn every file you want access to a sqlite3 database simply require the library and use it right away.\n##### anyServerFile.js\n```js\nconst DB = require('better-sqlite3-helper');\n\nlet row = DB().queryFirstRow('SELECT * FROM users WHERE id=?', userId);\nconsole.log(row.firstName, row.lastName, row.email);\n```\n\nTo setup your database, create a `sql`-file named `001-init.sql` in a `migrations`-directory in the root-directory of your program.\n##### ~/migrations/001-init.sql\n```sql\n-- Up\nCREATE TABLE `users` (\n  id INTEGER PRIMARY KEY,\n  firstName TEXT NOT NULL,\n  lastName TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n\n-- Down\nDROP TABLE IF EXISTS `users`;\n```\nAnd that's it!\n\n## One global instance\nA normal, simple application is mostly working with only one database. To make the class management more easy, this library does the access-control for you - mainly as a singleton. (But you can create a new instance to access other databases.)\n\nThe database loads lazy. Only when it's used for the first time, the database is read from the file, the migration is started and the journal-mode WAL is set. The default directory of the database is `'./data/sqlite3.db'`.\n\nIf you want to change the default-values, you can do this by calling the library once in the beginning of your server-code and thus setting it up:\n##### index.js\n```js\nconst DB = require('better-sqlite3-helper');\n\n// The first call creates the global instance with your settings\nDB({\n  path: './data/sqlite3.db', // this is the default\n  readonly: false, // read only\n  fileMustExist: false, // throw error if database not exists\n  WAL: true, // automatically enable 'PRAGMA journal_mode = WAL'\n  migrate: {  // disable completely by setting `migrate: false`\n    force: false, // set to 'last' to automatically reapply the last migration-file\n    table: 'migration', // name of the database table that is used to keep track\n    migrationsPath: './migrations' // path of the migration-files\n  }\n})\n```\n\nAfter that you can use the library without parameter:\n##### anotherAPIFile.js\n```js\nconst DB = require('better-sqlite3-helper');\n\n// a second call directly returns the global instance\nlet row = DB().queryFirstRow('SELECT * FROM users WHERE id=?', userId);\nconsole.log(row.firstName, row.lastName, row.email);\n```\n\n## New Functions\nThis class implements shorthand methods for [better-sqlite3](https://www.npmjs.com/package/better-sqlite3/).\n\n```js\n// shorthand for db.prepare('SELECT * FROM users').all();\nlet allUsers = DB().query('SELECT * FROM users');\n// result: [{id: 1, firstName: 'a', lastName: 'b', email: 'foo@b.ar'},{},...]\n// result for no result: []\n\n// shorthand for db.prepare('SELECT * FROM users WHERE id=?').get(userId);\nlet row = DB().queryFirstRow('SELECT * FROM users WHERE id=?', userId);\n// result: {id: 1, firstName: 'a', lastName: 'b', email: 'foo@b.ar'}\n// result for no result: undefined\n\n// shorthand for db.prepare('SELECT * FROM users WHERE id=?').get(999) || {};\nlet {id, firstname} = DB().queryFirstRowObject('SELECT * FROM users WHERE id=?', userId);\n// result: id = 1; firstName = 'a'\n// result for no result: id = undefined; firstName = undefined\n\n// shorthand for db.prepare('SELECT * FROM users WHERE id=?').pluck(true).get(userId);\nlet email = DB().queryFirstCell('SELECT email FROM users WHERE id=?', userId);\n// result: 'foo@b.ar'\n// result for no result: undefined\n\n// shorthand for db.prepare('SELECT * FROM users').all().map(e => e.email);\nlet emails = DB().queryColumn('email', 'SELECT email FROM users');\n// result: ['foo@b.ar', 'foo2@b.ar', ...]\n// result for no result: []\n\n// shorthand for db.prepare('SELECT * FROM users').all().reduce((o, e) => {o[e.lastName] = e.email; return o;}, {});\nlet emailsByLastName = DB().queryKeyAndColumn('lastName', 'email', 'SELECT lastName, name FROM users');\n// result: {b: 'foo@b.ar', c: 'foo2@b.ar', ...}\n// result for no result: {}\n```\n\n## Insert, Update and Replace\n\nThere are shorthands for `update`, `insert`, `replace` and `delete`. They are intended to make programming of CRUD-Rest-API-functions easier. With a `blacklist` or a `whitelist` it's even possible to send a request's query (or body) directly into the database.\n\n### Update\n```js\n// const numberOfChangedRows = DB().update(table, data, where, whitelist = undefined)\n\n// simple use with a object as where and no whitelist\nDB().update('users', {\n  lastName: 'Mustermann',\n  firstName: 'Max'\n}, {\n  email: 'unknown@emailprovider.com'\n})\n\n// data from a request and a array as a where and only editing of lastName and firstName is allowed\nDB().update('users', req.body, ['email = ?', req.body.email], ['lastName', 'firstName'])\n\n\n// update with blacklist (id and email is not allowed; only valid columns of the table are allowed) and where is a shorthand for ['id = ?', req.body.id]\nDB().updateWithBlackList('users', req.body, req.body.id, ['id', 'email'])\n```\n\n### Insert and replace\n```js\n// const lastInsertID = DB().insert(table, datas, whitelist = undefined)\n// const lastInsertID = DB().replace(table, datas, whitelist = undefined)\n\n// simple use with an object and no whitelist\nDB().insert('users', {\n  lastName: 'Mustermann',\n  firstName: 'Max',\n  email: 'unknown@emailprovider.com'\n})\n\n// inserting two users\nDB().insert('users', [{\n  lastName: 'Mustermann',\n  firstName: 'Max',\n  email: 'unknown@emailprovider.com'\n}, {\n  lastName: 'Mustermann2',\n  firstName: 'Max2',\n  email: 'unknown2@emailprovider.com'\n}])\n\n// data from a request and only lastName and firstName are set\nDB().replace('users', req.body, ['lastName', 'firstName'])\n\n\n// replace with blacklist (id and email is not allowed; only valid columns of the table are allowed)\nDB().replaceWithBlackList('users', req.body, ['id', 'email']) // or insertWithBlackList\n```\n\n### Delete\n```js\n//delete the user with an id of 4\nDB().delete('users', {id: 4})\n```\n\n### Try and catch\n\nIf you want to put invalid values into the database, the functions will throw an error. So don't forget to surround the functions with a `try-catch`. Here is an example for an express-server:\n```js\nconst { Router } = require('express')\nconst bodyParser = require('body-parser')\nconst DB = require('better-sqlite3-helper')\n\nrouter.patch('/user/:id', bodyParser.json(), function (req, res, next) {\n  try {\n    if (!req.params.id) {\n      res.status(400).json({error: 'missing id'})\n      return\n    }\n    DB().updateWithBlackList(\n      'users',\n      req.body,\n      req.params.id,\n      ['id']\n    )\n\n    res.statusCode(200)\n  } catch (e) {\n    console.error(e)\n    res.status(503).json({error: e.message})\n  }\n})\n```\n\n\n\n## Migrations\n\nThe migration in this library mimics the migration system of the excellent [sqlite](https://www.npmjs.com/package/sqlite) by Kriasoft.\n\nTo use this feature you have to create a `migrations`-directory in your root. Inside you create `sql`-files that are separated in a up- and a down-part:\n\n##### `migrations/001-initial-schema.sql`\n\n```sql\n-- Up\nCREATE TABLE Category (id INTEGER PRIMARY KEY, name TEXT);\nCREATE TABLE Post (id INTEGER PRIMARY KEY, categoryId INTEGER, title TEXT,\n  CONSTRAINT Post_fk_categoryId FOREIGN KEY (categoryId)\n    REFERENCES Category (id) ON UPDATE CASCADE ON DELETE CASCADE);\nINSERT INTO Category (id, name) VALUES (1, 'Business');\nINSERT INTO Category (id, name) VALUES (2, 'Technology');\n\n-- Down\nDROP TABLE Category\nDROP TABLE Post;\n```\n\n##### `migrations/002-missing-index.sql`\n\n```sql\n-- Up\nCREATE INDEX Post_ix_categoryId ON Post (categoryId);\n\n-- Down\nDROP INDEX Post_ix_categoryId;\n```\n\nThe files need to be numbered. They are automatically executed before the first use of the database.\n\n**NOTE**: For the development environment, while working on the database schema, you may want to set\n`force: 'last'` (default `false`) that will force the migration API to rollback and re-apply the latest migration over again each time when Node.js app launches. See \"Global Instance\".\n\nYou can also give an array of changes.\n\n```js\nconst DB = require('better-sqlite3-helper')\n\nconst db = new DB({\n  migrate: {\n    migrations: [\n      `-- Up\n      CREATE TABLE Setting (\n        key TEXT NOT NULL UNIQUE,\n        value BLOB,\n        type INT NOT NULL DEFAULT 0,\n        PRIMARY KEY(key)\n      );\n      CREATE INDEX IF NOT EXISTS Setting_index_key ON Setting (key);\n\n      -- Down\n      DROP INDEX IF EXISTS Setting_index_key;\n      DROP TABLE IF EXISTS Setting;\n      `,\n      `-- Up\n      INSERT INTO Setting (key, value, type) VALUES ('test', 'now', 0);\n      INSERT INTO Setting (key, value, type) VALUES ('testtest', 'nownow', 6);\n\n      -- Down\n      DELETE FROM Setting WHERE key = 'test';\n      DELETE FROM Setting WHERE key = 'testtest';\n      `\n    ]\n  }\n})\n```\n\n## More Documentation of better-sqlite3\n\n- [API documentation](https://github.com/JoshuaWise/better-sqlite3/wiki/API)\n\n## License\n\n[MIT](https://github.com/Kauto/better-sqlite3-helper/blob/master/LICENSE)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Markus Madeja\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/better-sqlite3-helper/-/better-sqlite3-helper-3.1.6.tgz#ba433a22023558c73833926037af45fffdb2b9c1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/better-sqlite3-helper/-/better-sqlite3-helper-3.1.6.tgz",
    "hash": "ba433a22023558c73833926037af45fffdb2b9c1",
    "integrity": "sha512-b5sIIQ4Q8hXVoMCicAGp/ElG5NzfiIO9B2fecRs6QD0LEQ6P4oiqT7jkKWC11tQmTPsd032ABb1yRnDICAlchg==",
    "registry": "npm",
    "packageName": "better-sqlite3-helper",
    "cacheIntegrity": "sha512-b5sIIQ4Q8hXVoMCicAGp/ElG5NzfiIO9B2fecRs6QD0LEQ6P4oiqT7jkKWC11tQmTPsd032ABb1yRnDICAlchg== sha1-ukM6IgI1WMc4M5JgN69F//2yucE="
  },
  "registry": "npm",
  "hash": "ba433a22023558c73833926037af45fffdb2b9c1"
}