{
  "manifest": {
    "name": "copy-webpack-plugin",
    "version": "9.1.0",
    "description": "Copy files && directories with webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/copy-webpack-plugin.git"
    },
    "author": {
      "name": "Len Boyette"
    },
    "homepage": "https://github.com/webpack-contrib/copy-webpack-plugin",
    "bugs": {
      "url": "https://github.com/webpack-contrib/copy-webpack-plugin/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 12.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit --production",
      "lint:prettier": "prettier --list-different .",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "husky install && npm run build",
      "release": "standard-version"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^5.1.0"
    },
    "dependencies": {
      "fast-glob": "^3.2.7",
      "glob-parent": "^6.0.1",
      "globby": "^11.0.3",
      "normalize-path": "^3.0.0",
      "schema-utils": "^3.1.1",
      "serialize-javascript": "^6.0.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.14.8",
      "@babel/core": "^7.15.0",
      "@babel/preset-env": "^7.15.0",
      "@commitlint/cli": "^14.1.0",
      "@commitlint/config-conventional": "^14.1.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^27.0.6",
      "cross-env": "^7.0.3",
      "del": "^6.0.0",
      "del-cli": "^4.0.1",
      "eslint": "^8.2.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-import": "^2.24.0",
      "file-loader": "^6.2.0",
      "husky": "^7.0.1",
      "is-gzip": "^2.0.0",
      "jest": "^27.0.6",
      "lint-staged": "^11.1.2",
      "memfs": "^3.2.2",
      "mkdirp": "^1.0.4",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.3.2",
      "standard-version": "^9.3.1",
      "webpack": "^5.50.0"
    },
    "keywords": [
      "webpack",
      "plugin",
      "transfer",
      "move",
      "copy"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-copy-webpack-plugin-9.1.0-2d2c460c4c4695ec0a58afb2801a1205256c4e6b-integrity/node_modules/copy-webpack-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# copy-webpack-plugin\n\nCopies individual files or entire directories, which already exist, to the build directory.\n\n## Getting Started\n\nTo begin, you'll need to install `copy-webpack-plugin`:\n\n```console\nnpm install copy-webpack-plugin --save-dev\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require(\"copy-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: \"source\", to: \"dest\" },\n        { from: \"other\", to: \"public\" },\n      ],\n    }),\n  ],\n};\n```\n\n> ℹ️ `copy-webpack-plugin` is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.\n\n> ℹ️ If you want `webpack-dev-server` to write files to the output directory during development, you can force it with the [`writeToDisk`](https://github.com/webpack/webpack-dev-middleware#writetodisk) option or the [`write-file-webpack-plugin`](https://github.com/gajus/write-file-webpack-plugin).\n\n> ℹ️ You can get the original source filename from [Asset Objects](https://webpack.js.org/api/stats/#asset-objects).\n\n## Options\n\n|            Name             |           Type            | Description                              |\n| :-------------------------: | :-----------------------: | :--------------------------------------- |\n| **[`patterns`](#patterns)** | `{Array<String\\|Object>}` | Specify file related patterns for plugin |\n| **[`options`](#options-1)** |        `{Object}`         | Specify options for plugin               |\n\nThe plugin's signature:\n\n**webpack.config.js**\n\n```js\nconst CopyPlugin = require(\"copy-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: \"source\", to: \"dest\" },\n        { from: \"other\", to: \"public\" },\n      ],\n      options: {\n        concurrency: 100,\n      },\n    }),\n  ],\n};\n```\n\n### Patterns\n\n|                  Name                   |         Type         |                     Default                     | Description                                                                                                                                            |\n| :-------------------------------------: | :------------------: | :---------------------------------------------: | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n|             [`from`](#from)             |      `{String}`      |                   `undefined`                   | Glob or path from where we copy files.                                                                                                                 |\n|               [`to`](#to)               | `{String\\|Function}` |            `compiler.options.output`            | Output path.                                                                                                                                           |\n|          [`context`](#context)          |      `{String}`      | `options.context \\|\\| compiler.options.context` | A path that determines how to interpret the `from` path.                                                                                               |\n|      [`globOptions`](#globoptions)      |      `{Object}`      |                   `undefined`                   | [Options][glob-options] passed to the glob pattern matching library including `ignore` option.                                                         |\n|           [`filter`](#filter)           |     `{Function}`     |                   `undefined`                   | Allows to filter copied assets.                                                                                                                        |\n|           [`toType`](#totype)           |      `{String}`      |                   `undefined`                   | Determinate what is `to` option - directory, file or template.                                                                                         |\n|            [`force`](#force)            |     `{Boolean}`      |                     `false`                     | Overwrites files already in `compilation.assets` (usually added by other plugins/loaders).                                                             |\n|         [`priority`](#priority)         |      `{Number}`      |                       `0`                       | Allows you to specify the copy priority.                                                                                                               |\n|        [`transform`](#transform)        |      `{Object}`      |                   `undefined`                   | Allows to modify the file contents. Enable `transform` caching. You can use `{ transform: {cache: { key: 'my-cache-key' }} }` to invalidate the cache. |\n|     [`transformAll`](#transformAll)     |     `{Function}`     |                   `undefined`                   | Allows you to modify the contents of multiple files and save the result to one file.                                                                   |\n| [`noErrorOnMissing`](#noerroronmissing) |     `{Boolean}`      |                     `false`                     | Doesn't generate an error on missing file(s).                                                                                                          |\n|             [`info`](#info)             | `{Object\\|Function}` |                   `undefined`                   | Allows to add assets info.                                                                                                                             |\n\n#### `from`\n\nType: `String`\nDefault: `undefined`\n\nGlob or path from where we copy files.\nGlobs accept [fast-glob pattern-syntax](https://github.com/mrmlnc/fast-glob#pattern-syntax).\nGlob can only be a `string`.\n\n> ⚠️ Don't use directly `\\\\` in `from` option if it is a `glob` (i.e `path\\to\\file.ext`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        \"relative/path/to/dir\",\n        path.resolve(__dirname, \"src\", \"file.ext\"),\n        path.resolve(__dirname, \"src\", \"dir\"),\n        \"**/*\",\n        {\n          from: \"**/*\",\n        },\n        // If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`\n        path.posix.join(\n          path.resolve(__dirname, \"src\").replace(/\\\\/g, \"/\"),\n          \"*.txt\"\n        ),\n      ],\n    }),\n  ],\n};\n```\n\n##### `For windows`\n\nIf you define `from` as absolute file path or absolute folder path on `Windows`, you can use windows path segment (`\\\\`)\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"file.txt\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nBut you should always use forward-slashes in `glob` expressions\nSee [fast-glob manual](https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows).\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          // If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`\n          from: path.posix.join(\n            path.resolve(__dirname, \"fixtures\").replace(/\\\\/g, \"/\"),\n            \"*.txt\"\n          ),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nThe `context` behaves differently depending on what the `from` is (`glob`, `file` or `dir`).\nMore [`examples`](#examples)\n\n#### `to`\n\nType: `String|Function`\nDefault: `compiler.options.output`\n\n##### String\n\nOutput path.\n\n> ⚠️ Don't use directly `\\\\` in `to` (i.e `path\\to\\dest`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          to: \"relative/path/to/dest/\",\n        },\n        {\n          from: \"**/*\",\n          to: \"/absolute/path/to/dest/\",\n        },\n        {\n          from: \"**/*\",\n          to: \"[path][name].[contenthash][ext]\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### Function\n\nAllows to modify the writing path.\n\n> ⚠️ Don't return directly `\\\\` in `to` (i.e `path\\to\\newFile`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to({ context, absoluteFilename }) {\n            return \"dest/newPath/[name][ext]\";\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to({ context, absoluteFilename }) {\n            return Promise.resolve(\"dest/newPath/[name][ext]\");\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `context`\n\nType: `String`\nDefault: `options.context|compiler.options.context`\n\nA path that determines how to interpret the `from` path.\n\n> ⚠️ Don't use directly `\\\\` in `context` (i.e `path\\to\\context`) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.\n> On Windows, the forward slash and the backward slash are both separators.\n> Instead please use `/` or `path` methods.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.txt\",\n          to: \"dest/\",\n          context: \"app/\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nThe `context` option can be an absolute or relative path. If `context` is a relative, then it is converted to absolute based to `compiler.options.context`\n\nAlso, `context` indicates how to interpret the search results. Further, he is considered in this role.\n\nTo determine the structure from which the found resources will be copied to the destination folder, the `context` option is used.\n\nIf `from` is a file, then `context` is equal to the directory in which this file is located. Accordingly, the result will be only the file name.\n\nIf `from` is a directory, then `context` is the same as `from` and is equal to the directory itself. In this case, the result will be a hierarchical structure of the found folders and files relative to the specified directory.\n\nIf `from` is a glob, then regardless of the `context` option, the result will be the structure specified in the `from` option\n\nMore [`examples`](#examples)\n\n#### `globOptions`\n\nType: `Object`\nDefault: `undefined`\n\nAllows to configure the glob pattern matching library used by the plugin. [See the list of supported options][glob-options]\nTo exclude files from the selection, you should use [globOptions.ignore option](https://github.com/mrmlnc/fast-glob#ignore)\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"public/**/*\",\n          globOptions: {\n            dot: true,\n            gitignore: true,\n            ignore: [\"**/file.*\", \"**/ignored-directory/**\"],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `filter`\n\nType: `Function`\nDefault: `undefined`\n\n> ℹ️ To ignore files by path please use the [`globOptions.ignore`](#globoptions) option.\n\n**webpack.config.js**\n\n```js\nconst fs = require(\"fs\").promise;\n\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"public/**/*\",\n          filter: async (resourcePath) => {\n            const data = await fs.promises.readFile(resourcePath);\n            const content = data.toString();\n\n            if (content === \"my-custom-content\") {\n              return false;\n            }\n\n            return true;\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `toType`\n\nType: `String`\nDefault: `undefined`\n\nDeterminate what is `to` option - directory, file or template.\nSometimes it is hard to say what is `to`, example `path/to/dir-with.ext`.\nIf you want to copy files in directory you need use `dir` option.\nWe try to automatically determine the `type` so you most likely do not need this option.\n\n|             Name              |    Type    |   Default   | Description                                                                                          |\n| :---------------------------: | :--------: | :---------: | :--------------------------------------------------------------------------------------------------- |\n|      **[`'dir'`](#dir)**      | `{String}` | `undefined` | If `to` has no extension or ends on `'/'`                                                            |\n|     **[`'file'`](#file)**     | `{String}` | `undefined` | If `to` is not a directory and is not a template                                                     |\n| **[`'template'`](#template)** | `{String}` | `undefined` | If `to` contains [a template pattern](https://webpack.js.org/configuration/output/#template-strings) |\n\n##### `'dir'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"path/to/file.txt\",\n          to: \"directory/with/extension.ext\",\n          toType: \"dir\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `'file'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"path/to/file.txt\",\n          to: \"file/without/extension\",\n          toType: \"file\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `'template'`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/\",\n          to: \"dest/[name].[contenthash][ext]\",\n          toType: \"template\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `force`\n\nType: `Boolean`\nDefault: `false`\n\nOverwrites files already in `compilation.assets` (usually added by other plugins/loaders).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*\",\n          to: \"dest/\",\n          force: true,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `priority`\n\nType: `Number`\nDefault: `0`\n\nAllows to specify the priority of copying files with the same destination name.\nFiles for patterns with higher priority will be copied later.\nTo overwrite files, the [`force`](#force) option must be enabled.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        // Copied second and will overwrite \"dir_2/file.txt\"\n        {\n          from: \"dir_1/file.txt\",\n          to: \"newfile.txt\",\n          force: true,\n          priority: 10,\n        },\n        // Copied first\n        {\n          from: \"dir_2/file.txt\",\n          to: \"newfile.txt\",\n          priority: 5,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `transform`\n\nType: `Function|Object`\nDefault: `undefined`\n\nAllows to modify the file contents.\n\n##### `Function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          // The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n          // The `absoluteFrom` argument is a `String`, it is absolute path from where the file is being copied\n          transform(content, absoluteFrom) {\n            return optimize(content);\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `Object`\n\n|               Name                |        Type         |   Default   | Description                                                                                                      |\n| :-------------------------------: | :-----------------: | :---------: | :--------------------------------------------------------------------------------------------------------------- |\n| **[`transformer`](#transformer)** |    `{Function}`     | `undefined` | Allows to modify the file contents.                                                                              |\n|       **[`cache`](#cache)**       | `{Boolean\\|Object}` |   `false`   | Enable `transform` caching. You can use `transform: { cache: { key: 'my-cache-key' } }` to invalidate the cache. |\n\n###### `transformer`\n\nType: `Function`\nDefault: `undefined`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          // The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n          // The `absoluteFrom` argument is a `String`, it is absolute path from where the file is being copied\n          transform: {\n            transformer(content, absoluteFrom) {\n              return optimize(content);\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return Promise.resolve(optimize(content));\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n###### `cache`\n\nType: `Boolean|Object`\nDefault: `false`\n\n**webpack.config.js**\n\nEnable/disable and configure caching.\nDefault path to cache directory: `node_modules/.cache/copy-webpack-plugin`.\n\n###### `Boolean`\n\nEnables/Disable `transform` caching.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: true,\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `Object`\n\nEnables `transform` caching and setup cache directory and invalidation keys.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: {\n                // May be useful for invalidating cache based on external values\n                // For example, you can invalid cache based on `process.version` - { node: process.version }\n                key: \"value\",\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\nYou can setup invalidation keys using a function.\n\nSimple function:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: (defaultCacheKeys, absoluteFrom) => {\n                const keys = getCustomCacheInvalidationKeysSync();\n\n                return {\n                  ...defaultCacheKeys,\n                  keys,\n                };\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\nAsync function:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/*.png\",\n          to: \"dest/\",\n          transform: {\n            transformer(content, path) {\n              return optimize(content);\n            },\n            cache: {\n              directory: path.resolve(__dirname, \"cache-directory\"),\n              keys: async (defaultCacheKeys, absoluteFrom) => {\n                const keys = await getCustomCacheInvalidationKeysAsync();\n\n                return {\n                  ...defaultCacheKeys,\n                  keys,\n                };\n              },\n            },\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `transformAll`\n\nType: `Function`\nDefault: `undefined`\n\nAllows you to modify the contents of multiple files and save the result to one file.\n\n> ℹ️ The `to` option must be specified and point to a file. It is allowed to use only `[contenthash]` and `[fullhash]` template strings.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*.txt\",\n          to: \"dest/file.txt\",\n          // The `assets` argument is an assets array for the pattern.from (\"src/**/*.txt\")\n          transformAll(assets) {\n            const result = assets.reduce((accumulator, asset) => {\n              // The asset content can be obtained from `asset.source` using `source` method.\n              // The asset content is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`\n              const content = asset.data;\n\n              accumulator = `${accumulator}${content}\\n`;\n              return accumulator;\n            }, \"\");\n\n            return result;\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n### `noErrorOnMissing`\n\nType: `Boolean`\nDefault: `false`\n\nDoesn't generate an error on missing file(s).\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"missing-file.txt\"),\n          noErrorOnMissing: true,\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### `info`\n\nType: `Object|Function<Object>`\nDefault: `undefined`\n\nAllows to add assets info.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: { minimized: true },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: (file) => ({ minimized: true }),\n        },\n      ],\n    }),\n  ],\n};\n```\n\n### Options\n\n|             Name              |    Type    | Default | Description                                      |\n| :---------------------------: | :--------: | :-----: | :----------------------------------------------- |\n| [`concurrency`](#concurrency) | `{Number}` |  `100`  | Limits the number of simultaneous requests to fs |\n\n#### `concurrency`\n\nlimits the number of simultaneous requests to fs\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [...patterns],\n      options: { concurrency: 50 },\n    }),\n  ],\n};\n```\n\n### Examples\n\n#### Different variants `from` (`glob`, `file` or `dir`).\n\nTake for example the following file structure:\n\n```\nsrc/directory-nested/deep-nested/deepnested-file.txt\nsrc/directory-nested/nested-file.txt\n```\n\n##### From is a Glob\n\nEverything that you specify in `from` will be included in the result:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/directory-nested/**/*\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nsrc/directory-nested/deep-nested/deepnested-file.txt,\nsrc/directory-nested/nested-file.txt\n```\n\nIf you want only content `src/directory-nested/`, you should only indicate `glob` in `from`. The path to the folder in which the search should take place, should be moved to `context`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\n##### From is a Dir\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\nTechnically, this is `**/*` with a predefined context equal to the specified directory.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"**/*\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\ndeep-nested/deepnested-file.txt,\nnested-file.txt\n```\n\n##### From is a File\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(\n            __dirname,\n            \"src\",\n            \"directory-nested\",\n            \"nested-file.txt\"\n          ),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nnested-file.txt\n```\n\nTechnically, this is a filename with a predefined context equal to `path.dirname(pathToFile)`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"nested-file.txt\",\n          context: path.resolve(__dirname, \"src\", \"directory-nested\"),\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nnested-file.txt\n```\n\n#### Ignoring files\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.posix.join(\n            path.resolve(__dirname, \"src\").replace(/\\\\/g, \"/\"),\n            \"**/*\"\n          ),\n          globOptions: {\n            ignore: [\n              // Ignore all `txt` files\n              \"**/*.txt\",\n              // Ignore all files in all subdirectories\n              \"**/subdir/**\",\n            ],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n#### Flatten copy\n\nRemoves all directory references and only copies file names.\n\n> ⚠️ If files have the same name, the result is non-deterministic.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: \"src/**/*\",\n          to: \"[name][ext]\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\nfile-1.txt\nfile-2.txt\nnested-file.txt\n```\n\n#### Copy in new directory\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          // When copying files starting with a dot, must specify the toType option\n          // toType: \"file\",\n          to({ context, absoluteFilename }) {\n            return `newdirectory/${path.relative(context, absoluteFilename)}`;\n          },\n          from: \"directory\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\nResult:\n\n```txt\n\"newdirectory/file-1.txt\",\n\"newdirectory/nestedfile.txt\",\n\"newdirectory/nested/deep-nested/deepnested.txt\",\n\"newdirectory/nested/nestedfile.txt\",\n```\n\n#### Skip running JavaScript files through a minimizer\n\nUseful if you need to simply copy `*.js` files to destination \"as is\" without evaluating and minimizing them using Terser.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        \"relative/path/to/file.ext\",\n        {\n          from: \"**/*\",\n          // Terser skip this file for minimization\n          info: { minimized: true },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n##### `yarn workspaces` and `monorepos`\n\nWhen using `yarn workspaces` or` monorepos`, relative copy paths from node_modules can be broken due to the way packages are hoisting.\nTo avoid this, should explicitly specify where to copy the files from using `require.resolve`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        {\n          from: `${path.dirname(\n            require.resolve(`${moduleName}/package.json`)\n          )}/target`,\n          to: \"target\",\n        },\n      ],\n    }),\n  ],\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/copy-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/copy-webpack-plugin\n[node]: https://img.shields.io/node/v/copy-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/copy-webpack-plugin\n[tests]: https://github.com/webpack-contrib/copy-webpack-plugin/workflows/copy-webpack-plugin/badge.svg\n[tests-url]: https://github.com/webpack-contrib/copy-webpack-plugin/actions\n[cover]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/copy-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=copy-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=copy-webpack-plugin\n[glob-options]: https://github.com/sindresorhus/globby#options\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/copy-webpack-plugin/-/copy-webpack-plugin-9.1.0.tgz#2d2c460c4c4695ec0a58afb2801a1205256c4e6b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/copy-webpack-plugin/-/copy-webpack-plugin-9.1.0.tgz",
    "hash": "2d2c460c4c4695ec0a58afb2801a1205256c4e6b",
    "integrity": "sha512-rxnR7PaGigJzhqETHGmAcxKnLZSR5u1Y3/bcIv/1FnqXedcL/E2ewK7ZCNrArJKCiSv8yVXhTqetJh8inDvfsA==",
    "registry": "npm",
    "packageName": "copy-webpack-plugin",
    "cacheIntegrity": "sha512-rxnR7PaGigJzhqETHGmAcxKnLZSR5u1Y3/bcIv/1FnqXedcL/E2ewK7ZCNrArJKCiSv8yVXhTqetJh8inDvfsA== sha1-LSxGDExGlewKWK+ygBoSBSVsTms="
  },
  "registry": "npm",
  "hash": "2d2c460c4c4695ec0a58afb2801a1205256c4e6b"
}