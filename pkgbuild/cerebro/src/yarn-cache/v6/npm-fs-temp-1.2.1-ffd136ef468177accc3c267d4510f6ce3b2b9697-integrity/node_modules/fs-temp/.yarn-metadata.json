{
  "manifest": {
    "name": "fs-temp",
    "version": "1.2.1",
    "license": "MIT",
    "author": {
      "name": "Linus Unnebäck",
      "email": "linus@folkdatorn.se"
    },
    "main": "index.js",
    "files": [
      "index.d.ts",
      "index.js",
      "promise.d.ts",
      "promise.js",
      "lib/"
    ],
    "devDependencies": {
      "mocha": "^2.2.5",
      "standard": "^5.1.0"
    },
    "scripts": {
      "test": "standard && mocha"
    },
    "repository": {
      "type": "git",
      "url": "http://github.com/LinusU/fs-temp.git"
    },
    "dependencies": {
      "random-path": "^0.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-fs-temp-1.2.1-ffd136ef468177accc3c267d4510f6ce3b2b9697-integrity/node_modules/fs-temp/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# fs-temp\n\n`fs-temp` is a quick and simple way to create temporary files and directories.\n\nWhy another one? I know that there are already libraries doing similar things,\nbut I felt that their implementation was unnecessary complicated. I also wanted\na quick way to turn a buffer into a file.\n\n## Installation\n\n```sh\nnpm install --save fs-temp\n```\n\n## Usage\n\n```js\nvar temp = require('fs-temp')\n\nvar data = new Buffer('testing 1 2 3')\nvar path = temp.writeFileSync(data)\n\n// `path` now holds the path to a file with the specified `data`\n```\n\n```js\nvar temp = require('fs-temp')\n\nvar path = temp.template('linusu-%s').mkdirSync()\n\n// `path` now holds the path to a directory with the prefix 'linusu-'\n```\n\n## Promise support\n\nIf you require `fs-temp/promise` you'll receive an alternative API where all\nfunctions that takes callbacks are replaced by `Promise`-returning functions.\n\n```js\nvar temp = require('fs-temp/promise')\n\nvar data = new Buffer('testing 1 2 3')\n\ntemp.writeFile(data).then(path => {\n  // `path` now holds the path to a file with the specified `data`\n})\n```\n\n## API\n\nThe api mimics the one provided by `fs` very closely.\n\n### `.open(flags[, mode], callback)`\n\nAsynchronous file open.\n\n`flags` is either `'w'` (only writing) or `'w+'` (writing and reading).\n\nThe callback gets two arguments `(err, obj)`. `obj` has `fd` and `path`.\n\n### `.openSync(flags[, mode])`\n\nSynchronous version of `.open()`, returns `obj` with `fd` and `path`.\n\n### `.mkdir([mode, ]callback)`\n\nCreates an empty directory.\n\nThe callback gets two arguments `(err, path)`.\n\n### `.mkdirSync([mode])`\n\nSynchronous version of `.mkdir()`, returns `path`.\n\n### `.writeFile(data[, encoding], callback)`\n\nAsynchronously writes data to a file. `data` can be a string or a buffer. The\n`encoding` argument is ignored if `data` is a buffer. It defaults to `'utf8'`.\n\nThe callback gets two arguments `(err, path)`.\n\n### `.writeFileSync(data[, encoding])`\n\nSynchronous version of `.writeFileSync()`, returns `path`.\n\n### `.createWriteStream([options])`\n\nCreates and returns a `fs.WriteStream` that will write it's content to a\ntemporary file. It differs from the standard `WriteStream` in the following\nways.\n\n - An event named `path` will be emitted with the path to the file before the\n   `open` event is emitted.\n - The property `path` will be `null` until the `path` event is emitted.\n\n### `.template(template)`\n\nReturns a copy of the module that uses the specified `template` when generating\nfile names. `template` should be a string where `%s` will be replaced with some\nrandom characters (e.g. `'linusu-%s'`).\n\nThe string should contain `%s` exactly once. If you want to include a literal\npercent sign, escape it with another one, e.g. `'%%string'` becomes `'%string'`.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Linus Unnebäck\n",
    "description": "`fs-temp` is a quick and simple way to create temporary files and directories.",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Linus Unnebäck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fs-temp/-/fs-temp-1.2.1.tgz#ffd136ef468177accc3c267d4510f6ce3b2b9697",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fs-temp/-/fs-temp-1.2.1.tgz",
    "hash": "ffd136ef468177accc3c267d4510f6ce3b2b9697",
    "integrity": "sha512-okTwLB7/Qsq82G6iN5zZJFsOfZtx2/pqrA7Hk/9fvy+c+eJS9CvgGXT2uNxwnI14BDY9L/jQPkaBgSvlKfSW9w==",
    "registry": "npm",
    "packageName": "fs-temp",
    "cacheIntegrity": "sha512-okTwLB7/Qsq82G6iN5zZJFsOfZtx2/pqrA7Hk/9fvy+c+eJS9CvgGXT2uNxwnI14BDY9L/jQPkaBgSvlKfSW9w== sha1-/9E270aBd6zMPCZ9RRD2zjsrlpc="
  },
  "registry": "npm",
  "hash": "ffd136ef468177accc3c267d4510f6ce3b2b9697"
}