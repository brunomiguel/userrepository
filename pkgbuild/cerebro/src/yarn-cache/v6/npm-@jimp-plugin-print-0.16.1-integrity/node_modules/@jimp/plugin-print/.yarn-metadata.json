{
  "manifest": {
    "name": "@jimp/plugin-print",
    "version": "0.16.1",
    "description": "print an image.",
    "main": "dist/index.js",
    "module": "es/index.js",
    "types": "index.d.ts",
    "scripts": {
      "test": "cross-env BABEL_ENV=test mocha --require @babel/register",
      "test:watch": "npm run test -- --reporter min --watch",
      "test:coverage": "nyc npm run test",
      "build": "npm run build:node:production && npm run build:module",
      "build:watch": "npm run build:node:debug -- -- --watch --verbose",
      "build:debug": "npm run build:node:debug",
      "build:module": "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
      "build:node": "babel src -d dist --source-maps --config-file ../../babel.config.js",
      "build:node:debug": "cross-env BABEL_ENV=development npm run build:node",
      "build:node:production": "cross-env BABEL_ENV=production npm run build:node"
    },
    "author": {},
    "license": "MIT",
    "dependencies": {
      "@babel/runtime": "^7.7.2",
      "@jimp/utils": "^0.16.1",
      "load-bmfont": "^1.4.0"
    },
    "peerDependencies": {
      "@jimp/custom": ">=0.3.5",
      "@jimp/plugin-blit": ">=0.3.5"
    },
    "devDependencies": {
      "@jimp/custom": "^0.16.1",
      "@jimp/plugin-blit": "^0.16.1",
      "@jimp/test-utils": "^0.16.1"
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "909f06eac36ef5ba36ebb1e0853fd006c4da3560",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@jimp-plugin-print-0.16.1-integrity/node_modules/@jimp/plugin-print/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/plugin-print</h1>\n  <p>Print text on an image.</p>\n</div>\n\nJimp supports basic typography using BMFont format (.fnt) even ones in different languages! Just find a bitmap font that is suitable [bitmap fonts](https://en.wikipedia.org/wiki/Bitmap_fonts).\n\nOnline tools are also available to convert TTF fonts to BMFont format. They can be used to create color font or sprite packs.\n\n\n:star: [ttf2fnt](https://ttf2fnt.com/)\n\n:star: [Littera](http://kvazars.com/littera/)\n\n:star: [Hiero](https://github.com/libgdx/libgdx/wiki/Hiero)\n\n## Included Fonts\n\n- `Jimp.FONT_SANS_8_BLACK`\n- `Jimp.FONT_SANS_10_BLACK`\n- `Jimp.FONT_SANS_12_BLACK`\n- `Jimp.FONT_SANS_14_BLACK`\n- `Jimp.FONT_SANS_16_BLACK`\n- `Jimp.FONT_SANS_32_BLACK`\n- `Jimp.FONT_SANS_64_BLACK`\n- `Jimp.FONT_SANS_128_BLACK`\n- `Jimp.FONT_SANS_8_WHITE`\n- `Jimp.FONT_SANS_16_WHITE`\n- `Jimp.FONT_SANS_32_WHITE`\n- `Jimp.FONT_SANS_64_WHITE`\n- `Jimp.FONT_SANS_128_WHITE`\n\n## loadFont\n\nLoads a bitmap font from a file\n\n- @param {string} file the file path of a .fnt file\n- @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n- @returns {Promise} a promise\n\n```js\nimport Jimp from 'jimp';\n\nasync function main() {\n  const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);\n}\n\nmain();\n```\n\n## print\n\nDraws a text on a image on a given boundary\n\n- @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n- @param {number} x the x position to start drawing the text\n- @param {number} y the y position to start drawing the text\n- @param {string} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n- @param {number} maxWidth (optional) the boundary width to draw in\n- @param {number} maxHeight (optional) the boundary height to draw in - @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n\n```js\nimport Jimp from 'jimp';\n\nasync function main() {\n  const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);\n  const image = await Jimp.read(1000, 1000, 0x0000ffff);\n\n  image.print(font, 10, 10, 'Hello World!');\n}\n\nmain();\n```\n\n### Alignment\n\nAlignment modes are supported by replacing the `str` argument with an object containing `text`, `alignmentX` and `alignmentY`. `alignmentX` defaults to `Jimp.HORIZONTAL_ALIGN_LEFT` and `alignmentY` defaults to `Jimp.VERTICAL_ALIGN_TOP`.\n\nYou can align text using the following constants.\n\n```js\nJimp.HORIZONTAL_ALIGN_LEFT;\nJimp.HORIZONTAL_ALIGN_CENTER;\nJimp.HORIZONTAL_ALIGN_RIGHT;\n\nJimp.VERTICAL_ALIGN_TOP;\nJimp.VERTICAL_ALIGN_MIDDLE;\nJimp.VERTICAL_ALIGN_BOTTOM;\n```\n\nDefault align modes for `image.print` are:\n\n```js\n{\n    alignmentX: Jimp.HORIZONTAL_ALIGN_LEFT,\n    alignmentY: Jimp.VERTICAL_ALIGN_TOP\n}\n```\n\n```js\nconst font = await Jimp.loadFont(pathOrURL);\n\n// prints 'Hello world!' on an image, middle and center-aligned\nimage.print(\n  font,\n  x,\n  y,\n  {\n    text: 'Hello world!',\n    alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n    alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE\n  },\n  maxWidth,\n  maxHeight\n);\n```\n__Note__: although `maxWidth` and `maxHeight` parameters are optional to `print()`, they are needed to correctly align the text using the requested alignment mode.\n\n\n#### Staggering Text\n\nIf you need to stagger text position along the x or y-axis the print method also returns the final coordinates as an argument to the callback.\n\n```js\nconst font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);\n\nimage.print(\n  font,\n  10,\n  10,\n  'Hello world that wraps!',\n  50,\n  (err, image, { x, y }) => {\n    image.print(font, x, y + 20, 'More text on another line', 50);\n  }\n);\n```\n\n## measureText\n\nMeasure how wide a piece of text will be.\n\n```js\nimport Jimp from 'jimp';\n\nasync function main() {\n  const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);\n  const image = await Jimp.read(1000, 1000, 0x0000ffff);\n\n  Jimp.measureText(font, 'Hello World!');\n}\n\nmain();\n```\n\n## measureTextHeight\n\nMeasure how tall a piece of text will be.\n\n```js\nimport Jimp from 'jimp';\n\nasync function main() {\n  const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);\n  const image = await Jimp.read(1000, 1000, 0x0000ffff);\n\n  Jimp.measureTextHeight(font, 'Hello World!', 100);\n}\n\nmain();\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Oliver Moran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@jimp/plugin-print/-/plugin-print-0.16.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@jimp/plugin-print/-/plugin-print-0.16.1.tgz",
    "hash": "",
    "integrity": "sha512-ceWgYN40jbN4cWRxixym+csyVymvrryuKBQ+zoIvN5iE6OyS+2d7Mn4zlNgumSczb9GGyZZESIgVcBDA1ezq0Q==",
    "registry": "npm",
    "packageName": "@jimp/plugin-print",
    "cacheIntegrity": "sha512-ceWgYN40jbN4cWRxixym+csyVymvrryuKBQ+zoIvN5iE6OyS+2d7Mn4zlNgumSczb9GGyZZESIgVcBDA1ezq0Q== sha1-ZrgDVj+dEJgllwcURm5qua5jn/Y="
  },
  "registry": "npm",
  "hash": "71e5a060de348db3787164718b1ca6f9cb325729afaebcae28143ece822f379884e8ec92fb677b327e3394d82e9927336fd186c996444888157010c0d5ecead1"
}