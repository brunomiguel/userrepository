"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convert = void 0;
const sharp_1 = __importDefault(require("sharp"));
const ico_1 = require("@fiahfy/ico");
const convertFromBuffer = async (buffer) => {
    const image = sharp_1.default(buffer);
    const { width, height } = await image.metadata();
    if (!width || !height || width !== height) {
        throw new TypeError('Image should be squre');
    }
    if (width < 256 || height < 256) {
        console.warn('Warning: Image should be 256x256 pixels or more');
    }
    const ico = new ico_1.Ico();
    for (const size of ico_1.Ico.supportedIconSizes) {
        const cloned = image.clone().resize(size, size);
        const buf = await cloned.png().toBuffer();
        ico.append(ico_1.IcoImage.fromPNG(buf));
    }
    return ico.data;
};
const convertFromBuffers = async (buffers) => {
    const ico = new ico_1.Ico();
    const sizes = [];
    for (const buffer of buffers) {
        const image = sharp_1.default(buffer);
        const { width, height } = await image.metadata();
        if (!width || !height || width !== height) {
            throw new TypeError('Image should be squre');
        }
        const size = width;
        if (!ico_1.Ico.supportedIconSizes.includes(size)) {
            throw new TypeError(`Warning: No supported pixels (${size}x${size})`);
        }
        sizes.push(size);
        const buf = await image.png().toBuffer();
        ico.append(ico_1.IcoImage.fromPNG(buf));
    }
    if (!sizes.length) {
        throw new TypeError('No valid images');
    }
    const missingSizes = ico_1.Ico.supportedIconSizes.filter((size) => !sizes.includes(size));
    if (missingSizes.length) {
        const pixels = missingSizes.map((size) => `${size}x${size}`).join(', ');
        console.warn(`Warning: Missing pixels (${pixels})`);
    }
    return ico.data;
};
const convert = async (buffer) => {
    if (Buffer.isBuffer(buffer)) {
        return convertFromBuffer(buffer);
    }
    else if (Array.isArray(buffer)) {
        return convertFromBuffers(buffer);
    }
    else {
        throw new TypeError('Image must be Buffer or Buffer Array');
    }
};
exports.convert = convert;
