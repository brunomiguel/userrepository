#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const meow_1 = __importDefault(require("meow"));
const _1 = require(".");
const main = async () => {
    const cli = meow_1.default(`
	Usage: ico-convert [options] <source> [target]

	Options:
    -v, --version  output the version number
    -h, --help     output usage information

	Examples:
    $ ico-convert icon.png
    $ ico-convert icon.png icon.ico
    $ ico-convert icons/
    $ ico-convert icons/ icon.ico
`, {
        flags: {
            help: {
                type: 'boolean',
                alias: 'h',
            },
            version: {
                type: 'boolean',
                alias: 'v',
            },
        },
    });
    if (cli.flags.version) {
        return cli.showVersion();
    }
    if (cli.flags.help) {
        return cli.showHelp();
    }
    const source = cli.input[0];
    let target = cli.input[1];
    if (!source) {
        return cli.showHelp();
    }
    if (!target) {
        const parsed = path_1.default.parse(source);
        parsed.base = '';
        parsed.ext = '.ico';
        target = path_1.default.format(parsed);
    }
    const stat = fs_1.default.statSync(source);
    let buf;
    if (stat.isDirectory()) {
        buf = fs_1.default.readdirSync(source).map((filename) => {
            return fs_1.default.readFileSync(path_1.default.join(source, filename));
        });
    }
    else {
        buf = fs_1.default.readFileSync(source);
    }
    const data = await _1.convert(buf);
    fs_1.default.writeFileSync(target, data);
    console.log(`Output ${path_1.default.resolve(target)}`);
};
main().catch((e) => {
    console.error(e);
});
