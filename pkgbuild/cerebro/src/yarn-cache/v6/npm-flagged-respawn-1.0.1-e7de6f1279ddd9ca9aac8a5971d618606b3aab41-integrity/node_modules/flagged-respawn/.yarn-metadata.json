{
  "manifest": {
    "name": "flagged-respawn",
    "version": "1.0.1",
    "description": "A tool for respawning node binaries when special flags are present.",
    "author": {
      "name": "Gulp Team",
      "email": "team@gulpjs.com",
      "url": "http://gulpjs.com/"
    },
    "contributors": [
      {
        "name": "Takayuki Sato",
        "email": "sttk.xslet@gmail.com"
      },
      {
        "name": "Bertrand Marron",
        "email": "bertrand.marron@ionisx.com"
      },
      {
        "name": "Tyler Kellen",
        "email": "tyler@sleekcode.net"
      },
      {
        "name": "Blaine Bublitz",
        "email": "blaine.bublitz@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/gulpjs/flagged-respawn.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 0.10"
    },
    "main": "index.js",
    "files": [
      "index.js",
      "lib/",
      "LICENSE"
    ],
    "scripts": {
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "mocha --async-only",
      "cover": "nyc --reporter=lcov --reporter=text-summary npm test",
      "coveralls": "npm run cover && istanbul-coveralls",
      "respawn": "node test/bin/respawner --harmony test",
      "nospawn": "node test/bin/respawner test"
    },
    "dependencies": {},
    "devDependencies": {
      "eslint": "^2.13.0",
      "eslint-config-gulp": "^3.0.1",
      "expect": "^1.20.2",
      "istanbul": "^0.4.3",
      "istanbul-coveralls": "^1.0.3",
      "mocha": "^3.5.3",
      "nyc": "^11.3.0",
      "v8flags": "^3.0.1"
    },
    "keywords": [
      "respawn",
      "flags"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-flagged-respawn-1.0.1-e7de6f1279ddd9ca9aac8a5971d618606b3aab41-integrity/node_modules/flagged-respawn/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# flagged-respawn\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nA tool for respawning node binaries when special flags are present.\n\n## What is it?\n\nSay you wrote a command line tool that runs arbitrary javascript (e.g. task runner, test framework, etc). For the sake of discussion, let's pretend it's a testing harness you've named `testify`.\n\nEverything is going splendidly until one day you decide to test some code that relies on a feature behind a v8 flag in node (`--harmony`, for example).  Without much thought, you run `testify --harmony spec tests.js`.\n\nIt doesn't work. After digging around for a bit, you realize this produces a [`process.argv`](http://nodejs.org/docs/latest/api/process.html#process_process_argv) of:\n\n`['node', '/usr/local/bin/test', '--harmony', 'spec', 'tests.js']`\n\nCrap. The `--harmony` flag is in the wrong place! It should be applied to the **node** command, not our binary. What we actually wanted was this:\n\n`['node', '--harmony', '/usr/local/bin/test', 'spec', 'tests.js']`\n\nFlagged-respawn fixes this problem and handles all the edge cases respawning creates, such as:\n- Providing a method to determine if a respawn is needed.\n- Piping stderr/stdout from the child into the parent.\n- Making the parent process exit with the same code as the child.\n- If the child is killed, making the parent exit with the same signal.\n\nTo see it in action, clone this repository and run `npm install` / `npm run respawn` / `npm run nospawn`.\n\n## Sample Usage\n\n```js\n#!/usr/bin/env node\n\nconst flaggedRespawn = require('flagged-respawn');\n\n// get a list of all possible v8 flags for the running version of node\nconst v8flags = require('v8flags').fetch();\n\nflaggedRespawn(v8flags, process.argv, function (ready, child) {\n  if (ready) {\n    console.log('Running!');\n    // your cli code here\n  } else {\n    console.log('Special flags found, respawning.');\n  }\n  if (process.pid !== child.pid) {\n    console.log('Respawned to PID:', child.pid);\n  }\n});\n\n```\n\n\n## API\n\n### <u>flaggedRespawn(flags, argv, [ forcedFlags, ] callback) : Void</u>\n\nRespawns the script itself when *argv* has special flag contained in *flags* and/or *forcedFlags* is not empty. Because members of *flags* and *forcedFlags* are passed to `node` command, each of them needs to be a node flag or a V8 flag.\n\n#### Forbid respawning\n\nIf `--no-respawning` flag is given in *argv*, this function does not respawned even if *argv* contains members of flags or *forcedFlags* is not empty. (This flag is also used internally to prevent from respawning more than once).\n\n#### Parameter:\n\n| Parameter     |  Type  | Description |\n|:--------------|:------:|:----------------------------------------------------|\n| *flags*       | Array  | An array of node flags and V8 flags which are available when present in *argv*. |\n| *argv*        | Array  | Command line arguments to respawn.   |\n| *forcedFlags* | Array or String  | An array of node flags or a string of a single flag and V8 flags for respawning forcely. |\n| *callback*    | function | A called function when not respawning or after respawned. |\n\n* **<u><i>callback</i>(ready, proc, argv) : Void</u>**\n\n    *callback* function is called both when respawned or not, and it can be distinguished by callback's argument: *ready*. (*ready* indicates whether a process spawned its child process (false) or not (true), but it does not indicate whether a process is a spawned child process or not. *ready* for a spawned child process is true.)\n\n    *argv* is an array of command line arguments which is respawned (when *ready* is false) or is passed current process except flags within *flags* and `--no-respawning` (when *ready* is true).\n\n    **Parameter:**\n\n    | Parameter |  Type   | Description               |\n    |:----------|:-------:|:--------------------------|\n    | *ready*   | boolean | True, if not respawning and is ready to execute main function. |\n    | *proc*    | object  | Child process object if respawned, otherwise current process object. |\n    | *argv*    | Array   | An array of command line arguments. |\n\n## License\n\nMIT\n\n[downloads-image]: http://img.shields.io/npm/dm/flagged-respawn.svg\n[npm-url]: https://www.npmjs.com/package/flagged-respawn\n[npm-image]: http://img.shields.io/npm/v/flagged-respawn.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/flagged-respawn\n[travis-image]: http://img.shields.io/travis/gulpjs/flagged-respawn.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/flagged-respawn\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/flagged-respawn.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/flagged-respawn\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/flagged-respawn/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2018 Tyler Kellen <tyler@sleekcode.net>, Blaine Bublitz <blaine.bublitz@gmail.com>, and Eric Schoffstall <yo@contra.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/flagged-respawn/-/flagged-respawn-1.0.1.tgz#e7de6f1279ddd9ca9aac8a5971d618606b3aab41",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/flagged-respawn/-/flagged-respawn-1.0.1.tgz",
    "hash": "e7de6f1279ddd9ca9aac8a5971d618606b3aab41",
    "integrity": "sha512-lNaHNVymajmk0OJMBn8fVUAU1BtDeKIqKoVhk4xAALB57aALg6b4W0MfJ/cUE0g9YBXy5XhSlPIpYIJ7HaY/3Q==",
    "registry": "npm",
    "packageName": "flagged-respawn",
    "cacheIntegrity": "sha512-lNaHNVymajmk0OJMBn8fVUAU1BtDeKIqKoVhk4xAALB57aALg6b4W0MfJ/cUE0g9YBXy5XhSlPIpYIJ7HaY/3Q== sha1-595vEnnd2cqarIpZcdYYYGs6q0E="
  },
  "registry": "npm",
  "hash": "e7de6f1279ddd9ca9aac8a5971d618606b3aab41"
}