{
  "manifest": {
    "name": "@fastify/ajv-compiler",
    "version": "3.5.0",
    "description": "Build and manage the AJV instances for the fastify framework",
    "main": "index.js",
    "types": "types/index.d.ts",
    "scripts": {
      "lint": "standard",
      "lint:fix": "standard --fix",
      "unit": "tap",
      "test": "npm run unit && npm run test:typescript",
      "posttest": "rimraf test/ajv-generated*.js",
      "test:typescript": "tsd",
      "ajv:compile": "ajv compile -s test/source.json -o test/validate_schema.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/fastify/ajv-compiler.git"
    },
    "keywords": [
      "ajv",
      "validator",
      "schema",
      "compiler",
      "fastify"
    ],
    "author": {
      "name": "Manuel Spigolon",
      "email": "behemoth89@gmail.com",
      "url": "https://github.com/Eomm"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/fastify/ajv-compiler/issues"
    },
    "homepage": "https://github.com/fastify/ajv-compiler#readme",
    "devDependencies": {
      "ajv-cli": "^5.0.0",
      "ajv-errors": "^3.0.0",
      "ajv-i18n": "^4.0.1",
      "ajv-merge-patch": "^5.0.1",
      "cronometro": "^1.1.4",
      "fastify": "^4.0.0",
      "require-from-string": "^2.0.2",
      "rimraf": "^3.0.2",
      "sanitize-filename": "^1.6.3",
      "standard": "^17.0.0",
      "tap": "^16.2.0",
      "tsd": "^0.25.0"
    },
    "dependencies": {
      "ajv": "^8.11.0",
      "ajv-formats": "^2.1.1",
      "fast-uri": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@fastify-ajv-compiler-3.5.0-459bff00fefbf86c96ec30e62e933d2379e46670-integrity/node_modules/@fastify/ajv-compiler/package.json",
    "readmeFilename": "README.md",
    "readme": "# @fastify/ajv-compiler\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\n[![Continuous Integration](https://github.com/fastify/ajv-compiler/workflows/Continuous%20Integration/badge.svg)](https://github.com/fastify/ajv-compiler/actions/workflows/ci.yml)\n\nThis module manages the [`ajv`](https://www.npmjs.com/package/ajv) instances for the Fastify framework.\nIt isolates the `ajv` dependency so that the AJV version is not tightly coupled to the Fastify version.\nThis allows the user to decide which version of AJV to use in their Fastify based application.\n\n\n## Versions\n\n| `@fastify/ajv-compiler` | `ajv` | Default in `fastify` |\n|------------------------:|------:|---------------------:|\n|                    v1.x |  v6.x |                ^3.14 |\n|                    v2.x |  v8.x |                    - |\n|                    v3.x |  v8.x |                 ^4.x |\n\n\n### AJV Configuration\n\nThe Fastify's default [`ajv` options](https://github.com/ajv-validator/ajv/tree/v6#options) are:\n\n```js\n{\n  coerceTypes: 'array',\n  useDefaults: true,\n  removeAdditional: true,\n  uriResolver: require('fast-uri'),\n  addUsedSchema: false,\n  // Explicitly set allErrors to `false`.\n  // When set to `true`, a DoS attack is possible.\n  allErrors: false\n}\n```\n\nMoreover, the [`ajv-formats`](https://www.npmjs.com/package/ajv-formats) module is included by default.\nIf you need to customize it, check the _usage_ section below.\n\nTo customize the `ajv`'s options, see how in the [Fastify official docs](https://www.fastify.io/docs/latest/Reference/Server/#ajv).\n\n\n## Usage\n\nThis module is already used as default by Fastify. \nIf you need to provide to your server instance a different version, refer to [the official doc](https://www.fastify.io/docs/latest/Reference/Server/#schemacontroller).\n\n### Customize the `ajv-formats` plugin\n\nThe `format` keyword is not part of the official `ajv` module since v7. To use it, you need to install the `ajv-formats` module and this module\ndoes it for you with the default configuration.\n\nIf you need to configure the `ajv-formats` plugin you can do it using the standard Fastify configuration:\n\n```js\nconst app = fastify({\n  ajv: {\n    plugins: [[require('ajv-formats'), { mode: 'fast' }]]\n  }\n})\n```\n\nIn this way, your setup will have precendence over the `@fastify/ajv-compiler` default configuration.\n\n### Fastify with JTD\n\nThe [JSON Type Definition](https://jsontypedef.com/) feature is supported by AJV v8.x and you can benefit from it in your Fastify application.\n\nWith Fastify v3.20.x and higher, you can use the `@fastify/ajv-compiler` module to load JSON Type Definitions like so:\n\n```js\nconst factory = require('@fastify/ajv-compiler')()\n\nconst app = fastify({\n  jsonShorthand: false,\n  ajv: {\n    customOptions: { }, // additional JTD options\n    mode: 'JTD'\n  },\n  schemaController: {\n    compilersFactory: {\n      buildValidator: factory\n    }\n  }\n})\n```\n\nThe defaults AJV JTD options are the same as the [Fastify's default options](#AJV-Configuration).\n\n#### Fastify with JTD and serialization\n\nYou can use JTD Schemas to serialize your response object too:\n\n```js\nconst factoryValidator = require('@fastify/ajv-compiler')()\nconst factorySerializer = require('@fastify/ajv-compiler')({ jtdSerializer: true })\n\nconst app = fastify({\n  jsonShorthand: false,\n  ajv: {\n    customOptions: { }, // additional JTD options\n    mode: 'JTD'\n  },\n  schemaController: {\n    compilersFactory: {\n      buildValidator: factoryValidator,\n      buildSerializer: factorySerializer\n    }\n  }\n})\n```\n\n\n### AJV Standalone\n\nAJV v8 introduces the [standalone feature](https://ajv.js.org/standalone.html) that let you to pre-compile your schemas and use them in your application for a faster startup.\n\nTo use this feature, you must be aware of the following:\n\n1. You must generate and save the application's compiled schemas.\n2. Read the compiled schemas from the file and provide them back to your Fastify application.\n\n\n#### Generate and save the compiled schemas\n\nFastify helps you to generate the validation schemas functions and it is your choice to save them where you want.\nTo accomplish this, you must use a new compiler: `StandaloneValidator`.\n\nYou must provide 2 parameters to this compiler:\n\n- `readMode: false`: a boolean to indicate that you want generate the schemas functions string.\n- `storeFunction`\" a sync function that must store the source code of the schemas functions. You may provide an async function too, but you must manage errors.\n\nWhen `readMode: false`, **the compiler is meant to be used in development ONLY**.\n\n\n```js\nconst { StandaloneValidator } = require('@fastify/ajv-compiler')\nconst factory = StandaloneValidator({\n  readMode: false,\n  storeFunction (routeOpts, schemaValidationCode) {\n    // routeOpts is like: { schema, method, url, httpPart }\n    // schemaValidationCode is a string source code that is the compiled schema function\n    const fileName = generateFileName(routeOpts)\n    fs.writeFileSync(path.join(__dirname, fileName), schemaValidationCode)\n  }\n})\n\nconst app = fastify({\n  jsonShorthand: false,\n  schemaController: {\n    compilersFactory: {\n      buildValidator: factory\n    }\n  }\n})\n\n// ... add all your routes with schemas ...\n\napp.ready().then(() => {\n  // at this stage all your schemas are compiled and stored in the file system\n  // now it is important to turn off the readMode\n})\n```\n\n#### Read the compiled schemas functions\n\nAt this stage, you should have a file for every route's schema.\nTo use them, you must use the `StandaloneValidator` with the parameters:\n\n- `readMode: true`: a boolean to indicate that you want read and use the schemas functions string.\n- `restoreFunction`\" a sync function that must return a function to validate the route.\n\nImportant keep away before you continue reading the documentation:\n\n- when you use the `readMode: true`, the application schemas are not compiled (they are ignored). So, if you change your schemas, you must recompile them!\n- as you can see, you must relate the route's schema to the file name using the `routeOpts` object. You may use the `routeOpts.schema.$id` field to do so, it is up to you to define a unique schema identifier.\n\n```js\nconst { StandaloneValidator } = require('@fastify/ajv-compiler')\nconst factory = StandaloneValidator({\n  readMode: true,\n  restoreFunction (routeOpts) {\n    // routeOpts is like: { schema, method, url, httpPart }\n    const fileName = generateFileName(routeOpts)\n    return require(path.join(__dirname, fileName))\n  }\n})\n\nconst app = fastify({\n  jsonShorthand: false,\n  schemaController: {\n    compilersFactory: {\n      buildValidator: factory\n    }\n  }\n})\n\n// ... add all your routes with schemas as before...\n\napp.listen({ port: 3000 })\n```\n\n### How it works\n\nThis module provide a factory function to produce [Validator Compilers](https://www.fastify.io/docs/latest/Reference/Server/#validatorcompiler) functions.\n\nThe Fastify factory function is just one per server instance and it is called for every encapsulated context created by the application through the `fastify.register()` call.\n\nEvery Validator Compiler produced, has a dedicated AJV instance, so, this factory will try to produce as less as possible AJV instances to reduce the memory footprint and the startup time.\n\nThe variables involved to choose if a Validator Compiler can be reused are:\n\n- the AJV configuration: it is [one per server](https://www.fastify.io/docs/latest/Reference/Server/#ajv)\n- the external JSON schemas: once a new schema is added to a fastify's context, calling `fastify.addSchema()`, it will cause a new AJV inizialization\n\n\n## License\n\nLicensed under [MIT](./LICENSE).\n",
    "licenseText": "MIT License\n\nCopyright (c) The Fastify Team\n\nThe Fastify team members are listed at https://github.com/fastify/fastify#team\nand in the README file.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@fastify/ajv-compiler/-/ajv-compiler-3.5.0.tgz#459bff00fefbf86c96ec30e62e933d2379e46670",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@fastify/ajv-compiler/-/ajv-compiler-3.5.0.tgz",
    "hash": "459bff00fefbf86c96ec30e62e933d2379e46670",
    "integrity": "sha512-ebbEtlI7dxXF5ziNdr05mOY8NnDiPB1XvAlLHctRt/Rc+C3LCOVW5imUVX+mhvUhnNzmPBHewUkOFgGlCxgdAA==",
    "registry": "npm",
    "packageName": "@fastify/ajv-compiler",
    "cacheIntegrity": "sha512-ebbEtlI7dxXF5ziNdr05mOY8NnDiPB1XvAlLHctRt/Rc+C3LCOVW5imUVX+mhvUhnNzmPBHewUkOFgGlCxgdAA== sha1-RZv/AP77+GyW7DDmLpM9I3nkZnA="
  },
  "registry": "npm",
  "hash": "459bff00fefbf86c96ec30e62e933d2379e46670"
}