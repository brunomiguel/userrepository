{
  "manifest": {
    "name": "sugarss",
    "version": "3.0.3",
    "description": "Indent-based CSS syntax for PostCSS",
    "keywords": [
      "css",
      "postcss",
      "postcss-syntax",
      "syntax",
      "indent",
      "parser"
    ],
    "author": {
      "name": "Andrey Sitnik",
      "email": "andrey@sitnik.ru"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/sugarss.git"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    "dependencies": {
      "postcss": "^8.1.6"
    },
    "engines": {
      "node": ">=10.0"
    },
    "exports": {
      ".": {
        "require": "./index.js",
        "import": "./index.mjs"
      },
      "./": "./"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-sugarss-3.0.3-bb2489961b98fbd15e4e35d6b9f4f2ee5547a6cb-integrity/node_modules/sugarss/package.json",
    "readmeFilename": "README.md",
    "readme": "# SugarSS\n\n<img align=\"right\" width=\"120\" height=\"155\"\n     title=\"SugarSS logo by Maria Keller\"\n     src=\"http://postcss.github.io/sugarss/logo.svg\">\n\nIndent-based CSS syntax for [PostCSS].\n\n```sass\na\n  color: blue\n\n.multiline,\n.selector\n  box-shadow: 1px 0 9px rgba(0, 0, 0, .4),\n              1px 0 3px rgba(0, 0, 0, .6)\n\n// Mobile\n@media (max-width: 400px)\n  .body\n    padding: 0 10px\n```\n\nAs any PostCSS custom syntax, SugarSS has source map, [stylelint]\nand [postcss-sorting] support out-of-box.\n\nIt was designed to be used with [PreCSS] and [postcss-nested-props].\nBut you can use it with any PostCSS plugins\nor use it without any PostCSS plugins.\nWith [gulp-sass-to-postcss-mixins] you can use `+mixin` syntax as in Sass.\n\n<a href=\"https://evilmartians.com/?utm_source=sugarss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[gulp-sass-to-postcss-mixins]:  https://github.com/akella/gulp-sass-to-postcss-mixins\n[postcss-nested-props]:        https://github.com/jedmao/postcss-nested-props\n[postcss-sorting]:             https://github.com/hudochenkov/postcss-sorting\n[stylelint]:                   http://stylelint.io/\n[PostCSS]:                     https://github.com/postcss/postcss\n[PreCSS]:                      https://github.com/jonathantneal/precss\n\n\n## Syntax\n\nSugarSS MIME-type is `text/x-sugarss` with `.sss` file extension.\n\n\n### Indent\n\nWe recommend 2 spaces indent. However, SugarSS autodetects indent\nand can be used with tabs or spaces.\n\nBut it is prohibited to mix spaces and tabs in SugarSS sources.\n\n\n### Multiline\n\nSugarSS was designed to have intuitively multiline selectors and declaration\nvalues.\n\nThere are 3 rules for any types of nodes:\n\n```sass\n// 1. New line inside brackets will be ignored\n@supports ( (display: flex) and\n            (display: grid) )\n\n// 2. Comma at the end of the line\n@media (max-width: 400px),\n       (max-height: 800px)\n\n// 3. Backslash before new line\n@media screen and \\\n       (min-width: 600px)\n```\n\nIn a selector you can put a new line anywhere. Just keep same indent\nfor every line of selector:\n\n```sass\n.parent >\n.child\n  color: black\n```\n\nIn a declaration value you can put a new line anywhere. Just keep a bigger indent\nfor the value:\n\n```sass\n.one\n  background: linear-gradient(rgba(0, 0, 0, 0), black)\n              linear-gradient(red, rgba(255, 0, 0, 0))\n\n.two\n  background:\n    linear-gradient(rgba(0, 0, 0, 0), black)\n    linear-gradient(red, rgba(255, 0, 0, 0))\n```\n\n\n### Comments\n\nSugarSS supports two types of comments:\n\n```sass\n/*\n Multiline comments\n */\n\n// Inline comments\n```\n\nThere is no “silent” comment in SugarSS. Output CSS will contain all comments\nfrom `.sss` source. But you can use [postcss-discard-comments]\nfor Sass’s silent/loud comments behaviour.\n\n[postcss-discard-comments]: https://www.npmjs.com/package/postcss-discard-comments\n\n\n### Rule and Declarations\n\nSugarSS separates selectors and declarations by `:\\s` or `:\\n` token.\n\nSo you must write a space after the property name: `color: black` is good,\n`color:black` is prohibited.\n\n\n### Other\n\nSugarSS is just a syntax, it change the way how you write CSS,\nbut do not add preprocessor features build-in.\n\nHere are PostCSS plugins which could add you preprocessor features:\n\n* **[PreCSS]** adds variables, nested rules, extend rules, property lookup\n  and CSS polyfills.\n* **[postcss-easy-import]** adds `@import` directive support with globbing.\n* **[postcss-mixins]** add `@mixin` support.\n* **[postcss-functions]** allows you to define own CSS functions in JS.\n\n[postcss-easy-import]: https://github.com/TrySound/postcss-easy-import\n[postcss-functions]: https://github.com/andyjansson/postcss-functions\n[postcss-mixins]: https://github.com/postcss/postcss-mixins\n[PreCSS]: https://github.com/jonathantneal/precss\n\n\n## Text Editors\n\n* SublimeText: [Syntax Highlighting for .SSS SugarSS]\n* Atom: [language-postcss], [source-preview-postcss] and [build-sugarss]\n* Vim: [vim-sugarss]\n\nWe are working on syntax highlight support in text editors.\n\nRight now, you can set `Sass` or `Stylus` syntax highlight for `.sss` files.\n\n[Syntax Highlighting for .SSS SugarSS]: https://packagecontrol.io/packages/Syntax%20Highlighting%20for%20SSS%20SugarSS\n[source-preview-postcss]:          https://atom.io/packages/source-preview-postcss\n[language-postcss]:                https://atom.io/packages/language-postcss\n[build-sugarss]:                   https://atom.io/packages/build-sugarss\n[vim-sugarss]:                     https://github.com/hhsnopek/vim-sugarss\n\n\n## Usage\n\nSugarSS needs PostCSS compiler. Install [`postcss-loader`] for webpack,\n[`gulp-postcss`] for Gulp, [`postcss-cli`] for npm scripts.\n[Parcel] has build-in support for PostCSS.\n\nThen install SugarSS: `npm install --save-dev sugarss` if you use npm\nand `yarn add --dev sugarss` if you use Yarn.\n\nYou may also install `precss` to have nested rules, variables\nand other CSS syntax extensions: `npm install --save-dev precss`\nor `yarn add --dev precss` if you use Yarn.\n\nThen create `.postcssrc` file:\n\n```json\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n    \"precss\": {}\n  }\n}\n```\n\n[`postcss-loader`]: https://github.com/postcss/postcss-loader\n[`gulp-postcss`]: https://github.com/postcss/gulp-postcss\n[`postcss-cli`]: https://github.com/postcss/postcss-cli\n[Parcel]: https://parceljs.org/transforms.html\n\n\n### Imports\n\nIf you doesn’t use Webpack or Parcel, you need some PostCSS plugin\nto process `@import` directives.\n\n[postcss-import] doesn’t support `.sss` file extension, because this plugin\nimplements W3C specification. If you want smarter `@import`, you should\nuse [postcss-easy-import] with the `extensions` option.\n\n```diff js\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n+   \"postcss-easy-import\": {\n+     \"extensions\": [\n+       \".sss\"\n+     ]\n+   },\n    \"precss\": {},\n  }\n}\n```\n\n[postcss-easy-import]: https://github.com/TrySound/postcss-easy-import\n[postcss-import]:      https://github.com/postcss/postcss-import\n\n\n### Mixins\n\nFor mixins support, install [postcss-mixins] and add it to `.postcssrc` file:\n\n```diff js\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n+   \"postcss-mixins\": {\n+     \"mixinsDir\": \"./mixins\"\n+   },\n    \"precss\": {},\n  }\n}\n```\n\nNow you can define your mixins in `mixins/` dir.\nFor example create `mixins/circle.sss` with:\n\n```sss\n@define-mixin circle $size\n  border-radius: 50%\n  width: $size\n  height: $size\n```\n\n\n### Functions\n\nTo define custom functions you need to install [postcss-functions]\nand add it to `.postcssrc` file:\n\n```diff js\n{\n  \"parser\": \"sugarss\",\n  \"plugins\": {\n+   \"postcss-functions\": {\n+     \"glob\": \"./functions\"\n+   },\n    \"precss\": {},\n  }\n}\n```\n\nThen you can define functions in `functions/` dir. For example,\n`functions/foo.js` will define `foo()` function in CSS:\n\n```js\nmodule.exports = function (args) {\n  return 'foo'\n}\n```\n\n\n### SugarSS to SugarSS\n\nSometimes we use PostCSS not to build CSS, but to fix source files.\nFor example, to sort properties by [postcss-sorting].\n\nFor this cases use the `syntax` option, instead of `parser`:\n\n```js\ngulp.task('sort', function () {\n    return gulp.src('src/**/*.sss')\n        .pipe(postcss([sorting], { syntax: sugarss }))\n        .pipe(gulp.dest('src'));\n});\n```\n\n[postcss-sorting]: https://github.com/hudochenkov/postcss-sorting\n\n\n### CSS to SugarSS\n\nYou can even compile existing CSS sources to SugarSS syntax.\nJust use `stringifier` option instead of `parser`:\n\n```js\npostcss().process(css, { stringifier: sugarss }).then(function (result) {\n    result.content // Converted SugarSS content\n});\n```\n\n\n## Thanks\n\nCute project logo was made by [Maria Keller](http://www.mariakellerac.com/).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2016 Andrey Sitnik <andrey@sitnik.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sugarss/-/sugarss-3.0.3.tgz#bb2489961b98fbd15e4e35d6b9f4f2ee5547a6cb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sugarss/-/sugarss-3.0.3.tgz",
    "hash": "bb2489961b98fbd15e4e35d6b9f4f2ee5547a6cb",
    "integrity": "sha512-uxa2bbuc+w7ov7DyYIhF6bM0qZF3UkFT5/nE8AJgboiVnKsBDbwxs++dehEIe1JNhpMaGJc37wGQ2QrrWey2Sg==",
    "registry": "npm",
    "packageName": "sugarss",
    "cacheIntegrity": "sha512-uxa2bbuc+w7ov7DyYIhF6bM0qZF3UkFT5/nE8AJgboiVnKsBDbwxs++dehEIe1JNhpMaGJc37wGQ2QrrWey2Sg== sha1-uySJlhuY+9FeTjXWufTy7lVHpss="
  },
  "registry": "npm",
  "hash": "bb2489961b98fbd15e4e35d6b9f4f2ee5547a6cb"
}