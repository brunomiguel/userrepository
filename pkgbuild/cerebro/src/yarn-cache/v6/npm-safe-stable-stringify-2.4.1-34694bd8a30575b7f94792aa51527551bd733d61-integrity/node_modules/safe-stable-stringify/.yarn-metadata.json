{
  "manifest": {
    "name": "safe-stable-stringify",
    "version": "2.4.1",
    "description": "Deterministic and safely JSON.stringify to quickly serialize JavaScript objects",
    "exports": {
      "require": "./index.js",
      "import": "./esm/wrapper.js"
    },
    "keywords": [
      "stable",
      "stringify",
      "JSON",
      "JSON.stringify",
      "safe",
      "serialize",
      "deterministic",
      "circular",
      "object",
      "predicable",
      "repeatable",
      "fast",
      "bigint"
    ],
    "main": "index.js",
    "scripts": {
      "test": "standard && tap test.js",
      "tap": "tap test.js",
      "tap:only": "tap test.js --watch --only",
      "benchmark": "node benchmark.js",
      "compare": "node compare.js",
      "lint": "standard --fix",
      "tsc": "tsc --project tsconfig.json"
    },
    "engines": {
      "node": ">=10"
    },
    "author": {
      "name": "Ruben Bridgewater"
    },
    "license": "MIT",
    "typings": "index.d.ts",
    "devDependencies": {
      "@types/json-stable-stringify": "^1.0.34",
      "@types/node": "^16.11.1",
      "benchmark": "^2.1.4",
      "clone": "^2.1.2",
      "fast-json-stable-stringify": "^2.1.0",
      "fast-safe-stringify": "^2.1.1",
      "fast-stable-stringify": "^1.0.0",
      "faster-stable-stringify": "^1.0.0",
      "fastest-stable-stringify": "^2.0.2",
      "json-stable-stringify": "^1.0.1",
      "json-stringify-deterministic": "^1.0.7",
      "json-stringify-safe": "^5.0.1",
      "standard": "^16.0.4",
      "tap": "^15.0.9",
      "typescript": "^4.8.3"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/BridgeAR/safe-stable-stringify.git"
    },
    "bugs": {
      "url": "https://github.com/BridgeAR/safe-stable-stringify/issues"
    },
    "homepage": "https://github.com/BridgeAR/safe-stable-stringify#readme",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-safe-stable-stringify-2.4.1-34694bd8a30575b7f94792aa51527551bd733d61-integrity/node_modules/safe-stable-stringify/package.json",
    "readmeFilename": "readme.md",
    "readme": "# safe-stable-stringify\n\nSafe, deterministic and fast serialization alternative to [JSON.stringify][].\nZero dependencies. ESM and CJS. 100% coverage.\n\nGracefully handles circular structures and bigint instead of throwing.\n\nOptional custom circular values, deterministic behavior or strict JSON\ncompatibility check.\n\n## stringify(value[, replacer[, space]])\n\nThe same as [JSON.stringify][].\n\n* `value` {any}\n* `replacer` {string[]|function|null}\n* `space` {number|string}\n* Returns: {string}\n\n```js\nconst stringify = require('safe-stable-stringify')\n\nconst bigint = { a: 0, c: 2n, b: 1 }\n\nstringify(bigint)\n// '{\"a\":0,\"b\":1,\"c\":2}'\nJSON.stringify(bigint)\n// TypeError: Do not know how to serialize a BigInt\n\nconst circular = { b: 1, a: 0 }\ncircular.circular = circular\n\nstringify(circular)\n// '{\"a\":0,\"b\":1,\"circular\":\"[Circular]\"}'\nJSON.stringify(circular)\n// TypeError: Converting circular structure to JSON\n\nstringify(circular, ['a', 'b'], 2)\n// {\n//   \"a\": 0,\n//   \"b\": 1\n// }\n```\n\n## stringify.configure(options)\n\n* `bigint` {boolean} If `true`, bigint values are converted to a number. Otherwise\n  they are ignored. **Default:** `true`.\n* `circularValue` {string|null|undefined|ErrorConstructor} Defines the value for\n  circular references. Set to `undefined`, circular properties are not\n  serialized (array entries are replaced with `null`). Set to `Error`, to throw\n  on circular references. **Default:** `'[Circular]'`.\n* `deterministic` {boolean} If `true`, guarantee a deterministic key order\n  instead of relying on the insertion order. **Default:** `true`.\n* `maximumBreadth` {number} Maximum number of entries to serialize per object\n  (at least one). The serialized output contains information about how many\n  entries have not been serialized. Ignored properties are counted as well\n  (e.g., properties with symbol values). Using the array replacer overrules this\n  option. **Default:** `Infinity`\n* `maximumDepth` {number} Maximum number of object nesting levels (at least 1)\n  that will be serialized. Objects at the maximum level are serialized as\n  `'[Object]'` and arrays as `'[Array]'`. **Default:** `Infinity`\n* `strict` {boolean} Instead of handling any JSON value gracefully, throw an\n  error in case it may not be represented as JSON (functions, NaN, ...).\n  Circular values and bigint values throw as well in case either option is not\n  explicitly defined. Sets and Maps are not detected! **Default:** `false`\n* Returns: {function} A stringify function with the options applied.\n\n```js\nimport { configure } from 'safe-stable-stringify'\n\nconst stringify = configure({\n  bigint: true,\n  circularValue: 'Magic circle!',\n  deterministic: false,\n  maximumDepth: 1,\n  maximumBreadth: 4\n})\n\nconst circular = {\n  bigint: 999_999_999_999_999_999n,\n  typed: new Uint8Array(3),\n  deterministic: \"I don't think so\",\n}\ncircular.circular = circular\ncircular.ignored = true\ncircular.alsoIgnored = 'Yes!'\n\nconst stringified = stringify(circular, null, 4)\n\nconsole.log(stringified)\n// {\n//     \"bigint\": 999999999999999999,\n//     \"typed\": \"[Object]\",\n//     \"deterministic\": \"I don't think so\",\n//     \"circular\": \"Magic circle!\",\n//     \"...\": \"2 items not stringified\"\n// }\n\nconst throwOnCircular = configure({\n  circularValue: Error\n})\n\nthrowOnCircular(circular);\n// TypeError: Converting circular structure to JSON\n```\n\n## Differences to JSON.stringify\n\n1. _Circular values_ are replaced with the string `[Circular]` (configurable).\n1. _Object keys_ are sorted instead of using the insertion order (configurable).\n1. _BigInt_ values are stringified as regular number instead of throwing a\n   TypeError (configurable).\n1. _Boxed primitives_ (e.g., `Number(5)`) are not unboxed and are handled as\n   regular object.\n\nThose are the only differences to `JSON.stringify()`. This is a side effect free\nvariant and [`toJSON`][], [`replacer`][] and the [`spacer`][] work the same as\nwith `JSON.stringify()`.\n\n## Performance / Benchmarks\n\nCurrently this is by far the fastest known stable (deterministic) stringify\nimplementation. This is especially important for big objects and TypedArrays.\n\n(Dell Precision 5540, i7-9850H CPU @ 2.60GHz, Node.js 16.11.1)\n\n```md\nsimple:   simple object x 3,463,894 ops/sec ±0.44% (98 runs sampled)\nsimple:   circular      x 1,236,007 ops/sec ±0.46% (99 runs sampled)\nsimple:   deep          x 18,942 ops/sec ±0.41% (93 runs sampled)\nsimple:   deep circular x 18,690 ops/sec ±0.72% (96 runs sampled)\n\nreplacer:   simple object x 2,664,940 ops/sec ±0.31% (98 runs sampled)\nreplacer:   circular      x 1,015,981 ops/sec ±0.09% (99 runs sampled)\nreplacer:   deep          x 17,328 ops/sec ±0.38% (97 runs sampled)\nreplacer:   deep circular x 17,071 ops/sec ±0.21% (98 runs sampled)\n\narray:   simple object x 3,869,608 ops/sec ±0.22% (98 runs sampled)\narray:   circular      x 3,853,943 ops/sec ±0.45% (96 runs sampled)\narray:   deep          x 3,563,227 ops/sec ±0.20% (100 runs sampled)\narray:   deep circular x 3,286,475 ops/sec ±0.07% (100 runs sampled)\n\nindentation:   simple object x 2,183,162 ops/sec ±0.66% (97 runs sampled)\nindentation:   circular      x 872,538 ops/sec ±0.57% (98 runs sampled)\nindentation:   deep          x 16,795 ops/sec ±0.48% (93 runs sampled)\nindentation:   deep circular x 16,443 ops/sec ±0.40% (97 runs sampled)\n```\n\nComparing `safe-stable-stringify` with known alternatives:\n\n```md\nfast-json-stable-stringify x 18,765 ops/sec ±0.71% (94 runs sampled)\njson-stable-stringify x 13,870 ops/sec ±0.72% (94 runs sampled)\nfast-stable-stringify x 21,343 ops/sec ±0.33% (95 runs sampled)\nfaster-stable-stringify x 17,707 ops/sec ±0.44% (97 runs sampled)\njson-stringify-deterministic x 11,208 ops/sec ±0.57% (98 runs sampled)\nfast-safe-stringify x 21,460 ops/sec ±0.75% (99 runs sampled)\nthis x 30,367 ops/sec ±0.39% (96 runs sampled)\n\nThe fastest is this\n```\n\nThe `fast-safe-stringify` comparison uses the modules stable implementation.\n\n## Acknowledgements\n\nSponsored by [MaibornWolff](https://www.maibornwolff.de/) and [nearForm](http://nearform.com)\n\n## License\n\nMIT\n\n[`replacer`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter\n[`spacer`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20space%20argument\n[`toJSON`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior\n[JSON.stringify]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Ruben Bridgewater\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/safe-stable-stringify/-/safe-stable-stringify-2.4.1.tgz#34694bd8a30575b7f94792aa51527551bd733d61",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/safe-stable-stringify/-/safe-stable-stringify-2.4.1.tgz",
    "hash": "34694bd8a30575b7f94792aa51527551bd733d61",
    "integrity": "sha512-dVHE6bMtS/bnL2mwualjc6IxEv1F+OCUpA46pKUj6F8uDbUM0jCCulPqRNPSnWwGNKx5etqMjZYdXtrm5KJZGA==",
    "registry": "npm",
    "packageName": "safe-stable-stringify",
    "cacheIntegrity": "sha512-dVHE6bMtS/bnL2mwualjc6IxEv1F+OCUpA46pKUj6F8uDbUM0jCCulPqRNPSnWwGNKx5etqMjZYdXtrm5KJZGA== sha1-NGlL2KMFdbf5R5KqUVJ1Ub1zPWE="
  },
  "registry": "npm",
  "hash": "34694bd8a30575b7f94792aa51527551bd733d61"
}