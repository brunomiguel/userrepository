{
  "manifest": {
    "name": "tiny-worker",
    "version": "2.3.0",
    "description": "Tiny WebWorker for Server",
    "main": "lib/index.js",
    "scripts": {
      "test": "grunt test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/avoidwork/tiny-worker.git"
    },
    "keywords": [
      "web",
      "worker",
      "ps",
      "webworker"
    ],
    "author": {
      "name": "Jason Mulligan",
      "email": "jason.mulligan@avoidwork.com"
    },
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/avoidwork/tiny-worker/issues"
    },
    "homepage": "https://github.com/avoidwork/tiny-worker",
    "devDependencies": {
      "babel-core": "^6.26.3",
      "babel-preset-env": "^1.7.0",
      "grunt": "^1.0.4",
      "grunt-babel": "^7.0.0",
      "grunt-cli": "^1.3.2",
      "grunt-contrib-nodeunit": "^2.0.0",
      "grunt-contrib-watch": "^1.1.0",
      "grunt-eslint": "^22.0.0"
    },
    "dependencies": {
      "esm": "^3.2.25"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tiny-worker-2.3.0-715ae34304c757a9af573ae9a8e3967177e6011e-integrity/node_modules/tiny-worker/package.json",
    "readmeFilename": "README.md",
    "readme": "# tiny-worker\nTiny WebWorker for Server\n\n`require()` is available for flexible inline Worker scripts. Optional parameters `args` Array & `options` Object; see `child_process.fork()` documentation.\n\n[![build status](https://secure.travis-ci.org/avoidwork/tiny-worker.svg)](http://travis-ci.org/avoidwork/tiny-worker)\n\n## Example\n#### Creating a Worker from a file\nThe worker script:\n```javascript\nonmessage = function (ev) {\n\tpostMessage(ev.data);\n};\n```\n\nThe core script:\n```javascript\nvar Worker = require(\"tiny-worker\");\nvar worker = new Worker(\"repeat.js\");\n\nworker.onmessage = function (ev) {\n\tconsole.log(ev.data);\n\tworker.terminate();\n};\n\nworker.postMessage(\"Hello World!\");\n```\n\n#### Enable ES6 import/export within Worker file\nThe worker helper script (helper.js):\n```javascript\nexport const dataFormatter = (data) => {\n\treturn `${data} World!`;\n};\n```\n\nThe worker script (repeat.js):\n```javascript\nimport { dataFormatter } from \"./helper\";\n\nonmessage = function (ev) {\n\tconst data = dataFormatter(ev.data);\n\tpostMessage(data);\n};\n```\n\nThe core script:\n```javascript\nvar Worker = require(\"tiny-worker\");\nvar worker = new Worker(\"repeat.js\", [], {esm: true});\n\nworker.onmessage = function (ev) {\n\tconsole.log(ev.data);\n\tworker.terminate();\n};\n\nworker.postMessage(\"Hello\");\n```\n\n#### Creating a Worker from a Function\n```javascript\nvar Worker = require(\"tiny-worker\");\nvar worker = new Worker(function () {\n\tself.onmessage = function (ev) {\n\t\tpostMessage(ev.data);\n\t};\n});\n\nworker.onmessage = function (ev) {\n\tconsole.log(ev.data);\n\tworker.terminate();\n};\n\nworker.postMessage(\"Hello World!\");\n```\n\n# Debugging\nTo be able to debug a child process, it must have a differnt debug port than the parent. \nTiny worker does this by adding a random port within a range to the parents debug port.\nThe default Range is `[1, 300]`, it can be changed with the `setRange(min, max)` method.\nTo disable any automatic port redirection set `options.noDebugRedirection = true`.\n\n### automatic redirection\n```javascript\n//parent is started with '--debug=1234'\nvar Worker = require(\"tiny-worker\");\nWorker.setRange(2, 20);\n\nvar worker = new Worker(function () {\n\tpostMessage(process.debugPort); \n});\n\nworker.onmessage = function (ev) {\n\tconsole.log(ev.data); //prints any number between 1236 and 1254\n\tworker.terminate();\n}\n```\n\n### manual redirection\n```javascript\n//parent is started with '--debug=1234'\nvar Worker = require(\"tiny-worker\");\n\nvar worker = new Worker(function () {\n\tpostMessage(process.debugPort); \n}, [], {noDebugRedirection: true, execArgv: [\"--debug=1235\"]});\n\nworker.onmessage = function (ev) {\n\tconsole.log(ev.data); //prints 1235\n\tworker.terminate();\n}\n```\n\n## Properties\n#### onmessage\nMessage handler, accepts an `Event`\n\n#### onerror\nError handler, accepts an `Event`\n\n## API\n#### addEventListener(event, fn)\nAdds an event listener\n\n#### postMessage()\nBroadcasts a message to the `Worker`\n\n#### terminate()\nTerminates the `Worker`\n\n#### static setRange(min, max)\nSets range for debug ports, only affects current process.\nReturns true if successful.\n\n## FAQ\n1. I have an orphaned child process that lives on past the parent process' lifespan\n  * Most likely a `SIGTERM` or `SIGINT` is not reaching the child process\n2. How do I insure all process are terminated?\n  * In your core script register a listener for `SIGTERM` or `SIGINT` via `process.on()` which terminates (all) worker process(es) and then gracefully shutdowns via `process.exit(0);`\n3. Why `SIGTERM` or `SIGINT`?\n  * Unix/BSD will work with `SIGTERM`, but if you also need to support Windows use `SIGINT`\n\n## License\nCopyright (c) 2019 Jason Mulligan\nLicensed under the BSD-3 license\n",
    "licenseText": "Copyright (c) 2019, Jason Mulligan\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of tiny-worker nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tiny-worker/-/tiny-worker-2.3.0.tgz#715ae34304c757a9af573ae9a8e3967177e6011e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tiny-worker/-/tiny-worker-2.3.0.tgz",
    "hash": "715ae34304c757a9af573ae9a8e3967177e6011e",
    "integrity": "sha512-pJ70wq5EAqTAEl9IkGzA+fN0836rycEuz2Cn6yeZ6FRzlVS5IDOkFHpIoEsksPRQV34GDqXm65+OlnZqUSyK2g==",
    "registry": "npm",
    "packageName": "tiny-worker",
    "cacheIntegrity": "sha512-pJ70wq5EAqTAEl9IkGzA+fN0836rycEuz2Cn6yeZ6FRzlVS5IDOkFHpIoEsksPRQV34GDqXm65+OlnZqUSyK2g== sha1-cVrjQwTHV6mvVzrpqOOWcXfmAR4="
  },
  "registry": "npm",
  "hash": "715ae34304c757a9af573ae9a8e3967177e6011e"
}