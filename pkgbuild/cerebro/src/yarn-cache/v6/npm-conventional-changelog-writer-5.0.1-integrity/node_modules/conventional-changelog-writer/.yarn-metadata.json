{
  "manifest": {
    "name": "conventional-changelog-writer",
    "version": "5.0.1",
    "description": "Write logs based on conventional commits and templates",
    "bugs": {
      "url": "https://github.com/conventional-changelog/conventional-changelog/issues"
    },
    "homepage": "https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-writer#readme",
    "author": {
      "name": "Steve Mao",
      "email": "maochenyan@gmail.com",
      "url": "https://github.com/stevemao"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/conventional-changelog/conventional-changelog.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">=10"
    },
    "files": [
      "index.js",
      "cli.js",
      "lib",
      "templates"
    ],
    "keywords": [
      "conventional-changelog-writer",
      "changelog",
      "conventional",
      "commits",
      "templates",
      "writer",
      "writing",
      "logs"
    ],
    "dependencies": {
      "conventional-commits-filter": "^2.0.7",
      "dateformat": "^3.0.0",
      "handlebars": "^4.7.7",
      "json-stringify-safe": "^5.0.1",
      "lodash": "^4.17.15",
      "meow": "^8.0.0",
      "semver": "^6.0.0",
      "split": "^1.0.0",
      "through2": "^4.0.0"
    },
    "scripts": {
      "test-windows": "echo 'make work on windows'"
    },
    "bin": {
      "conventional-changelog-writer": "cli.js"
    },
    "devDependencies": {
      "dedent": "^0.7.0",
      "forceable-tty": "^0.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-conventional-changelog-writer-5.0.1-integrity/node_modules/conventional-changelog-writer/package.json",
    "readmeFilename": "README.md",
    "readme": "#  [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url] [![Coverage Status][coveralls-image]][coveralls-url]\n\n> Write logs based on conventional commits and templates\n\n## Install\n\n```sh\n$ npm install --save conventional-changelog-writer\n```\n\n## Usage\n\n```js\nvar conventionalChangelogWriter = require('conventional-changelog-writer');\n\nconventionalChangelogWriter(context, options);\n```\n\nIt returns a transform stream.\n\nIt expects an object mode upstream that looks something like this:\n\n```js\n{ hash: '9b1aff905b638aa274a5fc8f88662df446d374bd',\n  header: 'feat(scope): broadcast $destroy event on scope destruction',\n  type: 'feat',\n  scope: 'scope',\n  subject: 'broadcast $destroy event on scope destruction',\n  body: null,\n  footer: 'Closes #1',\n  notes: [],\n  references: [ { action: 'Closes', owner: null, repository: null, issue: '1', raw: '#1' } ] }\n{ hash: '13f31602f396bc269076ab4d389cfd8ca94b20ba',\n  header: 'feat(ng-list): Allow custom separator',\n  type: 'feat',\n  scope: 'ng-list',\n  subject: 'Allow custom separator',\n  body: 'bla bla bla',\n  footer: 'BREAKING CHANGE: some breaking change',\n  notes: [ { title: 'BREAKING CHANGE', text: 'some breaking change' } ],\n  references: [] }\n```\n\nEach chunk should be a commit. Json object is also **valid**. Parts of the objects will be formatted and combined into a log based on the handlebars context, templates and options.\n\nThe downstream might look something like this:\n\n```js\n## 0.0.1 \"this is a title\" (2015-05-29)\n\n\n### Features\n\n* **ng-list:** Allow custom separator ([13f3160](https://github.com/a/b/commits/13f3160))\n* **scope:** broadcast $destroy event on scope destruction ([9b1aff9](https://github.com/a/b/commits/9b1aff9)), closes [#1](https://github.com/a/b/issues/1)\n\n\n### BREAKING CHANGES\n\n* some breaking change\n```\n\n\n## API\n\n### conventionalChangelogWriter([context, [options]])\n\nReturns a transform stream.\n\n### conventionalChangelogWriter.parseArray(commits, [context, [options]])\n\nRather than returning a transform stream for parsing commits,\nparses the array of commits provided generating a CHANGELOG entry.\n\n#### context\n\nVariables that will be interpolated to the template. This object contains, but not limits to the following fields.\n\n##### version\n\nType: `string`\n\nVersion number of the up-coming release. If `version` is found in the last commit before generating logs, it will be overwritten.\n\n##### title\n\nType: `string`\n\n##### isPatch\n\nType: `boolean` Default: `semver.patch(context.version) !== 0`\n\nBy default, this value is true if `version`'s patch is `0`.\n\n##### host\n\nType: `string`\n\nThe hosting website. Eg: `'https://github.com'` or `'https://bitbucket.org'`\n\n##### owner\n\nType: `string`\n\nThe owner of the repository. Eg: `'stevemao'`.\n\n##### repository\n\nType: `string`\n\nThe repository name on `host`. Eg: `'conventional-changelog-writer'`.\n\n##### repoUrl\n\nType: `string`\n\nThe whole repository url. Eg: `'https://github.com/conventional-changelog/conventional-changelog-writer'`.\nThe should be used as a fallback when `context.repository` doesn't exist.\n\n##### linkReferences\n\nType: `boolean` Default: `true` if (`context.repository` or `context.repoUrl`), `context.commit` and `context.issue` are truthy\n\nShould all references be linked?\n\n##### commit\n\nType: `string` Default: `'commits'`\n\nCommit keyword in the url if `context.linkReferences === true`.\n\n##### issue\n\nType: `string` Default: `'issues'`\n\nIssue or pull request keyword in the url if `context.linkReferences === true`.\n\n##### date\n\nType: `string` Default: `dateFormat(new Date(), 'yyyy-mm-dd', true)`\n\nDefault to formatted (`'yyyy-mm-dd'`) today's date. [dateformat](https://github.com/felixge/node-dateformat) is used for formatting the date. If `version` is found in the last commit, `committerDate` will overwrite this.\n\n#### options\n\nType: `object`\n\n##### transform\n\nType: `object` or `function` Default: get the first 7 digits of hash, and `committerDate` will be formatted as `'yyyy-mm-dd'`.\n\nReplace with new values in each commit.\n\nIf this is an object, the keys are paths to a nested object property. the values can be a string (static) and a function (dynamic) with the old value and path passed as arguments. This value is merged with your own transform object.\n\nIf this is a function, the commit chunk will be passed as the argument and the returned value would be the new commit object. This is a handy function if you can't provide a transform stream as an upstream of this one. If returns a falsy value this commit is ignored.\n\na `raw` object that is originally poured form upstream is attached to `commit`.\n\n##### groupBy\n\nType: `string` Default: `'type'`\n\nHow to group the commits. EG: based on the same type. If this value is falsy, commits are not grouped.\n\n##### commitGroupsSort\n\nType: `function`, `string` or `array`\n\nA compare function used to sort commit groups. If it's a string or array, it sorts on the property(ies) by `localeCompare`. Will not sort if this is a falsy value.\n\n##### commitsSort\n\nType: `function`, `string` or `array` Default: `'header'`\n\nA compare function used to sort commits. If it's a string or array, it sorts on the property(ies) by `localeCompare`. Will not sort if this is a falsy value.\n\n##### noteGroupsSort\n\nType: `function`, `string` or `array` Default: `'title'`\n\nA compare function used to sort note groups. If it's a string or array, it sorts on the property(ies) by `localeCompare`. Will not sort if this is a falsy value.\n\n##### notesSort\n\nType: `function`, `string` or `array` Default: `'text'`\n\nA compare function used to sort note groups. If it's a string or array, it sorts on the property(ies) by `localeCompare`. Will not sort if this is a falsy value.\n\n##### generateOn\n\nType: `function`, `string` or `any` Default: if `commit.version` is a valid semver.\n\nWhen the upstream finishes pouring the commits it will generate a block of logs if `doFlush` is `true`. However, you can generate more than one block based on this criteria (usually a version) even if there are still commits from the upstream.\n\n###### generateOn(commit, commits, context, options)\n\n####### commit\n\nCurrent commit.\n\n####### commits\n\nCurrent collected commits.\n\n####### context\n\nThe generated context based on original input `context` and `options`.\n\n####### options\n\nNormalized options.\n\n**NOTE**: It checks on the transformed commit chunk instead of the original one (you can check on the original by access the `raw` object on the `commit`). However, if the transformed commit is ignored it falls back to the original commit.\n\nIf this value is a `string`, it checks the existence of the field. Set to other type to disable it.\n\n##### finalizeContext\n\nType: `function` Default: pass through\n\nLast chance to modify your context before generating a changelog.\n\n###### finalizeContext(context, options, commits, keyCommit)\n\n####### context\n\nThe generated context based on original input `context` and `options`.\n\n####### options\n\nNormalized options.\n\n####### commits\n\nFiltered commits from your git metadata.\n\n####### keyCommit\n\nThe commit that triggers to generate the log.\n\n##### debug\n\nType: `function` Default: `function() {}`\n\nA function to get debug information.\n\n##### reverse\n\nType: `boolean` Default: `false`\n\nThe normal order means reverse chronological order. `reverse` order means chronological order. Are the commits from upstream in the reverse order? You should only worry about this when generating more than one blocks of logs based on `generateOn`. If you find the last commit is in the wrong block inverse this value.\n\n##### includeDetails\n\nType: `boolean` Default: `false`\n\nIf this value is `true`, instead of emitting strings of changelog, it emits objects containing the details the block.\n\n*NOTE:* The downstream must be in object mode if this is `true`.\n*NOTE:* This is only supported when using streaming mode.\n\n##### ignoreReverted\n\nType: `boolean` Default: `true`\n\nIf `true`, reverted commits will be ignored.\n\n##### doFlush\n\nType: `boolean` Default: `true`\n\nIf `true`, the stream will flush out the last bit of commits (could be empty) to changelog.\n\n*NOTE:* This is only supported when using streaming mode.\n\n##### mainTemplate\n\nType: `string` Default: [template.hbs](templates/template.hbs)\n\nThe main handlebars template.\n\n##### headerPartial\n\nType: `string` Default: [header.hbs](templates/header.hbs)\n\n##### commitPartial\n\nType: `string` Default: [commit.hbs](templates/commit.hbs)\n\n##### footerPartial\n\nType: `string` Default: [footer.hbs](templates/footer.hbs)\n\n##### partials\n\nType: `object`\n\nPartials that used in the main template, if any. The key should be the partial name and the value should be handlebars template strings. If you are using handlebars template files, read files by yourself.\n\n\n## Customization Guide\n\nIt is possible to customize this the changelog to suit your needs. Templates are written in [handlebars](http://handlebarsjs.com). You can customize all partials or the whole template. Template variables are from either `upstream` or `context`. The following are a suggested way of defining variables.\n\n### upstream\n\nVariables in upstream are commit specific and should be used per commit. Eg: *commit date* and *commit username*. You can think of them as \"local\" or \"isolate\" variables. A \"raw\" commit message (original commit poured from upstream) is attached to `commit`. `transform` can be used to modify a commit.\n\n### context\n\ncontext should be module specific and can be used across the whole log. Thus these variables should not be related to any single commit and should be generic information of the module or all commits. Eg: *repository url* and *author names*, etc. You can think of them as \"global\" or \"root\" variables.\n\nBasically you can make your own templates and define all your template context. Extra context are based on commits from upstream and `options`. For more details, please checkout [handlebars](http://handlebarsjs.com) and the source code of this module. `finalizeContext` can be used at last to modify context before generating a changelog.\n\n\n## CLI\n\n```sh\n$ npm install --global conventional-changelog-writer\n$ conventional-changelog-writer --help # for more details\n```\n\nIt works with [Line Delimited JSON](http://en.wikipedia.org/wiki/Line_Delimited_JSON).\n\nIf you have commits.ldjson\n\n```js\n{\"hash\":\"9b1aff905b638aa274a5fc8f88662df446d374bd\",\"header\":\"feat(ngMessages): provide support for dynamic message resolution\",\"type\":\"feat\",\"scope\":\"ngMessages\",\"subject\":\"provide support for dynamic message resolution\",\"body\":\"Prior to this fix it was impossible to apply a binding to a the ngMessage directive to represent the name of the error.\",\"footer\":\"BREAKING CHANGE: The `ngMessagesInclude` attribute is now its own directive and that must be placed as a **child** element within the element with the ngMessages directive.\\nCloses #10036\\nCloses #9338\",\"notes\":[{\"title\":\"BREAKING CHANGE\",\"text\":\"The `ngMessagesInclude` attribute is now its own directive and that must be placed as a **child** element within the element with the ngMessages directive.\"}],\"references\":[{\"action\":\"Closes\",\"owner\",null,\"repository\":null,\"issue\":\"10036\",\"raw\":\"#10036\"},{\"action\":\"Closes\",\"owner\":null,\"repository\":null,\"issue\":\"9338\",\"raw\":\"#9338\"}]}\n```\n\nAnd you run\n\n```sh\n$ conventional-changelog-writer commits.ldjson -o options.js\n```\n\nThe output might look something like this\n\n```md\n# 1.0.0 (2015-04-09)\n\n\n### Features\n\n* **ngMessages:** provide support for dynamic message resolution 9b1aff9, closes #10036 #9338\n\n\n### BREAKING CHANGES\n\n* The `ngMessagesInclude` attribute is now its own directive and that must be placed as a **child** element within the element with the ngMessages directive.\n```\n\nIt is printed to stdout.\n\n\n## License\n\nMIT © [Steve Mao](https://github.com/stevemao)\n\n\n[npm-image]: https://badge.fury.io/js/conventional-changelog-writer.svg\n[npm-url]: https://npmjs.org/package/conventional-changelog-writer\n[travis-image]: https://travis-ci.org/conventional-changelog/conventional-changelog-writer.svg?branch=master\n[travis-url]: https://travis-ci.org/conventional-changelog/conventional-changelog-writer\n[daviddm-image]: https://david-dm.org/conventional-changelog/conventional-changelog-writer.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/conventional-changelog/conventional-changelog-writer\n[coveralls-image]: https://coveralls.io/repos/conventional-changelog/conventional-changelog-writer/badge.svg\n[coveralls-url]: https://coveralls.io/r/conventional-changelog/conventional-changelog-writer\n",
    "licenseText": "### MIT License\n\nCopyright © [conventional-changelog team](https://github.com/conventional-changelog)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/conventional-changelog-writer/-/conventional-changelog-writer-5.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/conventional-changelog-writer/-/conventional-changelog-writer-5.0.1.tgz",
    "hash": "",
    "integrity": "sha512-5WsuKUfxW7suLblAbFnxAcrvf6r+0b7GvNaWUwUIk0bXMnENP/PEieGKVUQrjPqwPT4o3EPAASBXiY6iHooLOQ==",
    "registry": "npm",
    "packageName": "conventional-changelog-writer",
    "cacheIntegrity": "sha512-5WsuKUfxW7suLblAbFnxAcrvf6r+0b7GvNaWUwUIk0bXMnENP/PEieGKVUQrjPqwPT4o3EPAASBXiY6iHooLOQ== sha1-4HVwcvBF/gPZHaY0PIQwKecC81k="
  },
  "registry": "npm",
  "hash": "e56b2e2947f15bbb2e2db9406c59f101caef7faafed1bec6bcd6965305089346d732710d3ff3c489e18a55442b8cfab03d3e28dc43c0012057898ea21e8a0b39"
}