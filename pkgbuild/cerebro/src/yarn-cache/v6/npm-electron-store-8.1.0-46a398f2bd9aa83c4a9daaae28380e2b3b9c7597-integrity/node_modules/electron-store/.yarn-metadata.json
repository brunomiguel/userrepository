{
  "manifest": {
    "name": "electron-store",
    "version": "8.1.0",
    "description": "Simple data persistence for your Electron app or module - Save and load user preferences, app state, cache, etc",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/electron-store.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "electron",
      "store",
      "app",
      "config",
      "storage",
      "conf",
      "configuration",
      "settings",
      "preferences",
      "json",
      "data",
      "persist",
      "persistent",
      "save"
    ],
    "dependencies": {
      "conf": "^10.2.0",
      "type-fest": "^2.17.0"
    },
    "devDependencies": {
      "ava": "^2.4.0",
      "electron": "^12.0.4",
      "execa": "^5.0.0",
      "tsd": "^0.14.0",
      "xo": "^0.38.2"
    },
    "xo": {
      "envs": [
        "node",
        "browser"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-store-8.1.0-46a398f2bd9aa83c4a9daaae28380e2b3b9c7597-integrity/node_modules/electron-store/package.json",
    "readmeFilename": "readme.md",
    "readme": "# electron-store\n\n> Simple data persistence for your [Electron](https://electronjs.org) app or module - Save and load user preferences, app state, cache, etc\n\nElectron doesn't have a built-in way to persist user preferences and other data. This module handles that for you, so you can focus on building your app. The data is saved in a JSON file named config.json in [`app.getPath('userData')`](https://electronjs.org/docs/api/app#appgetpathname).\n\nYou can use this module directly in both the main and renderer process. For use in the renderer process only, you need to call `Store.initRenderer()` in the main process, or create a new Store instance (`new Store()`) in the main process.\n\n<br>\n\n---\n\n<div align=\"center\">\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\t<a href=\"https://github.com/sponsors/sindresorhus\">My open source work is supported by the community</a>\n\t\t\t</sup>\n\t\t</p>\n\t\t<sup>Special thanks to:</sup>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://standardresume.co/tech\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/standard-resume-logo.svg\" width=\"200\"/>\n\t\t</a>\n\t</p>\n\t<br>\n\t<a href=\"https://keygen.sh\">\n\t\t<div>\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/keygen-logo.svg\" width=\"210\" alt=\"Keygen\">\n\t\t</div>\n\t\t<b>A dead-simple software licensing and distribution API built for developers</b>\n\t</a>\n\t<br>\n</div>\n\n---\n\n<br>\n\n## Install\n\n```\n$ npm install electron-store\n```\n\n*Requires Electron 11 or later.*\n\n## Usage\n\n```js\nconst Store = require('electron-store');\n\nconst store = new Store();\n\nstore.set('unicorn', 'ðŸ¦„');\nconsole.log(store.get('unicorn'));\n//=> 'ðŸ¦„'\n\n// Use dot-notation to access nested properties\nstore.set('foo.bar', true);\nconsole.log(store.get('foo'));\n//=> {bar: true}\n\nstore.delete('unicorn');\nconsole.log(store.get('unicorn'));\n//=> undefined\n```\n\n## API\n\nChanges are written to disk atomically, so if the process crashes during a write, it will not corrupt the existing config.\n\n### Store(options?)\n\nReturns a new instance.\n\n### options\n\nType: `object`\n\n#### defaults\n\nType: `object`\n\nDefault values for the store items.\n\n**Note:** The values in `defaults` will overwrite the `default` key in the `schema` option.\n\n#### schema\n\ntype: `object`\n\n[JSON Schema](https://json-schema.org) to validate your config data.\n\nUnder the hood, the JSON Schema validator [ajv](https://github.com/epoberezkin/ajv) is used to validate your config. We use [JSON Schema draft-07](http://json-schema.org/latest/json-schema-validation.html) and support all [validation keywords](https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md) and [formats](https://github.com/epoberezkin/ajv#formats).\n\nYou should define your schema as an object where each key is the name of your data's property and each value is a JSON schema used to validate that property. See more [here](https://json-schema.org/understanding-json-schema/reference/object.html#properties).\n\nExample:\n\n```js\nconst Store = require('electron-store');\n\nconst schema = {\n\tfoo: {\n\t\ttype: 'number',\n\t\tmaximum: 100,\n\t\tminimum: 1,\n\t\tdefault: 50\n\t},\n\tbar: {\n\t\ttype: 'string',\n\t\tformat: 'url'\n\t}\n};\n\nconst store = new Store({schema});\n\nconsole.log(store.get('foo'));\n//=> 50\n\nstore.set('foo', '1');\n// [Error: Config schema violation: `foo` should be number]\n```\n\n**Note:** The `default` value will be overwritten by the `defaults` option if set.\n\n#### migrations\n\nType: `object`\n\nYou can use migrations to perform operations to the store whenever a version is upgraded.\n\nThe `migrations` object should consist of a key-value pair of `'version': handler`. The `version` can also be a [semver range](https://github.com/npm/node-semver#ranges).\n\nExample:\n\n```js\nconst Store = require('electron-store');\n\nconst store = new Store({\n\tmigrations: {\n\t\t'0.0.1': store => {\n\t\t\tstore.set('debugPhase', true);\n\t\t},\n\t\t'1.0.0': store => {\n\t\t\tstore.delete('debugPhase');\n\t\t\tstore.set('phase', '1.0.0');\n\t\t},\n\t\t'1.0.2': store => {\n\t\t\tstore.set('phase', '1.0.2');\n\t\t},\n\t\t'>=2.0.0': store => {\n\t\t\tstore.set('phase', '>=2.0.0');\n\t\t}\n\t}\n});\n```\n\n### beforeEachMigration\n\nType: `Function`\\\nDefault: `undefined`\n\nThe given callback function will be called before each migration step.\n\nThe function receives the store as the first argument and a context object as the second argument with the following properties:\n\n- `fromVersion` - The version the migration step is being migrated from.\n- `toVersion` - The version the migration step is being migrated to.\n- `finalVersion` - The final version after all the migrations are applied.\n- `versions` - All the versions with a migration step.\n\nThis can be useful for logging purposes, preparing migration data, etc.\n\nExample:\n\n```js\nconst Store = require('electron-store');\n\nconsole.log = someLogger.log;\n\nconst mainConfig = new Store({\n\tbeforeEachMigration: (store, context) => {\n\t\tconsole.log(`[main-config] migrate from ${context.fromVersion} â†’ ${context.toVersion}`);\n\t},\n\tmigrations: {\n\t\t'0.4.0': store => {\n\t\t\tstore.set('debugPhase', true);\n\t\t}\n\t}\n});\n\nconst secondConfig = new Store({\n\tbeforeEachMigration: (store, context) => {\n\t\tconsole.log(`[second-config] migrate from ${context.fromVersion} â†’ ${context.toVersion}`);\n\t},\n\tmigrations: {\n\t\t'1.0.1': store => {\n\t\t\tstore.set('debugPhase', true);\n\t\t}\n\t}\n});\n```\n\n#### name\n\nType: `string`\\\nDefault: `'config'`\n\nName of the storage file (without extension).\n\nThis is useful if you want multiple storage files for your app. Or if you're making a reusable Electron module that persists some data, in which case you should **not** use the name `config`.\n\n#### cwd\n\nType: `string`\\\nDefault: [`app.getPath('userData')`](https://electronjs.org/docs/api/app#appgetpathname)\n\nStorage file location. *Don't specify this unless absolutely necessary! By default, it will pick the optimal location by adhering to system conventions. You are very likely to get this wrong and annoy users.*\n\nIf a relative path, it's relative to the default cwd. For example, `{cwd: 'unicorn'}` would result in a storage file in `~/Library/Application Support/App Name/unicorn`.\n\n#### encryptionKey\n\nType: `string | Buffer | TypedArray | DataView`\\\nDefault: `undefined`\n\nNote that this is **not intended for security purposes**, since the encryption key would be easily found inside a plain-text Node.js app.\n\nIts main use is for obscurity. If a user looks through the config directory and finds the config file, since it's just a JSON file, they may be tempted to modify it. By providing an encryption key, the file will be obfuscated, which should hopefully deter any users from doing so.\n\nWhen specified, the store will be encrypted using the [`aes-256-cbc`](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation) encryption algorithm.\n\n#### fileExtension\n\nType: `string`\\\nDefault: `'json'`\n\nExtension of the config file.\n\nYou would usually not need this, but could be useful if you want to interact with a file with a custom file extension that can be associated with your app. These might be simple save/export/preference files that are intended to be shareable or saved outside of the app.\n\n#### clearInvalidConfig\n\nType: `boolean`\\\nDefault: `false`\n\nThe config is cleared if reading the config file causes a `SyntaxError`. This is a good behavior for unimportant data, as the config file is not intended to be hand-edited, so it usually means the config is corrupt and there's nothing the user can do about it anyway. However, if you let the user edit the config file directly, mistakes might happen and it could be more useful to throw an error when the config is invalid instead of clearing.\n\n#### serialize\n\nType: `Function`\\\nDefault: `value => JSON.stringify(value, null, '\\t')`\n\nFunction to serialize the config object to a UTF-8 string when writing the config file.\n\nYou would usually not need this, but it could be useful if you want to use a format other than JSON.\n\n#### deserialize\n\nType: `Function`\\\nDefault: `JSON.parse`\n\nFunction to deserialize the config object from a UTF-8 string when reading the config file.\n\nYou would usually not need this, but it could be useful if you want to use a format other than JSON.\n\n#### accessPropertiesByDotNotation\n\nType: `boolean`\\\nDefault: `true`\n\nAccessing nested properties by dot notation. For example:\n\n```js\nconst Store = require('electron-store');\n\nconst store = new Store();\n\nstore.set({\n\tfoo: {\n\t\tbar: {\n\t\t\tfoobar: 'ðŸ¦„'\n\t\t}\n\t}\n});\n\nconsole.log(store.get('foo.bar.foobar'));\n//=> 'ðŸ¦„'\n```\n\nAlternatively, you can set this option to `false` so the whole string would be treated as one key.\n\n```js\nconst store = new Store({accessPropertiesByDotNotation: false});\n\nstore.set({\n\t`foo.bar.foobar`: 'ðŸ¦„'\n});\n\nconsole.log(store.get('foo.bar.foobar'));\n//=> 'ðŸ¦„'\n```\n\n#### watch\n\nType: `boolean`\\\nDefault: `false`\n\nWatch for any changes in the config file and call the callback for `onDidChange` or `onDidAnyChange` if set. This is useful if there are multiple processes changing the same config file, for example, if you want changes done in the main process to be reflected in a renderer process.\n\n### Instance\n\nYou can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a `key` to access nested properties.\n\nThe instance is [`iterable`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols) so you can use it directly in a [`forâ€¦of`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of) loop.\n\n#### .set(key, value)\n\nSet an item.\n\nThe `value` must be JSON serializable. Trying to set the type `undefined`, `function`, or `symbol` will result in a TypeError.\n\n#### .set(object)\n\nSet multiple items at once.\n\n#### .get(key, defaultValue?)\n\nGet an item or `defaultValue` if the item does not exist.\n\n#### .reset(...keys)\n\nReset items to their default values, as defined by the `defaults` or `schema` option.\n\nUse `.clear()` to reset all items.\n\n#### .has(key)\n\nCheck if an item exists.\n\n#### .delete(key)\n\nDelete an item.\n\n#### .clear()\n\nDelete all items.\n\nThis resets known items to their default values, if defined by the `defaults` or `schema` option.\n\n#### .onDidChange(key, callback)\n\n`callback`: `(newValue, oldValue) => {}`\n\nWatches the given `key`, calling `callback` on any changes.\n\nWhen a key is first set `oldValue` will be `undefined`, and when a key is deleted `newValue` will be `undefined`.\n\nReturns a function which you can use to unsubscribe:\n\n```js\nconst unsubscribe = store.onDidChange(key, callback);\n\nunsubscribe();\n```\n\n#### .onDidAnyChange(callback)\n\n`callback`: `(newValue, oldValue) => {}`\n\nWatches the whole config object, calling `callback` on any changes.\n\n`oldValue` and `newValue` will be the config object before and after the change, respectively. You must compare `oldValue` to `newValue` to find out what changed.\n\nReturns a function which you can use to unsubscribe:\n\n```js\nconst unsubscribe = store.onDidAnyChange(callback);\n\nunsubscribe();\n```\n\n#### .size\n\nGet the item count.\n\n#### .store\n\nGet all the data as an object or replace the current data with an object:\n\n```js\nconst Store = require('electron-store');\n\nconst store = new Store();\n\nstore.store = {\n\thello: 'world'\n};\n```\n\n#### .path\n\nGet the path to the storage file.\n\n#### .openInEditor()\n\nOpen the storage file in the user's editor.\n\n### initRenderer()\n\nInitializer to set up the required `ipc` communication channels for the module when a `Store` instance is not created in the main process and you are creating a `Store` instance in the Electron renderer process only.\n\nIn the main process:\n\n```js\nconst Store = require('electron-store');\n\nStore.initRenderer();\n```\n\nAnd in the renderer process:\n\n```js\nconst Store = require('electron-store');\n\nconst store = new Store();\n\nstore.set('unicorn', 'ðŸ¦„');\nconsole.log(store.get('unicorn'));\n//=> 'ðŸ¦„'\n```\n\n## FAQ\n\n#### [Advantages over `window.localStorage`](https://github.com/sindresorhus/electron-store/issues/17)\n\n#### Can I use YAML or another serialization format?\n\nThe `serialize` and `deserialize` options can be used to customize the format of the config file, as long as the representation is compatible with `utf8` encoding.\n\nExample using YAML:\n\n```js\nconst Store = require('electron-store');\nconst yaml = require('js-yaml');\n\nconst store = new Store({\n\tfileExtension: 'yaml',\n\tserialize: yaml.safeDump,\n\tdeserialize: yaml.safeLoad\n});\n```\n\n#### How do I get store values in the renderer process when my store was initialized in the main process?\n\nThe store is not a singleton, so you will need to either [initialize the store in a file that is imported in both the main and renderer process](https://github.com/sindresorhus/electron-store/issues/15), or you have to pass the values back and forth as messages. Electron provides a handy [`invoke/handle` API](https://www.electronjs.org/docs/api/ipc-main#ipcmainhandlechannel-listener) that works well for accessing these values.\n\n```js\nipcMain.handle('getStoreValue', (event, key) => {\n\treturn store.get(key);\n});\n```\n\n```js\nconst foo = await ipcRenderer.invoke('getStoreValue', 'foo');\n```\n\n#### Can I use it for large amounts of data?\n\nThis package is not a database. It simply uses a JSON file that is read/written on every change. Prefer using it for smaller amounts of data like user settings, value caching, state, etc.\n\nIf you need to store large blobs of data, I recommend saving it to disk and to use this package to store the path to the file instead.\n\n## Related\n\n- [electron-util](https://github.com/sindresorhus/electron-util) - Useful utilities for developing Electron apps and modules\n- [electron-debug](https://github.com/sindresorhus/electron-debug) - Adds useful debug features to your Electron app\n- [electron-context-menu](https://github.com/sindresorhus/electron-context-menu) - Context menu for your Electron app\n- [electron-dl](https://github.com/sindresorhus/electron-dl) - Simplified file downloads for your Electron app\n- [electron-unhandled](https://github.com/sindresorhus/electron-unhandled) - Catch unhandled errors and promise rejections in your Electron app\n- [electron-reloader](https://github.com/sindresorhus/electron-reloader) - Simple auto-reloading for Electron apps during development\n- [electron-serve](https://github.com/sindresorhus/electron-serve) - Static file serving for Electron apps\n- [conf](https://github.com/sindresorhus/conf) - Simple config handling for your app or module\n- [Moreâ€¦](https://github.com/search?q=user%3Asindresorhus+electron)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-store/-/electron-store-8.1.0.tgz#46a398f2bd9aa83c4a9daaae28380e2b3b9c7597",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-store/-/electron-store-8.1.0.tgz",
    "hash": "46a398f2bd9aa83c4a9daaae28380e2b3b9c7597",
    "integrity": "sha512-2clHg/juMjOH0GT9cQ6qtmIvK183B39ZXR0bUoPwKwYHJsEF3quqyDzMFUAu+0OP8ijmN2CbPRAelhNbWUbzwA==",
    "registry": "npm",
    "packageName": "electron-store",
    "cacheIntegrity": "sha512-2clHg/juMjOH0GT9cQ6qtmIvK183B39ZXR0bUoPwKwYHJsEF3quqyDzMFUAu+0OP8ijmN2CbPRAelhNbWUbzwA== sha1-RqOY8r2aqDxKnaquKDgOKzucdZc="
  },
  "registry": "npm",
  "hash": "46a398f2bd9aa83c4a9daaae28380e2b3b9c7597"
}