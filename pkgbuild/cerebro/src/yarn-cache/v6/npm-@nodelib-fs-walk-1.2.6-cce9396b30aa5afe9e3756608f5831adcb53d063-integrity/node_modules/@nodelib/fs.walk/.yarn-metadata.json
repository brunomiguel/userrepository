{
  "manifest": {
    "name": "@nodelib/fs.walk",
    "version": "1.2.6",
    "description": "A library for efficiently walking a directory recursively",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/nodelib/nodelib/tree/master/packages/fs/fs.walk"
    },
    "keywords": [
      "NodeLib",
      "fs",
      "FileSystem",
      "file system",
      "walk",
      "scanner",
      "crawler"
    ],
    "engines": {
      "node": ">= 8"
    },
    "main": "out/index.js",
    "typings": "out/index.d.ts",
    "scripts": {
      "clean": "rimraf {tsconfig.tsbuildinfo,out}",
      "lint": "eslint \"src/**/*.ts\" --cache",
      "compile": "tsc -b .",
      "compile:watch": "tsc -p . --watch --sourceMap",
      "test": "mocha \"out/**/*.spec.js\" -s 0",
      "build": "npm run clean && npm run compile && npm run lint && npm test",
      "watch": "npm run clean && npm run compile:watch"
    },
    "dependencies": {
      "@nodelib/fs.scandir": "2.1.4",
      "fastq": "^1.6.0"
    },
    "gitHead": "bd149ea6dc1ef18c234730278271f6a7f3882ed2",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@nodelib-fs-walk-1.2.6-cce9396b30aa5afe9e3756608f5831adcb53d063-integrity/node_modules/@nodelib/fs.walk/package.json",
    "readmeFilename": "README.md",
    "readme": "# @nodelib/fs.walk\n\n> A library for efficiently walking a directory recursively.\n\n## :bulb: Highlights\n\n* :moneybag: Returns useful information: `name`, `path`, `dirent` and `stats` (optional).\n* :rocket: On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type for performance reasons. See [`old` and `modern` mode](https://github.com/nodelib/nodelib/blob/master/packages/fs/fs.scandir/README.md#old-and-modern-mode).\n* :gear: Built-in directories/files and error filtering system.\n* :link: Can safely work with broken symbolic links.\n\n## Install\n\n```console\nnpm install @nodelib/fs.walk\n```\n\n## Usage\n\n```ts\nimport * as fsWalk from '@nodelib/fs.walk';\n\nfsWalk.walk('path', (error, entries) => { /* … */ });\n```\n\n## API\n\n### .walk(path, [optionsOrSettings], callback)\n\nReads the directory recursively and asynchronously. Requires a callback function.\n\n> :book: If you want to use the Promise API, use `util.promisify`.\n\n```ts\nfsWalk.walk('path', (error, entries) => { /* … */ });\nfsWalk.walk('path', {}, (error, entries) => { /* … */ });\nfsWalk.walk('path', new fsWalk.Settings(), (error, entries) => { /* … */ });\n```\n\n### .walkStream(path, [optionsOrSettings])\n\nReads the directory recursively and asynchronously. [Readable Stream](https://nodejs.org/dist/latest-v12.x/docs/api/stream.html#stream_readable_streams) is used as a provider.\n\n```ts\nconst stream = fsWalk.walkStream('path');\nconst stream = fsWalk.walkStream('path', {});\nconst stream = fsWalk.walkStream('path', new fsWalk.Settings());\n```\n\n### .walkSync(path, [optionsOrSettings])\n\nReads the directory recursively and synchronously. Returns an array of entries.\n\n```ts\nconst entries = fsWalk.walkSync('path');\nconst entries = fsWalk.walkSync('path', {});\nconst entries = fsWalk.walkSync('path', new fsWalk.Settings());\n```\n\n#### path\n\n* Required: `true`\n* Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n* Required: `false`\n* Type: `Options | Settings`\n* Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settings) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings([options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsWalk.Settings({ followSymbolicLinks: true });\n\nconst entries = fsWalk.walkSync('path', settings);\n```\n\n## Entry\n\n* `name` — The name of the entry (`unknown.txt`).\n* `path` — The path of the entry relative to call directory (`root/unknown.txt`).\n* `dirent` — An instance of [`fs.Dirent`](./src/types/index.ts) class.\n* [`stats`] — An instance of `fs.Stats` class.\n\n## Options\n\n### basePath\n\n* Type: `string`\n* Default: `undefined`\n\nBy default, all paths are built relative to the root path. You can use this option to set custom root path.\n\nIn the example below we read the files from the `root` directory, but in the results the root path will be `custom`.\n\n```ts\nfsWalk.walkSync('root'); // → ['root/file.txt']\nfsWalk.walkSync('root', { basePath: 'custom' }); // → ['custom/file.txt']\n```\n\n### concurrency\n\n* Type: `number`\n* Default: `Infinity`\n\nThe maximum number of concurrent calls to `fs.readdir`.\n\n> :book: The higher the number, the higher performance and the load on the File System. If you want to read in quiet mode, set the value to `4 * os.cpus().length` (4 is default size of [thread pool work scheduling](http://docs.libuv.org/en/v1.x/threadpool.html#thread-pool-work-scheduling)).\n\n### deepFilter\n\n* Type: [`DeepFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that indicates whether the directory will be read deep or not.\n\n```ts\n// Skip all directories that starts with `node_modules`\nconst filter: DeepFilterFunction = (entry) => !entry.path.startsWith('node_modules');\n```\n\n### entryFilter\n\n* Type: [`EntryFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that indicates whether the entry will be included to results or not.\n\n```ts\n// Exclude all `.js` files from results\nconst filter: EntryFilterFunction = (entry) => !entry.name.endsWith('.js');\n```\n\n### errorFilter\n\n* Type: [`ErrorFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that allows you to skip errors that occur when reading directories.\n\nFor example, you can skip `ENOENT` errors if required:\n\n```ts\n// Skip all ENOENT errors\nconst filter: ErrorFilterFunction = (error) => error.code == 'ENOENT';\n```\n\n### stats\n\n* Type: `boolean`\n* Default: `false`\n\nAdds an instance of `fs.Stats` class to the [`Entry`](#entry).\n\n> :book: Always use `fs.readdir` with additional `fs.lstat/fs.stat` calls to determine the entry type.\n\n### followSymbolicLinks\n\n* Type: `boolean`\n* Default: `false`\n\nFollow symbolic links or not. Call `fs.stat` on symbolic link if `true`.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n* Type: `boolean`\n* Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n### `pathSegmentSeparator`\n\n* Type: `string`\n* Default: `path.sep`\n\nBy default, this package uses the correct path separator for your OS (`\\` on Windows, `/` on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead.\n\n### `fs`\n\n* Type: `FileSystemAdapter`\n* Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat: typeof fs.lstat;\n\tstat: typeof fs.stat;\n\tlstatSync: typeof fs.lstatSync;\n\tstatSync: typeof fs.statSync;\n\treaddir: typeof fs.readdir;\n\treaddirSync: typeof fs.readdirSync;\n}\n\nconst settings = new fsWalk.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Denis Malinochkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.6.tgz#cce9396b30aa5afe9e3756608f5831adcb53d063",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.6.tgz",
    "hash": "cce9396b30aa5afe9e3756608f5831adcb53d063",
    "integrity": "sha512-8Broas6vTtW4GIXTAHDoE32hnN2M5ykgCpWGbuXHQ15vEMqr23pB76e/GZcYsZCHALv50ktd24qhEyKr6wBtow==",
    "registry": "npm",
    "packageName": "@nodelib/fs.walk",
    "cacheIntegrity": "sha512-8Broas6vTtW4GIXTAHDoE32hnN2M5ykgCpWGbuXHQ15vEMqr23pB76e/GZcYsZCHALv50ktd24qhEyKr6wBtow== sha1-zOk5azCqWv6eN1Zgj1gxrctT0GM="
  },
  "registry": "npm",
  "hash": "cce9396b30aa5afe9e3756608f5831adcb53d063"
}