{
  "manifest": {
    "name": "observable-fns",
    "version": "0.6.1",
    "description": "Light-weight observable implementation and utils written in TypeScript. Based on zen-observable.",
    "author": {
      "name": "Andy Wermke",
      "url": "https://github.com/andywer"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/andywer/observable-fns.git"
    },
    "module": "./dist.esm/index.js",
    "sideEffects": [
      "**/_symbols.js"
    ],
    "scripts": {
      "prebuild": "rimraf dist/ dist.esm/",
      "build": "run-s build:cjs build:esm",
      "build:cjs": "tsc",
      "build:esm": "tsc -p ./tsconfig.esm.json",
      "create-entrypoints": "rimraf *.js *.d.ts && node ./scripts/create-entrypoints.js",
      "test": "ava",
      "posttest": "tslint --project .",
      "prepare": "run-s build create-entrypoints"
    },
    "devDependencies": {
      "ava": "^3.15.0",
      "npm-run-all": "^4.1.5",
      "rimraf": "^2.6.3",
      "ts-node": "^10.0.0",
      "tslint": "^5.18.0",
      "tslint-config-prettier": "^1.18.0",
      "typescript": "^4.3.2"
    },
    "ava": {
      "extensions": [
        "ts"
      ],
      "files": [
        "test/**/*.test.ts"
      ],
      "require": [
        "ts-node/register"
      ]
    },
    "files": [
      "dist/**",
      "dist.*/**",
      "types/**",
      "*.d.ts",
      "*.js"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-observable-fns-0.6.1-636eae4fdd1132e88c0faf38d33658cc79d87e37-integrity/node_modules/observable-fns/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">\n  üïµÔ∏è‚Äç‚ôÄÔ∏è observable-fns\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/andywer/observable-fns\" target=\"_blank\"><img alt=\"Build status\" src=\"https://img.shields.io/travis/andywer/observable-fns/master.svg?style=flat-square\"></a>\n  <a href=\"https://www.npmjs.com/package/observable-fns\" target=\"_blank\"><img alt=\"npm version\" src=\"https://img.shields.io/npm/v/observable-fns.svg?style=flat-square\"></a>\n  <a href=\"https://bundlephobia.com/result?p=observable-fns\" target=\"_blank\"><img alt=\"Complete bundle size\" src=\"https://badgen.net/bundlephobia/min/observable-fns\"></a>\n</p>\n\nLight-weight Observable implementation and common toolbelt functions. Based on [`zen-observable`](https://github.com/zenparsing/zen-observable), re-implemented in TypeScript. Zero dependencies, [tree-shakeable](https://bitsofco.de/what-is-tree-shaking/).\n\nThe aim is to provide a lean Observable implementation with a small footprint that's fit to be used in libraries as an alternative to the huge RxJS.\n\nFind all the provided functions and constructors in the üëâ [API Documentation](./docs/API.md)\n\n<br>\n\nüß©&nbsp;&nbsp;Composable functional streams\n\nüöÄ&nbsp;&nbsp;map(), filter() & friends support async handlers\n\nüî©&nbsp;&nbsp;Based on popular [`zen-observable`](https://github.com/zenparsing/zen-observable), re-implemented in TypeScript\n\nüå≥&nbsp;&nbsp;Zero dependencies, [tree-shakeable](https://bitsofco.de/what-is-tree-shaking/)\n\n---\n\n## Installation\n\n```\nnpm install observable-fns\n```\n\n## Observable?\n\nAn observable is basically a stream of asynchronously emitted values that you can subscribe to. In a sense it is to the event emitter what the promise is to the callback.\n\nThe main difference to a promise is that a promise only resolves once, whereas observables can yield values repeatedly. They can also fail with an error, like a promise, and they come with a completion event to indicate that no more values will be send.\n\nFor a quick introduction on how to use observables, check out the [zen-observable readme](https://github.com/zenparsing/zen-observable).\n\n```js\nimport { Observable, multicast } from \"observable-fns\"\n\nfunction subscribeToServerSentEvents(url) {\n  // multicast() will make the observable \"hot\", so multiple\n  // subscribers will share the same event source\n  return multicast(new Observable(observer => {\n    const eventStream = new EventSource(url)\n\n    eventStream.addEventListener(\"message\", message => observer.next(message))\n    eventStream.addEventListener(\"error\", error => observer.error(error))\n\n    return () => eventStream.close()\n  }))\n}\n\nsubscribeToServerSentEvents(\"http://localhost:3000/events\")\n  .filter(event => !event.isStale)\n  .subscribe(event => console.log(\"Server sent event:\", event))\n```\n\n## Usage\n\nYou can import everything you need directly from the package:\n\n```js\nimport { Observable, flatMap } from \"observable-fns\"\n```\n\nIf you write front-end code and care about bundle size, you can either depend on tree-shaking or explicitly import just the parts that you need:\n\n```js\nimport Observable from \"observable-fns/observable\"\nimport flatMap from \"observable-fns/flatMap\"\n```\n\nFunctions like `filter()`, `flatMap()`, `map()` accept asynchronous handlers ‚Äì this can be a big win compared to the usual methods on `Observable.prototype` that only work with synchronous handlers.\n\nThose functions will also make sure that the values are consistently emitted in the same order as the input observable emitted them.\n\n```js\nimport { Observable, filter } from \"observable-fns\"\n\nconst existingGitHubUsersObservable = Observable.from([\"andywer\", \"bcdef\", \"charlie\"])\n  .pipe(\n    filter(async name => {\n      const response = await fetch(`https://github.com/${name}`)\n      return response.status === 200\n    })\n  )\n```\n\n## API\n\nSee [docs/API.md](./docs/API.md) for an overview of the full API.\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Andy Wermke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/observable-fns/-/observable-fns-0.6.1.tgz#636eae4fdd1132e88c0faf38d33658cc79d87e37",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/observable-fns/-/observable-fns-0.6.1.tgz",
    "hash": "636eae4fdd1132e88c0faf38d33658cc79d87e37",
    "integrity": "sha512-9gRK4+sRWzeN6AOewNBTLXir7Zl/i3GB6Yl26gK4flxz8BXVpD3kt8amREmWNb0mxYOGDotvE5a4N+PtGGKdkg==",
    "registry": "npm",
    "packageName": "observable-fns",
    "cacheIntegrity": "sha512-9gRK4+sRWzeN6AOewNBTLXir7Zl/i3GB6Yl26gK4flxz8BXVpD3kt8amREmWNb0mxYOGDotvE5a4N+PtGGKdkg== sha1-Y26uT90RMuiMD6840zZYzHnYfjc="
  },
  "registry": "npm",
  "hash": "636eae4fdd1132e88c0faf38d33658cc79d87e37"
}