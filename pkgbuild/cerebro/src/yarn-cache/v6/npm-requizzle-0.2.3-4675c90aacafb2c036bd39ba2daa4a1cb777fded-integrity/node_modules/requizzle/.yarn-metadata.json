{
  "manifest": {
    "name": "requizzle",
    "version": "0.2.3",
    "description": "Swizzle a little something into your require() calls.",
    "main": "index.js",
    "scripts": {
      "test": "gulp test"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/hegemonic/requizzle.git"
    },
    "keywords": [
      "module",
      "modules",
      "require",
      "inject",
      "dependency",
      "swizzle"
    ],
    "author": {
      "name": "Jeff Williams",
      "email": "jeffrey.l.williams@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/hegemonic/requizzle/issues"
    },
    "homepage": "https://github.com/hegemonic/requizzle",
    "dependencies": {
      "lodash": "^4.17.14"
    },
    "devDependencies": {
      "expectations": "^1.0.0",
      "gulp": "^4.0.2",
      "gulp-eslint": "^6.0.0",
      "gulp-mocha": "^6.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-requizzle-0.2.3-4675c90aacafb2c036bd39ba2daa4a1cb777fded-integrity/node_modules/requizzle/package.json",
    "readmeFilename": "README.md",
    "readme": "# Requizzle\n\n[![Build Status](https://travis-ci.com/hegemonic/requizzle.svg?branch=master)](https://travis-ci.com/hegemonic/requizzle)\n\nSwizzle a little something into your Node.js modules.\n\n## What's Requizzle?\n\nRequizzle provides a drop-in replacement for Node.js's `require()` function.\nThis replacement enables you to change a module's source code when Node.js loads\nthe module.\n\nYou can use Requizzle in your test cases, or in production code if you like to\nlive dangerously.\n\n## How can I change a module with Requizzle?\n\nThere are several different ways:\n\n### Look for modules in new places\n\nWith Requizzle, you can add directories to the module lookup path, which forces\nNode.js to search those directories for modules. This can be useful if:\n\n+ You're tired of writing code like `require('../../../../../lib/foo')`.\n+ You want to expose your app's modules to external plugins.\n\n### Add code before or after the module's source code\n\nTamper with modules to your heart's delight by adding arbitrary code before or\nafter the module's own source code.\n\n### Mess with child modules\n\nWhen you use Requizzle to require a module, you can force each child module's\n`require` method to inherit your changes to the parent module. (By default, only\nthe parent module is changed.)\n\n## Will Requizzle break my dependencies?\n\nProbably not. It's true that Requizzle gives you plenty of new and exciting ways\nto tamper with, and possibly break, your module dependencies. But Requizzle also\ntries not to break anything on its own. In particular:\n\n+ **Requizzle preserves strict-mode declarations**.  If a module starts with a\nstrict-mode declaration, Requizzle keeps it in place. Your changes will appear\nafter the strict-mode declaration.\n+ **Requizzle leaves native modules alone**. If you use Requizzle to load one of\nNode.js's built-in modules, such as `fs` or `path`, Requizzle won't mess with\nit.\n\n## Usage\n\nThe Requizzle module exports a single function, which returns a drop-in\nreplacement for `require()`.\n\nWhen you call the function, you must pass in an `options` object, which can\ninclude any of these properties:\n\n+ `extras`: A pair of functions that return text to insert before or after the\nmodule's source code. Each function accepts two parameters: `targetPath`, the\npath to the required module, and `parentModule`, the `Module` object for the\nmodule's parent. Each function must return a string.\n    + `extras.before`: A function that returns text to insert before the\n    module's source code.\n    + `extras.after`: A function that returns text to insert after the module's\n    source code.\n+ `infect`: Determines whether child modules are infected with the same changes\nas the parent module. Set to `true` to force child modules to inherit your\nchanges. Defaults to `false`.\n+ `requirePaths`: Additional paths to search for required modules. For example,\nif `requirePaths` is set to `['/usr/lib/junk/modules']`, and you save a\nJavaScript module at `/usr/lib/junk/modules/mymodule.js`, you can require the\nmodule as `mymodule`.\n\n    You can provide an array of paths, which will be searched before the default\n    module paths, or an object with the following properties:\n\n    + `requirePaths.before`: An array of paths to search before the default\n    module paths.\n    + `requirePaths.after`: An array of paths to search after the default module\n    paths. Use this property if you want the module to use its own local\n    dependencies when possible, then fall back to the additional paths if\n    necessary.\n\n    By default, the require path is not changed.\n\n## Examples\n\n```js\nconst requizzle = require('requizzle');\n\n// Say hello and goodbye to each module.\nconst logRequire = requizzle({\n    extras: {\n        before: function(targetPath, parentModule) {\n            return 'console.log(\"Hello %s!\", ' + targetPath + ');\\n';\n        },\n        after: function(targetPath, parentModule) {\n            return 'console.log(\"Goodbye %s!\", ' + targetPath + ');\\n';\n        }\n    }\n});\n// Prints \"Hello /path/to/mymodule.js!\" and \"Goodbye /path/to/mymodule.js!\"\nconst myModule = logRequire('mymodule');\n\n// Look for modules in the current module's `lib` directory, and force child\n// modules to do the same.\nconst path = require('path');\nconst extraPathRequire = requizzle({\n    infect: true,\n    requirePaths: [path.join(__dirname, 'lib')]\n});\n// If `foo` needs to require a module in `./lib`, it can use `require('bar')`\n// instead of `require('./lib/bar')`.\nconst foo = extraPathRequire('./foo');\n```\n\n## Troubleshooting\n\nHere are some problems you might run into when you use Requizzle, along with\nsolutions to each problem. If you run into any problems that aren't addressed\nhere, please file a new issue!\n\n### Requizzle slowed down my code! A lot!\n\nRequizzle adds minimal overhead to the module-loading process. However, your\ncode will run _much_ slower than usual if you do both of the following:\n\n+ Use Requizzle's `infect` option.\n+ Require modules that have a lot of `require()` calls within the scope of\nindividual functions.\n\nIf Requizzle seems to slow down your app, look for module calls that are within\nfunction scope, then move them to each module's top-level scope.\n\n### Requizzle made my module do something weird!\n\nDo you have any\n[circular dependencies](https://nodejs.org/api/modules.html#modules_cycles) in\nthe modules that aren't working? Circular dependencies can cause unusual\nbehavior with Requizzle, just as they can without Requizzle. Try breaking the\ncircular dependency.\n\n### Requizzle violates the [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter)! It's an unnatural abomination!\n\nFair enough.\n\n## Changelog\n\n+ 0.2.3 (July 2019): Updated dependencies.\n+ 0.2.2 (May 2019): Fixed a compability issue with Node.js 12.\n+ 0.2.1 (December 2014): The `requirePaths` option no longer inserts an extra\nline break into the source file.\n+ 0.2.0 (June 2014): The `requirePaths` option can now contain `before` and\n`after` properties. Paths in the `before` property will be searched first; paths\nin the `after` property will be searched last.\n+ 0.1.1 (June 2014): If the `requirePaths` option is used, the module loader now\nsearches the extra paths first rather than last.\n+ 0.1.0 (June 2014): Initial release.\n\n## Acknowledgements ##\n\nRequizzle is very loosely adapted from Johannes Ewald's\n[rewire](https://github.com/jhnns/rewire) module, which is designed to modify a\nmodule's behavior for unit testing. If Requizzle doesn't meet your needs, please\ntake a look at rewire!\n\n## License\n\n[MIT license](LICENSE).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Google Inc.\nCopyright (c) 2012-2013 Johannes Ewald\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/requizzle/-/requizzle-0.2.3.tgz#4675c90aacafb2c036bd39ba2daa4a1cb777fded",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/requizzle/-/requizzle-0.2.3.tgz",
    "hash": "4675c90aacafb2c036bd39ba2daa4a1cb777fded",
    "integrity": "sha512-YanoyJjykPxGHii0fZP0uUPEXpvqfBDxWV7s6GKAiiOsiqhX6vHNyW3Qzdmqp/iq/ExbhaGbVrjB4ruEVSM4GQ==",
    "registry": "npm",
    "packageName": "requizzle",
    "cacheIntegrity": "sha512-YanoyJjykPxGHii0fZP0uUPEXpvqfBDxWV7s6GKAiiOsiqhX6vHNyW3Qzdmqp/iq/ExbhaGbVrjB4ruEVSM4GQ== sha1-RnXJCqyvssA2vTm6LapKHLd3/e0="
  },
  "registry": "npm",
  "hash": "4675c90aacafb2c036bd39ba2daa4a1cb777fded"
}