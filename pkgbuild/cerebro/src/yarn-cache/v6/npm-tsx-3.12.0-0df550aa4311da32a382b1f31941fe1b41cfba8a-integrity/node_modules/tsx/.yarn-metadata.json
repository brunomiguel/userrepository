{
  "manifest": {
    "name": "tsx",
    "version": "3.12.0",
    "description": "TypeScript Execute (tsx): Node.js enhanced with esbuild to run TypeScript & ESM files",
    "keywords": [
      "esbuild",
      "runtime",
      "node",
      "cjs",
      "commonjs",
      "esm",
      "typescript"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/esbuild-kit/tsx.git"
    },
    "author": {
      "name": "Hiroki Osame",
      "email": "hiroki.osame@gmail.com"
    },
    "type": "module",
    "files": [
      "dist"
    ],
    "exports": {
      "./package.json": "./package.json",
      ".": "./dist/loader.js",
      "./cli": "./dist/cli.js",
      "./suppress-warnings": "./dist/suppress-warnings.cjs",
      "./preflight": "./dist/preflight.cjs",
      "./repl": "./dist/repl.js"
    },
    "bin": {
      "tsx": "dist/cli.js"
    },
    "dependencies": {
      "@esbuild-kit/cjs-loader": "^2.4.0",
      "@esbuild-kit/core-utils": "^3.0.0",
      "@esbuild-kit/esm-loader": "^2.5.0"
    },
    "optionalDependencies": {
      "fsevents": "~2.3.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tsx-3.12.0-0df550aa4311da32a382b1f31941fe1b41cfba8a-integrity/node_modules/tsx/package.json",
    "readmeFilename": "README.md",
    "readme": "# tsx <a href=\"https://npm.im/tsx\"><img src=\"https://badgen.net/npm/v/tsx\"></a> <a href=\"https://npm.im/tsx\"><img src=\"https://badgen.net/npm/dm/tsx\"></a> <a href=\"https://packagephobia.now.sh/result?p=tsx\"><img src=\"https://packagephobia.now.sh/badge?p=tsx\"></a>\n\n> _TypeScript Execute (`tsx`)_: Node.js enhanced with [esbuild](https://esbuild.github.io/) to run TypeScript & ESM files\n\n### Features\n- Blazing fast on-demand TypeScript & ESM compilation\n- Works in both [CommonJS and ESM packages](https://nodejs.org/api/packages.html#type)\n- Supports next-gen TypeScript extensions (`.cts` & `.mts`)\n- Supports `node:` import prefixes\n- Hides experimental feature warnings\n- TypeScript REPL\n- Resolves `tsconfig.json` [`paths`](https://www.typescriptlang.org/tsconfig#paths)\n- Tested on Linux & Windows with Node.js v12~18\n\n<sub>Support this project by ⭐️ starring and sharing it. [Follow me](https://github.com/privatenumber) to see what other cool projects I'm working on! ❤️</sub>\n\n## About\n`tsx` is a CLI command (alternative to `node`) for seamlessly running TypeScript & ESM, in both `commonjs` & `module` package types.\n\nIt's powered by [esbuild](https://esbuild.github.io/) so it's insanely fast.\n\nWant to just run TypeScript code? Try tsx:\n\n```sh\nnpx tsx ./script.ts\n```\n\nHow does it compare to [ts-node](https://github.com/TypeStrong/ts-node)? Checkout the [comparison](https://github.com/privatenumber/ts-runtime-comparison).\n\n\n## Install\n\n### Local installation\nIf you're using it in an npm project, install it as a development dependency:\n```sh\nnpm install --save-dev tsx\n```\n\nYou can reference it directly in the `package.json#scripts` object:\n```json5\n{\n    \"scripts\": {\n        \"dev\": \"tsx ...\"\n    }\n}\n```\n\nTo use the binary, you can call it with [`npx`](https://docs.npmjs.com/cli/v8/commands/npx) while in the project directory:\n\n```sh\nnpx tsx ...\n```\n\n### Global installation\n\nIf you want to use it in any arbitrary project without [`npx`](https://docs.npmjs.com/cli/v8/commands/npx), install it globally:\n\n```sh\nnpm install --global tsx\n```\n\nThen, you can call `tsx` directly:\n\n```sh\ntsx ...\n```\n\n## Usage\n\n`tsx` is designed to be a drop-in replacement for `node`, so you can use it just the way you would use Node.js. All command-line arguments (with the exception of a few) are propagated to Node.js.\n\n\n### Run TypeScript / ESM / CJS module\n\nPass in a file to run:\n\n```sh\ntsx ./file.ts\n```\n\n#### Custom `tsconfig.json` path\nBy default, `tsconfig.json` will be detected from the current working directory.\n\nTo set a custom path, use the `--tsconfig` flag:\n\n```sh\ntsx --tsconfig ./path/to/tsconfig.custom.json ./file.ts\n```\n\n### Watch mode\nRun file and automatically rerun on changes:\n\n```sh\ntsx watch ./file.ts\n```\n\nAll imported files are watched except from the following directories:\n`node_modules`, `bower_components`, `vendor`, `dist`, and `.*` (hidden directories).\n\n#### Ignore files from watch\n\nTo exclude files from being watched, pass in a path or glob to the `--ignore` flag:\n```sh\ntsx watch --ignore ./ignore-me.js --ignore ./ignore-me-too.js ./file.ts\n```\n\n#### Tips\n- Press <kbd>Return</kbd> to manually rerun\n- Pass in `--clear-screen=false` to disable clearing the screen on rerun\n\n### REPL\nStart a TypeScript REPL by running with no arguments:\n\n```sh\ntsx\n```\n\n### Cache\nModules transformations are cached in the system cache directory ([`TMPDIR`](https://en.wikipedia.org/wiki/TMPDIR)). Transforms are cached by content hash, so duplicate dependencies are not re-transformed.\n\nSet the `--no-cache` flag to disable the cache:\n\n```sh\ntsx --no-cache ./file.ts\n```\n\n### Node.js Loader\n\n`tsx` is a standalone binary designed to be used in place of `node`, but sometimes you'll want to use `node` directly. For example, when adding TypeScript & ESM support to npm-installed binaries.\n\nTo use `tsx` as a  Node.js loader, simply pass it in to the [`--loader`](https://nodejs.org/api/esm.html#loaders) flag.\n\n> Note: The loader is limited to adding support for loading TypeScript/ESM files. CLI features such as _watch mode_ or suppressing \"experimental feature\" warnings will not be available.\n\n```sh\n# As a CLI flag\nnode --loader tsx ./file.ts\n\n# As an environment variable\nNODE_OPTIONS='--loader tsx' node ./file.ts\n```\n\n> Tip: In rare circumstances, you might be limited to using the [`-r, --require`](https://nodejs.org/api/cli.html#-r---require-module) flag.\n>\n> You can use [`@esbuild-kit/cjs-loader`](https://github.com/esbuild-kit/cjs-loader), but transformations will only be applied to `require()` (not `import`).\n\n\n### Hashbang\n\nIf you prefer to write scripts that doesn't need to be passed into tsx, you can declare it in the [hashbang](https://bash.cyberciti.biz/guide/Shebang).\n\nSimply add `#!/usr/bin/env tsx` at the top of your file:\n\n_file.ts_\n```ts\n#!/usr/bin/env tsx\n\nconsole.log('argv:', process.argv.slice(2))\n```\n\nAnd make the file executable:\n```sh\nchmod +x ./file.ts\n```\n\nNow, you can run the file without passing it into tsx:\n```sh\n$ ./file.ts hello\nargv: [ 'hello' ]\n```\n\n## Dependencies\n\n#### [@esbuild-kit/esm-loader](https://github.com/esbuild-kit/esm-loader)\nNode.js Loader to transform TypeScript to ESM.\n\n#### [@esbuild-kit/cjs-loader](https://github.com/esbuild-kit/cjs-loader)\nNode.js `require()` hook to transform TypeScript & ESM to CommonJS.\n\n\n## FAQ\n\n### Why is it named `tsx`?\n\n`tsx` stands for \"TypeScript execute\". Mirroring [`npx`](https://docs.npmjs.com/cli/v8/commands/npx), which stands for \"Node.js package execute\".\n\nThe 3-character package name offers an elegant developer experience, allowing usage like: `npx tsx ...`.\n\nUnfortunately, it overlaps with React's [TSX/JSX](https://www.typescriptlang.org/docs/handbook/jsx.html), which stands for \"TypeScript XML\".\n\n### Does it do type-checking?\n\nNo, [esbuild does not support type checking](https://esbuild.github.io/faq/#:~:text=TypeScript%20type%20checking%20(just%20run%20tsc%20separately)).\n\nIt's recommended to run TypeScript separately as a command (`tsc --noEmit`) or via [IDE IntelliSense](https://code.visualstudio.com/docs/languages/typescript).\n\n\n### How is `tsx` different from [`ts-node`](https://github.com/TypeStrong/ts-node)?\n\nThey're both tools to run TypeScript files. But tsx does a lot more to improve the experience of using Node.js.\n\ntsx _just works_. It's zero-config and doesn't require `tsconfig.json` to get started, making it easy for users that just want to run TypeScript code and not get caught up in the configuration.\n\nIt's a single binary with no peer-dependencies (e.g. TypeScript or esbuild), so there is no setup necessary, enabling usage that is elegant and frictionless for first-time users:\n\n```\nnpx tsx ./script.ts\n```\n\ntsx is zero-config because it has smart detections built in. As a runtime, it detects what's imported to make many options in `tsconfig.json` redundant—which was designed for compiling matching files regardless of whether they're imported.\n\nIt seamlessly adapts between CommonJS and ESM package types by detecting how modules are loaded (`require()` or `import`) to determine how to compile them. It even adds support for `require()`ing ESM modules from CommonJS so you don't have to worry about your dependencies as the ecosystem migrates to ESM.\n\n[Newer and unsupported syntax](https://esbuild.github.io/content-types/) & features like [importing `node:` prefixes](https://2ality.com/2021/12/node-protocol-imports.html) are downgraded by detecting the Node.js version. For large TypeScript codebases, it has [`tsconfig.json paths`](https://www.typescriptlang.org/tsconfig#paths) aliasing support out of the box.\n\nAt the core, tsx is powered by esbuild for [blazing fast TypeScript compilation](https://esbuild.github.io/faq/#:~:text=typescript%20benchmark), whereas `ts-node` (by default) uses the TypeScript compiler. Because esbuild doesn't type check, `tsx` is similar to `ts-node --esm --swc` (which uses the [SWC compiler](https://github.com/TypeStrong/ts-node#swc-1)).\n\nAs a bonus, tsx also comes with a watcher to speed up your development.\n\n[Here's an exhaustive technical comparison](https://github.com/privatenumber/ts-runtime-comparison) between `tsx`, `ts-node`, and other runtimes.\n\n### Can it use esbuild plugins?\n\nNo. tsx uses esbuild's [Transform API](https://esbuild.github.io/api/#transform-api), which doesn't support plugins.\n\n### Does it have a configuration file?\n\nNo. tsx's integration with Node.js is designed to be seamless so there is no configuration.\n\n### Does it have any limitations?\n\nTransformations are handled by esbuild, so it shares the same limitations such as:\n\n- Compatibility with code executed via `eval()` is not preserved\n- Only certain `tsconfig.json` properties are supported\n- [`emitDecoratorMetadata`](https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata) is not supported \n\nFor details, refer to esbuild's [JavaScript caveats](https://esbuild.github.io/content-types/#javascript-caveats) and [TypeScript caveats](https://esbuild.github.io/content-types/#typescript-caveats) documentation.\n",
    "licenseText": "MIT License\n\nCopyright (c) Hiroki Osame <hiroki.osame@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tsx/-/tsx-3.12.0.tgz#0df550aa4311da32a382b1f31941fe1b41cfba8a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tsx/-/tsx-3.12.0.tgz",
    "hash": "0df550aa4311da32a382b1f31941fe1b41cfba8a",
    "integrity": "sha512-Z9drA8U1/jRJRWVTS2rOwdsCfkAShwfYBlE+6BVZsZChDsgYsEZZe44MGNNK6V6wQTTtu1kRNV57MsKRMJfdpg==",
    "registry": "npm",
    "packageName": "tsx",
    "cacheIntegrity": "sha512-Z9drA8U1/jRJRWVTS2rOwdsCfkAShwfYBlE+6BVZsZChDsgYsEZZe44MGNNK6V6wQTTtu1kRNV57MsKRMJfdpg== sha1-DfVQqkMR2jKjgrHzGUH+G0HPuoo="
  },
  "registry": "npm",
  "hash": "0df550aa4311da32a382b1f31941fe1b41cfba8a"
}