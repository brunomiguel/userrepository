{
  "manifest": {
    "name": "mobx-react-lite",
    "version": "3.4.0",
    "description": "Lightweight React bindings for MobX based on React 16.8+ and Hooks",
    "source": "src/index.ts",
    "main": "dist/index.js",
    "umd:main": "dist/mobxreact.umd.production.min.js",
    "unpkg": "dist/mobxreactlite.umd.production.min.js",
    "jsdelivr": "dist/mobxreactlite.umd.production.min.js",
    "jsnext:main": "dist/mobxreactlite.esm.production.min.js",
    "module": "es/index.js",
    "react-native": "es/index.js",
    "types": "dist/index.d.ts",
    "typings": "dist/index.d.ts",
    "files": [
      "src",
      "dist/",
      "lib/",
      "es/",
      "LICENSE",
      "CHANGELOG.md",
      "README.md",
      "batching*"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/mobxjs/mobx.git"
    },
    "author": {
      "name": "Daniel K."
    },
    "license": "MIT",
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/mobx"
    },
    "bugs": {
      "url": "https://github.com/mobxjs/mobx/issues"
    },
    "homepage": "https://mobx.js.org/",
    "dependencies": {},
    "peerDependencies": {
      "mobx": "^6.1.0",
      "react": "^16.8.0 || ^17 || ^18"
    },
    "peerDependenciesMeta": {
      "react-dom": {
        "optional": true
      },
      "react-native": {
        "optional": true
      }
    },
    "devDependencies": {
      "mobx": "^6.4.0",
      "expose-gc": "^1.0.0"
    },
    "keywords": [
      "mobx",
      "mobservable",
      "react-component",
      "react",
      "reactjs",
      "reactive",
      "hooks",
      "observer",
      "useLocalObservable"
    ],
    "scripts": {
      "lint": "eslint src/**/* --ext .js,.ts,.tsx",
      "build": "node ../../scripts/build.js mobxReactLite",
      "build:test": "yarn build --target test",
      "build:cjs": "tsc --project tsconfig.build.cjs.json",
      "build:es": "tsc --project tsconfig.build.es.json",
      "test": "jest",
      "test:size": "yarn import-size --report . observer useLocalObservable",
      "test:types": "tsc --noEmit",
      "test:check": "yarn test:types",
      "prepublish": "yarn build --target publish && yarn build:cjs && yarn build:es"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-mobx-react-lite-3.4.0-d59156a96889cdadad751e5e4dab95f28926dfff-integrity/node_modules/mobx-react-lite/package.json",
    "readmeFilename": "README.md",
    "readme": "# mobx-react-lite\n\n[![CircleCI](https://circleci.com/gh/mobxjs/mobx-react-lite.svg?style=svg)](https://circleci.com/gh/mobxjs/mobx-react-lite)[![Coverage Status](https://coveralls.io/repos/github/mobxjs/mobx-react-lite/badge.svg)](https://coveralls.io/github/mobxjs/mobx-react-lite)[![NPM downloads](https://img.shields.io/npm/dm/mobx-react-lite.svg?style=flat)](https://npmjs.com/package/mobx-react-lite)[![Minzipped size](https://img.shields.io/bundlephobia/minzip/mobx-react-lite.svg)](https://bundlephobia.com/result?p=mobx-react-lite)\n\n[![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n[![Discuss on Github](https://img.shields.io/badge/discuss%20on-GitHub-orange)](https://github.com/mobxjs/mobx/discussions)\n[![View changelog](https://img.shields.io/badge/changelogs.xyz-Explore%20Changelog-brightgreen)](https://changelogs.xyz/mobx-react-lite)\n\nThis is a lighter version of [mobx-react](https://github.com/mobxjs/mobx-react) which supports React **functional components only** and as such makes the library slightly faster and smaller (_only 1.5kB gzipped_). Note however that it is possible to use `<Observer>` inside the render of class components.\nUnlike `mobx-react`, it doesn't `Provider`/`inject`, as `useContext` can be used instead.\n\n## Compatibility table (major versions)\n\n| mobx | mobx-react-lite | Browser                                        |\n| ---- | --------------- | ---------------------------------------------- |\n| 6    | 3               | Modern browsers (IE 11+ in compatibility mode) |\n| 5    | 2               | Modern browsers                                |\n| 4    | 2               | IE 11+, RN w/o Proxy support                   |\n\n`mobx-react-lite` requires React 16.8 or higher.\n\n## User Guide ðŸ‘‰ https://mobx.js.org/react-integration.html\n\n---\n\n## API reference âš’\n\n### **`observer<P>(baseComponent: FunctionComponent<P>): FunctionComponent<P>`**\n\nThe observer converts a component into a reactive component, which tracks which observables are used automatically and re-renders the component when one of these values changes.\nCan only be used for function components. For class component support see the `mobx-react` package.\n\n### **`<Observer>{renderFn}</Observer>`**\n\nIs a React component, which applies observer to an anonymous region in your component. `<Observer>` can be used both inside class and function components.\n\n### **`useLocalObservable<T>(initializer: () => T, annotations?: AnnotationsMap<T>): T`**\n\nCreates an observable object with the given properties, methods and computed values.\n\nNote that computed values cannot directly depend on non-observable values, but only on observable values, so it might be needed to sync properties into the observable using `useEffect` (see the example below at `useAsObservableSource`).\n\n`useLocalObservable` is a short-hand for:\n\n`const [state] = useState(() => observable(initializer(), annotations, { autoBind: true }))`\n\n### **`enableStaticRendering(enable: true)`**\n\nCall `enableStaticRendering(true)` when running in an SSR environment, in which `observer` wrapped components should never re-render, but cleanup after the first rendering automatically. Use `isUsingStaticRendering()` to inspect the current setting.\n\n---\n\n## Deprecated APIs\n\n### **`useObserver<T>(fn: () => T, baseComponentName = \"observed\", options?: IUseObserverOptions): T`** (deprecated)\n\n_This API is deprecated in 3.\\*. It is often used wrong (e.g. to select data rather than for rendering, and `<Observer>` better decouples the rendering from the component updates_\n\n```ts\ninterface IUseObserverOptions {\n    // optional custom hook that should make a component re-render (or not) upon changes\n    // Supported in 2.x only\n    useForceUpdate: () => () => void\n}\n```\n\nIt allows you to use an observer like behaviour, but still allowing you to optimize the component in any way you want (e.g. using memo with a custom areEqual, using forwardRef, etc.) and to declare exactly the part that is observed (the render phase).\n\n### **`useLocalStore<T, S>(initializer: () => T, source?: S): T`** (deprecated)\n\n_This API is deprecated in 3.\\*. Use `useLocalObservable` instead. They do roughly the same, but `useLocalObservable` accepts an set of annotations as second argument, rather than a `source` object. Using `source` is not recommended, see the deprecation message at `useAsObservableSource` for details_\n\nLocal observable state can be introduced by using the useLocalStore hook, that runs its initializer function once to create an observable store and keeps it around for a lifetime of a component.\n\nThe annotations are similar to the annotations that are passed in to MobX's [`observable`](https://mobx.js.org/observable.html#available-annotations) API, and can be used to override the automatic member inference of specific fields.\n\n### **`useAsObservableSource<T>(source: T): T`** (deprecated)\n\nThe useAsObservableSource hook can be used to turn any set of values into an observable object that has a stable reference (the same object is returned every time from the hook).\n\n_This API is deprecated in 3.\\* as it relies on observables to be updated during rendering which is an anti-pattern. Instead, use `useEffect` to synchronize non-observable values with values. Example:_\n\n```javascript\n// Before:\nfunction Measurement({ unit }) {\n    const observableProps = useAsObservableSource({ unit })\n    const state = useLocalStore(() => ({\n        length: 0,\n        get lengthWithUnit() {\n            // lengthWithUnit can only depend on observables, hence the above conversion with `useAsObservableSource`\n            return observableProps.unit === \"inch\"\n                ? `${this.length * 2.54} inch`\n                : `${this.length} cm`\n        }\n    }))\n\n    return <h1>{state.lengthWithUnit}</h1>\n}\n\n// After:\nfunction Measurement({ unit }) {\n    const state = useLocalObservable(() => ({\n        unit, // the initial unit\n        length: 0,\n        get lengthWithUnit() {\n            // lengthWithUnit can only depend on observables, hence the above conversion with `useAsObservableSource`\n            return this.unit === \"inch\" ? `${this.length * 2.54} inch` : `${this.length} cm`\n        }\n    }))\n\n    useEffect(() => {\n        // sync the unit from 'props' into the observable 'state'\n        state.unit = unit\n    }, [unit])\n\n    return <h1>{state.lengthWithUnit}</h1>\n}\n```\n\nNote that, at your own risk, it is also possible to not use `useEffect`, but do `state.unit = unit` instead in the rendering.\nThis is closer to the old behavior, but React will warn correctly about this if this would affect the rendering of other components.\n\n## Observer batching (deprecated)\n\n_Note: configuring observer batching is only needed when using `mobx-react-lite` 2.0.* or 2.1.*. From 2.2 onward it will be configured automatically based on the availability of react-dom / react-native packages_\n\n[Check out the elaborate explanation](https://github.com/mobxjs/mobx-react/pull/787#issuecomment-573599793).\n\nIn short without observer batching the React doesn't guarantee the order component rendering in some cases. We highly recommend that you configure batching to avoid these random surprises.\n\nImport one of these before any React rendering is happening, typically `index.js/ts`. For Jest tests you can utilize [setupFilesAfterEnv](https://jestjs.io/docs/en/configuration#setupfilesafterenv-array).\n\n**React DOM:**\n\n> import 'mobx-react-lite/batchingForReactDom'\n\n**React Native:**\n\n> import 'mobx-react-lite/batchingForReactNative'\n\n### Opt-out\n\nTo opt-out from batching in some specific cases, simply import the following to silence the warning.\n\n> import 'mobx-react-lite/batchingOptOut'\n\n### Custom batched updates\n\nAbove imports are for a convenience to utilize standard versions of batching. If you for some reason have customized version of batched updates, you can do the following instead.\n\n```js\nimport { observerBatching } from \"mobx-react-lite\"\nobserverBatching(customBatchedUpdates)\n```\n\n## Testing\n\nRunning the full test suite now requires node 14+\nBut the library itself does not have this limitation\n\nIn order to avoid memory leaks due to aborted renders from React\nfiber handling or React `StrictMode`, on environments that does not support [FinalizationRegistry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), this library needs to\nrun timers to tidy up the remains of the aborted renders.\n\nThis can cause issues with test frameworks such as Jest\nwhich require that timers be cleaned up before the tests\ncan exit.\n\n### **`clearTimers()`**\n\nCall `clearTimers()` in the `afterEach` of your tests to ensure\nthat `mobx-react-lite` cleans up immediately and allows tests\nto exit.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Michel Weststrate\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mobx-react-lite/-/mobx-react-lite-3.4.0.tgz#d59156a96889cdadad751e5e4dab95f28926dfff",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mobx-react-lite/-/mobx-react-lite-3.4.0.tgz",
    "hash": "d59156a96889cdadad751e5e4dab95f28926dfff",
    "integrity": "sha512-bRuZp3C0itgLKHu/VNxi66DN/XVkQG7xtoBVWxpvC5FhAqbOCP21+nPhULjnzEqd7xBMybp6KwytdUpZKEgpIQ==",
    "registry": "npm",
    "packageName": "mobx-react-lite",
    "cacheIntegrity": "sha512-bRuZp3C0itgLKHu/VNxi66DN/XVkQG7xtoBVWxpvC5FhAqbOCP21+nPhULjnzEqd7xBMybp6KwytdUpZKEgpIQ== sha1-1ZFWqWiJza2tdR5eTauV8okm3/8="
  },
  "registry": "npm",
  "hash": "d59156a96889cdadad751e5e4dab95f28926dfff"
}