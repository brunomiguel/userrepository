{
  "manifest": {
    "name": "electron-installer-debian",
    "description": "Create a Debian package for your Electron app.",
    "version": "3.1.0",
    "license": "MIT",
    "author": {
      "name": "Daniel Perez Alvarez",
      "email": "unindented@gmail.com",
      "url": "http://unindented.org/"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/electron-userland/electron-installer-debian.git"
    },
    "keywords": [
      "electron",
      "debian"
    ],
    "os": [
      "darwin",
      "linux"
    ],
    "main": "src/installer.js",
    "bin": {
      "electron-installer-debian": "src/cli.js"
    },
    "scripts": {
      "lint": "eslint .",
      "spec": "nyc mocha",
      "test": "npm run lint && npm run spec"
    },
    "engines": {
      "node": ">= 10.0.0"
    },
    "dependencies": {
      "@malept/cross-spawn-promise": "^1.0.0",
      "debug": "^4.1.1",
      "electron-installer-common": "^0.10.2",
      "fs-extra": "^9.0.0",
      "get-folder-size": "^2.0.1",
      "lodash": "^4.17.4",
      "word-wrap": "^1.2.3",
      "yargs": "^15.0.1"
    },
    "devDependencies": {
      "chai": "^4.1.2",
      "eslint": "^7.2.0",
      "eslint-config-standard": "^14.0.1",
      "eslint-plugin-import": "^2.17.3",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-promise": "^4.1.1",
      "eslint-plugin-standard": "^4.0.0",
      "mocha": "^8.0.1",
      "nyc": "^15.0.0",
      "promise-retry": "^2.0.1",
      "tmp-promise": "^3.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-installer-debian-3.1.0-2f6107f559f6564c44e3832fb2942dd8de4d40cc-integrity/node_modules/electron-installer-debian/package.json",
    "readmeFilename": "README.md",
    "readme": "![Electron Installer for Debian](resources/logo.png)\n\n# electron-installer-debian [![Version](https://img.shields.io/npm/v/electron-installer-debian.svg)](https://www.npmjs.com/package/electron-installer-debian) [![Build Status](https://img.shields.io/travis/electron-userland/electron-installer-debian.svg)](http://travis-ci.org/electron-userland/electron-installer-debian)\n\n> Create a Debian package for your Electron app.\n\n----\n\n[Usage](#usage) |\n[Options](#options) |\n[Release Notes](https://github.com/electron-userland/electron-installer-debian/blob/master/NEWS.md) |\n[License](https://github.com/electron-userland/electron-installer-debian/blob/master/LICENSE) |\n[Code of Conduct](https://github.com/electron-userland/electron-installer-debian/blob/master/CODE_OF_CONDUCT.md) |\n[Support](https://github.com/electron-userland/electron-installer-debian/blob/master/SUPPORT.md)\n\n## Requirements\n\nThis tool requires Node 10 or greater, `fakeroot`, and `dpkg` to build the `.deb` package.\n\nI'd recommend building your packages on your target platform, but if you insist on using Mac OS X, you can install these tools through [Homebrew](http://brew.sh/):\n\n```\n$ brew install fakeroot dpkg\n```\n\n\n## Installation\n\nFor use from command-line:\n\n```\n$ npm install -g electron-installer-debian\n```\n\nFor use in npm scripts or programmatically:\n\n```\n$ npm install --save-dev electron-installer-debian\n```\n\n\n## Usage\n\nSay your Electron app lives in `path/to/app`, and has a structure like this:\n\n```\n.\n├── LICENSE\n├── README.md\n├── node_modules\n│   ├── electron-packager\n│   └── electron\n├── package.json\n├── resources\n│   ├── Icon.png\n│   ├── IconTemplate.png\n│   └── IconTemplate@2x.png\n└── src\n    ├── index.js\n    ├── main\n    │   └── index.js\n    └── renderer\n        ├── index.html\n        └── index.js\n```\n\nYou now run `electron-packager` to build the app for Debian:\n\n```\n$ electron-packager . app --platform linux --arch x64 --out dist/\n```\n\nAnd you end up with something like this in your `dist` folder:\n\n```\n.\n└── dist\n    └── app-linux-x64\n        ├── LICENSE\n        ├── LICENSES.chromium.html\n        ├── content_shell.pak\n        ├── app\n        ├── icudtl.dat\n        ├── libgcrypt.so.11\n        ├── libnode.so\n        ├── locales\n        ├── natives_blob.bin\n        ├── resources\n        ├── snapshot_blob.bin\n        └── version\n```\n\nHow do you turn that into a Debian package that your users can install?\n\n### Command-Line\n\nIf you want to run `electron-installer-debian` straight from the command-line, install the package globally:\n\n```\n$ npm install -g electron-installer-debian\n```\n\nAnd point it to your built app:\n\n```\n$ electron-installer-debian --src dist/app-linux-x64/ --dest dist/installers/ --arch amd64\n```\n\nYou'll end up with the package at `dist/installers/app_0.0.1_amd64.deb`.\n\n### Scripts\n\nIf you want to run `electron-installer-debian` through npm, install the package locally:\n\n```\n$ npm install --save-dev electron-installer-debian\n```\n\nEdit the `scripts` section of your `package.json`:\n\n```json\n{\n  \"name\": \"app\",\n  \"description\": \"An awesome app!\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"build\": \"electron-packager . app --platform linux --arch x64 --out dist/\",\n    \"deb64\": \"electron-installer-debian --src dist/app-linux-x64/ --dest dist/installers/ --arch amd64\"\n  },\n  \"devDependencies\": {\n    \"electron-installer-debian\": \"^0.6.0\",\n    \"electron-packager\": \"^9.0.0\",\n    \"electron\": \"~1.7.0\"\n  }\n}\n```\n\n_*Note*: The versions in `devDependencies` are examples only, please use the latest package versions\nwhen possible._\n\nAnd run the script:\n\n```\n$ npm run deb64\n```\n\nYou'll end up with the package at `dist/installers/app_0.0.1_amd64.deb`.\n\n### Programmatically\n\nInstall the package locally:\n\n```\n$ npm install --save-dev electron-installer-debian\n```\n\nAnd write something like this:\n\n```javascript\nconst installer = require('electron-installer-debian')\n\nconst options = {\n  src: 'dist/app-linux-x64/',\n  dest: 'dist/installers/',\n  arch: 'amd64'\n}\n\nasync function main (options) {\n  console.log('Creating package (this may take a while)')\n  try {\n    await installer(options)\n    console.log(`Successfully created package at ${options.dest}`)\n  } catch (err) {\n    console.error(err, err.stack)\n    process.exit(1)\n  }\n}\nmain(options)\n```\n\nYou'll end up with the package at `dist/installers/app_0.0.1_amd64.deb`.\n\n_Note: As of 1.0.0, the Node-style callback pattern is no longer available. You can use\n[`util.callbackify`](https://nodejs.org/api/util.html#util_util_callbackify_original) if this is\nrequired for your use case._\n\n### Options\n\nEven though you can pass most of these options through the command-line interface, it may be easier to create a configuration file:\n\n```javascript\n{\n  \"dest\": \"dist/installers/\",\n  \"icon\": \"resources/Icon.png\",\n  \"categories\": [\n    \"Utility\"\n  ],\n  \"lintianOverrides\": [\n    \"changelog-file-missing-in-native-package\"\n  ]\n}\n```\n\nAnd pass that instead with the `config` option:\n\n```\n$ electron-installer-debian --src dist/app-linux-x64/ --arch amd64 --config config.json\n```\n\nAnyways, here's the full list of options:\n\n#### src\nType: `String`\nDefault: `undefined`\n\nPath to the folder that contains your built Electron application.\n\n#### dest\nType: `String`\nDefault: `undefined`\n\nPath to the folder that will contain your Debian installer.\n\n#### rename\nType: `Function`\nDefault: `function (dest, src) { return path.join(dest, src); }`\n\nFunction that renames all files generated by the task just before putting them in your `dest` folder.\n\n#### options.name\nType: `String`\nDefault: `package.name || \"electron\"`\n\nName of the package (e.g. `atom`), used in the [`Package` field of the `control` specification](https://www.debian.org/doc/debian-policy/#package).\n\nAccording to the *Debian Policy Manual*:\n\n> Package names [...] must consist only of lower case letters (a-z), digits (0-9), plus (+) and minus (-) signs, and periods (.). They must be at least two characters long and must start with an alphanumeric character.\n\n`electron-installer-debian` will try to help conform to these requirements by lowercasing the name\nprovided and replacing any invalid characters with `-`s.\n\n#### options.productName\nType: `String`\nDefault: `package.productName || package.name`\n\nName of the application (e.g. `Atom`), used in the [`Name` field of the `desktop` specification](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html).\n\n#### options.genericName\nType: `String`\nDefault: `package.genericName || package.productName || package.name`\n\nGeneric name of the application (e.g. `Text Editor`), used in the [`GenericName` field of the `desktop` specification](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html).\n\n#### options.description\nType: `String`\nDefault: `package.description`\n\nShort description of the application, used in the [`Description` field of the `control` specification](https://www.debian.org/doc/debian-policy/#the-single-line-synopsis).\n\n#### options.productDescription\nType: `String`\nDefault: `package.productDescription || package.description`\n\nLong description of the application, used in the [`Description` field of the `control` specification](https://www.debian.org/doc/debian-policy/#the-extended-description).\n\n#### options.version\nType: `String`\nDefault: `package.version || \"0.0.0\"`\n\nVersion number of the package, used in the [`Version` field of the `control` specification](https://www.debian.org/doc/debian-policy/#version).\n\n#### options.revision\nType: `String`\nDefault: `undefined`\n\nRevision number of the package, used in the [`Version` field of the `control` specification](https://www.debian.org/doc/debian-policy/#version) and, by default, the filename of the generated `.deb` file.\n\n#### options.section\nType: `String`\nDefault: `\"utils\"`\n\nApplication area into which the package has been classified, used in the [`Section` field of the `control` specification](https://www.debian.org/doc/debian-policy/#section).\n\nYou can read more about [sections](https://www.debian.org/doc/debian-policy/#sections), and also check out the [list of existing sections in Debian unstable](https://packages.debian.org/unstable/).\n\n#### options.priority\nType: `String`\nDefault: `\"optional\"`\n\nHow important it is that the user have the package installed., used in the [`Priority` field of the `control` specification](https://www.debian.org/doc/debian-policy/#priority).\n\nYou can read more about [priorities](https://www.debian.org/doc/debian-policy/#priorities).\n\n#### options.arch\nType: `String`\nDefault: `undefined`\n\nMachine architecture the package is targeted to, used in the [`Architecture` field of the `control` specification](https://www.debian.org/doc/debian-policy/#architecture).\n\nFor possible values see the output of `dpkg-architecture -L`.\n\n#### options.size\nType: `Integer`\nDefault: `size of the folder`\n\nEstimate of the total amount of disk space required to install the named package, used in the [`Installed-Size` field of the `control` specification](https://www.debian.org/doc/debian-policy/#installed-size).\n\n#### options.depends, recommends, suggests, enhances, preDepends\nType: `Array[String]`\nDefault: For `depends`, the minimum set of packages necessary for Electron to run; See [source code](https://github.com/electron-userland/electron-installer-debian/blob/53fb5c5/src/installer.js#L146-L157) for `recommends`, `suggests`, `enhances`, and `preDepends` default values\n\nRelationships to other packages, used in the [`Depends`, `Recommends`, `Suggests`, `Enhances` and `Pre-Depends` fields of the `control` specification](https://www.debian.org/doc/debian-policy/#binary-dependencies-depends-recommends-suggests-enhances-pre-depends).\n\nAll user dependencies will be appended to the `Default` array of dependencies and any duplicates will be removed.\n\n#### options.maintainer\nType: `String`\nDefault: `package.author.name <package.author.email>`\n\nMaintainer of the package, used in the [`Maintainer` field of the `control` specification](https://www.debian.org/doc/debian-policy/#maintainer).\n\n#### options.homepage\nType: `String`\nDefault: `package.homepage || package.author.url`\n\nURL of the homepage for the package, used in the [`Homepage` field of the `control` specification](https://www.debian.org/doc/debian-policy/#homepage).\n\n#### options.bin\nType: `String`\nDefault: `package.name || \"electron\"`\n\nRelative path to the executable that will act as binary for the application, used in the [`Exec` field of the `desktop` specification](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html).\n\nThe generated package will contain a symlink `/usr/bin/<%= options.name %>` pointing to the path provided here.\n\nFor example, providing this configuration:\n\n```javascript\n{\n  src: '...',\n  dest: '...',\n  name: 'foo',\n  bin: 'resources/cli/launcher.sh'\n}\n```\n\nWill create a package with the following symlink:\n\n```\nusr/bin/foo@ -> ../lib/foo/resources/cli/launcher.sh\n```\n\nAnd a desktop specification with the following `Exec` key:\n\n```\nExec=foo %U\n```\n\n#### options.icon\nType: `String` or `Object[String:String]`\nDefault: [`resources/icon.png`](https://github.com/electron-userland/electron-installer-debian/blob/master/resources/icon.png)\n\nPath to a single image that will act as icon for the application:\n\n```javascript\n{\n  icon: 'resources/Icon.png'\n}\n```\n\nOr multiple images with their corresponding resolutions:\n\n```javascript\n{\n  icon: {\n    '48x48': 'resources/Icon48.png',\n    '64x64': 'resources/Icon64.png',\n    '128x128': 'resources/Icon128.png',\n    '256x256': 'resources/Icon256.png',\n    'scalable': 'resources/Icon.svg'\n  }\n}\n```\nNote that the image files must be one of the types: PNG or SVG. The support for SVG works only on `scalable` resolution.\n\n#### options.categories\nType: `Array[String]`\nDefault: `['GNOME', 'GTK', 'Utility']`\n\nCategories in which the application should be shown in a menu, used in the [`Categories` field of the `desktop` specification](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html).\n\nFor possible values check out the [Desktop Menu Specification](http://standards.freedesktop.org/menu-spec/latest/apa.html).\n\n#### options.mimeType\nType: `Array[String]`\nDefault: `[]`\n\nMIME types the application is able to open, used in the [`MimeType` field of the `desktop` specification](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html).\n\n#### options.lintianOverrides\nType: `Array[String]`\nDefault: `[]`\n\nYou can use these to quieten [`lintian`](https://lintian.debian.org/manual/).\n\n#### options.scripts\nType: `Object[String:String]`\nDefault: `undefined`\n\nPath to package maintainer scripts with their corresponding name, used in the [installation procedure](https://www.debian.org/doc/debian-policy/#introduction-to-package-maintainer-scripts):\n\n```javascript\n{\n  scripts: {\n    'preinst': 'resources/preinst_script',\n    'postinst': 'resources/postinst_script',\n    'prerm': 'resources/prerm_script',\n    'postrm': 'resources/postrm_script'\n  }\n}\n```\nYou can read more about [package maintainer scripts](https://www.debian.org/doc/debian-policy/#package-maintainer-scripts-and-installation-procedure) and [general scripts](https://www.debian.org/doc/debian-policy/#scripts)\n\n#### options.desktopTemplate\nType: `String`\nDefault: [`resources/desktop.ejs`](https://github.com/electron-userland/electron-installer-debian/blob/master/resources/desktop.ejs)\n\nThe absolute path to a custom template for the generated [FreeDesktop.org desktop\nentry](http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html) file.\n\n### Installed Package\n\nThe package installs the Electron application into `/usr/lib`, since there are\narchitecture-specific files in the package. There was a [discussion in the issue\ntracker](https://github.com/electron-userland/electron-installer-debian/issues/46) about the\ninstallation directory.\n\nIn versions of `electron-installer-debian` prior to 0.5.0, the app was (incorrectly) installed in\n`/usr/share`.\n\n## Meta\n\n* Code: `git clone git://github.com/electron-userland/electron-installer-debian.git`\n* Home: <https://github.com/electron-userland/electron-installer-debian/>\n\n\n## Contributors\n\n* Daniel Perez Alvarez ([unindented@gmail.com](mailto:unindented@gmail.com))\n\n\n## License\n\nCopyright (c) 2016 Daniel Perez Alvarez ([unindented.org](https://unindented.org/)). This is free software, and may be redistributed under the terms specified in the LICENSE file.\n",
    "licenseText": "Copyright (c) 2016 Daniel Perez Alvarez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-installer-debian/-/electron-installer-debian-3.1.0.tgz#2f6107f559f6564c44e3832fb2942dd8de4d40cc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-installer-debian/-/electron-installer-debian-3.1.0.tgz",
    "hash": "2f6107f559f6564c44e3832fb2942dd8de4d40cc",
    "integrity": "sha512-k6KChvx0Fw8XTlCqwwbBfh19yGQaKjGdbugokmr1IpzINOm4QFyACKMTHAYFHW5LCBUZQShZD96hwxUZ+8Kx+w==",
    "registry": "npm",
    "packageName": "electron-installer-debian",
    "cacheIntegrity": "sha512-k6KChvx0Fw8XTlCqwwbBfh19yGQaKjGdbugokmr1IpzINOm4QFyACKMTHAYFHW5LCBUZQShZD96hwxUZ+8Kx+w== sha1-L2EH9Vn2VkxE44MvspQt2N5NQMw="
  },
  "registry": "npm",
  "hash": "2f6107f559f6564c44e3832fb2942dd8de4d40cc"
}