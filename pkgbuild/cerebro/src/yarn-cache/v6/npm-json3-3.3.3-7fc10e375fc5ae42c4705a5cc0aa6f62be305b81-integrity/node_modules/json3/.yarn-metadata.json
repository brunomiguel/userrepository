{
  "manifest": {
    "name": "json3",
    "version": "3.3.3",
    "description": "A JSON polyfill for older JavaScript platforms.",
    "homepage": "https://bestiejs.github.io/json3",
    "main": "./lib/json3",
    "keywords": [
      "json",
      "spec",
      "ecma",
      "es5",
      "lexer",
      "parser",
      "stringify"
    ],
    "license": "MIT",
    "author": {
      "name": "Kit Cambridge",
      "email": "github@kitcambridge.be",
      "url": "http://kitcambridge.be/"
    },
    "maintainers": [
      {
        "name": "Kit Cambridge",
        "email": "github@kitcambridge.be",
        "url": "http://kitcambridge.be/"
      },
      {
        "name": "Benjamin Tan",
        "email": "demoneaux@gmail.com",
        "url": "https://d10.github.io/"
      }
    ],
    "contributors": [
      {
        "name": "Mangled Deutz",
        "email": "olivier@webitup.fr",
        "url": "http://tech.roxee.tv/"
      },
      {
        "name": "√òyvind Sean Kinsey",
        "email": "oyvind@kinsey.no",
        "url": "http://fb.me/ok"
      },
      {
        "name": "Oskar Sch√∂ldstr√∂m",
        "email": "public@oxy.fi",
        "url": "http://oxy.fi/"
      },
      {
        "name": "Kiryl Yermakou",
        "email": "rma4ok@gmail.com",
        "url": "https://github.com/rma4ok"
      }
    ],
    "bugs": {
      "url": "https://github.com/bestiejs/json3/issues"
    },
    "scripts": {
      "test": "node test/test_*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/bestiejs/json3.git"
    },
    "files": [
      "README.md",
      "LICENSE",
      "lib/json3.js",
      "lib/json3.min.js"
    ],
    "jam": {
      "main": "./lib/json3.js",
      "includes": [
        "README.md",
        "LICENSE",
        "lib/json3.js",
        "lib/json3.min.js"
      ]
    },
    "volo": {
      "type": "directory",
      "ignore": [
        ".*",
        "build.js",
        "index.html",
        "component.json",
        "bower.json",
        "benchmark",
        "page",
        "test",
        "vendor"
      ]
    },
    "devDependencies": {
      "curl-amd": "~0.8.12",
      "highlight.js": "~8.3.0",
      "marked": "~0.3.2",
      "requirejs": "~2.1.15",
      "spec": "~1.0.1",
      "tar": "~1.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-json3-3.3.3-7fc10e375fc5ae42c4705a5cc0aa6f62be305b81-integrity/node_modules/json3/package.json",
    "readmeFilename": "README.md",
    "readme": "# üö® Unmaintained üö®\n\n<p class=\"banner\">JSON 3 is **deprecated** and **no longer maintained**. Please don't use it in new projects, and migrate existing projects to use the native `JSON.parse` and `JSON.stringify` instead.</p>\n\nThanks to everyone who contributed patches or found it useful! ‚ù§Ô∏è\n\n# JSON 3 #\n\n [![No Maintenance Intended](http://unmaintained.tech/badge.svg)](http://unmaintained.tech/)\n\n**JSON 3** was a JSON polyfill for older JavaScript platforms.\n\n## About ##\n\n[JSON](http://json.org/) is a language-independent data interchange format based on a loose subset of the JavaScript grammar. Originally popularized by [Douglas Crockford](http://www.crockford.com/), the format was standardized in the [fifth edition](http://es5.github.io/) of the ECMAScript specification. The 5.1 edition, ratified in June 2011, incorporates several modifications to the grammar pertaining to the serialization of dates.\n\nJSON 3 exposes two functions: `stringify()` for [serializing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify) a JavaScript value to JSON, and `parse()` for [producing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse) a JavaScript value from a JSON source string. The JSON 3 parser uses recursive descent instead of `eval` and regular expressions, which makes it slower on older platforms compared to [JSON 2](http://json.org/js). The functions behave exactly as described in the ECMAScript spec, **except** for the date serialization discrepancy noted below.\n\nThe project is [hosted on GitHub](http://git.io/json3), along with the [unit tests](http://bestiejs.github.io/json3/test/test_browser.html). It is part of the [BestieJS](https://github.com/bestiejs) family, a collection of best-in-class JavaScript libraries that promote cross-platform support, specification precedents, unit testing, and plenty of documentation.\n\n## Date Serialization\n\n**JSON 3 deviates from the specification in one important way**: it does not define `Date#toISOString()` or `Date#toJSON()`. This preserves CommonJS compatibility and avoids polluting native prototypes. Instead, date serialization is performed internally by the `stringify()` implementation: if a date object does not define a custom `toJSON()` method, it is serialized as a [simplified ISO 8601 date-time string](http://es5.github.com/#x15.9.1.15).\n\n**Several native `Date#toJSON()` implementations produce date time strings that do *not* conform to the grammar outlined in the spec**. In these environments, JSON 3 will override the native `stringify()` implementation. There is an [issue](https://github.com/bestiejs/json3/issues/73) on file to make these tests less strict.\n\nPortions of the date serialization code are adapted from the [`date-shim`](https://github.com/Yaffle/date-shim) project.\n\n# Usage #\n\n## Web Browsers\n\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/json3/3.3.2/json3.min.js\"></script>\n    <script>\n      JSON.stringify({\"Hello\": 123});\n      // => '{\"Hello\":123}'\n      JSON.parse(\"[[1, 2, 3], 1, 2, 3, 4]\", function (key, value) {\n        if (typeof value == \"number\") {\n          value = value % 2 ? \"Odd\" : \"Even\";\n        }\n        return value;\n      });\n      // => [[\"Odd\", \"Even\", \"Odd\"], \"Odd\", \"Even\", \"Odd\", \"Even\"]\n    </script>\n\n**When used in a web browser**, JSON 3 exposes an additional `JSON3` object containing the `noConflict()` and `runInContext()` functions, as well as aliases to the `stringify()` and `parse()` functions.\n\n### `noConflict` and `runInContext`\n\n* `JSON3.noConflict()` restores the original value of the global `JSON` object and returns a reference to the `JSON3` object.\n* `JSON3.runInContext([context, exports])` initializes JSON 3 using the given `context` object (e.g., `window`, `global`, etc.), or the global object if omitted. If an `exports` object is specified, the `stringify()`, `parse()`, and `runInContext()` functions will be attached to it instead of a new object.\n\n### Asynchronous Module Loaders\n\nJSON 3 is defined as an [anonymous module](https://github.com/amdjs/amdjs-api/wiki/AMD#define-function-) for compatibility with [RequireJS](http://requirejs.org/), [`curl.js`](https://github.com/cujojs/curl), and other asynchronous module loaders.\n\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.js\"></script>\n    <script>\n      require({\n        \"paths\": {\n          \"json3\": \"./path/to/json3\"\n        }\n      }, [\"json3\"], function (JSON) {\n        JSON.parse(\"[1, 2, 3]\");\n        // => [1, 2, 3]\n      });\n    </script>\n\nTo avoid issues with third-party scripts, **JSON 3 is exported to the global scope even when used with a module loader**. If this behavior is undesired, `JSON3.noConflict()` can be used to restore the global `JSON` object to its original value.\n\n**Note:** If you intend to use JSON3 alongside another module, **please do not simply concatenate these modules together**, as that would cause multiple `define` calls in one script, resulting in errors in AMD loaders. The `r.js` build optimizer can be used instead if you need a single compressed file for production.\n\n## CommonJS Environments\n\n    var JSON3 = require(\"./path/to/json3\");\n    JSON3.parse(\"[1, 2, 3]\");\n    // => [1, 2, 3]\n\n## JavaScript Engines\n\n    load(\"path/to/json3.js\");\n    JSON.stringify({\"Hello\": 123, \"Good-bye\": 456}, [\"Hello\"], \"\\t\");\n    // => '{\\n\\t\"Hello\": 123\\n}'\n\n# Compatibility #\n\nJSON 3 has been **tested** with the following web browsers, CommonJS environments, and JavaScript engines.\n\n## Web Browsers\n\n- Windows [Internet Explorer](http://windows.microsoft.com/en-us/internet-explorer/download-ie), version 6.0 and higher\n- Google [Chrome](http://www.google.com/chrome), version 19.0 and higher\n- Mozilla [Firefox](https://www.mozilla.org/en-US/firefox/new/), version 2.0 and higher\n- Apple [Safari](http://www.apple.com/safari/), version 3.0 and higher\n- [Opera](http://www.opera.com/) 8.54 and higher\n- [SeaMonkey](http://www.seamonkey-project.org/) 1.0 and higher\n\n## CommonJS Environments\n\n- [Node](http://nodejs.org/) 0.6.21 and higher\n- [io.js](https://iojs.org/) 1.0.3 and higher\n- [RingoJS](http://ringojs.org/) 0.9 and higher\n- [Narwhal](https://github.com/280north/narwhal) 0.3.2\n\n## JavaScript Engines\n\n- Mozilla [Rhino](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino) 1.7R3 and higher\n- WebKit [JSC](https://trac.webkit.org/wiki/JSC)\n- Google [V8](http://code.google.com/p/v8/)\n\n## Known Incompatibilities\n\n* Attempting to serialize the `arguments` object may produce inconsistent results across environments due to specification version differences. As a workaround, please convert the `arguments` object to an array first: `JSON.stringify([].slice.call(arguments, 0))`.\n\n## Required Native Methods\n\nJSON 3 assumes that the following methods exist and function as described in the ECMAScript specification:\n\n- The `Number`, `String`, `Array`, `Object`, `Date`, `SyntaxError`, and `TypeError` constructors.\n- `String.fromCharCode`\n- `Object#toString`\n- `Object#hasOwnProperty`\n- `Function#call`\n- `Math.floor`\n- `Number#toString`\n- `Date#valueOf`\n- `String.prototype`: `indexOf`, `charCodeAt`, `charAt`, `slice`, `replace`.\n- `Array.prototype`: `push`, `pop`, `join`.\n",
    "licenseText": "Copyright (c) 2012-2015 Kit Cambridge.\nhttp://kitcambridge.be/\n\nCopyright (c) 2013-2015 Benjamin Tan.\nhttps://d10.github.io/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/json3/-/json3-3.3.3.tgz#7fc10e375fc5ae42c4705a5cc0aa6f62be305b81",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/json3/-/json3-3.3.3.tgz",
    "hash": "7fc10e375fc5ae42c4705a5cc0aa6f62be305b81",
    "integrity": "sha512-c7/8mbUsKigAbLkD5B010BK4D9LZm7A1pNItkEwiUZRpIN66exu/e7YQWysGun+TRKaJp8MhemM+VkfWv42aCA==",
    "registry": "npm",
    "packageName": "json3",
    "cacheIntegrity": "sha512-c7/8mbUsKigAbLkD5B010BK4D9LZm7A1pNItkEwiUZRpIN66exu/e7YQWysGun+TRKaJp8MhemM+VkfWv42aCA== sha1-f8EON1/FrkLEcFpcwKpvYr4wW4E="
  },
  "registry": "npm",
  "hash": "7fc10e375fc5ae42c4705a5cc0aa6f62be305b81"
}