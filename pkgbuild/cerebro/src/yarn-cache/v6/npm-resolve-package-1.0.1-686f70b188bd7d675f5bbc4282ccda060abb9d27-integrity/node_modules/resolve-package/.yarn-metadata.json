{
  "manifest": {
    "name": "resolve-package",
    "version": "1.0.1",
    "description": "Resolves a given package if it is installed locally, then tries to resolve it from global registry, using battle-tested [global-modules][] package. Better approach than internal `require.resolve`, so you can trust. You just get absolute filepath to some package - path to its entry point, its main export",
    "repository": {
      "type": "git",
      "url": "https://github.com/tunnckoCore/resolve-package.git"
    },
    "author": {
      "name": "Charlike Mike Reagent",
      "email": "@tunnckoCore",
      "url": "http://i.am.charlike.online"
    },
    "precommit.silent": true,
    "main": "index.js",
    "license": "MIT",
    "scripts": {
      "lint": "standard --verbose",
      "pretest": "npm run lint",
      "test": "npm run coverage",
      "posttest": "npm run lint:coverage",
      "coverage": "nyc node test.js",
      "lint:coverage": "nyc check-coverage --lines 100 --branches 100 --statements 100 --functions 100",
      "report-coverage": "nyc report --reporter=text-lcov | coveralls",
      "prerelease": "npm test",
      "release": "standard-version --sign --no-verify",
      "precommit": "git add --all",
      "commit": "git-cz"
    },
    "dependencies": {
      "get-installed-path": "^2.0.3"
    },
    "devDependencies": {
      "commitizen": "^2.8.6",
      "coveralls": "^2.11.15",
      "cz-conventional-changelog": "^1.2.0",
      "mkdirp": "^0.5.1",
      "mukla": "^0.4.8",
      "nyc": "^10.0.0",
      "pre-commit": "^1.2.2",
      "rimraf": "^2.5.4",
      "standard": "^8.6.0",
      "standard-version": "^4.0.0"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "file",
      "filepath",
      "fs",
      "get",
      "global",
      "globally",
      "install",
      "installed",
      "local",
      "module",
      "modules",
      "node",
      "nodemodules",
      "packages",
      "path",
      "pkg",
      "require",
      "resolve",
      "resolves"
    ],
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "engines": {
      "node": ">=4",
      "npm": ">=2"
    },
    "verb": {
      "run": true,
      "toc": {
        "render": true,
        "method": "preWrite",
        "maxdepth": 3,
        "footer": ""
      },
      "layout": "empty",
      "tasks": [
        "readme"
      ],
      "related": {
        "list": [
          "always-done",
          "minibase",
          "try-catch-core",
          "global-prefix",
          "global-modules",
          "global-paths",
          "get-installed-path",
          "is-installed",
          "detect-installed",
          "mukla",
          "each-promise"
        ],
        "highlight": "always-done"
      },
      "reflinks": [
        "always-done",
        "async-done",
        "base",
        "charlike",
        "commitizen",
        "detect-installed",
        "dezalgo",
        "generate",
        "get-installed-path",
        "gulp",
        "is-installed",
        "once",
        "resolve",
        "resolve-from",
        "resolve-module",
        "resolve-pkg",
        "standard-version",
        "verb",
        "verb-generate-readme",
        "global-modules",
        "global-prefix"
      ],
      "lint": {
        "reflinks": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-resolve-package-1.0.1-686f70b188bd7d675f5bbc4282ccda060abb9d27-integrity/node_modules/resolve-package/package.json",
    "readmeFilename": "README.md",
    "readme": "# resolve-package [![NPM version](https://img.shields.io/npm/v/resolve-package.svg?style=flat)](https://www.npmjs.com/package/resolve-package) [![NPM downloads](https://img.shields.io/npm/dm/resolve-package.svg?style=flat)](https://npmjs.org/package/resolve-package) [![npm total downloads][downloads-img]][downloads-url]\n\n> Resolves a given package if it is installed locally, then tries to resolve it from global registry, using battle-tested [global-modules][] package. Better approach than internal `require.resolve`, so you can trust. You just get absolute filepath to some package - path to its entry point, its main export\n\n[![code climate][codeclimate-img]][codeclimate-url] \n[![standard code style][standard-img]][standard-url] \n[![linux build status][travis-img]][travis-url] \n[![windows build status][appveyor-img]][appveyor-url] \n[![coverage status][coveralls-img]][coveralls-url] \n[![dependency status][david-img]][david-url]\n\nYou might also be interested in [always-done](https://github.com/hybridables/always-done#readme).\n\n## Table of Contents\n- [Background](#background)\n  * [Why](#why)\n  * [Resolution](#resolution)\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n  * [resolvePackage](#resolvepackage)\n- [Related](#related)\n- [Contributing](#contributing)\n- [Building docs](#building-docs)\n- [Running tests](#running-tests)\n- [Author](#author)\n- [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Background\n\n### Why\nBecause I love hybrids - hybrid thinking. And here with _\"hybrid\"_ I mean that we need sane resolver. You give a package name and if it is not installed locally to be able to get it if it is installed globally. So that's what this package does - first tries to resolve it from locally installed modules, then if it's not found will load it from global.\n\nThat's useful and cool for command line interfaces, generators, scaffolders and etc stuff. There is one bad example - [gulp][], especially `gulp3`. I don't know, but for me it is weird to install same package both globally and locally. And Gulp is not the only one where I found this - this thinking and implementation. Two years or more I thinking why this is in that way.\n\nGood example, where resolving is correctly done is [generate][] / [base][] / [verb][]. There if you have some _generator_ installed globally, you can use it through CLI, but if it is installed locally you, again, can use it - Generate is smart enough and the Base ecosystem is robust enough. Internally, somewhere (not sure enough yet), in Generate - actually somewhere in Base plugins, exactly the same thing is done. So I believe we can integrate this package there successfuly.\n\nThe [resolve-pkg][] does not do that thing, [resolve-module][] too, [resolve][] and [resolve-from][] too. So... that's why.\n\nI built these 3-4 packages before ~2 years. I'm talking for [detect-installed][], [get-installed-path][] and [is-installed][]. They was not finished totally until now and there was few bugs.\n\n**Just to be clear:** this package returns you a full absolute path to given package - the main export (the entry point or whatever you calling it) to the given package. Actual path that you can directly `require` in later step, that's all about.\n\n### Resolution\nSo how we resolve given package?\n\n**First,** we pass the name directly to [get-installed-path][] and pass `local: true` to get the folder of that package from locally installed modules if exists.  \n\nThen we tries to read the `package.json` in that directory.  \n\n**1)** If it exists we do 3 things (using `path.resolve`):\n- if `options.mainFile` is given we join it with the folder of the package;\n- if `options.mainField` is given we get the value of that field from that package.json file and join it with the folder of the package;\n- or as last fallback if no options are given we use the value of `main` field in that package.json file.\n\n**2)** If there's no `package.json` file in that directory we simply check if `options.mainFile` is given and join it with the directory of the package. If not given we fallback to use `index.js`.\n\n**Second,** if given package is not installed locally we repeat the same process but we pass `local: false` to `get-install-path`, so it will check global registry of modules, based on [global-prefix][] and [global-modules][]. They are the best out there and works even on Windows machines, hence the green AppVeyor badges are all around mentioned packages.\n\n_If it is not clear enough with that words, feel free to open an issue to discuss it, look at `tryLoad` function in the source code or review the [tests](test.js)._\n\n## Install\nInstall with [npm](https://www.npmjs.com/)\n\n```\n$ npm install resolve-package --save\n```\n\nor install using [yarn](https://yarnpkg.com)\n\n```\n$ yarn add resolve-package\n```\n\n## Usage\n> For more use-cases see the [tests](test.js)\n\n```js\nconst resolvePackage = require('resolve-package')\n```\n\n## API\n\n### [resolvePackage](index.js#L53)\n> Get full absolute path of package with `name` from local node_modules or from globally installed.\n\n**Params**\n\n* `name` **{String}**: package name    \n* `opts` **{Function}**: optional options such as below    \n* `opts.cwd` **{String}**: directory where is the `node_modules` folder    \n* `opts.mainFile` **{String}**: main file for directories, default `index.js`    \n* `opts.mainField` **{String}**: name of the package.json's \"main\" field, default `main`    \n* `returns` **{Promise}**  \n\n**Example**\n\n```js\nconst resolvePackage = require('resolve-package')\n\nresolvePackage('npm').then((fp) => {\n  console.log(fp)\n  // => '~/.nvm/versions/node/v7.0.0/lib/node_modules/npm/lib/npm.js'\n})\n\nresolvePackage('standard').then((fp) => {\n  console.log(fp)\n  // => '~/.nvm/versions/node/v7.0.0/lib/node_modules/standard/index.js'\n})\n\nresolvePackage('get-installed-path').then((fp) => {\n  console.log(fp)\n  // => '~/code/resolve-package/node_modules/get-installed-path/index.js'\n})\n\nresolvePackage('foo-quqixs-dasdasdh').catch((err) => {\n  console.error(err) // => Error module not found\n})\n```\n\n## Related\n- [always-done](https://www.npmjs.com/package/always-done): Handle completion and errors with elegance! Support for streams, callbacks, promises, child processes, async/await and sync functions. A drop-in replacement… [more](https://github.com/hybridables/always-done#readme) | [homepage](https://github.com/hybridables/always-done#readme \"Handle completion and errors with elegance! Support for streams, callbacks, promises, child processes, async/await and sync functions. A drop-in replacement for [async-done][] - pass 100% of its tests plus more\")\n- [detect-installed](https://www.npmjs.com/package/detect-installed): Checks that given package is installed globally or locally. | [homepage](https://github.com/tunnckocore/detect-installed#readme \"Checks that given package is installed globally or locally.\")\n- [each-promise](https://www.npmjs.com/package/each-promise): Iterate over promises, promise-returning or async/await functions in series or parallel. Support settle (fail-fast), concurrency (limiting) and hooks system (start… [more](https://github.com/tunnckocore/each-promise#readme) | [homepage](https://github.com/tunnckocore/each-promise#readme \"Iterate over promises, promise-returning or async/await functions in series or parallel. Support settle (fail-fast), concurrency (limiting) and hooks system (start, beforeEach, afterEach, finish)\")\n- [get-installed-path](https://www.npmjs.com/package/get-installed-path): Get locally or globally installation path of given package name | [homepage](https://github.com/tunnckocore/get-installed-path#readme \"Get locally or globally installation path of given package name\")\n- [global-modules](https://www.npmjs.com/package/global-modules): The directory used by npm for globally installed npm modules. | [homepage](https://github.com/jonschlinkert/global-modules \"The directory used by npm for globally installed npm modules.\")\n- [global-paths](https://www.npmjs.com/package/global-paths): Returns an array of unique \"global\" directories based on the user's platform and environment. The resulting paths can be used… [more](https://github.com/jonschlinkert/global-paths) | [homepage](https://github.com/jonschlinkert/global-paths \"Returns an array of unique \"global\" directories based on the user's platform and environment. The resulting paths can be used for doing lookups for generators or other globally installed npm packages. Node.js / JavaScript.\")\n- [global-prefix](https://www.npmjs.com/package/global-prefix): Get the npm global path prefix. | [homepage](https://github.com/jonschlinkert/global-prefix \"Get the npm global path prefix.\")\n- [is-installed](https://www.npmjs.com/package/is-installed): Checks that given package is installed on the system - globally or locally. | [homepage](https://github.com/tunnckoCore/is-installed#readme \"Checks that given package is installed on the system - globally or locally.\")\n- [minibase](https://www.npmjs.com/package/minibase): Minimalist alternative for Base. Build complex APIs with small units called plugins. Works well with most of the already existing… [more](https://github.com/node-minibase/minibase#readme) | [homepage](https://github.com/node-minibase/minibase#readme \"Minimalist alternative for Base. Build complex APIs with small units called plugins. Works well with most of the already existing [base][] plugins.\")\n- [mukla](https://www.npmjs.com/package/mukla): Small, parallel and fast test framework with suppport for async/await, promises, callbacks, streams and observables. Targets and works at node.js… [more](https://github.com/tunnckocore/mukla#readme) | [homepage](https://github.com/tunnckocore/mukla#readme \"Small, parallel and fast test framework with suppport for async/await, promises, callbacks, streams and observables. Targets and works at node.js v0.10 and above.\")\n- [try-catch-core](https://www.npmjs.com/package/try-catch-core): Low-level package to handle completion and errors of sync or asynchronous functions, using [once][] and [dezalgo][] libs. Useful for and… [more](https://github.com/hybridables/try-catch-core#readme) | [homepage](https://github.com/hybridables/try-catch-core#readme \"Low-level package to handle completion and errors of sync or asynchronous functions, using [once][] and [dezalgo][] libs. Useful for and used in higher-level libs such as [always-done][] to handle completion of anything.\")\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/tunnckoCore/resolve-package/issues/new).  \nPlease read the [contributing guidelines](CONTRIBUTING.md) for advice on opening issues, pull requests, and coding standards.  \nIf you need some help and can spent some cash, feel free to [contact me at CodeMentor.io](https://www.codementor.io/tunnckocore?utm_source=github&utm_medium=button&utm_term=tunnckocore&utm_campaign=github) too.\n\n**In short:** If you want to contribute to that project, please follow these things\n\n1. Please DO NOT edit [README.md](README.md), [CHANGELOG.md](CHANGELOG.md) and [.verb.md](.verb.md) files. See [\"Building docs\"](#building-docs) section.\n2. Ensure anything is okey by installing the dependencies and run the tests. See [\"Running tests\"](#running-tests) section.\n3. Always use `npm run commit` to commit changes instead of `git commit`, because it is interactive and user-friendly. It uses [commitizen][] behind the scenes, which follows Conventional Changelog idealogy.\n4. Do NOT bump the version in package.json. For that we use `npm run release`, which is [standard-version][] and follows Conventional Changelog idealogy.\n\nThanks a lot! :)\n\n## Building docs\nDocumentation and that readme is generated using [verb-generate-readme][], which is a [verb][] generator, so you need to install both of them and then run `verb` command like that\n\n```\n$ npm install verbose/verb#dev verb-generate-readme --global && verb\n```\n\n_Please don't edit the README directly. Any changes to the readme must be made in [.verb.md](.verb.md)._\n\n## Running tests\nClone repository and run the following in that cloned directory\n\n```\n$ npm install && npm test\n```\n\n## Author\n**Charlike Mike Reagent**\n\n+ [github/tunnckoCore](https://github.com/tunnckoCore)\n+ [twitter/tunnckoCore](http://twitter.com/tunnckoCore)\n+ [codementor/tunnckoCore](https://codementor.io/tunnckoCore)\n\n## License\nCopyright © 2016, [Charlike Mike Reagent](http://i.am.charlike.online). Released under the [MIT license](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.2.0, on December 14, 2016._  \n_Project scaffolded using [charlike][] cli._\n\n[always-done]: https://github.com/hybridables/always-done\n[async-done]: https://github.com/gulpjs/async-done\n[base]: https://github.com/node-base/base\n[charlike]: https://github.com/tunnckocore/charlike\n[commitizen]: https://github.com/commitizen/cz-cli\n[detect-installed]: https://github.com/tunnckocore/detect-installed\n[dezalgo]: https://github.com/npm/dezalgo\n[generate]: https://github.com/generate/generate\n[get-installed-path]: https://github.com/tunnckocore/get-installed-path\n[global-modules]: https://github.com/jonschlinkert/global-modules\n[global-prefix]: https://github.com/jonschlinkert/global-prefix\n[gulp]: http://gulpjs.com\n[is-installed]: https://github.com/tunnckoCore/is-installed\n[once]: https://github.com/isaacs/once\n[resolve-from]: https://github.com/sindresorhus/resolve-from\n[resolve-module]: https://github.com/jkroso/node-resolve-module\n[resolve-pkg]: https://github.com/sindresorhus/resolve-pkg\n[resolve]: https://github.com/substack/node-resolve\n[standard-version]: https://github.com/conventional-changelog/standard-version\n[verb-generate-readme]: https://github.com/verbose/verb-generate-readme\n[verb]: https://github.com/verbose/verb\n\n[downloads-url]: https://www.npmjs.com/package/resolve-package\n[downloads-img]: https://img.shields.io/npm/dt/resolve-package.svg\n\n[codeclimate-url]: https://codeclimate.com/github/tunnckoCore/resolve-package\n[codeclimate-img]: https://img.shields.io/codeclimate/github/tunnckoCore/resolve-package.svg\n\n[travis-url]: https://travis-ci.org/tunnckoCore/resolve-package\n[travis-img]: https://img.shields.io/travis/tunnckoCore/resolve-package/master.svg?label=linux\n\n[appveyor-url]: https://ci.appveyor.com/project/tunnckoCore/resolve-package\n[appveyor-img]: https://img.shields.io/appveyor/ci/tunnckoCore/resolve-package/master.svg?label=windows\n\n[coveralls-url]: https://coveralls.io/r/tunnckoCore/resolve-package\n[coveralls-img]: https://img.shields.io/coveralls/tunnckoCore/resolve-package.svg\n\n[david-url]: https://david-dm.org/tunnckoCore/resolve-package\n[david-img]: https://img.shields.io/david/tunnckoCore/resolve-package.svg\n\n[standard-url]: https://github.com/feross/standard\n[standard-img]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Charlike Mike Reagent <@tunnckoCore> (http://i.am.charlike.online)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/resolve-package/-/resolve-package-1.0.1.tgz#686f70b188bd7d675f5bbc4282ccda060abb9d27",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/resolve-package/-/resolve-package-1.0.1.tgz",
    "hash": "686f70b188bd7d675f5bbc4282ccda060abb9d27",
    "integrity": "sha512-rzB7NnQpOkPHBWFPP3prUMqOP6yg3HkRGgcvR+lDyvyHoY3fZLFLYDkPXh78SPVBAE6VTCk/V+j8we4djg6o4g==",
    "registry": "npm",
    "packageName": "resolve-package",
    "cacheIntegrity": "sha512-rzB7NnQpOkPHBWFPP3prUMqOP6yg3HkRGgcvR+lDyvyHoY3fZLFLYDkPXh78SPVBAE6VTCk/V+j8we4djg6o4g== sha1-aG9wsYi9fWdfW7xCgszaBgq7nSc="
  },
  "registry": "npm",
  "hash": "686f70b188bd7d675f5bbc4282ccda060abb9d27"
}