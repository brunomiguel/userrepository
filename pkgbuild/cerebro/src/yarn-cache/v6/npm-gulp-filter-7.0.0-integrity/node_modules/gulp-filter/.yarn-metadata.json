{
  "manifest": {
    "name": "gulp-filter",
    "version": "7.0.0",
    "description": "Filter files in a `vinyl` stream",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/gulp-filter.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "engines": {
      "node": ">=12"
    },
    "scripts": {
      "test": "xo && mocha"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "gulpplugin",
      "filter",
      "ignore",
      "file",
      "files",
      "match",
      "minimatch",
      "glob",
      "globbing",
      "vinyl"
    ],
    "dependencies": {
      "multimatch": "^5.0.0",
      "plugin-error": "^1.0.1",
      "streamfilter": "^3.0.0",
      "to-absolute-glob": "^2.0.2"
    },
    "devDependencies": {
      "mocha": "^8.3.2",
      "vinyl": "^2.2.1",
      "xo": "^0.39.1"
    },
    "peerDependencies": {
      "gulp": ">=4"
    },
    "peerDependenciesMeta": {
      "gulp": {
        "optional": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-gulp-filter-7.0.0-integrity/node_modules/gulp-filter/package.json",
    "readmeFilename": "readme.md",
    "readme": "# gulp-filter\n\n> Filter files in a [`vinyl`](https://github.com/gulpjs/vinyl) stream\n\nEnables you to work on a subset of the original files by filtering them using glob patterns. When you're done and want all the original files back, you just use the `restore` stream.\n\n## Install\n\n```\n$ npm install --save-dev gulp-filter\n```\n\n## Usage\n\n### Filter only\n\nYou may want to just filter the stream content:\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\nexports.default = () => {\n\t// Create filter instance inside task function\n\tconst f = filter(['**', '!*src/vendor']);\n\n\treturn gulp.src('src/**/*.js')\n\t\t// Filter a subset of the files\n\t\t.pipe(f)\n\t\t// Run them through a plugin\n\t\t.pipe(uglify())\n\t\t.pipe(gulp.dest('dist'));\n};\n```\n\n### Restoring filtered files\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\nexports.default = () => {\n\t// Create filter instance inside task function\n\tconst f = filter(['**', '!*src/vendor'], {restore: true});\n\n\treturn gulp.src('src/**/*.js')\n\t\t// Filter a subset of the files\n\t\t.pipe(f)\n\t\t// Run them through a plugin\n\t\t.pipe(uglify())\n\t\t// Bring back the previously filtered out files (optional)\n\t\t.pipe(f.restore)\n\t\t.pipe(gulp.dest('dist'));\n};\n```\n\n### Multiple filters\n\nBy combining and restoring different filters you can process different sets of files with a single pipeline.\n\n```js\nconst gulp = require('gulp');\nconst less = require('gulp-less');\nconst concat = require('gulp-concat');\nconst filter = require('gulp-filter');\n\nexports.default = () => {\n\tconst jsFilter = filter('**/*.js', {restore: true});\n\tconst lessFilter = filter('**/*.less', {restore: true});\n\n\treturn gulp.src('assets/**')\n\t\t.pipe(jsFilter)\n\t\t.pipe(concat('bundle.js'))\n\t\t.pipe(jsFilter.restore)\n\t\t.pipe(lessFilter)\n\t\t.pipe(less())\n\t\t.pipe(lessFilter.restore)\n\t\t.pipe(gulp.dest('out/'));\n};\n```\n\n### Restore as a file source\n\nYou can restore filtered files in a different place and use it as a standalone source of files (ReadableStream). Setting the `passthrough` option to `false` allows you to do so.\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\nexports.default = () => {\n\tconst f = filter(['**', '!*src/vendor'], {restore: true, passthrough: false});\n\n\tconst stream = gulp.src('src/**/*.js')\n\t\t// Filter a subset of the files\n\t\t.pipe(f)\n\t\t// Run them through a plugin\n\t\t.pipe(uglify())\n\t\t.pipe(gulp.dest('dist'));\n\n\t// Use filtered files as a gulp file source\n\tf.restore.pipe(gulp.dest('vendor-dist'));\n\n\treturn stream;\n};\n```\n\n## API\n\n### filter(pattern, options?)\n\nReturns a [transform stream](https://nodejs.org/api/stream.html#stream_class_stream_transform) with a [.restore](#optionsrestore) property.\n\n#### pattern\n\nType: `string | string[] | Function`\n\nAccepts a string/array with globbing patterns which are run through [multimatch](https://github.com/sindresorhus/multimatch).\n\nIf you supply a function, you'll get a [`vinyl` file object](https://github.com/wearefractal/vinyl#file) as the first argument and you're expected to return a boolean of whether to include the file:\n\n```js\nfilter(file => /unicorns/.test(file.path));\n```\n\n#### options\n\nType: `object`\n\nAccepts [`minimatch` options](https://github.com/isaacs/minimatch#options).\n\n*Note:* Set `dot: true` if you need to match files prefixed with a dot, for example, `.gitignore`.\n\n##### restore\n\nType: `boolean`\\\nDefault: `false`\n\nRestore filtered files.\n\n##### passthrough\n\nType: `boolean`\\\nDefault: `true`\n\nWhen set to `true`, filtered files are restored with a `stream.PassThrough`, otherwise, when set to `false`, filtered files are restored as a `stram.Readable`.\n\nWhen the stream is a `stream.Readable`, it ends by itself, but when it's `stream.PassThrough`, you are responsible of ending the stream.\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/gulp-filter/-/gulp-filter-7.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/gulp-filter/-/gulp-filter-7.0.0.tgz",
    "hash": "",
    "integrity": "sha512-ZGWtJo0j1mHfP77tVuhyqem4MRA5NfNRjoVe6VAkLGeQQ/QGo2VsFwp7zfPTGDsd1rwzBmoDHhxpE6f5B3Zuaw==",
    "registry": "npm",
    "packageName": "gulp-filter",
    "cacheIntegrity": "sha512-ZGWtJo0j1mHfP77tVuhyqem4MRA5NfNRjoVe6VAkLGeQQ/QGo2VsFwp7zfPTGDsd1rwzBmoDHhxpE6f5B3Zuaw== sha1-4HEvPle11kf4AqGIAlXK+1Sr8Vg="
  },
  "registry": "npm",
  "hash": "6465ad268d23d661df3fbeed56e872a9e9b831103935f3518e855ee950242c679043f406a3656c170a7bcdf3d3183b1dd6bc33066a031e1c6913a7f907766e6b"
}