{
  "manifest": {
    "name": "inquirer",
    "version": "7.3.3",
    "description": "A collection of common interactive command line user interfaces.",
    "author": {
      "name": "Simon Boudrias",
      "email": "admin@simonboudrias.com"
    },
    "files": [
      "lib",
      "README.md"
    ],
    "main": "lib/inquirer.js",
    "keywords": [
      "command",
      "prompt",
      "stdin",
      "cli",
      "tty",
      "menu"
    ],
    "engines": {
      "node": ">=8.0.0"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "chalk-pipe": "^4.0.0",
      "cmdify": "^0.0.4",
      "mocha": "^8.0.1",
      "mockery": "^2.1.0",
      "nyc": "^15.0.0",
      "sinon": "^9.0.0"
    },
    "scripts": {
      "test": "nyc mocha test/**/* -r ./test/before",
      "posttest": "nyc report --reporter=text-lcov > ../../coverage/nyc-report.lcov",
      "prepublishOnly": "cp ../../README.md .",
      "postpublish": "rm -f README.md"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/SBoudrias/Inquirer.js.git"
    },
    "license": "MIT",
    "dependencies": {
      "ansi-escapes": "^4.2.1",
      "chalk": "^4.1.0",
      "cli-cursor": "^3.1.0",
      "cli-width": "^3.0.0",
      "external-editor": "^3.0.3",
      "figures": "^3.0.0",
      "lodash": "^4.17.19",
      "mute-stream": "0.0.8",
      "run-async": "^2.4.0",
      "rxjs": "^6.6.0",
      "string-width": "^4.1.0",
      "strip-ansi": "^6.0.0",
      "through": "^2.3.6"
    },
    "gitHead": "808d5538531c1ca1c34f832d77bc98dfd0ba4000",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-inquirer-7.3.3-integrity/node_modules/inquirer/package.json",
    "readmeFilename": "README.md",
    "readme": "<img width=\"75px\" height=\"75px\" align=\"right\" alt=\"Inquirer Logo\" src=\"https://raw.githubusercontent.com/SBoudrias/Inquirer.js/master/assets/inquirer_readme.svg?sanitize=true\" title=\"Inquirer.js\"/>\n\n# Inquirer.js\n\n[![npm](https://badge.fury.io/js/inquirer.svg)](http://badge.fury.io/js/inquirer)\n[![tests](https://travis-ci.org/SBoudrias/Inquirer.js.svg?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n[![Coverage Status](https://codecov.io/gh/SBoudrias/Inquirer.js/branch/master/graph/badge.svg)](https://codecov.io/gh/SBoudrias/Inquirer.js)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FSBoudrias%2FInquirer.js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FSBoudrias%2FInquirer.js?ref=badge_shield)\n\nA collection of common interactive command line user interfaces.\n\n## Table of Contents\n\n1.  [Documentation](#documentation)\n    1.  [Installation](#installation)\n    2.  [Examples](#examples)\n    3.  [Methods](#methods)\n    4.  [Objects](#objects)\n    5.  [Questions](#questions)\n    6.  [Answers](#answers)\n    7.  [Separator](#separator)\n    8.  [Prompt Types](#prompt)\n2.  [User Interfaces and Layouts](#layouts)\n    1.  [Reactive Interface](#reactive)\n3.  [Support](#support)\n4.  [Known issues](#issues)\n4.  [News](#news)\n5.  [Contributing](#contributing)\n6.  [License](#license)\n7.  [Plugins](#plugins)\n\n## Goal and Philosophy\n\n**`Inquirer.js`** strives to be an easily embeddable and beautiful command line interface for [Node.js](https://nodejs.org/) (and perhaps the \"CLI [Xanadu](https://en.wikipedia.org/wiki/Citizen_Kane)\").\n\n**`Inquirer.js`** should ease the process of\n\n- providing _error feedback_\n- _asking questions_\n- _parsing_ input\n- _validating_ answers\n- managing _hierarchical prompts_\n\n> **Note:** **`Inquirer.js`** provides the user interface and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [commander](https://github.com/visionmedia/commander.js), [vorpal](https://github.com/dthree/vorpal) or [args](https://github.com/leo/args).\n\n## [Documentation](#documentation)\n\n<a name=\"documentation\"></a>\n\n### Installation\n\n<a name=\"installation\"></a>\n\n```shell\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require('inquirer');\ninquirer\n  .prompt([\n    /* Pass your questions in here */\n  ])\n  .then(answers => {\n    // Use user feedback for... whatever!!\n  })\n  .catch(error => {\n    if(error.isTtyError) {\n      // Prompt couldn't be rendered in the current environment\n    } else {\n      // Something else when wrong\n    }\n  });\n```\n\n<a name=\"examples\"></a>\n\n### Examples (Run it and see it)\n\nCheck out the [`packages/inquirer/examples/`](https://github.com/SBoudrias/Inquirer.js/tree/master/packages/inquirer/examples) folder for code and interface examples.\n\n```shell\nnode packages/inquirer/examples/pizza.js\nnode packages/inquirer/examples/checkbox.js\n# etc...\n```\n\n### Methods\n\n<a name=\"methods\"></a>\n\n#### `inquirer.prompt(questions) -> promise`\n\nLaunch the prompt interface (inquiry session)\n\n- **questions** (Array) containing [Question Object](#question) (using the [reactive interface](#reactive-interface), you can also pass a `Rx.Observable` instance)\n- returns a **Promise**\n\n#### `inquirer.registerPrompt(name, prompt)`\n\nRegister prompt plugins under `name`.\n\n- **name** (string) name of the this new prompt. (used for question `type`)\n- **prompt** (object) the prompt object itself (the plugin)\n\n#### `inquirer.createPromptModule() -> prompt function`\n\nCreate a self contained inquirer module. If you don't want to affect other libraries that also rely on inquirer when you overwrite or add new prompt types.\n\n```js\nvar prompt = inquirer.createPromptModule();\n\nprompt(questions).then(/* ... */);\n```\n\n### Objects\n\n<a name=\"objects\"></a>\n\n#### Question\n\n<a name=\"questions\"></a>\nA question object is a `hash` containing question related values:\n\n- **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `number`, `confirm`,\n  `list`, `rawlist`, `expand`, `checkbox`, `password`, `editor`\n- **name**: (String) The name to use when storing the answer in the answers hash. If the name contains periods, it will define a path in the answers hash.\n- **message**: (String|Function) The question to print. If defined as a function, the first parameter will be the current inquirer session answers. Defaults to the value of `name` (followed by a colon).\n- **default**: (String|Number|Boolean|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.\n- **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.\n  Array values can be simple `numbers`, `strings`, or `objects` containing a `name` (to display in list), a `value` (to save in the answers hash), and a `short` (to display after selection) properties. The choices array can also contain [a `Separator`](#separator).\n- **validate**: (Function) Receive the user input and answers hash. Should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n- **filter**: (Function) Receive the user input and answers hash. Returns the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n- **transformer**: (Function) Receive the user input, answers hash and option flags, and return a transformed value to display to the user. The transformation only impacts what is shown while editing. It does not modify the answers hash.\n- **when**: (Function, Boolean) Receive the current user answers hash and should return `true` or `false` depending on whether or not this question should be asked. The value can also be a simple boolean.\n- **pageSize**: (Number) Change the number of lines that will be rendered when using `list`, `rawList`, `expand` or `checkbox`.\n- **prefix**: (String) Change the default _prefix_ message.\n- **suffix**: (String) Change the default _suffix_ message.\n- **askAnswered**: (Boolean) Force to prompt the question if the answer already exists.\n- **loop**: (Boolean) Enable list looping. Defaults: `true`\n\n`default`, `choices`(if defined as functions), `validate`, `filter` and `when` functions can be called asynchronously. Either return a promise or use `this.async()` to get a callback you'll call with the final value.\n\n```javascript\n{\n  /* Preferred way: with promise */\n  filter() {\n    return new Promise(/* etc... */);\n  },\n\n  /* Legacy way: with this.async */\n  validate: function (input) {\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== 'number') {\n        // Pass the return value in the done callback\n        done('You need to provide a number');\n        return;\n      }\n      // Pass the return value in the done callback\n      done(null, true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\n\n<a name=\"answers\"></a>\nA key/value hash containing the client answers in each prompt.\n\n- **Key** The `name` property of the _question_ object\n- **Value** (Depends on the prompt)\n  - `confirm`: (Boolean)\n  - `input` : User input (filtered if `filter` is defined) (String)\n  - `number`: User input (filtered if `filter` is defined) (Number)\n  - `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\n\n<a name=\"separator\"></a>\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nSeparator instances have a property `type` equal to `separator`. This should allow tools façading Inquirer interface from detecting separator types in lists.\n\n<a name=\"prompt\"></a>\n\n### Prompt types\n\n---\n\n> **Note:**: _allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n#### List - `{type: 'list'}`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`, `loop`] properties. (Note that\ndefault must be the choice `index` in the array or a choice `value`)\n\n![List prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/list.svg)\n\n---\n\n#### Raw List - `{type: 'rawlist'}`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`, `loop`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![Raw list prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/rawlist.svg)\n\n---\n\n#### Expand - `{type: 'expand'}`\n\nTake `type`, `name`, `message`, `choices`[, `default`] properties. (Note that\ndefault must be the choice `index` in the array. If `default` key not provided, then `help` will be used as default choice)\n\nNote that the `choices` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/expand-y.svg)\n![Expand prompt expanded](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/expand-d.svg)\n\n---\n\n#### Checkbox - `{type: 'checkbox'}`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`, `default`, `loop`] properties. `default` is expected to be an Array of the checked choices value.\n\nChoices marked as `{checked: true}` will be checked by default.\n\nChoices whose property `disabled` is truthy will be unselectable. If `disabled` is a string, then the string will be outputted next to the disabled choice, otherwise it'll default to `\"Disabled\"`. The `disabled` property can also be a synchronous function receiving the current answers as argument and returning a boolean or a string.\n\n![Checkbox prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/checkbox.svg)\n\n---\n\n#### Confirm - `{type: 'confirm'}`\n\nTake `type`, `name`, `message`, [`default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/confirm.svg)\n\n---\n\n#### Input - `{type: 'input'}`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`, `transformer`] properties.\n\n![Input prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/input.svg)\n\n---\n\n#### Input - `{type: 'number'}`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`, `transformer`] properties.\n\n---\n\n#### Password - `{type: 'password'}`\n\nTake `type`, `name`, `message`, `mask`,[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://cdn.rawgit.com/SBoudrias/Inquirer.js/28ae8337ba51d93e359ef4f7ee24e79b69898962/assets/screenshots/password.svg)\n\n---\n\nNote that `mask` is required to hide the actual user input.\n\n#### Editor - `{type: 'editor'}`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties\n\nLaunches an instance of the users preferred editor on a temporary file. Once the user exits their editor, the contents of the temporary file are read in as the result. The editor to use is determined by reading the $VISUAL or $EDITOR environment variables. If neither of those are present, notepad (on Windows) or vim (Linux or Mac) is used.\n\n<a name=\"layouts\"></a>\n\n### Use in Non-Interactive Environments\n`prompt()` requires that it is run in an interactive environment. (I.e. [One where `process.stdin.isTTY` is `true`](https://nodejs.org/docs/latest-v12.x/api/process.html#process_a_note_on_process_i_o)). If `prompt()` is invoked outside of such an environment, then `prompt()` will return a rejected promise with an error. For convenience, the error will have a `isTtyError` property to programmatically indicate the cause.\n\n\n## User Interfaces and layouts\n\nAlong with the prompts, Inquirer offers some basic text UI.\n\n#### Bottom Bar - `inquirer.ui.BottomBar`\n\nThis UI present a fixed text at the bottom of a free text zone. This is useful to keep a message to the bottom of the screen while outputting command outputs on the higher section.\n\n```javascript\nvar ui = new inquirer.ui.BottomBar();\n\n// pipe a Stream to the log zone\noutputStream.pipe(ui.log);\n\n// Or simply write output\nui.log.write('something just happened.');\nui.log.write('Almost over, standby!');\n\n// During processing, update the bottom bar content to display a loader\n// or output a progress bar, etc\nui.updateBottomBar('new bottom bar content');\n```\n\n<a name=\"reactive\"></a>\n\n## Reactive interface\n\nInternally, Inquirer uses the [JS reactive extension](https://github.com/ReactiveX/rxjs) to handle events and async flows.\n\nThis mean you can take advantage of this feature to provide more advanced flows. For example, you can dynamically add questions to be asked:\n\n```js\nvar prompts = new Rx.Subject();\ninquirer.prompt(prompts);\n\n// At some point in the future, push new questions\nprompts.next({\n  /* question... */\n});\nprompts.next({\n  /* question... */\n});\n\n// When you're done\nprompts.complete();\n```\n\nAnd using the return value `process` property, you can access more fine grained callbacks:\n\n```js\ninquirer.prompt(prompts).ui.process.subscribe(onEachAnswer, onError, onComplete);\n```\n\n## Support (OS Terminals)\n\n<a name=\"support\"></a>\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows ([Known issues](#issues))**:\n  - [ConEmu](https://conemu.github.io/)\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Linux (Ubuntu, openSUSE, Arch Linux, etc)**:\n  - gnome-terminal (Terminal GNOME)\n  - konsole\n\n## Know issues\n\n<a name=\"issues\"></a>\n\nRunning Inquirer together with network streams in Windows platform inside some terminals can result in process hang.\nWorkaround: run inside another terminal.\nPlease refer to the https://github.com/nodejs/node/issues/21771\n\n## News on the march (Release notes)\n\n<a name=\"news\"></a>\n\nPlease refer to the [GitHub releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n## Contributing\n\n<a name=\"contributing\"></a>\n\n**Unit test**\nUnit test are written in [Mocha](https://mochajs.org/). Please add a unit test for every new feature or bug fix. `npm test` to run the test suite.\n\n**Documentation**\nAdd documentation for every API change. Feel free to send typo fixes and better docs!\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto [@vaxilart](https://twitter.com/Vaxilart)) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\n## License\n\n<a name=\"license\"></a>\n\nCopyright (c) 2016 Simon Boudrias (twitter: [@vaxilart](https://twitter.com/Vaxilart))\nLicensed under the MIT license.\n\n## Plugins\n\n<a name=\"plugins\"></a>\n\n### Prompts\n\n[**autocomplete**](https://github.com/mokkabonna/inquirer-autocomplete-prompt)<br>\nPresents a list of options as the user types, compatible with other packages such as fuzzy (for search)<br>\n<br>\n![autocomplete prompt](https://github.com/mokkabonna/inquirer-autocomplete-prompt/raw/master/inquirer.gif)\n\n[**checkbox-plus**](https://github.com/faressoft/inquirer-checkbox-plus-prompt)<br>\nCheckbox list with autocomplete and other additions<br>\n<br>\n![checkbox-plus](https://github.com/faressoft/inquirer-checkbox-plus-prompt/raw/master/demo.gif)\n\n[**datetime**](https://github.com/DerekTBrown/inquirer-datepicker-prompt)<br>\nCustomizable date/time selector using both number pad and arrow keys<br>\n<br>\n![Datetime Prompt](https://github.com/DerekTBrown/inquirer-datepicker-prompt/raw/master/example/datetime-prompt.png)\n\n[**inquirer-select-line**](https://github.com/adam-golab/inquirer-select-line)<br>\nPrompt for selecting index in array where add new element<br>\n<br>\n![inquirer-select-line gif](https://media.giphy.com/media/xUA7b1MxpngddUvdHW/giphy.gif)\n\n[**command**](https://github.com/sullof/inquirer-command-prompt)<br>\nSimple prompt with command history and dynamic autocomplete<br>\n\n[**inquirer-fuzzy-path**](https://github.com/adelsz/inquirer-fuzzy-path)<br>\nPrompt for fuzzy file/directory selection.<br>\n<br>\n![inquirer-fuzzy-path](https://raw.githubusercontent.com/adelsz/inquirer-fuzzy-path/master/recording.gif)\n\n[**inquirer-emoji**](https://github.com/tannerntannern/inquirer-emoji)<br>\nPrompt for inputting emojis.<br>\n<br>\n![inquirer-emoji](https://github.com/tannerntannern/inquirer-emoji/raw/master/demo.gif)\n\n[**inquirer-chalk-pipe**](https://github.com/LitoMore/inquirer-chalk-pipe)<br>\nPrompt for input chalk-pipe style strings<br>\n<br>\n![inquirer-chalk-pipe](https://github.com/LitoMore/inquirer-chalk-pipe/raw/master/screenshot.gif)\n\n[**inquirer-search-checkbox**](https://github.com/clinyong/inquirer-search-checkbox)<br>\nSearchable Inquirer checkbox<br>\n\n[**inquirer-search-list**](https://github.com/robin-rpr/inquirer-search-list)<br>\nSearchable Inquirer list<br>\n<br>\n![inquirer-search-list](https://github.com/robin-rpr/inquirer-search-list/blob/master/preview.gif)\n\n[**inquirer-prompt-suggest**](https://github.com/olistic/inquirer-prompt-suggest)<br>\nInquirer prompt for your less creative users.<br>\n<br>\n![inquirer-prompt-suggest](https://user-images.githubusercontent.com/5600126/40391192-d4f3d6d0-5ded-11e8-932f-4b75b642c09e.gif)\n\n[**inquirer-s3**](https://github.com/HQarroum/inquirer-s3)<br>\nAn S3 object selector for Inquirer.<br>\n<br>\n![inquirer-s3](https://github.com/HQarroum/inquirer-s3/raw/master/docs/inquirer-screenshot.png)\n\n[**inquirer-autosubmit-prompt**](https://github.com/yaodingyd/inquirer-autosubmit-prompt)<br>\nAuto submit based on your current input, saving one extra enter<br>\n\n[**inquirer-file-tree-selection-prompt**](https://github.com/anc95/inquirer-file-tree-selection)<br>\nInquirer prompt for to select a file or directory in file tree<br>\n<br>\n![inquirer-file-tree-selection-prompt](https://github.com/anc95/inquirer-file-tree-selection/blob/master/example/screenshot.gif)\n\n[**inquirer-table-prompt**](https://github.com/eduardoboucas/inquirer-table-prompt)<br>\nA table-like prompt for Inquirer.<br>\n<br>\n![inquirer-table-prompt](https://raw.githubusercontent.com/eduardoboucas/inquirer-table-prompt/master/screen-capture.gif)\n",
    "licenseText": "Copyright (c) 2012 Simon Boudrias\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-7.3.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/inquirer/-/inquirer-7.3.3.tgz",
    "hash": "",
    "integrity": "sha512-JG3eIAj5V9CwcGvuOmoo6LB9kbAYT8HXffUl6memuszlwDC/qvFAJw49XJ5NROSFNPxp3iQg1GqkFhaY/CR0IA==",
    "registry": "npm",
    "packageName": "inquirer",
    "cacheIntegrity": "sha512-JG3eIAj5V9CwcGvuOmoo6LB9kbAYT8HXffUl6memuszlwDC/qvFAJw49XJ5NROSFNPxp3iQg1GqkFhaY/CR0IA== sha1-BNF2sq8Er8FXqD/XwQDpjuCq0AM="
  },
  "registry": "npm",
  "hash": "246dde2008f957d0b0706bee3a6a28e8b07d91b0184fc1d77df525ea67a6bacce5c030bfaaf140270e3d5c9e4d44e48534fc69de2420d46aa4161698fc247420"
}