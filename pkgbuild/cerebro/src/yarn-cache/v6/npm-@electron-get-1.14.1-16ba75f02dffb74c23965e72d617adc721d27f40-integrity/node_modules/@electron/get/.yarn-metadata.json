{
  "manifest": {
    "name": "@electron/get",
    "version": "1.14.1",
    "description": "Utility for downloading artifacts from different versions of Electron",
    "main": "dist/cjs/index.js",
    "module": "dist/esm/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/electron/get"
    },
    "author": {
      "name": "Samuel Attard"
    },
    "license": "MIT",
    "scripts": {
      "build": "tsc && tsc -p tsconfig.esm.json",
      "build:docs": "typedoc --out docs",
      "eslint": "eslint --ext .ts src test",
      "jest": "jest --coverage",
      "lint": "npm run prettier && npm run eslint",
      "prettier": "prettier --check \"src/**/*.ts\" \"test/**/*.ts\"",
      "prepublishOnly": "npm run build",
      "test": "npm run lint && npm run jest",
      "test:nonetwork": "npm run lint && npm run jest -- --testPathIgnorePatterns network.spec"
    },
    "files": [
      "dist/*",
      "README.md"
    ],
    "engines": {
      "node": ">=8.6"
    },
    "dependencies": {
      "debug": "^4.1.1",
      "env-paths": "^2.2.0",
      "fs-extra": "^8.1.0",
      "got": "^9.6.0",
      "progress": "^2.0.3",
      "semver": "^6.2.0",
      "sumchecker": "^3.0.1"
    },
    "devDependencies": {
      "@continuous-auth/semantic-release-npm": "^2.0.0",
      "@types/debug": "^4.1.4",
      "@types/fs-extra": "^8.0.0",
      "@types/got": "^9.4.4",
      "@types/jest": "^24.0.13",
      "@types/node": "^12.0.2",
      "@types/progress": "^2.0.3",
      "@types/semver": "^6.2.0",
      "@typescript-eslint/eslint-plugin": "^2.34.0",
      "@typescript-eslint/parser": "^2.34.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.15.0",
      "eslint-plugin-import": "^2.22.1",
      "eslint-plugin-jest": "< 24.0.0",
      "husky": "^2.3.0",
      "jest": "^24.8.0",
      "lint-staged": "^8.1.7",
      "prettier": "^1.17.1",
      "ts-jest": "^24.0.0",
      "typedoc": "^0.17.2",
      "typescript": "^3.8.0"
    },
    "eslintConfig": {
      "parser": "@typescript-eslint/parser",
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:jest/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "prettier",
        "prettier/@typescript-eslint"
      ]
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.ts": [
        "eslint --fix",
        "prettier --write",
        "git add"
      ]
    },
    "keywords": [
      "electron",
      "download",
      "prebuild",
      "get",
      "artifact",
      "release"
    ],
    "optionalDependencies": {
      "global-agent": "^3.0.0",
      "global-tunnel-ng": "^2.7.1"
    },
    "resolutions": {
      "eslint/inquirer": "< 7.3.0",
      "**/@typescript-eslint/typescript-estree/semver": "^6.3.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@electron-get-1.14.1-16ba75f02dffb74c23965e72d617adc721d27f40-integrity/node_modules/@electron/get/package.json",
    "readmeFilename": "README.md",
    "readme": "# @electron/get\n\n> Download Electron release artifacts\n\n[![CircleCI](https://circleci.com/gh/electron/get.svg?style=svg)](https://circleci.com/gh/electron/get)\n\n## Usage\n\n### Simple: Downloading an Electron Binary ZIP\n\n```typescript\nimport { download } from '@electron/get';\n\n// NB: Use this syntax within an async function, Node does not have support for\n//     top-level await as of Node 12.\nconst zipFilePath = await download('4.0.4');\n```\n\n### Advanced: Downloading a macOS Electron Symbol File\n\n\n```typescript\nimport { downloadArtifact } from '@electron/get';\n\n// NB: Use this syntax within an async function, Node does not have support for\n//     top-level await as of Node 12.\nconst zipFilePath = await downloadArtifact({\n  version: '4.0.4',\n  platform: 'darwin',\n  artifactName: 'electron',\n  artifactSuffix: 'symbols',\n  arch: 'x64',\n});\n```\n\n### Specifying a mirror\n\nTo specify another location to download Electron assets from, the following options are\navailable:\n\n* `mirrorOptions` Object\n  * `mirror` String (optional) - The base URL of the mirror to download from.\n  * `nightlyMirror` String (optional) - The Electron nightly-specific mirror URL.\n  * `customDir` String (optional) - The name of the directory to download from, often scoped by version number.\n  * `customFilename` String (optional) - The name of the asset to download.\n  * `resolveAssetURL` Function (optional) - A function allowing customization of the url used to download the asset.\n\nAnatomy of a download URL, in terms of `mirrorOptions`:\n\n```\nhttps://github.com/electron/electron/releases/download/v4.0.4/electron-v4.0.4-linux-x64.zip\n|                                                     |       |                           |\n-------------------------------------------------------       -----------------------------\n                        |                                                   |\n              mirror / nightlyMirror                  |    |         customFilename\n                                                       ------\n                                                         ||\n                                                      customDir\n```\n\nExample:\n\n```typescript\nimport { download } from '@electron/get';\n\nconst zipFilePath = await download('4.0.4', {\n  mirrorOptions: {\n    mirror: 'https://mirror.example.com/electron/',\n    customDir: 'custom',\n    customFilename: 'unofficial-electron-linux.zip'\n  }\n});\n// Will download from https://mirror.example.com/electron/custom/unofficial-electron-linux.zip\n\nconst nightlyZipFilePath = await download('8.0.0-nightly.20190901', {\n  mirrorOptions: {\n    nightlyMirror: 'https://nightly.example.com/',\n    customDir: 'nightlies',\n    customFilename: 'nightly-linux.zip'\n  }\n});\n// Will download from https://nightly.example.com/nightlies/nightly-linux.zip\n```\n\n`customDir` can have the placeholder `{{ version }}`, which will be replaced by the version\nspecified (without the leading `v`). For example:\n\n```javascript\nconst zipFilePath = await download('4.0.4', {\n  mirrorOptions: {\n    mirror: 'https://mirror.example.com/electron/',\n    customDir: 'version-{{ version }}',\n    platform: 'linux',\n    arch: 'x64'\n  }\n});\n// Will download from https://mirror.example.com/electron/version-4.0.4/electron-v4.0.4-linux-x64.zip\n```\n\n#### Using environment variables for mirror options\nMirror options can also be specified via the following environment variables:\n* `ELECTRON_CUSTOM_DIR` - Specifies the custom directory to download from.\n* `ELECTRON_CUSTOM_FILENAME` - Specifies the custom file name to download.\n* `ELECTRON_MIRROR` - Specifies the URL of the server to download from if the version is not a nightly version.\n* `ELECTRON_NIGHTLY_MIRROR` - Specifies the URL of the server to download from if the version is a nightly version.\n\n### Overriding the version downloaded\n\nThe version downloaded can be overriden by setting the `ELECTRON_CUSTOM_VERSION` environment variable.\nSetting this environment variable will override the version passed in to `download` or `downloadArtifact`.\n\n## How It Works\n\nThis module downloads Electron to a known place on your system and caches it\nso that future requests for that asset can be returned instantly.  The cache\nlocations are:\n\n* Linux: `$XDG_CACHE_HOME` or `~/.cache/electron/`\n* MacOS: `~/Library/Caches/electron/`\n* Windows: `%LOCALAPPDATA%/electron/Cache` or `~/AppData/Local/electron/Cache/`\n\nBy default, the module uses [`got`](https://github.com/sindresorhus/got) as the\ndownloader. As a result, you can use the same [options](https://github.com/sindresorhus/got#options)\nvia `downloadOptions`.\n\n### Progress Bar\n\nBy default, a progress bar is shown when downloading an artifact for more than 30 seconds. To\ndisable, set the `ELECTRON_GET_NO_PROGRESS` environment variable to any non-empty value, or set\n`quiet` to `true` in `downloadOptions`. If you need to monitor progress yourself via the API, set\n`getProgressCallback` in `downloadOptions`, which has the same function signature as `got`'s\n[`downloadProgress` event callback](https://github.com/sindresorhus/got#ondownloadprogress-progress).\n\n### Proxies\n\nDownstream packages should utilize the `initializeProxy` function to add HTTP(S) proxy support. If\nthe environment variable `ELECTRON_GET_USE_PROXY` is set, it is called automatically. A different\nproxy module is used, depending on the version of Node in use, and as such, there are slightly\ndifferent ways to set the proxy environment variables. For Node 10 and above,\n[`global-agent`](https://github.com/gajus/global-agent#environment-variables) is used. Otherwise,\n[`global-tunnel-ng`](https://github.com/np-maintain/global-tunnel#auto-config) is used. Refer to the\nappropriate linked module to determine how to configure proxy support.\n",
    "licenseText": "MIT License\n\nCopyright (c) Contributors to the Electron project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@electron/get/-/get-1.14.1.tgz#16ba75f02dffb74c23965e72d617adc721d27f40",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@electron/get/-/get-1.14.1.tgz",
    "hash": "16ba75f02dffb74c23965e72d617adc721d27f40",
    "integrity": "sha512-BrZYyL/6m0ZXz/lDxy/nlVhQz+WF+iPS6qXolEU8atw7h6v1aYkjwJZ63m+bJMBTxDE66X+r2tPS4a/8C82sZw==",
    "registry": "npm",
    "packageName": "@electron/get",
    "cacheIntegrity": "sha512-BrZYyL/6m0ZXz/lDxy/nlVhQz+WF+iPS6qXolEU8atw7h6v1aYkjwJZ63m+bJMBTxDE66X+r2tPS4a/8C82sZw== sha1-Frp18C3/t0wjll5y1hetxyHSf0A="
  },
  "registry": "npm",
  "hash": "16ba75f02dffb74c23965e72d617adc721d27f40"
}