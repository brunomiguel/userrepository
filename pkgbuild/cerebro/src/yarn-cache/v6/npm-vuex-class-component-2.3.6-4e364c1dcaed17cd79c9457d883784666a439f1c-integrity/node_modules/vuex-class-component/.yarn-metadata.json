{
  "manifest": {
    "name": "vuex-class-component",
    "version": "2.3.6",
    "description": "\"A Type Safe Vuex Module or Store Using ES6 Classes and ES7 Decorators written in TypeScript.\"",
    "main": "dist/index.js",
    "scripts": {
      "test": "jest",
      "test:watch": "jest --watch",
      "build": "rimraf js dist && tsc && tsc -p ./tsconfig.jsbuild.json"
    },
    "keywords": [
      "Vuex with Type safety",
      "Typesafe Vuex",
      "Vuex Classes",
      "Vuex State Manager",
      "Vuex with Type Support",
      "TypeScript Vuex",
      "Vuex TypeScript"
    ],
    "repository": {
      "type": "git",
      "url": "https://www.github.com/michaelolof/vuex-class-component"
    },
    "author": {
      "name": "michaelolof"
    },
    "license": "ISC",
    "devDependencies": {
      "@types/jest": "^24.0.11",
      "@vue/test-utils": "^1.0.0-beta.29",
      "jest": "^24.5.0",
      "ts-jest": "^24.0.0",
      "ts-loader": "^5.3.1",
      "typescript": "^3.2.2",
      "vue": "^2.6.10",
      "vue-template-compiler": "^2.6.10",
      "vuex": "^3.1.0",
      "webpack": "^4.28.0"
    },
    "dependencies": {
      "object.getownpropertydescriptors": "^2.0.3",
      "rimraf": "^2.6.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-vuex-class-component-2.3.6-4e364c1dcaed17cd79c9457d883784666a439f1c-integrity/node_modules/vuex-class-component/package.json",
    "readmeFilename": "README.md",
    "readme": "# Vuex Class Component\nA Type Safe Solution for Vuex Modules using ES6 Classes and ES7 Decorators that works out of the box for TypeScript and JavaScript.\n\n## Installation\n```\n$ npm install --save vuex-class-component\n```\n\n## New API\nThe goal of the new API is to reduce the decorator overhead and \nhttps://github.com/michaelolof/vuex-class-component/issues/27\n\nHow we normally define Vuex Stores.\n```js\n// user.vuex.ts\nconst user = {\n  namespace: true,\n  state: {\n    firstname: \"Michael\",\n    lastname: \"Olofinjana\",\n    specialty: \"JavaScript\",\n  },\n  mutations: {\n    clearName(state ) {\n      state.firstname = \"\"; \n      state.lastname = \"\";\n    } \n  },\n  actions: {\n    doSomethingAsync(context) { ... }\n    doAnotherAsyncStuff(context, payload) { ... }\n  },\n  getters: {\n    fullname: (state) => state.firstname + \" \" + state.lastname,\n    bio: (state) => `Name: ${state.fullname} Specialty: ${state.specialty}`,\n  }\n}\n```\n\n```ts\nimport { createModule, mutation, action, extractVuexModule } from \"vuex-class-component\";\n\nconst VuexModule = createModule({\n  namespaced: \"user\",\n  strict: false,\n  target: \"nuxt\",\n})\n\nexport class UserStore extends VuexModule {\n\n  private firstname = \"Michael\";\n  private lastname = \"Olofinjana\";\n  specialty = \"JavaScript\";\n  \n  @mutation clearName() {\n    this.firstname = \"\";\n    this.lastname = \"\";\n  }\n\n  @action async doSomethingAsync() { return 20 }\n\n  @action async doAnotherAsyncStuff(payload) { \n    const number = await this.doSomethingAsyc();\n    this.changeName({ firstname: \"John\", lastname: \"Doe\" });\n    return payload + this.fullName;\n  }\n\n  // Explicitly define a vuex getter using class getters.\n  get fullname() {\n    return this.firstname + \" \" + this.lastname;\n  } \n\n  // Define a mutation for the vuex getter.\n  // NOTE this only works for getters.\n  set fullname( name :string ) {\n    const names = name.split( \" \" );\n    this.firstname = names[ 0 ];\n    this.lastname = names[ 1 ];\n  }\n  \n  get bio() {\n    return `Name: ${this.fullname} Specialty: ${this.specialty}`;\n  }\n}\n\n// store.vuex.ts\nexport const store = new Vuex.Store({\n  modules: {\n    ...extractVuexModule( UserStore )\n  }\n})\n\n// Creating proxies.\nconst vxm = {\n  user: createProxy( store, UserStore ),\n}\n```\n\nOn the surface, it looks like not much has changed. But some rethinking has gone into how the libary works to make for a much better developer experience.\n\n## More Powerful Proxies\nWith the `strict` option set to `false` we can enable greater functionality for our proxies with automatic getters and setters for our state.\\\nFor Example: \n```ts\nvxm.user.firstname // Michael\nvxm.user.firstname = \"John\";\nvxm.user.firstname // John\n\nvxm.user.fullname // John Olofinjana\nvxm.user.fullname = \"Mad Max\";\nvxm.user.fullname // Mad Max\nvxm.user.firstname // Mad\nvxm.user.lastname // Max\n```\n\nNotice that we didn't have to define a mutation to change the `firstname` we just set the state and it updates reactively. This means no more boilerplate mutations for our state, we just mutate them directly.\n\nThis also opens up new possibilities in how we consume stores in Vue components.\nExample\n```html\n<!-- App.vue -->\n<template>\n  <div class>\n    <input type=\"text\" v-model=\"user.firstname\" />\n    <div>Firstname: {{ user.firstname }}</div>\n\n    <button @click=\"user.clearName()\">Clear Name</button>\n    <div>Bio: {{ user.bio }}</div>\n  </div>\n</template>\n\n<script>\n  import { vxm } from \"./store\";\n\n  export default {\n    data() {\n      return {\n        user: vxm.user,\n      }\n    }\n  }\n</script>\n```\n\nNotice how much boilerplate has been reduced both in defining our vuex stores and also in using them in our components.\nAlso notice we no longer need functions like `mapState` or `mapGetters`.\n\n## Implementing More Vuex Functionality\nVuex today has additional functionalities like `$watch` `$subscribe` and `$subScribeAction` respectfully.\n\nThis also possible with `vuex-class-component`\n```ts\n// Watch getters in Vue components\nvxm.user.$watch( \"fullname\", newVal => { \n  console.log( `Fullname has changed: ${newVal}` )\n});\n\n// Subscribe to mutations in Vue components \nvxm.user.$subscribe( \"clearName\", payload => {\n  console.log( `clearName was called. payload: ${payload}` )\n});\n\n// Subscribe to an action in Vue components\nvxm.user.$subscribeAction( \"doSomethingAsync\", {\n  before: (payload :any) => console.log( payload ),\n  after: (payload :any) => console.log( payload ),\n})\n```\n\nWe can even do better with Local watchers and subscribers.\n\n```ts\nconst VuexModule = createModule({\n  strict: false,\n  target: \"nuxt\",\n  enableLocalWatchers: true,\n})\n\nexport class UserStore extends VuexModule.With({ namespaced: \"user\" }) {\n  \n  firstname = \"John\";\n  lastname = \"Doe\";\n  @mutation changeName( name :string ) { ... }\n  @action fetchDetails() { ... }\n  get fullname() {\n    return this.firstname + \" \" + this.lastname;\n  }\n\n  $watch = {\n    fullname( newValue ) { console.log( `Fullname has changed ${newValue}` },\n  }\n\n  $subscribe = {\n    changeName( payload ) {\n      console.log( `changeName was called with payload: ${payload}`)\n    }\n  }\n\n  $subscribeAction = {\n    fetchDetails( payload ) {\n      console.log( `fetchDetails action was called with payload: ${payload}` )\n    }\n  }\n\n}\n```\n\n\n\n## SubModules Support \nTo use submodules\n```ts\n  const VuexModule = createModule({\n    strict: false\n  })\n\n  class CarStore extends VuexModule.With({ namespaced: \"car\" }) {\n    @getter noOfWheels = 4;\n\n    @action drive() {\n      console.log(\"driving on\", this.noOfWheels, \"wheels\" )\n    }\n  }\n```\nWe could use this sub module in a class\n```ts\n  class VehicleStore extends VuexModule.With({ namespaced: \"vehicle\" }) {\n    car = createSubModule( CarStore );\n  }\n```\nNow you can easily use in your Vue Components like:\n```ts\n  vxm.vehicle.car.drive() // driving on 4 wheels\n```\n\n## JavaScript Support\nFrom version `1.5.0` JavaScript is now supported fully.\nTo use vuex-class-component in your JavaScript files, ensure your babel.config.js file has the following plugins:\n```js\nmodule.exports = {\n  ...\n  plugins: [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\n  ]\n}\n```\nAnd then use as follows\n```js\nimport { Module, VuexModule, getter, action } from \"vuex-class-component/js\";\n```\n\n## NuxtJS Support\nFrom verison `1.6.0` Nuxt is also supported.\nTo use `vuex-class-component` with Nuxt, You add a `target` property to the @Module decorator and set it to `\"nuxt\"`.\n```js\nexport class UserStore extends createModule({ target: \"nuxt\" }) {\n  ...\n}\n```\n\n## See Old API\n[Old API >](old-api-readme.md)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vuex-class-component/-/vuex-class-component-2.3.6.tgz#4e364c1dcaed17cd79c9457d883784666a439f1c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vuex-class-component/-/vuex-class-component-2.3.6.tgz",
    "hash": "4e364c1dcaed17cd79c9457d883784666a439f1c",
    "integrity": "sha512-3sC4ua78pDnQun22K0nLxm9j60YZdNcZPBGxEHtyWyOxTRHUA/ynkndjv49Obtq0B3QT+0CgPijC4bo/bdvRcA==",
    "registry": "npm",
    "packageName": "vuex-class-component",
    "cacheIntegrity": "sha512-3sC4ua78pDnQun22K0nLxm9j60YZdNcZPBGxEHtyWyOxTRHUA/ynkndjv49Obtq0B3QT+0CgPijC4bo/bdvRcA== sha1-TjZMHcrtF815yUV9iDeEZmpDnxw="
  },
  "registry": "npm",
  "hash": "4e364c1dcaed17cd79c9457d883784666a439f1c"
}