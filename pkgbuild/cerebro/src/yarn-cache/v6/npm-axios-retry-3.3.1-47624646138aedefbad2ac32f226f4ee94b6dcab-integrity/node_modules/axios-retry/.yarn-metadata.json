{
  "manifest": {
    "name": "axios-retry",
    "version": "3.3.1",
    "author": {
      "name": "RubÃ©n Norte",
      "email": "ruben.norte@softonic.com"
    },
    "description": "Axios plugin that intercepts failed requests and retries them whenever posible.",
    "license": "Apache-2.0",
    "homepage": "https://github.com/softonic/axios-retry",
    "files": [
      "es",
      "lib",
      "index.js",
      "index.d.ts"
    ],
    "scripts": {
      "lint": "eslint es/**/*.mjs spec/**/*.spec.mjs",
      "pretest": "npm run lint",
      "test": "NODE_OPTIONS=--es-module-specifier-resolution=node jasmine",
      "prebuild": "npm run test",
      "build": "rm -rf lib && babel es -d lib/esm --source-maps && babel es -d lib/cjs --config-file ./babel.config.cjs.json --source-maps && ./fixup",
      "prerelease": "npm run build",
      "release": "npm version -m \"New version: %s\"",
      "postrelease": "npm run push && npm publish",
      "push": "git push origin master && git push origin --tags",
      "prepare": "husky install"
    },
    "lint-staged": {
      "*.+(js|mjs)": [
        "eslint --cache --fix",
        "prettier --write"
      ],
      "*.js": "eslint --cache --fix"
    },
    "dependencies": {
      "@babel/runtime": "^7.15.4",
      "is-retry-allowed": "^2.2.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.15.7",
      "@babel/core": "^7.15.5",
      "@babel/plugin-transform-runtime": "^7.15.8",
      "@babel/preset-env": "^7.15.6",
      "axios": "^0.21.2",
      "eslint": "^7.32.0",
      "eslint-config-airbnb-base": "^14.2.1",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-import": "^2.24.2",
      "eslint-plugin-jasmine": "^4.1.2",
      "eslint-plugin-prettier": "^4.0.0",
      "husky": "^7.0.2",
      "jasmine": "^3.9.0",
      "lint-staged": "^11.2.0",
      "nock": "^13.1.3",
      "prettier": "^2.4.1"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/softonic/axios-retry.git"
    },
    "bugs": {
      "url": "https://github.com/softonic/axios-retry/issues"
    },
    "typings": "./index.d.ts",
    "main": "index.js",
    "module": "lib/esm/index.js",
    "exports": {
      ".": {
        "types": "./index.d.ts",
        "import": "./lib/esm/index.js",
        "require": "./index.js"
      },
      "./package.json": "./package.json"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-axios-retry-3.3.1-47624646138aedefbad2ac32f226f4ee94b6dcab-integrity/node_modules/axios-retry/package.json",
    "readmeFilename": "README.md",
    "readme": "# axios-retry\n\n[![Node.js CI](https://github.com/softonic/axios-retry/actions/workflows/node.js.yml/badge.svg)](https://github.com/softonic/axios-retry/actions/workflows/node.js.yml)\n\nAxios plugin that intercepts failed requests and retries them whenever possible.\n\n## Installation\n\n```bash\nnpm install axios-retry\n```\n\n## Usage\n\n```js\n// CommonJS\n// const axiosRetry = require('axios-retry');\n\n// ES6\nimport axiosRetry from 'axios-retry';\n\naxiosRetry(axios, { retries: 3 });\n\naxios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n  .then(result => {\n    result.data; // 'ok'\n  });\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, { retryDelay: axiosRetry.exponentialDelay });\n\n// Custom retry delay\naxiosRetry(axios, { retryDelay: (retryCount) => {\n  return retryCount * 1000;\n}});\n\n// Works with custom axios instances\nconst client = axios.create({ baseURL: 'http://example.com' });\naxiosRetry(client, { retries: 3 });\n\nclient.get('/test') // The first request fails and the second returns 'ok'\n  .then(result => {\n    result.data; // 'ok'\n  });\n\n// Allows request-specific configuration\nclient\n  .get('/test', {\n    'axios-retry': {\n      retries: 0\n    }\n  })\n  .catch(error => { // The first request fails\n    error !== undefined\n  });\n```\n\n**Note:** Unless `shouldResetTimeout` is set, the plugin interprets the request timeout as a global value, so it is not used for each retry but for the whole request lifecycle.\n\n## Options\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| retries | `Number` | `3` | The number of times to retry before failing. 1 = One retry after first failure |\n| retryCondition | `Function` | `isNetworkOrIdempotentRequestError` | A callback to further control if a request should be retried.  By default, it retries if it is a network error or a 5xx error on an idempotent request (GET, HEAD, OPTIONS, PUT or DELETE). |\n| shouldResetTimeout | `Boolean` | false | Defines if the timeout should be reset between retries |\n| retryDelay | `Function` | `function noDelay() { return 0; }` | A callback to further control the delay in milliseconds between retried requests. By default there is no delay between retries. Another option is exponentialDelay ([Exponential Backoff](https://developers.google.com/analytics/devguides/reporting/core/v3/errors#backoff)). The function is passed `retryCount` and `error`. |\n| onRetry | `Function` | `function onRetry(retryCount, error, requestConfig) { return; }` | A callback to notify when a retry is about to occur. Useful for tracing. By default nothing will occur. The function is passed `retryCount`, `error`, and `requestConfig`. |\n\n## Testing\n\nClone the repository and execute:\n\n```bash\nnpm test\n```\n\n## Contribute\n\n1. Fork it: `git clone https://github.com/softonic/axios-retry.git`\n2. Create your feature branch: `git checkout -b feature/my-new-feature`\n3. Commit your changes: `git commit -am 'Added some feature'`\n4. Check the build: `npm run build`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n",
    "licenseText": "Copyright 2019 Softonic International S.A.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/axios-retry/-/axios-retry-3.3.1.tgz#47624646138aedefbad2ac32f226f4ee94b6dcab",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/axios-retry/-/axios-retry-3.3.1.tgz",
    "hash": "47624646138aedefbad2ac32f226f4ee94b6dcab",
    "integrity": "sha512-RohAUQTDxBSWLFEnoIG/6bvmy8l3TfpkclgStjl5MDCMBDgapAWCmr1r/9harQfWC8bzLC8job6UcL1A1Yc+/Q==",
    "registry": "npm",
    "packageName": "axios-retry",
    "cacheIntegrity": "sha512-RohAUQTDxBSWLFEnoIG/6bvmy8l3TfpkclgStjl5MDCMBDgapAWCmr1r/9harQfWC8bzLC8job6UcL1A1Yc+/Q== sha1-R2JGRhOK7e+60qwy8ib07pS23Ks="
  },
  "registry": "npm",
  "hash": "47624646138aedefbad2ac32f226f4ee94b6dcab"
}