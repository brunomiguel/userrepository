{
  "manifest": {
    "name": "megalodon",
    "version": "5.0.4",
    "description": "Mastodon API client for node.js and browser",
    "main": "./lib/src/index.js",
    "typings": "./lib/src/index.d.ts",
    "scripts": {
      "build": "tsc -p ./",
      "lint": "eslint --ext .js,.ts src",
      "doc": "typedoc --out ../docs ./src",
      "test": "NODE_ENV=test jest -u --maxWorkers=3"
    },
    "engines": {
      "node": ">=15.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/h3poteto/megalodon.git"
    },
    "keywords": [
      "mastodon",
      "client",
      "api",
      "streaming",
      "rest",
      "proxy"
    ],
    "author": {
      "name": "h3poteto"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/h3poteto/megalodon/issues"
    },
    "jest": {
      "moduleFileExtensions": [
        "ts",
        "js"
      ],
      "moduleNameMapper": {
        "^@/(.+)": "<rootDir>/src/$1",
        "^~/(.+)": "<rootDir>/$1"
      },
      "testMatch": [
        "**/test/**/*.spec.ts"
      ],
      "preset": "ts-jest/presets/default",
      "transform": {
        "^.+\\.(ts|tsx)$": "ts-jest"
      },
      "globals": {
        "ts-jest": {
          "tsconfig": "tsconfig.json"
        }
      },
      "testEnvironment": "node"
    },
    "homepage": "https://github.com/h3poteto/megalodon#readme",
    "dependencies": {
      "@types/oauth": "^0.9.0",
      "@types/ws": "^8.2.3",
      "axios": "1.2.2",
      "dayjs": "^1.11.7",
      "form-data": "^4.0.0",
      "https-proxy-agent": "^5.0.1",
      "oauth": "^0.10.0",
      "object-assign-deep": "^0.4.0",
      "parse-link-header": "^2.0.0",
      "socks-proxy-agent": "^7.0.0",
      "typescript": "4.9.4",
      "uuid": "^9.0.0",
      "ws": "8.5.0"
    },
    "devDependencies": {
      "@types/core-js": "^2.5.0",
      "@types/form-data": "^2.5.0",
      "@types/jest": "^29.2.4",
      "@types/object-assign-deep": "^0.4.0",
      "@types/parse-link-header": "^2.0.0",
      "@types/uuid": "^9.0.0",
      "@typescript-eslint/eslint-plugin": "^5.47.1",
      "@typescript-eslint/parser": "^5.47.1",
      "eslint": "^8.30.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-config-standard": "^16.0.3",
      "eslint-plugin-import": "^2.26.0",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-prettier": "^4.2.1",
      "eslint-plugin-promise": "^6.1.1",
      "eslint-plugin-standard": "^5.0.0",
      "jest": "^29.3.1",
      "jest-worker": "^29.3.1",
      "lodash": "^4.17.14",
      "prettier": "^2.8.1",
      "ts-jest": "^29.0.3",
      "typedoc": "^0.23.23"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-megalodon-5.0.4-b9d3693dcf4172ff6b0438aaafdf6a8211c6456a-integrity/node_modules/megalodon/package.json",
    "readmeFilename": "README.md",
    "readme": "# Megalodon\n[![Test](https://github.com/h3poteto/megalodon/workflows/Test/badge.svg)](https://github.com/h3poteto/megalodon/actions?query=branch%3Amaster+workflow%3ATest)\n[![NPM Version](https://img.shields.io/npm/v/megalodon.svg)](https://www.npmjs.com/package/megalodon)\n[![GitHub release](https://img.shields.io/github/release/h3poteto/megalodon.svg)](https://github.com/h3poteto/megalodon/releases)\n[![npm](https://img.shields.io/npm/dm/megalodon)](https://www.npmjs.com/package/megalodon)\n[![NPM](https://img.shields.io/npm/l/megalodon)](/LICENSE.txt)\n\nA Mastodon, Pleroma and Misskey API Client library for node.js and browser. It provides REST API and streaming methods.\nBy using this library, you can take Mastodon, Pleroma and Misskey with the same interface.\n\n## !!Migrate v2.x to v3.0.0\nThere are some breaking changes, so you can not update megalodon out of the box.\nPlease refer [migration guide](migration_guide.md) before you update megalodon version.\n\n## Features\n\n- REST API\n- Streaming with Server-Sent Event\n- Streaming with WebSocket\n- Promisified methods\n- Proxy support\n- Support node.js and browser\n- Written in typescript\n\n## Install\n\n```\n$ npm install -S megalodon\n```\n\nor\n\n```\n$ yarn add megalodon\n```\n\n### Build for browser\n**Important**: In browser, you can not use proxy.\n\nIf you want to build for browser, please use Webpack and set empty value for these libraries.\n\n- net\n- tls\n- dns\n\n```javascript\n  node: {\n    net: 'empty',\n    tls: 'empty',\n    dns: 'empty'\n  }\n```\n\nThese libraries are for node.js, so can not use in browser.\n\n[Here](example/browser/webpack.config.js) is example Webpack configuration.\n\n## Usage\nI prepared [examples](example), and please refer [documents](https://h3poteto.github.io/megalodon/) about each methods.\n\nI explain some typical methods.\nAt first, please get your access token for a fediverse server.\nIf you don't have access token, or you want to register applications and get access token programmably, please refer [Authorization section](#authorization).\n\n\n### Home timeline\n\n```typescript\nimport generator, { Entity, Response } from 'megalodon'\n\nconst BASE_URL: string = 'https://mastodon.social'\nconst access_token: string = '...'\n\nconst client = generator('mastodon', BASE_URL, access_token)\nclient.getHomeTimeline()\n  .then((res: Response<Array<Entity.Status>>) => {\n    console.log(res.data)\n  })\n```\n\n### Post toot\n\n```typescript\nimport generator, { Entity, Response } from 'megalodon'\n\nconst BASE_URL: string = 'https://mastodon.social'\nconst access_token: string = '...'\nconst toot: string = 'test toot'\n\nconst client = generator('mastodon', BASE_URL, access_token)\nclient.postStatus(toot)\n  .then((res: Response<Entity.Status>) => {\n    console.log(res.data)\n  })\n```\n\n### Post medias\nPlease provide a file to the argument.\n\n```typescript\nimport generator, { Entity, Response } from 'megalodon'\nimport fs from 'fs'\n\nconst BASE_URL: string = 'https://mastodon.social'\nconst access_token: string = '...'\nconst image = fs.readFileSync(\"test.image\")\n\nconst client = generator('mastodon', BASE_URL, access_token)\nclient.uploadMedia(image)\n  .then((res: Response<Entity.Attachment>) => {\n    console.log(res.data)\n  })\n```\n\n### WebSocket streaming\nMastodon, Pleroma and Misskey provide WebSocket for streaming.\n\n```typescript\nimport generator, { Entity, WebSocketInterface } from 'megalodon'\n\nconst BASE_URL: string = 'wss://pleroma.io'\nconst access_token: string = '...'\n\nconst client = generator('pleroma', BASE_URL, access_token)\nconst stream: WebSocketInterface = client.userSocket()\n\nstream.on('connect', () => {\n  console.log('connect')\n})\n\nstream.on('update', (status: Entity.Status) => {\n  console.log(status)\n})\n\nstream.on('notification', (notification: Entity.Notification) => {\n  console.log(notification)\n})\n\nstream.on('delete', (id: number) => {\n  console.log(id)\n})\n\nstream.on('error', (err: Error) => {\n  console.error(err)\n})\n\nstream.on('heartbeat', () => {\n  console.log('thump.')\n})\n\nstream.on('close', () => {\n  console.log('close')\n})\n\nstream.on('parser-error', (err: Error) => {\n  console.error(err)\n})\n```\n\n### HTTP Streaming\nMastodon provides HTTP streaming.\n\n```typescript\nimport generator, { Entity, StreamListenerInterface } from 'megalodon'\n\nconst BASE_URL: string = 'https://mastodon.social'\nconst access_token: string = '...'\n\nconst client = generator('mastodon', BASE_URL, access_token)\nconst stream: StreamListenerInterface\n\nstream.on('update', (status: Entity.Status) => {\n  console.log(status)\n})\n\nstream.on('notification', (notification: Entity.Notification) => {\n  console.log(notification)\n})\n\nstream.on('delete', (id: number) => {\n  console.log(id)\n})\n\nstream.on('error', (err: Error) => {\n  console.error(err)\n})\n\nstream.on('heartbeat', () => {\n  console.log('thump.')\n})\n```\n\n\n### Authorization\nYou can register applications, and get access tokens to use this method.\n\n```typescript\nimport generator, { OAuth } from 'megalodon'\n\nconst BASE_URL: string = 'https://mastodon.social'\n\nlet clientId: string\nlet clientSecret: string\n\nconst client = generator('mastodon', BASE_URL)\n\nclient.registerApp('Test App')\n  .then(appData => {\n    clientId = appData.clientId\n    clientSecret = appData.clientSecret\n    console.log('Authorization URL is generated.')\n    console.log(appData.url)\n  })\n```\n\nPlease open `Autorhization URL` in your browser, and authorize this app.\nIn this time, you can get authorization code.\n\nAfter that, get an access token.\n\n```typescript\nconst code = '...' // Authorization code\n\nclient.fetchAccessToken(clientId, clientSecret, code)\n})\n  .then((tokenData: OAuth.TokenData) => {\n    console.log(tokenData.accessToken)\n    console.log(tokenData.refreshToken)\n  })\n  .catch((err: Error) => console.error(err))\n```\n\n### Detect each SNS\nYou have to provide SNS name `mastodon`, `pleroma` or `misskey` to `generator` function.\nBut when you only know the URL and not the SNS, `detector` function can detect the SNS.\n\n```typescript\nimport { detector } from 'megalodon'\n\nconst URL = 'https://misskey.io'\n\nconst sns = await detector(URL)\nconsole.log(sns)\n```\n\n## License\n\nThe software is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Akira Fukushima\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/megalodon/-/megalodon-5.0.4.tgz#b9d3693dcf4172ff6b0438aaafdf6a8211c6456a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/megalodon/-/megalodon-5.0.4.tgz",
    "hash": "b9d3693dcf4172ff6b0438aaafdf6a8211c6456a",
    "integrity": "sha512-mys03A3vFAwuj/7KrAytk2kIz3lc02DbLSjDF/lxYf1BDqGGA2lwAqgYwws194flyvhZbLiUDzZ73KuZxHy6GQ==",
    "registry": "npm",
    "packageName": "megalodon",
    "cacheIntegrity": "sha512-mys03A3vFAwuj/7KrAytk2kIz3lc02DbLSjDF/lxYf1BDqGGA2lwAqgYwws194flyvhZbLiUDzZ73KuZxHy6GQ== sha1-udNpPc9Bcv9rBDiqr99qghHGRWo="
  },
  "registry": "npm",
  "hash": "b9d3693dcf4172ff6b0438aaafdf6a8211c6456a"
}