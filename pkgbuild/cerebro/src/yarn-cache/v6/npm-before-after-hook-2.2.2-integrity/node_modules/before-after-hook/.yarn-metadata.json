{
  "manifest": {
    "name": "before-after-hook",
    "version": "2.2.2",
    "description": "asynchronous before/error/after hooks for internal functionality",
    "main": "index.js",
    "files": [
      "index.js",
      "index.d.ts",
      "lib"
    ],
    "types": "./index.d.ts",
    "scripts": {
      "prebuild": "rimraf dist && mkdirp dist",
      "build": "browserify index.js --standalone=Hook > dist/before-after-hook.js",
      "postbuild": "uglifyjs dist/before-after-hook.js -mc > dist/before-after-hook.min.js",
      "lint": "prettier --check '{lib,test,examples}/**/*' README.md package.json",
      "lint:fix": "prettier --write '{lib,test,examples}/**/*' README.md package.json",
      "pretest": "npm run -s lint",
      "test": "npm run -s test:node | tap-spec",
      "posttest": "npm run validate:ts",
      "test:node": "node test",
      "test:watch": "gaze 'clear && node test | tap-min' 'test/**/*.js' 'index.js' 'lib/**/*.js'",
      "test:coverage": "istanbul cover test",
      "test:coverage:upload": "istanbul-coveralls",
      "validate:ts": "tsc --strict --target es6 index.d.ts",
      "postvalidate:ts": "tsc --noEmit --strict --target es6 test/typescript-validate.ts",
      "presemantic-release": "npm run build",
      "semantic-release": "semantic-release"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/gr2m/before-after-hook.git"
    },
    "keywords": [
      "hook",
      "hooks",
      "api"
    ],
    "author": {
      "name": "Gregor Martynus"
    },
    "license": "Apache-2.0",
    "dependencies": {},
    "devDependencies": {
      "browserify": "^16.0.0",
      "gaze-cli": "^0.2.0",
      "istanbul": "^0.4.0",
      "istanbul-coveralls": "^1.0.3",
      "mkdirp": "^1.0.3",
      "prettier": "^2.0.0",
      "rimraf": "^3.0.0",
      "semantic-release": "^17.0.0",
      "simple-mock": "^0.8.0",
      "tap-min": "^2.0.0",
      "tap-spec": "^5.0.0",
      "tape": "^5.0.0",
      "typescript": "^3.5.3",
      "uglify-js": "^3.9.0"
    },
    "release": {
      "publish": [
        "@semantic-release/npm",
        {
          "path": "@semantic-release/github",
          "assets": [
            "dist/*.js"
          ]
        }
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-before-after-hook-2.2.2-integrity/node_modules/before-after-hook/package.json",
    "readmeFilename": "README.md",
    "readme": "# before-after-hook\n\n> asynchronous hooks for internal functionality\n\n[![npm downloads](https://img.shields.io/npm/dw/before-after-hook.svg)](https://www.npmjs.com/package/before-after-hook)\n[![Build Status](https://travis-ci.org/gr2m/before-after-hook.svg?branch=master)](https://travis-ci.org/gr2m/before-after-hook)\n[![Coverage Status](https://coveralls.io/repos/gr2m/before-after-hook/badge.svg?branch=master)](https://coveralls.io/r/gr2m/before-after-hook?branch=master)\n[![Greenkeeper badge](https://badges.greenkeeper.io/gr2m/before-after-hook.svg)](https://greenkeeper.io/)\n\n## Usage\n\n### Singular hook\n\n```js\n// instantiate singular hook API\nconst hook = new Hook.Singular();\n\n// Create a hook\nfunction getData(options) {\n  return hook(fetchFromDatabase, options)\n    .then(handleData)\n    .catch(handleGetError);\n}\n\n// register before/error/after hooks.\n// The methods can be async or return a promise\nhook.before(beforeHook);\nhook.error(errorHook);\nhook.after(afterHook);\n\ngetData({ id: 123 });\n```\n\n### Hook collection\n\n```js\n// instantiate hook collection API\nconst hookCollection = new Hook.Collection();\n\n// Create a hook\nfunction getData(options) {\n  return hookCollection(\"get\", fetchFromDatabase, options)\n    .then(handleData)\n    .catch(handleGetError);\n}\n\n// register before/error/after hooks.\n// The methods can be async or return a promise\nhookCollection.before(\"get\", beforeHook);\nhookCollection.error(\"get\", errorHook);\nhookCollection.after(\"get\", afterHook);\n\ngetData({ id: 123 });\n```\n\n### Hook.Singular vs Hook.Collection\n\nThere's no fundamental difference between the `Hook.Singular` and `Hook.Collection` hooks except for the fact that a hook from a collection requires you to pass along the name. Therefore the following explanation applies to both code snippets as described above.\n\nThe methods are executed in the following order\n\n1. `beforeHook`\n2. `fetchFromDatabase`\n3. `afterHook`\n4. `handleData`\n\n`beforeHook` can mutate `options` before it’s passed to `fetchFromDatabase`.\n\nIf an error is thrown in `beforeHook` or `fetchFromDatabase` then `errorHook` is\ncalled next.\n\nIf `afterHook` throws an error then `handleGetError` is called instead\nof `handleData`.\n\nIf `errorHook` throws an error then `handleGetError` is called next, otherwise\n`afterHook` and `handleData`.\n\nYou can also use `hook.wrap` to achieve the same thing as shown above (collection example):\n\n```js\nhookCollection.wrap(\"get\", async (getData, options) => {\n  await beforeHook(options);\n\n  try {\n    const result = getData(options);\n  } catch (error) {\n    await errorHook(error, options);\n  }\n\n  await afterHook(result, options);\n});\n```\n\n## Install\n\n```\nnpm install before-after-hook\n```\n\nOr download [the latest `before-after-hook.min.js`](https://github.com/gr2m/before-after-hook/releases/latest).\n\n## API\n\n- [Singular Hook Constructor](#singular-hook-api)\n- [Hook Collection Constructor](#hook-collection-api)\n\n## Singular hook API\n\n- [Singular constructor](#singular-constructor)\n- [hook.api](#singular-api)\n- [hook()](#singular-api)\n- [hook.before()](#singular-api)\n- [hook.error()](#singular-api)\n- [hook.after()](#singular-api)\n- [hook.wrap()](#singular-api)\n- [hook.remove()](#singular-api)\n\n### Singular constructor\n\nThe `Hook.Singular` constructor has no options and returns a `hook` instance with the\nmethods below:\n\n```js\nconst hook = new Hook.Singular();\n```\n\nUsing the singular hook is recommended for [TypeScript](#typescript)\n\n### Singular API\n\nThe singular hook is a reference to a single hook. This means that there's no need to pass along any identifier (such as a `name` as can be seen in the [Hook.Collection API](#hookcollectionapi)).\n\nThe API of a singular hook is exactly the same as a collection hook and we therefore suggest you read the [Hook.Collection API](#hookcollectionapi) and leave out any use of the `name` argument. Just skip it like described in this example:\n\n```js\nconst hook = new Hook.Singular();\n\n// good\nhook.before(beforeHook);\nhook.after(afterHook);\nhook(fetchFromDatabase, options);\n\n// bad\nhook.before(\"get\", beforeHook);\nhook.after(\"get\", afterHook);\nhook(\"get\", fetchFromDatabase, options);\n```\n\n## Hook collection API\n\n- [Collection constructor](#collection-constructor)\n- [hookCollection.api](#hookcollectionapi)\n- [hookCollection()](#hookcollection)\n- [hookCollection.before()](#hookcollectionbefore)\n- [hookCollection.error()](#hookcollectionerror)\n- [hookCollection.after()](#hookcollectionafter)\n- [hookCollection.wrap()](#hookcollectionwrap)\n- [hookCollection.remove()](#hookcollectionremove)\n\n### Collection constructor\n\nThe `Hook.Collection` constructor has no options and returns a `hookCollection` instance with the\nmethods below\n\n```js\nconst hookCollection = new Hook.Collection();\n```\n\n### hookCollection.api\n\nUse the `api` property to return the public API:\n\n- [hookCollection.before()](#hookcollectionbefore)\n- [hookCollection.after()](#hookcollectionafter)\n- [hookCollection.error()](#hookcollectionerror)\n- [hookCollection.wrap()](#hookcollectionwrap)\n- [hookCollection.remove()](#hookcollectionremove)\n\nThat way you don’t need to expose the [hookCollection()](#hookcollection) method to consumers of your library\n\n### hookCollection()\n\nInvoke before and after hooks. Returns a promise.\n\n```js\nhookCollection(nameOrNames, method /*, options */);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String or Array of Strings</td>\n    <td>Hook name, for example <code>'save'</code>. Or an array of names, see example below.</td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>method</code></th>\n    <td>Function</td>\n    <td>Callback to be executed after all before hooks finished execution successfully. <code>options</code> is passed as first argument</td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>options</code></th>\n    <td>Object</td>\n    <td>Will be passed to all before hooks as reference, so they can mutate it</td>\n    <td>No, defaults to empty object (<code>{}</code>)</td>\n  </tr>\n</table>\n\nResolves with whatever `method` returns or resolves with.\nRejects with error that is thrown or rejected with by\n\n1. Any of the before hooks, whichever rejects / throws first\n2. `method`\n3. Any of the after hooks, whichever rejects / throws first\n\nSimple Example\n\n```js\nhookCollection(\n  \"save\",\n  function (record) {\n    return store.save(record);\n  },\n  record\n);\n// shorter:  hookCollection('save', store.save, record)\n\nhookCollection.before(\"save\", function addTimestamps(record) {\n  const now = new Date().toISOString();\n  if (record.createdAt) {\n    record.updatedAt = now;\n  } else {\n    record.createdAt = now;\n  }\n});\n```\n\nExample defining multiple hooks at once.\n\n```js\nhookCollection(\n  [\"add\", \"save\"],\n  function (record) {\n    return store.save(record);\n  },\n  record\n);\n\nhookCollection.before(\"add\", function addTimestamps(record) {\n  if (!record.type) {\n    throw new Error(\"type property is required\");\n  }\n});\n\nhookCollection.before(\"save\", function addTimestamps(record) {\n  if (!record.type) {\n    throw new Error(\"type property is required\");\n  }\n});\n```\n\nDefining multiple hooks is helpful if you have similar methods for which you want to define separate hooks, but also an additional hook that gets called for all at once. The example above is equal to this:\n\n```js\nhookCollection(\n  \"add\",\n  function (record) {\n    return hookCollection(\n      \"save\",\n      function (record) {\n        return store.save(record);\n      },\n      record\n    );\n  },\n  record\n);\n```\n\n### hookCollection.before()\n\nAdd before hook for given name.\n\n```js\nhookCollection.before(name, method);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String</td>\n    <td>Hook name, for example <code>'save'</code></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>method</code></th>\n    <td>Function</td>\n    <td>\n      Executed before the wrapped method. Called with the hook’s\n      <code>options</code> argument. Before hooks can mutate the passed options\n      before they are passed to the wrapped method.\n    </td>\n    <td>Yes</td>\n  </tr>\n</table>\n\nExample\n\n```js\nhookCollection.before(\"save\", function validate(record) {\n  if (!record.name) {\n    throw new Error(\"name property is required\");\n  }\n});\n```\n\n### hookCollection.error()\n\nAdd error hook for given name.\n\n```js\nhookCollection.error(name, method);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String</td>\n    <td>Hook name, for example <code>'save'</code></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>method</code></th>\n    <td>Function</td>\n    <td>\n      Executed when an error occurred in either the wrapped method or a\n      <code>before</code> hook. Called with the thrown <code>error</code>\n      and the hook’s <code>options</code> argument. The first <code>method</code>\n      which does not throw an error will set the result that the after hook\n      methods will receive.\n    </td>\n    <td>Yes</td>\n  </tr>\n</table>\n\nExample\n\n```js\nhookCollection.error(\"save\", function (error, options) {\n  if (error.ignore) return;\n  throw error;\n});\n```\n\n### hookCollection.after()\n\nAdd after hook for given name.\n\n```js\nhookCollection.after(name, method);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String</td>\n    <td>Hook name, for example <code>'save'</code></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>method</code></th>\n    <td>Function</td>\n    <td>\n    Executed after wrapped method. Called with what the wrapped method\n    resolves with the hook’s <code>options</code> argument.\n    </td>\n    <td>Yes</td>\n  </tr>\n</table>\n\nExample\n\n```js\nhookCollection.after(\"save\", function (result, options) {\n  if (result.updatedAt) {\n    app.emit(\"update\", result);\n  } else {\n    app.emit(\"create\", result);\n  }\n});\n```\n\n### hookCollection.wrap()\n\nAdd wrap hook for given name.\n\n```js\nhookCollection.wrap(name, method);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String</td>\n    <td>Hook name, for example <code>'save'</code></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>method</code></th>\n    <td>Function</td>\n    <td>\n      Receives both the wrapped method and the passed options as arguments so it can add logic before and after the wrapped method, it can handle errors and even replace the wrapped method altogether\n    </td>\n    <td>Yes</td>\n  </tr>\n</table>\n\nExample\n\n```js\nhookCollection.wrap(\"save\", async function (saveInDatabase, options) {\n  if (!record.name) {\n    throw new Error(\"name property is required\");\n  }\n\n  try {\n    const result = await saveInDatabase(options);\n\n    if (result.updatedAt) {\n      app.emit(\"update\", result);\n    } else {\n      app.emit(\"create\", result);\n    }\n\n    return result;\n  } catch (error) {\n    if (error.ignore) return;\n    throw error;\n  }\n});\n```\n\nSee also: [Test mock example](examples/test-mock-example.md)\n\n### hookCollection.remove()\n\nRemoves hook for given name.\n\n```js\nhookCollection.remove(name, hookMethod);\n```\n\n<table>\n  <thead>\n    <tr>\n      <th>Argument</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Required</th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=\"left\"><code>name</code></th>\n    <td>String</td>\n    <td>Hook name, for example <code>'save'</code></td>\n    <td>Yes</td>\n  </tr>\n  <tr>\n    <th align=\"left\"><code>beforeHookMethod</code></th>\n    <td>Function</td>\n    <td>\n      Same function that was previously passed to <code>hookCollection.before()</code>, <code>hookCollection.error()</code>, <code>hookCollection.after()</code> or <code>hookCollection.wrap()</code>\n    </td>\n    <td>Yes</td>\n  </tr>\n</table>\n\nExample\n\n```js\nhookCollection.remove(\"save\", validateRecord);\n```\n\n## TypeScript\n\nThis library contains type definitions for TypeScript.\n\n### Type support for `Singular`:\n\n```ts\nimport { Hook } from \"before-after-hook\";\n\ntype TOptions = { foo: string }; // type for options\ntype TResult = { bar: number }; // type for result\ntype TError = Error; // type for error\n\nconst hook = new Hook.Singular<TOptions, TResult, TError>();\n\nhook.before((options) => {\n  // `options.foo` has `string` type\n\n  // not allowed\n  options.foo = 42;\n\n  // allowed\n  options.foo = \"Forty-Two\";\n});\n\nconst hookedMethod = hook(\n  (options) => {\n    // `options.foo` has `string` type\n\n    // not allowed, because it does not satisfy the `R` type\n    return { foo: 42 };\n\n    // allowed\n    return { bar: 42 };\n  },\n  { foo: \"Forty-Two\" }\n);\n```\n\nYou can choose not to pass the types for options, result or error. So, these are completely valid:\n\n```ts\nconst hook = new Hook.Singular<O, R>();\nconst hook = new Hook.Singular<O>();\nconst hook = new Hook.Singular();\n```\n\nIn these cases, the omitted types will implicitly be `any`.\n\n### Type support for `Collection`:\n\n`Collection` also has strict type support. You can use it like this:\n\n```ts\nimport { Hook } from \"before-after-hook\";\n\ntype HooksType = {\n  add: {\n    Options: { type: string };\n    Result: { id: number };\n    Error: Error;\n  };\n  save: {\n    Options: { type: string };\n    Result: { id: number };\n  };\n  read: {\n    Options: { id: number; foo: number };\n  };\n  destroy: {\n    Options: { id: number; foo: string };\n  };\n};\n\nconst hooks = new Hook.Collection<HooksType>();\n\nhooks.before(\"destroy\", (options) => {\n  // `options.id` has `number` type\n});\n\nhooks.error(\"add\", (err, options) => {\n  // `options.type` has `string` type\n  // `err` is `instanceof Error`\n});\n\nhooks.error(\"save\", (err, options) => {\n  // `options.type` has `string` type\n  // `err` has type `any`\n});\n\nhooks.after(\"save\", (result, options) => {\n  // `options.type` has `string` type\n  // `result.id` has `number` type\n});\n```\n\nYou can choose not to pass the types altogether. In that case, everything will implicitly be `any`:\n\n```ts\nconst hook = new Hook.Collection();\n```\n\nAlternative imports:\n\n```ts\nimport { Singular, Collection } from \"before-after-hook\";\n\nconst hook = new Singular();\nconst hooks = new Collection();\n```\n\n## Upgrading to 1.4\n\nSince version 1.4 the `Hook` constructor has been deprecated in favor of returning `Hook.Singular` in an upcoming breaking release.\n\nVersion 1.4 is still 100% backwards-compatible, but if you want to continue using hook collections, we recommend using the `Hook.Collection` constructor instead before the next release.\n\nFor even more details, check out [the PR](https://github.com/gr2m/before-after-hook/pull/52).\n\n## See also\n\nIf `before-after-hook` is not for you, have a look at one of these alternatives:\n\n- https://github.com/keystonejs/grappling-hook\n- https://github.com/sebelga/promised-hooks\n- https://github.com/bnoguchi/hooks-js\n- https://github.com/cb1kenobi/hook-emitter\n\n## License\n\n[Apache 2.0](LICENSE)\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Gregor Martynus and other contributors.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/before-after-hook/-/before-after-hook-2.2.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/before-after-hook/-/before-after-hook-2.2.2.tgz",
    "hash": "",
    "integrity": "sha512-3pZEU3NT5BFUo/AD5ERPWOgQOCZITni6iavr5AUw5AUwQjMlI0kzu5btnyD39AF0gUEsDPwJT+oY1ORBJijPjQ==",
    "registry": "npm",
    "packageName": "before-after-hook",
    "cacheIntegrity": "sha512-3pZEU3NT5BFUo/AD5ERPWOgQOCZITni6iavr5AUw5AUwQjMlI0kzu5btnyD39AF0gUEsDPwJT+oY1ORBJijPjQ== sha1-pujKQQKNkO4sJCIvIByQlWCRYT4="
  },
  "registry": "npm",
  "hash": "de9644537353e41154a3f003e4444f58e8103826484e78ba89abebe40530e40530423325234933bb96ed9f20f7f4017481412c0cfc094fea18d4e4412628cf8d"
}