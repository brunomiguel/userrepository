{
  "manifest": {
    "name": "saxes",
    "description": "An evented streaming XML parser in JavaScript",
    "author": {
      "name": "Louis-Dominique Dubeau",
      "email": "ldd@lddubeau.com"
    },
    "version": "3.1.11",
    "main": "lib/saxes.js",
    "types": "lib/saxes.d.ts",
    "license": "ISC",
    "engines": {
      "node": ">=8"
    },
    "scripts": {
      "test": "mocha --delay",
      "posttest": "eslint test/*.js lib/*.js",
      "preversion": "npm test",
      "version": "conventional-changelog -p angular -i CHANGELOG.md -s && git add CHANGELOG.md",
      "postversion": "npm publish",
      "postpublish": "git push origin --follow-tags"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/lddubeau/saxes.git"
    },
    "files": [
      "lib/saxes.js",
      "lib/saxes.d.ts",
      "LICENSE",
      "README.md",
      "CHANGELOG.md"
    ],
    "devDependencies": {
      "@commitlint/cli": "^8.0.0",
      "@commitlint/config-angular": "^8.0.0",
      "chai": "^4.2.0",
      "conventional-changelog-cli": "^2.0.21",
      "eslint": "^5.16.0",
      "eslint-config-lddubeau-base": "^3.0.5",
      "husky": "^2.5.0",
      "mocha": "^6.1.4",
      "renovate-config-lddubeau": "^1.0.0",
      "xml-conformance-suite": "^1.2.0"
    },
    "dependencies": {
      "xmlchars": "^2.1.1"
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-saxes-3.1.11-integrity/node_modules/saxes/package.json",
    "readmeFilename": "README.md",
    "readme": "# saxes\n\nA sax-style non-validating parser for XML.\n\nSaxes is a fork of [sax](https://github.com/isaacs/sax-js) 1.2.4. All mentions\nof sax in this project's documentation are references to sax 1.2.4.\n\nDesigned with [node](http://nodejs.org/) in mind, but should work fine in the\nbrowser or other CommonJS implementations.\n\nSaxes does not support Node versions older than 8.\n\n## Notable Differences from Sax.\n\n* Saxes aims to be much stricter than sax with regards to XML\n  well-formedness. Sax, even in its so-called \"strict mode\", is not strict. It\n  silently accepts structures that are not well-formed XML. Projects that need\n  better compliance with well-formedness constraints cannot use sax as-is.\n  Saxes aims for conformance with [XML 1.0 fifth\n  edition](https://www.w3.org/TR/2008/REC-xml-20081126/) and [XML Namespaces 1.0\n  third edition](http://www.w3.org/TR/2009/REC-xml-names-20091208/).\n\n  Consequently, saxes does not support HTML, or pseudo-XML, or bad XML.\n\n* Saxes is much much faster than sax, mostly because of a substantial redesign\n  of the internal parsing logic. The speed improvement is not merely due to\n  removing features that were supported by sax. That helped a bit, but saxes\n  adds some expensive checks in its aim for conformance with the XML\n  specification. Redesigning the parsing logic is what accounts for most of the\n  performance improvement.\n\n* Saxes does not aim to support antiquated platforms. We will not pollute the\n  source or the default build with support for antiquated platforms. If you want\n  support for IE 11, you are welcome to produce a PR that adds a *new build*\n  transpiled to ES5.\n\n* Saxes handles errors differently from sax: it provides a default onerror\n  handler which throws. You can replace it with your own handler if you want. If\n  your handler does nothing, there is no `resume` method to call.\n\n* There's no `Stream` API. A revamped API may be introduced later. (It is still\n  a \"streaming parser\" in the general sense that you write a character stream to\n  it.)\n\n* Saxes does not have facilities for limiting the size the data chunks passed to\n  event handlers. See the FAQ entry for more details.\n\n## Limitations\n\nThis is a non-validating parser so it only verifies whether the document is\nwell-formed. We do aim to raise errors for all malformed constructs encountered.\n\nHowever, this parser does not parse the contents of DTDs. So malformedness\nerrors caused by errors in DTDs cannot be reported.\n\nAlso, the parser continues to parse even upon encountering errors, and does its\nbest to continue reporting errors. You should heed all errors\nreported.\n\n**HOWEVER, ONCE AN ERROR HAS BEEN ENCOUNTERED YOU CANNOT RELY ON THE DATA\nPROVIDED THROUGH THE OTHER EVENT HANDLERS.**\n\nAfter an error, saxes tries to make sense of your document, but it may interpret\nit incorrectly. For instance ``<foo a=bc=\"d\"/>`` is invalid XML. Did you mean to\nhave ``<foo a=\"bc=d\"/>`` or ``<foo a=\"b\" c=\"d\"/>`` or some other variation?\nSaxes takes an honest stab at figuring out your mangled XML. That's as good as\nit gets.\n\n## Regarding `<!DOCTYPE`s and `<!ENTITY`s\n\nThe parser will handle the basic XML entities in text nodes and attribute\nvalues: `&amp; &lt; &gt; &apos; &quot;`. It's possible to define additional\nentities in XML by putting them in the DTD. This parser doesn't do anything with\nthat. If you want to listen to the `ondoctype` event, and then fetch the\ndoctypes, and read the entities and add them to `parser.ENTITIES`, then be my\nguest.\n\n## Documentation\n\nThe source code contains JSDOC comments. Use them.\n\n**PAY CLOSE ATTENTION TO WHAT IS PUBLIC AND WHAT IS PRIVATE.**\n\nThe elements of code that do not have JSDOC documentation, or have documentation\nwith the ``@private`` tag, are private.\n\nIf you use anything private, that's at your own peril.\n\nIf there's a mistake in the documentation, raise an issue. If you just assume,\nyou may assume incorrectly.\n\n## Summary Usage Information\n\n### Example\n\n```javascript\nvar saxes = require(\"./lib/saxes\"),\n  parser = new saxes.SaxesParser();\n\nparser.onerror = function (e) {\n  // an error happened.\n};\nparser.ontext = function (t) {\n  // got some text.  t is the string of text.\n};\nparser.onopentag = function (node) {\n  // opened a tag.  node has \"name\" and \"attributes\"\n};\nparser.onend = function () {\n  // parser stream is done, and ready to have more stuff written to it.\n};\n\nparser.write('<xml>Hello, <who name=\"world\">world</who>!</xml>').close();\n```\n\n### Constructor Arguments\n\nPass the following arguments to the parser function. All are optional.\n\n`opt` - Object bag of settings regarding string formatting.\n\nSettings supported:\n\n* `xmlns` - Boolean. If `true`, then namespaces are supported. Default\n  is `false`.\n\n* `position` - Boolean. If `false`, then don't track line/col/position. Unset is\n  treated as `true`. Default is unset.\n\n* `fileName` - String. Set a file name for error reporting. This is useful only\n  when tracking positions. You may leave it unset, in which case the file name\n  in error messages will be `undefined`.\n\n* `fragment` - Boolean. If `true`, parse the XML as an XML fragment. Default is\n  `false`.\n\n* `additionalNamespaces` - A plain object whose key, value pairs define\n   namespaces known before parsing the XML file. It is not legal to pass\n   bindings for the namespaces `\"xml\"` or `\"xmlns\"`.\n\n### Methods\n\n`write` - Write bytes onto the stream. You don't have to do this all at\nonce. You can keep writing as much as you want.\n\n`close` - Close the stream. Once closed, no more data may be written until it is\ndone processing the buffer, which is signaled by the `end` event.\n\n### Properties\n\nThe parser has the following properties:\n\n`line`, `column`, `position` - Indications of the position in the XML document\nwhere the parser currently is looking.\n\n`closed` - Boolean indicating whether or not the parser can be written to.  If\nit's `true`, then wait for the `ready` event to write again.\n\n`opt` - Any options passed into the constructor.\n\n`xmlDecl` - The XML declaration for this document. It contains the fields\n`version`, `encoding` and `standalone`. They are all `undefined` before\nencountering the XML declaration. If they are undefined after the XML\ndeclaration, the corresponding value was not set by the declaration. There is no\nevent associated with the XML declaration. In a well-formed document, the XML\ndeclaration may be preceded only by an optional BOM. So by the time any event\ngenerated by the parser happens, the declaration has been processed if present\nat all. Otherwise, you have a malformed document, and as stated above, you\ncannot rely on the parser data!\n\n### Events\n\nTo listen to an event, override `on<eventname>`. The list of supported events\nare also in the exported `EVENTS` array.\n\nSee the JSDOC comments in the source code for a description of each supported\nevent.\n\n### Parsing XML Fragments\n\nThe XML specification does not define any method by which to parse XML\nfragments. However, there are usage scenarios in which it is desirable to parse\nfragments. In order to allow this, saxes provides three initialization options.\n\nIf you pass the option `fragment: true` to the parser constructor, the parser\nwill expect an XML fragment. It essentially starts with a parsing state\nequivalent to the one it would be in if `parser.write(\"<foo\">)` had been called\nright after initialization. In other words, it expects content which is\nacceptable inside an element. This also turns off well-formedness checks that\nare inappropriate when parsing a fragment.\n\nThe option `additionalNamespaces` allows you to define additional prefix-to-URI\nbindings known before parsing starts. You would use this over `resolvePrefix` if\nyou have at the ready a series of namespaces bindings to use.\n\nThe option `resolvePrefix` allows you to pass a function which saxes will use if\nit is unable to resolve a namespace prefix by itself. You would use this over\n`additionalNamespaces` in a context where getting a complete list of defined\nnamespaces is onerous.\n\nNote that you can use `additionalNamespaces` and `resolvePrefix` together if you\nwant. `additionalNamespaces` applies before `resolvePrefix`.\n\n## FAQ\n\nQ. Why has saxes dropped support for limiting the size of data chunks passed to\nevent handlers?\n\nA. With sax you could set ``MAX_BUFFER_LENGTH`` to cause the parser to limit the\nsize of data chunks passed to event handlers. So if you ran into a span of text\nabove the limit, multiple ``text`` events with smaller data chunks were fired\ninstead of a single event with a large chunk.\n\nHowever, that functionality had some problematic characteristics. It had an\narbitrary default value. It was library-wide so all parsers created from a\nsingle instance of the ``sax`` library shared it. This could potentially cause\nconflicts among libraries running in the same VM but using sax for different\npurposes.\n\nThese issues could have been easily fixed, but there were larger issues. The\nbuffer limit arbitrarily applied to some events but not others. It would split\n``text``, ``cdata`` and ``script`` events. However, if a ``comment``,\n``doctype``, ``attribute`` or ``processing instruction`` were more than the\nlimit, the parser would generate an error and you were left picking up the\npieces.\n\nIt was not intuitive to use. You'd think setting the limit to 1K would prevent\nchunks bigger than 1K to be passed to event handlers. But that was not the\ncase. A comment in the source code told you that you might go over the limit if\nyou passed large chunks to ``write``. So if you want a 1K limit, don't pass 64K\nchunks to ``write``. Fair enough. You know what limit you want so you can\ncontrol the size of the data you pass to ``write``. So you limit the chunks to\n``write`` to 1K at a time. Even if you do this, your event handlers may get data\nchunks that are 2K in size. Suppose on the previous ``write`` the parser has\njust finished processing an open tag, so it is ready for text. Your ``write``\npasses 1K of text. You are not above the limit yet, so no event is generated\nyet. The next ``write`` passes another 1K of text. It so happens that sax checks\nbuffer limits only once per ``write``, after the chunk of data has been\nprocessed. Now you've hit the limit and you get a ``text`` event with 2K of\ndata. So even if you limit your ``write`` calls to the buffer limit you've set,\nyou may still get events with chunks at twice the buffer size limit you've\nspecified.\n\nWe may consider reinstating an equivalent functionality, provided that it\naddresses the issues above and does not cause a huge performance drop for\nuse-case scenarios that don't need it.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n====\n\nThe following license is the one that governed sax, from which saxes\nwas forked. Isaac Schlueter is not *directly* involved with saxes so\ndon't go bugging him for saxes issues.\n\nThe ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n====\n\n`String.fromCodePoint` by Mathias Bynens is no longer used, but it can\nstill be found in old commits. It was once used according to terms of\nMIT License, as follows:\n\n    Copyright Mathias Bynens <https://mathiasbynens.be/>\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    \"Software\"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/saxes/-/saxes-3.1.11.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/saxes/-/saxes-3.1.11.tgz",
    "hash": "",
    "integrity": "sha512-Ydydq3zC+WYDJK1+gRxRapLIED9PWeSuuS41wqyoRmzvhhh9nc+QQrVMKJYzJFULazeGhzSV0QleN2wD3boh2g==",
    "registry": "npm",
    "packageName": "saxes",
    "cacheIntegrity": "sha512-Ydydq3zC+WYDJK1+gRxRapLIED9PWeSuuS41wqyoRmzvhhh9nc+QQrVMKJYzJFULazeGhzSV0QleN2wD3boh2g== sha1-1Z0f0zLskq2YouCy7mRHAjhLHFs="
  },
  "registry": "npm",
  "hash": "61dc9dab7cc2f9660324ad7e811c516a92c8103f4f59e4aeb92e35c2aca8466cef86187d9dcf9042b54c28963324550b6b3786873495d1095e376c03ddba21da"
}