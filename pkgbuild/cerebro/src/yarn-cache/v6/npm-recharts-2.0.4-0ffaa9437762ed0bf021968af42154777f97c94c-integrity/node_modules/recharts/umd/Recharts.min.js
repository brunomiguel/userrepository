!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react"),require("prop-types"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","prop-types","react-dom"],e):"object"==typeof exports?exports.Recharts=e(require("react"),require("prop-types"),require("react-dom")):t.Recharts=e(t.React,t.PropTypes,t.ReactDOM)}(window,(function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=117)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.adaptEventsOfChild=e.adaptEventHandlers=e.filterProps=void 0;var o=n(0),a=i(n(3)),u=["viewBox","children"],s=["className","color","height","id","lang","max","media","method","min","name","style","target","type","width","role","tabIndex","accentHeight","accumulate","additive","alignmentBaseline","allowReorder","alphabetic","amplitude","arabicForm","ascent","attributeName","attributeType","autoReverse","azimuth","baseFrequency","baselineShift","baseProfile","bbox","begin","bias","by","calcMode","capHeight","clip","clipPath","clipPathUnits","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","contentScriptType","contentStyleType","cursor","cx","cy","d","decelerate","descent","diffuseConstant","direction","display","divisor","dominantBaseline","dur","dx","dy","edgeMode","elevation","enableBackground","end","exponent","externalResourcesRequired","fill","fillOpacity","fillRule","filter","filterRes","filterUnits","floodColor","floodOpacity","focusable","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","format","from","fx","fy","g1","g2","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","glyphRef","gradientTransform","gradientUnits","hanging","horizAdvX","horizOriginX","href","ideographic","imageRendering","in2","in","intercept","k1","k2","k3","k4","k","kernelMatrix","kernelUnitLength","kerning","keyPoints","keySplines","keyTimes","lengthAdjust","letterSpacing","lightingColor","limitingConeAngle","local","markerEnd","markerHeight","markerMid","markerStart","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mode","numOctaves","offset","opacity","operator","order","orient","orientation","origin","overflow","overlinePosition","overlineThickness","paintOrder","panose1","pathLength","patternContentUnits","patternTransform","patternUnits","pointerEvents","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","r","radius","refX","refY","renderingIntent","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","result","rotate","rx","ry","seed","shapeRendering","slope","spacing","specularConstant","specularExponent","speed","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","string","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","surfaceScale","systemLanguage","tableValues","targetX","targetY","textAnchor","textDecoration","textLength","textRendering","to","transform","u1","u2","underlinePosition","underlineThickness","unicode","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","values","vectorEffect","version","vertAdvY","vertOriginX","vertOriginY","vHanging","vIdeographic","viewTarget","visibility","vMathematical","widths","wordSpacing","writingMode","x1","x2","x","xChannelSelector","xHeight","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlns","xmlnsXlink","xmlSpace","y1","y2","y","yChannelSelector","z","zoomAndPan","ref","key","angle"],l=["dangerouslySetInnerHTML","onCopy","onCopyCapture","onCut","onCutCapture","onPaste","onPasteCapture","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onChangeCapture","onBeforeInput","onBeforeInputCapture","onInput","onInputCapture","onReset","onResetCapture","onSubmit","onSubmitCapture","onInvalid","onInvalidCapture","onLoad","onLoadCapture","onError","onErrorCapture","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture","onAbort","onAbortCapture","onCanPlay","onCanPlayCapture","onCanPlayThrough","onCanPlayThroughCapture","onDurationChange","onDurationChangeCapture","onEmptied","onEmptiedCapture","onEncrypted","onEncryptedCapture","onEnded","onEndedCapture","onLoadedData","onLoadedDataCapture","onLoadedMetadata","onLoadedMetadataCapture","onLoadStart","onLoadStartCapture","onPause","onPauseCapture","onPlay","onPlayCapture","onPlaying","onPlayingCapture","onProgress","onProgressCapture","onRateChange","onRateChangeCapture","onSeeked","onSeekedCapture","onSeeking","onSeekingCapture","onStalled","onStalledCapture","onSuspend","onSuspendCapture","onTimeUpdate","onTimeUpdateCapture","onVolumeChange","onVolumeChangeCapture","onWaiting","onWaitingCapture","onAuxClick","onAuxClickCapture","onClick","onClickCapture","onContextMenu","onContextMenuCapture","onDoubleClick","onDoubleClickCapture","onDrag","onDragCapture","onDragEnd","onDragEndCapture","onDragEnter","onDragEnterCapture","onDragExit","onDragExitCapture","onDragLeave","onDragLeaveCapture","onDragOver","onDragOverCapture","onDragStart","onDragStartCapture","onDrop","onDropCapture","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseMoveCapture","onMouseOut","onMouseOutCapture","onMouseOver","onMouseOverCapture","onMouseUp","onMouseUpCapture","onSelect","onSelectCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","onPointerDown","onPointerDownCapture","onPointerMove","onPointerMoveCapture","onPointerUp","onPointerUpCapture","onPointerCancel","onPointerCancelCapture","onPointerEnter","onPointerEnterCapture","onPointerLeave","onPointerLeaveCapture","onPointerOver","onPointerOverCapture","onPointerOut","onPointerOutCapture","onGotPointerCapture","onGotPointerCaptureCapture","onLostPointerCapture","onLostPointerCaptureCapture","onScroll","onScrollCapture","onWheel","onWheelCapture","onAnimationStart","onAnimationStartCapture","onAnimationEnd","onAnimationEndCapture","onAnimationIteration","onAnimationIterationCapture","onTransitionEnd","onTransitionEndCapture"];e.filterProps=function(t,e,n){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var r=t;if(o.isValidElement(t)&&(r=t.props),!a.default.isObject(r))return null;var i={};return Object.keys(r).forEach((function(t){(s.includes(t)||n&&u.includes(t)||e&&l.includes(t))&&(i[t]=r[t])})),i};e.adaptEventHandlers=function(t,e){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var n=t;if(o.isValidElement(t)&&(n=t.props),!a.default.isObject(n))return null;var r={};return Object.keys(n).forEach((function(t){l.includes(t)&&(r[t]=e||function(e){return n[t](n,e)})})),r};e.adaptEventsOfChild=function(t,e,n){if(!a.default.isObject(t)||"object"!==r(t))return null;var i=null;return Object.keys(t).forEach((function(r){var o=t[r];l.includes(r)&&"function"==typeof o&&(i||(i={}),i[r]=function(t,e,n){return function(r){return t(e,n,r),null}}(o,e,n))})),i}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",a="__lodash_placeholder__",u=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",l="[object Array]",c="[object Boolean]",f="[object Date]",h="[object Error]",p="[object Function]",d="[object GeneratorFunction]",y="[object Map]",v="[object Number]",g="[object Object]",m="[object RegExp]",_="[object Set]",b="[object String]",x="[object Symbol]",O="[object WeakMap]",w="[object ArrayBuffer]",A="[object DataView]",E="[object Float32Array]",M="[object Float64Array]",P="[object Int8Array]",S="[object Int16Array]",k="[object Int32Array]",C="[object Uint8Array]",j="[object Uint16Array]",T="[object Uint32Array]",N=/\b__p \+= '';/g,D=/\b(__p \+=) '' \+/g,I=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,R=/[&<>"']/g,B=RegExp(L.source),z=RegExp(R.source),F=/<%-([\s\S]+?)%>/g,V=/<%([\s\S]+?)%>/g,W=/<%=([\s\S]+?)%>/g,U=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,q=/^\w*$/,G=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,H=/[\\^$.*+?()[\]{}|]/g,K=RegExp(H.source),X=/^\s+|\s+$/g,Y=/^\s+/,$=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,at=/^\[object .+?Constructor\]$/,ut=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,lt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,ft=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dt="[\\ud800-\\udfff]",yt="["+pt+"]",vt="["+ht+"]",gt="\\d+",mt="[\\u2700-\\u27bf]",_t="[a-z\\xdf-\\xf6\\xf8-\\xff]",bt="[^\\ud800-\\udfff"+pt+gt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",xt="\\ud83c[\\udffb-\\udfff]",Ot="[^\\ud800-\\udfff]",wt="(?:\\ud83c[\\udde6-\\uddff]){2}",At="[\\ud800-\\udbff][\\udc00-\\udfff]",Et="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Mt="(?:"+_t+"|"+bt+")",Pt="(?:"+Et+"|"+bt+")",St="(?:"+vt+"|"+xt+")"+"?",kt="[\\ufe0e\\ufe0f]?"+St+("(?:\\u200d(?:"+[Ot,wt,At].join("|")+")[\\ufe0e\\ufe0f]?"+St+")*"),Ct="(?:"+[mt,wt,At].join("|")+")"+kt,jt="(?:"+[Ot+vt+"?",vt,wt,At,dt].join("|")+")",Tt=RegExp("['’]","g"),Nt=RegExp(vt,"g"),Dt=RegExp(xt+"(?="+xt+")|"+jt+kt,"g"),It=RegExp([Et+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[yt,Et,"$"].join("|")+")",Pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[yt,Et+Mt,"$"].join("|")+")",Et+"?"+Mt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Et+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",gt,Ct].join("|"),"g"),Lt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Rt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Bt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],zt=-1,Ft={};Ft[E]=Ft[M]=Ft[P]=Ft[S]=Ft[k]=Ft[C]=Ft["[object Uint8ClampedArray]"]=Ft[j]=Ft[T]=!0,Ft[s]=Ft[l]=Ft[w]=Ft[c]=Ft[A]=Ft[f]=Ft[h]=Ft[p]=Ft[y]=Ft[v]=Ft[g]=Ft[m]=Ft[_]=Ft[b]=Ft[O]=!1;var Vt={};Vt[s]=Vt[l]=Vt[w]=Vt[A]=Vt[c]=Vt[f]=Vt[E]=Vt[M]=Vt[P]=Vt[S]=Vt[k]=Vt[y]=Vt[v]=Vt[g]=Vt[m]=Vt[_]=Vt[b]=Vt[x]=Vt[C]=Vt["[object Uint8ClampedArray]"]=Vt[j]=Vt[T]=!0,Vt[h]=Vt[p]=Vt[O]=!1;var Wt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ut=parseFloat,qt=parseInt,Gt="object"==typeof t&&t&&t.Object===Object&&t,Ht="object"==typeof self&&self&&self.Object===Object&&self,Kt=Gt||Ht||Function("return this")(),Xt=e&&!e.nodeType&&e,Yt=Xt&&"object"==typeof r&&r&&!r.nodeType&&r,$t=Yt&&Yt.exports===Xt,Zt=$t&&Gt.process,Jt=function(){try{var t=Yt&&Yt.require&&Yt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,te=Jt&&Jt.isDate,ee=Jt&&Jt.isMap,ne=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,ie=Jt&&Jt.isTypedArray;function oe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ae(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function ue(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function se(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function le(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function ce(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function fe(t,e){return!!(null==t?0:t.length)&&xe(t,e,0)>-1}function he(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function pe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function de(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function ye(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function ve(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function ge(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var me=Ee("length");function _e(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function be(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function xe(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):be(t,we,n)}function Oe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function we(t){return t!=t}function Ae(t,e){var n=null==t?0:t.length;return n?Se(t,e)/n:NaN}function Ee(t){return function(e){return null==e?void 0:e[t]}}function Me(t){return function(e){return null==t?void 0:t[e]}}function Pe(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function Se(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);void 0!==o&&(n=void 0===n?o:n+o)}return n}function ke(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ce(t){return function(e){return t(e)}}function je(t,e){return pe(e,(function(e){return t[e]}))}function Te(t,e){return t.has(e)}function Ne(t,e){for(var n=-1,r=t.length;++n<r&&xe(e,t[n],0)>-1;);return n}function De(t,e){for(var n=t.length;n--&&xe(e,t[n],0)>-1;);return n}function Ie(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Le=Me({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Re=Me({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Be(t){return"\\"+Wt[t]}function ze(t){return Lt.test(t)}function Fe(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function Ve(t,e){return function(n){return t(e(n))}}function We(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var u=t[n];u!==e&&u!==a||(t[n]=a,o[i++]=n)}return o}function Ue(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function qe(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function Ge(t){return ze(t)?function(t){var e=Dt.lastIndex=0;for(;Dt.test(t);)++e;return e}(t):me(t)}function He(t){return ze(t)?function(t){return t.match(Dt)||[]}(t):function(t){return t.split("")}(t)}var Ke=Me({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Xe=function t(e){var n,r=(e=null==e?Kt:Xe.defaults(Kt.Object(),e,Xe.pick(Kt,Bt))).Array,i=e.Date,ht=e.Error,pt=e.Function,dt=e.Math,yt=e.Object,vt=e.RegExp,gt=e.String,mt=e.TypeError,_t=r.prototype,bt=pt.prototype,xt=yt.prototype,Ot=e["__core-js_shared__"],wt=bt.toString,At=xt.hasOwnProperty,Et=0,Mt=(n=/[^.]+$/.exec(Ot&&Ot.keys&&Ot.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Pt=xt.toString,St=wt.call(yt),kt=Kt._,Ct=vt("^"+wt.call(At).replace(H,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jt=$t?e.Buffer:void 0,Dt=e.Symbol,Lt=e.Uint8Array,Wt=jt?jt.allocUnsafe:void 0,Gt=Ve(yt.getPrototypeOf,yt),Ht=yt.create,Xt=xt.propertyIsEnumerable,Yt=_t.splice,Zt=Dt?Dt.isConcatSpreadable:void 0,Jt=Dt?Dt.iterator:void 0,me=Dt?Dt.toStringTag:void 0,Me=function(){try{var t=Qi(yt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ye=e.clearTimeout!==Kt.clearTimeout&&e.clearTimeout,$e=i&&i.now!==Kt.Date.now&&i.now,Ze=e.setTimeout!==Kt.setTimeout&&e.setTimeout,Je=dt.ceil,Qe=dt.floor,tn=yt.getOwnPropertySymbols,en=jt?jt.isBuffer:void 0,nn=e.isFinite,rn=_t.join,on=Ve(yt.keys,yt),an=dt.max,un=dt.min,sn=i.now,ln=e.parseInt,cn=dt.random,fn=_t.reverse,hn=Qi(e,"DataView"),pn=Qi(e,"Map"),dn=Qi(e,"Promise"),yn=Qi(e,"Set"),vn=Qi(e,"WeakMap"),gn=Qi(yt,"create"),mn=vn&&new vn,_n={},bn=Po(hn),xn=Po(pn),On=Po(dn),wn=Po(yn),An=Po(vn),En=Dt?Dt.prototype:void 0,Mn=En?En.valueOf:void 0,Pn=En?En.toString:void 0;function Sn(t){if(qa(t)&&!Na(t)&&!(t instanceof Tn)){if(t instanceof jn)return t;if(At.call(t,"__wrapped__"))return So(t)}return new jn(t)}var kn=function(){function t(){}return function(e){if(!Ua(e))return{};if(Ht)return Ht(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Cn(){}function jn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Tn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Nn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Dn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function In(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Ln(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new In;++e<n;)this.add(t[e])}function Rn(t){var e=this.__data__=new Dn(t);this.size=e.size}function Bn(t,e){var n=Na(t),r=!n&&Ta(t),i=!n&&!r&&Ra(t),o=!n&&!r&&!i&&Ja(t),a=n||r||i||o,u=a?ke(t.length,gt):[],s=u.length;for(var l in t)!e&&!At.call(t,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||ao(l,s))||u.push(l);return u}function zn(t){var e=t.length;return e?t[Lr(0,e-1)]:void 0}function Fn(t,e){return Ao(gi(t),Yn(e,0,t.length))}function Vn(t){return Ao(gi(t))}function Wn(t,e,n){(void 0!==n&&!ka(t[e],n)||void 0===n&&!(e in t))&&Kn(t,e,n)}function Un(t,e,n){var r=t[e];At.call(t,e)&&ka(r,n)&&(void 0!==n||e in t)||Kn(t,e,n)}function qn(t,e){for(var n=t.length;n--;)if(ka(t[n][0],e))return n;return-1}function Gn(t,e,n,r){return tr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function Hn(t,e){return t&&mi(e,bu(e),t)}function Kn(t,e,n){"__proto__"==e&&Me?Me(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Xn(t,e){for(var n=-1,i=e.length,o=r(i),a=null==t;++n<i;)o[n]=a?void 0:yu(t,e[n]);return o}function Yn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function $n(t,e,n,r,i,o){var a,u=1&e,l=2&e,h=4&e;if(n&&(a=i?n(t,r,i,o):n(t)),void 0!==a)return a;if(!Ua(t))return t;var O=Na(t);if(O){if(a=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&At.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!u)return gi(t,a)}else{var N=no(t),D=N==p||N==d;if(Ra(t))return fi(t,u);if(N==g||N==s||D&&!i){if(a=l||D?{}:io(t),!u)return l?function(t,e){return mi(t,eo(t),e)}(t,function(t,e){return t&&mi(e,xu(e),t)}(a,t)):function(t,e){return mi(t,to(t),e)}(t,Hn(a,t))}else{if(!Vt[N])return i?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case w:return hi(t);case c:case f:return new r(+t);case A:return function(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case E:case M:case P:case S:case k:case C:case"[object Uint8ClampedArray]":case j:case T:return pi(t,n);case y:return new r;case v:case b:return new r(t);case m:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case _:return new r;case x:return i=t,Mn?yt(Mn.call(i)):{}}var i}(t,N,u)}}o||(o=new Rn);var I=o.get(t);if(I)return I;o.set(t,a),Ya(t)?t.forEach((function(r){a.add($n(r,e,n,r,t,o))})):Ga(t)&&t.forEach((function(r,i){a.set(i,$n(r,e,n,i,t,o))}));var L=O?void 0:(h?l?Hi:Gi:l?xu:bu)(t);return ue(L||t,(function(r,i){L&&(r=t[i=r]),Un(a,i,$n(r,e,n,i,t,o))})),a}function Zn(t,e,n){var r=n.length;if(null==t)return!r;for(t=yt(t);r--;){var i=n[r],o=e[i],a=t[i];if(void 0===a&&!(i in t)||!o(a))return!1}return!0}function Jn(t,e,n){if("function"!=typeof t)throw new mt(o);return bo((function(){t.apply(void 0,n)}),e)}function Qn(t,e,n,r){var i=-1,o=fe,a=!0,u=t.length,s=[],l=e.length;if(!u)return s;n&&(e=pe(e,Ce(n))),r?(o=he,a=!1):e.length>=200&&(o=Te,a=!1,e=new Ln(e));t:for(;++i<u;){var c=t[i],f=null==n?c:n(c);if(c=r||0!==c?c:0,a&&f==f){for(var h=l;h--;)if(e[h]===f)continue t;s.push(c)}else o(e,f,r)||s.push(c)}return s}Sn.templateSettings={escape:F,evaluate:V,interpolate:W,variable:"",imports:{_:Sn}},Sn.prototype=Cn.prototype,Sn.prototype.constructor=Sn,jn.prototype=kn(Cn.prototype),jn.prototype.constructor=jn,Tn.prototype=kn(Cn.prototype),Tn.prototype.constructor=Tn,Nn.prototype.clear=function(){this.__data__=gn?gn(null):{},this.size=0},Nn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Nn.prototype.get=function(t){var e=this.__data__;if(gn){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return At.call(e,t)?e[t]:void 0},Nn.prototype.has=function(t){var e=this.__data__;return gn?void 0!==e[t]:At.call(e,t)},Nn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=gn&&void 0===e?"__lodash_hash_undefined__":e,this},Dn.prototype.clear=function(){this.__data__=[],this.size=0},Dn.prototype.delete=function(t){var e=this.__data__,n=qn(e,t);return!(n<0)&&(n==e.length-1?e.pop():Yt.call(e,n,1),--this.size,!0)},Dn.prototype.get=function(t){var e=this.__data__,n=qn(e,t);return n<0?void 0:e[n][1]},Dn.prototype.has=function(t){return qn(this.__data__,t)>-1},Dn.prototype.set=function(t,e){var n=this.__data__,r=qn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},In.prototype.clear=function(){this.size=0,this.__data__={hash:new Nn,map:new(pn||Dn),string:new Nn}},In.prototype.delete=function(t){var e=Zi(this,t).delete(t);return this.size-=e?1:0,e},In.prototype.get=function(t){return Zi(this,t).get(t)},In.prototype.has=function(t){return Zi(this,t).has(t)},In.prototype.set=function(t,e){var n=Zi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Ln.prototype.add=Ln.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Ln.prototype.has=function(t){return this.__data__.has(t)},Rn.prototype.clear=function(){this.__data__=new Dn,this.size=0},Rn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Rn.prototype.get=function(t){return this.__data__.get(t)},Rn.prototype.has=function(t){return this.__data__.has(t)},Rn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Dn){var r=n.__data__;if(!pn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new In(r)}return n.set(t,e),this.size=n.size,this};var tr=xi(sr),er=xi(lr,!0);function nr(t,e){var n=!0;return tr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function rr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=e(o);if(null!=a&&(void 0===u?a==a&&!Za(a):n(a,u)))var u=a,s=o}return s}function ir(t,e){var n=[];return tr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function or(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=oo),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?or(u,e-1,n,r,i):de(i,u):r||(i[i.length]=u)}return i}var ar=Oi(),ur=Oi(!0);function sr(t,e){return t&&ar(t,e,bu)}function lr(t,e){return t&&ur(t,e,bu)}function cr(t,e){return ce(e,(function(e){return Fa(t[e])}))}function fr(t,e){for(var n=0,r=(e=ui(e,t)).length;null!=t&&n<r;)t=t[Mo(e[n++])];return n&&n==r?t:void 0}function hr(t,e,n){var r=e(t);return Na(t)?r:de(r,n(t))}function pr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":me&&me in yt(t)?function(t){var e=At.call(t,me),n=t[me];try{t[me]=void 0;var r=!0}catch(t){}var i=Pt.call(t);r&&(e?t[me]=n:delete t[me]);return i}(t):function(t){return Pt.call(t)}(t)}function dr(t,e){return t>e}function yr(t,e){return null!=t&&At.call(t,e)}function vr(t,e){return null!=t&&e in yt(t)}function gr(t,e,n){for(var i=n?he:fe,o=t[0].length,a=t.length,u=a,s=r(a),l=1/0,c=[];u--;){var f=t[u];u&&e&&(f=pe(f,Ce(e))),l=un(f.length,l),s[u]=!n&&(e||o>=120&&f.length>=120)?new Ln(u&&f):void 0}f=t[0];var h=-1,p=s[0];t:for(;++h<o&&c.length<l;){var d=f[h],y=e?e(d):d;if(d=n||0!==d?d:0,!(p?Te(p,y):i(c,y,n))){for(u=a;--u;){var v=s[u];if(!(v?Te(v,y):i(t[u],y,n)))continue t}p&&p.push(y),c.push(d)}}return c}function mr(t,e,n){var r=null==(t=vo(t,e=ui(e,t)))?t:t[Mo(zo(e))];return null==r?void 0:oe(r,t,n)}function _r(t){return qa(t)&&pr(t)==s}function br(t,e,n,r,i){return t===e||(null==t||null==e||!qa(t)&&!qa(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var a=Na(t),u=Na(e),p=a?l:no(t),d=u?l:no(e),O=(p=p==s?g:p)==g,E=(d=d==s?g:d)==g,M=p==d;if(M&&Ra(t)){if(!Ra(e))return!1;a=!0,O=!1}if(M&&!O)return o||(o=new Rn),a||Ja(t)?Ui(t,e,n,r,i,o):function(t,e,n,r,i,o,a){switch(n){case A:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case w:return!(t.byteLength!=e.byteLength||!o(new Lt(t),new Lt(e)));case c:case f:case v:return ka(+t,+e);case h:return t.name==e.name&&t.message==e.message;case m:case b:return t==e+"";case y:var u=Fe;case _:var s=1&r;if(u||(u=Ue),t.size!=e.size&&!s)return!1;var l=a.get(t);if(l)return l==e;r|=2,a.set(t,e);var p=Ui(u(t),u(e),r,i,o,a);return a.delete(t),p;case x:if(Mn)return Mn.call(t)==Mn.call(e)}return!1}(t,e,p,n,r,i,o);if(!(1&n)){var P=O&&At.call(t,"__wrapped__"),S=E&&At.call(e,"__wrapped__");if(P||S){var k=P?t.value():t,C=S?e.value():e;return o||(o=new Rn),i(k,C,n,r,o)}}if(!M)return!1;return o||(o=new Rn),function(t,e,n,r,i,o){var a=1&n,u=Gi(t),s=u.length,l=Gi(e).length;if(s!=l&&!a)return!1;var c=s;for(;c--;){var f=u[c];if(!(a?f in e:At.call(e,f)))return!1}var h=o.get(t),p=o.get(e);if(h&&p)return h==e&&p==t;var d=!0;o.set(t,e),o.set(e,t);var y=a;for(;++c<s;){f=u[c];var v=t[f],g=e[f];if(r)var m=a?r(g,v,f,e,t,o):r(v,g,f,t,e,o);if(!(void 0===m?v===g||i(v,g,n,r,o):m)){d=!1;break}y||(y="constructor"==f)}if(d&&!y){var _=t.constructor,b=e.constructor;_==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof b&&b instanceof b||(d=!1)}return o.delete(t),o.delete(e),d}(t,e,n,r,i,o)}(t,e,n,r,br,i))}function xr(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=yt(t);i--;){var u=n[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){var s=(u=n[i])[0],l=t[s],c=u[1];if(a&&u[2]){if(void 0===l&&!(s in t))return!1}else{var f=new Rn;if(r)var h=r(l,c,s,t,e,f);if(!(void 0===h?br(c,l,3,r,f):h))return!1}}return!0}function Or(t){return!(!Ua(t)||(e=t,Mt&&Mt in e))&&(Fa(t)?Ct:at).test(Po(t));var e}function wr(t){return"function"==typeof t?t:null==t?Hu:"object"==typeof t?Na(t)?kr(t[0],t[1]):Sr(t):es(t)}function Ar(t){if(!fo(t))return on(t);var e=[];for(var n in yt(t))At.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Er(t){if(!Ua(t))return function(t){var e=[];if(null!=t)for(var n in yt(t))e.push(n);return e}(t);var e=fo(t),n=[];for(var r in t)("constructor"!=r||!e&&At.call(t,r))&&n.push(r);return n}function Mr(t,e){return t<e}function Pr(t,e){var n=-1,i=Ia(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Sr(t){var e=Ji(t);return 1==e.length&&e[0][2]?po(e[0][0],e[0][1]):function(n){return n===t||xr(n,t,e)}}function kr(t,e){return so(t)&&ho(e)?po(Mo(t),e):function(n){var r=yu(n,t);return void 0===r&&r===e?vu(n,t):br(e,r,3)}}function Cr(t,e,n,r,i){t!==e&&ar(e,(function(o,a){if(i||(i=new Rn),Ua(o))!function(t,e,n,r,i,o,a){var u=mo(t,n),s=mo(e,n),l=a.get(s);if(l)return void Wn(t,n,l);var c=o?o(u,s,n+"",t,e,a):void 0,f=void 0===c;if(f){var h=Na(s),p=!h&&Ra(s),d=!h&&!p&&Ja(s);c=s,h||p||d?Na(u)?c=u:La(u)?c=gi(u):p?(f=!1,c=fi(s,!0)):d?(f=!1,c=pi(s,!0)):c=[]:Ka(s)||Ta(s)?(c=u,Ta(u)?c=au(u):Ua(u)&&!Fa(u)||(c=io(s))):f=!1}f&&(a.set(s,c),i(c,s,r,o,a),a.delete(s));Wn(t,n,c)}(t,e,a,n,Cr,r,i);else{var u=r?r(mo(t,a),o,a+"",t,e,i):void 0;void 0===u&&(u=o),Wn(t,a,u)}}),xu)}function jr(t,e){var n=t.length;if(n)return ao(e+=e<0?n:0,n)?t[e]:void 0}function Tr(t,e,n){e=e.length?pe(e,(function(t){return Na(t)?function(e){return fr(e,1===t.length?t[0]:t)}:t})):[Hu];var r=-1;return e=pe(e,Ce($i())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Pr(t,(function(t,n,i){return{criteria:pe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;for(;++r<a;){var s=di(i[r],o[r]);if(s){if(r>=u)return s;var l=n[r];return s*("desc"==l?-1:1)}}return t.index-e.index}(t,e,n)}))}function Nr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=fr(t,a);n(u,a)&&Vr(o,ui(a,t),u)}return o}function Dr(t,e,n,r){var i=r?Oe:xe,o=-1,a=e.length,u=t;for(t===e&&(e=gi(e)),n&&(u=pe(t,Ce(n)));++o<a;)for(var s=0,l=e[o],c=n?n(l):l;(s=i(u,c,s,r))>-1;)u!==t&&Yt.call(u,s,1),Yt.call(t,s,1);return t}function Ir(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;ao(i)?Yt.call(t,i,1):Qr(t,i)}}return t}function Lr(t,e){return t+Qe(cn()*(e-t+1))}function Rr(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=Qe(e/2))&&(t+=t)}while(e);return n}function Br(t,e){return xo(yo(t,e,Hu),t+"")}function zr(t){return zn(ku(t))}function Fr(t,e){var n=ku(t);return Ao(n,Yn(e,0,n.length))}function Vr(t,e,n,r){if(!Ua(t))return t;for(var i=-1,o=(e=ui(e,t)).length,a=o-1,u=t;null!=u&&++i<o;){var s=Mo(e[i]),l=n;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=a){var c=u[s];void 0===(l=r?r(c,s,u):void 0)&&(l=Ua(c)?c:ao(e[i+1])?[]:{})}Un(u,s,l),u=u[s]}return t}var Wr=mn?function(t,e){return mn.set(t,e),t}:Hu,Ur=Me?function(t,e){return Me(t,"toString",{configurable:!0,enumerable:!1,value:Uu(e),writable:!0})}:Hu;function qr(t){return Ao(ku(t))}function Gr(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Hr(t,e){var n;return tr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Kr(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Za(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return Xr(t,e,Hu,n)}function Xr(t,e,n,r){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var a=(e=n(e))!=e,u=null===e,s=Za(e),l=void 0===e;i<o;){var c=Qe((i+o)/2),f=n(t[c]),h=void 0!==f,p=null===f,d=f==f,y=Za(f);if(a)var v=r||d;else v=l?d&&(r||h):u?d&&h&&(r||!p):s?d&&h&&!p&&(r||!y):!p&&!y&&(r?f<=e:f<e);v?i=c+1:o=c}return un(o,4294967294)}function Yr(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!ka(u,s)){var s=u;o[i++]=0===a?0:a}}return o}function $r(t){return"number"==typeof t?t:Za(t)?NaN:+t}function Zr(t){if("string"==typeof t)return t;if(Na(t))return pe(t,Zr)+"";if(Za(t))return Pn?Pn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Jr(t,e,n){var r=-1,i=fe,o=t.length,a=!0,u=[],s=u;if(n)a=!1,i=he;else if(o>=200){var l=e?null:Ri(t);if(l)return Ue(l);a=!1,i=Te,s=new Ln}else s=e?[]:u;t:for(;++r<o;){var c=t[r],f=e?e(c):c;if(c=n||0!==c?c:0,a&&f==f){for(var h=s.length;h--;)if(s[h]===f)continue t;e&&s.push(f),u.push(c)}else i(s,f,n)||(s!==u&&s.push(f),u.push(c))}return u}function Qr(t,e){return null==(t=vo(t,e=ui(e,t)))||delete t[Mo(zo(e))]}function ti(t,e,n,r){return Vr(t,e,n(fr(t,e)),r)}function ei(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Gr(t,r?0:o,r?o+1:i):Gr(t,r?o+1:0,r?i:o)}function ni(t,e){var n=t;return n instanceof Tn&&(n=n.value()),ye(e,(function(t,e){return e.func.apply(e.thisArg,de([t],e.args))}),n)}function ri(t,e,n){var i=t.length;if(i<2)return i?Jr(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=t[o],s=-1;++s<i;)s!=o&&(a[o]=Qn(a[o]||u,t[s],e,n));return Jr(or(a,1),e,n)}function ii(t,e,n){for(var r=-1,i=t.length,o=e.length,a={};++r<i;){var u=r<o?e[r]:void 0;n(a,t[r],u)}return a}function oi(t){return La(t)?t:[]}function ai(t){return"function"==typeof t?t:Hu}function ui(t,e){return Na(t)?t:so(t,e)?[t]:Eo(uu(t))}var si=Br;function li(t,e,n){var r=t.length;return n=void 0===n?r:n,!e&&n>=r?t:Gr(t,e,n)}var ci=Ye||function(t){return Kt.clearTimeout(t)};function fi(t,e){if(e)return t.slice();var n=t.length,r=Wt?Wt(n):new t.constructor(n);return t.copy(r),r}function hi(t){var e=new t.constructor(t.byteLength);return new Lt(e).set(new Lt(t)),e}function pi(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function di(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,o=Za(t),a=void 0!==e,u=null===e,s=e==e,l=Za(e);if(!u&&!l&&!o&&t>e||o&&a&&s&&!u&&!l||r&&a&&s||!n&&s||!i)return 1;if(!r&&!o&&!l&&t<e||l&&n&&i&&!r&&!o||u&&n&&i||!a&&i||!s)return-1}return 0}function yi(t,e,n,i){for(var o=-1,a=t.length,u=n.length,s=-1,l=e.length,c=an(a-u,0),f=r(l+c),h=!i;++s<l;)f[s]=e[s];for(;++o<u;)(h||o<a)&&(f[n[o]]=t[o]);for(;c--;)f[s++]=t[o++];return f}function vi(t,e,n,i){for(var o=-1,a=t.length,u=-1,s=n.length,l=-1,c=e.length,f=an(a-s,0),h=r(f+c),p=!i;++o<f;)h[o]=t[o];for(var d=o;++l<c;)h[d+l]=e[l];for(;++u<s;)(p||o<a)&&(h[d+n[u]]=t[o++]);return h}function gi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function mi(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var u=e[o],s=r?r(n[u],t[u],u,n,t):void 0;void 0===s&&(s=t[u]),i?Kn(n,u,s):Un(n,u,s)}return n}function _i(t,e){return function(n,r){var i=Na(n)?ae:Gn,o=e?e():{};return i(n,t,$i(r,2),o)}}function bi(t){return Br((function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,a=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,a&&uo(n[0],n[1],a)&&(o=i<3?void 0:o,i=1),e=yt(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e}))}function xi(t,e){return function(n,r){if(null==n)return n;if(!Ia(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=yt(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Oi(t){return function(e,n,r){for(var i=-1,o=yt(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}function wi(t){return function(e){var n=ze(e=uu(e))?He(e):void 0,r=n?n[0]:e.charAt(0),i=n?li(n,1).join(""):e.slice(1);return r[t]()+i}}function Ai(t){return function(e){return ye(Fu(Tu(e).replace(Tt,"")),t,"")}}function Ei(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=kn(t.prototype),r=t.apply(n,e);return Ua(r)?r:n}}function Mi(t){return function(e,n,r){var i=yt(e);if(!Ia(e)){var o=$i(n,3);e=bu(e),n=function(t){return o(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[o?e[a]:a]:void 0}}function Pi(t){return qi((function(e){var n=e.length,r=n,i=jn.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new mt(o);if(i&&!u&&"wrapper"==Xi(a))var u=new jn([],!0)}for(r=u?r:n;++r<n;){var s=Xi(a=e[r]),l="wrapper"==s?Ki(a):void 0;u=l&&lo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?u[Xi(l[0])].apply(u,l[3]):1==a.length&&lo(a)?u[s]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Na(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Si(t,e,n,i,o,a,u,s,l,c){var f=128&e,h=1&e,p=2&e,d=24&e,y=512&e,v=p?void 0:Ei(t);return function g(){for(var m=arguments.length,_=r(m),b=m;b--;)_[b]=arguments[b];if(d)var x=Yi(g),O=Ie(_,x);if(i&&(_=yi(_,i,o,d)),a&&(_=vi(_,a,u,d)),m-=O,d&&m<c){var w=We(_,x);return Ii(t,e,Si,g.placeholder,n,_,w,s,l,c-m)}var A=h?n:this,E=p?A[t]:t;return m=_.length,s?_=go(_,s):y&&m>1&&_.reverse(),f&&l<m&&(_.length=l),this&&this!==Kt&&this instanceof g&&(E=v||Ei(E)),E.apply(A,_)}}function ki(t,e){return function(n,r){return function(t,e,n,r){return sr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Ci(t,e){return function(n,r){var i;if(void 0===n&&void 0===r)return e;if(void 0!==n&&(i=n),void 0!==r){if(void 0===i)return r;"string"==typeof n||"string"==typeof r?(n=Zr(n),r=Zr(r)):(n=$r(n),r=$r(r)),i=t(n,r)}return i}}function ji(t){return qi((function(e){return e=pe(e,Ce($i())),Br((function(n){var r=this;return t(e,(function(t){return oe(t,r,n)}))}))}))}function Ti(t,e){var n=(e=void 0===e?" ":Zr(e)).length;if(n<2)return n?Rr(e,t):e;var r=Rr(e,Je(t/Ge(e)));return ze(e)?li(He(r),0,t).join(""):r.slice(0,t)}function Ni(t){return function(e,n,i){return i&&"number"!=typeof i&&uo(e,n,i)&&(n=i=void 0),e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n,i){for(var o=-1,a=an(Je((e-t)/(n||1)),0),u=r(a);a--;)u[i?a:++o]=t,t+=n;return u}(e,n,i=void 0===i?e<n?1:-1:nu(i),t)}}function Di(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ou(e),n=ou(n)),t(e,n)}}function Ii(t,e,n,r,i,o,a,u,s,l){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var f=[t,e,i,c?o:void 0,c?a:void 0,c?void 0:o,c?void 0:a,u,s,l],h=n.apply(void 0,f);return lo(t)&&_o(h,f),h.placeholder=r,Oo(h,t,e)}function Li(t){var e=dt[t];return function(t,n){if(t=ou(t),(n=null==n?0:un(ru(n),292))&&nn(t)){var r=(uu(t)+"e").split("e");return+((r=(uu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ri=yn&&1/Ue(new yn([,-0]))[1]==1/0?function(t){return new yn(t)}:Zu;function Bi(t){return function(e){var n=no(e);return n==y?Fe(e):n==_?qe(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function zi(t,e,n,i,u,s,l,c){var f=2&e;if(!f&&"function"!=typeof t)throw new mt(o);var h=i?i.length:0;if(h||(e&=-97,i=u=void 0),l=void 0===l?l:an(ru(l),0),c=void 0===c?c:ru(c),h-=u?u.length:0,64&e){var p=i,d=u;i=u=void 0}var y=f?void 0:Ki(t),v=[t,e,n,i,u,p,d,s,l,c];if(y&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,u=128==r&&8==n||128==r&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!u)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var s=e[3];if(s){var l=t[3];t[3]=l?yi(l,s,e[4]):s,t[4]=l?We(t[3],a):e[4]}(s=e[5])&&(l=t[5],t[5]=l?vi(l,s,e[6]):s,t[6]=l?We(t[5],a):e[6]);(s=e[7])&&(t[7]=s);128&r&&(t[8]=null==t[8]?e[8]:un(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(v,y),t=v[0],e=v[1],n=v[2],i=v[3],u=v[4],!(c=v[9]=void 0===v[9]?f?0:t.length:an(v[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)g=8==e||16==e?function(t,e,n){var i=Ei(t);return function o(){for(var a=arguments.length,u=r(a),s=a,l=Yi(o);s--;)u[s]=arguments[s];var c=a<3&&u[0]!==l&&u[a-1]!==l?[]:We(u,l);if((a-=c.length)<n)return Ii(t,e,Si,o.placeholder,void 0,u,c,void 0,void 0,n-a);var f=this&&this!==Kt&&this instanceof o?i:t;return oe(f,this,u)}}(t,e,c):32!=e&&33!=e||u.length?Si.apply(void 0,v):function(t,e,n,i){var o=1&e,a=Ei(t);return function e(){for(var u=-1,s=arguments.length,l=-1,c=i.length,f=r(c+s),h=this&&this!==Kt&&this instanceof e?a:t;++l<c;)f[l]=i[l];for(;s--;)f[l++]=arguments[++u];return oe(h,o?n:this,f)}}(t,e,n,i);else var g=function(t,e,n){var r=1&e,i=Ei(t);return function e(){var o=this&&this!==Kt&&this instanceof e?i:t;return o.apply(r?n:this,arguments)}}(t,e,n);return Oo((y?Wr:_o)(g,v),t,e)}function Fi(t,e,n,r){return void 0===t||ka(t,xt[n])&&!At.call(r,n)?e:t}function Vi(t,e,n,r,i,o){return Ua(t)&&Ua(e)&&(o.set(e,t),Cr(t,e,void 0,Vi,o),o.delete(e)),t}function Wi(t){return Ka(t)?void 0:t}function Ui(t,e,n,r,i,o){var a=1&n,u=t.length,s=e.length;if(u!=s&&!(a&&s>u))return!1;var l=o.get(t),c=o.get(e);if(l&&c)return l==e&&c==t;var f=-1,h=!0,p=2&n?new Ln:void 0;for(o.set(t,e),o.set(e,t);++f<u;){var d=t[f],y=e[f];if(r)var v=a?r(y,d,f,e,t,o):r(d,y,f,t,e,o);if(void 0!==v){if(v)continue;h=!1;break}if(p){if(!ge(e,(function(t,e){if(!Te(p,e)&&(d===t||i(d,t,n,r,o)))return p.push(e)}))){h=!1;break}}else if(d!==y&&!i(d,y,n,r,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function qi(t){return xo(yo(t,void 0,Do),t+"")}function Gi(t){return hr(t,bu,to)}function Hi(t){return hr(t,xu,eo)}var Ki=mn?function(t){return mn.get(t)}:Zu;function Xi(t){for(var e=t.name+"",n=_n[e],r=At.call(_n,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Yi(t){return(At.call(Sn,"placeholder")?Sn:t).placeholder}function $i(){var t=Sn.iteratee||Ku;return t=t===Ku?wr:t,arguments.length?t(arguments[0],arguments[1]):t}function Zi(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Ji(t){for(var e=bu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,ho(i)]}return e}function Qi(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return Or(n)?n:void 0}var to=tn?function(t){return null==t?[]:(t=yt(t),ce(tn(t),(function(e){return Xt.call(t,e)})))}:is,eo=tn?function(t){for(var e=[];t;)de(e,to(t)),t=Gt(t);return e}:is,no=pr;function ro(t,e,n){for(var r=-1,i=(e=ui(e,t)).length,o=!1;++r<i;){var a=Mo(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Wa(i)&&ao(a,i)&&(Na(t)||Ta(t))}function io(t){return"function"!=typeof t.constructor||fo(t)?{}:kn(Gt(t))}function oo(t){return Na(t)||Ta(t)||!!(Zt&&t&&t[Zt])}function ao(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&st.test(t))&&t>-1&&t%1==0&&t<e}function uo(t,e,n){if(!Ua(n))return!1;var r=typeof e;return!!("number"==r?Ia(n)&&ao(e,n.length):"string"==r&&e in n)&&ka(n[e],t)}function so(t,e){if(Na(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Za(t))||(q.test(t)||!U.test(t)||null!=e&&t in yt(e))}function lo(t){var e=Xi(t),n=Sn[e];if("function"!=typeof n||!(e in Tn.prototype))return!1;if(t===n)return!0;var r=Ki(n);return!!r&&t===r[0]}(hn&&no(new hn(new ArrayBuffer(1)))!=A||pn&&no(new pn)!=y||dn&&"[object Promise]"!=no(dn.resolve())||yn&&no(new yn)!=_||vn&&no(new vn)!=O)&&(no=function(t){var e=pr(t),n=e==g?t.constructor:void 0,r=n?Po(n):"";if(r)switch(r){case bn:return A;case xn:return y;case On:return"[object Promise]";case wn:return _;case An:return O}return e});var co=Ot?Fa:os;function fo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||xt)}function ho(t){return t==t&&!Ua(t)}function po(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in yt(n)))}}function yo(t,e,n){return e=an(void 0===e?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=an(i.length-e,0),u=r(a);++o<a;)u[o]=i[e+o];o=-1;for(var s=r(e+1);++o<e;)s[o]=i[o];return s[e]=n(u),oe(t,this,s)}}function vo(t,e){return e.length<2?t:fr(t,Gr(e,0,-1))}function go(t,e){for(var n=t.length,r=un(e.length,n),i=gi(t);r--;){var o=e[r];t[r]=ao(o,n)?i[o]:void 0}return t}function mo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var _o=wo(Wr),bo=Ze||function(t,e){return Kt.setTimeout(t,e)},xo=wo(Ur);function Oo(t,e,n){var r=e+"";return xo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return ue(u,(function(n){var r="_."+n[0];e&n[1]&&!fe(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(J);return e?e[1].split(Q):[]}(r),n)))}function wo(t){var e=0,n=0;return function(){var r=sn(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Ao(t,e){var n=-1,r=t.length,i=r-1;for(e=void 0===e?r:e;++n<e;){var o=Lr(n,i),a=t[o];t[o]=t[n],t[n]=a}return t.length=e,t}var Eo=function(t){var e=wa(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(G,(function(t,n,r,i){e.push(r?i.replace(et,"$1"):n||t)})),e}));function Mo(t){if("string"==typeof t||Za(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Po(t){if(null!=t){try{return wt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function So(t){if(t instanceof Tn)return t.clone();var e=new jn(t.__wrapped__,t.__chain__);return e.__actions__=gi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ko=Br((function(t,e){return La(t)?Qn(t,or(e,1,La,!0)):[]})),Co=Br((function(t,e){var n=zo(e);return La(n)&&(n=void 0),La(t)?Qn(t,or(e,1,La,!0),$i(n,2)):[]})),jo=Br((function(t,e){var n=zo(e);return La(n)&&(n=void 0),La(t)?Qn(t,or(e,1,La,!0),void 0,n):[]}));function To(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),be(t,$i(e,3),i)}function No(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==n&&(i=ru(n),i=n<0?an(r+i,0):un(i,r-1)),be(t,$i(e,3),i,!0)}function Do(t){return(null==t?0:t.length)?or(t,1):[]}function Io(t){return t&&t.length?t[0]:void 0}var Lo=Br((function(t){var e=pe(t,oi);return e.length&&e[0]===t[0]?gr(e):[]})),Ro=Br((function(t){var e=zo(t),n=pe(t,oi);return e===zo(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?gr(n,$i(e,2)):[]})),Bo=Br((function(t){var e=zo(t),n=pe(t,oi);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?gr(n,void 0,e):[]}));function zo(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Fo=Br(Vo);function Vo(t,e){return t&&t.length&&e&&e.length?Dr(t,e):t}var Wo=qi((function(t,e){var n=null==t?0:t.length,r=Xn(t,e);return Ir(t,pe(e,(function(t){return ao(t,n)?+t:t})).sort(di)),r}));function Uo(t){return null==t?t:fn.call(t)}var qo=Br((function(t){return Jr(or(t,1,La,!0))})),Go=Br((function(t){var e=zo(t);return La(e)&&(e=void 0),Jr(or(t,1,La,!0),$i(e,2))})),Ho=Br((function(t){var e=zo(t);return e="function"==typeof e?e:void 0,Jr(or(t,1,La,!0),void 0,e)}));function Ko(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(La(t))return e=an(t.length,e),!0})),ke(e,(function(e){return pe(t,Ee(e))}))}function Xo(t,e){if(!t||!t.length)return[];var n=Ko(t);return null==e?n:pe(n,(function(t){return oe(e,void 0,t)}))}var Yo=Br((function(t,e){return La(t)?Qn(t,e):[]})),$o=Br((function(t){return ri(ce(t,La))})),Zo=Br((function(t){var e=zo(t);return La(e)&&(e=void 0),ri(ce(t,La),$i(e,2))})),Jo=Br((function(t){var e=zo(t);return e="function"==typeof e?e:void 0,ri(ce(t,La),void 0,e)})),Qo=Br(Ko);var ta=Br((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,Xo(t,n)}));function ea(t){var e=Sn(t);return e.__chain__=!0,e}function na(t,e){return e(t)}var ra=qi((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Xn(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Tn&&ao(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:na,args:[i],thisArg:void 0}),new jn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var ia=_i((function(t,e,n){At.call(t,n)?++t[n]:Kn(t,n,1)}));var oa=Mi(To),aa=Mi(No);function ua(t,e){return(Na(t)?ue:tr)(t,$i(e,3))}function sa(t,e){return(Na(t)?se:er)(t,$i(e,3))}var la=_i((function(t,e,n){At.call(t,n)?t[n].push(e):Kn(t,n,[e])}));var ca=Br((function(t,e,n){var i=-1,o="function"==typeof e,a=Ia(t)?r(t.length):[];return tr(t,(function(t){a[++i]=o?oe(e,t,n):mr(t,e,n)})),a})),fa=_i((function(t,e,n){Kn(t,n,e)}));function ha(t,e){return(Na(t)?pe:Pr)(t,$i(e,3))}var pa=_i((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var da=Br((function(t,e){if(null==t)return[];var n=e.length;return n>1&&uo(t,e[0],e[1])?e=[]:n>2&&uo(e[0],e[1],e[2])&&(e=[e[0]]),Tr(t,or(e,1),[])})),ya=$e||function(){return Kt.Date.now()};function va(t,e,n){return e=n?void 0:e,zi(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function ga(t,e){var n;if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var ma=Br((function(t,e,n){var r=1;if(n.length){var i=We(n,Yi(ma));r|=32}return zi(t,r,e,n,i)})),_a=Br((function(t,e,n){var r=3;if(n.length){var i=We(n,Yi(_a));r|=32}return zi(e,r,t,n,i)}));function ba(t,e,n){var r,i,a,u,s,l,c=0,f=!1,h=!1,p=!0;if("function"!=typeof t)throw new mt(o);function d(e){var n=r,o=i;return r=i=void 0,c=e,u=t.apply(o,n)}function y(t){return c=t,s=bo(g,e),f?d(t):u}function v(t){var n=t-l;return void 0===l||n>=e||n<0||h&&t-c>=a}function g(){var t=ya();if(v(t))return m(t);s=bo(g,function(t){var n=e-(t-l);return h?un(n,a-(t-c)):n}(t))}function m(t){return s=void 0,p&&r?d(t):(r=i=void 0,u)}function _(){var t=ya(),n=v(t);if(r=arguments,i=this,l=t,n){if(void 0===s)return y(l);if(h)return ci(s),s=bo(g,e),d(l)}return void 0===s&&(s=bo(g,e)),u}return e=ou(e)||0,Ua(n)&&(f=!!n.leading,a=(h="maxWait"in n)?an(ou(n.maxWait)||0,e):a,p="trailing"in n?!!n.trailing:p),_.cancel=function(){void 0!==s&&ci(s),c=0,r=l=i=s=void 0},_.flush=function(){return void 0===s?u:m(ya())},_}var xa=Br((function(t,e){return Jn(t,1,e)})),Oa=Br((function(t,e,n){return Jn(t,ou(e)||0,n)}));function wa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new mt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(wa.Cache||In),n}function Aa(t){if("function"!=typeof t)throw new mt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}wa.Cache=In;var Ea=si((function(t,e){var n=(e=1==e.length&&Na(e[0])?pe(e[0],Ce($i())):pe(or(e,1),Ce($i()))).length;return Br((function(r){for(var i=-1,o=un(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return oe(t,this,r)}))})),Ma=Br((function(t,e){return zi(t,32,void 0,e,We(e,Yi(Ma)))})),Pa=Br((function(t,e){return zi(t,64,void 0,e,We(e,Yi(Pa)))})),Sa=qi((function(t,e){return zi(t,256,void 0,void 0,void 0,e)}));function ka(t,e){return t===e||t!=t&&e!=e}var Ca=Di(dr),ja=Di((function(t,e){return t>=e})),Ta=_r(function(){return arguments}())?_r:function(t){return qa(t)&&At.call(t,"callee")&&!Xt.call(t,"callee")},Na=r.isArray,Da=Qt?Ce(Qt):function(t){return qa(t)&&pr(t)==w};function Ia(t){return null!=t&&Wa(t.length)&&!Fa(t)}function La(t){return qa(t)&&Ia(t)}var Ra=en||os,Ba=te?Ce(te):function(t){return qa(t)&&pr(t)==f};function za(t){if(!qa(t))return!1;var e=pr(t);return e==h||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Ka(t)}function Fa(t){if(!Ua(t))return!1;var e=pr(t);return e==p||e==d||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Va(t){return"number"==typeof t&&t==ru(t)}function Wa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ua(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function qa(t){return null!=t&&"object"==typeof t}var Ga=ee?Ce(ee):function(t){return qa(t)&&no(t)==y};function Ha(t){return"number"==typeof t||qa(t)&&pr(t)==v}function Ka(t){if(!qa(t)||pr(t)!=g)return!1;var e=Gt(t);if(null===e)return!0;var n=At.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&wt.call(n)==St}var Xa=ne?Ce(ne):function(t){return qa(t)&&pr(t)==m};var Ya=re?Ce(re):function(t){return qa(t)&&no(t)==_};function $a(t){return"string"==typeof t||!Na(t)&&qa(t)&&pr(t)==b}function Za(t){return"symbol"==typeof t||qa(t)&&pr(t)==x}var Ja=ie?Ce(ie):function(t){return qa(t)&&Wa(t.length)&&!!Ft[pr(t)]};var Qa=Di(Mr),tu=Di((function(t,e){return t<=e}));function eu(t){if(!t)return[];if(Ia(t))return $a(t)?He(t):gi(t);if(Jt&&t[Jt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Jt]());var e=no(t);return(e==y?Fe:e==_?Ue:ku)(t)}function nu(t){return t?(t=ou(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ru(t){var e=nu(t),n=e%1;return e==e?n?e-n:e:0}function iu(t){return t?Yn(ru(t),0,4294967295):0}function ou(t){if("number"==typeof t)return t;if(Za(t))return NaN;if(Ua(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ua(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(X,"");var n=ot.test(t);return n||ut.test(t)?qt(t.slice(2),n?2:8):it.test(t)?NaN:+t}function au(t){return mi(t,xu(t))}function uu(t){return null==t?"":Zr(t)}var su=bi((function(t,e){if(fo(e)||Ia(e))mi(e,bu(e),t);else for(var n in e)At.call(e,n)&&Un(t,n,e[n])})),lu=bi((function(t,e){mi(e,xu(e),t)})),cu=bi((function(t,e,n,r){mi(e,xu(e),t,r)})),fu=bi((function(t,e,n,r){mi(e,bu(e),t,r)})),hu=qi(Xn);var pu=Br((function(t,e){t=yt(t);var n=-1,r=e.length,i=r>2?e[2]:void 0;for(i&&uo(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],a=xu(o),u=-1,s=a.length;++u<s;){var l=a[u],c=t[l];(void 0===c||ka(c,xt[l])&&!At.call(t,l))&&(t[l]=o[l])}return t})),du=Br((function(t){return t.push(void 0,Vi),oe(wu,void 0,t)}));function yu(t,e,n){var r=null==t?void 0:fr(t,e);return void 0===r?n:r}function vu(t,e){return null!=t&&ro(t,e,vr)}var gu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),t[e]=n}),Uu(Hu)),mu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),At.call(t,e)?t[e].push(n):t[e]=[n]}),$i),_u=Br(mr);function bu(t){return Ia(t)?Bn(t):Ar(t)}function xu(t){return Ia(t)?Bn(t,!0):Er(t)}var Ou=bi((function(t,e,n){Cr(t,e,n)})),wu=bi((function(t,e,n,r){Cr(t,e,n,r)})),Au=qi((function(t,e){var n={};if(null==t)return n;var r=!1;e=pe(e,(function(e){return e=ui(e,t),r||(r=e.length>1),e})),mi(t,Hi(t),n),r&&(n=$n(n,7,Wi));for(var i=e.length;i--;)Qr(n,e[i]);return n}));var Eu=qi((function(t,e){return null==t?{}:function(t,e){return Nr(t,e,(function(e,n){return vu(t,n)}))}(t,e)}));function Mu(t,e){if(null==t)return{};var n=pe(Hi(t),(function(t){return[t]}));return e=$i(e),Nr(t,n,(function(t,n){return e(t,n[0])}))}var Pu=Bi(bu),Su=Bi(xu);function ku(t){return null==t?[]:je(t,bu(t))}var Cu=Ai((function(t,e,n){return e=e.toLowerCase(),t+(n?ju(e):e)}));function ju(t){return zu(uu(t).toLowerCase())}function Tu(t){return(t=uu(t))&&t.replace(lt,Le).replace(Nt,"")}var Nu=Ai((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Du=Ai((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Iu=wi("toLowerCase");var Lu=Ai((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ru=Ai((function(t,e,n){return t+(n?" ":"")+zu(e)}));var Bu=Ai((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),zu=wi("toUpperCase");function Fu(t,e,n){return t=uu(t),void 0===(e=n?void 0:e)?function(t){return Rt.test(t)}(t)?function(t){return t.match(It)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Vu=Br((function(t,e){try{return oe(t,void 0,e)}catch(t){return za(t)?t:new ht(t)}})),Wu=qi((function(t,e){return ue(e,(function(e){e=Mo(e),Kn(t,e,ma(t[e],t))})),t}));function Uu(t){return function(){return t}}var qu=Pi(),Gu=Pi(!0);function Hu(t){return t}function Ku(t){return wr("function"==typeof t?t:$n(t,1))}var Xu=Br((function(t,e){return function(n){return mr(n,t,e)}})),Yu=Br((function(t,e){return function(n){return mr(t,n,e)}}));function $u(t,e,n){var r=bu(e),i=cr(e,r);null!=n||Ua(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=cr(e,bu(e)));var o=!(Ua(n)&&"chain"in n&&!n.chain),a=Fa(t);return ue(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=gi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,de([this.value()],arguments))})})),t}function Zu(){}var Ju=ji(pe),Qu=ji(le),ts=ji(ge);function es(t){return so(t)?Ee(Mo(t)):function(t){return function(e){return fr(e,t)}}(t)}var ns=Ni(),rs=Ni(!0);function is(){return[]}function os(){return!1}var as=Ci((function(t,e){return t+e}),0),us=Li("ceil"),ss=Ci((function(t,e){return t/e}),1),ls=Li("floor");var cs,fs=Ci((function(t,e){return t*e}),1),hs=Li("round"),ps=Ci((function(t,e){return t-e}),0);return Sn.after=function(t,e){if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){if(--t<1)return e.apply(this,arguments)}},Sn.ary=va,Sn.assign=su,Sn.assignIn=lu,Sn.assignInWith=cu,Sn.assignWith=fu,Sn.at=hu,Sn.before=ga,Sn.bind=ma,Sn.bindAll=Wu,Sn.bindKey=_a,Sn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Na(t)?t:[t]},Sn.chain=ea,Sn.chunk=function(t,e,n){e=(n?uo(t,e,n):void 0===e)?1:an(ru(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,a=0,u=r(Je(i/e));o<i;)u[a++]=Gr(t,o,o+=e);return u},Sn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Sn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return de(Na(n)?gi(n):[n],or(e,1))},Sn.cond=function(t){var e=null==t?0:t.length,n=$i();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new mt(o);return[n(t[0]),t[1]]})):[],Br((function(n){for(var r=-1;++r<e;){var i=t[r];if(oe(i[0],this,n))return oe(i[1],this,n)}}))},Sn.conforms=function(t){return function(t){var e=bu(t);return function(n){return Zn(n,t,e)}}($n(t,1))},Sn.constant=Uu,Sn.countBy=ia,Sn.create=function(t,e){var n=kn(t);return null==e?n:Hn(n,e)},Sn.curry=function t(e,n,r){var i=zi(e,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.curryRight=function t(e,n,r){var i=zi(e,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.debounce=ba,Sn.defaults=pu,Sn.defaultsDeep=du,Sn.defer=xa,Sn.delay=Oa,Sn.difference=ko,Sn.differenceBy=Co,Sn.differenceWith=jo,Sn.drop=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=n||void 0===e?1:ru(e))<0?0:e,r):[]},Sn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,0,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e):[]},Sn.dropRightWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!0,!0):[]},Sn.dropWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!0):[]},Sn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&uo(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=ru(n))<0&&(n=-n>i?0:i+n),(r=void 0===r||r>i?i:ru(r))<0&&(r+=i),r=n>r?0:iu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Sn.filter=function(t,e){return(Na(t)?ce:ir)(t,$i(e,3))},Sn.flatMap=function(t,e){return or(ha(t,e),1)},Sn.flatMapDeep=function(t,e){return or(ha(t,e),1/0)},Sn.flatMapDepth=function(t,e,n){return n=void 0===n?1:ru(n),or(ha(t,e),n)},Sn.flatten=Do,Sn.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Sn.flattenDepth=function(t,e){return(null==t?0:t.length)?or(t,e=void 0===e?1:ru(e)):[]},Sn.flip=function(t){return zi(t,512)},Sn.flow=qu,Sn.flowRight=Gu,Sn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Sn.functions=function(t){return null==t?[]:cr(t,bu(t))},Sn.functionsIn=function(t){return null==t?[]:cr(t,xu(t))},Sn.groupBy=la,Sn.initial=function(t){return(null==t?0:t.length)?Gr(t,0,-1):[]},Sn.intersection=Lo,Sn.intersectionBy=Ro,Sn.intersectionWith=Bo,Sn.invert=gu,Sn.invertBy=mu,Sn.invokeMap=ca,Sn.iteratee=Ku,Sn.keyBy=fa,Sn.keys=bu,Sn.keysIn=xu,Sn.map=ha,Sn.mapKeys=function(t,e){var n={};return e=$i(e,3),sr(t,(function(t,r,i){Kn(n,e(t,r,i),t)})),n},Sn.mapValues=function(t,e){var n={};return e=$i(e,3),sr(t,(function(t,r,i){Kn(n,r,e(t,r,i))})),n},Sn.matches=function(t){return Sr($n(t,1))},Sn.matchesProperty=function(t,e){return kr(t,$n(e,1))},Sn.memoize=wa,Sn.merge=Ou,Sn.mergeWith=wu,Sn.method=Xu,Sn.methodOf=Yu,Sn.mixin=$u,Sn.negate=Aa,Sn.nthArg=function(t){return t=ru(t),Br((function(e){return jr(e,t)}))},Sn.omit=Au,Sn.omitBy=function(t,e){return Mu(t,Aa($i(e)))},Sn.once=function(t){return ga(2,t)},Sn.orderBy=function(t,e,n,r){return null==t?[]:(Na(e)||(e=null==e?[]:[e]),Na(n=r?void 0:n)||(n=null==n?[]:[n]),Tr(t,e,n))},Sn.over=Ju,Sn.overArgs=Ea,Sn.overEvery=Qu,Sn.overSome=ts,Sn.partial=Ma,Sn.partialRight=Pa,Sn.partition=pa,Sn.pick=Eu,Sn.pickBy=Mu,Sn.property=es,Sn.propertyOf=function(t){return function(e){return null==t?void 0:fr(t,e)}},Sn.pull=Fo,Sn.pullAll=Vo,Sn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Dr(t,e,$i(n,2)):t},Sn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Dr(t,e,void 0,n):t},Sn.pullAt=Wo,Sn.range=ns,Sn.rangeRight=rs,Sn.rearg=Sa,Sn.reject=function(t,e){return(Na(t)?ce:ir)(t,Aa($i(e,3)))},Sn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=$i(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Ir(t,i),n},Sn.rest=function(t,e){if("function"!=typeof t)throw new mt(o);return Br(t,e=void 0===e?e:ru(e))},Sn.reverse=Uo,Sn.sampleSize=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),(Na(t)?Fn:Fr)(t,e)},Sn.set=function(t,e,n){return null==t?t:Vr(t,e,n)},Sn.setWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:Vr(t,e,n,r)},Sn.shuffle=function(t){return(Na(t)?Vn:qr)(t)},Sn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&uo(t,e,n)?(e=0,n=r):(e=null==e?0:ru(e),n=void 0===n?r:ru(n)),Gr(t,e,n)):[]},Sn.sortBy=da,Sn.sortedUniq=function(t){return t&&t.length?Yr(t):[]},Sn.sortedUniqBy=function(t,e){return t&&t.length?Yr(t,$i(e,2)):[]},Sn.split=function(t,e,n){return n&&"number"!=typeof n&&uo(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=uu(t))&&("string"==typeof e||null!=e&&!Xa(e))&&!(e=Zr(e))&&ze(t)?li(He(t),0,n):t.split(e,n):[]},Sn.spread=function(t,e){if("function"!=typeof t)throw new mt(o);return e=null==e?0:an(ru(e),0),Br((function(n){var r=n[e],i=li(n,0,e);return r&&de(i,r),oe(t,this,i)}))},Sn.tail=function(t){var e=null==t?0:t.length;return e?Gr(t,1,e):[]},Sn.take=function(t,e,n){return t&&t.length?Gr(t,0,(e=n||void 0===e?1:ru(e))<0?0:e):[]},Sn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e,r):[]},Sn.takeRightWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!1,!0):[]},Sn.takeWhile=function(t,e){return t&&t.length?ei(t,$i(e,3)):[]},Sn.tap=function(t,e){return e(t),t},Sn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new mt(o);return Ua(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ba(t,e,{leading:r,maxWait:e,trailing:i})},Sn.thru=na,Sn.toArray=eu,Sn.toPairs=Pu,Sn.toPairsIn=Su,Sn.toPath=function(t){return Na(t)?pe(t,Mo):Za(t)?[t]:gi(Eo(uu(t)))},Sn.toPlainObject=au,Sn.transform=function(t,e,n){var r=Na(t),i=r||Ra(t)||Ja(t);if(e=$i(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Ua(t)&&Fa(o)?kn(Gt(t)):{}}return(i?ue:sr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Sn.unary=function(t){return va(t,1)},Sn.union=qo,Sn.unionBy=Go,Sn.unionWith=Ho,Sn.uniq=function(t){return t&&t.length?Jr(t):[]},Sn.uniqBy=function(t,e){return t&&t.length?Jr(t,$i(e,2)):[]},Sn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Jr(t,void 0,e):[]},Sn.unset=function(t,e){return null==t||Qr(t,e)},Sn.unzip=Ko,Sn.unzipWith=Xo,Sn.update=function(t,e,n){return null==t?t:ti(t,e,ai(n))},Sn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,e,ai(n),r)},Sn.values=ku,Sn.valuesIn=function(t){return null==t?[]:je(t,xu(t))},Sn.without=Yo,Sn.words=Fu,Sn.wrap=function(t,e){return Ma(ai(e),t)},Sn.xor=$o,Sn.xorBy=Zo,Sn.xorWith=Jo,Sn.zip=Qo,Sn.zipObject=function(t,e){return ii(t||[],e||[],Un)},Sn.zipObjectDeep=function(t,e){return ii(t||[],e||[],Vr)},Sn.zipWith=ta,Sn.entries=Pu,Sn.entriesIn=Su,Sn.extend=lu,Sn.extendWith=cu,$u(Sn,Sn),Sn.add=as,Sn.attempt=Vu,Sn.camelCase=Cu,Sn.capitalize=ju,Sn.ceil=us,Sn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=ou(n))==n?n:0),void 0!==e&&(e=(e=ou(e))==e?e:0),Yn(ou(t),e,n)},Sn.clone=function(t){return $n(t,4)},Sn.cloneDeep=function(t){return $n(t,5)},Sn.cloneDeepWith=function(t,e){return $n(t,5,e="function"==typeof e?e:void 0)},Sn.cloneWith=function(t,e){return $n(t,4,e="function"==typeof e?e:void 0)},Sn.conformsTo=function(t,e){return null==e||Zn(t,e,bu(e))},Sn.deburr=Tu,Sn.defaultTo=function(t,e){return null==t||t!=t?e:t},Sn.divide=ss,Sn.endsWith=function(t,e,n){t=uu(t),e=Zr(e);var r=t.length,i=n=void 0===n?r:Yn(ru(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Sn.eq=ka,Sn.escape=function(t){return(t=uu(t))&&z.test(t)?t.replace(R,Re):t},Sn.escapeRegExp=function(t){return(t=uu(t))&&K.test(t)?t.replace(H,"\\$&"):t},Sn.every=function(t,e,n){var r=Na(t)?le:nr;return n&&uo(t,e,n)&&(e=void 0),r(t,$i(e,3))},Sn.find=oa,Sn.findIndex=To,Sn.findKey=function(t,e){return _e(t,$i(e,3),sr)},Sn.findLast=aa,Sn.findLastIndex=No,Sn.findLastKey=function(t,e){return _e(t,$i(e,3),lr)},Sn.floor=ls,Sn.forEach=ua,Sn.forEachRight=sa,Sn.forIn=function(t,e){return null==t?t:ar(t,$i(e,3),xu)},Sn.forInRight=function(t,e){return null==t?t:ur(t,$i(e,3),xu)},Sn.forOwn=function(t,e){return t&&sr(t,$i(e,3))},Sn.forOwnRight=function(t,e){return t&&lr(t,$i(e,3))},Sn.get=yu,Sn.gt=Ca,Sn.gte=ja,Sn.has=function(t,e){return null!=t&&ro(t,e,yr)},Sn.hasIn=vu,Sn.head=Io,Sn.identity=Hu,Sn.includes=function(t,e,n,r){t=Ia(t)?t:ku(t),n=n&&!r?ru(n):0;var i=t.length;return n<0&&(n=an(i+n,0)),$a(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&xe(t,e,n)>-1},Sn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),xe(t,e,i)},Sn.inRange=function(t,e,n){return e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n){return t>=un(e,n)&&t<an(e,n)}(t=ou(t),e,n)},Sn.invoke=_u,Sn.isArguments=Ta,Sn.isArray=Na,Sn.isArrayBuffer=Da,Sn.isArrayLike=Ia,Sn.isArrayLikeObject=La,Sn.isBoolean=function(t){return!0===t||!1===t||qa(t)&&pr(t)==c},Sn.isBuffer=Ra,Sn.isDate=Ba,Sn.isElement=function(t){return qa(t)&&1===t.nodeType&&!Ka(t)},Sn.isEmpty=function(t){if(null==t)return!0;if(Ia(t)&&(Na(t)||"string"==typeof t||"function"==typeof t.splice||Ra(t)||Ja(t)||Ta(t)))return!t.length;var e=no(t);if(e==y||e==_)return!t.size;if(fo(t))return!Ar(t).length;for(var n in t)if(At.call(t,n))return!1;return!0},Sn.isEqual=function(t,e){return br(t,e)},Sn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===r?br(t,e,void 0,n):!!r},Sn.isError=za,Sn.isFinite=function(t){return"number"==typeof t&&nn(t)},Sn.isFunction=Fa,Sn.isInteger=Va,Sn.isLength=Wa,Sn.isMap=Ga,Sn.isMatch=function(t,e){return t===e||xr(t,e,Ji(e))},Sn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,xr(t,e,Ji(e),n)},Sn.isNaN=function(t){return Ha(t)&&t!=+t},Sn.isNative=function(t){if(co(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Or(t)},Sn.isNil=function(t){return null==t},Sn.isNull=function(t){return null===t},Sn.isNumber=Ha,Sn.isObject=Ua,Sn.isObjectLike=qa,Sn.isPlainObject=Ka,Sn.isRegExp=Xa,Sn.isSafeInteger=function(t){return Va(t)&&t>=-9007199254740991&&t<=9007199254740991},Sn.isSet=Ya,Sn.isString=$a,Sn.isSymbol=Za,Sn.isTypedArray=Ja,Sn.isUndefined=function(t){return void 0===t},Sn.isWeakMap=function(t){return qa(t)&&no(t)==O},Sn.isWeakSet=function(t){return qa(t)&&"[object WeakSet]"==pr(t)},Sn.join=function(t,e){return null==t?"":rn.call(t,e)},Sn.kebabCase=Nu,Sn.last=zo,Sn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==n&&(i=(i=ru(n))<0?an(r+i,0):un(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):be(t,we,i,!0)},Sn.lowerCase=Du,Sn.lowerFirst=Iu,Sn.lt=Qa,Sn.lte=tu,Sn.max=function(t){return t&&t.length?rr(t,Hu,dr):void 0},Sn.maxBy=function(t,e){return t&&t.length?rr(t,$i(e,2),dr):void 0},Sn.mean=function(t){return Ae(t,Hu)},Sn.meanBy=function(t,e){return Ae(t,$i(e,2))},Sn.min=function(t){return t&&t.length?rr(t,Hu,Mr):void 0},Sn.minBy=function(t,e){return t&&t.length?rr(t,$i(e,2),Mr):void 0},Sn.stubArray=is,Sn.stubFalse=os,Sn.stubObject=function(){return{}},Sn.stubString=function(){return""},Sn.stubTrue=function(){return!0},Sn.multiply=fs,Sn.nth=function(t,e){return t&&t.length?jr(t,ru(e)):void 0},Sn.noConflict=function(){return Kt._===this&&(Kt._=kt),this},Sn.noop=Zu,Sn.now=ya,Sn.pad=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Ti(Qe(i),n)+t+Ti(Je(i),n)},Sn.padEnd=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;return e&&r<e?t+Ti(e-r,n):t},Sn.padStart=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;return e&&r<e?Ti(e-r,n)+t:t},Sn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),ln(uu(t).replace(Y,""),e||0)},Sn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&uo(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=nu(t),void 0===e?(e=t,t=0):e=nu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=cn();return un(t+i*(e-t+Ut("1e-"+((i+"").length-1))),e)}return Lr(t,e)},Sn.reduce=function(t,e,n){var r=Na(t)?ye:Pe,i=arguments.length<3;return r(t,$i(e,4),n,i,tr)},Sn.reduceRight=function(t,e,n){var r=Na(t)?ve:Pe,i=arguments.length<3;return r(t,$i(e,4),n,i,er)},Sn.repeat=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),Rr(uu(t),e)},Sn.replace=function(){var t=arguments,e=uu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Sn.result=function(t,e,n){var r=-1,i=(e=ui(e,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[Mo(e[r])];void 0===o&&(r=i,o=n),t=Fa(o)?o.call(t):o}return t},Sn.round=hs,Sn.runInContext=t,Sn.sample=function(t){return(Na(t)?zn:zr)(t)},Sn.size=function(t){if(null==t)return 0;if(Ia(t))return $a(t)?Ge(t):t.length;var e=no(t);return e==y||e==_?t.size:Ar(t).length},Sn.snakeCase=Lu,Sn.some=function(t,e,n){var r=Na(t)?ge:Hr;return n&&uo(t,e,n)&&(e=void 0),r(t,$i(e,3))},Sn.sortedIndex=function(t,e){return Kr(t,e)},Sn.sortedIndexBy=function(t,e,n){return Xr(t,e,$i(n,2))},Sn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Kr(t,e);if(r<n&&ka(t[r],e))return r}return-1},Sn.sortedLastIndex=function(t,e){return Kr(t,e,!0)},Sn.sortedLastIndexBy=function(t,e,n){return Xr(t,e,$i(n,2),!0)},Sn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Kr(t,e,!0)-1;if(ka(t[n],e))return n}return-1},Sn.startCase=Ru,Sn.startsWith=function(t,e,n){return t=uu(t),n=null==n?0:Yn(ru(n),0,t.length),e=Zr(e),t.slice(n,n+e.length)==e},Sn.subtract=ps,Sn.sum=function(t){return t&&t.length?Se(t,Hu):0},Sn.sumBy=function(t,e){return t&&t.length?Se(t,$i(e,2)):0},Sn.template=function(t,e,n){var r=Sn.templateSettings;n&&uo(t,e,n)&&(e=void 0),t=uu(t),e=cu({},e,r,Fi);var i,o,a=cu({},e.imports,r.imports,Fi),u=bu(a),s=je(a,u),l=0,c=e.interpolate||ct,f="__p += '",h=vt((e.escape||ct).source+"|"+c.source+"|"+(c===W?nt:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),p="//# sourceURL="+(At.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++zt+"]")+"\n";t.replace(h,(function(e,n,r,a,u,s){return r||(r=a),f+=t.slice(l,s).replace(ft,Be),n&&(i=!0,f+="' +\n__e("+n+") +\n'"),u&&(o=!0,f+="';\n"+u+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e})),f+="';\n";var d=At.call(e,"variable")&&e.variable;d||(f="with (obj) {\n"+f+"\n}\n"),f=(o?f.replace(N,""):f).replace(D,"$1").replace(I,"$1;"),f="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Vu((function(){return pt(u,p+"return "+f).apply(void 0,s)}));if(y.source=f,za(y))throw y;return y},Sn.times=function(t,e){if((t=ru(t))<1||t>9007199254740991)return[];var n=4294967295,r=un(t,4294967295);t-=4294967295;for(var i=ke(r,e=$i(e));++n<t;)e(n);return i},Sn.toFinite=nu,Sn.toInteger=ru,Sn.toLength=iu,Sn.toLower=function(t){return uu(t).toLowerCase()},Sn.toNumber=ou,Sn.toSafeInteger=function(t){return t?Yn(ru(t),-9007199254740991,9007199254740991):0===t?t:0},Sn.toString=uu,Sn.toUpper=function(t){return uu(t).toUpperCase()},Sn.trim=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(X,"");if(!t||!(e=Zr(e)))return t;var r=He(t),i=He(e);return li(r,Ne(r,i),De(r,i)+1).join("")},Sn.trimEnd=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace($,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return li(r,0,De(r,He(e))+1).join("")},Sn.trimStart=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(Y,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return li(r,Ne(r,He(e))).join("")},Sn.truncate=function(t,e){var n=30,r="...";if(Ua(e)){var i="separator"in e?e.separator:i;n="length"in e?ru(e.length):n,r="omission"in e?Zr(e.omission):r}var o=(t=uu(t)).length;if(ze(t)){var a=He(t);o=a.length}if(n>=o)return t;var u=n-Ge(r);if(u<1)return r;var s=a?li(a,0,u).join(""):t.slice(0,u);if(void 0===i)return s+r;if(a&&(u+=s.length-u),Xa(i)){if(t.slice(u).search(i)){var l,c=s;for(i.global||(i=vt(i.source,uu(rt.exec(i))+"g")),i.lastIndex=0;l=i.exec(c);)var f=l.index;s=s.slice(0,void 0===f?u:f)}}else if(t.indexOf(Zr(i),u)!=u){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+r},Sn.unescape=function(t){return(t=uu(t))&&B.test(t)?t.replace(L,Ke):t},Sn.uniqueId=function(t){var e=++Et;return uu(t)+e},Sn.upperCase=Bu,Sn.upperFirst=zu,Sn.each=ua,Sn.eachRight=sa,Sn.first=Io,$u(Sn,(cs={},sr(Sn,(function(t,e){At.call(Sn.prototype,e)||(cs[e]=t)})),cs),{chain:!1}),Sn.VERSION="4.17.20",ue(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Sn[t].placeholder=Sn})),ue(["drop","take"],(function(t,e){Tn.prototype[t]=function(n){n=void 0===n?1:an(ru(n),0);var r=this.__filtered__&&!e?new Tn(this):this.clone();return r.__filtered__?r.__takeCount__=un(n,r.__takeCount__):r.__views__.push({size:un(n,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},Tn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ue(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Tn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:$i(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),ue(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Tn.prototype[t]=function(){return this[n](1).value()[0]}})),ue(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Tn.prototype[t]=function(){return this.__filtered__?new Tn(this):this[n](1)}})),Tn.prototype.compact=function(){return this.filter(Hu)},Tn.prototype.find=function(t){return this.filter(t).head()},Tn.prototype.findLast=function(t){return this.reverse().find(t)},Tn.prototype.invokeMap=Br((function(t,e){return"function"==typeof t?new Tn(this):this.map((function(n){return mr(n,t,e)}))})),Tn.prototype.reject=function(t){return this.filter(Aa($i(t)))},Tn.prototype.slice=function(t,e){t=ru(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Tn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=ru(e))<0?n.dropRight(-e):n.take(e-t)),n)},Tn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Tn.prototype.toArray=function(){return this.take(4294967295)},sr(Tn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Sn[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(Sn.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof Tn,s=a[0],l=u||Na(e),c=function(t){var e=i.apply(Sn,de([t],a));return r&&f?e[0]:e};l&&n&&"function"==typeof s&&1!=s.length&&(u=l=!1);var f=this.__chain__,h=!!this.__actions__.length,p=o&&!f,d=u&&!h;if(!o&&l){e=d?e:new Tn(this);var y=t.apply(e,a);return y.__actions__.push({func:na,args:[c],thisArg:void 0}),new jn(y,f)}return p&&d?t.apply(this,a):(y=this.thru(c),p?r?y.value()[0]:y.value():y)})})),ue(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Sn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Na(i)?i:[],t)}return this[n]((function(n){return e.apply(Na(n)?n:[],t)}))}})),sr(Tn.prototype,(function(t,e){var n=Sn[e];if(n){var r=n.name+"";At.call(_n,r)||(_n[r]=[]),_n[r].push({name:e,func:n})}})),_n[Si(void 0,2).name]=[{name:"wrapper",func:void 0}],Tn.prototype.clone=function(){var t=new Tn(this.__wrapped__);return t.__actions__=gi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=gi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=gi(this.__views__),t},Tn.prototype.reverse=function(){if(this.__filtered__){var t=new Tn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Tn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Na(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=un(e,t+a);break;case"takeRight":t=an(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,s=u-a,l=r?u:a-1,c=this.__iteratees__,f=c.length,h=0,p=un(s,this.__takeCount__);if(!n||!r&&i==s&&p==s)return ni(t,this.__actions__);var d=[];t:for(;s--&&h<p;){for(var y=-1,v=t[l+=e];++y<f;){var g=c[y],m=g.iteratee,_=g.type,b=m(v);if(2==_)v=b;else if(!b){if(1==_)continue t;break t}}d[h++]=v}return d},Sn.prototype.at=ra,Sn.prototype.chain=function(){return ea(this)},Sn.prototype.commit=function(){return new jn(this.value(),this.__chain__)},Sn.prototype.next=function(){void 0===this.__values__&&(this.__values__=eu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Sn.prototype.plant=function(t){for(var e,n=this;n instanceof Cn;){var r=So(n);r.__index__=0,r.__values__=void 0,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Sn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Tn){var e=t;return this.__actions__.length&&(e=new Tn(this)),(e=e.reverse()).__actions__.push({func:na,args:[Uo],thisArg:void 0}),new jn(e,this.__chain__)}return this.thru(Uo)},Sn.prototype.toJSON=Sn.prototype.valueOf=Sn.prototype.value=function(){return ni(this.__wrapped__,this.__actions__)},Sn.prototype.first=Sn.prototype.head,Jt&&(Sn.prototype[Jt]=function(){return this}),Sn}();Kt._=Xe,void 0===(i=function(){return Xe}.call(e,n,e,r))||(r.exports=i)}).call(this)}).call(this,n(34),n(54)(t))},function(t,e,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var o=typeof r;if("string"===o||"number"===o)t.push(r);else if(Array.isArray(r)&&r.length){var a=i.apply(null,r);a&&t.push(a)}else if("object"===o)for(var u in r)n.call(r,u)&&r[u]&&t.push(u)}}return t.join(" ")}t.exports?(i.default=i,t.exports=i):void 0===(r=function(){return i}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.getLinearRegression=e.findEntryInArray=e.interpolateNumber=e.hasDuplicate=e.getAnyElementOfObject=e.getPercentValue=e.uniqueId=e.isNumOrStr=e.isNumber=e.isPercent=e.mathSign=void 0;var i=r(n(3));e.mathSign=function(t){return 0===t?0:t>0?1:-1};e.isPercent=function(t){return i.default.isString(t)&&t.indexOf("%")===t.length-1};e.isNumber=function(t){return i.default.isNumber(t)&&!i.default.isNaN(t)};e.isNumOrStr=function(t){return e.isNumber(t)||i.default.isString(t)};var o=0;e.uniqueId=function(t){return""+(t||"")+ ++o};e.getPercentValue=function(t,n,r,o){if(void 0===r&&(r=0),void 0===o&&(o=!1),!e.isNumber(t)&&!i.default.isString(t))return r;var a;if(e.isPercent(t)){var u=t.indexOf("%");a=n*parseFloat(t.slice(0,u))/100}else a=+t;return i.default.isNaN(a)&&(a=r),o&&a>n&&(a=n),a};e.getAnyElementOfObject=function(t){if(!t)return null;var e=Object.keys(t);return e&&e.length?t[e[0]]:null};e.hasDuplicate=function(t){if(!i.default.isArray(t))return!1;for(var e=t.length,n={},r=0;r<e;r++){if(n[t[r]])return!0;n[t[r]]=!0}return!1};e.interpolateNumber=function(t,n){return e.isNumber(t)&&e.isNumber(n)?function(e){return t+e*(n-t)}:function(){return n}},e.findEntryInArray=function(t,e,n){return t&&t.length?t.find((function(t){return t&&("function"==typeof e?e(t):i.default.get(t,e))===n})):null};e.getLinearRegression=function(t){if(!t||!t.length)return null;for(var e=t.length,n=0,r=0,i=0,o=0,a=1/0,u=-1/0,s=0;s<e;s++)n+=t[s].cx,r+=t[s].cy,i+=t[s].cx*t[s].cy,o+=t[s].cx*t[s].cx,a=Math.min(a,t[s].cx),u=Math.max(u,t[s].cx);var l=e*o!=n*n?(e*i-n*r)/(e*o-n*n):0;return{xmin:a,xmax:u,a:l,b:(r-l*n)/e}}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Layer=void 0;var a=o(n(0)),u=o(n(4)),s=n(2);e.Layer=function(t){var e=t.children,n=t.className,o=i(t,["children","className"]),l=u.default("recharts-layer",n);return a.default.createElement("g",r({className:l},s.filterProps(o,!0)),e)}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseDomainOfCategoryAxis=e.getBandSizeOfAxis=e.parseSpecifiedDomain=e.MAX_VALUE_REG=e.MIN_VALUE_REG=e.getDomainOfStackGroups=e.getStackedDataOfItem=e.getBaseValueOfBar=e.getCateCoordinateOfBar=e.getCateCoordinateOfLine=e.getTicksOfScale=e.calculateDomainOfTicks=e.getStackGroupsByAxisId=e.getStackedData=e.offsetPositive=e.offsetSign=e.truncateByDomain=e.findPositionOfBar=e.checkDomainOfScale=e.parseScale=e.combineEventHandlers=e.getTicksOfAxis=e.getCoordinatesOfGrid=e.isCategoricalAxis=e.getDomainOfItemsWithSameAxis=e.parseErrorBarsOfAxis=e.getDomainOfErrorBars=e.appendOffsetOfLegend=e.getBarPosition=e.getBarSizeList=e.getLegendProps=e.getMainColorOfGraphicItem=e.calculateActiveTickIndex=e.getDomainOfDataByKey=e.getValueByDataKey=void 0;var l=s(n(3)),c=n(242),f=a(n(111)),h=n(70),p=n(5),d=n(55),y=n(9);function v(t,e,n){return l.default.isNil(t)||l.default.isNil(e)?n:p.isNumOrStr(e)?l.default.get(t,e,n):l.default.isFunction(e)?e(t):n}function g(t,e,n,r){var i=l.default.flatMap(t,(function(t){return v(t,e)}));if("number"===n){var o=i.filter((function(t){return p.isNumber(t)||parseFloat(t)}));return o.length?[l.default.min(o),l.default.max(o)]:[1/0,-1/0]}return(r?i.filter((function(t){return!l.default.isNil(t)})):i).map((function(t){return p.isNumOrStr(t)||t instanceof Date?t:""}))}e.getValueByDataKey=v,e.getDomainOfDataByKey=g;e.calculateActiveTickIndex=function(t,e,n,r){var i;void 0===e&&(e=[]);var o=-1,a=null!==(i=null==e?void 0:e.length)&&void 0!==i?i:0;if(a>1){if(r&&"angleAxis"===r.axisType&&Math.abs(Math.abs(r.range[1]-r.range[0])-360)<=1e-6)for(var u=r.range,s=0;s<a;s++){var l=s>0?n[s-1].coordinate:n[a-1].coordinate,c=n[s].coordinate,f=s>=a-1?n[0].coordinate:n[s+1].coordinate,h=void 0;if(p.mathSign(c-l)!==p.mathSign(f-c)){var d=[];if(p.mathSign(f-c)===p.mathSign(u[1]-u[0])){h=f;var y=c+u[1]-u[0];d[0]=Math.min(y,(y+l)/2),d[1]=Math.max(y,(y+l)/2)}else{h=l;var v=f+u[1]-u[0];d[0]=Math.min(c,(v+c)/2),d[1]=Math.max(c,(v+c)/2)}var g=[Math.min(c,(h+c)/2),Math.max(c,(h+c)/2)];if(t>g[0]&&t<=g[1]||t>=d[0]&&t<=d[1]){o=n[s].index;break}}else{var m=Math.min(l,f),_=Math.max(l,f);if(t>(m+c)/2&&t<=(_+c)/2){o=n[s].index;break}}}else for(s=0;s<a;s++)if(0===s&&t<=(e[s].coordinate+e[s+1].coordinate)/2||s>0&&s<a-1&&t>(e[s].coordinate+e[s-1].coordinate)/2&&t<=(e[s].coordinate+e[s+1].coordinate)/2||s===a-1&&t>(e[s].coordinate+e[s-1].coordinate)/2){o=e[s].index;break}}else o=0;return o};e.getMainColorOfGraphicItem=function(t){var e,n=t.type.displayName,r=t.props,i=r.stroke,o=r.fill;switch(n){case"Line":e=i;break;case"Area":case"Radar":e=i&&"none"!==i?i:o;break;default:e=o}return e};e.getLegendProps=function(t){var n,i=t.children,o=t.formatedGraphicalItems,a=t.legendWidth,u=t.legendContent,s=y.findChildByType(i,d.Legend.displayName);return s?(n=s.props&&s.props.payload?s.props&&s.props.payload:"children"===u?(o||[]).reduce((function(t,e){var n=e.item,r=e.props,i=r.sectors||r.data||[];return t.concat(i.map((function(t){return{type:s.props.iconType||n.props.legendType,value:t.name,color:t.fill,payload:t}})))}),[]):(o||[]).map((function(t){var n=t.item,r=n.props,i=r.dataKey,o=r.name,a=r.legendType;return{inactive:r.hide,dataKey:i,type:s.props.iconType||a||"square",color:e.getMainColorOfGraphicItem(n),value:o||i,payload:n.props}})),r(r(r({},s.props),d.Legend.getWithHeight(s,a)),{payload:n,item:s})):null};e.getBarSizeList=function(t){var e=t.barSize,n=t.stackGroups,r=void 0===n?{}:n;if(!r)return{};for(var i={},o=Object.keys(r),a=0,u=o.length;a<u;a++)for(var s=r[o[a]].stackGroups,c=Object.keys(s),f=0,h=c.length;f<h;f++){var p=s[c[f]],d=p.items,v=p.cateAxisId,g=d.filter((function(t){return y.getDisplayName(t.type).indexOf("Bar")>=0}));if(g&&g.length){var m=g[0].props.barSize,_=g[0].props[v];i[_]||(i[_]=[]),i[_].push({item:g[0],stackList:g.slice(1),barSize:l.default.isNil(m)?e:m})}}return i};e.getBarPosition=function(t){var e=t.barGap,n=t.barCategoryGap,r=t.bandSize,i=t.sizeList,o=void 0===i?[]:i,a=t.maxBarSize,s=o.length;if(s<1)return null;var l,c=p.getPercentValue(e,r,0,!0);if(o[0].barSize===+o[0].barSize){var f=!1,h=r/s,d=o.reduce((function(t,e){return t+e.barSize||0}),0);(d+=(s-1)*c)>=r&&(d-=(s-1)*c,c=0),d>=r&&h>0&&(f=!0,d=s*(h*=.9));var y={offset:((r-d)/2>>0)-c,size:0};l=o.reduce((function(t,e){var n=u(t,[{item:e.item,position:{offset:y.offset+y.size+c,size:f?h:e.barSize}}]);return y=n[n.length-1].position,e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){n.push({item:t,position:y})})),n}),[])}else{var v=p.getPercentValue(n,r,0,!0);r-2*v-(s-1)*c<=0&&(c=0);var g=(r-2*v-(s-1)*c)/s;g>1&&(g>>=0);var m=a===+a?Math.min(g,a):g;l=o.reduce((function(t,e,n){var r=u(t,[{item:e.item,position:{offset:v+(g+c)*n+(g-m)/2,size:m}}]);return e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){r.push({item:t,position:r[r.length-1].position})})),r}),[])}return l};e.appendOffsetOfLegend=function(t,n,i,o){var a,u,s=i.children,l=i.width,c=i.margin,f=l-(c.left||0)-(c.right||0),h=e.getLegendProps({children:s,legendWidth:f}),d=t;if(h){var y=o||{},v=h.align,g=h.verticalAlign,m=h.layout;("vertical"===m||"horizontal"===m&&"center"===g)&&p.isNumber(t[v])&&(d=r(r({},t),((a={})[v]=d[v]+(y.width||0),a))),("horizontal"===m||"vertical"===m&&"center"===v)&&p.isNumber(t[g])&&(d=r(r({},t),((u={})[g]=d[g]+(y.height||0),u)))}return d};e.getDomainOfErrorBars=function(t,e,n,r){var i=e.props.children,o=y.findAllByType(i,"ErrorBar").filter((function(t){var e=t.props.direction;return!(!l.default.isNil(e)&&!l.default.isNil(r))||r.indexOf(e)>=0}));if(o&&o.length){var a=o.map((function(t){return t.props.dataKey}));return t.reduce((function(t,e){var r=v(e,n,0),i=l.default.isArray(r)?[l.default.min(r),l.default.max(r)]:[r,r],o=a.reduce((function(t,n){var r=v(e,n,0),o=i[0]-Math.abs(l.default.isArray(r)?r[0]:r),a=i[1]+Math.abs(l.default.isArray(r)?r[1]:r);return[Math.min(o,t[0]),Math.max(a,t[1])]}),[1/0,-1/0]);return[Math.min(o[0],t[0]),Math.max(o[1],t[1])]}),[1/0,-1/0])}return null};e.parseErrorBarsOfAxis=function(t,n,r,i){var o=n.map((function(n){return e.getDomainOfErrorBars(t,n,r,i)})).filter((function(t){return!l.default.isNil(t)}));return o&&o.length?o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]):null};e.getDomainOfItemsWithSameAxis=function(t,n,r,i){var o=n.map((function(n){var o=n.props.dataKey;return"number"===r&&o&&e.getDomainOfErrorBars(t,n,o)||g(t,o,r,i)}));if("number"===r)return o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]);var a={};return o.reduce((function(t,e){for(var n=0,r=e.length;n<r;n++)a[e[n]]||(a[e[n]]=!0,t.push(e[n]));return t}),[])};e.isCategoricalAxis=function(t,e){return"horizontal"===t&&"xAxis"===e||"vertical"===t&&"yAxis"===e||"centric"===t&&"angleAxis"===e||"radial"===t&&"radiusAxis"===e};e.getCoordinatesOfGrid=function(t,e,n){var r,i,o=t.map((function(t){return t.coordinate===e&&(r=!0),t.coordinate===n&&(i=!0),t.coordinate}));return r||o.push(e),i||o.push(n),o};e.getTicksOfAxis=function(t,e,n){if(!t)return null;var r=t.scale,i=t.duplicateDomain,o=t.type,a=t.range,u=(e||n)&&"category"===o&&r.bandwidth?r.bandwidth()/2:0;return u="angleAxis"===t.axisType?2*p.mathSign(a[0]-a[1])*u:u,e&&(t.ticks||t.niceTicks)?(t.ticks||t.niceTicks).map((function(t){var e=i?i.indexOf(t):t;return{coordinate:r(e)+u,value:t,offset:u}})):t.isCategorical&&t.categoricalDomain?t.categoricalDomain.map((function(t,e){return{coordinate:r(t)+u,value:t,index:e,offset:u}})):r.ticks&&!n?r.ticks(t.tickCount).map((function(t){return{coordinate:r(t)+u,value:t,offset:u}})):r.domain().map((function(t,e){return{coordinate:r(t)+u,value:i?i[t]:t,index:e,offset:u}}))};e.combineEventHandlers=function(t,e,n){var r;return l.default.isFunction(n)?r=n:l.default.isFunction(e)&&(r=e),l.default.isFunction(t)||r?function(e,n,i,o){l.default.isFunction(t)&&t(e,n,i,o),l.default.isFunction(r)&&r(e,n,i,o)}:null};e.parseScale=function(t,e){var n=t.scale,r=t.type,i=t.layout,o=t.axisType;if("auto"===n)return"radial"===i&&"radiusAxis"===o?{scale:f.scaleBand(),realScaleType:"band"}:"radial"===i&&"angleAxis"===o?{scale:f.scaleLinear(),realScaleType:"linear"}:"category"===r&&e&&(e.indexOf("LineChart")>=0||e.indexOf("AreaChart")>=0||e.indexOf("ComposedChart")>=0)?{scale:f.scalePoint(),realScaleType:"point"}:"category"===r?{scale:f.scaleBand(),realScaleType:"band"}:{scale:f.scaleLinear(),realScaleType:"linear"};if(l.default.isString(n)){var a="scale"+l.default.upperFirst(n);return{scale:(f[a]||f.scalePoint)(),realScaleType:f[a]?a:"point"}}return l.default.isFunction(n)?{scale:n}:{scale:f.scalePoint(),realScaleType:"point"}};e.checkDomainOfScale=function(t){var e=t.domain();if(e&&!(e.length<=2)){var n=e.length,r=t.range(),i=Math.min(r[0],r[1])-1e-4,o=Math.max(r[0],r[1])+1e-4,a=t(e[0]),u=t(e[n-1]);(a<i||a>o||u<i||u>o)&&t.domain([e[0],e[n-1]])}};e.findPositionOfBar=function(t,e){if(!t)return null;for(var n=0,r=t.length;n<r;n++)if(t[n].item===e)return t[n].position;return null};e.truncateByDomain=function(t,e){if(!e||2!==e.length||!p.isNumber(e[0])||!p.isNumber(e[1]))return t;var n=Math.min(e[0],e[1]),r=Math.max(e[0],e[1]),i=[t[0],t[1]];return(!p.isNumber(t[0])||t[0]<n)&&(i[0]=n),(!p.isNumber(t[1])||t[1]>r)&&(i[1]=r),i[0]>r&&(i[0]=r),i[1]<n&&(i[1]=n),i};e.offsetSign=function(t){var e=t.length;if(!(e<=0))for(var n=0,r=t[0].length;n<r;++n)for(var i=0,o=0,a=0;a<e;++a){var u=l.default.isNaN(t[a][n][1])?t[a][n][0]:t[a][n][1];u>=0?(t[a][n][0]=i,t[a][n][1]=i+u,i=t[a][n][1]):(t[a][n][0]=o,t[a][n][1]=o+u,o=t[a][n][1])}};e.offsetPositive=function(t){var e=t.length;if(!(e<=0))for(var n=0,r=t[0].length;n<r;++n)for(var i=0,o=0;o<e;++o){var a=l.default.isNaN(t[o][n][1])?t[o][n][0]:t[o][n][1];a>=0?(t[o][n][0]=i,t[o][n][1]=i+a,i=t[o][n][1]):(t[o][n][0]=0,t[o][n][1]=0)}};var m={sign:e.offsetSign,expand:h.stackOffsetExpand,none:h.stackOffsetNone,silhouette:h.stackOffsetSilhouette,wiggle:h.stackOffsetWiggle,positive:e.offsetPositive};e.getStackedData=function(t,e,n){var r=e.map((function(t){return t.props.dataKey}));return h.stack().keys(r).value((function(t,e){return+v(t,e,0)})).order(h.stackOrderNone).offset(m[n])(t)};e.getStackGroupsByAxisId=function(t,n,i,o,a,u){if(!t)return null;var s=(u?n.reverse():n).reduce((function(t,e){var n,a=e.props,u=a.stackId;if(a.hide)return t;var s=e.props[i],l=t[s]||{hasStack:!1,stackGroups:{}};if(p.isNumOrStr(u)){var c=l.stackGroups[u]||{numericAxisId:i,cateAxisId:o,items:[]};c.items.push(e),l.hasStack=!0,l.stackGroups[u]=c}else l.stackGroups[p.uniqueId("_stackId_")]={numericAxisId:i,cateAxisId:o,items:[e]};return r(r({},t),((n={})[s]=l,n))}),{});return Object.keys(s).reduce((function(n,u){var l,c=s[u];return c.hasStack&&(c.stackGroups=Object.keys(c.stackGroups).reduce((function(n,u){var s,l=c.stackGroups[u];return r(r({},n),((s={})[u]={numericAxisId:i,cateAxisId:o,items:l.items,stackedData:e.getStackedData(t,l.items,a)},s))}),{})),r(r({},n),((l={})[u]=c,l))}),{})};e.calculateDomainOfTicks=function(t,e){return"number"===e?[l.default.min(t),l.default.max(t)]:t};e.getTicksOfScale=function(t,n){var r=n.realScaleType,i=n.type,o=n.tickCount,a=n.originalDomain,u=n.allowDecimals,s=r||n.scale;if("auto"!==s&&"linear"!==s)return null;if(o&&"number"===i&&a&&("auto"===a[0]||"auto"===a[1])){if(!(f=t.domain()).length)return null;var l=c.getNiceTickValues(f,o,u);return t.domain(e.calculateDomainOfTicks(l,i)),{niceTicks:l}}if(o&&"number"===i){var f=t.domain();return{niceTicks:l=c.getTickValuesFixedDomain(f,o,u)}}return null};e.getCateCoordinateOfLine=function(t){var e=t.axis,n=t.ticks,r=t.bandSize,i=t.entry,o=t.index,a=t.dataKey;if("category"===e.type){if(!e.allowDuplicatedCategory&&e.dataKey&&!l.default.isNil(i[e.dataKey])){var u=p.findEntryInArray(n,"value",i[e.dataKey]);if(u)return u.coordinate+r/2}return n[o]?n[o].coordinate+r/2:null}var s=v(i,l.default.isNil(a)?e.dataKey:a);return l.default.isNil(s)?null:e.scale(s)};e.getCateCoordinateOfBar=function(t){var e=t.axis,n=t.ticks,r=t.offset,i=t.bandSize,o=t.entry,a=t.index;if("category"===e.type)return n[a]?n[a].coordinate+r:null;var u=v(o,e.dataKey,e.domain[a]);return l.default.isNil(u)?null:e.scale(u)-i/2+r};e.getBaseValueOfBar=function(t){var e=t.numericAxis,n=e.scale.domain();if("number"===e.type){var r=Math.min(n[0],n[1]),i=Math.max(n[0],n[1]);return r<=0&&i>=0?0:i<0?i:r}return n[0]};e.getStackedDataOfItem=function(t,e){var n=t.props.stackId;if(p.isNumOrStr(n)){var r=e[n];if(r&&r.items.length){for(var i=-1,o=0,a=r.items.length;o<a;o++)if(r.items[o]===t){i=o;break}return i>=0?r.stackedData[i]:null}}return null};e.getDomainOfStackGroups=function(t,e,n){return Object.keys(t).reduce((function(r,i){var o=t[i].stackedData.reduce((function(t,r){var i=r.slice(e,n+1).reduce((function(t,e){return[l.default.min(e.concat([t[0]]).filter(p.isNumber)),l.default.max(e.concat([t[1]]).filter(p.isNumber))]}),[1/0,-1/0]);return[Math.min(t[0],i[0]),Math.max(t[1],i[1])]}),[1/0,-1/0]);return[Math.min(o[0],r[0]),Math.max(o[1],r[1])]}),[1/0,-1/0]).map((function(t){return t===1/0||t===-1/0?0:t}))},e.MIN_VALUE_REG=/^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,e.MAX_VALUE_REG=/^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;e.parseSpecifiedDomain=function(t,n,r){if(!l.default.isArray(t))return n;var i=[];if(p.isNumber(t[0]))i[0]=r?t[0]:Math.min(t[0],n[0]);else if(e.MIN_VALUE_REG.test(t[0])){var o=+e.MIN_VALUE_REG.exec(t[0])[1];i[0]=n[0]-o}else l.default.isFunction(t[0])?i[0]=t[0](n[0]):i[0]=n[0];if(p.isNumber(t[1]))i[1]=r?t[1]:Math.max(t[1],n[1]);else if(e.MAX_VALUE_REG.test(t[1])){o=+e.MAX_VALUE_REG.exec(t[1])[1];i[1]=n[1]+o}else l.default.isFunction(t[1])?i[1]=t[1](n[1]):i[1]=n[1];return i};e.getBandSizeOfAxis=function(t,e,n){if(t&&t.scale&&t.scale.bandwidth){var r=t.scale.bandwidth();if(!n||r>0)return r}if(t&&e&&e.length>=2){for(var i=l.default.sortBy(e,(function(t){return t.coordinate})),o=1/0,a=1,u=i.length;a<u;a++){var s=i[a],c=i[a-1];o=Math.min((s.coordinate||0)-(c.coordinate||0),o)}return o===1/0?0:o}return 0};e.parseDomainOfCategoryAxis=function(t,e,n){return t&&t.length?l.default.isEqual(t,l.default.get(n,"type.defaultProps.domain"))?e:t:e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Global=void 0;e.Global={isSsr:!("undefined"!=typeof window&&window.document&&window.document.createElement&&window.setTimeout),get:function(t){return e.Global[t]},set:function(t,n){if("string"==typeof t)e.Global[t]=n;else{var r=Object.keys(t);r&&r.length&&r.forEach((function(n){e.Global[n]=t[n]}))}}}},function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseChildIndex=e.getReactEventByType=e.renderByOrder=e.isSingleChildEqual=e.isChildrenEqual=e.filterSvgElements=e.validateWidthHeight=e.withoutType=e.findChildByType=e.findAllByType=e.getDisplayName=e.TOOLTIP_TYPES=e.LEGEND_TYPES=e.SCALE_TYPES=void 0;var s=o(n(0)),l=u(n(3)),c=n(5),f=n(44),h={click:"onClick",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",mouseout:"onMouseOut",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",touchcancel:"onTouchCancel",touchend:"onTouchEnd",touchmove:"onTouchMove",touchstart:"onTouchStart"};e.SCALE_TYPES=["auto","linear","pow","sqrt","log","identity","time","band","point","ordinal","quantile","quantize","utc","sequential","threshold"],e.LEGEND_TYPES=["plainline","line","square","rect","circle","cross","diamond","star","triangle","wye","none"],e.TOOLTIP_TYPES=["none"];e.getDisplayName=function(t){return"string"==typeof t?t:t?t.displayName||t.name||"Component":""};e.findAllByType=function(t,n){var r=[],i=[];return i=l.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],s.default.Children.forEach(t,(function(t){var e=l.default.get(t,"type.displayName")||l.default.get(t,"type.name");-1!==i.indexOf(e)&&r.push(t)})),r};e.findChildByType=function(t,n){var r=e.findAllByType(t,n);return r&&r[0]};e.withoutType=function(t,n){var r,i=[];return r=l.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],s.default.Children.forEach(t,(function(t){var e=l.default.get(t,"type.displayName");e&&-1!==r.indexOf(e)||i.push(t)})),i};e.validateWidthHeight=function(t){if(!t||!t.props)return!1;var e=t.props,n=e.width,r=e.height;return!(!c.isNumber(n)||n<=0||!c.isNumber(r)||r<=0)};var p=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColormatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-url","foreignObject","g","glyph","glyphRef","hkern","image","line","lineGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"],d=function(t){return t&&t.type&&l.default.isString(t.type)&&p.indexOf(t.type)>=0};e.filterSvgElements=function(t){var e=[];return s.default.Children.forEach(t,(function(t){d(t)&&e.push(t)})),e};e.isChildrenEqual=function(t,n){if(t===n)return!0;if(s.Children.count(t)!==s.Children.count(n))return!1;var r=s.Children.count(t);if(0===r)return!0;if(1===r)return e.isSingleChildEqual(l.default.isArray(t)?t[0]:t,l.default.isArray(n)?n[0]:n);for(var i=0;i<r;i++){var o=t[i],a=n[i];if(l.default.isArray(o)||l.default.isArray(a)){if(!e.isChildrenEqual(o,a))return!1}else if(!e.isSingleChildEqual(o,a))return!1}return!0};e.isSingleChildEqual=function(t,n){if(l.default.isNil(t)&&l.default.isNil(n))return!0;if(!l.default.isNil(t)&&!l.default.isNil(n)){var r=t.props||{},i=r.children,o=a(r,["children"]),u=n.props||{},s=u.children,c=a(u,["children"]);return i&&s?f.shallowEqual(o,c)&&e.isChildrenEqual(i,s):!i&&!s&&f.shallowEqual(o,c)}return!1};e.renderByOrder=function(t,n){var r=[],i={};return s.Children.forEach(t,(function(t,o){if(d(t))r.push(t);else if(t){var a=e.getDisplayName(t.type),u=n[a]||{},s=u.handler,l=u.once;if(s&&(!l||!i[a])){var c=s(t,a,o);r.push(c),i[a]=!0}}})),l.default.flatten(r)};e.getReactEventByType=function(t){var e=t&&t.type;return e&&h[e]?h[e]:null};e.parseChildIndex=function(t,e){var n=-1;return s.Children.forEach(e,(function(e,r){e===t&&(n=r)})),n}},function(t,e,n){"use strict";n.r(e),n.d(e,"configSpring",(function(){return N})),n.d(e,"configBezier",(function(){return T})),n.d(e,"AnimateGroup",(function(){return gt})),n.d(e,"translateStyle",(function(){return A}));var r=n(112),i=n.n(r),o=n(0),a=n.n(o),u=n(1),s=n.n(u),l=n(19),c=n.n(l);function f(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=-1,r=function r(i){n<0&&(n=i),i-n>e?(t(i),n=-1):c()(r)};c()(r)}function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(){var t=function(){return null},e=!1;return{stop:function(){e=!0},start:function(n){e=!1,function n(r){if(!e){if(Array.isArray(r)){if(!r.length)return;var i=p(r),o=i[0],a=i.slice(1);return"number"==typeof o?void f(n.bind(null,a),o):(n(o),void f(n.bind(null,a)))}"object"===h(r)&&t(r),"function"==typeof r&&r()}}(n)},subscribe:function(e){return t=e,function(){t=function(){return null}}}}}var y=n(113),v=n.n(y);function g(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){m(t,e,n[e])}))}return t}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _=["Webkit","Moz","O","ms"],b=["-webkit-","-moz-","-o-","-ms-"],x=["transform","transformOrigin","transition"],O=function(t){return t},w=function(t,e){return Object.keys(e).reduce((function(n,r){return g({},n,m({},r,t(r,e[r])))}),{})},A=function(t){return Object.keys(t).reduce((function(t,e){return g({},t,function(t,e){if(-1===x.indexOf(t))return m({},t,e);var n="transition"===t,r=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),i=e;return _.reduce((function(t,o,a){return n&&(i=e.replace(/(transform|transform-origin)/gim,"".concat(b[a],"$1"))),g({},t,m({},o+r,i))}),{})}(e,t[e]))}),t)},E=function(t,e,n){return t.map((function(t){return"".concat((r=t,r.replace(/([A-Z])/g,(function(t){return"-".concat(t.toLowerCase())})))," ").concat(e,"ms ").concat(n);var r})).join(",")};function M(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function P(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var S=function(t,e){return[0,3*t,3*e-6*t,3*t-3*e+1]},k=function(t,e){return t.map((function(t,n){return t*Math.pow(e,n)})).reduce((function(t,e){return t+e}))},C=function(t,e){return function(n){var r=S(t,e);return k(r,n)}},j=function(t,e){return function(n){var r=P(S(t,e).map((function(t,e){return t*e})).slice(1)).concat([0]);return k(r,n)}},T=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1],o=e[2],a=e[3];if(1===e.length)switch(e[0]){case"linear":r=0,i=0,o=1,a=1;break;case"ease":r=.25,i=.1,o=.25,a=1;break;case"ease-in":r=.42,i=0,o=1,a=1;break;case"ease-out":r=.42,i=0,o=.58,a=1;break;case"ease-in-out":r=0,i=0,o=.58,a=1;break;default:var u=e[0].split("(");if("cubic-bezier"===u[0]&&4===u[1].split(")")[0].split(",").length){var s=u[1].split(")")[0].split(",").map((function(t){return parseFloat(t)})),l=M(s,4);r=l[0],i=l[1],o=l[2],a=l[3]}}[r,o,i,a].every((function(t){return"number"==typeof t&&t>=0&&t<=1}));var c=C(r,o),f=C(i,a),h=j(r,o),p=function(t){return t>1?1:t<0?0:t},d=function(t){for(var e=t>1?1:t,n=e,r=0;r<8;++r){var i=c(n)-e,o=h(n);if(Math.abs(i-e)<1e-4||o<1e-4)return f(n);n=p(n-i/o)}return f(n)};return d.isStepper=!1,d},N=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.stiff,n=void 0===e?100:e,r=t.damping,i=void 0===r?8:r,o=t.dt,a=void 0===o?17:o,u=function(t,e,r){var o=r+(-(t-e)*n-r*i)*a/1e3,u=r*a/1e3+t;return Math.abs(u-e)<1e-4&&Math.abs(o)<1e-4?[e,0]:[u,o]};return u.isStepper=!0,u.dt=a,u},D=n(114),I=n.n(D);function L(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function R(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){B(t,e,n[e])}))}return t}function B(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function z(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var F=function(t,e,n){return t+(e-t)*n},V=function(t){return t.from!==t.to},W=function(t,e,n,r,i){var o,a,u,s,f=(o=t,a=e,v()(Object.keys(o),Object.keys(a))),h=f.reduce((function(n,r){return R({},n,B({},r,[t[r],e[r]]))}),{}),p=f.reduce((function(n,r){return R({},n,B({},r,{from:t[r],velocity:0,to:e[r]}))}),{}),d=-1,y=function(){return null};return y=n.isStepper?function(r){u||(u=r);var o=(r-u)/n.dt;p=function t(e,n,r){var i=w((function(t,n){if(V(n)){var r=z(e(n.from,n.to,n.velocity),2);return R({},n,{from:r[0],velocity:r[1]})}return n}),n);return r<1?w((function(t,e){return V(e)?R({},e,{velocity:F(e.velocity,i[t].velocity,r),from:F(e.from,i[t].from,r)}):e}),n):t(e,i,r-1)}(n,p,o),i(R({},t,e,w((function(t,e){return e.from}),p))),u=r,I()(p,V).length&&(d=c()(y))}:function(o){s||(s=o);var a=(o-s)/r,u=w((function(t,e){return F.apply(void 0,L(e).concat([n(a)]))}),h);if(i(R({},t,e,u)),a<1)d=c()(y);else{var l=w((function(t,e){return F.apply(void 0,L(e).concat([n(1)]))}),h);i(R({},t,e,l))}},function(){return c()(y),function(){Object(l.cancel)(d)}}};function U(t){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function q(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function G(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function H(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){K(t,e,n[e])}))}return t}function K(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e){return!e||"object"!==U(e)&&"function"!=typeof e?J(t):e}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function J(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Q=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=(r=Y(this,$(e).call(this,t,n))).props,o=i.isActive,a=i.attributeName,u=i.from,s=i.to,l=i.steps,c=i.children;if(r.handleStyleChange=r.handleStyleChange.bind(J(J(r))),r.changeStyle=r.changeStyle.bind(J(J(r))),!o)return r.state={style:{}},"function"==typeof c&&(r.state={style:s}),Y(r);if(l&&l.length)r.state={style:l[0].style};else if(u){if("function"==typeof c)return r.state={style:u},Y(r);r.state={style:a?K({},a,u):u}}else r.state={style:{}};return r}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.props,e=t.isActive,n=t.canBegin;this.mounted=!0,e&&n&&this.runAnimation(this.props)}},{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.isActive,r=e.canBegin,o=e.attributeName,a=e.shouldReAnimate;if(r)if(n){if(!(i()(t.to,this.props.to)&&t.canBegin&&t.isActive)){var u=!t.canBegin||!t.isActive;this.manager&&this.manager.stop(),this.stopJSAnimation&&this.stopJSAnimation();var s=u||a?this.props.from:t.to;if(this.state&&this.state.style){var l={style:o?K({},o,s):s};(o&&this.state.style[o]!==s||!o&&this.state.style!==s)&&this.setState(l)}this.runAnimation(H({},this.props,{from:s,begin:0}))}}else{var c={style:o?K({},o,this.props.to):this.props.to};this.state&&this.state.style&&(o&&this.state.style[o]!==this.props.to||!o&&this.state.style!==this.props.to)&&this.setState(c)}}},{key:"componentWillUnmount",value:function(){this.mounted=!1,this.unSubscribe&&this.unSubscribe(),this.manager&&(this.manager.stop(),this.manager=null),this.stopJSAnimation&&this.stopJSAnimation()}},{key:"runJSAnimation",value:function(t){var e=this,n=t.from,r=t.to,i=t.duration,o=t.easing,a=t.begin,u=t.onAnimationEnd,s=t.onAnimationStart,l=W(n,r,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0];if("string"==typeof r)switch(r){case"ease":case"ease-in-out":case"ease-out":case"ease-in":case"linear":return T(r);case"spring":return N();default:if("cubic-bezier"===r.split("(")[0])return T(r)}return"function"==typeof r?r:null}(o),i,this.changeStyle);this.manager.start([s,a,function(){e.stopJSAnimation=l()},i,u])}},{key:"runStepAnimation",value:function(t){var e=this,n=t.steps,r=t.begin,i=t.onAnimationStart,o=n[0],a=o.style,u=o.duration,s=void 0===u?0:u;return this.manager.start([i].concat(G(n.reduce((function(t,r,i){if(0===i)return t;var o=r.duration,a=r.easing,u=void 0===a?"ease":a,s=r.style,l=r.properties,c=r.onAnimationEnd,f=i>0?n[i-1]:r,h=l||Object.keys(s);if("function"==typeof u||"spring"===u)return G(t).concat([e.runJSAnimation.bind(e,{from:f.style,to:s,duration:o,easing:u}),o]);var p=E(h,o,u),d=H({},f.style,s,{transition:p});return G(t).concat([d,o,c]).filter(O)}),[a,Math.max(s,r)])),[t.onAnimationEnd]))}},{key:"runAnimation",value:function(t){this.manager||(this.manager=d());var e=t.begin,n=t.duration,r=t.attributeName,i=t.to,o=t.easing,a=t.onAnimationStart,u=t.onAnimationEnd,s=t.steps,l=t.children,c=this.manager;if(this.unSubscribe=c.subscribe(this.handleStyleChange),"function"!=typeof o&&"function"!=typeof l&&"spring"!==o)if(s.length>1)this.runStepAnimation(t);else{var f=r?K({},r,i):i,h=E(Object.keys(f),n,o);c.start([a,e,H({},f,{transition:h}),n,u])}else this.runJSAnimation(t)}},{key:"handleStyleChange",value:function(t){this.changeStyle(t)}},{key:"changeStyle",value:function(t){this.mounted&&this.setState({style:t})}},{key:"render",value:function(){var t=this.props,e=t.children,n=(t.begin,t.duration,t.attributeName,t.easing,t.isActive),r=(t.steps,t.from,t.to,t.canBegin,t.onAnimationEnd,t.shouldReAnimate,t.onAnimationReStart,q(t,["children","begin","duration","attributeName","easing","isActive","steps","from","to","canBegin","onAnimationEnd","shouldReAnimate","onAnimationReStart"])),i=o.Children.count(e),u=A(this.state.style);if("function"==typeof e)return e(u);if(!n||0===i)return e;var s=function(t){var e=t.props,n=e.style,i=void 0===n?{}:n,a=e.className;return Object(o.cloneElement)(t,H({},r,{style:H({},i,u),className:a}))};return 1===i?s(o.Children.only(e)):a.a.createElement("div",null,o.Children.map(e,(function(t){return s(t)})))}}])&&X(n.prototype,r),u&&X(n,u),e}(o.PureComponent);Q.displayName="Animate",Q.propTypes={from:s.a.oneOfType([s.a.object,s.a.string]),to:s.a.oneOfType([s.a.object,s.a.string]),attributeName:s.a.string,duration:s.a.number,begin:s.a.number,easing:s.a.oneOfType([s.a.string,s.a.func]),steps:s.a.arrayOf(s.a.shape({duration:s.a.number.isRequired,style:s.a.object.isRequired,easing:s.a.oneOfType([s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),s.a.func]),properties:s.a.arrayOf("string"),onAnimationEnd:s.a.func})),children:s.a.oneOfType([s.a.node,s.a.func]),isActive:s.a.bool,canBegin:s.a.bool,onAnimationEnd:s.a.func,shouldReAnimate:s.a.bool,onAnimationStart:s.a.func,onAnimationReStart:s.a.func},Q.defaultProps={begin:0,duration:1e3,from:"",to:"",attributeName:"",easing:"ease",isActive:!0,canBegin:!0,steps:[],onAnimationEnd:function(){},onAnimationStart:function(){}};var tt=Q,et=n(53),nt=n(72),rt=n.n(nt);function it(t){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ot(){return(ot=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function at(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function ut(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function st(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ct(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ft(t){return(ft=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ht(t,e){return(ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var pt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.steps,n=t.duration;return e&&e.length?e.reduce((function(t,e){return t+(rt()(e.duration)&&e.duration>0?e.duration:0)}),0):rt()(n)?n:0},dt=function(t){function e(){var t,n;st(this,e);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(n=ct(this,(t=ft(e)).call.apply(t,[this].concat(i)))).state={isActive:!1},n.handleEnter=function(t,e){var r=n.props,i=r.appearOptions,o=r.enterOptions;n.handleStyleActive(e?i:o)},n.handleExit=function(){n.handleStyleActive(n.props.leaveOptions)},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ht(t,e)}(e,t),n=e,(r=[{key:"handleStyleActive",value:function(t){if(t){var e=t.onAnimationEnd?function(){t.onAnimationEnd()}:null;this.setState(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){ut(t,e,n[e])}))}return t}({},t,{onAnimationEnd:e,isActive:!0}))}}},{key:"parseTimeout",value:function(){var t=this.props,e=t.appearOptions,n=t.enterOptions,r=t.leaveOptions;return pt(e)+pt(n)+pt(r)}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,r=(e.appearOptions,e.enterOptions,e.leaveOptions,at(e,["children","appearOptions","enterOptions","leaveOptions"]));return a.a.createElement(et.Transition,ot({},r,{onEnter:this.handleEnter,onExit:this.handleExit,timeout:this.parseTimeout()}),(function(){return a.a.createElement(tt,t.state,o.Children.only(n))}))}}])&&lt(n.prototype,r),i&&lt(n,i),e}(o.Component);dt.propTypes={appearOptions:s.a.object,enterOptions:s.a.object,leaveOptions:s.a.object,children:s.a.element};var yt=dt;function vt(t){var e=t.component,n=t.children,r=t.appear,i=t.enter,u=t.leave;return a.a.createElement(et.TransitionGroup,{component:e},o.Children.map(n,(function(t,e){return a.a.createElement(yt,{appearOptions:r,enterOptions:i,leaveOptions:u,key:"child-".concat(e)},t)})))}vt.propTypes={appear:s.a.object,enter:s.a.object,leave:s.a.object,children:s.a.oneOfType([s.a.array,s.a.element]),component:s.a.any},vt.defaultProps={component:"span"};var gt=vt;e.default=tt},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.inRangeOfSector=e.formatAngleOfSector=e.getAngleOfPoint=e.distanceBetweenPoints=e.formatAxisMap=e.getMaxRadius=e.polarToCartesian=e.radianToDegree=e.degreeToRadian=e.RADIAN=void 0;var o=i(n(3)),a=n(5),u=n(7);e.RADIAN=Math.PI/180;e.degreeToRadian=function(t){return t*Math.PI/180};e.radianToDegree=function(t){return 180*t/Math.PI};e.polarToCartesian=function(t,n,r,i){return{x:t+Math.cos(-e.RADIAN*i)*r,y:n+Math.sin(-e.RADIAN*i)*r}};e.getMaxRadius=function(t,e,n){return void 0===n&&(n={top:0,right:0,bottom:0,left:0}),Math.min(Math.abs(t-(n.left||0)-(n.right||0)),Math.abs(e-(n.top||0)-(n.bottom||0)))/2};e.formatAxisMap=function(t,n,i,s,l){var c=t.width,f=t.height,h=t.startAngle,p=t.endAngle,d=a.getPercentValue(t.cx,c,c/2),y=a.getPercentValue(t.cy,f,f/2),v=e.getMaxRadius(c,f,i),g=a.getPercentValue(t.innerRadius,v,0),m=a.getPercentValue(t.outerRadius,v,.8*v);return Object.keys(n).reduce((function(t,e){var i,a,c=n[e],f=c.domain,v=c.reversed;o.default.isNil(c.range)?("angleAxis"===s?a=[h,p]:"radiusAxis"===s&&(a=[g,m]),v&&(a=[a[1],a[0]])):(a=c.range,h=a[0],p=a[1]);var _=u.parseScale(c,l),b=_.realScaleType,x=_.scale;x.domain(f).range(a),u.checkDomainOfScale(x);var O=u.getTicksOfScale(x,r(r({},c),{realScaleType:b})),w=r(r(r({},c),O),{range:a,radius:m,realScaleType:b,scale:x,cx:d,cy:y,innerRadius:g,outerRadius:m,startAngle:h,endAngle:p});return r(r({},t),((i={})[e]=w,i))}),{})};e.distanceBetweenPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return Math.sqrt(Math.pow(n-i,2)+Math.pow(r-o,2))};e.getAngleOfPoint=function(t,n){var r=t.x,i=t.y,o=n.cx,a=n.cy,u=e.distanceBetweenPoints({x:r,y:i},{x:o,y:a});if(u<=0)return{radius:u};var s=(r-o)/u,l=Math.acos(s);return i>a&&(l=2*Math.PI-l),{radius:u,angle:e.radianToDegree(l),angleInRadian:l}};e.formatAngleOfSector=function(t){var e=t.startAngle,n=t.endAngle,r=Math.floor(e/360),i=Math.floor(n/360),o=Math.min(r,i);return{startAngle:e-360*o,endAngle:n-360*o}};var s=function(t,e){var n=e.startAngle,r=e.endAngle,i=Math.floor(n/360),o=Math.floor(r/360);return t+360*Math.min(i,o)};e.inRangeOfSector=function(t,n){var i=t.x,o=t.y,a=e.getAngleOfPoint({x:i,y:o},n),u=a.radius,l=a.angle,c=n.innerRadius,f=n.outerRadius;if(u<c||u>f)return!1;if(0===u)return!0;var h,p=e.formatAngleOfSector(n),d=p.startAngle,y=p.endAngle,v=l;if(d<=y){for(;v>y;)v-=360;for(;v<d;)v+=360;h=v>=d&&v<=y}else{for(;v>d;)v-=360;for(;v<y;)v+=360;h=v>=y&&v<=d}return h?r(r({},n),{radius:u,angle:s(v,n)}):null}},function(t,e,n){var r=n(78),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},,function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},s=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.LabelList=void 0;var c=a(n(0)),f=l(n(3)),h=n(17),p=n(6),d=n(9),y=n(7),v=n(2),g={valueAccessor:function(t){return f.default.isArray(t.value)?f.default.last(t.value):t.value}};function m(t){var e=t.data,n=t.valueAccessor,i=t.dataKey,o=t.clockWise,a=t.id,s=t.textBreakAll,l=u(t,["data","valueAccessor","dataKey","clockWise","id","textBreakAll"]);return e&&e.length?c.default.createElement(p.Layer,{className:"recharts-label-list"},e.map((function(t,e){var u=f.default.isNil(i)?n(t,e):y.getValueByDataKey(t&&t.payload,i),p=f.default.isNil(a)?{}:{id:a+"-"+e};return c.default.createElement(h.Label,r({},v.filterProps(t,!0),l,p,{parentViewBox:t.parentViewBox,index:e,value:u,textBreakAll:s,viewBox:h.Label.parseViewBox(f.default.isNil(o)?t:r(r({},t),{clockWise:o})),key:"label-"+e}))}))):null}e.LabelList=m,m.displayName="LabelList",m.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var i=t.children,o=d.findAllByType(i,m.displayName).map((function(t,n){return c.cloneElement(t,{data:e,key:"labelList-"+n})}));if(!n)return o;var a=function(t,e){return t?!0===t?c.default.createElement(m,{key:"labelList-implicit",data:e}):c.default.isValidElement(t)||f.default.isFunction(t)?c.default.createElement(m,{key:"labelList-implicit",data:e,content:t}):f.default.isObject(t)?c.default.createElement(m,r({data:e},t,{key:"labelList-implicit"})):null:null}(t.label,e);return s([a],o)},m.defaultProps=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.generateCategoricalChart=void 0;var h=s(n(0)),p=f(n(4)),d=f(n(3)),y=n(32),v=n(6),g=n(35),m=n(55),_=n(28),b=n(100),x=n(45),O=n(23),w=n(29),A=n(9),E=n(108),M=n(104),P=n(43),S=n(5),k=n(7),C=n(250),j=n(11),T=n(44),N=n(251),D=n(2),I={xAxis:["bottom","top"],yAxis:["left","right"]},L={x:0,y:0},R=Number.isFinite?Number.isFinite:isFinite,B=function(t,e,n){var r=e.graphicalItems,i=e.dataStartIndex,o=e.dataEndIndex,a=(r||[]).reduce((function(t,e){var n=e.props.data;return n&&n.length?c(t,n):t}),[]);return a&&a.length>0?a:n&&n.props&&n.props.data&&n.props.data.length>0?n.props.data:t&&t.length&&S.isNumber(i)&&S.isNumber(o)?t.slice(i,o+1):[]},z=function(t,e,n,r){var i=t.graphicalItems,a=t.tooltipAxis,u=B(e,t);return n<0||!i||!i.length||n>=u.length?null:i.reduce((function(t,e){if(e.props.hide)return t;var i,s=e.props,l=s.dataKey,f=s.name,h=s.unit,p=s.formatter,d=s.data,y=s.tooltipType;if(a.dataKey&&!a.allowDuplicatedCategory){var v=void 0===d?u:d;i=S.findEntryInArray(v,a.dataKey,r)}else i=d&&d[n]||u[n];return i?c(t,[o(o({},D.filterProps(e)),{dataKey:l,unit:h,formatter:p,name:f||l,color:k.getMainColorOfGraphicItem(e),value:k.getValueByDataKey(i,l),type:y,payload:i})]):t}),[])},F=function(t,e,n,r){var i=r||{x:t.chartX,y:t.chartY},a=function(t,e){return"horizontal"===e?t.x:"vertical"===e?t.y:"centric"===e?t.angle:t.radius}(i,n),u=t.orderedTooltipTicks,s=t.tooltipAxis,l=t.tooltipTicks,c=k.calculateActiveTickIndex(a,u,l,s);if(c>=0&&l){var f=l[c]&&l[c].value;return{activeTooltipIndex:c,activeLabel:f,activePayload:z(t,e,c,f),activeCoordinate:function(t,e,n,r){var i=e.find((function(t){return t&&t.index===n}));if(i){if("horizontal"===t)return{x:i.coordinate,y:r.y};if("vertical"===t)return{x:r.x,y:i.coordinate};if("centric"===t){var a=i.coordinate,u=r.radius;return o(o(o({},r),j.polarToCartesian(r.cx,r.cy,u,a)),{angle:a,radius:u})}var s=i.coordinate,l=r.angle;return o(o(o({},r),j.polarToCartesian(r.cx,r.cy,s,l)),{angle:l,radius:s})}return L}(n,u,c,i)}}return null},V=function(t,e){var n=e.axisType,r=void 0===n?"xAxis":n,i=e.AxisComp,a=e.graphicalItems,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,f=t.children,h=r+"Id",p=A.findAllByType(f,i),y={};return p&&p.length?y=function(t,e){var n=e.axes,r=e.graphicalItems,i=e.axisType,a=e.axisIdKey,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,f=t.layout,h=t.children,p=t.stackOffset,y=k.isCategoricalAxis(f,i);return n.reduce((function(e,n){var v,g=n.props,m=g.type,_=g.dataKey,b=g.allowDataOverflow,x=g.allowDuplicatedCategory,O=g.scale,w=g.ticks,A=n.props[a],E=B(t.data,{graphicalItems:r.filter((function(t){return t.props[a]===A})),dataStartIndex:s,dataEndIndex:l}),M=E.length;if(!e[A]){var P=void 0,j=void 0,T=void 0;if(_){if(P=k.getDomainOfDataByKey(E,_,m),"category"===m&&y){var N=S.hasDuplicate(P);x&&N?(j=P,P=d.default.range(0,M)):x||(P=k.parseDomainOfCategoryAxis(n.props.domain,P,n).reduce((function(t,e){return t.indexOf(e)>=0?t:c(t,[e])}),[]))}else if("category"===m)P=x?P.filter((function(t){return""!==t&&!d.default.isNil(t)})):k.parseDomainOfCategoryAxis(n.props.domain,P,n).reduce((function(t,e){return t.indexOf(e)>=0||""===e||d.default.isNil(e)?t:c(t,[e])}),[]);else if("number"===m){var D=k.parseErrorBarsOfAxis(E,r.filter((function(t){return t.props[a]===A&&!t.props.hide})),_,i);D&&(P=D)}!y||"number"!==m&&"auto"===O||(T=k.getDomainOfDataByKey(E,_,"category"))}else P=y?d.default.range(0,M):u&&u[A]&&u[A].hasStack&&"number"===m?"expand"===p?[0,1]:k.getDomainOfStackGroups(u[A].stackGroups,s,l):k.getDomainOfItemsWithSameAxis(E,r.filter((function(t){return t.props[a]===A&&!t.props.hide})),m,!0);if("number"===m)P=C.detectReferenceElementsDomain(h,P,A,i,w),n.props.domain&&(P=k.parseSpecifiedDomain(n.props.domain,P,b));else if("category"===m&&n.props.domain){var I=n.props.domain;P.every((function(t){return I.indexOf(t)>=0}))&&(P=I)}return o(o({},e),((v={})[A]=o(o({},n.props),{axisType:i,domain:P,categoricalDomain:T,duplicateDomain:j,originalDomain:n.props.domain,isCategorical:y,layout:f}),v))}return e}),{})}(t,{axes:p,graphicalItems:a,axisType:r,axisIdKey:h,stackGroups:u,dataStartIndex:s,dataEndIndex:l}):a&&a.length&&(y=function(t,e){var n=e.graphicalItems,r=e.Axis,i=e.axisType,a=e.axisIdKey,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,c=t.layout,f=t.children,h=B(t.data,{graphicalItems:n,dataStartIndex:s,dataEndIndex:l}),p=h.length,y=k.isCategoricalAxis(c,i),v=-1;return n.reduce((function(t,e){var g,m=e.props[a];if(!t[m]){v++;var _=void 0;return y?_=d.default.range(0,p):u&&u[m]&&u[m].hasStack?(_=k.getDomainOfStackGroups(u[m].stackGroups,s,l),_=C.detectReferenceElementsDomain(f,_,m,i)):(_=k.parseSpecifiedDomain(r.defaultProps.domain,k.getDomainOfItemsWithSameAxis(h,n.filter((function(t){return t.props[a]===m&&!t.props.hide})),"number"),r.defaultProps.allowDataOverflow),_=C.detectReferenceElementsDomain(f,_,m,i)),o(o({},t),((g={})[m]=o(o({axisType:i},r.defaultProps),{hide:!0,orientation:d.default.get(I,i+"."+v%2,null),domain:_,originalDomain:r.defaultProps.domain,isCategorical:y,layout:c}),g))}return t}),{})}(t,{Axis:i,graphicalItems:a,axisType:r,axisIdKey:h,stackGroups:u,dataStartIndex:s,dataEndIndex:l})),y},W=function(t){var e=t.children,n=t.defaultShowTooltip,r=A.findChildByType(e,M.Brush.displayName);return{chartX:0,chartY:0,dataStartIndex:r&&r.props&&r.props.startIndex||0,dataEndIndex:r&&r.props&&r.props.endIndex||t.data&&t.data.length-1||0,activeTooltipIndex:-1,isTooltipActive:!d.default.isNil(n)&&n}},U=function(t){return"horizontal"===t?{numericAxisName:"yAxis",cateAxisName:"xAxis"}:"vertical"===t?{numericAxisName:"xAxis",cateAxisName:"yAxis"}:"centric"===t?{numericAxisName:"radiusAxis",cateAxisName:"angleAxis"}:{numericAxisName:"angleAxis",cateAxisName:"radiusAxis"}};e.generateCategoricalChart=function(t){var e,n=t.chartName,r=t.GraphicalChild,a=t.eventType,u=void 0===a?"axis":a,s=t.axisComponents,f=t.legendContent,C=t.formatAxisMap,I=t.defaultProps,q=function(t,e){var n=e.graphicalItems,r=e.stackGroups,i=e.offset,a=e.updateId,u=e.dataStartIndex,l=e.dataEndIndex,c=t.barSize,f=t.layout,h=t.barGap,p=t.barCategoryGap,y=t.maxBarSize,v=U(f),g=v.numericAxisName,m=v.cateAxisName,_=function(t){return!(!t||!t.length)&&t.some((function(t){var e=A.getDisplayName(t&&t.type);return e&&e.indexOf("Bar")>=0}))}(n)&&k.getBarSizeList({barSize:c,stackGroups:r}),b=[];return n.forEach((function(n,c){var v,x=B(t.data,{dataStartIndex:u,dataEndIndex:l},n),O=n.props,w=O.dataKey,E=O.maxBarSize,M=n.props[g+"Id"],P=n.props[m+"Id"],S=s.reduce((function(t,r){var i,a=e[r.axisType+"Map"],u=n.props[r.axisType+"Id"],s=a&&a[u];return o(o({},t),((i={})[r.axisType]=s,i[r.axisType+"Ticks"]=k.getTicksOfAxis(s),i))}),{}),C=S[m],j=S[m+"Ticks"],T=r&&r[M]&&r[M].hasStack&&k.getStackedDataOfItem(n,r[M].stackGroups),N=A.getDisplayName(n.type).indexOf("Bar")>=0,D=k.getBandSizeOfAxis(C,j),I=[];if(N){var L=k.getBandSizeOfAxis(C,j,!0),R=d.default.isNil(E)?y:E;I=k.getBarPosition({barGap:h,barCategoryGap:p,bandSize:L!==D?L:D,sizeList:_[P],maxBarSize:R}),L!==D&&(I=I.map((function(t){return o(o({},t),{position:o(o({},t.position),{offset:t.position.offset-L/2})})})))}var z=n&&n.type&&n.type.getComposedData;z&&b.push({props:o(o({},z(o(o({},S),{displayedData:x,props:t,dataKey:w,item:n,bandSize:D,barPosition:I,offset:i,stackedData:T,layout:f,dataStartIndex:u,dataEndIndex:l}))),(v={key:n.key||"item-"+c},v[g]=S[g],v[m]=S[m],v.animationId=a,v)),childIndex:A.parseChildIndex(n,t.children),item:n})})),b},G=function(t,e){var i=t.props,a=t.dataStartIndex,u=t.dataEndIndex,l=t.updateId;if(!A.validateWidthHeight({props:i}))return null;var c=i.children,f=i.layout,h=i.stackOffset,p=i.data,y=i.reverseStackOrder,v=U(f),g=v.numericAxisName,_=v.cateAxisName,b=A.findAllByType(c,r),x=k.getStackGroupsByAxisId(p,b,g+"Id",_+"Id",h,y),O=s.reduce((function(t,e){var n,r=e.axisType+"Map";return o(o({},t),((n={})[r]=V(i,o(o({},e),{graphicalItems:b,stackGroups:e.axisType===g&&x,dataStartIndex:a,dataEndIndex:u})),n))}),{}),w=function(t,e){var n=t.props,r=t.graphicalItems,i=t.xAxisMap,a=void 0===i?{}:i,u=t.yAxisMap,s=void 0===u?{}:u,l=n.width,c=n.height,f=n.children,h=n.margin||{},p=A.findChildByType(f,M.Brush.displayName),y=A.findChildByType(f,m.Legend.displayName),v=Object.keys(s).reduce((function(t,e){var n,r=s[e],i=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[i]=t[i]+r.width,n))}),{left:h.left||0,right:h.right||0}),g=Object.keys(a).reduce((function(t,e){var n,r=a[e],i=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[i]=d.default.get(t,""+i)+r.height,n))}),{top:h.top||0,bottom:h.bottom||0}),_=o(o({},g),v),b=_.bottom;return p&&(_.bottom+=p.props.height||M.Brush.defaultProps.height),y&&e&&(_=k.appendOffsetOfLegend(_,r,n,e)),o(o({brushBottom:b},_),{width:l-_.left-_.right,height:c-_.top-_.bottom})}(o(o({},O),{props:i,graphicalItems:b}),null==e?void 0:e.legendBBox);Object.keys(O).forEach((function(t){O[t]=C(i,O[t],w,t.replace("Map",""),n)}));var E,P,j,T=O[_+"Map"],N=(E=T,P=S.getAnyElementOfObject(E),{tooltipTicks:j=k.getTicksOfAxis(P,!1,!0),orderedTooltipTicks:d.default.sortBy(j,(function(t){return t.coordinate})),tooltipAxis:P,tooltipAxisBandSize:k.getBandSizeOfAxis(P)}),D=q(i,o(o({},O),{dataStartIndex:a,dataEndIndex:u,updateId:l,graphicalItems:b,stackGroups:x,offset:w}));return o(o({formatedGraphicalItems:D,graphicalItems:b,offset:w,stackGroups:x},N),O)};return(e=function(t){function e(r){var i=t.call(this,r)||this;return i.handleLegendBBoxUpdate=function(t){if(t&&i.legendInstance){var e=i.state,n=e.dataStartIndex,r=e.dataEndIndex,a=e.updateId;i.setState(o({legendBBox:t},G({props:i.props,dataStartIndex:n,dataEndIndex:r,updateId:a},o(o({},i.state),{legendBBox:t}))))}},i.handleReceiveSyncEvent=function(t,e,n){var r=i.props,a=r.syncId,u=r.layout,s=i.state.updateId;if(a===t&&e!==i.uniqueChartId){var l=n.dataStartIndex,c=n.dataEndIndex;if(d.default.isNil(n.dataStartIndex)&&d.default.isNil(n.dataEndIndex))if(d.default.isNil(n.activeTooltipIndex))i.setState(n);else{var f=n.chartX,h=n.chartY,p=n.activeTooltipIndex,y=i.state,v=y.offset,g=y.tooltipTicks;if(!v)return;var m=o(o({},v),{x:v.left,y:v.top}),_=Math.min(f,m.x+m.width),b=Math.min(h,m.y+m.height),x=g[p]&&g[p].value,O=z(i.state,i.props.data,p),w=g[p]?{x:"horizontal"===u?g[p].coordinate:_,y:"horizontal"===u?b:g[p].coordinate}:L;i.setState(o(o({},n),{activeLabel:x,activeCoordinate:w,activePayload:O}))}else i.setState(o({dataStartIndex:l,dataEndIndex:c},G({props:i.props,dataStartIndex:l,dataEndIndex:c,updateId:s},i.state)))}},i.handleBrushChange=function(t){var e=t.startIndex,n=t.endIndex;if(e!==i.state.dataStartIndex||n!==i.state.dataEndIndex){var r=i.state.updateId;i.setState((function(){return o({dataStartIndex:e,dataEndIndex:n},G({props:i.props,dataStartIndex:e,dataEndIndex:n,updateId:r},i.state))})),i.triggerSyncEvent({dataStartIndex:e,dataEndIndex:n})}},i.handleMouseEnter=function(t){var e=i.props.onMouseEnter,n=i.getMouseInfo(t);if(n){var r=o(o({},n),{isTooltipActive:!0});i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)}},i.triggeredAfterMouseMove=function(t){var e=i.props.onMouseMove,n=i.getMouseInfo(t),r=n?o(o({},n),{isTooltipActive:!0}):{isTooltipActive:!1};i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)},i.handleItemMouseEnter=function(t){i.setState((function(){return{isTooltipActive:!0,activeItem:t,activePayload:t.tooltipPayload,activeCoordinate:t.tooltipPosition||{x:t.cx,y:t.cy}}}))},i.handleItemMouseLeave=function(){i.setState((function(){return{isTooltipActive:!1}}))},i.handleMouseMove=function(t){t&&d.default.isFunction(t.persist)&&t.persist(),i.triggeredAfterMouseMove(t)},i.handleMouseLeave=function(t){var e=i.props.onMouseLeave,n={isTooltipActive:!1};i.setState(n),i.triggerSyncEvent(n),d.default.isFunction(e)&&e(n,t),i.cancelThrottledTriggerAfterMouseMove()},i.handleOuterEvent=function(t){var e=A.getReactEventByType(t),n=d.default.get(i.props,""+e);if(e&&d.default.isFunction(n)){n(/.*touch.*/i.test(e)?i.getMouseInfo(t.changedTouches[0]):i.getMouseInfo(t),t)}},i.handleClick=function(t){var e=i.props.onClick,n=i.getMouseInfo(t);if(n){var r=o(o({},n),{isTooltipActive:!0});i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)}},i.handleMouseDown=function(t){var e=i.props.onMouseDown;d.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleMouseUp=function(t){var e=i.props.onMouseUp;d.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseMove(t.changedTouches[0])},i.handleTouchStart=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseDown(t.changedTouches[0])},i.handleTouchEnd=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseUp(t.changedTouches[0])},i.verticalCoordinatesGenerator=function(t){var e=t.xAxis,n=t.width,r=t.height,i=t.offset;return k.getCoordinatesOfGrid(E.CartesianAxis.getTicks(o(o(o({},E.CartesianAxis.defaultProps),e),{ticks:k.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.left,i.left+i.width)},i.horizontalCoordinatesGenerator=function(t){var e=t.yAxis,n=t.width,r=t.height,i=t.offset;return k.getCoordinatesOfGrid(E.CartesianAxis.getTicks(o(o(o({},E.CartesianAxis.defaultProps),e),{ticks:k.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.top,i.top+i.height)},i.axesTicksGenerator=function(t){return k.getTicksOfAxis(t,!0)},i.renderCursor=function(t){var e=i.state,r=e.isTooltipActive,a=e.activeCoordinate,u=e.activePayload,s=e.offset,l=e.activeTooltipIndex;if(!(t&&t.props.cursor&&r&&a))return null;var c,f=i.props.layout,p=_.Curve;if("ScatterChart"===n)c=a,p=b.Cross;else if("BarChart"===n)c=i.getCursorRectangle(),p=w.Rectangle;else if("radial"===f){var d=i.getCursorPoints(),y=d.cx,v=d.cy,g=d.radius;c={cx:y,cy:v,startAngle:d.startAngle,endAngle:d.endAngle,innerRadius:g,outerRadius:g},p=x.Sector}else c={points:i.getCursorPoints()},p=_.Curve;var m=t.key||"_recharts-cursor",O=o(o(o(o({stroke:"#ccc",pointerEvents:"none"},s),c),D.filterProps(t.props.cursor)),{payload:u,payloadIndex:l,key:m,className:"recharts-tooltip-cursor"});return h.isValidElement(t.props.cursor)?h.cloneElement(t.props.cursor,O):h.createElement(p,O)},i.renderPolarAxis=function(t,e,n){var r=d.default.get(t,"type.axisType"),a=d.default.get(i.state,r+"Map")[t.props[r+"Id"]];return h.cloneElement(t,o(o({},a),{className:r,key:t.key||e+"-"+n,ticks:k.getTicksOfAxis(a,!0)}))},i.renderXAxis=function(t,e,n){var r=i.state.xAxisMap[t.props.xAxisId];return i.renderAxis(r,t,e,n)},i.renderYAxis=function(t,e,n){var r=i.state.yAxisMap[t.props.yAxisId];return i.renderAxis(r,t,e,n)},i.renderGrid=function(t){var e=i.state,n=e.xAxisMap,r=e.yAxisMap,o=e.offset,a=i.props,u=a.width,s=a.height,l=S.getAnyElementOfObject(n),c=d.default.find(r,(function(t){return d.default.every(t.domain,R)}))||S.getAnyElementOfObject(r),f=t.props||{};return h.cloneElement(t,{key:t.key||"grid",x:S.isNumber(f.x)?f.x:o.left,y:S.isNumber(f.y)?f.y:o.top,width:S.isNumber(f.width)?f.width:o.width,height:S.isNumber(f.height)?f.height:o.height,xAxis:l,yAxis:c,offset:o,chartWidth:u,chartHeight:s,verticalCoordinatesGenerator:f.verticalCoordinatesGenerator||i.verticalCoordinatesGenerator,horizontalCoordinatesGenerator:f.horizontalCoordinatesGenerator||i.horizontalCoordinatesGenerator})},i.renderPolarGrid=function(t){var e=t.props.radialLines,n=i.state,r=n.radiusAxisMap,o=n.angleAxisMap,a=S.getAnyElementOfObject(r),u=S.getAnyElementOfObject(o),s=u.cx,l=u.cy,c=u.innerRadius,f=u.outerRadius;return h.cloneElement(t,{polarAngles:k.getTicksOfAxis(u,!0).map((function(t){return t.coordinate})),polarRadius:k.getTicksOfAxis(a,!0).map((function(t){return t.coordinate})),cx:s,cy:l,innerRadius:c,outerRadius:f,key:t.key||"polar-grid",radialLines:e})},i.renderLegend=function(){var t=i.state.formatedGraphicalItems,e=i.props,n=e.children,r=e.width,a=e.height,u=i.props.margin||{},s=r-(u.left||0)-(u.right||0),c=k.getLegendProps({children:n,formatedGraphicalItems:t,legendWidth:s,legendContent:f});if(!c)return null;var p=c.item,d=l(c,["item"]);return h.cloneElement(p,o(o({},d),{chartWidth:r,chartHeight:a,margin:u,ref:function(t){i.legendInstance=t},onBBoxUpdate:i.handleLegendBBoxUpdate}))},i.renderTooltip=function(){var t=i.props.children,e=A.findChildByType(t,g.Tooltip.displayName);if(!e)return null;var n=i.state,r=n.isTooltipActive,a=n.activeCoordinate,u=n.activePayload,s=n.activeLabel,l=n.offset;return h.cloneElement(e,{viewBox:o(o({},l),{x:l.left,y:l.top}),active:r,label:s,payload:r?u:[],coordinate:a})},i.renderBrush=function(t){var e=i.props,n=e.margin,r=e.data,o=i.state,a=o.offset,u=o.dataStartIndex,s=o.dataEndIndex,l=o.updateId;return h.cloneElement(t,{key:t.key||"_recharts-brush",onChange:k.combineEventHandlers(i.handleBrushChange,null,t.props.onChange),data:r,x:S.isNumber(t.props.x)?t.props.x:a.left,y:S.isNumber(t.props.y)?t.props.y:a.top+a.height+a.brushBottom-(n.bottom||0),width:S.isNumber(t.props.width)?t.props.width:a.width,startIndex:u,endIndex:s,updateId:"brush-"+l})},i.renderReferenceElement=function(t,e,n){if(!t)return null;var r=i.clipPathId,o=i.state,a=o.xAxisMap,u=o.yAxisMap,s=o.offset,l=t.props,c=l.xAxisId,f=l.yAxisId;return h.cloneElement(t,{key:t.key||e+"-"+n,xAxis:a[c],yAxis:u[f],viewBox:{x:s.left,y:s.top,width:s.width,height:s.height},clipPathId:r})},i.renderActivePoints=function(t){var n=t.item,r=t.activePoint,i=t.basePoint,a=t.childIndex,u=t.isRange,s=[],l=n.props.key,c=n.item.props,f=c.activeDot,h=c.dataKey,p=o(o({index:a,dataKey:h,cx:r.x,cy:r.y,r:4,fill:k.getMainColorOfGraphicItem(n.item),strokeWidth:2,stroke:"#fff",payload:r.payload,value:r.value,key:l+"-activePoint-"+a},D.filterProps(f)),D.adaptEventHandlers(f));return s.push(e.renderActiveDot(f,p)),i?s.push(e.renderActiveDot(f,o(o({},p),{cx:i.x,cy:i.y,key:l+"-basePoint-"+a}))):u&&s.push(null),s},i.renderGraphicChild=function(t,e,n){var r=i.filterFormatItem(t,e,n);if(!r)return null;var a=i.state,u=a.isTooltipActive,s=a.tooltipAxis,l=a.activeTooltipIndex,f=a.activeLabel,p=i.props.children,y=A.findChildByType(p,g.Tooltip.displayName),v=r.props,m=v.points,_=v.isRange,b=v.baseLine,x=r.item.props,O=x.activeDot,w=!x.hide&&u&&y&&O&&l>=0,E=y&&"click"===y.props.trigger?{onClick:k.combineEventHandlers(i.handleItemMouseEnter,null,r.props.onCLick)}:{onMouseLeave:k.combineEventHandlers(i.handleItemMouseLeave,null,r.props.onMouseLeave),onMouseEnter:k.combineEventHandlers(i.handleItemMouseEnter,null,r.props.onMouseEnter)},M=h.cloneElement(t,o(o({},r.props),E));if(w){var P=void 0,C=void 0;if(s.dataKey&&!s.allowDuplicatedCategory){var j="function"==typeof s.dataKey?function(t){return"function"==typeof s.dataKey?s.dataKey(t.payload):null}:"payload.".concat(s.dataKey.toString());P=S.findEntryInArray(m,j,f),C=_&&b&&S.findEntryInArray(b,j,f)}else P=m[l],C=_&&b&&b[l];if(!d.default.isNil(P))return c([M],i.renderActivePoints({item:r,activePoint:P,basePoint:C,childIndex:l,isRange:_}))}return _?[M,null,null]:[M,null]},i.renderCustomized=function(t){return h.cloneElement(t,o(o({},i.props),i.state))},i.uniqueChartId=d.default.isNil(r.id)?S.uniqueId("recharts"):r.id,i.clipPathId=i.uniqueChartId+"-clip",r.throttleDelay&&(i.triggeredAfterMouseMove=d.default.throttle(i.triggeredAfterMouseMove,r.throttleDelay)),i.state={},i}return i(e,t),e.prototype.componentDidMount=function(){d.default.isNil(this.props.syncId)||this.addListener()},e.prototype.componentDidUpdate=function(t){d.default.isNil(t.syncId)&&!d.default.isNil(this.props.syncId)&&this.addListener(),!d.default.isNil(this.props.syncId)&&d.default.isNil(t.syncId)&&this.removeListener()},e.prototype.componentWillUnmount=function(){d.default.isNil(this.props.syncId)||this.removeListener(),this.cancelThrottledTriggerAfterMouseMove()},e.prototype.cancelThrottledTriggerAfterMouseMove=function(){"function"==typeof this.triggeredAfterMouseMove.cancel&&this.triggeredAfterMouseMove.cancel()},e.prototype.getMouseInfo=function(t){if(!this.container)return null;var e=P.getOffset(this.container),n=P.calculateChartCoordinate(t,e),r=this.inRange(n.chartX,n.chartY);if(!r)return null;var i=this.state,a=i.xAxisMap,s=i.yAxisMap;if("axis"!==u&&a&&s){var l=S.getAnyElementOfObject(a).scale,c=S.getAnyElementOfObject(s).scale,f=l&&l.invert?l.invert(n.chartX):null,h=c&&c.invert?c.invert(n.chartY):null;return o(o({},n),{xValue:f,yValue:h})}var p=F(this.state,this.props.data,this.props.layout,r);return p?o(o({},n),p):null},e.prototype.getCursorRectangle=function(){var t=this.props.layout,e=this.state,n=e.activeCoordinate,r=e.offset,i=e.tooltipAxisBandSize,o=i/2;return{stroke:"none",fill:"#ccc",x:"horizontal"===t?n.x-o:r.left+.5,y:"horizontal"===t?r.top+.5:n.y-o,width:"horizontal"===t?i:r.width-1,height:"horizontal"===t?r.height-1:i}},e.prototype.getCursorPoints=function(){var t,e,n,r,i=this.props.layout,o=this.state,a=o.activeCoordinate,u=o.offset;if("horizontal"===i)n=t=a.x,e=u.top,r=u.top+u.height;else if("vertical"===i)r=e=a.y,t=u.left,n=u.left+u.width;else if(!d.default.isNil(a.cx)||!d.default.isNil(a.cy)){if("centric"!==i){f=a.cx,h=a.cy;var s=a.radius,l=a.startAngle,c=a.endAngle;return{points:[j.polarToCartesian(f,h,s,l),j.polarToCartesian(f,h,s,c)],cx:f,cy:h,radius:s,startAngle:l,endAngle:c}}var f=a.cx,h=a.cy,p=a.innerRadius,y=a.outerRadius,v=a.angle,g=j.polarToCartesian(f,h,p,v),m=j.polarToCartesian(f,h,y,v);t=g.x,e=g.y,n=m.x,r=m.y}return[{x:t,y:e},{x:n,y:r}]},e.prototype.inRange=function(t,e){var n=this.props.layout;if("horizontal"===n||"vertical"===n){var r=this.state.offset;return t>=r.left&&t<=r.left+r.width&&e>=r.top&&e<=r.top+r.height?{x:t,y:e}:null}var i=this.state,o=i.angleAxisMap,a=i.radiusAxisMap;if(o&&a){var u=S.getAnyElementOfObject(o);return j.inRangeOfSector({x:t,y:e},u)}return null},e.prototype.parseEventsOfWrapper=function(){var t=this.props.children,e=A.findChildByType(t,g.Tooltip.displayName),n={};e&&"axis"===u&&(n="click"===e.props.trigger?{onClick:this.handleClick}:{onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd});var r=D.adaptEventHandlers(this.props,this.handleOuterEvent);return o(o({},r),n)},e.prototype.addListener=function(){N.eventCenter.on(N.SYNC_EVENT,this.handleReceiveSyncEvent),N.eventCenter.setMaxListeners&&N.eventCenter._maxListeners&&N.eventCenter.setMaxListeners(N.eventCenter._maxListeners+1)},e.prototype.removeListener=function(){N.eventCenter.removeListener(N.SYNC_EVENT,this.handleReceiveSyncEvent),N.eventCenter.setMaxListeners&&N.eventCenter._maxListeners&&N.eventCenter.setMaxListeners(N.eventCenter._maxListeners-1)},e.prototype.triggerSyncEvent=function(t){var e=this.props.syncId;d.default.isNil(e)||N.eventCenter.emit(N.SYNC_EVENT,e,this.uniqueChartId,t)},e.prototype.filterFormatItem=function(t,e,n){for(var r=this.state.formatedGraphicalItems,i=0,o=r.length;i<o;i++){var a=r[i];if(a.item===t||a.props.key===t.key||e===A.getDisplayName(a.item.type)&&n===a.childIndex)return a}return null},e.prototype.renderAxis=function(t,e,n,r){var i=this.props,a=i.width,u=i.height;return h.default.createElement(E.CartesianAxis,o({},t,{className:"recharts-"+t.axisType+" "+t.axisType,key:e.key||n+"-"+r,viewBox:{x:0,y:0,width:a,height:u},ticksGenerator:this.axesTicksGenerator}))},e.prototype.renderClipPath=function(){var t=this.clipPathId,e=this.state.offset,n=e.left,r=e.top,i=e.height,o=e.width;return h.default.createElement("defs",null,h.default.createElement("clipPath",{id:t},h.default.createElement("rect",{x:n,y:r,height:i,width:o})))},e.prototype.render=function(){var t=this;if(!A.validateWidthHeight(this))return null;var e=this.props,n=e.children,r=e.className,i=e.width,a=e.height,u=e.style,s=e.compact,c=l(e,["children","className","width","height","style","compact"]),f=D.filterProps(c),d={CartesianGrid:{handler:this.renderGrid,once:!0},ReferenceArea:{handler:this.renderReferenceElement},ReferenceLine:{handler:this.renderReferenceElement},ReferenceDot:{handler:this.renderReferenceElement},XAxis:{handler:this.renderXAxis},YAxis:{handler:this.renderYAxis},Brush:{handler:this.renderBrush,once:!0},Bar:{handler:this.renderGraphicChild},Line:{handler:this.renderGraphicChild},Area:{handler:this.renderGraphicChild},Radar:{handler:this.renderGraphicChild},RadialBar:{handler:this.renderGraphicChild},Scatter:{handler:this.renderGraphicChild},Pie:{handler:this.renderGraphicChild},Funnel:{handler:this.renderGraphicChild},Tooltip:{handler:this.renderCursor,once:!0},PolarGrid:{handler:this.renderPolarGrid,once:!0},PolarAngleAxis:{handler:this.renderPolarAxis},PolarRadiusAxis:{handler:this.renderPolarAxis},Customized:{handler:this.renderCustomized}};if(s)return h.default.createElement(y.Surface,o({},f,{width:i,height:a}),this.renderClipPath(),A.renderByOrder(n,d));var v=this.parseEventsOfWrapper();return h.default.createElement("div",o({className:p.default("recharts-wrapper",r),style:o({position:"relative",cursor:"default",width:i,height:a},u)},v,{ref:function(e){t.container=e}}),h.default.createElement(y.Surface,o({},f,{width:i,height:a}),this.renderClipPath(),A.renderByOrder(n,d)),this.renderLegend(),this.renderTooltip())},e}(h.Component)).displayName=n,e.defaultProps=o({layout:"horizontal",stackOffset:"none",barCategoryGap:"10%",barGap:4,margin:{top:5,right:5,bottom:5,left:5},reverseStackOrder:!1},I),e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.children,i=t.width,a=t.height,u=t.layout,s=t.stackOffset,l=t.margin;if(d.default.isNil(e.updateId)){var c=W(t);return o(o(o(o({},c),{updateId:0}),G(o(o({props:t},c),{updateId:0}),e)),{prevData:n,prevWidth:i,prevHeight:a,prevLayout:u,prevStackOffset:s,prevMargin:l,prevChildren:r})}if(n!==e.prevData||i!==e.prevWidth||a!==e.prevHeight||u!==e.prevLayout||s!==e.prevStackOffset||!T.shallowEqual(l,e.prevMargin)){c=W(t);var f={chartX:e.chartX,chartY:e.chartY,isTooltipActive:e.isTooltipActive},h=o(o({},F(e,n,u)),{updateId:e.updateId+1}),p=o(o(o({},c),f),h);return o(o(o({},p),G(o({props:t},p),e)),{prevData:n,prevWidth:i,prevHeight:a,prevLayout:u,prevStackOffset:s,prevMargin:l,prevChildren:r})}if(!A.isChildrenEqual(r,e.prevChildren)){var y=!d.default.isNil(n)?e.updateId:e.updateId+1;return o(o({updateId:y},G(o(o({props:t},e),{updateId:y}),e)),{prevChildren:r})}return null},e.renderActiveDot=function(t,e){var n;return n=h.isValidElement(t)?h.cloneElement(t,e):d.default.isFunction(t)?t(e):h.default.createElement(O.Dot,o({},e)),h.default.createElement(v.Layer,{className:"recharts-active-dot",key:e.key},n)},e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Label=void 0;var l=a(n(0)),c=s(n(3)),f=s(n(4)),h=n(22),p=n(9),d=n(5),y=n(11),v=n(2),g=function(t,e,n){var i,o,a=t.position,u=t.viewBox,s=t.offset,h=t.className,p=u,v=p.cx,g=p.cy,m=p.innerRadius,_=p.outerRadius,b=p.startAngle,x=p.endAngle,O=p.clockWise,w=(m+_)/2,A=function(t,e){return d.mathSign(e-t)*Math.min(Math.abs(e-t),360)}(b,x),E=A>=0?1:-1;"insideStart"===a?(i=b+E*s,o=O):"insideEnd"===a?(i=x-E*s,o=!O):"end"===a&&(i=x+E*s,o=O),o=A<=0?o:!o;var M=y.polarToCartesian(v,g,w,i),P=y.polarToCartesian(v,g,w,i+359*(o?1:-1)),S="M"+M.x+","+M.y+"\n    A"+w+","+w+",0,1,"+(o?0:1)+",\n    "+P.x+","+P.y,k=c.default.isNil(t.id)?d.uniqueId("recharts-radial-line-"):t.id;return l.default.createElement("text",r({},n,{dominantBaseline:"central",className:f.default("recharts-radial-bar-label",h)}),l.default.createElement("defs",null,l.default.createElement("path",{id:k,d:S})),l.default.createElement("textPath",{xlinkHref:"#"+k},e))};function m(t){var e,n=t.viewBox,i=t.position,o=t.value,a=t.children,u=t.content,s=t.className,p=void 0===s?"":s,m=t.textBreakAll;if(!n||c.default.isNil(o)&&c.default.isNil(a)&&!l.isValidElement(u)&&!c.default.isFunction(u))return null;if(l.isValidElement(u))return l.cloneElement(u,t);if(c.default.isFunction(u)){if(e=l.createElement(u,t),l.isValidElement(e))return e}else e=function(t){var e=t.value,n=t.formatter,r=c.default.isNil(t.children)?e:t.children;return c.default.isFunction(n)?n(r):r}(t);var _=function(t){return d.isNumber(t.cx)}(n),b=v.filterProps(t,!0);if(_&&("insideStart"===i||"insideEnd"===i||"end"===i))return g(t,e,b);var x=_?function(t){var e=t.viewBox,n=t.offset,r=t.position,i=e,o=i.cx,a=i.cy,u=i.innerRadius,s=i.outerRadius,l=(i.startAngle+i.endAngle)/2;if("outside"===r){var c=y.polarToCartesian(o,a,s+n,l),f=c.x;return{x:f,y:c.y,textAnchor:f>=o?"start":"end",verticalAnchor:"middle"}}if("center"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"middle"};if("centerTop"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"start"};if("centerBottom"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"end"};var h=(u+s)/2,p=y.polarToCartesian(o,a,h,l);return{x:p.x,y:p.y,textAnchor:"middle",verticalAnchor:"middle"}}(t):function(t){var e,n=t.viewBox,i=t.parentViewBox,o=t.offset,a=t.position,u=n,s=u.x,l=u.y,f=u.width,h=u.height,p=h>=0?1:-1,y=p*o,v=p>0?"end":"start",g=p>0?"start":"end",m=f>=0?1:-1,_=m*o,b=m>0?"end":"start",x=m>0?"start":"end";if("top"===a)return r(r({},e={x:s+f/2,y:l-p*o,textAnchor:"middle",verticalAnchor:v}),i?{height:Math.max(l-i.y,0),width:f}:{});if("bottom"===a)return r(r({},e={x:s+f/2,y:l+h+y,textAnchor:"middle",verticalAnchor:g}),i?{height:Math.max(i.y+i.height-(l+h),0),width:f}:{});if("left"===a)return r(r({},e={x:s-_,y:l+h/2,textAnchor:b,verticalAnchor:"middle"}),i?{width:Math.max(e.x-i.x,0),height:h}:{});if("right"===a)return r(r({},e={x:s+f+_,y:l+h/2,textAnchor:x,verticalAnchor:"middle"}),i?{width:Math.max(i.x+i.width-e.x,0),height:h}:{});var O=i?{width:f,height:h}:{};return"insideLeft"===a?r({x:s+_,y:l+h/2,textAnchor:x,verticalAnchor:"middle"},O):"insideRight"===a?r({x:s+f-_,y:l+h/2,textAnchor:b,verticalAnchor:"middle"},O):"insideTop"===a?r({x:s+f/2,y:l+y,textAnchor:"middle",verticalAnchor:g},O):"insideBottom"===a?r({x:s+f/2,y:l+h-y,textAnchor:"middle",verticalAnchor:v},O):"insideTopLeft"===a?r({x:s+_,y:l+y,textAnchor:x,verticalAnchor:g},O):"insideTopRight"===a?r({x:s+f-_,y:l+y,textAnchor:b,verticalAnchor:g},O):"insideBottomLeft"===a?r({x:s+_,y:l+h-y,textAnchor:x,verticalAnchor:v},O):"insideBottomRight"===a?r({x:s+f-_,y:l+h-y,textAnchor:b,verticalAnchor:v},O):c.default.isObject(a)&&(d.isNumber(a.x)||d.isPercent(a.x))&&(d.isNumber(a.y)||d.isPercent(a.y))?r({x:s+d.getPercentValue(a.x,f),y:l+d.getPercentValue(a.y,h),textAnchor:"end",verticalAnchor:"end"},O):r({x:s+f/2,y:l+h/2,textAnchor:"middle",verticalAnchor:"middle"},O)}(t);return l.default.createElement(h.Text,r({className:f.default("recharts-label",p)},b,x,{breakAll:m}),e)}e.Label=m,m.displayName="Label",m.defaultProps={offset:5};var _=function(t){var e=t.cx,n=t.cy,r=t.angle,i=t.startAngle,o=t.endAngle,a=t.r,u=t.radius,s=t.innerRadius,l=t.outerRadius,c=t.x,f=t.y,h=t.top,p=t.left,y=t.width,v=t.height,g=t.clockWise,m=t.labelViewBox;if(m)return m;if(d.isNumber(y)&&d.isNumber(v)){if(d.isNumber(c)&&d.isNumber(f))return{x:c,y:f,width:y,height:v};if(d.isNumber(h)&&d.isNumber(p))return{x:h,y:p,width:y,height:v}}return d.isNumber(c)&&d.isNumber(f)?{x:c,y:f,width:0,height:0}:d.isNumber(e)&&d.isNumber(n)?{cx:e,cy:n,startAngle:i||r||0,endAngle:o||r||0,innerRadius:s||0,outerRadius:l||u||a||0,clockWise:g}:t.viewBox?t.viewBox:{}};m.parseViewBox=_,m.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var i=t.children,o=_(t),a=p.findAllByType(i,m.displayName).map((function(t,n){return l.cloneElement(t,{viewBox:e||o,key:"label-"+n})}));if(!n)return a;var s=function(t,e){return t?!0===t?l.default.createElement(m,{key:"label-implicit",viewBox:e}):d.isNumOrStr(t)?l.default.createElement(m,{key:"label-implicit",viewBox:e,value:t}):l.isValidElement(t)?t.type===m?l.cloneElement(t,{key:"label-implicit",viewBox:e}):l.default.createElement(m,{key:"label-implicit",content:t,viewBox:e}):c.default.isFunction(t)?l.default.createElement(m,{key:"label-implicit",content:t,viewBox:e}):c.default.isObject(t)?l.default.createElement(m,r({viewBox:e},t,{key:"label-implicit"})):null:null}(t.label,e||o);return u([s],a)}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createLabeledScales=e.ScaleHelper=e.rectWithCoords=e.rectWithPoints=e.formatAxisMap=void 0;var o=i(n(3)),a=n(7);e.formatAxisMap=function(t,e,n,i,o){var u=t.width,s=t.height,l=t.layout,c=Object.keys(e),f={left:n.left,leftMirror:n.left,right:u-n.right,rightMirror:u-n.right,top:n.top,topMirror:n.top,bottom:s-n.bottom,bottomMirror:s-n.bottom};return c.reduce((function(t,u){var s,c,h,p,d,y=e[u],v=y.orientation,g=y.domain,m=y.padding,_=void 0===m?{}:m,b=y.mirror,x=y.reversed,O=v+(b?"Mirror":"");c="xAxis"===i?[n.left+(_.left||0),n.left+n.width-(_.right||0)]:"yAxis"===i?"horizontal"===l?[n.top+n.height-(_.bottom||0),n.top+(_.top||0)]:[n.top+(_.top||0),n.top+n.height-(_.bottom||0)]:y.range,x&&(c=[c[1],c[0]]);var w=a.parseScale(y,o),A=w.scale,E=w.realScaleType;A.domain(g).range(c),a.checkDomainOfScale(A);var M=a.getTicksOfScale(A,r(r({},y),{realScaleType:E}));"xAxis"===i?(d="top"===v&&!b||"bottom"===v&&b,h=n.left,p=f[O]-d*y.height):"yAxis"===i&&(d="left"===v&&!b||"right"===v&&b,h=f[O]-d*y.width,p=n.top);var P=r(r(r({},y),M),{realScaleType:E,x:h,y:p,scale:A,width:"xAxis"===i?n.width:y.width,height:"yAxis"===i?n.height:y.height});return P.bandSize=a.getBandSizeOfAxis(P,M),y.hide||"xAxis"!==i?y.hide||(f[O]+=(d?-1:1)*P.width):f[O]+=(d?-1:1)*P.height,r(r({},t),((s={})[u]=P,s))}),{})};e.rectWithPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return{x:Math.min(n,i),y:Math.min(r,o),width:Math.abs(i-n),height:Math.abs(o-r)}};e.rectWithCoords=function(t){var n=t.x1,r=t.y1,i=t.x2,o=t.y2;return e.rectWithPoints({x:n,y:r},{x:i,y:o})};var u=function(){function t(t){this.scale=t}return t.create=function(e){return new t(e)},Object.defineProperty(t.prototype,"domain",{get:function(){return this.scale.domain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"range",{get:function(){return this.scale.range},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rangeMin",{get:function(){return this.range()[0]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rangeMax",{get:function(){return this.range()[1]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bandwidth",{get:function(){return this.scale.bandwidth},enumerable:!1,configurable:!0}),t.prototype.apply=function(t,e){var n=void 0===e?{}:e,r=n.bandAware,i=n.position;if(void 0!==t){if(i)switch(i){case"start":return this.scale(t);case"middle":var o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o;case"end":o=this.bandwidth?this.bandwidth():0;return this.scale(t)+o;default:return this.scale(t)}if(r){o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o}return this.scale(t)}},t.prototype.isInRange=function(t){var e=this.range(),n=e[0],r=e[e.length-1];return n<=r?t>=n&&t<=r:t>=r&&t<=n},t.EPS=1e-4,t}();e.ScaleHelper=u;e.createLabeledScales=function(t){var e=Object.keys(t).reduce((function(e,n){var i;return r(r({},e),((i={})[n]=u.create(t[n]),i))}),{});return r(r({},e),{apply:function(t,n){var r=(void 0===n?{}:n).bandAware;return o.default.mapValues(t,(function(t,n){return e[n].apply(t,{bandAware:r})}))},isInRange:function(t){return o.default.every(t,(function(t,n){return e[n].isInRange(t)}))}})}},function(t,e,n){(function(e){for(var r=n(179),i="undefined"==typeof window?e:window,o=["moz","webkit"],a="AnimationFrame",u=i["request"+a],s=i["cancel"+a]||i["cancelRequest"+a],l=0;!u&&l<o.length;l++)u=i[o[l]+"Request"+a],s=i[o[l]+"Cancel"+a]||i[o[l]+"CancelRequest"+a];if(!u||!s){var c=0,f=0,h=[];u=function(t){if(0===h.length){var e=r(),n=Math.max(0,1e3/60-(e-c));c=n+e,setTimeout((function(){var t=h.slice(0);h.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(c)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(n))}return h.push({handle:++f,callback:t,cancelled:!1}),f},s=function(t){for(var e=0;e<h.length;e++)h[e].handle===t&&(h[e].cancelled=!0)}}t.exports=function(t){return u.call(i,t)},t.exports.cancel=function(){s.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=u,t.cancelAnimationFrame=s}}).call(this,n(34))},function(t,e,n){var r=n(133),i=n(138);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Text=void 0;var f=s(n(0)),h=c(n(232)),p=c(n(4)),d=c(n(3)),y=n(5),v=n(8),g=n(2),m=n(43),_=/[ \f\n\r\t\v\u2028\u2029]+/,b=function(t){try{var e=[];return d.default.isNil(t.children)||(e=t.breakAll?t.children.toString().split(""):t.children.toString().split(_)),{wordsWithComputedWidth:e.map((function(e){return{word:e,width:m.getStringSize(e,t.style).width}})),spaceWidth:t.breakAll?0:m.getStringSize(" ",t.style).width}}catch(t){return null}},x=function(t){return[{words:d.default.isNil(t)?[]:t.toString().split(_)}]},O=function(t,e){if((t.width||t.scaleToFit)&&!v.Global.isSsr){if(e){var n=b(t);return n?function(t,e,n,r,i){var a=y.isNumber(t.maxLines),u=t.children,s=function(t){return void 0===t&&(t=[]),t.reduce((function(t,e){var o=e.word,a=e.width,u=t[t.length-1];if(u&&(null==r||i||u.width+a+n<r))u.words.push(o),u.width+=a+n;else{var s={words:[o],width:a};t.push(s)}return t}),[])},l=s(e);if(!a)return l;for(var c,f=function(e){var n=u.slice(0,e),i=b(o(o({},t),{children:n+"…"})).wordsWithComputedWidth,a=s(i);return[a.length>t.maxLines||function(t){return t.reduce((function(t,e){return t.width>e.width?t:e}))}(a).width>r,a]},h=0,p=u.length-1,d=0;h<=p&&d<=u.length-1;){var v=Math.floor((h+p)/2),g=f(v-1),m=g[0],_=g[1],x=f(v)[0];if(m||x||(h=v+1),m&&x&&(p=v-1),!m&&x){c=_;break}d++}return c||l}(t,n.wordsWithComputedWidth,n.spaceWidth,t.width,t.scaleToFit):x(t.children)}}return x(t.children)},w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){if(t.width!==e.prevWidth||t.scaleToFit!==e.prevScaleToFit||t.children!==e.prevChildren||t.style!==e.prevStyle||t.breakAll!==e.prevBreakAll){var n=t.children!==e.prevChildren||t.style!==e.prevStyle||t.breakAll!==e.prevBreakAll;return{prevWidth:t.width,prevScaleToFit:t.scaleToFit,prevChildren:t.children,prevStyle:t.style,wordsByLines:O(t,n)}}return null},e.prototype.render=function(){var t=this.props,e=t.dx,n=t.dy,r=t.textAnchor,i=t.verticalAnchor,a=t.scaleToFit,u=t.angle,s=t.lineHeight,c=t.capHeight,d=t.className,v=t.breakAll,m=l(t,["dx","dy","textAnchor","verticalAnchor","scaleToFit","angle","lineHeight","capHeight","className","breakAll"]),_=this.state.wordsByLines;if(!y.isNumOrStr(m.x)||!y.isNumOrStr(m.y))return null;var b,x=m.x+(y.isNumber(e)?e:0),O=m.y+(y.isNumber(n)?n:0);switch(i){case"start":b=h.default("calc("+c+")");break;case"middle":b=h.default("calc("+(_.length-1)/2+" * -"+s+" + ("+c+" / 2))");break;default:b=h.default("calc("+(_.length-1)+" * -"+s+")")}var w=[];if(a){var A=_[0].width,E=this.props.width;w.push("scale("+(y.isNumber(E)?E/A:1)/A+")")}return u&&w.push("rotate("+u+", "+x+", "+O+")"),w.length&&(m.transform=w.join(" ")),f.default.createElement("text",o({},g.filterProps(m,!0),{x:x,y:O,className:p.default("recharts-text",d),textAnchor:r}),_.map((function(t,e){return f.default.createElement("tspan",{x:x,dy:0===e?b:s,key:e},t.words.join(v?"":" "))})))},e.defaultProps={x:0,y:0,lineHeight:"1em",capHeight:"0.71em",scaleToFit:!1,textAnchor:"start",verticalAnchor:"end"},e}(f.Component);e.Text=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Dot=void 0;var c=s(n(0)),f=l(n(4)),h=n(2),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.r,i=t.className,a=f.default("recharts-dot",i);return e===+e&&n===+n&&r===+r?c.default.createElement("circle",o({},h.filterProps(this.props),h.adaptEventHandlers(this.props),{className:a,cx:e,cy:n,r:r})):null},e}(c.PureComponent);e.Dot=p},function(t,e,n){var r=n(38),i=n(134),o=n(135),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?i(t):o(t)}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.warn=void 0;e.warn=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Cell=void 0;e.Cell=function(t){return null},e.Cell.displayName="Cell"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Curve=void 0;var c=s(n(0)),f=n(70),h=l(n(4)),p=l(n(3)),d=n(2),y=n(5),v={curveBasisClosed:f.curveBasisClosed,curveBasisOpen:f.curveBasisOpen,curveBasis:f.curveBasis,curveLinearClosed:f.curveLinearClosed,curveLinear:f.curveLinear,curveMonotoneX:f.curveMonotoneX,curveMonotoneY:f.curveMonotoneY,curveNatural:f.curveNatural,curveStep:f.curveStep,curveStepAfter:f.curveStepAfter,curveStepBefore:f.curveStepBefore},g=function(t){return t.x===+t.x&&t.y===+t.y},m=function(t){return t.x},_=function(t){return t.y},b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t,e=this.props,n=e.type,r=e.points,i=e.baseLine,a=e.layout,u=e.connectNulls,s=function(t,e){if(p.default.isFunction(t))return t;var n="curve"+p.default.upperFirst(t);return"curveMonotone"===n&&e?v[n+("vertical"===e?"Y":"X")]:v[n]||f.curveLinear}(n,a),l=u?r.filter((function(t){return g(t)})):r;if(p.default.isArray(i)){var c=u?i.filter((function(t){return g(t)})):i,h=l.map((function(t,e){return o(o({},t),{base:c[e]})}));return(t="vertical"===a?f.area().y(_).x1(m).x0((function(t){return t.base.x})):f.area().x(m).y1(_).y0((function(t){return t.base.y}))).defined(g).curve(s),t(h)}return(t="vertical"===a&&y.isNumber(i)?f.area().y(_).x1(m).x0(i):y.isNumber(i)?f.area().x(m).y1(_).y0(i):f.line().x(m).y(_)).defined(g).curve(s),t(l)},e.prototype.render=function(){var t=this.props,e=t.className,n=t.points,r=t.path,i=t.pathRef;if(!(n&&n.length||r))return null;var a=n&&n.length?this.getPath():r;return c.default.createElement("path",o({},d.filterProps(this.props),d.adaptEventHandlers(this.props),{className:h.default("recharts-curve",e),d:a,ref:i}))},e.defaultProps={type:"linear",points:[],connectNulls:!1},e}(c.PureComponent);e.Curve=b},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Rectangle=void 0;var c=s(n(0)),f=l(n(4)),h=l(n(10)),p=n(2),d=function(t,e,n,r,i){var o,a=Math.min(Math.abs(n)/2,Math.abs(r)/2),u=r>=0?1:-1,s=n>=0?1:-1,l=r>=0&&n>=0||r<0&&n<0?1:0;if(a>0&&i instanceof Array){for(var c=[0,0,0,0],f=0;f<4;f++)c[f]=i[f]>a?a:i[f];o="M"+t+","+(e+u*c[0]),c[0]>0&&(o+="A "+c[0]+","+c[0]+",0,0,"+l+","+(t+s*c[0])+","+e),o+="L "+(t+n-s*c[1])+","+e,c[1]>0&&(o+="A "+c[1]+","+c[1]+",0,0,"+l+",\n        "+(t+n)+","+(e+u*c[1])),o+="L "+(t+n)+","+(e+r-u*c[2]),c[2]>0&&(o+="A "+c[2]+","+c[2]+",0,0,"+l+",\n        "+(t+n-s*c[2])+","+(e+r)),o+="L "+(t+s*c[3])+","+(e+r),c[3]>0&&(o+="A "+c[3]+","+c[3]+",0,0,"+l+",\n        "+t+","+(e+r-u*c[3])),o+="Z"}else if(a>0&&i===+i&&i>0){o="M "+t+","+(e+u*(c=Math.min(a,i)))+"\n            A "+c+","+c+",0,0,"+l+","+(t+s*c)+","+e+"\n            L "+(t+n-s*c)+","+e+"\n            A "+c+","+c+",0,0,"+l+","+(t+n)+","+(e+u*c)+"\n            L "+(t+n)+","+(e+r-u*c)+"\n            A "+c+","+c+",0,0,"+l+","+(t+n-s*c)+","+(e+r)+"\n            L "+(t+s*c)+","+(e+r)+"\n            A "+c+","+c+",0,0,"+l+","+t+","+(e+r-u*c)+" Z"}else o="M "+t+","+e+" h "+n+" v "+r+" h "+-n+" Z";return o},y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.width,a=e.height,u=e.radius,s=e.className,l=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isAnimationActive,b=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||0===i||0===a)return null;var x=f.default("recharts-rectangle",s);return b?c.default.createElement(h.default,{canBegin:l>0,from:{width:i,height:a,x:n,y:r},to:{width:i,height:a,x:n,y:r},duration:g,animationEasing:v,isActive:b},(function(e){var n=e.width,r=e.height,i=e.x,a=e.y;return c.default.createElement(h.default,{canBegin:l>0,from:"0px "+(-1===l?1:l)+"px",to:l+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,isActive:_,easing:v},c.default.createElement("path",o({},p.filterProps(t.props,!0),{className:x,d:d(i,a,n,r,u),ref:function(e){t.node=e}})))})):c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:x,d:d(n,r,i,a,u)}))},e.defaultProps={x:0,y:0,width:0,height:0,radius:0,isAnimationActive:!1,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(c.PureComponent);e.Rectangle=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.XAxis=void 0;e.XAxis=function(){return null},e.XAxis.displayName="XAxis",e.XAxis.defaultProps={allowDecimals:!0,hide:!1,orientation:"bottom",width:0,height:30,mirror:!1,xAxisId:0,tickCount:5,type:"category",domain:[0,"auto"],padding:{left:0,right:0},allowDataOverflow:!1,scale:"auto",reversed:!1,allowDuplicatedCategory:!0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YAxis=void 0;e.YAxis=function(){return null},e.YAxis.displayName="YAxis",e.YAxis.defaultProps={allowDuplicatedCategory:!0,allowDecimals:!0,hide:!1,orientation:"left",width:60,height:0,mirror:!1,yAxisId:0,tickCount:5,type:"number",domain:[0,"auto"],padding:{top:0,bottom:0},allowDataOverflow:!1,scale:"auto",reversed:!1}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Surface=void 0;var a=o(n(0)),u=o(n(4)),s=n(2);e.Surface=function(t){var e=t.children,n=t.width,o=t.height,l=t.viewBox,c=t.className,f=t.style,h=i(t,["children","width","height","viewBox","className","style"]),p=l||{width:n,height:o,x:0,y:0},d=u.default("recharts-surface",c);return a.default.createElement("svg",r({},s.filterProps(h,!0,!0),{className:d,width:n,height:o,style:f,viewBox:p.x+" "+p.y+" "+p.width+" "+p.height,version:"1.1"}),e)}},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Tooltip=void 0;var c=s(n(0)),f=n(10),h=l(n(3)),p=l(n(4)),d=n(228),y=n(8),v=n(5),g="recharts-tooltip-wrapper";function m(t){return t.dataKey}var _=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e.getTranslate=function(t){var n=t.key,r=t.tooltipDimension,i=t.viewBoxDimension,o=e.props,a=o.allowEscapeViewBox,u=o.coordinate,s=o.offset,l=o.position,c=o.viewBox;if(l&&v.isNumber(l[n]))return l[n];var f=u[n]-r-s,h=u[n]+s;return a[n]?h:u[n]+r+s>c[n]+i?Math.max(f,c[n]):Math.max(h,c[n])},e}return i(e,t),e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var r=this.wrapperNode.getBoundingClientRect();(Math.abs(r.width-e)>1||Math.abs(r.height-n)>1)&&this.setState({boxWidth:r.width,boxHeight:r.height})}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1})},e.prototype.render=function(){var t,e,n,r=this,i=this.props,a=i.payload,u=i.isAnimationActive,s=i.animationDuration,l=i.animationEasing,y=i.filterNull,_=function(t,e){return!0===t?h.default.uniqBy(e,m):h.default.isFunction(t)?h.default.uniqBy(e,t):e}(i.payloadUniqBy,y&&a&&a.length?a.filter((function(t){return!h.default.isNil(t.value)})):a),b=_&&_.length,x=this.props,O=x.content,w=x.viewBox,A=x.coordinate,E=x.position,M=x.active,P=x.wrapperStyle,S=o({pointerEvents:"none",visibility:M&&b?"visible":"hidden",position:"absolute",top:0,left:0},P);if(E&&v.isNumber(E.x)&&v.isNumber(E.y))e=E.x,n=E.y;else{var k=this.state,C=k.boxWidth,j=k.boxHeight;C>0&&j>0&&A?(e=this.getTranslate({key:"x",tooltipDimension:C,viewBoxDimension:w.width}),n=this.getTranslate({key:"y",tooltipDimension:j,viewBoxDimension:w.height})):S.visibility="hidden"}S=o(o({},f.translateStyle({transform:this.props.useTranslate3d?"translate3d("+e+"px, "+n+"px, 0)":"translate("+e+"px, "+n+"px)"})),S),u&&M&&(S=o(o({},f.translateStyle({transition:"transform "+s+"ms "+l})),S));var T=p.default(g,((t={})[g+"-right"]=v.isNumber(e)&&A&&v.isNumber(A.x)&&e>=A.x,t[g+"-left"]=v.isNumber(e)&&A&&v.isNumber(A.x)&&e<A.x,t[g+"-bottom"]=v.isNumber(n)&&A&&v.isNumber(A.y)&&n>=A.y,t[g+"-top"]=v.isNumber(n)&&A&&v.isNumber(A.y)&&n<A.y,t));return c.default.createElement("div",{className:T,style:S,ref:function(t){r.wrapperNode=t}},function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):h.default.isFunction(t)?c.default.createElement(t,e):c.default.createElement(d.DefaultTooltipContent,o({},e))}(O,o(o({},this.props),{payload:_})))},e.displayName="Tooltip",e.defaultProps={active:!1,allowEscapeViewBox:{x:!1,y:!1},offset:10,viewBox:{x1:0,x2:0,y1:0,y2:0},coordinate:{x:0,y:0},cursorStyle:{},separator:" : ",wrapperStyle:{},contentStyle:{},itemStyle:{},labelStyle:{},cursor:!0,trigger:"hover",isAnimationActive:!y.Global.isSsr,animationEasing:"ease",animationDuration:400,filterNull:!0,useTranslate3d:!1},e}(c.PureComponent);e.Tooltip=_},function(t,e,n){var r=n(123),i=n(124),o=n(125),a=n(126),u=n(127);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(76);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(12).Symbol;t.exports=r},function(t,e,n){var r=n(20)(Object,"create");t.exports=r},function(t,e,n){var r=n(147);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},function(t,e,n){var r=n(41);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.calculateChartCoordinate=e.getOffset=e.getStringSize=e.getStyleString=void 0;var o=n(8),a={widthCache:{},cacheCount:0},u={position:"absolute",top:"-20000px",left:0,padding:0,margin:0,border:"none",whiteSpace:"pre"},s=["minWidth","maxWidth","width","minHeight","maxHeight","height","top","left","fontSize","lineHeight","padding","margin","paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom"];e.getStyleString=function(t){return Object.keys(t).reduce((function(e,n){return""+e+(n.split("").reduce((function(t,e){return e===e.toUpperCase()?i(t,["-",e.toLowerCase()]):i(t,[e])}),[]).join("")+":")+(r=n,o=t[n],(s.indexOf(r)>=0&&o===+o?o+"px":o)+";");var r,o}),"")};e.getStringSize=function(t,n){if(void 0===n&&(n={}),null==t||o.Global.isSsr)return{width:0,height:0};var i=""+t,s=i+"-"+e.getStyleString(n);if(a.widthCache[s])return a.widthCache[s];try{var l=document.getElementById("recharts_measurement_span");l||((l=document.createElement("span")).setAttribute("id","recharts_measurement_span"),l.setAttribute("aria-hidden","true"),document.body.appendChild(l));var c=r(r({},u),n);Object.keys(c).map((function(t){return l.style[t]=c[t],t})),l.textContent=i;var f=l.getBoundingClientRect(),h={width:f.width,height:f.height};return a.widthCache[s]=h,++a.cacheCount>2e3&&(a.cacheCount=0,a.widthCache={}),h}catch(t){return{width:0,height:0}}};e.getOffset=function(t){var e=t.ownerDocument.documentElement,n={top:0,left:0};return void 0!==t.getBoundingClientRect&&(n=t.getBoundingClientRect()),{top:n.top+window.pageYOffset-e.clientTop,left:n.left+window.pageXOffset-e.clientLeft}};e.calculateChartCoordinate=function(t,e){return{chartX:Math.round(t.pageX-e.left),chartY:Math.round(t.pageY-e.top)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.shallowEqual=void 0,e.shallowEqual=function(t,e){for(var n in t)if({}.hasOwnProperty.call(t,n)&&(!{}.hasOwnProperty.call(e,n)||t[n]!==e[n]))return!1;for(var n in e)if({}.hasOwnProperty.call(e,n)&&!{}.hasOwnProperty.call(t,n))return!1;return!0}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sector=void 0;var c=s(n(0)),f=l(n(4)),h=n(2),p=n(11),d=n(5),y=function(t){var e=t.cx,n=t.cy,r=t.radius,i=t.angle,o=t.sign,a=t.isExternal,u=t.cornerRadius,s=t.cornerIsExternal,l=u*(a?1:-1)+r,c=Math.asin(u/l)/p.RADIAN,f=s?i:i+o*c,h=s?i-o*c:i;return{center:p.polarToCartesian(e,n,l,f),circleTangency:p.polarToCartesian(e,n,r,f),lineTangency:p.polarToCartesian(e,n,l*Math.cos(c*p.RADIAN),h),theta:c}},v=function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.startAngle,a=function(t,e){return d.mathSign(e-t)*Math.min(Math.abs(e-t),359.999)}(o,t.endAngle),u=o+a,s=p.polarToCartesian(e,n,i,o),l=p.polarToCartesian(e,n,i,u),c="M "+s.x+","+s.y+"\n    A "+i+","+i+",0,\n    "+ +(Math.abs(a)>180)+","+ +(o>u)+",\n    "+l.x+","+l.y+"\n  ";if(r>0){var f=p.polarToCartesian(e,n,r,o),h=p.polarToCartesian(e,n,r,u);c+="L "+h.x+","+h.y+"\n            A "+r+","+r+",0,\n            "+ +(Math.abs(a)>180)+","+ +(o<=u)+",\n            "+f.x+","+f.y+" Z"}else c+="L "+e+","+n+" Z";return c},g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.cornerRadius,u=t.forceCornerRadius,s=t.cornerIsExternal,l=t.startAngle,p=t.endAngle,g=t.className;if(i<r||l===p)return null;var m,_=f.default("recharts-sector",g),b=i-r,x=d.getPercentValue(a,b,0,!0);return m=x>0&&Math.abs(l-p)<360?function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.cornerRadius,a=t.forceCornerRadius,u=t.cornerIsExternal,s=t.startAngle,l=t.endAngle,c=d.mathSign(l-s),f=y({cx:e,cy:n,radius:i,angle:s,sign:c,cornerRadius:o,cornerIsExternal:u}),h=f.circleTangency,p=f.lineTangency,g=f.theta,m=y({cx:e,cy:n,radius:i,angle:l,sign:-c,cornerRadius:o,cornerIsExternal:u}),_=m.circleTangency,b=m.lineTangency,x=m.theta,O=u?Math.abs(s-l):Math.abs(s-l)-g-x;if(O<0)return a?"M "+p.x+","+p.y+"\n        a"+o+","+o+",0,0,1,"+2*o+",0\n        a"+o+","+o+",0,0,1,"+2*-o+",0\n      ":v({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:s,endAngle:l});var w="M "+p.x+","+p.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+h.x+","+h.y+"\n    A"+i+","+i+",0,"+ +(O>180)+","+ +(c<0)+","+_.x+","+_.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+b.x+","+b.y+"\n  ";if(r>0){var A=y({cx:e,cy:n,radius:r,angle:s,sign:c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),E=A.circleTangency,M=A.lineTangency,P=A.theta,S=y({cx:e,cy:n,radius:r,angle:l,sign:-c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),k=S.circleTangency,C=S.lineTangency,j=S.theta,T=u?Math.abs(s-l):Math.abs(s-l)-P-j;if(T<0&&0===o)return w+"L"+e+","+n+"Z";w+="L"+C.x+","+C.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+k.x+","+k.y+"\n      A"+r+","+r+",0,"+ +(T>180)+","+ +(c>0)+","+E.x+","+E.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+M.x+","+M.y+"Z"}else w+="L"+e+","+n+"Z";return w}({cx:e,cy:n,innerRadius:r,outerRadius:i,cornerRadius:Math.min(x,b/2),forceCornerRadius:u,cornerIsExternal:s,startAngle:l,endAngle:p}):v({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:l,endAngle:p}),c.default.createElement("path",o({},h.filterProps(this.props,!0),{className:_,d:m}))},e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,startAngle:0,endAngle:0,cornerRadius:0,forceCornerRadius:!1,cornerIsExternal:!1},e}(c.PureComponent);e.Sector=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Polygon=void 0;var h=s(n(0)),p=f(n(4)),d=n(2),y=function(t){return t&&t.x===+t.x&&t.y===+t.y},v=function(t,e){var n=function(t){void 0===t&&(t=[]);var e=[[]];return t.forEach((function(t){y(t)?e[e.length-1].push(t):e[e.length-1].length>0&&e.push([])})),y(t[0])&&e[e.length-1].push(t[0]),e[e.length-1].length<=0&&(e=e.slice(0,-1)),e}(t);e&&(n=[n.reduce((function(t,e){return c(t,e)}),[])]);var r=n.map((function(t){return t.reduce((function(t,e,n){return t+(0===n?"M":"L")+e.x+","+e.y}),"")})).join("");return 1===n.length?r+"Z":r},g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.points,n=t.className,r=t.baseLinePoints,i=t.connectNulls,a=l(t,["points","className","baseLinePoints","connectNulls"]);if(!e||!e.length)return null;var u=p.default("recharts-polygon",n);if(r&&r.length){var s=a.stroke&&"none"!==a.stroke,c=function(t,e,n){var r=v(t,n);return("Z"===r.slice(-1)?r.slice(0,-1):r)+"L"+v(e.reverse(),n).slice(1)}(e,r,i);return h.default.createElement("g",{className:u},h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"Z"===c.slice(-1)?a.fill:"none",stroke:"none",d:c})),s?h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"none",d:v(e,i)})):null,s?h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"none",d:v(r,i)})):null)}var f=v(e,i);return h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"Z"===f.slice(-1)?a.fill:"none",className:u,d:f}))},e}(h.PureComponent);e.Polygon=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarRadiusAxis=void 0;var f=s(n(0)),h=c(n(3)),p=n(22),d=n(17),y=n(6),v=n(11),g=n(2),m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickValueCoord=function(t){var e=t.coordinate,n=this.props,r=n.angle,i=n.cx,o=n.cy;return v.polarToCartesian(i,o,e,r)},e.prototype.getTickTextAnchor=function(){var t;switch(this.props.orientation){case"left":t="end";break;case"right":t="start";break;default:t="middle"}return t},e.prototype.getViewBox=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,o=h.default.maxBy(i,(function(t){return t.coordinate||0}));return{cx:e,cy:n,startAngle:r,endAngle:r,innerRadius:h.default.minBy(i,(function(t){return t.coordinate||0})).coordinate||0,outerRadius:o.coordinate||0}},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,a=t.axisLine,u=l(t,["cx","cy","angle","ticks","axisLine"]),s=i.reduce((function(t,e){return[Math.min(t[0],e.coordinate),Math.max(t[1],e.coordinate)]}),[1/0,-1/0]),c=v.polarToCartesian(e,n,s[0],r),h=v.polarToCartesian(e,n,s[1],r),p=o(o(o(o({},g.filterProps(u)),{fill:"none"}),g.filterProps(a)),{x1:c.x,y1:c.y,x2:h.x,y2:h.y});return f.default.createElement("line",o({className:"recharts-polar-radius-axis-line"},p))},e.renderTickItem=function(t,e,n){return f.default.isValidElement(t)?f.default.cloneElement(t,e):h.default.isFunction(t)?t(e):f.default.createElement(p.Text,o({},e,{className:"recharts-polar-radius-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,a=n.angle,u=n.tickFormatter,s=n.stroke,c=l(n,["ticks","tick","angle","tickFormatter","stroke"]),h=this.getTickTextAnchor(),p=g.filterProps(c),d=g.filterProps(i),v=r.map((function(n,r){var l=t.getTickValueCoord(n),c=o(o(o(o(o(o({textAnchor:h,transform:"rotate("+(90-a)+", "+l.x+", "+l.y+")"},p),{stroke:"none",fill:s}),d),{index:r}),l),{payload:n});return f.default.createElement(y.Layer,o({className:"recharts-polar-radius-axis-tick",key:"tick-"+r},g.adaptEventsOfChild(t.props,n,r)),e.renderTickItem(i,c,u?u(n.value,r):n.value))}));return f.default.createElement(y.Layer,{className:"recharts-polar-radius-axis-ticks"},v)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.axisLine,r=t.tick;return e&&e.length?f.default.createElement(y.Layer,{className:"recharts-polar-radius-axis"},n&&this.renderAxisLine(),r&&this.renderTicks(),d.Label.renderCallByParent(this.props,this.getViewBox())):null},e.displayName="PolarRadiusAxis",e.axisType="radiusAxis",e.defaultProps={type:"number",radiusAxisId:0,cx:0,cy:0,angle:0,orientation:"right",stroke:"#ccc",axisLine:!0,tick:!0,tickCount:5,domain:[0,"auto"],allowDataOverflow:!1,scale:"auto",allowDuplicatedCategory:!0},e}(f.PureComponent);e.PolarRadiusAxis=m},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarAngleAxis=void 0;var c=s(n(0)),f=l(n(3)),h=n(6),p=n(23),d=n(46),y=n(22),v=n(2),g=n(11),m=Math.PI/180,_=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickLineCoord=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.radius,o=e.orientation,a=e.tickSize||8,u=g.polarToCartesian(n,r,i,t.coordinate),s=g.polarToCartesian(n,r,i+("inner"===o?-1:1)*a,t.coordinate);return{x1:u.x,y1:u.y,x2:s.x,y2:s.y}},e.prototype.getTickTextAnchor=function(t){var e=this.props.orientation,n=Math.cos(-t.coordinate*m);return n>1e-5?"outer"===e?"start":"end":n<-1e-5?"outer"===e?"end":"start":"middle"},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.radius,i=t.axisLine,a=t.axisLineType,u=o(o(o({},v.filterProps(this.props)),{fill:"none"}),v.filterProps(i));if("circle"===a)return c.default.createElement(p.Dot,o({className:"recharts-polar-angle-axis-line"},u,{cx:e,cy:n,r:r}));var s=this.props.ticks.map((function(t){return g.polarToCartesian(e,n,r,t.coordinate)}));return c.default.createElement(d.Polygon,o({className:"recharts-polar-angle-axis-line"},u,{points:s}))},e.renderTickItem=function(t,e,n){return c.default.isValidElement(t)?c.default.cloneElement(t,e):f.default.isFunction(t)?t(e):c.default.createElement(y.Text,o({},e,{className:"recharts-polar-angle-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,a=n.tickLine,u=n.tickFormatter,s=n.stroke,l=v.filterProps(this.props),f=v.filterProps(i),p=o(o(o({},l),{fill:"none"}),v.filterProps(a)),d=r.map((function(n,r){var d=t.getTickLineCoord(n),y=t.getTickTextAnchor(n),g=o(o(o(o({textAnchor:y},l),{stroke:"none",fill:s}),f),{index:r,payload:n,x:d.x2,y:d.y2});return c.default.createElement(h.Layer,o({className:"recharts-polar-angle-axis-tick",key:"tick-"+r},v.adaptEventsOfChild(t.props,n,r)),a&&c.default.createElement("line",o({className:"recharts-polar-angle-axis-tick-line"},p,d)),i&&e.renderTickItem(i,g,u?u(n.value,r):n.value))}));return c.default.createElement(h.Layer,{className:"recharts-polar-angle-axis-ticks"},d)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.radius,r=t.axisLine;return n<=0||!e||!e.length?null:c.default.createElement(h.Layer,{className:"recharts-polar-angle-axis"},r&&this.renderAxisLine(),this.renderTicks())},e.displayName="PolarAngleAxis",e.axisType="angleAxis",e.defaultProps={type:"category",angleAxisId:0,scale:"auto",cx:0,cy:0,domain:[0,"auto"],orientation:"outer",axisLine:!0,tickLine:!0,tickSize:8,tick:!0,hide:!1,allowDuplicatedCategory:!0},e}(c.PureComponent);e.PolarAngleAxis=_},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ifOverflowMatches=void 0;e.ifOverflowMatches=function(t,e){var n=t.alwaysShow,r=t.ifOverflow;return n&&(r="extendDomain"),r===e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorBar=void 0;var a=o(n(0)),u=n(6),s=n(2);function l(t){var e=t.offset,n=t.layout,o=t.width,l=t.dataKey,c=t.data,f=t.dataPointFormatter,h=t.xAxis,p=t.yAxis,d=i(t,["offset","layout","width","dataKey","data","dataPointFormatter","xAxis","yAxis"]),y=s.filterProps(d),v=c.map((function(t,i){var s=f(t,l),c=s.x,d=s.y,v=s.value,g=s.errorVal;if(!g)return null;var m,_,b=[];if(Array.isArray(g)?(m=g[0],_=g[1]):m=_=g,"vertical"===n){var x=h.scale,O=d+e,w=O+o,A=O-o,E=x(v-m),M=x(v+_);b.push({x1:M,y1:w,x2:M,y2:A}),b.push({x1:E,y1:O,x2:M,y2:O}),b.push({x1:E,y1:w,x2:E,y2:A})}else if("horizontal"===n){x=p.scale;var P=c+e;E=P-o,M=P+o,w=x(v-m),A=x(v+_);b.push({x1:E,y1:A,x2:M,y2:A}),b.push({x1:P,y1:w,x2:P,y2:A}),b.push({x1:E,y1:w,x2:M,y2:w})}return a.default.createElement(u.Layer,r({className:"recharts-errorBar",key:"bar-"+i},y),b.map((function(t,e){return a.default.createElement("line",r({},t,{key:"line-"+e}))})))}));return a.default.createElement(u.Layer,{className:"recharts-errorBars"},v)}e.ErrorBar=l,l.defaultProps={stroke:"black",strokeWidth:1.5,width:5,offset:0,layout:"horizontal"},l.displayName="ErrorBar"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ZAxis=void 0;e.ZAxis=function(){return null},e.ZAxis.displayName="ZAxis",e.ZAxis.defaultProps={zAxisId:0,range:[64,64],scale:"auto",type:"number"}},function(t,e){t.exports=n},function(t,e,n){"use strict";var r=u(n(221)),i=u(n(226)),o=u(n(96)),a=u(n(93));function u(t){return t&&t.__esModule?t:{default:t}}t.exports={Transition:a.default,TransitionGroup:o.default,ReplaceTransition:i.default,CSSTransition:r.default}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Legend=void 0;var f=s(n(0)),h=c(n(3)),p=n(121),d=n(5);function y(t){return t.value}function v(t,e){return!0===t?h.default.uniqBy(e,y):h.default.isFunction(t)?h.default.uniqBy(e,t):e}var g=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e}return i(e,t),e.getWithHeight=function(t,e){var n=t.props.layout;return"vertical"===n&&d.isNumber(t.props.height)?{height:t.props.height}:"horizontal"===n?{width:t.props.width||e}:null},e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.getBBox=function(){return this.wrapperNode&&this.wrapperNode.getBoundingClientRect?this.wrapperNode.getBoundingClientRect():null},e.prototype.getBBoxSnapshot=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;return e>=0&&n>=0?{width:e,height:n}:null},e.prototype.getDefaultPosition=function(t){var e,n,r=this.props,i=r.layout,a=r.align,u=r.verticalAlign,s=r.margin,l=r.chartWidth,c=r.chartHeight;t&&(void 0!==t.left&&null!==t.left||void 0!==t.right&&null!==t.right)||(e="center"===a&&"vertical"===i?{left:((l||0)-(this.getBBoxSnapshot()||{width:0}).width)/2}:"right"===a?{right:s&&s.right||0}:{left:s&&s.left||0});t&&(void 0!==t.top&&null!==t.top||void 0!==t.bottom&&null!==t.bottom)||(n="middle"===u?{top:((c||0)-(this.getBBoxSnapshot()||{height:0}).height)/2}:"bottom"===u?{bottom:s&&s.bottom||0}:{top:s&&s.top||0});return o(o({},e),n)},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight,r=this.props.onBBoxUpdate;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var i=this.wrapperNode.getBoundingClientRect();(Math.abs(i.width-e)>1||Math.abs(i.height-n)>1)&&this.setState({boxWidth:i.width,boxHeight:i.height},(function(){r&&r(i)}))}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1},(function(){r&&r(null)}))},e.prototype.render=function(){var t=this,e=this.props,n=e.content,r=e.width,i=e.height,a=e.wrapperStyle,u=e.payloadUniqBy,s=e.payload,c=o(o({position:"absolute",width:r||"auto",height:i||"auto"},this.getDefaultPosition(a)),a);return f.default.createElement("div",{className:"recharts-legend-wrapper",style:c,ref:function(e){t.wrapperNode=e}},function(t,e){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(h.default.isFunction(t))return f.default.createElement(t,e);e.ref;var n=l(e,["ref"]);return f.default.createElement(p.DefaultLegendContent,o({},n))}(n,o(o({},this.props),{payload:v(u,s)})))},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"bottom"},e}(f.PureComponent);e.Legend=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Symbols=void 0;var c=s(n(0)),f=l(n(3)),h=n(70),p=l(n(4)),d=n(2),y={symbolCircle:h.symbolCircle,symbolCross:h.symbolCross,symbolDiamond:h.symbolDiamond,symbolSquare:h.symbolSquare,symbolStar:h.symbolStar,symbolTriangle:h.symbolTriangle,symbolWye:h.symbolWye},v=Math.PI/180,g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t=this.props,e=t.size,n=t.sizeType,r=t.type,i=function(t){var e="symbol"+f.default.upperFirst(t);return y[e]||h.symbolCircle}(r);return h.symbol().type(i).size(function(t,e,n){if("area"===e)return t;switch(n){case"cross":return 5*t*t/9;case"diamond":return.5*t*t/Math.sqrt(3);case"square":return t*t;case"star":var r=18*v;return 1.25*t*t*(Math.tan(r)-Math.tan(2*r)*Math.pow(Math.tan(r),2));case"triangle":return Math.sqrt(3)*t*t/4;case"wye":return(21-10*Math.sqrt(3))*t*t/8;default:return Math.PI*t*t/4}}(e,n,r))()},e.prototype.render=function(){var t=this.props,e=t.className,n=t.cx,r=t.cy,i=t.size;return n===+n&&r===+r&&i===+i?c.default.createElement("path",o({},d.filterProps(this.props,!0),{className:p.default("recharts-symbols",e),transform:"translate("+n+", "+r+")",d:this.getPath()})):null},e.defaultProps={type:"circle",size:64,sizeType:"area"},e.registerSymbol=function(t,e){y["symbol"+f.default.upperFirst(t)]=e},e}(c.PureComponent);e.Symbols=g},function(t,e,n){var r=n(122),i=n(21);t.exports=function t(e,n,o,a,u){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,a,t,u))}},function(t,e,n){var r=n(20)(n(12),"Map");t.exports=r},function(t,e,n){var r=n(139),i=n(146),o=n(148),a=n(149),u=n(150);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(164),i=n(170),o=n(62);t.exports=function(t){return o(t)?r(t):i(t)}},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,n){var r=n(77),i=n(61);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e){t.exports=function(t){return t}},function(t,e,n){var r=n(14),i=n(41),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(a.test(t)||!o.test(t)||null!=e&&t in Object(e))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Line=void 0;var h=s(n(0)),p=f(n(10)),d=f(n(4)),y=f(n(3)),v=n(28),g=n(23),m=n(6),_=n(15),b=n(50),x=n(5),O=n(9),w=n(8),A=n(7),E=n(2),M=function(t){function e(){var n=null!==t&&t.apply(this,arguments)||this;return n.state={isAnimationFinished:!0,totalLength:0},n.getStrokeDasharray=function(t,n,r){for(var i=r.reduce((function(t,e){return t+e})),o=Math.floor(t/i),a=t%i,u=n-t,s=[],l=0,f=0;;f+=r[l],++l)if(f+r[l]>a){s=c(r.slice(0,l),[a-f]);break}var h=s.length%2==0?[0,u]:[u];return c(e.repeat(r,o),s,h).map((function(t){return t+"px"})).join(", ")},n.id=x.uniqueId("recharts-line-"),n.pathRef=function(t){n.mainCurve=t},n.handleAnimationEnd=function(){n.setState({isAnimationFinished:!0}),n.props.onAnimationEnd&&n.props.onAnimationEnd()},n.handleAnimationStart=function(){n.setState({isAnimationFinished:!1}),n.props.onAnimationStart&&n.props.onAnimationStart()},n}return i(e,t),e.prototype.componentDidMount=function(){if(this.props.isAnimationActive){var t=this.getTotalLength();this.setState({totalLength:t})}},e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.prototype.getTotalLength=function(){var t=this.mainCurve;try{return t&&t.getTotalLength&&t.getTotalLength()||0}catch(t){return 0}},e.repeat=function(t,e){for(var n=t.length%2!=0?c(t,[0]):t,r=[],i=0;i<e;++i)r=c(r,n);return r},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=O.findAllByType(o,b.ErrorBar.displayName);if(!a)return null;function u(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:A.getValueByDataKey(t.payload,e)}}return a.map((function(t,o){return h.default.cloneElement(t,{key:"bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,dataPointFormatter:u})}))},e.renderDotItem=function(t,e){var n;if(h.default.isValidElement(t))n=h.default.cloneElement(t,e);else if(y.default.isFunction(t))n=t(e);else{var r=d.default("recharts-line-dot",t?t.className:"");n=h.default.createElement(g.Dot,o({},e,{className:r}))}return n},e.prototype.renderDots=function(t,n){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var r=this.props,i=r.dot,a=r.points,u=r.dataKey,s=E.filterProps(this.props),l=E.filterProps(i,!0),c=a.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},s),l),{value:t.value,dataKey:u,cx:t.x,cy:t.y,index:n,payload:t.payload});return e.renderDotItem(i,r)})),f={clipPath:t?"url(#clipPath-"+n+")":null};return h.default.createElement(m.Layer,o({className:"recharts-line-dots",key:"dots"},f),c)},e.prototype.renderCurveStatically=function(t,e,n,r){var i=this.props,a=i.type,u=i.layout,s=i.connectNulls,c=(i.ref,l(i,["type","layout","connectNulls","ref"])),f=o(o(o(o({},E.filterProps(c,!0)),{fill:"none",className:"recharts-line-curve",clipPath:e?"url(#clipPath-"+n+")":null,points:t}),r),{type:a,layout:u,connectNulls:s});return h.default.createElement(v.Curve,o({},f,{pathRef:this.pathRef}))},e.prototype.renderCurveWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.strokeDasharray,u=r.isAnimationActive,s=r.animationBegin,l=r.animationDuration,c=r.animationEasing,f=r.animationId,d=r.animateNewValues,y=r.width,v=r.height,g=this.state,m=g.prevPoints,_=g.totalLength;return h.default.createElement(p.default,{begin:s,duration:l,isActive:u,easing:c,from:{t:0},to:{t:1},key:"line-"+f,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(m){var s=m.length/i.length,l=i.map((function(t,e){var n=Math.floor(e*s);if(m[n]){var r=m[n],i=x.interpolateNumber(r.x,t.x),a=x.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}if(d){i=x.interpolateNumber(2*y,t.x),a=x.interpolateNumber(v/2,t.y);return o(o({},t),{x:i(u),y:a(u)})}return o(o({},t),{x:t.x,y:t.y})}));return n.renderCurveStatically(l,t,e)}var c,f=x.interpolateNumber(0,_)(u);if(a){var h=(""+a).split(/[,\s]+/gim).map((function(t){return parseFloat(t)}));c=n.getStrokeDasharray(f,_,h)}else c=f+"px "+(_-f)+"px";return n.renderCurveStatically(i,t,e,{strokeDasharray:c})}))},e.prototype.renderCurve=function(t,e){var n=this.props,r=n.points,i=n.isAnimationActive,o=this.state,a=o.prevPoints,u=o.totalLength;return i&&r&&r.length&&(!a&&u>0||!y.default.isEqual(a,r))?this.renderCurveWithAnimation(t,e):this.renderCurveStatically(r,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.xAxis,a=t.yAxis,u=t.top,s=t.left,l=t.width,c=t.height,f=t.isAnimationActive,p=t.id;if(e||!r||!r.length)return null;var v=this.state.isAnimationFinished,g=1===r.length,b=d.default("recharts-line",i),x=o&&o.allowDataOverflow||a&&a.allowDataOverflow,O=y.default.isNil(p)?this.id:p;return h.default.createElement(m.Layer,{className:b},x?h.default.createElement("defs",null,h.default.createElement("clipPath",{id:"clipPath-"+O},h.default.createElement("rect",{x:s,y:u,width:l,height:c}))):null,!g&&this.renderCurve(x,O),this.renderErrorBar(),(g||n)&&this.renderDots(x,O),(!f||v)&&_.LabelList.renderCallByParent(this.props,r))},e.displayName="Line",e.defaultProps={xAxisId:0,yAxisId:0,connectNulls:!1,activeDot:!0,dot:!0,legendType:"line",stroke:"#3182bd",strokeWidth:1,fill:"#fff",points:[],isAnimationActive:!w.Global.isSsr,animateNewValues:!0,animationBegin:0,animationDuration:1500,animationEasing:"ease",hide:!1},e.getComposedData=function(t){var e=t.props,n=t.xAxis,r=t.yAxis,i=t.xAxisTicks,a=t.yAxisTicks,u=t.dataKey,s=t.bandSize,l=t.displayedData,c=t.offset,f=e.layout,h=l.map((function(t,e){var o=A.getValueByDataKey(t,u);return"horizontal"===f?{x:A.getCateCoordinateOfLine({axis:n,ticks:i,bandSize:s,entry:t,index:e}),y:y.default.isNil(o)?null:r.scale(o),value:o,payload:t}:{x:y.default.isNil(o)?null:n.scale(o),y:A.getCateCoordinateOfLine({axis:r,ticks:a,bandSize:s,entry:t,index:e}),value:o,payload:t}}));return o({points:h,layout:f},c)},e}(h.PureComponent);e.Line=M},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Area=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(28),v=n(23),g=n(6),m=n(15),_=n(8),b=n(5),x=n(7),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!0},e.id=b.uniqueId("recharts-area-"),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,curBaseLine:t.baseLine,prevPoints:e.curPoints,prevBaseLine:e.curBaseLine}:t.points!==e.curPoints||t.baseLine!==e.curBaseLine?{curPoints:t.points,curBaseLine:t.baseLine}:null},e.prototype.renderDots=function(t,n){var r=this.props.isAnimationActive,i=this.state.isAnimationFinished;if(r&&!i)return null;var a=this.props,u=a.dot,s=a.points,l=a.dataKey,c=O.filterProps(this.props),h=O.filterProps(u,!0),p=s.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},c),h),{dataKey:l,cx:t.x,cy:t.y,index:n,value:t.value,payload:t.payload});return e.renderDotItem(u,r)})),d={clipPath:t?"url(#clipPath-"+n+")":null};return f.default.createElement(g.Layer,o({className:"recharts-area-dots"},d),p)},e.prototype.renderHorizontalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].x,a=r[r.length-1].x,u=t*Math.abs(o-a),s=d.default.max(r.map((function(t){return t.y||0})));return b.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&d.default.isArray(n)&&n.length&&(s=Math.max(d.default.max(n.map((function(t){return t.y||0}))),s)),b.isNumber(s)?f.default.createElement("rect",{x:o<a?o:o-u,y:0,width:u,height:Math.floor(s+(i?parseInt(""+i,10):1))}):null},e.prototype.renderVerticalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].y,a=r[r.length-1].y,u=t*Math.abs(o-a),s=d.default.max(r.map((function(t){return t.x||0})));return b.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&d.default.isArray(n)&&n.length&&(s=Math.max(d.default.max(n.map((function(t){return t.x||0}))),s)),b.isNumber(s)?f.default.createElement("rect",{x:0,y:o<a?o:o-u,width:s+(i?parseInt(""+i,10):1),height:Math.floor(u)}):null},e.prototype.renderClipRect=function(t){return"vertical"===this.props.layout?this.renderVerticalRect(t):this.renderHorizontalRect(t)},e.prototype.renderAreaStatically=function(t,e,n,r){var i=this.props,a=i.layout,u=i.type,s=i.stroke,c=i.connectNulls,h=i.isRange,p=(i.ref,l(i,["layout","type","stroke","connectNulls","isRange","ref"]));return f.default.createElement(g.Layer,{clipPath:n?"url(#clipPath-"+r+")":null},f.default.createElement(y.Curve,o({},O.filterProps(p,!0),{points:t,connectNulls:c,type:u,baseLine:e,layout:a,stroke:"none",className:"recharts-area-area"})),"none"!==s&&f.default.createElement(y.Curve,o({},O.filterProps(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:c,fill:"none",points:t})),"none"!==s&&h&&f.default.createElement(y.Curve,o({},O.filterProps(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:c,fill:"none",points:e})))},e.prototype.renderAreaWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.baseLine,u=r.isAnimationActive,s=r.animationBegin,l=r.animationDuration,c=r.animationEasing,h=r.animationId,y=this.state,v=y.prevPoints,m=y.prevBaseLine;return f.default.createElement(p.default,{begin:s,duration:l,isActive:u,easing:c,from:{t:0},to:{t:1},key:"area-"+h,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(v){var s=v.length/i.length,l=i.map((function(t,e){var n=Math.floor(e*s);if(v[n]){var r=v[n],i=b.interpolateNumber(r.x,t.x),a=b.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t})),c=void 0;if(b.isNumber(a)&&"number"==typeof a)c=b.interpolateNumber(m,a)(u);else if(d.default.isNil(a)||d.default.isNaN(a)){c=b.interpolateNumber(m,0)(u)}else c=a.map((function(t,e){var n=Math.floor(e*s);if(m[n]){var r=m[n],i=b.interpolateNumber(r.x,t.x),a=b.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t}));return n.renderAreaStatically(l,c,t,e)}return f.default.createElement(g.Layer,null,f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"animationClipPath-"+e},n.renderClipRect(u))),f.default.createElement(g.Layer,{clipPath:"url(#animationClipPath-"+e+")"},n.renderAreaStatically(i,a,t,e)))}))},e.prototype.renderArea=function(t,e){var n=this.props,r=n.points,i=n.baseLine,o=n.isAnimationActive,a=this.state,u=a.prevPoints,s=a.prevBaseLine,l=a.totalLength;return o&&r&&r.length&&(!u&&l>0||!d.default.isEqual(u,r)||!d.default.isEqual(s,i))?this.renderAreaWithAnimation(t,e):this.renderAreaStatically(r,i,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.top,a=t.left,u=t.xAxis,s=t.yAxis,l=t.width,c=t.height,p=t.isAnimationActive,y=t.id;if(e||!r||!r.length)return null;var v=this.state.isAnimationFinished,_=1===r.length,b=h.default("recharts-area",i),x=u&&u.allowDataOverflow||s&&s.allowDataOverflow,O=d.default.isNil(y)?this.id:y;return f.default.createElement(g.Layer,{className:b},x?f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"clipPath-"+O},f.default.createElement("rect",{x:a,y:o,width:l,height:Math.floor(c)}))):null,_?null:this.renderArea(x,O),(n||_)&&this.renderDots(x,O),(!p||v)&&m.LabelList.renderCallByParent(this.props,r))},e.displayName="Area",e.defaultProps={stroke:"#3182bd",fill:"#3182bd",fillOpacity:.6,xAxisId:0,yAxisId:0,legendType:"line",connectNulls:!1,points:[],dot:!1,activeDot:!0,hide:!1,isAnimationActive:!_.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getBaseValue=function(t,e,n){var r=t.layout,i=t.baseValue;if(b.isNumber(i)&&"number"==typeof i)return i;var o="horizontal"===r?n:e,a=o.scale.domain();if("number"===o.type){var u=Math.max(a[0],a[1]),s=Math.min(a[0],a[1]);return"dataMin"===i?s:"dataMax"===i||u<0?u:Math.max(Math.min(a[0],a[1]),0)}return"dataMin"===i?a[0]:"dataMax"===i?a[1]:a[0]},e.getComposedData=function(t){var n,r=t.props,i=t.xAxis,a=t.yAxis,u=t.xAxisTicks,s=t.yAxisTicks,l=t.bandSize,c=t.dataKey,f=t.stackedData,h=t.dataStartIndex,p=t.displayedData,y=t.offset,v=r.layout,g=f&&f.length,m=e.getBaseValue(r,i,a),_=!1,b=p.map((function(t,e){var n,r=x.getValueByDataKey(t,c);g?n=f[h+e]:(n=r,d.default.isArray(n)?_=!0:n=[m,n]);var o=d.default.isNil(n[1])||g&&d.default.isNil(r);return"horizontal"===v?{x:x.getCateCoordinateOfLine({axis:i,ticks:u,bandSize:l,entry:t,index:e}),y:o?null:a.scale(n[1]),value:n,payload:t}:{x:o?null:i.scale(n[1]),y:x.getCateCoordinateOfLine({axis:a,ticks:s,bandSize:l,entry:t,index:e}),value:n,payload:t}}));return n=g||_?b.map((function(t){return"horizontal"===v?{x:t.x,y:d.default.isNil(d.default.get(t,"value[0]"))||d.default.isNil(d.default.get(t,"y"))?null:a.scale(d.default.get(t,"value[0]"))}:{x:d.default.isNil(d.default.get(t,"value[0]"))?null:i.scale(d.default.get(t,"value[0]")),y:t.y}})):"horizontal"===v?a.scale(m):i.scale(m),o({points:b,baseLine:n,layout:v,isRange:_},y)},e.renderDotItem=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(v.Dot,o({},e,{className:"recharts-area-dot"}))},e}(f.PureComponent);e.Area=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Bar=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(29),v=n(6),g=n(50),m=n(27),_=n(15),b=n(5),x=n(9),O=n(8),w=n(7),A=n(2),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.id=b.uniqueId("recharts-bar-"),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),t&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),t&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curData:t.data,prevData:e.curData}:t.data!==e.curData?{curData:t.data}:null},e.renderRectangle=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(y.Rectangle,o({},e))},e.prototype.renderRectanglesStatically=function(t){var n=this,r=this.props.shape,i=A.filterProps(this.props);return t&&t.map((function(t,a){var u=o(o(o({},i),t),{index:a});return f.default.createElement(v.Layer,o({className:"recharts-bar-rectangle"},A.adaptEventsOfChild(n.props,t,a),{key:"rectangle-"+a}),e.renderRectangle(r,u))}))},e.prototype.renderRectanglesWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.layout,i=e.isAnimationActive,a=e.animationBegin,u=e.animationDuration,s=e.animationEasing,l=e.animationId,c=this.state.prevData;return f.default.createElement(p.default,{begin:a,duration:u,isActive:i,easing:s,from:{t:0},to:{t:1},key:"bar-"+l,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var i=e.t,a=n.map((function(t,e){var n=c&&c[e];if(n){var a=b.interpolateNumber(n.x,t.x),u=b.interpolateNumber(n.y,t.y),s=b.interpolateNumber(n.width,t.width),l=b.interpolateNumber(n.height,t.height);return o(o({},t),{x:a(i),y:u(i),width:s(i),height:l(i)})}if("horizontal"===r){var f=(l=b.interpolateNumber(0,t.height))(i);return o(o({},t),{y:t.y+t.height-f,height:f})}var h=b.interpolateNumber(0,t.width)(i);return o(o({},t),{width:h})}));return f.default.createElement(v.Layer,null,t.renderRectanglesStatically(a))}))},e.prototype.renderRectangles=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&d.default.isEqual(r,e)?this.renderRectanglesStatically(e):this.renderRectanglesWithAnimation()},e.prototype.renderBackground=function(){var t=this,n=this.props.data,r=A.filterProps(this.props.background);return n.map((function(n,i){n.value;var a=n.background,u=l(n,["value","background"]);if(!a)return null;var s=o(o(o(o(o(o({},u),{fill:"#eee"}),a),r),A.adaptEventsOfChild(t.props,n,i)),{index:i,key:"background-bar-"+i,className:"recharts-bar-background-rectangle"});return e.renderRectangle(t.props.background,s)}))},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.data,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=x.findAllByType(o,g.ErrorBar.displayName);if(!a)return null;var u="vertical"===i?e[0].height/2:e[0].width/2;function s(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:w.getValueByDataKey(t,e)}}return a.map((function(t,o){return f.default.cloneElement(t,{key:"error-bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,offset:u,dataPointFormatter:s})}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.xAxis,o=t.yAxis,a=t.left,u=t.top,s=t.width,l=t.height,c=t.isAnimationActive,p=t.background,y=t.id;if(e||!n||!n.length)return null;var g=this.state.isAnimationFinished,m=h.default("recharts-bar",r),b=i&&i.allowDataOverflow||o&&o.allowDataOverflow,x=d.default.isNil(y)?this.id:y;return f.default.createElement(v.Layer,{className:m},b?f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"clipPath-"+x},f.default.createElement("rect",{x:a,y:u,width:s,height:l}))):null,f.default.createElement(v.Layer,{className:"recharts-bar-rectangles",clipPath:b?"url(#clipPath-"+x+")":null},p?this.renderBackground():null,this.renderRectangles()),this.renderErrorBar(),(!c||g)&&_.LabelList.renderCallByParent(this.props,n))},e.displayName="Bar",e.defaultProps={xAxisId:0,yAxisId:0,legendType:"rect",minPointSize:0,hide:!1,data:[],layout:"vertical",isAnimationActive:!O.Global.isSsr,animationBegin:0,animationDuration:400,animationEasing:"ease"},e.getComposedData=function(t){var e=t.props,n=t.item,r=t.barPosition,i=t.bandSize,a=t.xAxis,u=t.yAxis,s=t.xAxisTicks,l=t.yAxisTicks,c=t.stackedData,f=t.dataStartIndex,h=t.displayedData,p=t.offset,y=w.findPositionOfBar(r,n);if(!y)return null;var v=e.layout,g=n.props,_=g.dataKey,O=g.children,A=g.minPointSize,E="horizontal"===v?u:a,M=c?E.scale.domain():null,P=w.getBaseValueOfBar({numericAxis:E}),S=x.findAllByType(O,m.Cell.displayName),k=h.map((function(t,e){var n,r,h,p,g,m,x;(c?n=w.truncateByDomain(c[f+e],M):(n=w.getValueByDataKey(t,_),d.default.isArray(n)||(n=[P,n])),"horizontal"===v)?(r=w.getCateCoordinateOfBar({axis:a,ticks:s,bandSize:i,offset:y.offset,entry:t,index:e}),h=u.scale(n[1]),p=y.size,g=u.scale(n[0])-u.scale(n[1]),m={x:r,y:u.y,width:p,height:u.height},Math.abs(A)>0&&Math.abs(g)<Math.abs(A)&&(h-=x=b.mathSign(g||A)*(Math.abs(A)-Math.abs(g)),g+=x)):(r=a.scale(n[0]),h=w.getCateCoordinateOfBar({axis:u,ticks:l,bandSize:i,offset:y.offset,entry:t,index:e}),p=a.scale(n[1])-a.scale(n[0]),g=y.size,m={x:a.x,y:h,width:a.width,height:g},Math.abs(A)>0&&Math.abs(p)<Math.abs(A)&&(p+=x=b.mathSign(p||A)*(Math.abs(A)-Math.abs(p))));return o(o(o({},t),{x:r,y:h,width:p,height:g,value:c?n:n[1],payload:t,background:m}),S&&S[e]&&S[e].props)}));return o({data:k,layout:v},p)},e}(f.PureComponent);e.Bar=E},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Scatter=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(15),v=n(9),g=n(8),m=n(51),_=n(28),b=n(56),x=n(50),O=n(27),w=n(5),A=n(7),E=n(2),M=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){e.setState({isAnimationFinished:!0})},e.handleAnimationStart=function(){e.setState({isAnimationFinished:!1})},e.id=w.uniqueId("recharts-scatter-"),e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.renderSymbolItem=function(t,e){var n;return c.default.isValidElement(t)?n=c.default.cloneElement(t,e):p.default.isFunction(t)?n=t(e):"string"==typeof t&&(n=c.default.createElement(b.Symbols,o({},e,{type:t}))),n},e.prototype.renderSymbolsStatically=function(t){var n=this,r=this.props,i=r.shape,a=r.activeShape,u=r.activeIndex,s=E.filterProps(this.props);return t.map((function(t,r){var l=o(o({key:"symbol-"+r},s),t);return c.default.createElement(d.Layer,o({className:"recharts-scatter-symbol"},E.adaptEventsOfChild(n.props,t,r),{key:"symbol-"+r}),e.renderSymbolItem(u===r?a:i,l))}))},e.prototype.renderSymbolsWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevPoints;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+s,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=w.interpolateNumber(n.cx,t.cx),a=w.interpolateNumber(n.cy,t.cy),u=w.interpolateNumber(n.size,t.size);return o(o({},t),{cx:i(r),cy:a(r),size:u(r)})}var s=w.interpolateNumber(0,t.size);return o(o({},t),{size:s(r)})}));return c.default.createElement(d.Layer,null,t.renderSymbolsStatically(i))}))},e.prototype.renderSymbols=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=this.state.prevPoints;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderSymbolsStatically(e):this.renderSymbolsWithAnimation()},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.children,o=v.findAllByType(i,x.ErrorBar.displayName);if(!o)return null;function a(t,e){return{x:t.cx,y:t.cy,value:+t.node.y,errorVal:A.getValueByDataKey(t,e)}}function u(t,e){return{x:t.cx,y:t.cy,value:+t.node.x,errorVal:A.getValueByDataKey(t,e)}}return o.map((function(t,i){var o=t.props.direction;return c.default.cloneElement(t,{key:i,data:e,xAxis:n,yAxis:r,layout:"x"===o?"vertical":"horizontal",dataPointFormatter:"x"===o?u:a})}))},e.prototype.renderLine=function(){var t,e,n=this.props,r=n.points,i=n.line,a=n.lineType,u=n.lineJointType,s=E.filterProps(this.props),l=E.filterProps(i);if("joint"===a)t=r.map((function(t){return{x:t.cx,y:t.cy}}));else if("fitting"===a){var f=w.getLinearRegression(r),h=f.xmin,y=f.xmax,v=f.a,g=f.b,m=function(t){return v*t+g};t=[{x:h,y:m(h)},{x:y,y:m(y)}]}var b=o(o(o(o({},s),{fill:"none",stroke:s&&s.fill}),l),{points:t});return e=c.default.isValidElement(i)?c.default.cloneElement(i,b):p.default.isFunction(i)?i(b):c.default.createElement(_.Curve,o({},b,{type:u})),c.default.createElement(d.Layer,{className:"recharts-scatter-line",key:"recharts-scatter-line"},e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.points,r=t.line,i=t.className,o=t.xAxis,a=t.yAxis,u=t.left,s=t.top,l=t.width,f=t.height,v=t.id,g=t.isAnimationActive;if(e||!n||!n.length)return null;var m=this.state.isAnimationFinished,_=h.default("recharts-scatter",i),b=o&&o.allowDataOverflow||a&&a.allowDataOverflow,x=p.default.isNil(v)?this.id:v;return c.default.createElement(d.Layer,{className:_,clipPath:b?"url(#clipPath-"+x+")":null},b?c.default.createElement("defs",null,c.default.createElement("clipPath",{id:"clipPath-"+x},c.default.createElement("rect",{x:u,y:s,width:l,height:f}))):null,r&&this.renderLine(),this.renderErrorBar(),c.default.createElement(d.Layer,{key:"recharts-scatter-symbols"},this.renderSymbols()),(!g||m)&&y.LabelList.renderCallByParent(this.props,n))},e.displayName="Scatter",e.defaultProps={xAxisId:0,yAxisId:0,zAxisId:0,legendType:"circle",lineType:"joint",lineJointType:"linear",data:[],shape:"circle",hide:!1,isAnimationActive:!g.Global.isSsr,animationBegin:0,animationDuration:400,animationEasing:"linear"},e.getComposedData=function(t){var e=t.xAxis,n=t.yAxis,r=t.zAxis,i=t.item,a=t.displayedData,u=t.xAxisTicks,s=t.yAxisTicks,l=t.offset,c=i.props.tooltipType,f=v.findAllByType(i.props.children,O.Cell.displayName),h=p.default.isNil(e.dataKey)?i.props.dataKey:e.dataKey,d=p.default.isNil(n.dataKey)?i.props.dataKey:n.dataKey,y=r&&r.dataKey,g=r?r.range:m.ZAxis.defaultProps.range,_=g&&g[0],b=e.scale.bandwidth?e.scale.bandwidth():0,x=n.scale.bandwidth?n.scale.bandwidth():0,w=a.map((function(t,a){var l=A.getValueByDataKey(t,h),v=A.getValueByDataKey(t,d),g=!p.default.isNil(y)&&A.getValueByDataKey(t,y)||"-",m=[{name:p.default.isNil(e.dataKey)?i.props.name:e.name||e.dataKey,unit:e.unit||"",value:l,payload:t,dataKey:h,type:c},{name:p.default.isNil(n.dataKey)?i.props.name:n.name||n.dataKey,unit:n.unit||"",value:v,payload:t,dataKey:d,type:c}];"-"!==g&&m.push({name:r.name||r.dataKey,unit:r.unit||"",value:g,payload:t,dataKey:y,type:c});var O=A.getCateCoordinateOfLine({axis:e,ticks:u,bandSize:b,entry:t,index:a,dataKey:h}),w=A.getCateCoordinateOfLine({axis:n,ticks:s,bandSize:x,entry:t,index:a,dataKey:d}),E="-"!==g?r.scale(g):_,M=Math.sqrt(Math.max(E,0)/Math.PI);return o(o(o({},t),{cx:O,cy:w,x:O-M,y:w-M,xAxis:e,yAxis:n,zAxis:r,width:2*M,height:2*M,size:E,node:{x:l,y:v,z:g},tooltipPayload:m,tooltipPosition:{x:O,y:w},payload:t}),f&&f[a]&&f[a].props)}));return o({points:w},l)},e}(c.PureComponent);e.Scatter=M},function(t,e,n){"use strict";n.r(e),n.d(e,"arc",(function(){return k})),n.d(e,"area",(function(){return R})),n.d(e,"line",(function(){return L})),n.d(e,"pie",(function(){return F})),n.d(e,"areaRadial",(function(){return H})),n.d(e,"radialArea",(function(){return H})),n.d(e,"lineRadial",(function(){return G})),n.d(e,"radialLine",(function(){return G})),n.d(e,"pointRadial",(function(){return K})),n.d(e,"linkHorizontal",(function(){return tt})),n.d(e,"linkVertical",(function(){return et})),n.d(e,"linkRadial",(function(){return nt})),n.d(e,"symbol",(function(){return bt})),n.d(e,"symbols",(function(){return _t})),n.d(e,"symbolCircle",(function(){return rt})),n.d(e,"symbolCross",(function(){return it})),n.d(e,"symbolDiamond",(function(){return ut})),n.d(e,"symbolSquare",(function(){return ht})),n.d(e,"symbolStar",(function(){return ft})),n.d(e,"symbolTriangle",(function(){return dt})),n.d(e,"symbolWye",(function(){return mt})),n.d(e,"curveBasisClosed",(function(){return Mt})),n.d(e,"curveBasisOpen",(function(){return St})),n.d(e,"curveBasis",(function(){return At})),n.d(e,"curveBundle",(function(){return Ct})),n.d(e,"curveCardinalClosed",(function(){return It})),n.d(e,"curveCardinalOpen",(function(){return Rt})),n.d(e,"curveCardinal",(function(){return Nt})),n.d(e,"curveCatmullRomClosed",(function(){return Wt})),n.d(e,"curveCatmullRomOpen",(function(){return qt})),n.d(e,"curveCatmullRom",(function(){return Ft})),n.d(e,"curveLinearClosed",(function(){return Ht})),n.d(e,"curveLinear",(function(){return N})),n.d(e,"curveMonotoneX",(function(){return te})),n.d(e,"curveMonotoneY",(function(){return ee})),n.d(e,"curveNatural",(function(){return ie})),n.d(e,"curveStep",(function(){return ae})),n.d(e,"curveStepAfter",(function(){return se})),n.d(e,"curveStepBefore",(function(){return ue})),n.d(e,"stack",(function(){return pe})),n.d(e,"stackOffsetExpand",(function(){return de})),n.d(e,"stackOffsetDiverging",(function(){return ye})),n.d(e,"stackOffsetNone",(function(){return le})),n.d(e,"stackOffsetSilhouette",(function(){return ve})),n.d(e,"stackOffsetWiggle",(function(){return ge})),n.d(e,"stackOrderAppearance",(function(){return me})),n.d(e,"stackOrderAscending",(function(){return be})),n.d(e,"stackOrderDescending",(function(){return Oe})),n.d(e,"stackOrderInsideOut",(function(){return we})),n.d(e,"stackOrderNone",(function(){return ce})),n.d(e,"stackOrderReverse",(function(){return Ae}));const r=Math.PI,i=2*r,o=i-1e-6;function a(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function u(){return new a}a.prototype=u.prototype={constructor:a,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,i,o){t=+t,e=+e,n=+n,i=+i,o=+o;var a=this._x1,u=this._y1,s=n-t,l=i-e,c=a-t,f=u-e,h=c*c+f*f;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(f*s-l*c)>1e-6&&o){var p=n-a,d=i-u,y=s*s+l*l,v=p*p+d*d,g=Math.sqrt(y),m=Math.sqrt(h),_=o*Math.tan((r-Math.acos((y+h-v)/(2*g*m)))/2),b=_/m,x=_/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(e+b*f)),this._+="A"+o+","+o+",0,0,"+ +(f*p>c*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,u,s){t=+t,e=+e,s=!!s;var l=(n=+n)*Math.cos(a),c=n*Math.sin(a),f=t+l,h=e+c,p=1^s,d=s?a-u:u-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+f+","+h:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+f+","+h),n&&(d<0&&(d=d%i+i),d>o?this._+="A"+n+","+n+",0,1,"+p+","+(t-l)+","+(e-c)+"A"+n+","+n+",0,1,"+p+","+(this._x1=f)+","+(this._y1=h):d>1e-6&&(this._+="A"+n+","+n+",0,"+ +(d>=r)+","+p+","+(this._x1=t+n*Math.cos(u))+","+(this._y1=e+n*Math.sin(u))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var s=u,l=function(t){return function(){return t}},c=Math.abs,f=Math.atan2,h=Math.cos,p=Math.max,d=Math.min,y=Math.sin,v=Math.sqrt,g=Math.PI,m=g/2,_=2*g;function b(t){return t>1?0:t<-1?g:Math.acos(t)}function x(t){return t>=1?m:t<=-1?-m:Math.asin(t)}function O(t){return t.innerRadius}function w(t){return t.outerRadius}function A(t){return t.startAngle}function E(t){return t.endAngle}function M(t){return t&&t.padAngle}function P(t,e,n,r,i,o,a,u){var s=n-t,l=r-e,c=a-i,f=u-o,h=f*s-c*l;if(!(h*h<1e-12))return[t+(h=(c*(e-o)-f*(t-i))/h)*s,e+h*l]}function S(t,e,n,r,i,o,a){var u=t-n,s=e-r,l=(a?o:-o)/v(u*u+s*s),c=l*s,f=-l*u,h=t+c,d=e+f,y=n+c,g=r+f,m=(h+y)/2,_=(d+g)/2,b=y-h,x=g-d,O=b*b+x*x,w=i-o,A=h*g-y*d,E=(x<0?-1:1)*v(p(0,w*w*O-A*A)),M=(A*x-b*E)/O,P=(-A*b-x*E)/O,S=(A*x+b*E)/O,k=(-A*b+x*E)/O,C=M-m,j=P-_,T=S-m,N=k-_;return C*C+j*j>T*T+N*N&&(M=S,P=k),{cx:M,cy:P,x01:-c,y01:-f,x11:M*(i/w-1),y11:P*(i/w-1)}}var k=function(){var t=O,e=w,n=l(0),r=null,i=A,o=E,a=M,u=null;function p(){var l,p,O=+t.apply(this,arguments),w=+e.apply(this,arguments),A=i.apply(this,arguments)-m,E=o.apply(this,arguments)-m,M=c(E-A),k=E>A;if(u||(u=l=s()),w<O&&(p=w,w=O,O=p),w>1e-12)if(M>_-1e-12)u.moveTo(w*h(A),w*y(A)),u.arc(0,0,w,A,E,!k),O>1e-12&&(u.moveTo(O*h(E),O*y(E)),u.arc(0,0,O,E,A,k));else{var C,j,T=A,N=E,D=A,I=E,L=M,R=M,B=a.apply(this,arguments)/2,z=B>1e-12&&(r?+r.apply(this,arguments):v(O*O+w*w)),F=d(c(w-O)/2,+n.apply(this,arguments)),V=F,W=F;if(z>1e-12){var U=x(z/O*y(B)),q=x(z/w*y(B));(L-=2*U)>1e-12?(D+=U*=k?1:-1,I-=U):(L=0,D=I=(A+E)/2),(R-=2*q)>1e-12?(T+=q*=k?1:-1,N-=q):(R=0,T=N=(A+E)/2)}var G=w*h(T),H=w*y(T),K=O*h(I),X=O*y(I);if(F>1e-12){var Y,$=w*h(N),Z=w*y(N),J=O*h(D),Q=O*y(D);if(M<g&&(Y=P(G,H,J,Q,$,Z,K,X))){var tt=G-Y[0],et=H-Y[1],nt=$-Y[0],rt=Z-Y[1],it=1/y(b((tt*nt+et*rt)/(v(tt*tt+et*et)*v(nt*nt+rt*rt)))/2),ot=v(Y[0]*Y[0]+Y[1]*Y[1]);V=d(F,(O-ot)/(it-1)),W=d(F,(w-ot)/(it+1))}}R>1e-12?W>1e-12?(C=S(J,Q,G,H,w,W,k),j=S($,Z,K,X,w,W,k),u.moveTo(C.cx+C.x01,C.cy+C.y01),W<F?u.arc(C.cx,C.cy,W,f(C.y01,C.x01),f(j.y01,j.x01),!k):(u.arc(C.cx,C.cy,W,f(C.y01,C.x01),f(C.y11,C.x11),!k),u.arc(0,0,w,f(C.cy+C.y11,C.cx+C.x11),f(j.cy+j.y11,j.cx+j.x11),!k),u.arc(j.cx,j.cy,W,f(j.y11,j.x11),f(j.y01,j.x01),!k))):(u.moveTo(G,H),u.arc(0,0,w,T,N,!k)):u.moveTo(G,H),O>1e-12&&L>1e-12?V>1e-12?(C=S(K,X,$,Z,O,-V,k),j=S(G,H,J,Q,O,-V,k),u.lineTo(C.cx+C.x01,C.cy+C.y01),V<F?u.arc(C.cx,C.cy,V,f(C.y01,C.x01),f(j.y01,j.x01),!k):(u.arc(C.cx,C.cy,V,f(C.y01,C.x01),f(C.y11,C.x11),!k),u.arc(0,0,O,f(C.cy+C.y11,C.cx+C.x11),f(j.cy+j.y11,j.cx+j.x11),k),u.arc(j.cx,j.cy,V,f(j.y11,j.x11),f(j.y01,j.x01),!k))):u.arc(0,0,O,I,D,k):u.lineTo(K,X)}else u.moveTo(0,0);if(u.closePath(),l)return u=null,l+""||null}return p.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-g/2;return[h(r)*n,y(r)*n]},p.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),p):t},p.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),p):e},p.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:l(+t),p):n},p.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),p):r},p.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),p):i},p.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),p):o},p.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:l(+t),p):a},p.context=function(t){return arguments.length?(u=null==t?null:t,p):u},p},C=Array.prototype.slice,j=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)};function T(t){this._context=t}T.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var N=function(t){return new T(t)};function D(t){return t[0]}function I(t){return t[1]}var L=function(t,e){var n=l(!0),r=null,i=N,o=null;function a(a){var u,l,c,f=(a=j(a)).length,h=!1;for(null==r&&(o=i(c=s())),u=0;u<=f;++u)!(u<f&&n(l=a[u],u,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(l,u,a),+e(l,u,a));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?D:l(t),e="function"==typeof e?e:void 0===e?I:l(e),a.x=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:l(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},R=function(t,e,n){var r=null,i=l(!0),o=null,a=N,u=null;function c(l){var c,f,h,p,d,y=(l=j(l)).length,v=!1,g=new Array(y),m=new Array(y);for(null==o&&(u=a(d=s())),c=0;c<=y;++c){if(!(c<y&&i(p=l[c],c,l))===v)if(v=!v)f=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=c-1;h>=f;--h)u.point(g[h],m[h]);u.lineEnd(),u.areaEnd()}v&&(g[c]=+t(p,c,l),m[c]=+e(p,c,l),u.point(r?+r(p,c,l):g[c],n?+n(p,c,l):m[c]))}if(d)return u=null,d+""||null}function f(){return L().defined(i).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?D:l(+t),e="function"==typeof e?e:l(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?I:l(+n),c.x=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),r=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),c):t},c.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),c):r},c.y=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),n=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),c):e},c.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:l(+t),c):n},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(n)},c.lineX1=function(){return f().x(r).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:l(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c},B=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},z=function(t){return t},F=function(){var t=z,e=B,n=null,r=l(0),i=l(_),o=l(0);function a(a){var u,s,l,c,f,h=(a=j(a)).length,p=0,d=new Array(h),y=new Array(h),v=+r.apply(this,arguments),g=Math.min(_,Math.max(-_,i.apply(this,arguments)-v)),m=Math.min(Math.abs(g)/h,o.apply(this,arguments)),b=m*(g<0?-1:1);for(u=0;u<h;++u)(f=y[d[u]=u]=+t(a[u],u,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(y[t],y[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),u=0,l=p?(g-h*b)/p:0;u<h;++u,v=c)s=d[u],c=v+((f=y[s])>0?f*l:0)+b,y[s]={data:a[s],index:u,value:f,startAngle:v,endAngle:c,padAngle:m};return y}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),a):o},a},V=U(N);function W(t){this._curve=t}function U(t){function e(e){return new W(t(e))}return e._curve=t,e}function q(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(U(t)):e()._curve},t}W.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var G=function(){return q(L().curve(V))},H=function(){var t=R().curve(V),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return q(n())},delete t.lineX0,t.lineEndAngle=function(){return q(r())},delete t.lineX1,t.lineInnerRadius=function(){return q(i())},delete t.lineY0,t.lineOuterRadius=function(){return q(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(U(t)):e()._curve},t},K=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]};function X(t){return t.source}function Y(t){return t.target}function $(t){var e=X,n=Y,r=D,i=I,o=null;function a(){var a,u=C.call(arguments),l=e.apply(this,u),c=n.apply(this,u);if(o||(o=a=s()),t(o,+r.apply(this,(u[0]=l,u)),+i.apply(this,u),+r.apply(this,(u[0]=c,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function Z(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function J(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function Q(t,e,n,r,i){var o=K(e,n),a=K(e,n=(n+i)/2),u=K(r,n),s=K(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function tt(){return $(Z)}function et(){return $(J)}function nt(){var t=$(Q);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var rt={draw:function(t,e){var n=Math.sqrt(e/g);t.moveTo(n,0),t.arc(0,0,n,0,_)}},it={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},ot=Math.sqrt(1/3),at=2*ot,ut={draw:function(t,e){var n=Math.sqrt(e/at),r=n*ot;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},st=Math.sin(g/10)/Math.sin(7*g/10),lt=Math.sin(_/10)*st,ct=-Math.cos(_/10)*st,ft={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=lt*n,i=ct*n;t.moveTo(0,-n),t.lineTo(r,i);for(var o=1;o<5;++o){var a=_*o/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*n,-u*n),t.lineTo(u*r-s*i,s*r+u*i)}t.closePath()}},ht={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},pt=Math.sqrt(3),dt={draw:function(t,e){var n=-Math.sqrt(e/(3*pt));t.moveTo(0,2*n),t.lineTo(-pt*n,-n),t.lineTo(pt*n,-n),t.closePath()}},yt=Math.sqrt(3)/2,vt=1/Math.sqrt(12),gt=3*(vt/2+1),mt={draw:function(t,e){var n=Math.sqrt(e/gt),r=n/2,i=n*vt,o=r,a=n*vt+n,u=-o,s=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,s),t.lineTo(-.5*r-yt*i,yt*r+-.5*i),t.lineTo(-.5*o-yt*a,yt*o+-.5*a),t.lineTo(-.5*u-yt*s,yt*u+-.5*s),t.lineTo(-.5*r+yt*i,-.5*i-yt*r),t.lineTo(-.5*o+yt*a,-.5*a-yt*o),t.lineTo(-.5*u+yt*s,-.5*s-yt*u),t.closePath()}},_t=[rt,it,ut,ht,ft,dt,mt],bt=function(t,e){var n=null;function r(){var r;if(n||(n=r=s()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return t="function"==typeof t?t:l(t||rt),e="function"==typeof e?e:l(void 0===e?64:+e),r.type=function(e){return arguments.length?(t="function"==typeof e?e:l(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},xt=function(){};function Ot(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function wt(t){this._context=t}wt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ot(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var At=function(t){return new wt(t)};function Et(t){this._context=t}Et.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Mt=function(t){return new Et(t)};function Pt(t){this._context=t}Pt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var St=function(t){return new Pt(t)};function kt(t,e){this._basis=new wt(t),this._beta=e}kt.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,u=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*e[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Ct=function t(e){function n(t){return 1===e?new wt(t):new kt(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function jt(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Tt(t,e){this._context=t,this._k=(1-e)/6}Tt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:jt(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Nt=function t(e){function n(t){return new Tt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Dt(t,e){this._context=t,this._k=(1-e)/6}Dt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var It=function t(e){function n(t){return new Dt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Lt(t,e){this._context=t,this._k=(1-e)/6}Lt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Rt=function t(e){function n(t){return new Lt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Bt(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>1e-12){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>1e-12){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function zt(t,e){this._context=t,this._alpha=e}zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ft=function t(e){function n(t){return e?new zt(t,e):new Tt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Vt(t,e){this._context=t,this._alpha=e}Vt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Wt=function t(e){function n(t){return e?new Vt(t,e):new Dt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Ut(t,e){this._context=t,this._alpha=e}Ut.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var qt=function t(e){function n(t){return e?new Ut(t,e):new Lt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Gt(t){this._context=t}Gt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var Ht=function(t){return new Gt(t)};function Kt(t){return t<0?-1:1}function Xt(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Kt(o)+Kt(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Yt(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function $t(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*e,o-u,a-u*n,o,a)}function Zt(t){this._context=t}function Jt(t){this._context=new Qt(t)}function Qt(t){this._context=t}function te(t){return new Zt(t)}function ee(t){return new Jt(t)}function ne(t){this._context=t}function re(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:$t(this,this._t0,Yt(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,$t(this,Yt(this,n=Xt(this,t,e)),n);break;default:$t(this,this._t0,n=Xt(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Jt.prototype=Object.create(Zt.prototype)).point=function(t,e){Zt.prototype.point.call(this,e,t)},Qt.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},ne.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=re(t),i=re(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var ie=function(t){return new ne(t)};function oe(t,e){this._context=t,this._t=e}oe.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ae=function(t){return new oe(t,.5)};function ue(t){return new oe(t,0)}function se(t){return new oe(t,1)}var le=function(t,e){if((i=t.length)>1)for(var n,r,i,o=1,a=t[e[0]],u=a.length;o<i;++o)for(r=a,a=t[e[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},ce=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function fe(t,e){return t[e]}function he(t){const e=[];return e.key=t,e}var pe=function(){var t=l([]),e=ce,n=le,r=fe;function i(i){var o,a,u=Array.from(t.apply(this,arguments),he),s=u.length,l=-1;for(const t of i)for(o=0,++l;o<s;++o)(u[o][l]=[0,+r(t,u[o].key,l,i)]).data=t;for(o=0,a=j(e(u));o<s;++o)u[a[o]].index=o;return n(u,a),u}return i.keys=function(e){return arguments.length?(t="function"==typeof e?e:l(Array.from(e)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),i):r},i.order=function(t){return arguments.length?(e=null==t?ce:"function"==typeof t?t:l(Array.from(t)),i):e},i.offset=function(t){return arguments.length?(n=null==t?le:t,i):n},i},de=function(t,e){if((r=t.length)>0){for(var n,r,i,o=0,a=t[0].length;o<a;++o){for(i=n=0;n<r;++n)i+=t[n][o][1]||0;if(i)for(n=0;n<r;++n)t[n][o][1]/=i}le(t,e)}},ye=function(t,e){if((u=t.length)>0)for(var n,r,i,o,a,u,s=0,l=t[e[0]].length;s<l;++s)for(o=a=0,n=0;n<u;++n)(i=(r=t[e[n]][s])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)},ve=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<n;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}le(t,e)}},ge=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,o=0,a=1;a<r;++a){for(var u=0,s=0,l=0;u<i;++u){for(var c=t[e[u]],f=c[a][1]||0,h=(f-(c[a-1][1]||0))/2,p=0;p<u;++p){var d=t[e[p]];h+=(d[a][1]||0)-(d[a-1][1]||0)}s+=f,l+=h*f}n[a-1][1]+=n[a-1][0]=o,s&&(o-=l/s)}n[a-1][1]+=n[a-1][0]=o,le(t,e)}},me=function(t){var e=t.map(_e);return ce(t).sort((function(t,n){return e[t]-e[n]}))};function _e(t){for(var e,n=-1,r=0,i=t.length,o=-1/0;++n<i;)(e=+t[n][1])>o&&(o=e,r=n);return r}var be=function(t){var e=t.map(xe);return ce(t).sort((function(t,n){return e[t]-e[n]}))};function xe(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}var Oe=function(t){return be(t).reverse()},we=function(t){var e,n,r=t.length,i=t.map(xe),o=me(t),a=0,u=0,s=[],l=[];for(e=0;e<r;++e)n=o[e],a<u?(a+=i[n],s.push(n)):(u+=i[n],l.push(n));return l.reverse().concat(s)},Ae=function(t){return ce(t).reverse()}},function(t,e,n){var r=n(25),i=n(230),o=n(231),a=Math.max,u=Math.min;t.exports=function(t,e,n){var s,l,c,f,h,p,d=0,y=!1,v=!1,g=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function m(e){var n=s,r=l;return s=l=void 0,d=e,f=t.apply(r,n)}function _(t){return d=t,h=setTimeout(x,e),y?m(t):f}function b(t){var n=t-p;return void 0===p||n>=e||n<0||v&&t-d>=c}function x(){var t=i();if(b(t))return O(t);h=setTimeout(x,function(t){var n=e-(t-p);return v?u(n,c-(t-d)):n}(t))}function O(t){return h=void 0,g&&s?m(t):(s=l=void 0,f)}function w(){var t=i(),n=b(t);if(s=arguments,l=this,p=t,n){if(void 0===h)return _(p);if(v)return clearTimeout(h),h=setTimeout(x,e),m(p)}return void 0===h&&(h=setTimeout(x,e)),f}return e=o(e)||0,r(n)&&(y=!!n.leading,c=(v="maxWait"in n)?a(o(n.maxWait)||0,e):c,g="trailing"in n?!!n.trailing:g),w.cancel=function(){void 0!==h&&clearTimeout(h),d=0,s=p=l=h=void 0},w.flush=function(){return void 0===h?f:O(i())},w}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return"number"==typeof t||i(t)&&"[object Number]"==r(t)}},,,function(t,e,n){var r=n(36),i=n(128),o=n(129),a=n(130),u=n(131),s=n(132);function l(t){var e=this.__data__=new r(t);this.size=e.size}l.prototype.clear=i,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=u,l.prototype.set=s,t.exports=l},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(24),i=n(25);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(34))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(81),i=n(153),o=n(82);t.exports=function(t,e,n,a,u,s){var l=1&n,c=t.length,f=e.length;if(c!=f&&!(l&&f>c))return!1;var h=s.get(t),p=s.get(e);if(h&&p)return h==e&&p==t;var d=-1,y=!0,v=2&n?new r:void 0;for(s.set(t,e),s.set(e,t);++d<c;){var g=t[d],m=e[d];if(a)var _=l?a(m,g,d,e,t,s):a(g,m,d,t,e,s);if(void 0!==_){if(_)continue;y=!1;break}if(v){if(!i(e,(function(t,e){if(!o(v,e)&&(g===t||u(g,t,n,a,s)))return v.push(e)}))){y=!1;break}}else if(g!==m&&!u(g,m,n,a,s)){y=!1;break}}return s.delete(t),s.delete(e),y}},function(t,e,n){var r=n(59),i=n(151),o=n(152);function a(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,t.exports=a},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}},function(t,e,n){var r=n(166),i=n(21),o=Object.prototype,a=o.hasOwnProperty,u=o.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(t){return i(t)&&a.call(t,"callee")&&!u.call(t,"callee")};t.exports=s},function(t,e,n){(function(t){var r=n(12),i=n(167),o=e&&!e.nodeType&&e,a=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=a&&a.exports===o?r.Buffer:void 0,s=(u?u.isBuffer:void 0)||i;t.exports=s}).call(this,n(54)(t))},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(168),i=n(88),o=n(169),a=o&&o.isTypedArray,u=a?i(a):r;t.exports=u},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){var r=n(25);t.exports=function(t){return t==t&&!r(t)}},function(t,e){t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},function(t,e,n){var r=n(92),i=n(42);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},function(t,e,n){var r=n(14),i=n(65),o=n(210),a=n(213);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(a(t))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=e.EXITING=e.ENTERED=e.ENTERING=e.EXITED=e.UNMOUNTED=void 0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(1)),i=u(n(0)),o=u(n(52)),a=n(94);n(95);function u(t){return t&&t.__esModule?t:{default:t}}e.UNMOUNTED="unmounted";e.EXITED="exited";e.ENTERING="entering";e.ENTERED="entered";e.EXITING="exiting";var s=function(t){var e,n;function r(e,n){var r;r=t.call(this,e,n)||this;var i,o=n.transitionGroup,a=o&&!o.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(i="exited",r.appearStatus="entering"):i="entered":i=e.unmountOnExit||e.mountOnEnter?"unmounted":"exited",r.state={status:i},r.nextCallback=null,r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(t,e){return t.in&&"unmounted"===e.status?{status:"exited"}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(t){var e=null;if(t!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(e="entering"):"entering"!==n&&"entered"!==n||(e="exiting")}this.updateStatus(!1,e)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var t,e,n,r=this.props.timeout;return t=e=n=r,null!=r&&"number"!=typeof r&&(t=r.exit,e=r.enter,n=void 0!==r.appear?r.appear:e),{exit:t,enter:e,appear:n}},a.updateStatus=function(t,e){if(void 0===t&&(t=!1),null!==e){this.cancelNextCallback();var n=o.default.findDOMNode(this);"entering"===e?this.performEnter(n,t):this.performExit(n)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},a.performEnter=function(t,e){var n=this,r=this.props.enter,i=this.context.transitionGroup?this.context.transitionGroup.isMounting:e,o=this.getTimeouts(),a=i?o.appear:o.enter;e||r?(this.props.onEnter(t,i),this.safeSetState({status:"entering"},(function(){n.props.onEntering(t,i),n.onTransitionEnd(t,a,(function(){n.safeSetState({status:"entered"},(function(){n.props.onEntered(t,i)}))}))}))):this.safeSetState({status:"entered"},(function(){n.props.onEntered(t)}))},a.performExit=function(t){var e=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(t),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(t),e.onTransitionEnd(t,r.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(t)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(t)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(t,e){e=this.setNextCallback(e),this.setState(t,e)},a.setNextCallback=function(t){var e=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,e.nextCallback=null,t(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(t,e,n){this.setNextCallback(n);var r=null==e&&!this.props.addEndListener;t&&!r?(this.props.addEndListener&&this.props.addEndListener(t,this.nextCallback),null!=e&&setTimeout(this.nextCallback,e)):setTimeout(this.nextCallback,0)},a.render=function(){var t=this.state.status;if("unmounted"===t)return null;var e=this.props,n=e.children,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(e,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(t,r);var o=i.default.Children.only(n);return i.default.cloneElement(o,r)},r}(i.default.Component);function l(){}s.contextTypes={transitionGroup:r.object},s.childContextTypes={transitionGroup:function(){}},s.propTypes={},s.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:l,onEntering:l,onEntered:l,onExit:l,onExiting:l,onExited:l},s.UNMOUNTED=0,s.EXITED=1,s.ENTERING=2,s.ENTERED=3,s.EXITING=4;var c=(0,a.polyfill)(s);e.default=c},function(t,e,n){"use strict";function r(){var t=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=t&&this.setState(t)}function i(t){this.setState(function(e){var n=this.constructor.getDerivedStateFromProps(t,e);return null!=n?n:null}.bind(this))}function o(t,e){try{var n=this.props,r=this.state;this.props=t,this.state=e,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(t){var e=t.prototype;if(!e||!e.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate)return t;var n=null,a=null,u=null;if("function"==typeof e.componentWillMount?n="componentWillMount":"function"==typeof e.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof e.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof e.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof e.componentWillUpdate?u="componentWillUpdate":"function"==typeof e.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var s=t.displayName||t.name,l="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof t.getDerivedStateFromProps&&(e.componentWillMount=r,e.componentWillReceiveProps=i),"function"==typeof e.getSnapshotBeforeUpdate){if("function"!=typeof e.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");e.componentWillUpdate=o;var c=e.componentDidUpdate;e.componentDidUpdate=function(t,e,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,t,e,r)}}return t}n.r(e),n.d(e,"polyfill",(function(){return a})),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},function(t,e,n){"use strict";e.__esModule=!0,e.classNamesShape=e.timeoutsShape=void 0;var r;(r=n(1))&&r.__esModule;e.timeoutsShape=null;e.classNamesShape=null},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(1)),i=u(n(0)),o=n(94),a=n(227);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var c=Object.values||function(t){return Object.keys(t).map((function(e){return t[e]}))},f=function(t){var e,n;function r(e,n){var r,i=(r=t.call(this,e,n)||this).handleExited.bind(l(l(r)));return r.state={handleExited:i,firstRender:!0},r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o=r.prototype;return o.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},o.componentDidMount=function(){this.appeared=!0,this.mounted=!0},o.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(t,e){var n=e.children,r=e.handleExited;return{children:e.firstRender?(0,a.getInitialChildMapping)(t,r):(0,a.getNextChildMapping)(t,n,r),firstRender:!1}},o.handleExited=function(t,e){var n=(0,a.getChildMapping)(this.props.children);t.key in n||(t.props.onExited&&t.props.onExited(e),this.mounted&&this.setState((function(e){var n=s({},e.children);return delete n[t.key],{children:n}})))},o.render=function(){var t=this.props,e=t.component,n=t.childFactory,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["component","childFactory"]),o=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===e?o:i.default.createElement(e,r,o)},r}(i.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(t){return t}};var h=(0,o.polyfill)(f);e.default=h,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.flip=l;var r,i=n(239),o=(r=i)&&r.__esModule?r:{default:r};function a(t,e){return"MathExpression"===t.type?function(t,e){switch((t=function(t,e){var n=(0,o.default)(t.left,t.right,e),r=a(n.left,e),i=a(n.right,e);"MathExpression"===r.type&&"MathExpression"===i.type&&("/"===r.operator&&"*"===i.operator||"-"===r.operator&&"+"===i.operator||"*"===r.operator&&"/"===i.operator||"+"===r.operator&&"-"===i.operator)&&(u(r.right,i.right)?n=(0,o.default)(r.left,i.left,e):u(r.right,i.left)&&(n=(0,o.default)(r.left,i.right,e)),r=a(n.left,e),i=a(n.right,e));return t.left=r,t.right=i,t}(t,e)).operator){case"+":case"-":return function(t,e){var n=t,r=n.left,i=n.right,o=n.operator;if("CssVariable"===r.type||"CssVariable"===i.type)return t;if(0===i.value)return r;if(0===r.value&&"+"===o)return i;if(0===r.value&&"-"===o)return function t(e){s(e.type)?e.value=-e.value:"MathExpression"==e.type&&(e.left=t(e.left),e.right=t(e.right));return e}(i);r.type===i.type&&s(r.type)&&((t=Object.assign({},r)).value="+"===o?r.value+i.value:r.value-i.value);if(s(r.type)&&("+"===i.operator||"-"===i.operator)&&"MathExpression"===i.type){if(r.type===i.left.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:o,left:r,right:i.left},e),t.right=i.right,t.operator="-"===o?l(i.operator):i.operator,a(t,e);if(r.type===i.right.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:"-"===o?l(i.operator):i.operator,left:r,right:i.right},e),t.right=i.left,a(t,e)}if("MathExpression"===r.type&&("+"===r.operator||"-"===r.operator)&&s(i.type)){if(i.type===r.left.type)return(t=Object.assign({},r)).left=a({type:"MathExpression",operator:o,left:r.left,right:i},e),a(t,e);if(i.type===r.right.type)return t=Object.assign({},r),"-"===r.operator?(t.right=a({type:"MathExpression",operator:"-"===o?"+":"-",left:i,right:r.right},e),t.operator="-"===o?"-":"+"):t.right=a({type:"MathExpression",operator:o,left:r.right,right:i},e),t.right.value<0&&(t.right.value*=-1,t.operator="-"===t.operator?"+":"-"),a(t,e)}return t}(t,e);case"/":return function(t,e){if(!s(t.right.type))return t;if("Value"!==t.right.type)throw new Error('Cannot divide by "'+t.right.unit+'", number expected');if(0===t.right.value)throw new Error("Cannot divide by zero");if("MathExpression"===t.left.type)return s(t.left.left.type)&&s(t.left.right.type)?(t.left.left.value/=t.right.value,t.left.right.value/=t.right.value,a(t.left,e)):t;if(s(t.left.type))return t.left.value/=t.right.value,t.left;return t}(t,e);case"*":return function(t){if("MathExpression"===t.left.type&&"Value"===t.right.type){if(s(t.left.left.type)&&s(t.left.right.type))return t.left.left.value*=t.right.value,t.left.right.value*=t.right.value,t.left}else{if(s(t.left.type)&&"Value"===t.right.type)return t.left.value*=t.right.value,t.left;if("Value"===t.left.type&&"MathExpression"===t.right.type){if(s(t.right.left.type)&&s(t.right.right.type))return t.right.left.value*=t.left.value,t.right.right.value*=t.left.value,t.right}else if("Value"===t.left.type&&s(t.right.type))return t.right.value*=t.left.value,t.right}return t}(t)}return t}(t,e):"Calc"===t.type?a(t.value,e):t}function u(t,e){return t.type===e.type&&t.value===e.value}function s(t){switch(t){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":case"EmValue":case"ExValue":case"ChValue":case"RemValue":case"VhValue":case"VwValue":case"VminValue":case"VmaxValue":case"PercentageValue":case"Value":return!0}return!1}function l(t){return"+"===t?"-":"+"}e.default=a},function(t,e,n){var r;/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */!function(i){"use strict";var o,a={precision:20,rounding:4,toExpNeg:-7,toExpPos:21,LN10:"2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"},u=!0,s="[DecimalError] ",l=s+"Invalid argument: ",c=s+"Exponent out of range: ",f=Math.floor,h=Math.pow,p=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,d=1e7,y=f(1286742750677284.5),v={};function g(t,e){var n,r,i,o,a,s,l,c,f=t.constructor,h=f.precision;if(!t.s||!e.s)return e.s||(e=new f(t)),u?P(e,h):e;if(l=t.d,c=e.d,a=t.e,i=e.e,l=l.slice(),o=a-i){for(o<0?(r=l,o=-o,s=c.length):(r=c,i=a,s=l.length),o>(s=(a=Math.ceil(h/7))>s?a+1:s+1)&&(o=s,r.length=1),r.reverse();o--;)r.push(0);r.reverse()}for((s=l.length)-(o=c.length)<0&&(o=s,r=c,c=l,l=r),n=0;o;)n=(l[--o]=l[o]+c[o]+n)/d|0,l[o]%=d;for(n&&(l.unshift(n),++i),s=l.length;0==l[--s];)l.pop();return e.d=l,e.e=i,u?P(e,h):e}function m(t,e,n){if(t!==~~t||t<e||t>n)throw Error(l+t)}function _(t){var e,n,r,i=t.length-1,o="",a=t[0];if(i>0){for(o+=a,e=1;e<i;e++)(n=7-(r=t[e]+"").length)&&(o+=A(n)),o+=r;(n=7-(r=(a=t[e])+"").length)&&(o+=A(n))}else if(0===a)return"0";for(;a%10==0;)a/=10;return o+a}v.absoluteValue=v.abs=function(){var t=new this.constructor(this);return t.s&&(t.s=1),t},v.comparedTo=v.cmp=function(t){var e,n,r,i,o=this;if(t=new o.constructor(t),o.s!==t.s)return o.s||-t.s;if(o.e!==t.e)return o.e>t.e^o.s<0?1:-1;for(e=0,n=(r=o.d.length)<(i=t.d.length)?r:i;e<n;++e)if(o.d[e]!==t.d[e])return o.d[e]>t.d[e]^o.s<0?1:-1;return r===i?0:r>i^o.s<0?1:-1},v.decimalPlaces=v.dp=function(){var t=this,e=t.d.length-1,n=7*(e-t.e);if(e=t.d[e])for(;e%10==0;e/=10)n--;return n<0?0:n},v.dividedBy=v.div=function(t){return b(this,new this.constructor(t))},v.dividedToIntegerBy=v.idiv=function(t){var e=this.constructor;return P(b(this,new e(t),0,1),e.precision)},v.equals=v.eq=function(t){return!this.cmp(t)},v.exponent=function(){return O(this)},v.greaterThan=v.gt=function(t){return this.cmp(t)>0},v.greaterThanOrEqualTo=v.gte=function(t){return this.cmp(t)>=0},v.isInteger=v.isint=function(){return this.e>this.d.length-2},v.isNegative=v.isneg=function(){return this.s<0},v.isPositive=v.ispos=function(){return this.s>0},v.isZero=function(){return 0===this.s},v.lessThan=v.lt=function(t){return this.cmp(t)<0},v.lessThanOrEqualTo=v.lte=function(t){return this.cmp(t)<1},v.logarithm=v.log=function(t){var e,n=this,r=n.constructor,i=r.precision,a=i+5;if(void 0===t)t=new r(10);else if((t=new r(t)).s<1||t.eq(o))throw Error(s+"NaN");if(n.s<1)throw Error(s+(n.s?"NaN":"-Infinity"));return n.eq(o)?new r(0):(u=!1,e=b(E(n,a),E(t,a),a),u=!0,P(e,i))},v.minus=v.sub=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?S(e,t):g(e,(t.s=-t.s,t))},v.modulo=v.mod=function(t){var e,n=this,r=n.constructor,i=r.precision;if(!(t=new r(t)).s)throw Error(s+"NaN");return n.s?(u=!1,e=b(n,t,0,1).times(t),u=!0,n.minus(e)):P(new r(n),i)},v.naturalExponential=v.exp=function(){return x(this)},v.naturalLogarithm=v.ln=function(){return E(this)},v.negated=v.neg=function(){var t=new this.constructor(this);return t.s=-t.s||0,t},v.plus=v.add=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?g(e,t):S(e,(t.s=-t.s,t))},v.precision=v.sd=function(t){var e,n,r,i=this;if(void 0!==t&&t!==!!t&&1!==t&&0!==t)throw Error(l+t);if(e=O(i)+1,n=7*(r=i.d.length-1)+1,r=i.d[r]){for(;r%10==0;r/=10)n--;for(r=i.d[0];r>=10;r/=10)n++}return t&&e>n?e:n},v.squareRoot=v.sqrt=function(){var t,e,n,r,i,o,a,l=this,c=l.constructor;if(l.s<1){if(!l.s)return new c(0);throw Error(s+"NaN")}for(t=O(l),u=!1,0==(i=Math.sqrt(+l))||i==1/0?(((e=_(l.d)).length+t)%2==0&&(e+="0"),i=Math.sqrt(e),t=f((t+1)/2)-(t<0||t%2),r=new c(e=i==1/0?"5e"+t:(e=i.toExponential()).slice(0,e.indexOf("e")+1)+t)):r=new c(i.toString()),i=a=(n=c.precision)+3;;)if(r=(o=r).plus(b(l,o,a+2)).times(.5),_(o.d).slice(0,a)===(e=_(r.d)).slice(0,a)){if(e=e.slice(a-3,a+1),i==a&&"4999"==e){if(P(o,n+1,0),o.times(o).eq(l)){r=o;break}}else if("9999"!=e)break;a+=4}return u=!0,P(r,n)},v.times=v.mul=function(t){var e,n,r,i,o,a,s,l,c,f=this,h=f.constructor,p=f.d,y=(t=new h(t)).d;if(!f.s||!t.s)return new h(0);for(t.s*=f.s,n=f.e+t.e,(l=p.length)<(c=y.length)&&(o=p,p=y,y=o,a=l,l=c,c=a),o=[],r=a=l+c;r--;)o.push(0);for(r=c;--r>=0;){for(e=0,i=l+r;i>r;)s=o[i]+y[r]*p[i-r-1]+e,o[i--]=s%d|0,e=s/d|0;o[i]=(o[i]+e)%d|0}for(;!o[--a];)o.pop();return e?++n:o.shift(),t.d=o,t.e=n,u?P(t,h.precision):t},v.toDecimalPlaces=v.todp=function(t,e){var n=this,r=n.constructor;return n=new r(n),void 0===t?n:(m(t,0,1e9),void 0===e?e=r.rounding:m(e,0,8),P(n,t+O(n)+1,e))},v.toExponential=function(t,e){var n,r=this,i=r.constructor;return void 0===t?n=k(r,!0):(m(t,0,1e9),void 0===e?e=i.rounding:m(e,0,8),n=k(r=P(new i(r),t+1,e),!0,t+1)),n},v.toFixed=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?k(i):(m(t,0,1e9),void 0===e?e=o.rounding:m(e,0,8),n=k((r=P(new o(i),t+O(i)+1,e)).abs(),!1,t+O(r)+1),i.isneg()&&!i.isZero()?"-"+n:n)},v.toInteger=v.toint=function(){var t=this,e=t.constructor;return P(new e(t),O(t)+1,e.rounding)},v.toNumber=function(){return+this},v.toPower=v.pow=function(t){var e,n,r,i,a,l,c=this,h=c.constructor,p=+(t=new h(t));if(!t.s)return new h(o);if(!(c=new h(c)).s){if(t.s<1)throw Error(s+"Infinity");return c}if(c.eq(o))return c;if(r=h.precision,t.eq(o))return P(c,r);if(l=(e=t.e)>=(n=t.d.length-1),a=c.s,l){if((n=p<0?-p:p)<=9007199254740991){for(i=new h(o),e=Math.ceil(r/7+4),u=!1;n%2&&C((i=i.times(c)).d,e),0!==(n=f(n/2));)C((c=c.times(c)).d,e);return u=!0,t.s<0?new h(o).div(i):P(i,r)}}else if(a<0)throw Error(s+"NaN");return a=a<0&&1&t.d[Math.max(e,n)]?-1:1,c.s=1,u=!1,i=t.times(E(c,r+12)),u=!0,(i=x(i)).s=a,i},v.toPrecision=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?r=k(i,(n=O(i))<=o.toExpNeg||n>=o.toExpPos):(m(t,1,1e9),void 0===e?e=o.rounding:m(e,0,8),r=k(i=P(new o(i),t,e),t<=(n=O(i))||n<=o.toExpNeg,t)),r},v.toSignificantDigits=v.tosd=function(t,e){var n=this.constructor;return void 0===t?(t=n.precision,e=n.rounding):(m(t,1,1e9),void 0===e?e=n.rounding:m(e,0,8)),P(new n(this),t,e)},v.toString=v.valueOf=v.val=v.toJSON=function(){var t=this,e=O(t),n=t.constructor;return k(t,e<=n.toExpNeg||e>=n.toExpPos)};var b=function(){function t(t,e){var n,r=0,i=t.length;for(t=t.slice();i--;)n=t[i]*e+r,t[i]=n%d|0,r=n/d|0;return r&&t.unshift(r),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n){for(var r=0;n--;)t[n]-=r,r=t[n]<e[n]?1:0,t[n]=r*d+t[n]-e[n];for(;!t[0]&&t.length>1;)t.shift()}return function(r,i,o,a){var u,l,c,f,h,p,y,v,g,m,_,b,x,w,A,E,M,S,k=r.constructor,C=r.s==i.s?1:-1,j=r.d,T=i.d;if(!r.s)return new k(r);if(!i.s)throw Error(s+"Division by zero");for(l=r.e-i.e,M=T.length,A=j.length,v=(y=new k(C)).d=[],c=0;T[c]==(j[c]||0);)++c;if(T[c]>(j[c]||0)&&--l,(b=null==o?o=k.precision:a?o+(O(r)-O(i))+1:o)<0)return new k(0);if(b=b/7+2|0,c=0,1==M)for(f=0,T=T[0],b++;(c<A||f)&&b--;c++)x=f*d+(j[c]||0),v[c]=x/T|0,f=x%T|0;else{for((f=d/(T[0]+1)|0)>1&&(T=t(T,f),j=t(j,f),M=T.length,A=j.length),w=M,m=(g=j.slice(0,M)).length;m<M;)g[m++]=0;(S=T.slice()).unshift(0),E=T[0],T[1]>=d/2&&++E;do{f=0,(u=e(T,g,M,m))<0?(_=g[0],M!=m&&(_=_*d+(g[1]||0)),(f=_/E|0)>1?(f>=d&&(f=d-1),1==(u=e(h=t(T,f),g,p=h.length,m=g.length))&&(f--,n(h,M<p?S:T,p))):(0==f&&(u=f=1),h=T.slice()),(p=h.length)<m&&h.unshift(0),n(g,h,m),-1==u&&(u=e(T,g,M,m=g.length))<1&&(f++,n(g,M<m?S:T,m)),m=g.length):0===u&&(f++,g=[0]),v[c++]=f,u&&g[0]?g[m++]=j[w]||0:(g=[j[w]],m=1)}while((w++<A||void 0!==g[0])&&b--)}return v[0]||v.shift(),y.e=l,P(y,a?o+O(y)+1:o)}}();function x(t,e){var n,r,i,a,s,l=0,f=0,p=t.constructor,d=p.precision;if(O(t)>16)throw Error(c+O(t));if(!t.s)return new p(o);for(null==e?(u=!1,s=d):s=e,a=new p(.03125);t.abs().gte(.1);)t=t.times(a),f+=5;for(s+=Math.log(h(2,f))/Math.LN10*2+5|0,n=r=i=new p(o),p.precision=s;;){if(r=P(r.times(t),s),n=n.times(++l),_((a=i.plus(b(r,n,s))).d).slice(0,s)===_(i.d).slice(0,s)){for(;f--;)i=P(i.times(i),s);return p.precision=d,null==e?(u=!0,P(i,d)):i}i=a}}function O(t){for(var e=7*t.e,n=t.d[0];n>=10;n/=10)e++;return e}function w(t,e,n){if(e>t.LN10.sd())throw u=!0,n&&(t.precision=n),Error(s+"LN10 precision limit exceeded");return P(new t(t.LN10),e)}function A(t){for(var e="";t--;)e+="0";return e}function E(t,e){var n,r,i,a,l,c,f,h,p,d=1,y=t,v=y.d,g=y.constructor,m=g.precision;if(y.s<1)throw Error(s+(y.s?"NaN":"-Infinity"));if(y.eq(o))return new g(0);if(null==e?(u=!1,h=m):h=e,y.eq(10))return null==e&&(u=!0),w(g,h);if(h+=10,g.precision=h,r=(n=_(v)).charAt(0),a=O(y),!(Math.abs(a)<15e14))return f=w(g,h+2,m).times(a+""),y=E(new g(r+"."+n.slice(1)),h-10).plus(f),g.precision=m,null==e?(u=!0,P(y,m)):y;for(;r<7&&1!=r||1==r&&n.charAt(1)>3;)r=(n=_((y=y.times(t)).d)).charAt(0),d++;for(a=O(y),r>1?(y=new g("0."+n),a++):y=new g(r+"."+n.slice(1)),c=l=y=b(y.minus(o),y.plus(o),h),p=P(y.times(y),h),i=3;;){if(l=P(l.times(p),h),_((f=c.plus(b(l,new g(i),h))).d).slice(0,h)===_(c.d).slice(0,h))return c=c.times(2),0!==a&&(c=c.plus(w(g,h+2,m).times(a+""))),c=b(c,new g(d),h),g.precision=m,null==e?(u=!0,P(c,m)):c;c=f,i+=2}}function M(t,e){var n,r,i;for((n=e.indexOf("."))>-1&&(e=e.replace(".","")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;48===e.charCodeAt(r);)++r;for(i=e.length;48===e.charCodeAt(i-1);)--i;if(e=e.slice(r,i)){if(i-=r,n=n-r-1,t.e=f(n/7),t.d=[],r=(n+1)%7,n<0&&(r+=7),r<i){for(r&&t.d.push(+e.slice(0,r)),i-=7;r<i;)t.d.push(+e.slice(r,r+=7));r=7-(e=e.slice(r)).length}else r-=i;for(;r--;)e+="0";if(t.d.push(+e),u&&(t.e>y||t.e<-y))throw Error(c+n)}else t.s=0,t.e=0,t.d=[0];return t}function P(t,e,n){var r,i,o,a,s,l,p,v,g=t.d;for(a=1,o=g[0];o>=10;o/=10)a++;if((r=e-a)<0)r+=7,i=e,p=g[v=0];else{if((v=Math.ceil((r+1)/7))>=(o=g.length))return t;for(p=o=g[v],a=1;o>=10;o/=10)a++;i=(r%=7)-7+a}if(void 0!==n&&(s=p/(o=h(10,a-i-1))%10|0,l=e<0||void 0!==g[v+1]||p%o,l=n<4?(s||l)&&(0==n||n==(t.s<0?3:2)):s>5||5==s&&(4==n||l||6==n&&(r>0?i>0?p/h(10,a-i):0:g[v-1])%10&1||n==(t.s<0?8:7))),e<1||!g[0])return l?(o=O(t),g.length=1,e=e-o-1,g[0]=h(10,(7-e%7)%7),t.e=f(-e/7)||0):(g.length=1,g[0]=t.e=t.s=0),t;if(0==r?(g.length=v,o=1,v--):(g.length=v+1,o=h(10,7-r),g[v]=i>0?(p/h(10,a-i)%h(10,i)|0)*o:0),l)for(;;){if(0==v){(g[0]+=o)==d&&(g[0]=1,++t.e);break}if(g[v]+=o,g[v]!=d)break;g[v--]=0,o=1}for(r=g.length;0===g[--r];)g.pop();if(u&&(t.e>y||t.e<-y))throw Error(c+O(t));return t}function S(t,e){var n,r,i,o,a,s,l,c,f,h,p=t.constructor,y=p.precision;if(!t.s||!e.s)return e.s?e.s=-e.s:e=new p(t),u?P(e,y):e;if(l=t.d,h=e.d,r=e.e,c=t.e,l=l.slice(),a=c-r){for((f=a<0)?(n=l,a=-a,s=h.length):(n=h,r=c,s=l.length),a>(i=Math.max(Math.ceil(y/7),s)+2)&&(a=i,n.length=1),n.reverse(),i=a;i--;)n.push(0);n.reverse()}else{for((f=(i=l.length)<(s=h.length))&&(s=i),i=0;i<s;i++)if(l[i]!=h[i]){f=l[i]<h[i];break}a=0}for(f&&(n=l,l=h,h=n,e.s=-e.s),s=l.length,i=h.length-s;i>0;--i)l[s++]=0;for(i=h.length;i>a;){if(l[--i]<h[i]){for(o=i;o&&0===l[--o];)l[o]=d-1;--l[o],l[i]+=d}l[i]-=h[i]}for(;0===l[--s];)l.pop();for(;0===l[0];l.shift())--r;return l[0]?(e.d=l,e.e=r,u?P(e,y):e):new p(0)}function k(t,e,n){var r,i=O(t),o=_(t.d),a=o.length;return e?(n&&(r=n-a)>0?o=o.charAt(0)+"."+o.slice(1)+A(r):a>1&&(o=o.charAt(0)+"."+o.slice(1)),o=o+(i<0?"e":"e+")+i):i<0?(o="0."+A(-i-1)+o,n&&(r=n-a)>0&&(o+=A(r))):i>=a?(o+=A(i+1-a),n&&(r=n-i-1)>0&&(o=o+"."+A(r))):((r=i+1)<a&&(o=o.slice(0,r)+"."+o.slice(r)),n&&(r=n-a)>0&&(i+1===a&&(o+="."),o+=A(r))),t.s<0?"-"+o:o}function C(t,e){if(t.length>e)return t.length=e,!0}function j(t){if(!t||"object"!=typeof t)throw Error(s+"Object expected");var e,n,r,i=["precision",1,1e9,"rounding",0,8,"toExpNeg",-1/0,0,"toExpPos",0,1/0];for(e=0;e<i.length;e+=3)if(void 0!==(r=t[n=i[e]])){if(!(f(r)===r&&r>=i[e+1]&&r<=i[e+2]))throw Error(l+n+": "+r);this[n]=r}if(void 0!==(r=t[n="LN10"])){if(r!=Math.LN10)throw Error(l+n+": "+r);this[n]=new this(r)}return this}(a=function t(e){var n,r,i;function o(t){var e=this;if(!(e instanceof o))return new o(t);if(e.constructor=o,t instanceof o)return e.s=t.s,e.e=t.e,void(e.d=(t=t.d)?t.slice():t);if("number"==typeof t){if(0*t!=0)throw Error(l+t);if(t>0)e.s=1;else{if(!(t<0))return e.s=0,e.e=0,void(e.d=[0]);t=-t,e.s=-1}return t===~~t&&t<1e7?(e.e=0,void(e.d=[t])):M(e,t.toString())}if("string"!=typeof t)throw Error(l+t);if(45===t.charCodeAt(0)?(t=t.slice(1),e.s=-1):e.s=1,!p.test(t))throw Error(l+t);M(e,t)}if(o.prototype=v,o.ROUND_UP=0,o.ROUND_DOWN=1,o.ROUND_CEIL=2,o.ROUND_FLOOR=3,o.ROUND_HALF_UP=4,o.ROUND_HALF_DOWN=5,o.ROUND_HALF_EVEN=6,o.ROUND_HALF_CEIL=7,o.ROUND_HALF_FLOOR=8,o.clone=t,o.config=o.set=j,void 0===e&&(e={}),e)for(i=["precision","rounding","toExpNeg","toExpPos","LN10"],n=0;n<i.length;)e.hasOwnProperty(r=i[n++])||(e[r]=this[r]);return o.config(e),o}(a)).default=a.Decimal=a,o=new a(1),void 0===(r=function(){return a}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(e,"__esModule",{value:!0}),e.memoize=e.reverse=e.compose=e.map=e.range=e.curry=e.PLACE_HOLDER=void 0;var i=function(t){return t},o={"@@functional/placeholder":!0};e.PLACE_HOLDER=o;var a=function(t){return t===o},u=function(t){return function e(){return 0===arguments.length||1===arguments.length&&a(arguments.length<=0?void 0:arguments[0])?e:t.apply(void 0,arguments)}},s=function(t){return function t(e,n){return 1===e?n:u((function(){for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];var c=s.filter((function(t){return t!==o})).length;return c>=e?n.apply(void 0,s):t(e-c,u((function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var o=s.map((function(t){return a(t)?e.shift():t}));return n.apply(void 0,r(o).concat(e))})))}))}(t.length,t)};e.curry=s;e.range=function(t,e){for(var n=[],r=t;r<e;++r)n[r-t]=r;return n};var l=s((function(t,e){return Array.isArray(e)?e.map(t):Object.keys(e).map((function(t){return e[t]})).map(t)}));e.map=l;e.compose=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(!e.length)return i;var r=e.reverse(),o=r[0],a=r.slice(1);return function(){return a.reduce((function(t,e){return e(t)}),o.apply(void 0,arguments))}};e.reverse=function(t){return Array.isArray(t)?t.reverse():t.split("").reverse.join("")};e.memoize=function(t){var e=null,n=null;return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return e&&i.every((function(t,n){return t===e[n]}))?n:(e=i,n=t.apply(void 0,i))}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Cross=void 0;var c=s(n(0)),f=l(n(4)),h=n(5),p=n(2),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getPath=function(t,e,n,r,i,o){return"M"+t+","+i+"v"+r+"M"+o+","+e+"h"+n},e.prototype.render=function(){var t=this.props,n=t.x,r=t.y,i=t.width,a=t.height,u=t.top,s=t.left,l=t.className;return h.isNumber(n)&&h.isNumber(r)&&h.isNumber(i)&&h.isNumber(a)&&h.isNumber(u)&&h.isNumber(s)?c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:f.default("recharts-cross",l),d:e.getPath(n,r,i,a,u,s)})):null},e.defaultProps={x:0,y:0,top:0,left:0,width:0,height:0},e}(c.PureComponent);e.Cross=d},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Pie=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(45),v=n(28),g=n(22),m=n(17),_=n(15),b=n(27),x=n(9),O=n(8),w=n(11),A=n(5),E=n(7),M=n(26),P=n(2),S=function(t){function e(e){var n=t.call(this,e)||this;return n.id=A.uniqueId("recharts-pie-"),n.handleAnimationEnd=function(){var t=n.props.onAnimationEnd;n.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},n.handleAnimationStart=function(){var t=n.props.onAnimationStart;n.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},n.state={isAnimationFinished:!e.isAnimationActive,prevIsAnimationActive:e.isAnimationActive,prevAnimationId:e.animationId},n}return i(e,t),e.getDerivedStateFromProps=function(t,e){return e.prevIsAnimationActive!==t.isAnimationActive?{prevIsAnimationActive:t.isAnimationActive,prevAnimationId:t.animationId,curSectors:t.sectors,prevSectors:[]}:t.isAnimationActive&&t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curSectors:t.sectors,prevSectors:e.curSectors}:t.sectors!==e.curSectors?{curSectors:t.sectors}:null},e.getTextAnchor=function(t,e){return t>e?"start":t<e?"end":"middle"},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderLabelLineItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):c.default.createElement(v.Curve,o({},e,{type:"linear",className:"recharts-pie-label-line"}))},e.renderLabelItem=function(t,e,n){if(c.default.isValidElement(t))return c.default.cloneElement(t,e);var r=n;return p.default.isFunction(t)&&(r=t(e),c.default.isValidElement(r))?r:c.default.createElement(g.Text,o({},e,{alignmentBaseline:"middle",className:"recharts-pie-label-text"}),r)},e.prototype.renderLabels=function(t){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var n=this.props,r=n.label,i=n.labelLine,a=n.dataKey,u=n.valueKey,s=P.filterProps(this.props),l=P.filterProps(r),f=P.filterProps(i),h=r&&r.offsetRadius||20,y=t.map((function(t,n){var y=(t.startAngle+t.endAngle)/2,v=w.polarToCartesian(t.cx,t.cy,t.outerRadius+h,y),g=o(o(o(o(o(o({},s),t),{stroke:"none"}),l),{index:n,textAnchor:e.getTextAnchor(v.x,t.cx)}),v),m=o(o(o(o(o({},s),t),{fill:"none",stroke:t.fill}),f),{index:n,points:[w.polarToCartesian(t.cx,t.cy,t.outerRadius,y),v],key:"line"}),_=a;return p.default.isNil(a)&&p.default.isNil(u)?_="value":p.default.isNil(a)&&(_=u),c.default.createElement(d.Layer,{key:"label-"+n},i&&e.renderLabelLineItem(i,m),e.renderLabelItem(r,g,E.getValueByDataKey(t,_)))}));return c.default.createElement(d.Layer,{className:"recharts-pie-labels"},y)},e.renderSectorItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):p.default.isPlainObject(t)?c.default.createElement(y.Sector,o({},e,t)):c.default.createElement(y.Sector,o({},e))},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.activeShape,a=r.blendStroke;return t.map((function(t,r){var u=n.isActiveIndex(r)?i:null,s=o(o({},t),{stroke:a?t.fill:t.stroke});return c.default.createElement(d.Layer,o({className:"recharts-pie-sector"},P.adaptEventsOfChild(n.props,t,r),{key:"sector-"+r}),e.renderSectorItem(u,s))}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.sectors,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state,h=l.prevSectors,y=l.prevIsAnimationActive;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+s+"-"+y,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=[],a=(n&&n[0]).startAngle;return n.forEach((function(t,e){var n=h&&h[e],u=e>0?p.default.get(t,"paddingAngle",0):0;if(n){var s=A.interpolateNumber(n.endAngle-n.startAngle,t.endAngle-t.startAngle),l=o(o({},t),{startAngle:a+u,endAngle:a+s(r)+u});i.push(l),a=l.endAngle}else{var c=t.endAngle,f=t.startAngle,d=A.interpolateNumber(0,c-f)(r);l=o(o({},t),{startAngle:a+u,endAngle:a+d+u});i.push(l),a=l.endAngle}})),c.default.createElement(d.Layer,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.sectors,n=t.isAnimationActive,r=this.state.prevSectors;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.sectors,r=t.className,i=t.label,o=t.cx,a=t.cy,u=t.innerRadius,s=t.outerRadius,l=t.isAnimationActive,f=this.state.isAnimationFinished;if(e||!n||!n.length||!A.isNumber(o)||!A.isNumber(a)||!A.isNumber(u)||!A.isNumber(s))return null;var p=h.default("recharts-pie",r);return c.default.createElement(d.Layer,{className:p},this.renderSectors(),i&&this.renderLabels(n),m.Label.renderCallByParent(this.props,null,!1),(!l||f)&&_.LabelList.renderCallByParent(this.props,n,!1))},e.displayName="Pie",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",cx:"50%",cy:"50%",startAngle:0,endAngle:360,innerRadius:0,outerRadius:"80%",paddingAngle:0,labelLine:!0,hide:!1,minAngle:0,isAnimationActive:!O.Global.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",blendStroke:!1},e.parseDeltaAngle=function(t,e){return A.mathSign(e-t)*Math.min(Math.abs(e-t),360)},e.getRealPieData=function(t){var e=t.props,n=e.data,r=e.children,i=P.filterProps(t.props),a=x.findAllByType(r,b.Cell.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.parseCoordinateOfPie=function(t,e){var n=e.top,r=e.left,i=e.width,o=e.height,a=w.getMaxRadius(i,o);return{cx:r+A.getPercentValue(t.props.cx,i,i/2),cy:n+A.getPercentValue(t.props.cy,o,o/2),innerRadius:A.getPercentValue(t.props.innerRadius,a,0),outerRadius:A.getPercentValue(t.props.outerRadius,a,.8*a),maxRadius:t.props.maxRadius||Math.sqrt(i*i+o*o)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=e.getRealPieData(n);if(!i||!i.length)return null;var a=n.props,u=a.cornerRadius,s=a.startAngle,l=a.endAngle,c=a.paddingAngle,f=a.dataKey,h=a.nameKey,d=a.valueKey,y=a.tooltipType,v=Math.abs(n.props.minAngle),g=e.parseCoordinateOfPie(n,r),m=e.parseDeltaAngle(s,l),_=Math.abs(m),b=f;p.default.isNil(f)&&p.default.isNil(d)?(M.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),b="value"):p.default.isNil(f)&&(M.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),b=d);var x,O,P=i.filter((function(t){return 0!==E.getValueByDataKey(t,b,0)})).length,S=_-P*v-(_>=360?P:P-1)*c,k=i.reduce((function(t,e){var n=E.getValueByDataKey(e,b,0);return t+(A.isNumber(n)?n:0)}),0);k>0&&(x=i.map((function(t,e){var n,r=E.getValueByDataKey(t,b,0),i=E.getValueByDataKey(t,h,e),a=(A.isNumber(r)?r:0)/k,l=(n=e?O.endAngle+A.mathSign(m)*c*(0!==r?1:0):s)+A.mathSign(m)*((0!==r?v:0)+a*S),f=(n+l)/2,p=(g.innerRadius+g.outerRadius)/2,d=[{name:i,value:r,payload:t,dataKey:b,type:y}],_=w.polarToCartesian(g.cx,g.cy,p,f);return O=o(o(o({percent:a,cornerRadius:u,name:i,tooltipPayload:d,midAngle:f,middleRadius:p,tooltipPosition:_},t),g),{value:E.getValueByDataKey(t,b),startAngle:n,endAngle:l,payload:t,paddingAngle:A.mathSign(m)*c})})));return o(o({},g),{sectors:x,data:i})},e}(c.PureComponent);e.Pie=S},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Radar=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(5),y=n(8),v=n(11),g=n(7),m=n(46),_=n(23),b=n(6),x=n(15),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},e.handleMouseEnter=function(t){var n=e.props.onMouseEnter;n&&n(e.props,t)},e.handleMouseLeave=function(t){var n=e.props.onMouseLeave;n&&n(e.props,t)},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.renderDotItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):c.default.createElement(_.Dot,o({},e,{className:"recharts-radar-dot"}))},e.prototype.renderDots=function(t){var n=this.props,r=n.dot,i=n.dataKey,a=O.filterProps(this.props),u=O.filterProps(r),s=t.map((function(t,n){var s=o(o(o({key:"dot-"+n,r:3},a),u),{dataKey:i,cx:t.x,cy:t.y,index:n,payload:t});return e.renderDotItem(r,s)}));return c.default.createElement(b.Layer,{className:"recharts-radar-dots"},s)},e.prototype.renderPolygonStatically=function(t){var e,n=this.props,r=n.shape,i=n.dot,a=n.isRange,u=n.baseLinePoints,s=n.connectNulls;return e=c.default.isValidElement(r)?c.default.cloneElement(r,o(o({},this.props),{points:t})):p.default.isFunction(r)?r(o(o({},this.props),{points:t})):c.default.createElement(m.Polygon,o({},O.filterProps(this.props,!0),{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,points:t,baseLinePoints:a?u:null,connectNulls:s})),c.default.createElement(b.Layer,{className:"recharts-radar-polygon"},e,i?this.renderDots(t):null)},e.prototype.renderPolygonWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevPoints;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radar-"+s,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=l&&l.length/n.length,a=n.map((function(t,e){var n=l&&l[Math.floor(e*i)];if(n){var a=d.interpolateNumber(n.x,t.x),u=d.interpolateNumber(n.y,t.y);return o(o({},t),{x:a(r),y:u(r)})}var s=d.interpolateNumber(t.cx,t.x),c=d.interpolateNumber(t.cy,t.y);return o(o({},t),{x:s(r),y:c(r)})}));return t.renderPolygonStatically(a)}))},e.prototype.renderPolygon=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=t.isRange,i=this.state.prevPoints;return!(n&&e&&e.length)||r||i&&p.default.isEqual(i,e)?this.renderPolygonStatically(e):this.renderPolygonWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.className,r=t.points,i=t.isAnimationActive;if(e||!r||!r.length)return null;var o=this.state.isAnimationFinished,a=h.default("recharts-radar",n);return c.default.createElement(b.Layer,{className:a},this.renderPolygon(),(!i||o)&&x.LabelList.renderCallByParent(this.props,r))},e.displayName="Radar",e.defaultProps={angleAxisId:0,radiusAxisId:0,hide:!1,activeDot:!0,dot:!1,legendType:"rect",isAnimationActive:!y.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getComposedData=function(t){var e=t.radiusAxis,n=t.angleAxis,r=t.displayedData,i=t.dataKey,a=t.bandSize,u=n.cx,s=n.cy,l=!1,c=[];r.forEach((function(t,r){var f=g.getValueByDataKey(t,n.dataKey,r),h=g.getValueByDataKey(t,i),d=n.scale(f)+(a||0),y=p.default.isArray(h)?p.default.last(h):h,m=p.default.isNil(y)?void 0:e.scale(y);p.default.isArray(h)&&h.length>=2&&(l=!0),c.push(o(o({},v.polarToCartesian(u,s,m,d)),{name:f,value:h,cx:u,cy:s,radius:m,angle:d,payload:t}))}));var f=[];return l&&c.forEach((function(t){if(p.default.isArray(t.value)){var n=p.default.first(t.value),r=p.default.isNil(n)?void 0:e.scale(n);f.push(o(o(o({},t),{radius:r}),v.polarToCartesian(u,s,r,t.angle)))}else f.push(t)})),{points:c,isRange:l,baseLinePoints:f}},e}(c.PureComponent);e.Radar=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RadialBar=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(45),v=n(6),g=n(9),m=n(8),_=n(15),b=n(27),x=n(5),O=n(7),w=n(2),A=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curData:t.data,prevData:e.curData}:t.data!==e.curData?{curData:t.data}:null},e.prototype.getDeltaAngle=function(){var t=this.props,e=t.startAngle,n=t.endAngle;return x.mathSign(n-e)*Math.min(Math.abs(n-e),360)},e.renderSectorShape=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(y.Sector,e)},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.shape,a=r.activeShape,u=r.activeIndex,s=r.cornerRadius,c=l(r,["shape","activeShape","activeIndex","cornerRadius"]),f=w.filterProps(c);return t.map((function(t,r){var l=o(o(o(o(o({},f),{cornerRadius:s}),t),w.adaptEventsOfChild(n.props,t,r)),{key:"sector-"+r,className:"recharts-radial-bar-sector",forceCornerRadius:c.forceCornerRadius,cornerIsExternal:c.cornerIsExternal});return e.renderSectorShape(r===u?a:i,l)}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevData;return f.default.createElement(p.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radialBar-"+s,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=x.interpolateNumber(n.startAngle,t.startAngle),a=x.interpolateNumber(n.endAngle,t.endAngle);return o(o({},t),{startAngle:i(r),endAngle:a(r)})}var u=t.endAngle,s=t.startAngle,c=x.interpolateNumber(s,u);return o(o({},t),{endAngle:c(r)})}));return f.default.createElement(v.Layer,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&d.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.renderBackground=function(t){var n=this,r=this.props.cornerRadius,i=w.filterProps(this.props.background);return t.map((function(t,a){t.value;var u=t.background,s=l(t,["value","background"]);if(!u)return null;var c=o(o(o(o(o(o({cornerRadius:r},s),{fill:"#eee"}),u),i),w.adaptEventsOfChild(n.props,t,a)),{index:a,key:"sector-"+a,className:"recharts-radial-bar-background-sector"});return e.renderSectorShape(u,c)}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.background,a=t.isAnimationActive;if(e||!n||!n.length)return null;var u=this.state.isAnimationFinished,s=h.default("recharts-area",r);return f.default.createElement(v.Layer,{className:s},i&&f.default.createElement(v.Layer,{className:"recharts-radial-bar-background"},this.renderBackground(n)),f.default.createElement(v.Layer,{className:"recharts-radial-bar-sectors"},this.renderSectors()),(!a||u)&&_.LabelList.renderCallByParent(o(o({},this.props),{clockWise:this.getDeltaAngle()<0}),n))},e.displayName="RadialBar",e.defaultProps={angleAxisId:0,radiusAxisId:0,minPointSize:0,hide:!1,legendType:"rect",data:[],isAnimationActive:!m.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease",forceCornerRadius:!1,cornerIsExternal:!1},e.getComposedData=function(t){var e=t.item,n=t.props,r=t.radiusAxis,i=t.radiusAxisTicks,a=t.angleAxis,u=t.angleAxisTicks,s=t.displayedData,l=t.dataKey,c=t.stackedData,f=t.barPosition,h=t.bandSize,p=t.dataStartIndex,y=O.findPositionOfBar(f,e);if(!y)return null;var v=a.cx,m=a.cy,_=n.layout,w=e.props,A=w.children,E=w.minPointSize,M="radial"===_?a:r,P=c?M.scale.domain():null,S=O.getBaseValueOfBar({numericAxis:M}),k=g.findAllByType(A,b.Cell.displayName);return{data:s.map((function(t,e){var s,f,g,b,w,A;if(c?s=O.truncateByDomain(c[p+e],P):(s=O.getValueByDataKey(t,l),d.default.isArray(s)||(s=[S,s])),"radial"===_){f=O.getCateCoordinateOfBar({axis:r,ticks:i,bandSize:h,offset:y.offset,entry:t,index:e}),w=a.scale(s[1]),b=a.scale(s[0]),g=f+y.size;var M=w-b;if(Math.abs(E)>0&&Math.abs(M)<Math.abs(E))w+=x.mathSign(M||E)*(Math.abs(E)-Math.abs(M));A={background:{cx:v,cy:m,innerRadius:f,outerRadius:g,startAngle:n.startAngle,endAngle:n.endAngle}}}else{f=r.scale(s[0]),g=r.scale(s[1]),w=(b=O.getCateCoordinateOfBar({axis:a,ticks:u,bandSize:h,offset:y.offset,entry:t,index:e}))+y.size;var C=g-f;if(Math.abs(E)>0&&Math.abs(C)<Math.abs(E))g+=x.mathSign(C||E)*(Math.abs(E)-Math.abs(C))}return o(o(o(o({},t),A),{payload:t,value:c?s:s[1],cx:v,cy:m,innerRadius:f,outerRadius:g,startAngle:b,endAngle:w}),k&&k[e]&&k[e].props)})),layout:_}},e}(f.PureComponent);e.RadialBar=A},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Brush=void 0;var c=s(n(0)),f=l(n(4)),h=n(111),p=l(n(3)),d=n(6),y=n(22),v=n(7),g=n(5),m=n(247),_=n(2),b=function(t){return t.changedTouches&&!!t.changedTouches.length},x=function(t){function e(e){var n=t.call(this,e)||this;return n.handleDrag=function(t){n.leaveTimer&&(clearTimeout(n.leaveTimer),n.leaveTimer=null),n.state.isTravellerMoving?n.handleTravellerMove(t):n.state.isSlideMoving&&n.handleSlideDrag(t)},n.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&n.handleDrag(t.changedTouches[0])},n.handleDragEnd=function(){n.setState({isTravellerMoving:!1,isSlideMoving:!1}),n.detachDragEndListener()},n.handleLeaveWrapper=function(){(n.state.isTravellerMoving||n.state.isSlideMoving)&&(n.leaveTimer=window.setTimeout(n.handleDragEnd,n.props.leaveTimeOut))},n.handleEnterSlideOrTraveller=function(){n.setState({isTextActive:!0})},n.handleLeaveSlideOrTraveller=function(){n.setState({isTextActive:!1})},n.handleSlideDragStart=function(t){var e=b(t)?t.changedTouches[0]:t;n.setState({isTravellerMoving:!1,isSlideMoving:!0,slideMoveStartX:e.pageX}),n.attachDragEndListener()},n.travellerDragStartHandlers={startX:n.handleTravellerDragStart.bind(n,"startX"),endX:n.handleTravellerDragStart.bind(n,"endX")},n.state={},n}return i(e,t),e.renderDefaultTraveller=function(t){var e=t.x,n=t.y,r=t.width,i=t.height,o=t.stroke,a=Math.floor(n+i/2)-1;return c.default.createElement(c.default.Fragment,null,c.default.createElement("rect",{x:e,y:n,width:r,height:i,fill:o,stroke:"none"}),c.default.createElement("line",{x1:e+1,y1:a,x2:e+r-1,y2:a,fill:"none",stroke:"#fff"}),c.default.createElement("line",{x1:e+1,y1:a+2,x2:e+r-1,y2:a+2,fill:"none",stroke:"#fff"}))},e.renderTraveller=function(t,n){return c.default.isValidElement(t)?c.default.cloneElement(t,n):p.default.isFunction(t)?t(n):e.renderDefaultTraveller(n)},e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.width,i=t.x,a=t.travellerWidth,u=t.updateId,s=t.startIndex,l=t.endIndex;if(n!==e.prevData||u!==e.prevUpdateId)return o({prevData:n,prevTravellerWidth:a,prevUpdateId:u,prevX:i,prevWidth:r},n&&n.length?function(t){var e=t.data,n=t.startIndex,r=t.endIndex,i=t.x,o=t.width,a=t.travellerWidth;if(!e||!e.length)return{};var u=e.length,s=h.scalePoint().domain(p.default.range(0,u)).range([i,i+o-a]),l=s.domain().map((function(t){return s(t)}));return{isTextActive:!1,isSlideMoving:!1,isTravellerMoving:!1,startX:s(n),endX:s(r),scale:s,scaleValues:l}}({data:n,width:r,x:i,travellerWidth:a,startIndex:s,endIndex:l}):{scale:null,scaleValues:null});if(e.scale&&(r!==e.prevWidth||i!==e.prevX||a!==e.prevTravellerWidth)){e.scale.range([i,i+r-a]);var c=e.scale.domain().map((function(t){return e.scale(t)}));return{prevData:n,prevTravellerWidth:a,prevUpdateId:u,prevX:i,prevWidth:r,startX:e.scale(t.startIndex),endX:e.scale(t.endIndex),scaleValues:c}}return null},e.prototype.componentWillUnmount=function(){this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null),this.detachDragEndListener()},e.getIndexInRange=function(t,e){for(var n=0,r=t.length-1;r-n>1;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i}return e>=t[r]?r:n},e.prototype.getIndex=function(t){var n=t.startX,r=t.endX,i=this.state.scaleValues,o=this.props,a=o.gap,u=o.data.length-1,s=Math.min(n,r),l=Math.max(n,r),c=e.getIndexInRange(i,s),f=e.getIndexInRange(i,l);return{startIndex:c-c%a,endIndex:f===u?u:f-f%a}},e.prototype.getTextOfTick=function(t){var e=this.props,n=e.data,r=e.tickFormatter,i=e.dataKey,o=v.getValueByDataKey(n[t],i,t);return p.default.isFunction(r)?r(o,t):o},e.prototype.attachDragEndListener=function(){window.addEventListener("mouseup",this.handleDragEnd,!0),window.addEventListener("touchend",this.handleDragEnd,!0)},e.prototype.detachDragEndListener=function(){window.removeEventListener("mouseup",this.handleDragEnd,!0),window.removeEventListener("touchend",this.handleDragEnd,!0)},e.prototype.handleSlideDrag=function(t){var e=this.state,n=e.slideMoveStartX,r=e.startX,i=e.endX,o=this.props,a=o.x,u=o.width,s=o.travellerWidth,l=o.startIndex,c=o.endIndex,f=o.onChange,h=t.pageX-n;h>0?h=Math.min(h,a+u-s-i,a+u-s-r):h<0&&(h=Math.max(h,a-r,a-i));var p=this.getIndex({startX:r+h,endX:i+h});p.startIndex===l&&p.endIndex===c||!f||f(p),this.setState({startX:r+h,endX:i+h,slideMoveStartX:t.pageX})},e.prototype.handleTravellerDragStart=function(t,e){var n=b(e)?e.changedTouches[0]:e;this.setState({isSlideMoving:!1,isTravellerMoving:!0,movingTravellerId:t,brushMoveStartX:n.pageX}),this.attachDragEndListener()},e.prototype.handleTravellerMove=function(t){var e,n=this.state,r=n.brushMoveStartX,i=n.movingTravellerId,o=n.endX,a=n.startX,u=this.state[i],s=this.props,l=s.x,c=s.width,f=s.travellerWidth,h=s.onChange,p=s.gap,d=s.data,y={startX:this.state.startX,endX:this.state.endX},v=t.pageX-r;v>0?v=Math.min(v,l+c-f-u):v<0&&(v=Math.max(v,l-u)),y[i]=u+v;var g=this.getIndex(y),m=g.startIndex,_=g.endIndex;this.setState(((e={})[i]=u+v,e.brushMoveStartX=t.pageX,e),(function(){var t;h&&(t=d.length-1,("startX"===i&&(o>a?m%p==0:_%p==0)||o<a&&_===t||"endX"===i&&(o>a?_%p==0:m%p==0)||o>a&&_===t)&&h(g))}))},e.prototype.renderBackground=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.fill,a=t.stroke;return c.default.createElement("rect",{stroke:a,fill:o,x:e,y:n,width:r,height:i})},e.prototype.renderPanorama=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.data,a=t.children,u=t.padding,s=c.Children.only(a);return s?c.default.cloneElement(s,{x:e,y:n,width:r,height:i,margin:u,compact:!0,data:o}):null},e.prototype.renderTravellerLayer=function(t,n){var r=this.props,i=r.y,a=r.travellerWidth,u=r.height,s=r.traveller,l=Math.max(t,this.props.x),f=o(o({},_.filterProps(this.props)),{x:l,y:i,width:a,height:u});return c.default.createElement(d.Layer,{className:"recharts-brush-traveller",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.travellerDragStartHandlers[n],onTouchStart:this.travellerDragStartHandlers[n],style:{cursor:"col-resize"}},e.renderTraveller(s,f))},e.prototype.renderSlide=function(t,e){var n=this.props,r=n.y,i=n.height,o=n.stroke,a=n.travellerWidth,u=Math.min(t,e)+a,s=Math.max(Math.abs(e-t)-a,0);return c.default.createElement("rect",{className:"recharts-brush-slide",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.handleSlideDragStart,onTouchStart:this.handleSlideDragStart,style:{cursor:"move"},stroke:"none",fill:o,fillOpacity:.2,x:u,y:r,width:s,height:i})},e.prototype.renderText=function(){var t=this.props,e=t.startIndex,n=t.endIndex,r=t.y,i=t.height,a=t.travellerWidth,u=t.stroke,s=this.state,l=s.startX,f=s.endX,h={pointerEvents:"none",fill:u};return c.default.createElement(d.Layer,{className:"recharts-brush-texts"},c.default.createElement(y.Text,o({textAnchor:"end",verticalAnchor:"middle",x:Math.min(l,f)-5,y:r+i/2},h),this.getTextOfTick(e)),c.default.createElement(y.Text,o({textAnchor:"start",verticalAnchor:"middle",x:Math.max(l,f)+a+5,y:r+i/2},h),this.getTextOfTick(n)))},e.prototype.render=function(){var t=this.props,e=t.data,n=t.className,r=t.children,i=t.x,o=t.y,a=t.width,u=t.height,s=t.alwaysShowText,l=this.state,h=l.startX,p=l.endX,y=l.isTextActive,v=l.isSlideMoving,_=l.isTravellerMoving;if(!e||!e.length||!g.isNumber(i)||!g.isNumber(o)||!g.isNumber(a)||!g.isNumber(u)||a<=0||u<=0)return null;var b=f.default("recharts-brush",n),x=1===c.default.Children.count(r),O=m.generatePrefixStyle("userSelect","none");return c.default.createElement(d.Layer,{className:b,onMouseMove:this.handleDrag,onMouseLeave:this.handleLeaveWrapper,onTouchMove:this.handleTouchMove,style:O},this.renderBackground(),x&&this.renderPanorama(),this.renderSlide(h,p),this.renderTravellerLayer(h,"startX"),this.renderTravellerLayer(p,"endX"),(y||v||_||s)&&this.renderText())},e.displayName="Brush",e.defaultProps={height:40,travellerWidth:5,gap:1,fill:"#fff",stroke:"#666",padding:{top:1,right:1,bottom:1,left:1},leaveTimeOut:1e3,alwaysShowText:!1},e}(c.PureComponent);e.Brush=x},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceLine=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(17),c=n(49),f=n(5),h=n(18),p=n(26),d=n(2);function y(t){var e=t.x,n=t.y,i=t.segment,y=t.xAxis,v=t.yAxis,g=t.shape,m=t.className,_=t.alwaysShow,b=t.clipPathId;p.warn(void 0===_,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var x=function(t,e,n,r,i){var o=i.viewBox,u=o.x,s=o.y,l=o.width,f=o.height,h=i.position;if(n){var p=i.y,d=i.yAxis.orientation,y=t.y.apply(p,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.y.isInRange(y))return null;var v=[{x:u+l,y:y},{x:u,y:y}];return"left"===d?v.reverse():v}if(e){var g=i.x,m=i.xAxis.orientation;y=t.x.apply(g,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.x.isInRange(y))return null;v=[{x:y,y:s+f},{x:y,y:s}];return"top"===m?v.reverse():v}if(r){v=i.segment.map((function(e){return t.apply(e,{position:h})}));return c.ifOverflowMatches(i,"discard")&&a.default.some(v,(function(e){return!t.isInRange(e)}))?null:v}return null}(h.createLabeledScales({x:y.scale,y:v.scale}),f.isNumOrStr(e),f.isNumOrStr(n),i&&2===i.length,t);if(!x)return null;var O=x[0],w=O.x,A=O.y,E=x[1],M=E.x,P=E.y,S=c.ifOverflowMatches(t,"hidden")?"url(#"+b+")":void 0,k=r(r({clipPath:S},d.filterProps(t,!0)),{x1:w,y1:A,x2:M,y2:P});return o.default.createElement(s.Layer,{className:u.default("recharts-reference-line",m)},function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement("line",r({},e,{className:"recharts-reference-line-line"}))}(g,k),l.Label.renderCallByParent(t,h.rectWithCoords({x1:w,y1:A,x2:M,y2:P})))}e.ReferenceLine=y,y.displayName="ReferenceLine",y.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,fill:"none",stroke:"#ccc",fillOpacity:1,strokeWidth:1,position:"middle"}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceDot=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(23),c=n(17),f=n(5),h=n(49),p=n(18),d=n(26),y=n(2);function v(t){var e=t.x,n=t.y,i=t.r,a=t.alwaysShow,l=t.clipPathId,g=f.isNumOrStr(e),m=f.isNumOrStr(n);if(d.warn(void 0===a,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'),!g||!m)return null;var _=function(t){var e=t.x,n=t.y,r=t.xAxis,i=t.yAxis,o=p.createLabeledScales({x:r.scale,y:i.scale}),a=o.apply({x:e,y:n},{bandAware:!0});return h.ifOverflowMatches(t,"discard")&&!o.isInRange(a)?null:a}(t);if(!_)return null;var b=_.x,x=_.y,O=t.shape,w=t.className,A=h.ifOverflowMatches(t,"hidden")?"url(#"+l+")":void 0,E=r(r({clipPath:A},y.filterProps(t,!0)),{cx:b,cy:x});return o.default.createElement(s.Layer,{className:u.default("recharts-reference-dot",w)},v.renderDot(O,E),c.Label.renderCallByParent(t,{x:b-i,y:x-i,width:2*i,height:2*i}))}e.ReferenceDot=v,v.displayName="ReferenceDot",v.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#fff",stroke:"#ccc",fillOpacity:1,strokeWidth:1},v.renderDot=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(l.Dot,r({},e,{cx:e.cx,cy:e.cy,className:"recharts-reference-dot-dot"}))}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceArea=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(17),c=n(18),f=n(49),h=n(5),p=n(26),d=n(29),y=n(2);function v(t){var e=t.x1,n=t.x2,i=t.y1,a=t.y2,d=t.className,g=t.alwaysShow,m=t.clipPathId;p.warn(void 0===g,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var _=h.isNumOrStr(e),b=h.isNumOrStr(n),x=h.isNumOrStr(i),O=h.isNumOrStr(a),w=t.shape;if(!(_||b||x||O||w))return null;var A=function(t,e,n,r,i){var o=i.x1,a=i.x2,u=i.y1,s=i.y2,l=i.xAxis,h=i.yAxis,p=c.createLabeledScales({x:l.scale,y:h.scale}),d={x:t?p.x.apply(o,{position:"start"}):p.x.rangeMin,y:n?p.y.apply(u,{position:"start"}):p.y.rangeMin},y={x:e?p.x.apply(a,{position:"end"}):p.x.rangeMax,y:r?p.y.apply(s,{position:"end"}):p.y.rangeMax};return!f.ifOverflowMatches(i,"discard")||p.isInRange(d)&&p.isInRange(y)?c.rectWithPoints(d,y):null}(_,b,x,O,t);if(!A&&!w)return null;var E=f.ifOverflowMatches(t,"hidden")?"url(#"+m+")":void 0;return o.default.createElement(s.Layer,{className:u.default("recharts-reference-area",d)},v.renderRect(w,r(r({clipPath:E},y.filterProps(t,!0)),A)),l.Label.renderCallByParent(t,A))}e.ReferenceArea=v,v.displayName="ReferenceArea",v.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#ccc",fillOpacity:.5,stroke:"none",strokeWidth:1},v.renderRect=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(d.Rectangle,r({},e,{className:"recharts-reference-area-rect"}))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.CartesianAxis=void 0;var f=s(n(0)),h=c(n(3)),p=c(n(4)),d=n(44),y=n(43),v=n(6),g=n(22),m=n(17),_=n(8),b=n(5),x=n(2),O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getTicks=function(t){var n=t.tick,r=t.ticks,i=t.viewBox,o=t.minTickGap,a=t.orientation,u=t.interval,s=t.tickFormatter,l=t.unit;return r&&r.length&&n?b.isNumber(u)||_.Global.isSsr?e.getNumberIntervalTicks(r,"number"==typeof u&&b.isNumber(u)?u:0):"preserveStartEnd"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l},!0):"preserveStart"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):e.getTicksEnd({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):[]},e.getNumberIntervalTicks=function(t,e){return t.filter((function(t,n){return n%(e+1)==0}))},e.getTicksStart=function(t,e){var n,r,i=t.ticks,a=t.tickFormatter,u=t.viewBox,s=t.orientation,l=t.minTickGap,c=t.unit,f=u.x,p=u.y,d=u.width,v=u.height,g="top"===s||"bottom"===s?"width":"height",m=(i||[]).slice(),_=c&&"width"===g?y.getStringSize(c)[g]:0,x=m.length,O=x>=2?b.mathSign(m[1].coordinate-m[0].coordinate):1;if(1===O?(n="width"===g?f:p,r="width"===g?f+d:p+v):(n="width"===g?f+d:p+v,r="width"===g?f:p),e){var w=i[x-1],A=h.default.isFunction(a)?a(w.value,x-1):w.value,E=y.getStringSize(A)[g]+_,M=O*(w.coordinate+O*E/2-r);m[x-1]=w=o(o({},w),{tickCoord:M>0?w.coordinate-M*O:w.coordinate}),O*(w.tickCoord-O*E/2-n)>=0&&O*(w.tickCoord+O*E/2-r)<=0&&(r=w.tickCoord-O*(E/2+l),m[x-1]=o(o({},w),{isShow:!0}))}for(var P=e?x-1:x,S=0;S<P;S++){var k=m[S],C=h.default.isFunction(a)?a(k.value,S):k.value,j=y.getStringSize(C)[g]+_;if(0===S){var T=O*(k.coordinate-O*j/2-n);m[S]=k=o(o({},k),{tickCoord:T<0?k.coordinate-T*O:k.coordinate})}else m[S]=k=o(o({},k),{tickCoord:k.coordinate});O*(k.tickCoord-O*j/2-n)>=0&&O*(k.tickCoord+O*j/2-r)<=0&&(n=k.tickCoord+O*(j/2+l),m[S]=o(o({},k),{isShow:!0}))}return m.filter((function(t){return t.isShow}))},e.getTicksEnd=function(t){var e,n,r=t.ticks,i=t.tickFormatter,a=t.viewBox,u=t.orientation,s=t.minTickGap,l=t.unit,c=a.x,f=a.y,p=a.width,d=a.height,v="top"===u||"bottom"===u?"width":"height",g=l&&"width"===v?y.getStringSize(l)[v]:0,m=(r||[]).slice(),_=m.length,x=_>=2?b.mathSign(m[1].coordinate-m[0].coordinate):1;1===x?(e="width"===v?c:f,n="width"===v?c+p:f+d):(e="width"===v?c+p:f+d,n="width"===v?c:f);for(var O=_-1;O>=0;O--){var w=m[O],A=h.default.isFunction(i)?i(w.value,_-O-1):w.value,E=y.getStringSize(A)[v]+g;if(O===_-1){var M=x*(w.coordinate+x*E/2-n);m[O]=w=o(o({},w),{tickCoord:M>0?w.coordinate-M*x:w.coordinate})}else m[O]=w=o(o({},w),{tickCoord:w.coordinate});x*(w.tickCoord-x*E/2-e)>=0&&x*(w.tickCoord+x*E/2-n)<=0&&(n=w.tickCoord-x*(E/2+s),m[O]=o(o({},w),{isShow:!0}))}return m.filter((function(t){return t.isShow}))},e.prototype.shouldComponentUpdate=function(t){var e=t.viewBox,n=l(t,["viewBox"]),r=this.props,i=r.viewBox,o=l(r,["viewBox"]);return!d.shallowEqual(e,i)||!d.shallowEqual(n,o)},e.prototype.getTickLineCoord=function(t){var e,n,r,i,o,a,u=this.props,s=u.x,l=u.y,c=u.width,f=u.height,h=u.orientation,p=u.tickSize,d=u.mirror,y=u.tickMargin,v=d?-1:1,g=t.tickSize||p,m=b.isNumber(t.tickCoord)?t.tickCoord:t.coordinate;switch(h){case"top":e=n=t.coordinate,a=(r=(i=l+ +!d*f)-v*g)-v*y,o=m;break;case"left":r=i=t.coordinate,o=(e=(n=s+ +!d*c)-v*g)-v*y,a=m;break;case"right":r=i=t.coordinate,o=(e=(n=s+ +d*c)+v*g)+v*y,a=m;break;default:e=n=t.coordinate,a=(r=(i=l+ +d*f)+v*g)+v*y,o=m}return{line:{x1:e,y1:r,x2:n,y2:i},tick:{x:o,y:a}}},e.prototype.getTickTextAnchor=function(){var t,e=this.props,n=e.orientation,r=e.mirror;switch(n){case"left":t=r?"start":"end";break;case"right":t=r?"end":"start";break;default:t="middle"}return t},e.prototype.getTickVerticalAnchor=function(){var t=this.props,e=t.orientation,n=t.mirror,r="end";switch(e){case"left":case"right":r="middle";break;case"top":r=n?"start":"end";break;default:r=n?"end":"start"}return r},e.prototype.renderAxisLine=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,a=t.orientation,u=t.mirror,s=t.axisLine,l=o(o(o({},x.filterProps(this.props)),x.filterProps(s)),{fill:"none"});if("top"===a||"bottom"===a){var c=+("top"===a&&!u||"bottom"===a&&u);l=o(o({},l),{x1:e,y1:n+c*i,x2:e+r,y2:n+c*i})}else{var d=+("left"===a&&!u||"right"===a&&u);l=o(o({},l),{x1:e+d*r,y1:n,x2:e+d*r,y2:n+i})}return f.default.createElement("line",o({},l,{className:p.default("recharts-cartesian-axis-line",h.default.get(s,"className"))}))},e.renderTickItem=function(t,e,n){return f.default.isValidElement(t)?f.default.cloneElement(t,e):h.default.isFunction(t)?t(e):f.default.createElement(g.Text,o({},e,{className:"recharts-cartesian-axis-tick-value"}),n)},e.prototype.renderTicks=function(t){var n=this,r=this.props,i=r.tickLine,a=r.stroke,u=r.tick,s=r.tickFormatter,l=r.unit,c=e.getTicks(o(o({},this.props),{ticks:t})),d=this.getTickTextAnchor(),y=this.getTickVerticalAnchor(),g=x.filterProps(this.props),m=x.filterProps(u),_=o(o(o({},g),{fill:"none"}),x.filterProps(i)),b=c.map((function(t,r){var b=n.getTickLineCoord(t),O=b.line,w=b.tick,A=o(o(o(o(o({textAnchor:d,verticalAnchor:y},g),{stroke:"none",fill:a}),m),w),{index:r,payload:t,visibleTicksCount:c.length,tickFormatter:s});return f.default.createElement(v.Layer,o({className:"recharts-cartesian-axis-tick",key:"tick-"+r},x.adaptEventsOfChild(n.props,t,r)),i&&f.default.createElement("line",o({},_,O,{className:p.default("recharts-cartesian-axis-tick-line",h.default.get(i,"className"))})),u&&e.renderTickItem(u,A,""+(h.default.isFunction(s)?s(t.value,r):t.value)+(l||"")))}));return f.default.createElement("g",{className:"recharts-cartesian-axis-ticks"},b)},e.prototype.render=function(){var t=this.props,e=t.axisLine,n=t.width,r=t.height,i=t.ticksGenerator,o=t.className;if(t.hide)return null;var a=this.props,u=a.ticks,s=l(a,["ticks"]),c=u;return h.default.isFunction(i)&&(c=u&&u.length>0?i(this.props):i(s)),n<=0||r<=0||!c||!c.length?null:f.default.createElement(v.Layer,{className:p.default("recharts-cartesian-axis",o)},e&&this.renderAxisLine(),this.renderTicks(c),m.Label.renderCallByParent(this.props))},e.displayName="CartesianAxis",e.defaultProps={x:0,y:0,width:0,height:0,viewBox:{x:0,y:0,width:0,height:0},orientation:"bottom",ticks:[],stroke:"#666",tickLine:!0,axisLine:!0,tick:!0,mirror:!1,minTickGap:5,tickSize:6,tickMargin:2,interval:"preserveEnd"},e}(f.Component);e.CartesianAxis=O},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Funnel=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(110),v=n(15),g=n(27),m=n(9),_=n(8),b=n(5),x=n(7),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curTrapezoids:t.trapezoids,prevTrapezoids:e.curTrapezoids}:t.trapezoids!==e.curTrapezoids?{curTrapezoids:t.trapezoids}:null},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderTrapezoidItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):p.default.isPlainObject(t)?c.default.createElement(y.Trapezoid,o({},e,t)):c.default.createElement(y.Trapezoid,o({},e))},e.prototype.renderTrapezoidsStatically=function(t){var n=this,r=this.props.activeShape;return t.map((function(t,i){var a=n.isActiveIndex(i)?r:null,u=o(o({},t),{stroke:t.stroke});return c.default.createElement(d.Layer,o({className:"recharts-funnel-trapezoid"},O.adaptEventsOfChild(n.props,t,i),{key:"trapezoid-"+i}),e.renderTrapezoidItem(a,u))}))},e.prototype.renderTrapezoidsWithAnimation=function(){var t=this,e=this.props,n=e.trapezoids,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevTrapezoids;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"funnel-"+s,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=b.interpolateNumber(n.x,t.x),a=b.interpolateNumber(n.y,t.y),u=b.interpolateNumber(n.upperWidth,t.upperWidth),s=b.interpolateNumber(n.lowerWidth,t.lowerWidth),c=b.interpolateNumber(n.height,t.height);return o(o({},t),{x:i(r),y:a(r),upperWidth:u(r),lowerWidth:s(r),height:c(r)})}var f=b.interpolateNumber(t.x+t.upperWidth/2,t.x),h=b.interpolateNumber(t.y+t.height/2,t.y),p=b.interpolateNumber(0,t.upperWidth),d=b.interpolateNumber(0,t.lowerWidth),y=b.interpolateNumber(0,t.height);return o(o({},t),{x:f(r),y:h(r),upperWidth:p(r),lowerWidth:d(r),height:y(r)})}));return c.default.createElement(d.Layer,null,t.renderTrapezoidsStatically(i))}))},e.prototype.renderTrapezoids=function(){var t=this.props,e=t.trapezoids,n=t.isAnimationActive,r=this.state.prevTrapezoids;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderTrapezoidsStatically(e):this.renderTrapezoidsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.trapezoids,r=t.className,i=t.isAnimationActive,o=this.state.isAnimationFinished;if(e||!n||!n.length)return null;var a=h.default("recharts-trapezoids",r);return c.default.createElement(d.Layer,{className:a},this.renderTrapezoids(),(!i||o)&&v.LabelList.renderCallByParent(this.props,n))},e.displayName="Funnel",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",labelLine:!0,hide:!1,isAnimationActive:!_.Global.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",lastShapeType:"triangle"},e.getRealFunnelData=function(t){var e=t.props,n=e.data,r=e.children,i=O.filterProps(t.props),a=m.findAllByType(r,g.Cell.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.getRealWidthHeight=function(t,e){var n=t.props.width,r=e.width,i=e.height,o=e.left,a=e.right,u=e.top,s=e.bottom,l=i,c=r;return p.default.isNumber(n)?c=n:p.default.isString(n)&&(c=c*parseFloat(n)/100),{realWidth:c-o-a-50,realHeight:l-s-u,offsetX:(r-c)/2,offsetY:(i-l)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=e.getRealFunnelData(n),a=n.props,u=a.dataKey,s=a.nameKey,l=a.tooltipType,c=a.lastShapeType,f=a.reversed,h=r.left,d=r.top,y=e.getRealWidthHeight(n,r),v=y.realHeight,g=y.realWidth,m=y.offsetX,_=y.offsetY,b=Math.max.apply(null,i.map((function(t){return x.getValueByDataKey(t,u,0)}))),O=i.length,w=v/O,A={x:r.left,y:r.top,width:r.width,height:r.height},E=i.map((function(t,e){var n,r=x.getValueByDataKey(t,u,0),a=x.getValueByDataKey(t,s,e),f=r;e!==O-1?(n=x.getValueByDataKey(i[e+1],u,0))instanceof Array&&(n=n[0]):r instanceof Array&&2===r.length?(f=r[0],n=r[1]):n="rectangle"===c?f:0;var y=(b-f)*g/(2*b)+d+25+m,v=w*e+h+_,E=f/b*g,M=n/b*g,P=[{name:a,value:f,payload:t,dataKey:u,type:l}],S={x:y+E/2,y:v+w/2};return o(o({x:y,y:v,width:Math.max(E,M),upperWidth:E,lowerWidth:M,height:w,name:a,val:f,tooltipPayload:P,tooltipPosition:S},p.default.omit(t,"width")),{payload:t,parentViewBox:A,labelViewBox:{x:y+(E-M)/4,y:v,width:Math.abs(E-M)/2+Math.min(E,M),height:w}})}));return f&&(E=E.map((function(t,e){var n=t.y-e*w+(O-1-e)*w;return o(o({},t),{upperWidth:t.lowerWidth,lowerWidth:t.upperWidth,x:t.x-(t.lowerWidth-t.upperWidth)/2,y:t.y-e*w+(O-1-e)*w,tooltipPosition:o(o({},t.tooltipPosition),{y:n+w/2}),labelViewBox:o(o({},t.labelViewBox),{y:n})})}))),{trapezoids:E,data:i}},e}(c.PureComponent);e.Funnel=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Trapezoid=void 0;var c=s(n(0)),f=l(n(4)),h=l(n(10)),p=n(2),d=function(t,e,n,r,i){var o,a=n-r;return o="M "+t+","+e,o+="L "+(t+n)+","+e,o+="L "+(t+n-a/2)+","+(e+i),o+="L "+(t+n-a/2-r)+","+(e+i),o+="L "+t+","+e+" Z"},y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.upperWidth,a=e.lowerWidth,u=e.height,s=e.className,l=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||u!==+u||0===i&&0===a||0===u)return null;var b=f.default("recharts-trapezoid",s);return _?c.default.createElement(h.default,{canBegin:l>0,from:{upperWidth:0,lowerWidth:0,height:u,x:n,y:r},to:{upperWidth:i,lowerWidth:a,height:u,x:n,y:r},duration:g,animationEasing:v,isActive:_},(function(e){var n=e.upperWidth,r=e.lowerWidth,i=e.height,a=e.x,u=e.y;return c.default.createElement(h.default,{canBegin:l>0,from:"0px "+(-1===l?1:l)+"px",to:l+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,easing:v},c.default.createElement("path",o({},p.filterProps(t.props,!0),{className:b,d:d(a,u,n,r,i),ref:function(e){t.node=e}})))})):c.default.createElement("g",null,c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:b,d:d(n,r,i,a,u)})))},e.defaultProps={x:0,y:0,upperWidth:0,lowerWidth:0,height:0,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(c.PureComponent);e.Trapezoid=y},function(t,e,n){"use strict";n.r(e),n.d(e,"scaleBand",(function(){return s})),n.d(e,"scalePoint",(function(){return c})),n.d(e,"scaleIdentity",(function(){return Wt})),n.d(e,"scaleLinear",(function(){return Vt})),n.d(e,"scaleLog",(function(){return Zt})),n.d(e,"scaleSymlog",(function(){return ee})),n.d(e,"scaleOrdinal",(function(){return u})),n.d(e,"scaleImplicit",(function(){return a})),n.d(e,"scalePow",(function(){return ae})),n.d(e,"scaleSqrt",(function(){return ue})),n.d(e,"scaleRadial",(function(){return ce})),n.d(e,"scaleQuantile",(function(){return ve})),n.d(e,"scaleQuantize",(function(){return ge})),n.d(e,"scaleThreshold",(function(){return me})),n.d(e,"scaleTime",(function(){return kr})),n.d(e,"scaleUtc",(function(){return Lr})),n.d(e,"scaleSequential",(function(){return zr})),n.d(e,"scaleSequentialLog",(function(){return Fr})),n.d(e,"scaleSequentialPow",(function(){return Wr})),n.d(e,"scaleSequentialSqrt",(function(){return Ur})),n.d(e,"scaleSequentialSymlog",(function(){return Vr})),n.d(e,"scaleSequentialQuantile",(function(){return qr})),n.d(e,"scaleDiverging",(function(){return Kr})),n.d(e,"scaleDivergingLog",(function(){return Xr})),n.d(e,"scaleDivergingPow",(function(){return $r})),n.d(e,"scaleDivergingSqrt",(function(){return Zr})),n.d(e,"scaleDivergingSymlog",(function(){return Yr})),n.d(e,"tickFormat",(function(){return zt}));var r=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o};function i(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function o(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}const a=Symbol("implicit");function u(){var t=new Map,e=[],n=[],r=a;function o(i){var o=i+"",u=t.get(o);if(!u){if(r!==a)return r;t.set(o,u=e.push(i))}return n[(u-1)%n.length]}return o.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return o},o.range=function(t){return arguments.length?(n=Array.from(t),o):n.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return u(e,n).unknown(r)},i.apply(o,arguments),o}function s(){var t,e,n=u().unknown(void 0),o=n.domain,a=n.range,l=0,c=1,f=!1,h=0,p=0,d=.5;function y(){var n=o().length,i=c<l,u=i?c:l,s=i?l:c;t=(s-u)/Math.max(1,n-h+2*p),f&&(t=Math.floor(t)),u+=(s-u-t*(n-h))*d,e=t*(1-h),f&&(u=Math.round(u),e=Math.round(e));var y=r(n).map((function(e){return u+t*e}));return a(i?y.reverse():y)}return delete n.unknown,n.domain=function(t){return arguments.length?(o(t),y()):o()},n.range=function(t){return arguments.length?([l,c]=t,l=+l,c=+c,y()):[l,c]},n.rangeRound=function(t){return[l,c]=t,l=+l,c=+c,f=!0,y()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(f=!!t,y()):f},n.padding=function(t){return arguments.length?(h=Math.min(1,p=+t),y()):h},n.paddingInner=function(t){return arguments.length?(h=Math.min(1,t),y()):h},n.paddingOuter=function(t){return arguments.length?(p=+t,y()):p},n.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),y()):d},n.copy=function(){return s(o(),[l,c]).round(f).paddingInner(h).paddingOuter(p).align(d)},i.apply(y(),arguments)}function l(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return l(e())},t}function c(){return l(s.apply(null,arguments).paddingInner(1))}var f=Math.sqrt(50),h=Math.sqrt(10),p=Math.sqrt(2),d=function(t,e,n){var r,i,o,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*a;else for(a=-a,t=Math.ceil(t*a),e=Math.floor(e*a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)/a;return r&&o.reverse(),o};function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=f?10:o>=h?5:o>=p?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=f?10:o>=h?5:o>=p?2:1)}function v(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=f?i*=10:o>=h?i*=5:o>=p&&(i*=2),e<t?-i:i}var g=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},m=function(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)<0?r=o+1:i=o}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>g(t(e),n)}(t)),{left:r,center:function(t,n,i,o){null==i&&(i=0),null==o&&(o=t.length);const a=r(t,n,i,o-1);return a>i&&e(t[a-1],n)>-e(t[a],n)?a-1:a},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)>0?i=o:r=o+1}return r}}};var _=function(t){return null===t?NaN:+t};const b=m(g),x=b.right;b.left,m(_).center;var O=x,w=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function A(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function E(){}var M="\\s*([+-]?\\d+)\\s*",P="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",S="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",k=/^#([0-9a-f]{3,8})$/,C=new RegExp("^rgb\\("+[M,M,M]+"\\)$"),j=new RegExp("^rgb\\("+[S,S,S]+"\\)$"),T=new RegExp("^rgba\\("+[M,M,M,P]+"\\)$"),N=new RegExp("^rgba\\("+[S,S,S,P]+"\\)$"),D=new RegExp("^hsl\\("+[P,S,S]+"\\)$"),I=new RegExp("^hsla\\("+[P,S,S,P]+"\\)$"),L={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function R(){return this.rgb().formatHex()}function B(){return this.rgb().formatRgb()}function z(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=k.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?F(e):3===n?new q(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?V(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?V(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=C.exec(t))?new q(e[1],e[2],e[3],1):(e=j.exec(t))?new q(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=T.exec(t))?V(e[1],e[2],e[3],e[4]):(e=N.exec(t))?V(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=D.exec(t))?X(e[1],e[2]/100,e[3]/100,1):(e=I.exec(t))?X(e[1],e[2]/100,e[3]/100,e[4]):L.hasOwnProperty(t)?F(L[t]):"transparent"===t?new q(NaN,NaN,NaN,0):null}function F(t){return new q(t>>16&255,t>>8&255,255&t,1)}function V(t,e,n,r){return r<=0&&(t=e=n=NaN),new q(t,e,n,r)}function W(t){return t instanceof E||(t=z(t)),t?new q((t=t.rgb()).r,t.g,t.b,t.opacity):new q}function U(t,e,n,r){return 1===arguments.length?W(t):new q(t,e,n,null==r?1:r)}function q(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function G(){return"#"+K(this.r)+K(this.g)+K(this.b)}function H(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function K(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function X(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new $(t,e,n,r)}function Y(t){if(t instanceof $)return new $(t.h,t.s,t.l,t.opacity);if(t instanceof E||(t=z(t)),!t)return new $;if(t instanceof $)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=e===o?(n-r)/u+6*(n<r):n===o?(r-e)/u+2:(e-n)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new $(a,u,s,t.opacity)}function $(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Z(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function J(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}w(E,z,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:R,formatHex:R,formatHsl:function(){return Y(this).formatHsl()},formatRgb:B,toString:B}),w(q,U,A(E,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new q(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new q(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:G,formatHex:G,formatRgb:H,toString:H})),w($,(function(t,e,n,r){return 1===arguments.length?Y(t):new $(t,e,n,null==r?1:r)}),A(E,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new q(Z(t>=240?t-240:t+120,i,r),Z(t,i,r),Z(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Q=t=>()=>t;function tt(t,e){return function(n){return t+n*e}}function et(t){return 1==(t=+t)?nt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Q(isNaN(e)?n:e)}}function nt(t,e){var n=e-t;return n?tt(t,n):Q(isNaN(t)?e:t)}var rt=function t(e){var n=et(e);function r(t,e){var r=n((t=U(t)).r,(e=U(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=nt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function it(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=U(e[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}it((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<e-1?t[r+2]:2*o-i;return J((n-r/e)*e,a,i,o,u)}})),it((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],u=t[(r+2)%e];return J((n-r/e)*e,i,o,a,u)}}));var ot=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}};function at(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function ut(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=dt(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}var st=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},lt=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},ct=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=dt(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},ft=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ht=new RegExp(ft.source,"g");var pt=function(t,e){var n,r,i,o=ft.lastIndex=ht.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=ft.exec(t))&&(r=ht.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:lt(n,r)})),o=ht.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},dt=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Q(e):("number"===r?lt:"string"===r?(n=z(e))?(e=n,rt):pt:e instanceof z?rt:e instanceof Date?st:at(e)?ot:Array.isArray(e)?ut:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?ct:lt)(t,e)},yt=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}};function vt(t){return+t}var gt=[0,1];function mt(t){return t}function _t(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function bt(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=_t(i,r),o=n(a,o)):(r=_t(r,i),o=n(o,a)),function(t){return o(r(t))}}function xt(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=_t(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=O(t,e,1,r)-1;return o[n](i[n](e))}}function Ot(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function wt(){var t,e,n,r,i,o,a=gt,u=gt,s=dt,l=mt;function c(){var t,e,n,s=Math.min(a.length,u.length);return l!==mt&&(t=a[0],e=a[s-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=s>2?xt:bt,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),u,s)))(t(l(e)))}return f.invert=function(n){return l(e((o||(o=r(u,a.map(t),lt)))(n)))},f.domain=function(t){return arguments.length?(a=Array.from(t,vt),c()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=yt,c()},f.clamp=function(t){return arguments.length?(l=!!t||mt,c()):l!==mt},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function At(){return wt()(mt,mt)}var Et=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Mt(t){if(!(e=Et.exec(t)))throw new Error("invalid format: "+t);var e;return new Pt({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Pt(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Mt.prototype=Pt.prototype,Pt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};function St(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}var kt,Ct,jt,Tt,Nt=function(t){return(t=St(Math.abs(t)))?t[1]:NaN},Dt=function(t,e){var n=St(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},It={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Dt(100*t,e),r:Dt,s:function(t,e){var n=St(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(kt=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+St(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)},Lt=function(t){return t},Rt=Array.prototype.map,Bt=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Ct=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Lt:(e=Rt.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=e[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Lt:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Rt.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Mt(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,y=t.comma,v=t.precision,g=t.trim,m=t.type;"n"===m?(y=!0,m="g"):It[m]||(void 0===v&&(v=12),g=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",b="$"===h?o:/[%p]/.test(m)?s:"",x=It[m],O=/[defgprs%]/.test(m);function w(t){var i,o,s,h=_,w=b;if("c"===m)w=x(t)+w,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),v),g&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:l:"-"===f||"("===f?"":f)+h,w=("s"===m?Bt[8+kt/3]:"")+w+(A&&"("===f?")":""),O)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){w=(46===s?a+t.slice(i+1):t.slice(i))+w,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var E=h.length+t.length+w.length,M=E<d?new Array(d-E+1).join(e):"";switch(y&&p&&(t=r(M+t,M.length?d-w.length:1/0),M=""),n){case"<":t=h+t+w+M;break;case"=":t=h+M+t+w;break;case"^":t=M.slice(0,E=M.length>>1)+h+t+w+M.slice(E);break;default:t=M+h+t+w}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),w.toString=function(){return t+""},w}return{format:f,formatPrefix:function(t,e){var n=f(((t=Mt(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Nt(e)/3))),i=Math.pow(10,-r),o=Bt[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),jt=Ct.format,Tt=Ct.formatPrefix;function zt(t,e,n,r){var i,o=v(t,e,n);switch((r=Mt(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Nt(e)/3)))-Nt(Math.abs(t)))}(o,a))||(r.precision=i),Tt(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Nt(e)-Nt(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Nt(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return jt(r)}function Ft(t){var e=t.domain;return t.ticks=function(t){var n=e();return d(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return zt(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,u=o.length-1,s=o[a],l=o[u],c=10;for(l<s&&(i=s,s=l,l=i,i=a,a=u,u=i);c-- >0;){if((i=y(s,l,n))===r)return o[a]=s,o[u]=l,e(o);if(i>0)s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function Vt(){var t=At();return t.copy=function(){return Ot(t,Vt())},i.apply(t,arguments),Ft(t)}function Wt(t){var e;function n(t){return isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Array.from(e,vt),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Wt(t).unknown(e)},t=arguments.length?Array.from(t,vt):[0,1],Ft(n)}function Ut(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function qt(t){return Math.log(t)}function Gt(t){return Math.exp(t)}function Ht(t){return-Math.log(-t)}function Kt(t){return-Math.exp(-t)}function Xt(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Yt(t){return function(e){return-t(-e)}}function $t(t){var e,n,r=t(qt,Gt),i=r.domain,o=10;function a(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(o),n=function(t){return 10===t?Xt:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(o),i()[0]<0?(e=Yt(e),n=Yt(n),t(Ht,Kt)):t(qt,Gt),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],s=a[a.length-1];(r=s<u)&&(h=u,u=s,s=h);var l,c,f,h=e(u),p=e(s),y=null==t?10:+t,v=[];if(!(o%1)&&p-h<y){if(h=Math.floor(h),p=Math.ceil(p),u>0){for(;h<=p;++h)for(c=1,l=n(h);c<o;++c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}}else for(;h<=p;++h)for(c=o-1,l=n(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}2*v.length<y&&(v=d(u,s,y))}else v=d(h,p,Math.min(p-h,y)).map(n);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=jt(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(Ut(i(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function Zt(){var t=$t(wt()).domain([1,10]);return t.copy=function(){return Ot(t,Zt()).base(t.base())},i.apply(t,arguments),t}function Jt(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function Qt(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function te(t){var e=1,n=t(Jt(e),Qt(e));return n.constant=function(n){return arguments.length?t(Jt(e=+n),Qt(e)):e},Ft(n)}function ee(){var t=te(wt());return t.copy=function(){return Ot(t,ee()).constant(t.constant())},i.apply(t,arguments)}function ne(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function re(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function ie(t){return t<0?-t*t:t*t}function oe(t){var e=t(mt,mt),n=1;function r(){return 1===n?t(mt,mt):.5===n?t(re,ie):t(ne(n),ne(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},Ft(e)}function ae(){var t=oe(wt());return t.copy=function(){return Ot(t,ae()).exponent(t.exponent())},i.apply(t,arguments),t}function ue(){return ae.apply(null,arguments).exponent(.5)}function se(t){return Math.sign(t)*t*t}function le(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}function ce(){var t,e=At(),n=[0,1],r=!1;function o(n){var i=le(e(n));return isNaN(i)?t:r?Math.round(i):i}return o.invert=function(t){return e.invert(se(t))},o.domain=function(t){return arguments.length?(e.domain(t),o):e.domain()},o.range=function(t){return arguments.length?(e.range((n=Array.from(t,vt)).map(se)),o):n.slice()},o.rangeRound=function(t){return o.range(t).round(!0)},o.round=function(t){return arguments.length?(r=!!t,o):r},o.clamp=function(t){return arguments.length?(e.clamp(t),o):e.clamp()},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return ce(e.domain(),n).round(r).clamp(e.clamp()).unknown(t)},i.apply(o,arguments),Ft(o)}function fe(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function he(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function pe(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function de(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return he(t);if(e>=1)return fe(t);var r,i=(r-1)*e,o=Math.floor(i),a=fe(function t(e,n,r=0,i=e.length-1,o=g){for(;i>r;){if(i-r>600){const a=i-r+1,u=n-r+1,s=Math.log(a),l=.5*Math.exp(2*s/3),c=.5*Math.sqrt(s*l*(a-l)/a)*(u-a/2<0?-1:1);t(e,n,Math.max(r,Math.floor(n-u*l/a+c)),Math.min(i,Math.floor(n+(a-u)*l/a+c)),o)}const a=e[n];let u=r,s=i;for(pe(e,r,n),o(e[i],a)>0&&pe(e,r,i);u<s;){for(pe(e,u,s),++u,--s;o(e[u],a)<0;)++u;for(;o(e[s],a)>0;)--s}0===o(e[r],a)?pe(e,r,s):(++s,pe(e,s,i)),s<=n&&(r=s+1),n<=s&&(i=s-1)}return e}(t,o).subarray(0,o+1));return a+(he(t.subarray(o+1))-a)*(i-o)}}function ye(t,e,n=_){if(r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function ve(){var t,e=[],n=[],r=[];function o(){var t=0,i=Math.max(1,n.length);for(r=new Array(i-1);++t<i;)r[t-1]=ye(e,t/i);return a}function a(e){return isNaN(e=+e)?t:n[O(r,e)]}return a.invertExtent=function(t){var i=n.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:e[0],i<r.length?r[i]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(g),o()},a.range=function(t){return arguments.length?(n=Array.from(t),o()):n.slice()},a.unknown=function(e){return arguments.length?(t=e,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return ve().domain(e).range(n).unknown(t)},i.apply(a,arguments)}function ge(){var t,e=0,n=1,r=1,o=[.5],a=[0,1];function u(e){return e<=e?a[O(o,e,0,r)]:t}function s(){var t=-1;for(o=new Array(r);++t<r;)o[t]=((t+1)*n-(t-r)*e)/(r+1);return u}return u.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,s()):[e,n]},u.range=function(t){return arguments.length?(r=(a=Array.from(t)).length-1,s()):a.slice()},u.invertExtent=function(t){var i=a.indexOf(t);return i<0?[NaN,NaN]:i<1?[e,o[0]]:i>=r?[o[r-1],n]:[o[i-1],o[i]]},u.unknown=function(e){return arguments.length?(t=e,u):u},u.thresholds=function(){return o.slice()},u.copy=function(){return ge().domain([e,n]).range(a).unknown(t)},i.apply(Ft(u),arguments)}function me(){var t,e=[.5],n=[0,1],r=1;function o(i){return i<=i?n[O(e,i,0,r)]:t}return o.domain=function(t){return arguments.length?(e=Array.from(t),r=Math.min(e.length,n.length-1),o):e.slice()},o.range=function(t){return arguments.length?(n=Array.from(t),r=Math.min(e.length,n.length-1),o):n.slice()},o.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return me().domain(e).range(n).unknown(t)},i.apply(o,arguments)}var _e=new Date,be=new Date;function xe(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return u},i.filter=function(n){return xe((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return _e.setTime(+e),be.setTime(+r),t(_e),t(be),Math.floor(n(_e,be))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Oe=xe((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Oe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var we=Oe,Ae=(Oe.range,xe((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Ee=Ae;Ae.range;function Me(t){return xe((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Pe=Me(0),Se=Me(1),ke=Me(2),Ce=Me(3),je=Me(4),Te=Me(5),Ne=Me(6),De=(Pe.range,Se.range,ke.range,Ce.range,je.range,Te.range,Ne.range,xe(t=>t.setHours(0,0,0,0),(t,e)=>t.setDate(t.getDate()+e),(t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5,t=>t.getDate()-1)),Ie=De,Le=(De.range,xe((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Re=Le,Be=(Le.range,xe((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),ze=Be,Fe=(Be.range,xe((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ve=Fe,We=(Fe.range,xe((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));We.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xe((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):We:null};var Ue=We;We.range;function qe(t){return xe((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Ge=qe(0),He=qe(1),Ke=qe(2),Xe=qe(3),Ye=qe(4),$e=qe(5),Ze=qe(6),Je=(Ge.range,He.range,Ke.range,Xe.range,Ye.range,$e.range,Ze.range,xe((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qe=Je,tn=(Je.range,xe((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));tn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var en=tn;tn.range;function nn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function rn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function on(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var an,un,sn,ln={"-":"",_:" ",0:"0"},cn=/^\s*\d+/,fn=/^%/,hn=/[\\^$*+?|[\]().{}]/g;function pn(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function dn(t){return t.replace(hn,"\\$&")}function yn(t){return new RegExp("^(?:"+t.map(dn).join("|")+")","i")}function vn(t){return new Map(t.map((t,e)=>[t.toLowerCase(),e]))}function gn(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function mn(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function _n(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function bn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function xn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function On(t,e,n){var r=cn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function wn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function An(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function En(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Mn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Pn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Sn(t,e,n){var r=cn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function kn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Cn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function jn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Tn(t,e,n){var r=cn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Nn(t,e,n){var r=cn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Dn(t,e,n){var r=fn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function In(t,e,n){var r=cn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Ln(t,e,n){var r=cn.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Rn(t,e){return pn(t.getDate(),e,2)}function Bn(t,e){return pn(t.getHours(),e,2)}function zn(t,e){return pn(t.getHours()%12||12,e,2)}function Fn(t,e){return pn(1+Ie.count(we(t),t),e,3)}function Vn(t,e){return pn(t.getMilliseconds(),e,3)}function Wn(t,e){return Vn(t,e)+"000"}function Un(t,e){return pn(t.getMonth()+1,e,2)}function qn(t,e){return pn(t.getMinutes(),e,2)}function Gn(t,e){return pn(t.getSeconds(),e,2)}function Hn(t){var e=t.getDay();return 0===e?7:e}function Kn(t,e){return pn(Pe.count(we(t)-1,t),e,2)}function Xn(t){var e=t.getDay();return e>=4||0===e?je(t):je.ceil(t)}function Yn(t,e){return t=Xn(t),pn(je.count(we(t),t)+(4===we(t).getDay()),e,2)}function $n(t){return t.getDay()}function Zn(t,e){return pn(Se.count(we(t)-1,t),e,2)}function Jn(t,e){return pn(t.getFullYear()%100,e,2)}function Qn(t,e){return pn((t=Xn(t)).getFullYear()%100,e,2)}function tr(t,e){return pn(t.getFullYear()%1e4,e,4)}function er(t,e){var n=t.getDay();return pn((t=n>=4||0===n?je(t):je.ceil(t)).getFullYear()%1e4,e,4)}function nr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+pn(e/60|0,"0",2)+pn(e%60,"0",2)}function rr(t,e){return pn(t.getUTCDate(),e,2)}function ir(t,e){return pn(t.getUTCHours(),e,2)}function or(t,e){return pn(t.getUTCHours()%12||12,e,2)}function ar(t,e){return pn(1+Qe.count(en(t),t),e,3)}function ur(t,e){return pn(t.getUTCMilliseconds(),e,3)}function sr(t,e){return ur(t,e)+"000"}function lr(t,e){return pn(t.getUTCMonth()+1,e,2)}function cr(t,e){return pn(t.getUTCMinutes(),e,2)}function fr(t,e){return pn(t.getUTCSeconds(),e,2)}function hr(t){var e=t.getUTCDay();return 0===e?7:e}function pr(t,e){return pn(Ge.count(en(t)-1,t),e,2)}function dr(t){var e=t.getUTCDay();return e>=4||0===e?Ye(t):Ye.ceil(t)}function yr(t,e){return t=dr(t),pn(Ye.count(en(t),t)+(4===en(t).getUTCDay()),e,2)}function vr(t){return t.getUTCDay()}function gr(t,e){return pn(He.count(en(t)-1,t),e,2)}function mr(t,e){return pn(t.getUTCFullYear()%100,e,2)}function _r(t,e){return pn((t=dr(t)).getUTCFullYear()%100,e,2)}function br(t,e){return pn(t.getUTCFullYear()%1e4,e,4)}function xr(t,e){var n=t.getUTCDay();return pn((t=n>=4||0===n?Ye(t):Ye.ceil(t)).getUTCFullYear()%1e4,e,4)}function Or(){return"+0000"}function wr(){return"%"}function Ar(t){return+t}function Er(t){return Math.floor(+t/1e3)}!function(t){an=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=yn(i),c=vn(i),f=yn(o),h=vn(o),p=yn(a),d=vn(a),y=yn(u),v=vn(u),g=yn(s),m=vn(s),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Rn,e:Rn,f:Wn,g:Qn,G:er,H:Bn,I:zn,j:Fn,L:Vn,m:Un,M:qn,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ar,s:Er,S:Gn,u:Hn,U:Kn,V:Yn,w:$n,W:Zn,x:null,X:null,y:Jn,Y:tr,Z:nr,"%":wr},b={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:rr,e:rr,f:sr,g:_r,G:xr,H:ir,I:or,j:ar,L:ur,m:lr,M:cr,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ar,s:Er,S:fr,u:hr,U:pr,V:yr,w:vr,W:gr,x:null,X:null,y:mr,Y:br,Z:Or,"%":wr},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:Pn,e:Pn,f:Nn,g:wn,G:On,H:kn,I:kn,j:Sn,L:Tn,m:Mn,M:Cn,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:En,Q:In,s:Ln,S:jn,u:mn,U:_n,V:bn,w:gn,W:xn,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:wn,Y:On,Z:An,"%":Dn};function O(t,e){return function(n){var r,i,o,a=[],u=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=ln[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function w(t,e){return function(n){var r,i,o=on(1900,void 0,1);if(A(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=rn(on(o.y,0,1))).getUTCDay(),r=i>4||0===i?He.ceil(r):He(r),r=Qe.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=nn(on(o.y,0,1))).getDay(),r=i>4||0===i?Se.ceil(r):Se(r),r=Ie.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?rn(on(o.y,0,1)).getUTCDay():nn(on(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,rn(o)):nn(o)}}function A(t,e,n,r){for(var i,o,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in ln?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return _.x=O(n,_),_.X=O(r,_),_.c=O(e,_),b.x=O(n,b),b.X=O(r,b),b.c=O(e,b),{format:function(t){var e=O(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=w(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=O(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=w(t+="",!0);return e.toString=function(){return t},e}}}(t),un=an.format,an.parse,sn=an.utcFormat,an.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function Mr(t){return new Date(t)}function Pr(t){return t instanceof Date?+t:+new Date(+t)}function Sr(t,e,n,r,i,o,a,u,s){var l=At(),c=l.invert,f=l.domain,h=s(".%L"),p=s(":%S"),d=s("%I:%M"),y=s("%I %p"),g=s("%a %d"),_=s("%b %d"),b=s("%B"),x=s("%Y"),O=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function w(u){return(a(u)<u?h:o(u)<u?p:i(u)<u?d:r(u)<u?y:e(u)<u?n(u)<u?g:_:t(u)<u?b:x)(u)}function A(e,n,r){if(null==e&&(e=10),"number"==typeof e){var i,o=Math.abs(r-n)/e,a=m((function(t){return t[2]})).right(O,o);return a===O.length?(i=v(n/31536e6,r/31536e6,e),e=t):a?(i=(a=O[o/O[a-1][2]<O[a][2]/o?a-1:a])[1],e=a[0]):(i=Math.max(v(n,r,e),1),e=u),e.every(i)}return e}return l.invert=function(t){return new Date(c(t))},l.domain=function(t){return arguments.length?f(Array.from(t,Pr)):f().map(Mr)},l.ticks=function(t){var e,n=f(),r=n[0],i=n[n.length-1],o=i<r;return o&&(e=r,r=i,i=e),e=(e=A(t,r,i))?e.range(r,i+1):[],o?e.reverse():e},l.tickFormat=function(t,e){return null==e?w:s(e)},l.nice=function(t){var e=f();return(t=A(t,e[0],e[e.length-1]))?f(Ut(e,t)):l},l.copy=function(){return Ot(l,Sr(t,e,n,r,i,o,a,u,s))},l}function kr(){return i.apply(Sr(we,Ee,Pe,Ie,Re,ze,Ve,Ue,un).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}var Cr=xe((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),jr=Cr,Tr=(Cr.range,xe((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Nr=Tr,Dr=(Tr.range,xe((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()}))),Ir=Dr;Dr.range;function Lr(){return i.apply(Sr(en,jr,Ge,Qe,Nr,Ir,Ve,Ue,sn).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function Rr(){var t,e,n,r,i,o=0,a=1,u=mt,s=!1;function l(e){return isNaN(e=+e)?i:u(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(i){return arguments.length?([o,a]=i,t=r(o=+o),e=r(a=+a),n=t===e?0:1/(e-t),l):[o,a]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(dt),l.rangeRound=c(yt),l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),l}}function Br(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function zr(){var t=Ft(Rr()(mt));return t.copy=function(){return Br(t,zr())},o.apply(t,arguments)}function Fr(){var t=$t(Rr()).domain([1,10]);return t.copy=function(){return Br(t,Fr()).base(t.base())},o.apply(t,arguments)}function Vr(){var t=te(Rr());return t.copy=function(){return Br(t,Vr()).constant(t.constant())},o.apply(t,arguments)}function Wr(){var t=oe(Rr());return t.copy=function(){return Br(t,Wr()).exponent(t.exponent())},o.apply(t,arguments)}function Ur(){return Wr.apply(null,arguments).exponent(.5)}function qr(){var t=[],e=mt;function n(n){if(!isNaN(n=+n))return e((O(t,n,1)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(g),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.range=function(){return t.map((n,r)=>e(r/(t.length-1)))},n.quantiles=function(e){return Array.from({length:e+1},(n,r)=>de(t,r/e))},n.copy=function(){return qr(e).domain(t)},o.apply(n,arguments)}function Gr(t,e){void 0===e&&(e=t,t=dt);for(var n=0,r=e.length-1,i=e[0],o=new Array(r<0?0:r);n<r;)o[n]=t(i,i=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[e](t-e)}}function Hr(){var t,e,n,r,i,o,a,u=0,s=.5,l=1,c=1,f=mt,h=!1;function p(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-e)*(c*t<c*e?r:i),f(h?Math.max(0,Math.min(1,t)):t))}function d(t){return function(e){var n,r,i;return arguments.length?([n,r,i]=e,f=Gr(t,[n,r,i]),p):[f(0),f(.5),f(1)]}}return p.domain=function(a){return arguments.length?([u,s,l]=a,t=o(u=+u),e=o(s=+s),n=o(l=+l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p):[u,s,l]},p.clamp=function(t){return arguments.length?(h=!!t,p):h},p.interpolator=function(t){return arguments.length?(f=t,p):f},p.range=d(dt),p.rangeRound=d(yt),p.unknown=function(t){return arguments.length?(a=t,p):a},function(a){return o=a,t=a(u),e=a(s),n=a(l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p}}function Kr(){var t=Ft(Hr()(mt));return t.copy=function(){return Br(t,Kr())},o.apply(t,arguments)}function Xr(){var t=$t(Hr()).domain([.1,1,10]);return t.copy=function(){return Br(t,Xr()).base(t.base())},o.apply(t,arguments)}function Yr(){var t=te(Hr());return t.copy=function(){return Br(t,Yr()).constant(t.constant())},o.apply(t,arguments)}function $r(){var t=oe(Hr());return t.copy=function(){return Br(t,$r()).exponent(t.exponent())},o.apply(t,arguments)}function Zr(){return $r.apply(null,arguments).exponent(.5)}},function(t,e,n){var r=n(57);t.exports=function(t,e){return r(t,e)}},function(t,e,n){var r=n(63),i=n(181),o=n(188),a=n(196),u=o((function(t){var e=r(t,a);return e.length&&e[0]===t[0]?i(e):[]}));t.exports=u},function(t,e,n){var r=n(83),i=n(198),o=n(204),a=n(14);t.exports=function(t,e){return(a(t)?r:i)(t,o(e,3))}},function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,r){return t[0]===e&&(n=r,!0)})),n}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),r=this.__entries__[n];return r&&r[1]},e.prototype.set=function(e,n){var r=t(this.__entries__,e);~r?this.__entries__[r][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,r=t(n,e);~r&&n.splice(r,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,r=this.__entries__;n<r.length;n++){var i=r[n];t.call(e,i[1],i[0])}},e}()}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),o="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var a=["top","right","bottom","left","width","height","size","weight"],u="undefined"!=typeof MutationObserver,s=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,r=!1,i=0;function a(){n&&(n=!1,t()),r&&s()}function u(){o(a)}function s(){var t=Date.now();if(n){if(t-i<2)return;r=!0}else n=!0,r=!1,setTimeout(u,e);i=t}return s}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),u?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;a.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),l=function(t,e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},c=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},f=g(0,0,0,0);function h(t){return parseFloat(t)||0}function p(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+h(t["border-"+n+"-width"])}),0)}function d(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return f;var r=c(t).getComputedStyle(t),i=function(t){for(var e={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var i=r[n],o=t["padding-"+i];e[i]=h(o)}return e}(r),o=i.left+i.right,a=i.top+i.bottom,u=h(r.width),s=h(r.height);if("border-box"===r.boxSizing&&(Math.round(u+o)!==e&&(u-=p(r,"left","right")+o),Math.round(s+a)!==n&&(s-=p(r,"top","bottom")+a)),!function(t){return t===c(t).document.documentElement}(t)){var l=Math.round(u+o)-e,d=Math.round(s+a)-n;1!==Math.abs(l)&&(u-=l),1!==Math.abs(d)&&(s-=d)}return g(i.left,i.top,u,s)}var y="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof c(t).SVGGraphicsElement}:function(t){return t instanceof c(t).SVGElement&&"function"==typeof t.getBBox};function v(t){return r?y(t)?function(t){var e=t.getBBox();return g(0,0,e.width,e.height)}(t):d(t):f}function g(t,e,n,r){return{x:t,y:e,width:n,height:r}}var m=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=v(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),_=function(t,e){var n,r,i,o,a,u,s,c=(r=(n=e).x,i=n.y,o=n.width,a=n.height,u="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,s=Object.create(u.prototype),l(s,{x:r,y:i,width:o,height:a,top:i,right:r+o,bottom:a+i,left:r}),s);l(this,{target:t,contentRect:c})},b=function(){function t(t,e,r){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=r}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof c(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new m(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof c(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new _(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),x="undefined"!=typeof WeakMap?new WeakMap:new n,O=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=s.getInstance(),r=new b(e,n,this);x.set(this,r)};["observe","unobserve","disconnect"].forEach((function(t){O.prototype[t]=function(){var e;return(e=x.get(this))[t].apply(e,arguments)}}));var w=void 0!==i.ResizeObserver?i.ResizeObserver:O;e.a=w}).call(this,n(34))},function(t,e,n){var r=n(71),i=n(25);t.exports=function(t,e,n){var o=!0,a=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return i(n)&&(o="leading"in n?!!n.leading:o,a="trailing"in n?!!n.trailing:a),r(t,e,{leading:o,maxWait:e,trailing:a})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Trapezoid=e.FunnelChart=e.Funnel=e.ComposedChart=e.RadialBarChart=e.AreaChart=e.ScatterChart=e.RadarChart=e.Sankey=e.Treemap=e.PieChart=e.BarChart=e.LineChart=e.ErrorBar=e.ZAxis=e.YAxis=e.XAxis=e.Scatter=e.Bar=e.Area=e.Line=e.CartesianGrid=e.CartesianAxis=e.ReferenceArea=e.ReferenceDot=e.ReferenceLine=e.Brush=e.RadialBar=e.Radar=e.Pie=e.PolarAngleAxis=e.PolarRadiusAxis=e.PolarGrid=e.Symbols=e.Cross=e.Dot=e.Polygon=e.Rectangle=e.Curve=e.Sector=e.Customized=e.LabelList=e.Label=e.Text=e.Cell=e.ResponsiveContainer=e.Tooltip=e.Legend=e.Layer=e.Surface=void 0,e.Global=void 0;var r=n(32);Object.defineProperty(e,"Surface",{enumerable:!0,get:function(){return r.Surface}});var i=n(6);Object.defineProperty(e,"Layer",{enumerable:!0,get:function(){return i.Layer}});var o=n(55);Object.defineProperty(e,"Legend",{enumerable:!0,get:function(){return o.Legend}});var a=n(35);Object.defineProperty(e,"Tooltip",{enumerable:!0,get:function(){return a.Tooltip}});var u=n(229);Object.defineProperty(e,"ResponsiveContainer",{enumerable:!0,get:function(){return u.ResponsiveContainer}});var s=n(27);Object.defineProperty(e,"Cell",{enumerable:!0,get:function(){return s.Cell}});var l=n(22);Object.defineProperty(e,"Text",{enumerable:!0,get:function(){return l.Text}});var c=n(17);Object.defineProperty(e,"Label",{enumerable:!0,get:function(){return c.Label}});var f=n(15);Object.defineProperty(e,"LabelList",{enumerable:!0,get:function(){return f.LabelList}});var h=n(245);Object.defineProperty(e,"Customized",{enumerable:!0,get:function(){return h.Customized}});var p=n(45);Object.defineProperty(e,"Sector",{enumerable:!0,get:function(){return p.Sector}});var d=n(28);Object.defineProperty(e,"Curve",{enumerable:!0,get:function(){return d.Curve}});var y=n(29);Object.defineProperty(e,"Rectangle",{enumerable:!0,get:function(){return y.Rectangle}});var v=n(46);Object.defineProperty(e,"Polygon",{enumerable:!0,get:function(){return v.Polygon}});var g=n(23);Object.defineProperty(e,"Dot",{enumerable:!0,get:function(){return g.Dot}});var m=n(100);Object.defineProperty(e,"Cross",{enumerable:!0,get:function(){return m.Cross}});var _=n(56);Object.defineProperty(e,"Symbols",{enumerable:!0,get:function(){return _.Symbols}});var b=n(246);Object.defineProperty(e,"PolarGrid",{enumerable:!0,get:function(){return b.PolarGrid}});var x=n(47);Object.defineProperty(e,"PolarRadiusAxis",{enumerable:!0,get:function(){return x.PolarRadiusAxis}});var O=n(48);Object.defineProperty(e,"PolarAngleAxis",{enumerable:!0,get:function(){return O.PolarAngleAxis}});var w=n(101);Object.defineProperty(e,"Pie",{enumerable:!0,get:function(){return w.Pie}});var A=n(102);Object.defineProperty(e,"Radar",{enumerable:!0,get:function(){return A.Radar}});var E=n(103);Object.defineProperty(e,"RadialBar",{enumerable:!0,get:function(){return E.RadialBar}});var M=n(104);Object.defineProperty(e,"Brush",{enumerable:!0,get:function(){return M.Brush}});var P=n(105);Object.defineProperty(e,"ReferenceLine",{enumerable:!0,get:function(){return P.ReferenceLine}});var S=n(106);Object.defineProperty(e,"ReferenceDot",{enumerable:!0,get:function(){return S.ReferenceDot}});var k=n(107);Object.defineProperty(e,"ReferenceArea",{enumerable:!0,get:function(){return k.ReferenceArea}});var C=n(108);Object.defineProperty(e,"CartesianAxis",{enumerable:!0,get:function(){return C.CartesianAxis}});var j=n(248);Object.defineProperty(e,"CartesianGrid",{enumerable:!0,get:function(){return j.CartesianGrid}});var T=n(66);Object.defineProperty(e,"Line",{enumerable:!0,get:function(){return T.Line}});var N=n(67);Object.defineProperty(e,"Area",{enumerable:!0,get:function(){return N.Area}});var D=n(68);Object.defineProperty(e,"Bar",{enumerable:!0,get:function(){return D.Bar}});var I=n(69);Object.defineProperty(e,"Scatter",{enumerable:!0,get:function(){return I.Scatter}});var L=n(30);Object.defineProperty(e,"XAxis",{enumerable:!0,get:function(){return L.XAxis}});var R=n(31);Object.defineProperty(e,"YAxis",{enumerable:!0,get:function(){return R.YAxis}});var B=n(51);Object.defineProperty(e,"ZAxis",{enumerable:!0,get:function(){return B.ZAxis}});var z=n(50);Object.defineProperty(e,"ErrorBar",{enumerable:!0,get:function(){return z.ErrorBar}});var F=n(249);Object.defineProperty(e,"LineChart",{enumerable:!0,get:function(){return F.LineChart}});var V=n(253);Object.defineProperty(e,"BarChart",{enumerable:!0,get:function(){return V.BarChart}});var W=n(254);Object.defineProperty(e,"PieChart",{enumerable:!0,get:function(){return W.PieChart}});var U=n(255);Object.defineProperty(e,"Treemap",{enumerable:!0,get:function(){return U.Treemap}});var q=n(257);Object.defineProperty(e,"Sankey",{enumerable:!0,get:function(){return q.Sankey}});var G=n(258);Object.defineProperty(e,"RadarChart",{enumerable:!0,get:function(){return G.RadarChart}});var H=n(259);Object.defineProperty(e,"ScatterChart",{enumerable:!0,get:function(){return H.ScatterChart}});var K=n(260);Object.defineProperty(e,"AreaChart",{enumerable:!0,get:function(){return K.AreaChart}});var X=n(261);Object.defineProperty(e,"RadialBarChart",{enumerable:!0,get:function(){return X.RadialBarChart}});var Y=n(262);Object.defineProperty(e,"ComposedChart",{enumerable:!0,get:function(){return Y.ComposedChart}});var $=n(109);Object.defineProperty(e,"Funnel",{enumerable:!0,get:function(){return $.Funnel}});var Z=n(263);Object.defineProperty(e,"FunnelChart",{enumerable:!0,get:function(){return Z.FunnelChart}});var J=n(110);Object.defineProperty(e,"Trapezoid",{enumerable:!0,get:function(){return J.Trapezoid}});var Q=n(8);Object.defineProperty(e,"Global",{enumerable:!0,get:function(){return Q.Global}})},,,,function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultLegendContent=void 0;var c=s(n(0)),f=l(n(4)),h=n(32),p=n(56),d=n(2),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderIcon=function(t){var e=this.props.inactiveColor,n=t.inactive?e:t.color;if("plainline"===t.type)return c.default.createElement("line",{strokeWidth:4,fill:"none",stroke:n,strokeDasharray:t.payload.strokeDasharray,x1:0,y1:16,x2:32,y2:16,className:"recharts-legend-icon"});if("line"===t.type)return c.default.createElement("path",{strokeWidth:4,fill:"none",stroke:n,d:"M0,16h"+32/3+"\n            A"+32/6+","+32/6+",0,1,1,"+32/3*2+",16\n            H32M"+32/3*2+",16\n            A"+32/6+","+32/6+",0,1,1,"+32/3+",16",className:"recharts-legend-icon"});if("rect"===t.type)return c.default.createElement("path",{stroke:"none",fill:n,d:"M0,4h32v24h-32z",className:"recharts-legend-icon"});if(c.default.isValidElement(t.legendIcon)){var r=o({},t);return delete r.legendIcon,c.default.cloneElement(t.legendIcon,r)}return c.default.createElement(p.Symbols,{fill:n,cx:16,cy:16,size:32,sizeType:"diameter",type:t.type})},e.prototype.renderItems=function(){var t=this,e=this.props,n=e.payload,r=e.iconSize,i=e.layout,a=e.formatter,u=e.inactiveColor,s={x:0,y:0,width:32,height:32},l={display:"horizontal"===i?"inline-block":"block",marginRight:10},p={display:"inline-block",verticalAlign:"middle",marginRight:4};return n.map((function(e,n){var i,y=e.formatter||a,v=f.default(((i={"recharts-legend-item":!0})["legend-item-"+n]=!0,i.inactive=e.inactive,i));if("none"===e.type)return null;var g=e.inactive?u:e.color;return c.default.createElement("li",o({className:v,style:l,key:"legend-item-"+n},d.adaptEventsOfChild(t.props,e,n)),c.default.createElement(h.Surface,{width:r,height:r,viewBox:s,style:p},t.renderIcon(e)),c.default.createElement("span",{className:"recharts-legend-item-text",style:{color:g}},y?y(e.value,e,n):e.value))}))},e.prototype.render=function(){var t=this.props,e=t.payload,n=t.layout,r=t.align;if(!e||!e.length)return null;var i={padding:0,margin:0,textAlign:"horizontal"===n?r:"left"};return c.default.createElement("ul",{className:"recharts-default-legend",style:i},this.renderItems())},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"middle",inactiveColor:"#ccc"},e}(c.PureComponent);e.DefaultLegendContent=y},function(t,e,n){var r=n(75),i=n(80),o=n(154),a=n(158),u=n(174),s=n(14),l=n(85),c=n(87),f="[object Object]",h=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,p,d,y){var v=s(t),g=s(e),m=v?"[object Array]":u(t),_=g?"[object Array]":u(e),b=(m="[object Arguments]"==m?f:m)==f,x=(_="[object Arguments]"==_?f:_)==f,O=m==_;if(O&&l(t)){if(!l(e))return!1;v=!0,b=!1}if(O&&!b)return y||(y=new r),v||c(t)?i(t,e,n,p,d,y):o(t,e,m,n,p,d,y);if(!(1&n)){var w=b&&h.call(t,"__wrapped__"),A=x&&h.call(e,"__wrapped__");if(w||A){var E=w?t.value():t,M=A?e.value():e;return y||(y=new r),d(E,M,n,p,y)}}return!!O&&(y||(y=new r),a(t,e,n,p,d,y))}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(37),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(37);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(37);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(37);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},function(t,e,n){var r=n(36);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(36),i=n(58),o=n(59);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(a)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(77),i=n(136),o=n(25),a=n(79),u=/^\[object .+?Constructor\]$/,s=Function.prototype,l=Object.prototype,c=s.toString,f=l.hasOwnProperty,h=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?h:u).test(a(t))}},function(t,e,n){var r=n(38),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,i=n(137),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},function(t,e,n){var r=n(12)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(140),i=n(36),o=n(58);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(t,e,n){var r=n(141),i=n(142),o=n(143),a=n(144),u=n(145);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(39);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(39),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(39),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},function(t,e,n){var r=n(39);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var r=n(40);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(40);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(40);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(40);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},function(t,e){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(38),i=n(155),o=n(76),a=n(80),u=n(156),s=n(157),l=r?r.prototype:void 0,c=l?l.valueOf:void 0;t.exports=function(t,e,n,r,l,f,h){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!f(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=u;case"[object Set]":var d=1&r;if(p||(p=s),t.size!=e.size&&!d)return!1;var y=h.get(t);if(y)return y==e;r|=2,h.set(t,e);var v=a(p(t),p(e),r,l,f,h);return h.delete(t),v;case"[object Symbol]":if(c)return c.call(t)==c.call(e)}return!1}},function(t,e,n){var r=n(12).Uint8Array;t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},function(t,e,n){var r=n(159),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,a,u){var s=1&n,l=r(t),c=l.length;if(c!=r(e).length&&!s)return!1;for(var f=c;f--;){var h=l[f];if(!(s?h in e:i.call(e,h)))return!1}var p=u.get(t),d=u.get(e);if(p&&d)return p==e&&d==t;var y=!0;u.set(t,e),u.set(e,t);for(var v=s;++f<c;){var g=t[h=l[f]],m=e[h];if(o)var _=s?o(m,g,h,e,t,u):o(g,m,h,t,e,u);if(!(void 0===_?g===m||a(g,m,n,o,u):_)){y=!1;break}v||(v="constructor"==h)}if(y&&!v){var b=t.constructor,x=e.constructor;b==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(y=!1)}return u.delete(t),u.delete(e),y}},function(t,e,n){var r=n(160),i=n(162),o=n(60);t.exports=function(t){return r(t,o,i)}},function(t,e,n){var r=n(161),i=n(14);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},function(t,e,n){var r=n(83),i=n(163),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return o.call(t,e)})))}:i;t.exports=u},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(165),i=n(84),o=n(14),a=n(85),u=n(86),s=n(87),l=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),c=!n&&i(t),f=!n&&!c&&a(t),h=!n&&!c&&!f&&s(t),p=n||c||f||h,d=p?r(t.length,String):[],y=d.length;for(var v in t)!e&&!l.call(t,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||h&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,y))||d.push(v);return d}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var r=n(24),i=n(61),o=n(21),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!a[r(t)]}},function(t,e,n){(function(t){var r=n(78),i=e&&!e.nodeType&&e,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=o&&o.exports===i&&r.process,u=function(){try{var t=o&&o.require&&o.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=u}).call(this,n(54)(t))},function(t,e,n){var r=n(171),i=n(172),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(173)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(175),i=n(58),o=n(176),a=n(177),u=n(178),s=n(24),l=n(79),c=l(r),f=l(i),h=l(o),p=l(a),d=l(u),y=s;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=y(new i)||o&&"[object Promise]"!=y(o.resolve())||a&&"[object Set]"!=y(new a)||u&&"[object WeakMap]"!=y(new u))&&(y=function(t){var e=s(t),n="[object Object]"==e?t.constructor:void 0,r=n?l(n):"";if(r)switch(r){case c:return"[object DataView]";case f:return"[object Map]";case h:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=y},function(t,e,n){var r=n(20)(n(12),"DataView");t.exports=r},function(t,e,n){var r=n(20)(n(12),"Promise");t.exports=r},function(t,e,n){var r=n(20)(n(12),"Set");t.exports=r},function(t,e,n){var r=n(20)(n(12),"WeakMap");t.exports=r},function(t,e,n){(function(e){(function(){var n,r,i,o,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(n()-a)/1e6},r=e.hrtime,o=(n=function(){var t;return 1e9*(t=r())[0]+t[1]})(),u=1e9*e.uptime(),a=o-u):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(this,n(180))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,l=[],c=!1,f=-1;function h(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&p())}function p(){if(!c){var t=u(h);c=!0;for(var e=l.length;e;){for(s=l,l=[];++f<e;)s&&s[f].run();f=-1,e=l.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(81),i=n(182),o=n(187),a=n(63),u=n(88),s=n(82),l=Math.min;t.exports=function(t,e,n){for(var c=n?o:i,f=t[0].length,h=t.length,p=h,d=Array(h),y=1/0,v=[];p--;){var g=t[p];p&&e&&(g=a(g,u(e))),y=l(g.length,y),d[p]=!n&&(e||f>=120&&g.length>=120)?new r(p&&g):void 0}g=t[0];var m=-1,_=d[0];t:for(;++m<f&&v.length<y;){var b=g[m],x=e?e(b):b;if(b=n||0!==b?b:0,!(_?s(_,x):c(v,x,n))){for(p=h;--p;){var O=d[p];if(!(O?s(O,x):c(t[p],x,n)))continue t}_&&_.push(x),v.push(b)}}return v}},function(t,e,n){var r=n(183);t.exports=function(t,e){return!!(null==t?0:t.length)&&r(t,e,0)>-1}},function(t,e,n){var r=n(184),i=n(185),o=n(186);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}},function(t,e,n){var r=n(64),i=n(189),o=n(191);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(190),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,u=i(o.length-e,0),s=Array(u);++a<u;)s[a]=o[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=o[a];return l[e]=n(s),r(t,this,l)}}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(192),i=n(195)(r);t.exports=i},function(t,e,n){var r=n(193),i=n(194),o=n(64),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(20),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){var n=Date.now;t.exports=function(t){var e=0,r=0;return function(){var i=n(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var r=n(197);t.exports=function(t){return r(t)?t:[]}},function(t,e,n){var r=n(62),i=n(21);t.exports=function(t){return i(t)&&r(t)}},function(t,e,n){var r=n(199);t.exports=function(t,e){var n=[];return r(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}},function(t,e,n){var r=n(200),i=n(203)(r);t.exports=i},function(t,e,n){var r=n(201),i=n(60);t.exports=function(t,e){return t&&r(t,e,i)}},function(t,e,n){var r=n(202)();t.exports=r},function(t,e){t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}},function(t,e,n){var r=n(62);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,a=e?o:-1,u=Object(n);(e?a--:++a<o)&&!1!==i(u[a],a,u););return n}}},function(t,e,n){var r=n(205),i=n(208),o=n(64),a=n(14),u=n(218);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?a(t)?i(t[0],t[1]):r(t):u(t)}},function(t,e,n){var r=n(206),i=n(207),o=n(90);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},function(t,e,n){var r=n(75),i=n(57);t.exports=function(t,e,n,o){var a=n.length,u=a,s=!o;if(null==t)return!u;for(t=Object(t);a--;){var l=n[a];if(s&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++a<u;){var c=(l=n[a])[0],f=t[c],h=l[1];if(s&&l[2]){if(void 0===f&&!(c in t))return!1}else{var p=new r;if(o)var d=o(f,h,c,t,e,p);if(!(void 0===d?i(h,f,3,o,p):d))return!1}}return!0}},function(t,e,n){var r=n(89),i=n(60);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],a=t[o];e[n]=[o,a,r(a)]}return e}},function(t,e,n){var r=n(57),i=n(209),o=n(215),a=n(65),u=n(89),s=n(90),l=n(42);t.exports=function(t,e){return a(t)&&u(e)?s(l(t),e):function(n){var a=i(n,t);return void 0===a&&a===e?o(n,t):r(e,a,3)}}},function(t,e,n){var r=n(91);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},function(t,e,n){var r=n(211),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=a},function(t,e,n){var r=n(212);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},function(t,e,n){var r=n(59);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},function(t,e,n){var r=n(214);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(38),i=n(63),o=n(14),a=n(41),u=r?r.prototype:void 0,s=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(a(e))return s?s.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(t,e,n){var r=n(216),i=n(217);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,n){var r=n(92),i=n(84),o=n(14),a=n(86),u=n(61),s=n(42);t.exports=function(t,e,n){for(var l=-1,c=(e=r(e,t)).length,f=!1;++l<c;){var h=s(e[l]);if(!(f=null!=t&&n(t,h)))break;t=t[h]}return f||++l!=c?f:!!(c=null==t?0:t.length)&&u(c)&&a(h,c)&&(o(t)||i(t))}},function(t,e,n){var r=n(219),i=n(220),o=n(65),a=n(42);t.exports=function(t){return o(t)?r(a(t)):i(t)}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(91);t.exports=function(t){return function(e){return r(e,t)}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;!function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}e.default=t}(n(1));var r=u(n(222)),i=u(n(225)),o=u(n(0)),a=u(n(93));n(95);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var l=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,r.default)(t,e)}))},c=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,i.default)(t,e)}))},f=function(t){var e,n;function r(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).onEnter=function(t,n){var r=e.getClassNames(n?"appear":"enter").className;e.removeClasses(t,"exit"),l(t,r),e.props.onEnter&&e.props.onEnter(t,n)},e.onEntering=function(t,n){var r=e.getClassNames(n?"appear":"enter").activeClassName;e.reflowAndAddClass(t,r),e.props.onEntering&&e.props.onEntering(t,n)},e.onEntered=function(t,n){var r=e.getClassNames("appear").doneClassName,i=e.getClassNames("enter").doneClassName,o=n?r+" "+i:i;e.removeClasses(t,n?"appear":"enter"),l(t,o),e.props.onEntered&&e.props.onEntered(t,n)},e.onExit=function(t){var n=e.getClassNames("exit").className;e.removeClasses(t,"appear"),e.removeClasses(t,"enter"),l(t,n),e.props.onExit&&e.props.onExit(t)},e.onExiting=function(t){var n=e.getClassNames("exit").activeClassName;e.reflowAndAddClass(t,n),e.props.onExiting&&e.props.onExiting(t)},e.onExited=function(t){var n=e.getClassNames("exit").doneClassName;e.removeClasses(t,"exit"),l(t,n),e.props.onExited&&e.props.onExited(t)},e.getClassNames=function(t){var n=e.props.classNames,r="string"==typeof n,i=r?(r&&n?n+"-":"")+t:n[t];return{className:i,activeClassName:r?i+"-active":n[t+"Active"],doneClassName:r?i+"-done":n[t+"Done"]}},e}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.removeClasses=function(t,e){var n=this.getClassNames(e),r=n.className,i=n.activeClassName,o=n.doneClassName;r&&c(t,r),i&&c(t,i),o&&c(t,o)},i.reflowAndAddClass=function(t,e){e&&(t&&t.scrollTop,l(t,e))},i.render=function(){var t=s({},this.props);return delete t.classNames,o.default.createElement(a.default,s({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(o.default.Component);f.defaultProps={classNames:""},f.propTypes={};var h=f;e.default=h,t.exports=e.default},function(t,e,n){"use strict";var r=n(223);e.__esModule=!0,e.default=function(t,e){t.classList?t.classList.add(e):(0,i.default)(t,e)||("string"==typeof t.className?t.className=t.className+" "+e:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+e))};var i=r(n(224));t.exports=e.default},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){return t.classList?!!e&&t.classList.contains(e):-1!==(" "+(t.className.baseVal||t.className)+" ").indexOf(" "+e+" ")},t.exports=e.default},function(t,e,n){"use strict";function r(t,e){return t.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}t.exports=function(t,e){t.classList?t.classList.remove(e):"string"==typeof t.className?t.className=r(t.className,e):t.setAttribute("class",r(t.className&&t.className.baseVal||"",e))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;a(n(1));var r=a(n(0)),i=n(52),o=a(n(96));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){var e,n;function a(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).handleEnter=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEnter",0,n)},e.handleEntering=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntering",0,n)},e.handleEntered=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntered",0,n)},e.handleExit=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExit",1,n)},e.handleExiting=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExiting",1,n)},e.handleExited=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExited",1,n)},e}n=t,(e=a).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var u=a.prototype;return u.handleLifecycle=function(t,e,n){var o,a=this.props.children,u=r.default.Children.toArray(a)[e];u.props[t]&&(o=u.props)[t].apply(o,n),this.props[t]&&this.props[t]((0,i.findDOMNode)(this))},u.render=function(){var t=this.props,e=t.children,n=t.in,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["children","in"]),a=r.default.Children.toArray(e),u=a[0],s=a[1];return delete i.onEnter,delete i.onEntering,delete i.onEntered,delete i.onExit,delete i.onExiting,delete i.onExited,r.default.createElement(o.default,i,n?r.default.cloneElement(u,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(s,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);u.propTypes={};var s=u;e.default=s,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.getChildMapping=i,e.mergeChildMappings=o,e.getInitialChildMapping=function(t,e){return i(t.children,(function(n){return(0,r.cloneElement)(n,{onExited:e.bind(null,n),in:!0,appear:a(n,"appear",t),enter:a(n,"enter",t),exit:a(n,"exit",t)})}))},e.getNextChildMapping=function(t,e,n){var u=i(t.children),s=o(e,u);return Object.keys(s).forEach((function(i){var o=s[i];if((0,r.isValidElement)(o)){var l=i in e,c=i in u,f=e[i],h=(0,r.isValidElement)(f)&&!f.props.in;!c||l&&!h?c||!l||h?c&&l&&(0,r.isValidElement)(f)&&(s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:f.props.in,exit:a(o,"exit",t),enter:a(o,"enter",t)})):s[i]=(0,r.cloneElement)(o,{in:!1}):s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:!0,exit:a(o,"exit",t),enter:a(o,"enter",t)})}})),s};var r=n(0);function i(t,e){var n=Object.create(null);return t&&r.Children.map(t,(function(t){return t})).forEach((function(t){n[t.key]=function(t){return e&&(0,r.isValidElement)(t)?e(t):t}(t)})),n}function o(t,e){function n(n){return n in e?e[n]:t[n]}t=t||{},e=e||{};var r,i=Object.create(null),o=[];for(var a in t)a in e?o.length&&(i[a]=o,o=[]):o.push(a);var u={};for(var s in e){if(i[s])for(r=0;r<i[s].length;r++){var l=i[s][r];u[i[s][r]]=n(l)}u[s]=n(s)}for(r=0;r<o.length;r++)u[o[r]]=n(o[r]);return u}function a(t,e,n){return null!=n[e]?n[e]:t.props[e]}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultTooltipContent=void 0;var c=l(n(3)),f=s(n(0)),h=l(n(4)),p=n(5);function d(t){return c.default.isArray(t)&&p.isNumOrStr(t[0])&&p.isNumOrStr(t[1])?t.join(" ~ "):t}var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderContent=function(){var t=this.props,e=t.payload,n=t.separator,r=t.formatter,i=t.itemStyle,a=t.itemSorter;if(e&&e.length){var u=(a?c.default.sortBy(e,a):e).map((function(t,a){if("none"===t.type)return null;var u=o({display:"block",paddingTop:4,paddingBottom:4,color:t.color||"#000"},i),s=t.formatter||r||d,l=t.name,c=t.value;if(s){var h=s(c,l,t,a,e);Array.isArray(h)?(c=h[0],l=h[1]):c=h}return f.default.createElement("li",{className:"recharts-tooltip-item",key:"tooltip-item-"+a,style:u},p.isNumOrStr(l)?f.default.createElement("span",{className:"recharts-tooltip-item-name"},l):null,p.isNumOrStr(l)?f.default.createElement("span",{className:"recharts-tooltip-item-separator"},n):null,f.default.createElement("span",{className:"recharts-tooltip-item-value"},c),f.default.createElement("span",{className:"recharts-tooltip-item-unit"},t.unit||""))}));return f.default.createElement("ul",{className:"recharts-tooltip-item-list",style:{padding:0,margin:0}},u)}return null},e.prototype.render=function(){var t=this.props,e=t.wrapperClassName,n=t.contentStyle,r=t.labelClassName,i=t.labelStyle,a=t.label,u=t.labelFormatter,s=t.payload,l=o({margin:0,padding:10,backgroundColor:"#fff",border:"1px solid #ccc",whiteSpace:"nowrap"},n),p=o({margin:0},i),d=!c.default.isNil(a),y=d?a:"",v=h.default("recharts-default-tooltip",e),g=h.default("recharts-tooltip-label",r);return d&&u&&(y=u(a,s)),f.default.createElement("div",{className:v,style:l},f.default.createElement("p",{className:g,style:p},f.default.isValidElement(y)?y:""+y),this.renderContent())},e.displayName="DefaultTooltipContent",e.defaultProps={separator:" : ",contentStyle:{},itemStyle:{},labelStyle:{}},e}(f.PureComponent);e.DefaultTooltipContent=y},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return a(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ResponsiveContainer=void 0;var l=s(n(4)),c=s(n(3)),f=u(n(0)),h=s(n(264)),p=n(5),d=n(26),y=function(t){function e(e){var n=t.call(this,e)||this;return n.updateDimensionsImmediate=function(){if(n.mounted){var t=n.getContainerSize();if(t){var e=n.state,r=e.containerWidth,i=e.containerHeight,o=t.containerWidth,a=t.containerHeight;o===r&&a===i||n.setState({containerWidth:o,containerHeight:a})}}},n.state={containerWidth:-1,containerHeight:-1},n.handleResize=e.debounce>0?c.default.debounce(n.updateDimensionsImmediate,e.debounce):n.updateDimensionsImmediate,n.containerRef=f.default.createRef(),n}return i(e,t),e.prototype.componentDidMount=function(){this.mounted=!0;var t=this.getContainerSize();t&&this.setState(t)},e.prototype.componentWillUnmount=function(){this.mounted=!1},e.prototype.getContainerSize=function(){return this.containerRef.current?{containerWidth:this.containerRef.current.clientWidth,containerHeight:this.containerRef.current.clientHeight}:null},e.prototype.renderChart=function(){var t=this.state,e=t.containerWidth,n=t.containerHeight;if(e<0||n<0)return null;var r=this.props,i=r.aspect,o=r.width,a=r.height,u=r.minWidth,s=r.minHeight,l=r.maxHeight,c=r.children;d.warn(p.isPercent(o)||p.isPercent(a),"The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",o,a),d.warn(!i||i>0,"The aspect(%s) must be greater than zero.",i);var h=p.isPercent(o)?e:o,y=p.isPercent(a)?n:a;return i&&i>0&&(h?y=h/i:y&&(h=y*i),l&&y>l&&(y=l)),d.warn(h>0||y>0,"The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.",h,y,o,a,u,s,i),f.default.cloneElement(c,{width:h,height:y})},e.prototype.render=function(){var t=this.props,e=t.minWidth,n=t.minHeight,r=t.width,i=t.height,o=t.maxHeight,a=t.id,u=t.className,s={width:r,height:i,minWidth:e,minHeight:n,maxHeight:o};return f.default.createElement(h.default,{handleWidth:!0,handleHeight:!0,onResize:this.handleResize,targetRef:this.containerRef},f.default.createElement("div",{id:""+a,className:l.default("recharts-responsive-container",u),style:s,ref:this.containerRef},this.renderChart()))},e.defaultProps={width:"100%",height:"100%",debounce:0},e}(f.Component);e.ResponsiveContainer=y},function(t,e,n){var r=n(12);t.exports=function(){return r.Date.now()}},function(t,e,n){var r=n(25),i=n(41),o=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,s=/^0o[0-7]+$/i,l=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return NaN;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(o,"");var n=u.test(t);return n||s.test(t)?l(t.slice(2),n?2:8):a.test(t)?NaN:+t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=u(n(233)),i=n(238),o=u(n(97)),a=u(n(241));function u(t){return t&&t.__esModule?t:{default:t}}var s=/((?:\-[a-z]+\-)?calc)/;e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return(0,r.default)(t).walk((function(t){if("function"===t.type&&s.test(t.value)){var n=r.default.stringify(t.nodes);if(!(n.indexOf("constant")>=0||n.indexOf("env")>=0)){var u=i.parser.parse(n),l=(0,o.default)(u,e);t.type="word",t.value=(0,a.default)(t.value,l,e)}}}),!0).toString()},t.exports=e.default},function(t,e,n){var r=n(234),i=n(235),o=n(236);function a(t){return this instanceof a?(this.nodes=r(t),this):new a(t)}a.prototype.toString=function(){return Array.isArray(this.nodes)?o(this.nodes):""},a.prototype.walk=function(t,e){return i(this.nodes,t,e),this},a.unit=n(237),a.walk=i,a.stringify=o,t.exports=a},function(t,e){var n="(".charCodeAt(0),r=")".charCodeAt(0),i="'".charCodeAt(0),o='"'.charCodeAt(0),a="\\".charCodeAt(0),u="/".charCodeAt(0),s=",".charCodeAt(0),l=":".charCodeAt(0),c="*".charCodeAt(0);t.exports=function(t){for(var e,f,h,p,d,y,v,g,m=[],_=t,b=0,x=_.charCodeAt(b),O=_.length,w=[{nodes:m}],A=0,E="",M="",P="";b<O;)if(x<=32){e=b;do{e+=1,x=_.charCodeAt(e)}while(x<=32);p=_.slice(b,e),h=m[m.length-1],x===r&&A?P=p:h&&"div"===h.type?h.after=p:x===s||x===l||x===u&&_.charCodeAt(e+1)!==c?M=p:m.push({type:"space",sourceIndex:b,value:p}),b=e}else if(x===i||x===o){e=b,p={type:"string",sourceIndex:b,quote:f=x===i?"'":'"'};do{if(d=!1,~(e=_.indexOf(f,e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=f).length-1,p.unclosed=!0}while(d);p.value=_.slice(b+1,e),m.push(p),b=e+1,x=_.charCodeAt(b)}else if(x===u&&_.charCodeAt(b+1)===c)p={type:"comment",sourceIndex:b},-1===(e=_.indexOf("*/",b))&&(p.unclosed=!0,e=_.length),p.value=_.slice(b+2,e),m.push(p),b=e+2,x=_.charCodeAt(b);else if(x===u||x===s||x===l)p=_[b],m.push({type:"div",sourceIndex:b-M.length,value:p,before:M,after:""}),M="",b+=1,x=_.charCodeAt(b);else if(n===x){e=b;do{e+=1,x=_.charCodeAt(e)}while(x<=32);if(p={type:"function",sourceIndex:b-E.length,value:E,before:_.slice(b+1,e)},b=e,"url"===E&&x!==i&&x!==o){e-=1;do{if(d=!1,~(e=_.indexOf(")",e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=")").length-1,p.unclosed=!0}while(d);v=e;do{v-=1,x=_.charCodeAt(v)}while(x<=32);p.nodes=b!==v+1?[{type:"word",sourceIndex:b,value:_.slice(b,v+1)}]:[],p.unclosed&&v+1!==e?(p.after="",p.nodes.push({type:"space",sourceIndex:v+1,value:_.slice(v+1,e)})):p.after=_.slice(v+1,e),b=e+1,x=_.charCodeAt(b),m.push(p)}else A+=1,p.after="",m.push(p),w.push(p),m=p.nodes=[],g=p;E=""}else if(r===x&&A)b+=1,x=_.charCodeAt(b),g.after=P,P="",A-=1,w.pop(),m=(g=w[A]).nodes;else{e=b;do{x===a&&(e+=1),e+=1,x=_.charCodeAt(e)}while(e<O&&!(x<=32||x===i||x===o||x===s||x===l||x===u||x===n||x===r&&A));p=_.slice(b,e),n===x?E=p:m.push({type:"word",sourceIndex:b,value:p}),b=e}for(b=w.length-1;b;b-=1)w[b].unclosed=!0;return w[0].nodes}},function(t,e){t.exports=function t(e,n,r){var i,o,a,u;for(i=0,o=e.length;i<o;i+=1)a=e[i],r||(u=n(a,i,e)),!1!==u&&"function"===a.type&&Array.isArray(a.nodes)&&t(a.nodes,n,r),r&&n(a,i,e)}},function(t,e){function n(t,e){var n,i,o=t.type,a=t.value;return e&&void 0!==(i=e(t))?i:"word"===o||"space"===o?a:"string"===o?(n=t.quote||"")+a+(t.unclosed?"":n):"comment"===o?"/*"+a+(t.unclosed?"":"*/"):"div"===o?(t.before||"")+a+(t.after||""):Array.isArray(t.nodes)?(n=r(t.nodes),"function"!==o?n:a+"("+(t.before||"")+n+(t.after||"")+(t.unclosed?"":")")):a}function r(t,e){var r,i;if(Array.isArray(t)){for(r="",i=t.length-1;~i;i-=1)r=n(t[i],e)+r;return r}return n(t,e)}t.exports=r},function(t,e){var n="-".charCodeAt(0),r="+".charCodeAt(0),i=".".charCodeAt(0),o="e".charCodeAt(0),a="E".charCodeAt(0);t.exports=function(t){for(var e,u=0,s=t.length,l=!1,c=-1,f=!1;u<s;){if((e=t.charCodeAt(u))>=48&&e<=57)f=!0;else if(e===o||e===a){if(c>-1)break;c=u}else if(e===i){if(l)break;l=!0}else{if(e!==r&&e!==n)break;if(0!==u)break}u+=1}return c+1===u&&u--,!!f&&{number:t.slice(0,u),unit:t.slice(u)}}},function(t,e,n){var r=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonParserError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}function e(t,e,n){n=n||0;for(var r=0;r<e;r++)this.push(t),t+=n}function n(t,e){for(e+=t=this.length-t;t<e;t++)this.push(this[t])}function r(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];"function"==typeof i?(n++,i.apply(e,t[n])):e.push(i)}return e}"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonParserError";var i={trace:function(){},JisonParserError:t,yy:{},options:{type:"lalr",hasPartialLrUpgradeOnConflict:!0,errorRecoveryTokenDiscardCount:3},symbols_:{$accept:0,$end:1,ADD:3,ANGLE:16,CHS:22,COMMA:14,CSS_CPROP:13,CSS_VAR:12,DIV:6,EMS:20,EOF:1,EXS:21,FREQ:18,LENGTH:15,LPAREN:7,MUL:5,NESTED_CALC:9,NUMBER:11,PERCENTAGE:28,PREFIX:10,REMS:23,RES:19,RPAREN:8,SUB:4,TIME:17,VHS:24,VMAXS:27,VMINS:26,VWS:25,css_value:33,css_variable:32,error:2,expression:29,math_expression:30,value:31},terminals_:{1:"EOF",2:"error",3:"ADD",4:"SUB",5:"MUL",6:"DIV",7:"LPAREN",8:"RPAREN",9:"NESTED_CALC",10:"PREFIX",11:"NUMBER",12:"CSS_VAR",13:"CSS_CPROP",14:"COMMA",15:"LENGTH",16:"ANGLE",17:"TIME",18:"FREQ",19:"RES",20:"EMS",21:"EXS",22:"CHS",23:"REMS",24:"VHS",25:"VWS",26:"VMINS",27:"VMAXS",28:"PERCENTAGE"},TERROR:2,EOF:1,originalQuoteName:null,originalParseError:null,cleanupAfterParse:null,constructParseErrorInfo:null,yyMergeLocationInfo:null,__reentrant_call_depth:0,__error_infos:[],__error_recovery_infos:[],quoteName:function(t){return'"'+t+'"'},getSymbolName:function(t){if(this.terminals_[t])return this.terminals_[t];var e=this.symbols_;for(var n in e)if(e[n]===t)return n;return null},describeSymbol:function(t){if(t!==this.EOF&&this.terminal_descriptions_&&this.terminal_descriptions_[t])return this.terminal_descriptions_[t];if(t===this.EOF)return"end of input";var e=this.getSymbolName(t);return e?this.quoteName(e):null},collect_expected_token_set:function(t,e){var n=this.TERROR,r=[],i={};if(!e&&this.state_descriptions_&&this.state_descriptions_[t])return[this.state_descriptions_[t]];for(var o in this.table[t])if((o=+o)!==n){var a=e?o:this.describeSymbol(o);a&&!i[a]&&(r.push(a),i[a]=!0)}return r},productions_:function(t){for(var e=[],n=t.pop,r=t.rule,i=0,o=n.length;i<o;i++)e.push([n[i],r[i]]);return e}({pop:r([29,e,[30,10],31,31,32,32,e,[33,15]]),rule:r([2,e,[3,5],4,7,e,[1,4],2,4,6,e,[1,14],2])}),performAction:function(t,e,n){var r=this.yy;r.parser,r.lexer;switch(t){case 0:
/*! Production::    $accept : expression $end */
this.$=n[e-1];break;case 1:
/*! Production::    expression : math_expression EOF */
return this.$=n[e-1],n[e-1];case 2:
/*! Production::    math_expression : math_expression ADD math_expression */case 3:
/*! Production::    math_expression : math_expression SUB math_expression */case 4:
/*! Production::    math_expression : math_expression MUL math_expression */case 5:
/*! Production::    math_expression : math_expression DIV math_expression */
this.$={type:"MathExpression",operator:n[e-1],left:n[e-2],right:n[e]};break;case 6:
/*! Production::    math_expression : LPAREN math_expression RPAREN */
this.$=n[e-1];break;case 7:
/*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */
this.$={type:"Calc",value:n[e-1]};break;case 8:
/*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */
this.$={type:"Calc",value:n[e-1],prefix:n[e-5]};break;case 9:
/*! Production::    math_expression : css_variable */case 10:
/*! Production::    math_expression : css_value */case 11:
/*! Production::    math_expression : value */
this.$=n[e];break;case 12:
/*! Production::    value : NUMBER */
this.$={type:"Value",value:parseFloat(n[e])};break;case 13:
/*! Production::    value : SUB NUMBER */
this.$={type:"Value",value:-1*parseFloat(n[e])};break;case 14:
/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */
this.$={type:"CssVariable",value:n[e-1]};break;case 15:
/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */
this.$={type:"CssVariable",value:n[e-3],fallback:n[e-1]};break;case 16:
/*! Production::    css_value : LENGTH */
this.$={type:"LengthValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 17:
/*! Production::    css_value : ANGLE */
this.$={type:"AngleValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 18:
/*! Production::    css_value : TIME */
this.$={type:"TimeValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 19:
/*! Production::    css_value : FREQ */
this.$={type:"FrequencyValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 20:
/*! Production::    css_value : RES */
this.$={type:"ResolutionValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 21:
/*! Production::    css_value : EMS */
this.$={type:"EmValue",value:parseFloat(n[e]),unit:"em"};break;case 22:
/*! Production::    css_value : EXS */
this.$={type:"ExValue",value:parseFloat(n[e]),unit:"ex"};break;case 23:
/*! Production::    css_value : CHS */
this.$={type:"ChValue",value:parseFloat(n[e]),unit:"ch"};break;case 24:
/*! Production::    css_value : REMS */
this.$={type:"RemValue",value:parseFloat(n[e]),unit:"rem"};break;case 25:
/*! Production::    css_value : VHS */
this.$={type:"VhValue",value:parseFloat(n[e]),unit:"vh"};break;case 26:
/*! Production::    css_value : VWS */
this.$={type:"VwValue",value:parseFloat(n[e]),unit:"vw"};break;case 27:
/*! Production::    css_value : VMINS */
this.$={type:"VminValue",value:parseFloat(n[e]),unit:"vmin"};break;case 28:
/*! Production::    css_value : VMAXS */
this.$={type:"VmaxValue",value:parseFloat(n[e]),unit:"vmax"};break;case 29:
/*! Production::    css_value : PERCENTAGE */
this.$={type:"PercentageValue",value:parseFloat(n[e]),unit:"%"};break;case 30:
/*! Production::    css_value : SUB css_value */
var i=n[e];i.value*=-1,this.$=i}},table:function(t){for(var e=[],n=t.len,r=t.symbol,i=t.type,o=t.state,a=t.mode,u=t.goto,s=0,l=n.length;s<l;s++){for(var c=n[s],f={},h=0;h<c;h++){var p=r.shift();switch(i.shift()){case 2:f[p]=[a.shift(),u.shift()];break;case 0:f[p]=o.shift();break;default:f[p]=[3]}}e.push(f)}return e}({len:r([24,1,5,23,1,18,e,[0,3],1,e,[0,16],e,[23,4],n,[28,3],0,0,16,1,6,6,e,[0,3],5,1,2,n,[37,3],n,[20,3],5,0,0]),symbol:r([4,7,9,11,12,e,[15,19,1],1,1,e,[3,4,1],n,[30,19],n,[29,4],7,4,10,11,n,[22,14],n,[19,3],n,[43,22],n,[23,69],n,[139,4],8,n,[51,24],4,n,[138,15],13,n,[186,5],8,n,[6,6],n,[5,5],9,8,14,n,[159,47],n,[60,10]]),type:r([e,[2,19],e,[0,5],1,e,[2,24],e,[0,4],n,[22,19],n,[43,42],n,[23,70],n,[28,25],n,[45,25],n,[113,54]]),state:r([1,2,8,6,7,30,n,[4,3],33,37,n,[5,3],38,n,[4,3],39,n,[4,3],40,n,[4,3],42,n,[21,4],50,n,[5,3],51,n,[4,3]]),mode:r([e,[1,179],e,[2,3],n,[5,5],n,[6,4],e,[1,57]]),goto:r([5,3,4,24,e,[9,15,1],e,[25,5,1],n,[24,19],31,35,32,34,n,[18,14],36,n,[38,19],n,[19,57],n,[118,4],41,n,[24,19],43,35,n,[16,14],44,e,[2,3],28,29,2,e,[3,3],28,29,3,n,[53,4],e,[45,5,1],n,[100,42],52,n,[5,4],53])}),defaultActions:function(t){for(var e={},n=t.idx,r=t.goto,i=0,o=n.length;i<o;i++){e[n[i]]=r[i]}return e}({idx:r([6,7,8,e,[10,16,1],33,34,39,40,41,45,47,52,53]),goto:r([9,10,11,e,[16,14,1],12,1,30,13,e,[4,4,1],14,15,8])}),parseError:function(t,e,n){if(!e.recoverable)throw"function"==typeof this.trace&&this.trace(t),n||(n=this.JisonParserError),new n(t,e);"function"==typeof this.trace&&this.trace(t),e.destroy()},parse:function(t){var e,n=this,r=new Array(128),i=new Array(128),o=new Array(128),a=this.table,u=0,s=0,l=(this.TERROR,this.EOF),c=(this.options.errorRecoveryTokenDiscardCount,[0,54]);e=this.__lexer__?this.__lexer__:this.__lexer__=Object.create(this.lexer);var f={parseError:void 0,quoteName:void 0,lexer:void 0,parser:void 0,pre_parse:void 0,post_parse:void 0,pre_lex:void 0,post_lex:void 0};function h(){var t=e.fastLex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l}"function"!=typeof assert||assert,this.yyGetSharedState=function(){return f},function(t,e){for(var n in e)void 0===t[n]&&Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}(f,this.yy),f.lexer=e,f.parser=this,"function"==typeof f.parseError?this.parseError=function(t,e,n){return n||(n=this.JisonParserError),f.parseError.call(this,t,e,n)}:this.parseError=this.originalParseError,"function"==typeof f.quoteName?this.quoteName=function(t){return f.quoteName.call(this,t)}:this.quoteName=this.originalQuoteName,this.cleanupAfterParse=function(t,n,a){var s,l;n&&((f.post_parse||this.post_parse)&&(l=this.constructParseErrorInfo(null,null,null,!1)),f.post_parse&&void 0!==(s=f.post_parse.call(this,f,t,l))&&(t=s),this.post_parse&&void 0!==(s=this.post_parse.call(this,f,t,l))&&(t=s),l&&l.destroy&&l.destroy());if(this.__reentrant_call_depth>1)return t;if(e.cleanupAfterLex&&e.cleanupAfterLex(a),f&&(f.lexer=void 0,f.parser=void 0,e.yy===f&&(e.yy=void 0)),f=void 0,this.parseError=this.originalParseError,this.quoteName=this.originalQuoteName,r.length=0,i.length=0,o.length=0,u=0,!a){for(var c=this.__error_infos.length-1;c>=0;c--){var h=this.__error_infos[c];h&&"function"==typeof h.destroy&&h.destroy()}this.__error_infos.length=0}return t},this.constructParseErrorInfo=function(t,n,a,l){var c={errStr:t,exception:n,text:e.match,value:e.yytext,token:this.describeSymbol(s)||s,token_id:s,line:e.yylineno,expected:a,recoverable:l,state:p,action:d,new_state:b,symbol_stack:r,state_stack:i,value_stack:o,stack_pointer:u,yy:f,lexer:e,parser:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(c),c};var p,d,y,v,g,m,_,b,x=function(){var t=e.lex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l},O={$:!0,_$:void 0,yy:f},w=!1;try{if(this.__reentrant_call_depth++,e.setInput(t,f),"function"==typeof e.canIUse)e.canIUse().fastLex&&(x=h);for(o[u]=null,i[u]=0,r[u]=0,++u,this.pre_parse&&this.pre_parse.call(this,f),f.pre_parse&&f.pre_parse.call(this,f),b=i[u-1];;){if(p=b,this.defaultActions[p])d=2,b=this.defaultActions[p];else if(s||(s=x()),v=a[p]&&a[p][s]||c,b=v[1],!(d=v[0])){var A,E=this.describeSymbol(s)||s,M=this.collect_expected_token_set(p);A="number"==typeof e.yylineno?"Parse error on line "+(e.yylineno+1)+": ":"Parse error: ","function"==typeof e.showPosition&&(A+="\n"+e.showPosition(69,10)+"\n"),M.length?A+="Expecting "+M.join(", ")+", got unexpected "+E:A+="Unexpected "+E,g=this.constructParseErrorInfo(A,null,M,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break}switch(d){default:if(d instanceof Array){g=this.constructParseErrorInfo("Parse Error: multiple actions possible at state: "+p+", token: "+s,null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break}g=this.constructParseErrorInfo("Parsing halted. No viable error recovery approach available due to internal system failure.",null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break;case 1:r[u]=s,o[u]=e.yytext,i[u]=b,++u,s=0;continue;case 2:if(m=(_=this.productions_[b-1])[1],void 0!==(y=this.performAction.call(O,b,u-1,o))){w=y;break}u-=m;var P=_[0];r[u]=P,o[u]=O.$,b=a[i[u-1]][P],i[u]=b,++u;continue;case 3:-2!==u&&(w=!0,u--,void 0!==o[u]&&(w=o[u]))}break}}catch(t){if(t instanceof this.JisonParserError)throw t;if(e&&"function"==typeof e.JisonLexerError&&t instanceof e.JisonLexerError)throw t;g=this.constructParseErrorInfo("Parsing aborted due to exception.",t,null,!1),w=!1,void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y)}finally{w=this.cleanupAfterParse(w,!0,!0),this.__reentrant_call_depth--}return w}};i.originalParseError=i.parseError,i.originalQuoteName=i.quoteName;var o=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonLexerError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}return"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonLexerError",{EOF:1,ERROR:2,__currentRuleSet__:null,__error_infos:[],__decompressed:!1,done:!1,_backtrack:!1,_input:"",_more:!1,_signaled_error_token:!1,conditionStack:[],match:"",matched:"",matches:!1,yytext:"",offset:0,yyleng:0,yylineno:0,yylloc:null,constructLexErrorInfo:function(t,e,n){if(t=""+t,null==n&&(n=!(t.indexOf("\n")>0&&t.indexOf("^")>0)),this.yylloc&&n)if("function"==typeof this.prettyPrintRange){this.prettyPrintRange(this.yylloc);/\n\s*$/.test(t)||(t+="\n"),t+="\n  Erroneous area:\n"+this.prettyPrintRange(this.yylloc)}else if("function"==typeof this.showPosition){var r=this.showPosition();r&&(t.length&&"\n"!==t[t.length-1]&&"\n"!==r[0]?t+="\n"+r:t+=r)}var i={errStr:t,recoverable:!!e,text:this.match,token:null,line:this.yylineno,loc:this.yylloc,yy:this.yy,lexer:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(i),i},parseError:function(t,e,n){if(n||(n=this.JisonLexerError),this.yy){if(this.yy.parser&&"function"==typeof this.yy.parser.parseError)return this.yy.parser.parseError.call(this,t,e,n)||this.ERROR;if("function"==typeof this.yy.parseError)return this.yy.parseError.call(this,t,e,n)||this.ERROR}throw new n(t,e)},yyerror:function(t){var e="";this.yylloc&&(e=" on line "+(this.yylineno+1));var n=this.constructLexErrorInfo("Lexical error"+e+": "+t,this.options.lexerErrorsAreRecoverable),r=Array.prototype.slice.call(arguments,1);return r.length&&(n.extra_error_attributes=r),this.parseError(n.errStr,n,this.JisonLexerError)||this.ERROR},cleanupAfterLex:function(t){if(this.setInput("",{}),!t){for(var e=this.__error_infos.length-1;e>=0;e--){var n=this.__error_infos[e];n&&"function"==typeof n.destroy&&n.destroy()}this.__error_infos.length=0}return this},clear:function(){this.yytext="",this.yyleng=0,this.match="",this.matches=!1,this._more=!1,this._backtrack=!1;var t=this.yylloc?this.yylloc.last_column:0;this.yylloc={first_line:this.yylineno+1,first_column:t,last_line:this.yylineno+1,last_column:t,range:[this.offset,this.offset]}},setInput:function(t,e){if(this.yy=e||this.yy||{},!this.__decompressed){for(var n=this.rules,r=0,i=n.length;r<i;r++){"number"==typeof(h=n[r])&&(n[r]=n[h])}var o=this.conditions;for(var a in o){var u=o[a],s=u.rules,l=(i=s.length,new Array(i+1)),c=new Array(i+1);for(r=0;r<i;r++){var f=s[r],h=n[f];l[r+1]=h,c[r+1]=f}u.rules=c,u.__rule_regexes=l,u.__rule_count=i}this.__decompressed=!0}return this._input=t||"",this.clear(),this._signaled_error_token=!1,this.done=!1,this.yylineno=0,this.matched="",this.conditionStack=["INITIAL"],this.__currentRuleSet__=null,this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]},this.offset=0,this},editRemainingInput:function(t,e){var n=t.call(this,this._input,e);return"string"!=typeof n?n&&(this._input=""+n):this._input=n,this},input:function(){if(!this._input)return null;var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var e=1,n=!1;if("\n"===t)n=!0;else if("\r"===t){n=!0;var r=this._input[1];"\n"===r&&(e++,t+=r,this.yytext+=r,this.yyleng++,this.offset++,this.match+=r,this.matched+=r,this.yylloc.range[1]++)}return n?(this.yylineno++,this.yylloc.last_line++,this.yylloc.last_column=0):this.yylloc.last_column++,this.yylloc.range[1]++,this._input=this._input.slice(e),t},unput:function(t){var e=t.length,n=t.split(/(?:\r\n?|\n)/g);if(this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e),this.yyleng=this.yytext.length,this.offset-=e,this.match=this.match.substr(0,this.match.length-e),this.matched=this.matched.substr(0,this.matched.length-e),n.length>1){this.yylineno-=n.length-1,this.yylloc.last_line=this.yylineno+1;var r=this.match,i=r.split(/(?:\r\n?|\n)/g);1===i.length&&(i=(r=this.matched).split(/(?:\r\n?|\n)/g)),this.yylloc.last_column=i[i.length-1].length}else this.yylloc.last_column-=e;return this.yylloc.range[1]=this.yylloc.range[0]+this.yyleng,this.done=!1,this},more:function(){return this._more=!0,this},reject:function(){if(this.options.backtrack_lexer)this._backtrack=!0;else{var t="";this.yylloc&&(t=" on line "+(this.yylineno+1));var e=this.constructLexErrorInfo("Lexical error"+t+": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).",!1);this._signaled_error_token=this.parseError(e.errStr,e,this.JisonLexerError)||this.ERROR}return this},less:function(t){return this.unput(this.match.slice(t))},pastInput:function(t,e){var n=this.matched.substring(0,this.matched.length-this.match.length);t<0?t=n.length:t||(t=20),e<0?e=n.length:e||(e=1);var r=(n=n.substr(2*-t-2)).replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(-e)).join("\n")).length>t&&(n="..."+n.substr(-t)),n},upcomingInput:function(t,e){var n=this.match;t<0?t=n.length+this._input.length:t||(t=20),e<0?e=t:e||(e=1),n.length<2*t+2&&(n+=this._input.substring(0,2*t+2));var r=n.replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(0,e)).join("\n")).length>t&&(n=n.substring(0,t)+"..."),n},showPosition:function(t,e){var n=this.pastInput(t).replace(/\s/g," "),r=new Array(n.length+1).join("-");return n+this.upcomingInput(e).replace(/\s/g," ")+"\n"+r+"^"},deriveLocationInfo:function(t,e,n,r){var i={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]};return t&&(i.first_line=0|t.first_line,i.last_line=0|t.last_line,i.first_column=0|t.first_column,i.last_column=0|t.last_column,t.range&&(i.range[0]=0|t.range[0],i.range[1]=0|t.range[1])),(i.first_line<=0||i.last_line<i.first_line)&&(i.first_line<=0&&e&&(i.first_line=0|e.last_line,i.first_column=0|e.last_column,e.range&&(i.range[0]=0|t.range[1])),(i.last_line<=0||i.last_line<i.first_line)&&n&&(i.last_line=0|n.first_line,i.last_column=0|n.first_column,n.range&&(i.range[1]=0|t.range[0])),i.first_line<=0&&r&&(i.last_line<=0||r.last_line<=i.last_line)&&(i.first_line=0|r.first_line,i.first_column=0|r.first_column,r.range&&(i.range[0]=0|r.range[0])),i.last_line<=0&&r&&(i.first_line<=0||r.first_line>=i.first_line)&&(i.last_line=0|r.last_line,i.last_column=0|r.last_column,r.range&&(i.range[1]=0|r.range[1]))),i.last_line<=0&&(i.first_line<=0?(i.first_line=this.yylloc.first_line,i.last_line=this.yylloc.last_line,i.first_column=this.yylloc.first_column,i.last_column=this.yylloc.last_column,i.range[0]=this.yylloc.range[0],i.range[1]=this.yylloc.range[1]):(i.last_line=this.yylloc.last_line,i.last_column=this.yylloc.last_column,i.range[1]=this.yylloc.range[1])),i.first_line<=0&&(i.first_line=i.last_line,i.first_column=0,i.range[1]=i.range[0]),i.first_column<0&&(i.first_column=0),i.last_column<0&&(i.last_column=i.first_column>0?i.first_column:80),i},prettyPrintRange:function(t,e,n){t=this.deriveLocationInfo(t,e,n);var r=(this.matched+this._input).split("\n"),i=Math.max(1,e?e.first_line:t.first_line-3),o=Math.max(1,n?n.last_line:t.last_line+1),a=1+Math.log10(1|o)|0,u=new Array(a).join(" "),s=[],l=r.slice(i-1,o+1).map((function(e,n){var r=n+i,o=(u+r).substr(-a)+": "+e,l=new Array(a+1).join("^"),c=3,f=0;(r===t.first_line?(c+=t.first_column,f=Math.max(2,(r===t.last_line?t.last_column:e.length)-t.first_column+1)):r===t.last_line?f=Math.max(2,t.last_column+1):r>t.first_line&&r<t.last_line&&(f=Math.max(2,e.length+1)),f)&&(o+="\n"+l+new Array(c).join(".")+new Array(f).join("^"),e.trim().length>0&&s.push(n));return o=o.replace(/\t/g," ")}));if(s.length>4){var c=s[1]+1,f=s[s.length-2]-1,h=new Array(a+1).join(" ")+"  (...continued...)";h+="\n"+new Array(a+1).join("-")+"  (---------------)",l.splice(c,f-c+1,h)}return l.join("\n")},describeYYLLOC:function(t,e){var n,r=t.first_line,i=t.last_line,o=t.first_column,a=t.last_column;if(0===i-r?(n="line "+r+", ",n+=a-o<=1?"column "+o:"columns "+o+" .. "+a):n="lines "+r+"(column "+o+") .. "+i+"(column "+a+")",t.range&&e){var u=t.range[0],s=t.range[1]-1;n+=s<=u?" {String Offset: "+u+"}":" {String Offset range: "+u+" .. "+s+"}"}return n},test_match:function(t,e){var n,r,i,o,a;if(this.options.backtrack_lexer&&(i={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.yylloc.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column,range:this.yylloc.range.slice(0)},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done}),a=(o=t[0]).length,(r=o.split(/(?:\r\n?|\n)/g)).length>1?(this.yylineno+=r.length-1,this.yylloc.last_line=this.yylineno+1,this.yylloc.last_column=r[r.length-1].length):this.yylloc.last_column+=a,this.yytext+=o,this.match+=o,this.matched+=o,this.matches=t,this.yyleng=this.yytext.length,this.yylloc.range[1]+=a,this.offset+=a,this._more=!1,this._backtrack=!1,this._input=this._input.slice(a),n=this.performAction.call(this,this.yy,e,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),n)return n;if(this._backtrack){for(var u in i)this[u]=i[u];return this.__currentRuleSet__=null,!1}return!!this._signaled_error_token&&(n=this._signaled_error_token,this._signaled_error_token=!1,n)},next:function(){if(this.done)return this.clear(),this.EOF;var t,e,n,r;this._input||(this.done=!0),this._more||this.clear();var i=this.__currentRuleSet__;if(!(i||(i=this.__currentRuleSet__=this._currentRules())&&i.rules)){var o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));var a=this.constructLexErrorInfo("Internal lexer engine error"+o+': The lex grammar programmer pushed a non-existing condition name "'+this.topState()+'"; this is a fatal error and should be reported to the application programmer team!',!1);return this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR}for(var u=i.rules,s=i.__rule_regexes,l=i.__rule_count,c=1;c<=l;c++)if((n=this._input.match(s[c]))&&(!e||n[0].length>e[0].length)){if(e=n,r=c,this.options.backtrack_lexer){if(!1!==(t=this.test_match(n,u[c])))return t;if(this._backtrack){e=void 0;continue}return!1}if(!this.options.flex)break}if(e)return!1!==(t=this.test_match(e,u[r]))&&t;if(this._input){o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));a=this.constructLexErrorInfo("Lexical error"+o+": Unrecognized text.",this.options.lexerErrorsAreRecoverable);var f=this._input,h=this.topState(),p=this.conditionStack.length;return(t=this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR)===this.ERROR&&(this.matches||f!==this._input||h!==this.topState()||p!==this.conditionStack.length||this.input()),t}return this.done=!0,this.clear(),this.EOF},lex:function(){var t;for("function"==typeof this.pre_lex&&(t=this.pre_lex.call(this,0)),"function"==typeof this.options.pre_lex&&(t=this.options.pre_lex.call(this,t)||t),this.yy&&"function"==typeof this.yy.pre_lex&&(t=this.yy.pre_lex.call(this,t)||t);!t;)t=this.next();return this.yy&&"function"==typeof this.yy.post_lex&&(t=this.yy.post_lex.call(this,t)||t),"function"==typeof this.options.post_lex&&(t=this.options.post_lex.call(this,t)||t),"function"==typeof this.post_lex&&(t=this.post_lex.call(this,t)||t),t},fastLex:function(){for(var t;!t;)t=this.next();return t},canIUse:function(){return{fastLex:!("function"==typeof this.pre_lex||"function"==typeof this.options.pre_lex||this.yy&&"function"==typeof this.yy.pre_lex||this.yy&&"function"==typeof this.yy.post_lex||"function"==typeof this.options.post_lex||"function"==typeof this.post_lex)&&"function"==typeof this.fastLex}},begin:function(t){return this.pushState(t)},pushState:function(t){return this.conditionStack.push(t),this.__currentRuleSet__=null,this},popState:function(){return this.conditionStack.length-1>0?(this.__currentRuleSet__=null,this.conditionStack.pop()):this.conditionStack[0]},topState:function(t){return(t=this.conditionStack.length-1-Math.abs(t||0))>=0?this.conditionStack[t]:"INITIAL"},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]]:this.conditions.INITIAL},stateStackSize:function(){return this.conditionStack.length},options:{trackPosition:!0},JisonLexerError:t,performAction:function(t,e,n){switch(e){case 1:
/*! Conditions:: INITIAL */
/*! Rule::       \s+ */
break;default:return this.simpleCaseActionClusters[e]}},simpleCaseActionClusters:{
/*! Conditions:: INITIAL */
/*! Rule::       (--[0-9a-z-A-Z-]*) */
0:13,
/*! Conditions:: INITIAL */
/*! Rule::       \* */
2:5,
/*! Conditions:: INITIAL */
/*! Rule::       \/ */
3:6,
/*! Conditions:: INITIAL */
/*! Rule::       \+ */
4:3,
/*! Conditions:: INITIAL */
/*! Rule::       - */
5:4,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */
6:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */
7:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */
8:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */
9:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */
10:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */
11:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */
12:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */
13:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */
14:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */
15:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */
16:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */
17:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */
18:18,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */
19:18,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */
20:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */
21:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */
22:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */
23:20,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */
24:21,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */
25:22,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */
26:23,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */
27:25,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */
28:24,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */
29:26,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */
30:27,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */
31:28,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */
32:11,
/*! Conditions:: INITIAL */
/*! Rule::       (calc) */
33:9,
/*! Conditions:: INITIAL */
/*! Rule::       (var) */
34:12,
/*! Conditions:: INITIAL */
/*! Rule::       ([a-z]+) */
35:10,
/*! Conditions:: INITIAL */
/*! Rule::       \( */
36:7,
/*! Conditions:: INITIAL */
/*! Rule::       \) */
37:8,
/*! Conditions:: INITIAL */
/*! Rule::       , */
38:14,
/*! Conditions:: INITIAL */
/*! Rule::       $ */
39:1},rules:[/^(?:(--[\d\-A-Za-z]*))/,/^(?:\s+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:(\d+(\.\d*)?|\.\d+)px\b)/,/^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)in\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,/^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,/^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,/^(?:(\d+(\.\d*)?|\.\d+)s\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,/^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,/^(?:(\d+(\.\d*)?|\.\d+)em\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,/^(?:(\d+(\.\d*)?|\.\d+)%)/,/^(?:(\d+(\.\d*)?|\.\d+)\b)/,/^(?:(calc))/,/^(?:(var))/,/^(?:([a-z]+))/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:$)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],inclusive:!0}}}}();function a(){this.yy={}}return i.lexer=o,a.prototype=i,i.Parser=a,new a}();e.parser=r,e.Parser=r.Parser,e.parse=function(){return r.parse.apply(r,arguments)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(240),o=(r=i)&&r.__esModule?r:{default:r};e.default=function(t,e,n){switch(t.type){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":return function(t,e,n){e.type===t.type&&(e={type:t.type,value:(0,o.default)(e.value,e.unit,t.unit,n),unit:t.unit});return{left:t,right:e}}(t,e,n);default:return{left:t,right:e}}},t.exports=e.default},function(t,e){var n={px:{px:1,cm:96/2.54,mm:96/25.4,in:96,pt:96/72,pc:16},cm:{px:2.54/96,cm:1,mm:.1,in:2.54,pt:2.54/72,pc:2.54/6},mm:{px:25.4/96,cm:10,mm:1,in:25.4,pt:25.4/72,pc:25.4/6},in:{px:1/96,cm:1/2.54,mm:1/25.4,in:1,pt:1/72,pc:1/6},pt:{px:.75,cm:72/2.54,mm:72/25.4,in:72,pt:1,pc:12},pc:{px:6/96,cm:6/2.54,mm:6/25.4,in:6,pt:6/72,pc:1},deg:{deg:1,grad:.9,rad:180/Math.PI,turn:360},grad:{deg:400/360,grad:1,rad:200/Math.PI,turn:400},rad:{deg:Math.PI/180,grad:Math.PI/200,rad:1,turn:2*Math.PI},turn:{deg:1/360,grad:1/400,rad:.5/Math.PI,turn:1},s:{s:1,ms:.001},ms:{s:1e3,ms:1},Hz:{Hz:1,kHz:1e3},kHz:{Hz:.001,kHz:1},dpi:{dpi:1,dpcm:1/2.54,dppx:1/96},dpcm:{dpi:2.54,dpcm:1,dppx:2.54/96},dppx:{dpi:96,dpcm:96/2.54,dppx:1}};t.exports=function(t,e,r,i){if(!n.hasOwnProperty(r))throw new Error("Cannot convert to "+r);if(!n[r].hasOwnProperty(e))throw new Error("Cannot convert from "+e+" to "+r);var o=n[r][e]*t;return!1!==i?(i=Math.pow(10,parseInt(i)||5),Math.round(o*i)/i):o}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var a=function t(e,n){switch(e.type){case"MathExpression":var a=e.left,u=e.right,s=e.operator,l="";return"MathExpression"===a.type&&i[s]<i[a.operator]?l+="("+t(a,n)+")":l+=t(a,n),l+=" "+e.operator+" ","MathExpression"===u.type&&i[s]<i[u.operator]?l+="("+t(u,n)+")":"MathExpression"===u.type&&"-"===s&&["+","-"].includes(u.operator)?(u.operator=(0,r.flip)(u.operator),l+=t(u,n)):l+=t(u,n),l;case"Value":return o(e.value,n);case"CssVariable":return e.fallback?"var("+e.value+", "+t(e.fallback,n,!0)+")":"var("+e.value+")";case"Calc":return e.prefix?"-"+e.prefix+"-calc("+t(e.value,n)+")":"calc("+t(e.value,n)+")";default:return o(e.value,n)+e.unit}}(e,n);return"MathExpression"===e.type&&(a=t+"("+a+")"),a};var r=n(97),i={"*":0,"/":0,"+":1,"-":1};function o(t,e){if(!1!==e){var n=Math.pow(10,e);return Math.round(t*n)/n}return t}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"getTickValues",{enumerable:!0,get:function(){return r.getTickValues}}),Object.defineProperty(e,"getNiceTickValues",{enumerable:!0,get:function(){return r.getNiceTickValues}}),Object.defineProperty(e,"getTickValuesFixedDomain",{enumerable:!0,get:function(){return r.getTickValuesFixedDomain}});var r=n(243)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getTickValuesFixedDomain=e.getTickValues=e.getNiceTickValues=void 0;var r=a(n(98)),i=n(99),o=a(n(244));function a(t){return t&&t.__esModule?t:{default:t}}function u(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(t){var e=s(t,2),n=e[0],r=e[1],i=n,o=r;return n>r&&(i=r,o=n),[i,o]}function c(t,e,n){if(t.lte(0))return new r.default(0);var i=o.default.getDigitCount(t.toNumber()),a=new r.default(10).pow(i),u=t.div(a),s=1!==i?.05:.1,l=new r.default(Math.ceil(u.div(s).toNumber())).add(n).mul(s).mul(a);return e?l:new r.default(Math.ceil(l))}function f(t,e,n){var a=1,u=new r.default(t);if(!u.isint()&&n){var s=Math.abs(t);s<1?(a=new r.default(10).pow(o.default.getDigitCount(t)-1),u=new r.default(Math.floor(u.div(a).toNumber())).mul(a)):s>1&&(u=new r.default(Math.floor(t)))}else 0===t?u=new r.default(Math.floor((e-1)/2)):n||(u=new r.default(Math.floor(t)));var l=Math.floor((e-1)/2);return(0,i.compose)((0,i.map)((function(t){return u.add(new r.default(t-l).mul(a)).toNumber()})),i.range)(0,e)}function h(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(!Number.isFinite((e-t)/(n-1)))return{step:new r.default(0),tickMin:new r.default(0),tickMax:new r.default(0)};var a,u=c(new r.default(e).sub(t).div(n-1),i,o);a=t<=0&&e>=0?new r.default(0):(a=new r.default(t).add(e).div(2)).sub(new r.default(a).mod(u));var s=Math.ceil(a.sub(t).div(u).toNumber()),l=Math.ceil(new r.default(e).sub(a).div(u).toNumber()),f=s+l+1;return f>n?h(t,e,n,i,o+1):(f<n&&(l=e>0?l+(n-f):l,s=e>0?s:s+(n-f)),{step:u,tickMin:a.sub(new r.default(s).mul(u)),tickMax:a.add(new r.default(l).mul(u))})}var p=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],a=e[1],c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,p=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],d=Math.max(c,2),y=l([n,a]),v=s(y,2),g=v[0],m=v[1];if(g===-1/0||m===1/0){var _=m===1/0?[g].concat(u((0,i.range)(0,c-1).map((function(){return 1/0})))):u((0,i.range)(0,c-1).map((function(){return-1/0}))).concat([m]);return n>a?(0,i.reverse)(_):_}if(g===m)return f(g,c,p);var b=h(g,m,d,p),x=b.step,O=b.tickMin,w=b.tickMax,A=o.default.rangeStep(O,w.add(new r.default(.1).mul(x)),x);return n>a?(0,i.reverse)(A):A}));e.getNiceTickValues=p;var d=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],o=e[1],a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,u=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],h=Math.max(a,2),p=l([n,o]),d=s(p,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[n,o];if(y===v)return f(y,a,u);var g=c(new r.default(v).sub(y).div(h-1),u,0),m=(0,i.compose)((0,i.map)((function(t){return new r.default(y).add(new r.default(t).mul(g)).toNumber()})),i.range),_=m(0,h).filter((function(t){return t>=y&&t<=v}));return n>o?(0,i.reverse)(_):_}));e.getTickValues=d;var y=(0,i.memoize)((function(t,e){var n=s(t,2),a=n[0],f=n[1],h=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],p=l([a,f]),d=s(p,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[a,f];if(y===v)return[y];var g=Math.max(e,2),m=c(new r.default(v).sub(y).div(g-1),h,0),_=u(o.default.rangeStep(new r.default(y),new r.default(v).sub(new r.default(.99).mul(m)),m)).concat([v]);return a>f?(0,i.reverse)(_):_}));e.getTickValuesFixedDomain=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(98))&&r.__esModule?r:{default:r},o=n(99);var a={rangeStep:function(t,e,n){for(var r=new i.default(t),o=0,a=[];r.lt(e)&&o<1e5;)a.push(r.toNumber()),r=r.add(n),o++;return a},getDigitCount:function(t){return 0===t?1:Math.floor(new i.default(t).abs().log(10).toNumber())+1},interpolateNumber:(0,o.curry)((function(t,e,n){var r=+t;return r+n*(+e-r)})),uninterpolateNumber:(0,o.curry)((function(t,e,n){var r=e-+t;return(n-t)/(r=r||1/0)})),uninterpolateTruncation:(0,o.curry)((function(t,e,n){var r=e-+t;return r=r||1/0,Math.max(0,Math.min(1,(n-t)/r))}))};e.default=a},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Customized=void 0;var l=a(n(0)),c=s(n(3)),f=n(6),h=n(26);function p(t){var e,n=t.component,i=u(t,["component"]);return l.isValidElement(n)?e=l.cloneElement(n,i):c.default.isFunction(n)?e=l.createElement(n,i):h.warn(!1,"Customized's props `component` must be React.element or Function, but got %s.",r(n)),l.default.createElement(f.Layer,{className:"recharts-customized-wrapper"},e)}e.Customized=p,p.displayName="Customized"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarGrid=void 0;var l=s(n(0)),c=n(11),f=n(2),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPolygonPath=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.polarAngles,o="";return i.forEach((function(e,i){var a=c.polarToCartesian(n,r,t,e);o+=i?"L "+a.x+","+a.y:"M "+a.x+","+a.y})),o+="Z"},e.prototype.renderPolarAngles=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.polarAngles,u=t.radialLines;if(!a||!a.length||!u)return null;var s=o({stroke:"#ccc"},f.filterProps(this.props));return l.default.createElement("g",{className:"recharts-polar-grid-angle"},a.map((function(t,a){var u=c.polarToCartesian(e,n,r,t),f=c.polarToCartesian(e,n,i,t);return l.default.createElement("line",o({},s,{key:"line-"+a,x1:u.x,y1:u.y,x2:f.x,y2:f.y}))})))},e.prototype.renderConcentricCircle=function(t,e,n){var r=this.props,i=r.cx,a=r.cy,u=o(o(o({stroke:"#ccc"},f.filterProps(this.props)),{fill:"none"}),n);return l.default.createElement("circle",o({},u,{className:"recharts-polar-grid-concentric-circle",key:"circle-"+e,cx:i,cy:a,r:t}))},e.prototype.renderConcentricPolygon=function(t,e,n){var r=o(o(o({stroke:"#ccc"},f.filterProps(this.props)),{fill:"none"}),n);return l.default.createElement("path",o({},r,{className:"recharts-polar-grid-concentric-polygon",key:"path-"+e,d:this.getPolygonPath(t)}))},e.prototype.renderConcentricPath=function(){var t=this,e=this.props,n=e.polarRadius,r=e.gridType;return n&&n.length?l.default.createElement("g",{className:"recharts-polar-grid-concentric"},n.map((function(e,n){return"circle"===r?t.renderConcentricCircle(e,n):t.renderConcentricPolygon(e,n)}))):null},e.prototype.render=function(){return this.props.outerRadius<=0?null:l.default.createElement("g",{className:"recharts-polar-grid"},this.renderPolarAngles(),this.renderConcentricPath())},e.displayName="PolarGrid",e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,gridType:"polygon",radialLines:!0},e}(l.PureComponent);e.PolarGrid=h},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.generatePrefixStyle=void 0;var i=["Webkit","Moz","O","ms"];e.generatePrefixStyle=function(t,e){if(!t)return null;var n=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),o=i.reduce((function(t,i){var o;return r(r({},t),((o={})[i+n]=e,o))}),{});return o[t]=e,o}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.CartesianGrid=void 0;var f=s(n(0)),h=c(n(3)),p=n(5),d=n(2),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.renderLineItem=function(t,e){var n;if(f.default.isValidElement(t))n=f.default.cloneElement(t,e);else if(h.default.isFunction(t))n=t(e);else{var r=e.x1,i=e.y1,a=e.x2,u=e.y2,s=e.key,c=l(e,["x1","y1","x2","y2","key"]);n=f.default.createElement("line",o({},d.filterProps(c),{x1:r,y1:i,x2:a,y2:u,fill:"none",key:s}))}return n},e.prototype.renderHorizontal=function(t){var n=this,r=this.props,i=r.x,a=r.width,u=r.horizontal;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:i,y1:t,x2:i+a,y2:t,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return f.default.createElement("g",{className:"recharts-cartesian-grid-horizontal"},s)},e.prototype.renderVertical=function(t){var n=this,r=this.props,i=r.y,a=r.height,u=r.vertical;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:t,y1:i,x2:t,y2:i+a,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return f.default.createElement("g",{className:"recharts-cartesian-grid-vertical"},s)},e.prototype.renderVerticalStripes=function(t){var e=this.props.verticalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));i!==s[0]&&s.unshift(0);var l=s.map((function(t,n){var l=s[n+1]?s[n+1]-t:i+a-t;if(l<=0)return null;var c=n%e.length;return f.default.createElement("rect",{key:"react-"+n,x:Math.round(t+i-i),y:o,width:l,height:u,stroke:"none",fill:e[c],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return f.default.createElement("g",{className:"recharts-cartesian-gridstripes-vertical"},l)},e.prototype.renderHorizontalStripes=function(t){var e=this.props.horizontalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));o!==s[0]&&s.unshift(0);var l=s.map((function(t,n){var l=s[n+1]?s[n+1]-t:o+u-t;if(l<=0)return null;var c=n%e.length;return f.default.createElement("rect",{key:"react-"+n,y:Math.round(t+o-o),x:i,height:l,width:a,stroke:"none",fill:e[c],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return f.default.createElement("g",{className:"recharts-cartesian-gridstripes-horizontal"},l)},e.prototype.renderBackground=function(){var t=this.props.fill;if(!t||"none"===t)return null;var e=this.props,n=e.fillOpacity,r=e.x,i=e.y,o=e.width,a=e.height;return f.default.createElement("rect",{x:r,y:i,width:o,height:a,stroke:"none",fill:t,fillOpacity:n,className:"recharts-cartesian-grid-bg"})},e.prototype.render=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.horizontal,a=t.vertical,u=t.horizontalCoordinatesGenerator,s=t.verticalCoordinatesGenerator,l=t.xAxis,c=t.yAxis,d=t.offset,y=t.chartWidth,v=t.chartHeight;if(!p.isNumber(r)||r<=0||!p.isNumber(i)||i<=0||!p.isNumber(e)||e!==+e||!p.isNumber(n)||n!==+n)return null;var g=this.props,m=g.horizontalPoints,_=g.verticalPoints;return m&&m.length||!h.default.isFunction(u)||(m=u({yAxis:c,width:y,height:v,offset:d})),_&&_.length||!h.default.isFunction(s)||(_=s({xAxis:l,width:y,height:v,offset:d})),f.default.createElement("g",{className:"recharts-cartesian-grid"},this.renderBackground(),o&&this.renderHorizontal(m),a&&this.renderVertical(_),o&&this.renderHorizontalStripes(m),a&&this.renderVerticalStripes(_))},e.displayName="CartesianGrid",e.defaultProps={horizontal:!0,vertical:!0,horizontalPoints:[],verticalPoints:[],stroke:"#ccc",fill:"none",verticalFill:[],horizontalFill:[]},e}(f.PureComponent);e.CartesianGrid=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LineChart=void 0;var r=n(16),i=n(66),o=n(30),a=n(31),u=n(18);e.LineChart=r.generateCategoricalChart({chartName:"LineChart",GraphicalChild:i.Line,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.detectReferenceElementsDomain=void 0;var r=n(106),i=n(105),o=n(107),a=n(49),u=n(9),s=n(5);e.detectReferenceElementsDomain=function(t,e,n,l,c){var f=u.findAllByType(t,i.ReferenceLine.displayName),h=u.findAllByType(t,r.ReferenceDot.displayName),p=f.concat(h),d=u.findAllByType(t,o.ReferenceArea.displayName),y=l+"Id",v=l[0],g=e;if(p.length&&(g=p.reduce((function(t,e){if(e.props[y]===n&&a.ifOverflowMatches(e.props,"extendDomain")&&s.isNumber(e.props[v])){var r=e.props[v];return[Math.min(t[0],r),Math.max(t[1],r)]}return t}),g)),d.length){var m=v+"1",_=v+"2";g=d.reduce((function(t,e){if(e.props[y]===n&&a.ifOverflowMatches(e.props,"extendDomain")&&s.isNumber(e.props[m])&&s.isNumber(e.props[_])){var r=e.props[m],i=e.props[_];return[Math.min(t[0],r,i),Math.max(t[1],r,i)]}return t}),g)}return c&&c.length&&(g=c.reduce((function(t,e){return s.isNumber(e)?[Math.min(t[0],e),Math.max(t[1],e)]:t}),g)),g}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.SYNC_EVENT=e.eventCenter=void 0;var i=new(r(n(252)).default);e.eventCenter=i,i.setMaxListeners&&i.setMaxListeners(10),e.SYNC_EVENT="recharts.syncMouseEvents"},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,i="~";function o(){}function a(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function u(t,e,n,r,o){if("function"!=typeof n)throw new TypeError("The listener must be a function");var u=new a(n,r||t,o),s=i?i+e:e;return t._events[s]?t._events[s].fn?t._events[s]=[t._events[s],u]:t._events[s].push(u):(t._events[s]=u,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function l(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(i=!1)),l.prototype.eventNames=function(){var t,e,n=[];if(0===this._eventsCount)return n;for(e in t=this._events)r.call(t,e)&&n.push(i?e.slice(1):e);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},l.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,o=n.length,a=new Array(o);r<o;r++)a[r]=n[r].fn;return a},l.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},l.prototype.emit=function(t,e,n,r,o,a){var u=i?i+t:t;if(!this._events[u])return!1;var s,l,c=this._events[u],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,r),!0;case 5:return c.fn.call(c.context,e,n,r,o),!0;case 6:return c.fn.call(c.context,e,n,r,o,a),!0}for(l=1,s=new Array(f-1);l<f;l++)s[l-1]=arguments[l];c.fn.apply(c.context,s)}else{var h,p=c.length;for(l=0;l<p;l++)switch(c[l].once&&this.removeListener(t,c[l].fn,void 0,!0),f){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,e);break;case 3:c[l].fn.call(c[l].context,e,n);break;case 4:c[l].fn.call(c[l].context,e,n,r);break;default:if(!s)for(h=1,s=new Array(f-1);h<f;h++)s[h-1]=arguments[h];c[l].fn.apply(c[l].context,s)}}return!0},l.prototype.on=function(t,e,n){return u(this,t,e,n,!1)},l.prototype.once=function(t,e,n){return u(this,t,e,n,!0)},l.prototype.removeListener=function(t,e,n,r){var o=i?i+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||r&&!a.once||n&&a.context!==n||s(this,o);else{for(var u=0,l=[],c=a.length;u<c;u++)(a[u].fn!==e||r&&!a[u].once||n&&a[u].context!==n)&&l.push(a[u]);l.length?this._events[o]=1===l.length?l[0]:l:s(this,o)}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&s(this,e)):(this._events=new o,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=i,l.EventEmitter=l,t.exports=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BarChart=void 0;var r=n(16),i=n(68),o=n(30),a=n(31),u=n(18);e.BarChart=r.generateCategoricalChart({chartName:"BarChart",GraphicalChild:i.Bar,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PieChart=void 0;var r=n(16),i=n(48),o=n(47),a=n(11),u=n(101);e.PieChart=r.generateCategoricalChart({chartName:"PieChart",GraphicalChild:u.Pie,eventType:"item",legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:i.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:o.PolarRadiusAxis}],formatAxisMap:a.formatAxisMap,defaultProps:{layout:"centric",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Treemap=void 0;var f=s(n(0)),h=c(n(10)),p=c(n(4)),d=c(n(3)),y=n(32),v=n(6),g=n(29),m=n(9),_=n(8),b=n(35),x=n(46),O=n(7),w=n(256),A=n(43),E=n(5),M=n(2),P=function t(e){var n,r=e.depth,i=e.node,a=e.index,u=e.valueKey,s=i.children,l=r+1,c=s&&s.length?s.map((function(e,n){return t({depth:l,node:e,index:n,valueKey:u})})):null;return n=s&&s.length?c.reduce((function(t,e){return t+e.value}),0):d.default.isNaN(i[u])||i[u]<=0?0:i[u],o(o({},i),{children:c,value:n,depth:r,index:a})},S=function(t,e,n){var r=e*e,i=t.area*t.area,o=t.reduce((function(t,e){return{min:Math.min(t.min,e.area),max:Math.max(t.max,e.area)}}),{min:1/0,max:0}),a=o.min,u=o.max;return i?Math.max(r*u*n/i,i/(r*a*n)):1/0},k=function(t,e,n,r){return e===n.width?function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.height)&&(i=n.height);for(var a,u=n.x,s=0,l=t.length;s<l;s++)(a=t[s]).x=u,a.y=n.y,a.height=i,a.width=Math.min(i?Math.round(a.area/i):0,n.x+n.width-u),u+=a.width;return a.z=!0,a.width+=n.x+n.width-u,o(o({},n),{y:n.y+i,height:n.height-i})}(t,e,n,r):function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.width)&&(i=n.width);for(var a,u=n.y,s=0,l=t.length;s<l;s++)(a=t[s]).x=n.x,a.y=u,a.width=i,a.height=Math.min(i?Math.round(a.area/i):0,n.y+n.height-u),u+=a.height;return a&&(a.z=!1,a.height+=n.y+n.height-u),o(o({},n),{x:n.x+i,width:n.width-i})}(t,e,n,r)},C=function t(e,n){var r=e.children;if(r&&r.length){var i=function(t){return{x:t.x,y:t.y,width:t.width,height:t.height}}(e),a=[],u=1/0,s=void 0,l=void 0,c=Math.min(i.width,i.height),f=function(t,e){var n=e<0?0:e;return t.map((function(t){var e=t.value*n;return o(o({},t),{area:d.default.isNaN(e)||e<=0?0:e})}))}(r,i.width*i.height/e.value),h=f.slice();for(a.area=0;h.length>0;)a.push(s=h[0]),a.area+=s.area,(l=S(a,c,n))<=u?(h.shift(),u=l):(a.area-=a.pop().area,i=k(a,c,i,!1),c=Math.min(i.width,i.height),a.length=a.area=0,u=1/0);return a.length&&(i=k(a,c,i,!0),a.length=a.area=0),o(o({},e),{children:f.map((function(e){return t(e,n)}))})}return e},j={isTooltipActive:!1,isAnimationFinished:!1,activeNode:null,formatRoot:null,currentRoot:null,nestIndex:[]},T=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state=o({},j),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){if(t.data!==e.prevData||t.type!==e.prevType||t.width!==e.prevWidth||t.height!==e.prevHeight||t.dataKey!==e.prevDataKey||t.aspectRatio!==e.prevAspectRatio){var n=P({depth:0,node:{children:t.data,x:0,y:0,width:t.width,height:t.height},index:0,valueKey:t.dataKey}),r=C(n,t.aspectRatio);return o(o({},j),{formatRoot:r,currentRoot:n,nestIndex:[n],prevAspectRatio:t.aspectRatio,prevData:t.data,prevWidth:t.width,prevHeight:t.height,prevDataKey:t.dataKey,prevType:t.type})}return null},e.prototype.handleMouseEnter=function(t,e){var n=this.props,r=n.onMouseEnter,i=n.children;m.findChildByType(i,b.Tooltip.displayName)?this.setState({isTooltipActive:!0,activeNode:t},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleMouseLeave=function(t,e){var n=this.props,r=n.onMouseLeave,i=n.children;m.findChildByType(i,b.Tooltip.displayName)?this.setState({isTooltipActive:!1,activeNode:null},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleClick=function(t){var e=this.props,n=e.onClick;if("nest"===e.type&&t.children){var r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=P({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=C(l,s),f=this.state.nestIndex;f.push(t),this.setState({formatRoot:c,currentRoot:l,nestIndex:f})}n&&n(t)},e.prototype.handleNestIndex=function(t,e){var n=this.state.nestIndex,r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=P({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=C(l,s);n=n.slice(0,e+1),this.setState({formatRoot:c,currentRoot:t,nestIndex:n})},e.prototype.renderItem=function(t,e,n){var r=this,i=this.props,a=i.isAnimationActive,u=i.animationBegin,s=i.animationDuration,l=i.animationEasing,c=i.isUpdateAnimationActive,p=i.type,d=i.animationId,y=i.colorPanel,g=this.state.isAnimationFinished,m=e.width,_=e.height,b=e.x,x=e.y,O=e.depth,w=parseInt(""+(2*Math.random()-1)*m,10),A={};return(n||"nest"===p)&&(A={onMouseEnter:this.handleMouseEnter.bind(this,e),onMouseLeave:this.handleMouseLeave.bind(this,e),onClick:this.handleClick.bind(this,e)}),a?f.default.createElement(h.default,{begin:u,duration:s,isActive:a,easing:l,key:"treemap-"+d,from:{x:b,y:x,width:m,height:_},to:{x:b,y:x,width:m,height:_},onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(n){var i=n.x,d=n.y,m=n.width,_=n.height;return f.default.createElement(h.default,{from:"translate("+w+"px, "+w+"px)",to:"translate(0, 0)",attributeName:"transform",begin:u,easing:l,isActive:a,duration:s},f.default.createElement(v.Layer,o({},A),O>2&&!g?null:r.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:a,isUpdateAnimationActive:!c,width:m,height:_,x:i,y:d}),p,y)))})):f.default.createElement(v.Layer,o({},A),this.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:!1,isUpdateAnimationActive:!1,width:m,height:_,x:b,y:x}),p,y))},e.renderContentItem=function(t,e,n,r){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(d.default.isFunction(t))return t(e);var i=e.x,a=e.y,u=e.width,s=e.height,l=e.index,c=null;u>10&&s>10&&e.children&&"nest"===n&&(c=f.default.createElement(x.Polygon,{points:[{x:i+2,y:a+s/2},{x:i+6,y:a+s/2+3},{x:i+2,y:a+s/2+6}]}));var h=null,p=A.getStringSize(e.name);u>20&&s>20&&p.width<u&&p.height<s&&(h=f.default.createElement("text",{x:i+8,y:a+s/2+7,fontSize:14},e.name));var y=r||w.COLOR_PANEL;return f.default.createElement("g",null,f.default.createElement(g.Rectangle,o({fill:e.depth<2?y[l%y.length]:"rgba(255,255,255,0)",stroke:"#fff"},d.default.omit(e,"children"))),c,h)},e.prototype.renderNode=function(t,e,n){var r=this,i=this.props,a=i.content,u=i.type,s=o(o(o({},M.filterProps(this.props)),e),{root:t}),l=!e.children||!e.children.length;return!(this.state.currentRoot.children||[]).filter((function(t){return t.depth===e.depth&&t.name===e.name})).length&&t.depth&&"nest"===u?null:f.default.createElement(v.Layer,{key:"recharts-treemap-node-"+n,className:"recharts-treemap-depth-"+e.depth},this.renderItem(a,s,l),e.children&&e.children.length?e.children.map((function(t,n){return r.renderNode(e,t,n)})):null)},e.prototype.renderAllNodes=function(){var t=this.state.formatRoot;return t?this.renderNode(t,t,0):null},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.nameKey,r=m.findChildByType(e,b.Tooltip.displayName);if(!r)return null;var i=this.props,o=i.width,a=i.height,u=i.dataKey,s=this.state,l=s.isTooltipActive,c=s.activeNode,h={x:0,y:0,width:o,height:a},p=c?{x:c.x+c.width/2,y:c.y+c.height/2}:null,d=l&&c?[{payload:c,name:O.getValueByDataKey(c,n,""),value:O.getValueByDataKey(c,u)}]:[];return f.default.cloneElement(r,{viewBox:h,active:l,coordinate:p,label:"",payload:d})},e.prototype.renderNestIndex=function(){var t=this,e=this.props,n=e.nameKey,r=e.nestIndexContent,i=this.state.nestIndex;return f.default.createElement("div",{className:"recharts-treemap-nest-index-wrapper",style:{marginTop:"8px",textAlign:"center"}},i.map((function(e,i){var o=d.default.get(e,n,"root"),a=null;return f.default.isValidElement(r)&&(a=f.default.cloneElement(r,e,i)),a=d.default.isFunction(r)?r(e,i):o,f.default.createElement("div",{onClick:t.handleNestIndex.bind(t,e,i),key:"nest-index-"+E.uniqueId(),className:"recharts-treemap-nest-index-box",style:{cursor:"pointer",display:"inline-block",padding:"0 7px",background:"#000",color:"#fff",marginRight:"3px"}},a)})))},e.prototype.render=function(){if(!m.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,a=t.children,u=t.type,s=l(t,["width","height","className","style","children","type"]),c=M.filterProps(s);return f.default.createElement("div",{className:p.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},f.default.createElement(y.Surface,o({},c,{width:e,height:"nest"===u?n-30:n}),this.renderAllNodes(),m.filterSvgElements(a)),this.renderTooltip(),"nest"===u&&this.renderNestIndex())},e.displayName="Treemap",e.defaultProps={aspectRatio:.5*(1+Math.sqrt(5)),dataKey:"value",type:"flat",isAnimationActive:!_.Global.isSsr,isUpdateAnimationActive:!_.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"linear"},e}(f.PureComponent);e.Treemap=T},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.COLOR_PANEL=void 0,e.COLOR_PANEL=["#1890FF","#66B5FF","#41D9C7","#2FC25B","#6EDB8F","#9AE65C","#FACC14","#E6965C","#57AD71","#223273","#738AE6","#7564CC","#8543E0","#A877ED","#5C8EE6","#13C2C2","#70E0E0","#5CA3E6","#3436C7","#8082FF","#DD81E6","#F04864","#FA7D92","#D598D9"]},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sankey=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(3)),d=n(32),y=n(6),v=n(35),g=n(29),m=n(44),_=n(9),b=n(7),x=n(2),O={x:0,y:0},w=function(t){return t.y+t.dy/2},A=function(t){return t&&t.value||0},E=function(t,e){return e.reduce((function(e,n){return e+A(t[n])}),0)},M=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.source];return n+w(o)*A(e[r])}),0)},P=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.target];return n+w(o)*A(e[r])}),0)},S=function(t,e){return t.y-e.y},k=function t(e,n){for(var r=n.targetNodes,i=0,o=r.length;i<o;i++){var a=e[r[i]];a&&(a.depth=Math.max(n.depth+1,a.depth),t(e,a))}},C=function(t,e,n){for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.length;o.sort(S);for(var u=0,s=0;s<a;s++){(c=u-(l=o[s]).y)>0&&(l.y+=c),u=l.y+l.dy+n}u=e+n;for(s=a-1;s>=0;s--){var l,c;if(!((c=(l=o[s]).y+l.dy+n-u)>0))break;l.y-=c,u=l.y}}},j=function(t,e,n,r){for(var i=0,o=e.length;i<o;i++)for(var a=e[i],u=0,s=a.length;u<s;u++){var l=a[u];if(l.sourceLinks.length){var c=E(n,l.sourceLinks),f=M(t,n,l.sourceLinks)/c;l.y+=(f-w(l))*r}}},T=function(t,e,n,r){for(var i=e.length-1;i>=0;i--)for(var o=e[i],a=0,u=o.length;a<u;a++){var s=o[a];if(s.targetLinks.length){var l=E(n,s.targetLinks),c=P(t,n,s.targetLinks)/l;s.y+=(c-w(s))*r}}},N=function(t){var e=t.data,n=t.width,r=t.height,i=t.iterations,a=t.nodeWidth,u=t.nodePadding,s=e.links,l=function(t,e,n){for(var r=t.nodes,i=t.links,a=r.map((function(t,e){var n=function(t,e){for(var n=[],r=[],i=[],o=[],a=0,u=t.length;a<u;a++){var s=t[a];s.source===e&&(i.push(s.target),o.push(a)),s.target===e&&(n.push(s.source),r.push(a))}return{sourceNodes:n,sourceLinks:r,targetLinks:o,targetNodes:i}}(i,e);return o(o(o({},t),n),{value:Math.max(E(i,n.sourceLinks),E(i,n.targetLinks)),depth:0})})),u=0,s=a.length;u<s;u++){(f=a[u]).sourceNodes.length||k(a,f)}var l=p.default.maxBy(a,(function(t){return t.depth})).depth;if(l>=1){var c=(e-n)/l;for(u=0,s=a.length;u<s;u++){var f;(f=a[u]).targetNodes.length||(f.depth=l),f.x=f.depth*c,f.dx=n}}return{tree:a,maxDepth:l}}(e,n,a).tree,c=function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e[i.depth]||(e[i.depth]=[]),e[i.depth].push(i)}return e}(l),f=function(t,e,n,r){for(var i=p.default.min(t.map((function(t){return(e-(t.length-1)*n)/p.default.sumBy(t,A)}))),a=0,u=t.length;a<u;a++)for(var s=0,l=t[a].length;s<l;s++){var c=t[a][s];c.y=s,c.dy=c.value*i}return r.map((function(t){return o(o({},t),{dy:A(t)*i})}))}(c,r,u,s);C(c,r,u);for(var h=1,d=1;d<=i;d++)T(l,c,f,h*=.99),C(c,r,u),j(l,c,f,h),C(c,r,u);return function(t,e){for(var n=0,r=t.length;n<r;n++){var i=t[n],o=0,a=0;i.targetLinks.sort((function(n,r){return t[e[n].target].y-t[e[r].target].y})),i.sourceLinks.sort((function(n,r){return t[e[n].source].y-t[e[r].source].y}));for(var u=0,s=i.targetLinks.length;u<s;u++){(c=e[i.targetLinks[u]])&&(c.sy=o,o+=c.dy)}u=0;for(var l=i.sourceLinks.length;u<l;u++){var c;(c=e[i.sourceLinks[u]])&&(c.ty=a,a+=c.dy)}}}(l,f),{nodes:l,links:f}},D=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:[],links:[]},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.width,i=t.height,o=t.margin,a=t.iterations,u=t.nodeWidth,s=t.nodePadding;if(n!==e.prevData||r!==e.prevWidth||i!==e.prevHeight||!m.shallowEqual(o,e.prevMargin)||a!==e.prevIterations||u!==e.prevNodeWidth||s!==e.prevNodePadding){var l=r-(o&&o.left||0)-(o&&o.right||0),c=i-(o&&o.top||0)-(o&&o.bottom||0),f=N({data:n,width:l,height:c,iterations:a,nodeWidth:u,nodePadding:s}),h=f.links;return{activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:f.nodes,links:h,prevData:n,prevWidth:a,prevHeight:i,prevMargin:o,prevNodePadding:s,prevNodeWidth:u,prevIterations:a}}return null},e.prototype.handleMouseEnter=function(t,e,n){var r=this.props,i=r.onMouseEnter,o=r.children;_.findChildByType(o,v.Tooltip.displayName)?this.setState({activeElement:t,activeElementType:e,isTooltipActive:!0},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleMouseLeave=function(t,e,n){var r=this.props,i=r.onMouseLeave,o=r.children;_.findChildByType(o,v.Tooltip.displayName)?this.setState({isTooltipActive:!1},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleClick=function(t,e,n){var r=this.props.onClick;r&&r(t,e,n)},e.renderLinkItem=function(t,e){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(p.default.isFunction(t))return t(e);var n=e.sourceX,r=e.sourceY,i=e.sourceControlX,a=e.targetX,u=e.targetY,s=e.targetControlX,c=e.linkWidth,h=l(e,["sourceX","sourceY","sourceControlX","targetX","targetY","targetControlX","linkWidth"]);return f.default.createElement("path",o({className:"recharts-sankey-link",d:"\n          M"+n+","+r+"\n          C"+i+","+r+" "+s+","+u+" "+a+","+u+"\n        ",fill:"none",stroke:"#333",strokeWidth:c,strokeOpacity:"0.2"},x.filterProps(h)))},e.prototype.renderLinks=function(t,e){var n=this,r=this.props,i=r.linkCurvature,a=r.link,u=r.margin,s=p.default.get(u,"top")||0,l=p.default.get(u,"left")||0;return f.default.createElement(y.Layer,{className:"recharts-sankey-links",key:"recharts-sankey-links"},t.map((function(t,r){var u,c,h=t.sy,p=t.ty,d=t.dy,v=e[t.source],g=e[t.target],m=v.x+v.dx+l,_=g.x+l,b=(c=_-(u=+m),function(t){return u+c*t}),O=b(i),w=b(1-i),A=v.y+h+d/2+s,E=g.y+p+d/2+s,M=o({sourceX:m,targetX:_,sourceY:A,targetY:E,sourceControlX:O,targetControlX:w,sourceRelativeY:h,targetRelativeY:p,linkWidth:d,index:r,payload:o(o({},t),{source:v,target:g})},x.filterProps(a)),P={onMouseEnter:n.handleMouseEnter.bind(n,M,"link"),onMouseLeave:n.handleMouseLeave.bind(n,M,"link"),onClick:n.handleClick.bind(n,M,"link")};return f.default.createElement(y.Layer,o({key:"link"+r},P),n.constructor.renderLinkItem(a,M))})))},e.renderNodeItem=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):p.default.isFunction(t)?t(e):f.default.createElement(g.Rectangle,o({className:"recharts-sankey-node",fill:"#0088fe",fillOpacity:"0.8"},x.filterProps(e)))},e.prototype.renderNodes=function(t){var e=this,n=this.props,r=n.node,i=n.margin,a=p.default.get(i,"top")||0,u=p.default.get(i,"left")||0;return f.default.createElement(y.Layer,{className:"recharts-sankey-nodes",key:"recharts-sankey-nodes"},t.map((function(t,n){var i=t.x,s=t.y,l=t.dx,c=t.dy,h=o(o({},x.filterProps(r)),{x:i+u,y:s+a,width:l,height:c,index:n,payload:t}),p={onMouseEnter:e.handleMouseEnter.bind(e,h,"node"),onMouseLeave:e.handleMouseLeave.bind(e,h,"node"),onClick:e.handleClick.bind(e,h,"node")};return f.default.createElement(y.Layer,o({key:"node"+n},p),e.constructor.renderNodeItem(r,h))})))},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.width,r=t.height,i=t.nameKey,o=_.findChildByType(e,v.Tooltip.displayName);if(!o)return null;var a,u=this.state,s=u.isTooltipActive,l=u.activeElement,c=u.activeElementType,h={x:0,y:0,width:n,height:r},p=l?(a=l,"node"===c?{x:a.x+a.width/2,y:a.y+a.height/2}:{x:(a.sourceX+a.targetX)/2,y:(a.sourceY+a.targetY)/2}):O,d=l?function(t,e,n){var r=t.payload;return"node"===e?[{payload:t,name:b.getValueByDataKey(r,n,""),value:b.getValueByDataKey(r,"value")}]:r.source&&r.target?[{payload:t,name:b.getValueByDataKey(r.source,n,"")+" - "+b.getValueByDataKey(r.target,n,""),value:b.getValueByDataKey(r,"value")}]:[]}(l,c,i):[];return f.default.cloneElement(o,{viewBox:h,active:s,coordinate:p,label:"",payload:d})},e.prototype.render=function(){if(!_.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,a=t.children,u=l(t,["width","height","className","style","children"]),s=this.state,c=s.links,p=s.nodes,y=x.filterProps(u);return f.default.createElement("div",{className:h.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},f.default.createElement(d.Surface,o({},y,{width:e,height:n}),_.filterSvgElements(a),this.renderLinks(c,p),this.renderNodes(p)),this.renderTooltip())},e.displayName="Sankey",e.defaultProps={nameKey:"name",dataKey:"value",nodePadding:10,nodeWidth:10,linkCurvature:.5,iterations:32,margin:{top:5,right:5,bottom:5,left:5}},e}(f.PureComponent);e.Sankey=D},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RadarChart=void 0;var r=n(16),i=n(102),o=n(48),a=n(47),u=n(11);e.RadarChart=r.generateCategoricalChart({chartName:"RadarChart",GraphicalChild:i.Radar,axisComponents:[{axisType:"angleAxis",AxisComp:o.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:a.PolarRadiusAxis}],formatAxisMap:u.formatAxisMap,defaultProps:{layout:"centric",startAngle:90,endAngle:-270,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ScatterChart=void 0;var r=n(16),i=n(69),o=n(30),a=n(31),u=n(51),s=n(18);e.ScatterChart=r.generateCategoricalChart({chartName:"ScatterChart",GraphicalChild:i.Scatter,eventType:"single",axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis},{axisType:"zAxis",AxisComp:u.ZAxis}],formatAxisMap:s.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AreaChart=void 0;var r=n(16),i=n(67),o=n(30),a=n(31),u=n(18);e.AreaChart=r.generateCategoricalChart({chartName:"AreaChart",GraphicalChild:i.Area,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RadialBarChart=void 0;var r=n(16),i=n(48),o=n(47),a=n(11),u=n(103);e.RadialBarChart=r.generateCategoricalChart({chartName:"RadialBarChart",GraphicalChild:u.RadialBar,legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:i.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:o.PolarRadiusAxis}],formatAxisMap:a.formatAxisMap,defaultProps:{layout:"radial",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ComposedChart=void 0;var r=n(16),i=n(67),o=n(68),a=n(66),u=n(69),s=n(30),l=n(31),c=n(51),f=n(18);e.ComposedChart=r.generateCategoricalChart({chartName:"ComposedChart",GraphicalChild:[a.Line,i.Area,o.Bar,u.Scatter],axisComponents:[{axisType:"xAxis",AxisComp:s.XAxis},{axisType:"yAxis",AxisComp:l.YAxis},{axisType:"zAxis",AxisComp:c.ZAxis}],formatAxisMap:f.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FunnelChart=void 0;var r=n(16),i=n(109);e.FunnelChart=r.generateCategoricalChart({chartName:"FunnelChart",GraphicalChild:i.Funnel,eventType:"item",axisComponents:[],defaultProps:{layout:"centric"}})},function(t,e,n){"use strict";n.r(e),n.d(e,"withResizeDetector",(function(){return F}));var r=n(0),i=n.n(r),o=n(52),a=n(115),u=function(t){var e=[],n=null,r=function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];e=i,n||(n=requestAnimationFrame((function(){n=null,t.apply(void 0,e)})))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r},s=n(71),l=n.n(s),c=n(116),f=n.n(c),h={debounce:l.a,throttle:f.a},p=function(t){return"function"==typeof t},d=function(){return"undefined"==typeof window},y=function(t){return t instanceof Element||t instanceof HTMLDocument};function v(t){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function b(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=w(t);if(e){var i=w(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return x(this,n)}}function x(t,e){return!e||"object"!==v(e)&&"function"!=typeof e?O(t):e}function O(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function w(t){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function A(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}(c,t);var e,n,s,l=b(c);function c(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),A(O(e=l.call(this,t)),"cancelHandler",(function(){e.resizeHandler&&e.resizeHandler.cancel&&(e.resizeHandler.cancel(),e.resizeHandler=null)})),A(O(e),"rafClean",(function(){e.raf&&e.raf.cancel&&(e.raf.cancel(),e.raf=null)})),A(O(e),"attachObserver",(function(){var t=e.props.targetRef;t&&t.current&&(e.targetRef.current=t.current);var n=e.getElement();n&&(e.observableElement&&e.observableElement===n||(e.observableElement=n,e.resizeObserver.observe(n)))})),A(O(e),"getElement",(function(){var t=e.props,n=t.querySelector,r=t.targetDomEl;if(!d()){if(n)return document.querySelector(n);if(r&&y(r))return r;if(e.targetRef&&y(e.targetRef.current))return e.targetRef.current;var i=Object(o.findDOMNode)(O(e));if(i)switch(e.getRenderType()){case"renderProp":case"childFunction":case"child":case"childArray":return i;default:return i.parentElement}}})),A(O(e),"createUpdater",(function(){return e.rafClean(),e.raf=u((function(t){var n=t.width,r=t.height,i=e.props.onResize;p(i)&&i(n,r),e.setState({width:n,height:r})})),e.raf})),A(O(e),"createResizeHandler",(function(t){var n=e.state,r=n.width,i=n.height,o=e.props,a=o.handleWidth,u=o.handleHeight;if(a||u){var s=e.createUpdater();t.forEach((function(t){var n=t&&t.contentRect||{},o=n.width,l=n.height,c=a&&r!==o||u&&i!==l;!e.skipOnMount&&c&&!d()&&s({width:o,height:l}),e.skipOnMount=!1}))}})),A(O(e),"getRenderType",(function(){var t=e.props,n=t.render,i=t.children;return p(n)?"renderProp":p(i)?"childFunction":Object(r.isValidElement)(i)?"child":Array.isArray(i)?"childArray":"parent"}));var n=t.skipOnMount,i=t.refreshMode,s=t.refreshRate,f=t.refreshOptions;e.state={width:void 0,height:void 0},e.skipOnMount=n,e.raf=null,e.unmounted=!1,e.targetRef=Object(r.createRef)(),e.observableElement=null;var v=h[i];return e.resizeHandler=v?v(e.createResizeHandler,s,f):e.createResizeHandler,e.resizeObserver=new a.a(e.resizeHandler),e}return e=c,(n=[{key:"componentDidMount",value:function(){this.attachObserver()}},{key:"componentDidUpdate",value:function(){this.attachObserver()}},{key:"componentWillUnmount",value:function(){this.resizeObserver.disconnect(),this.rafClean(),this.cancelHandler(),this.unmounted=!0}},{key:"render",value:function(){var t=this.props,e=t.render,n=t.children,o=t.nodeType,a=this.state,u={width:a.width,height:a.height,targetRef:this.targetRef};switch(this.getRenderType()){case"renderProp":return e(u);case"childFunction":return n(u);case"child":if("string"==typeof n.type){var s=g(u,["targetRef"]);return Object(r.cloneElement)(n,s)}return Object(r.cloneElement)(n,u);case"childArray":return n.map((function(t){return!!t&&Object(r.cloneElement)(t,u)}));default:return i.a.createElement(o,null)}}}])&&m(e.prototype,n),s&&m(e,s),c}(r.PureComponent);E.defaultProps={handleWidth:!0,handleHeight:!0,skipOnMount:!1,refreshRate:1e3,refreshMode:void 0,refreshOptions:void 0,querySelector:null,targetDomEl:null,targetRef:null,onResize:null,render:void 0,children:null,nodeType:"div"};var M=E;function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function S(){return(S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function k(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function C(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function T(t,e,n){return e&&j(t.prototype,e),n&&j(t,n),t}function N(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&D(t,e)}function D(t,e){return(D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function I(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=B(t);if(e){var i=B(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return L(this,n)}}function L(t,e){return!e||"object"!==P(e)&&"function"!=typeof e?R(t):e}function R(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function B(t){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function z(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var F=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{handleWidth:!0,handleHeight:!0},n=function(n){N(a,n);var o=I(a);function a(){var t;C(this,a);for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];return z(R(t=o.call.apply(o,[this].concat(n))),"ref",Object(r.createRef)()),t}return T(a,[{key:"render",value:function(){var n=this.props,r=n.forwardedRef,o=k(n,["forwardedRef"]),a=r||this.ref;return i.a.createElement(M,S({},e,{targetRef:a}),i.a.createElement(t,S({targetRef:a},o)))}}]),a}(i.a.Component);function o(t,e){return i.a.createElement(n,S({},t,{forwardedRef:e}))}var a=t.displayName||t.name;return o.displayName="withResizeDetector(".concat(a,")"),n.defaultProps={forwardedRef:void 0},Object(r.forwardRef)(o)};e.default=M}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWNoYXJ0cy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vUmVjaGFydHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvZXh0ZXJuYWwge1wicm9vdFwiOlwiUmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcImNvbW1vbmpzXCI6XCJyZWFjdFwiLFwiYW1kXCI6XCJyZWFjdFwifSIsIndlYnBhY2s6Ly9SZWNoYXJ0cy9leHRlcm5hbCB7XCJyb290XCI6XCJQcm9wVHlwZXNcIixcImNvbW1vbmpzMlwiOlwicHJvcC10eXBlc1wiLFwiY29tbW9uanNcIjpcInByb3AtdHlwZXNcIixcImFtZFwiOlwicHJvcC10eXBlc1wifSIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL3R5cGVzLnRzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL0RhdGFVdGlscy50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jb250YWluZXIvTGF5ZXIudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3V0aWwvQ2hhcnRVdGlscy50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL0dsb2JhbC50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL1JlYWN0VXRpbHMudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc21vb3RoL2VzNi9zZXRSYWZUaW1lb3V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvQW5pbWF0ZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc21vb3RoL2VzNi91dGlsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvZWFzaW5nLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvY29uZmlnVXBkYXRlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvQW5pbWF0ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbW9vdGgvZXM2L0FuaW1hdGVHcm91cENoaWxkLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvQW5pbWF0ZUdyb3VwLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNtb290aC9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvdXRpbC9Qb2xhclV0aWxzLnRzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jb21wb25lbnQvTGFiZWxMaXN0LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jaGFydC9nZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NvbXBvbmVudC9MYWJlbC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvdXRpbC9DYXJ0ZXNpYW5VdGlscy50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yYWYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jb21wb25lbnQvVGV4dC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvc2hhcGUvRG90LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3V0aWwvTG9nVXRpbHMudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY29tcG9uZW50L0NlbGwudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3NoYXBlL0N1cnZlLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9zaGFwZS9SZWN0YW5nbGUudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NhcnRlc2lhbi9YQXhpcy50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2FydGVzaWFuL1lBeGlzLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jb250YWluZXIvU3VyZmFjZS50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NvbXBvbmVudC9Ub29sdGlwLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvdXRpbC9ET01VdGlscy50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL1NoYWxsb3dFcXVhbC50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9zaGFwZS9TZWN0b3IudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3NoYXBlL1BvbHlnb24udHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3BvbGFyL1BvbGFyUmFkaXVzQXhpcy50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvcG9sYXIvUG9sYXJBbmdsZUF4aXMudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3V0aWwvSWZPdmVyZmxvd01hdGNoZXMudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2FydGVzaWFuL0Vycm9yQmFyLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jYXJ0ZXNpYW4vWkF4aXMudHN4Iiwid2VicGFjazovL1JlY2hhcnRzL2V4dGVybmFsIHtcInJvb3RcIjpcIlJlYWN0RE9NXCIsXCJjb21tb25qczJcIjpcInJlYWN0LWRvbVwiLFwiY29tbW9uanNcIjpcInJlYWN0LWRvbVwiLFwiYW1kXCI6XCJyZWFjdC1kb21cIn0iLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY29tcG9uZW50L0xlZ2VuZC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvc2hhcGUvU3ltYm9scy50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jYXJ0ZXNpYW4vTGluZS50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2FydGVzaWFuL0FyZWEudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NhcnRlc2lhbi9CYXIudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NhcnRlc2lhbi9TY2F0dGVyLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJjLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BpZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvcmFkaWFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lUmFkaWFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhUmFkaWFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludFJhZGlhbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluay9pbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2Nyb3NzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvZGlhbW9uZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3N0YXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC90cmlhbmdsZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3d5ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9ub29wLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzT3Blbi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYnVuZGxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsT3Blbi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbUNsb3NlZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbU9wZW4uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhckNsb3NlZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL25hdHVyYWwuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3N0ZXAuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9ub25lLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9ub25lLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zdGFjay5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L2V4cGFuZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L2RpdmVyZ2luZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L3NpbGhvdWV0dGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC93aWdnbGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FwcGVhcmFuY2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvaW5zaWRlT3V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9yZXZlcnNlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlZHVjZS1jc3MtY2FsYy9kaXN0L2xpYi9yZWR1Y2VyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2RlY2ltYWwuanMtbGlnaHQvZGVjaW1hbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWNoYXJ0cy1zY2FsZS9saWIvdXRpbC91dGlscy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9zaGFwZS9Dcm9zcy50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvcG9sYXIvUGllLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9wb2xhci9SYWRhci50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvcG9sYXIvUmFkaWFsQmFyLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jYXJ0ZXNpYW4vQnJ1c2gudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NhcnRlc2lhbi9SZWZlcmVuY2VMaW5lLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jYXJ0ZXNpYW4vUmVmZXJlbmNlRG90LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jYXJ0ZXNpYW4vUmVmZXJlbmNlQXJlYS50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2FydGVzaWFuL0NhcnRlc2lhbkF4aXMudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL251bWJlckF4aXMvRnVubmVsLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9zaGFwZS9UcmFwZXpvaWQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvb3JkaW5hbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXJBcnJheS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL25pY2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xvZy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc3ltbG9nLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9wb3cuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1aWNrc2VsZWN0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWFudGlsZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aHJlc2hvbGQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjWWVhci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aW1lLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy91dGNUaW1lLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsUXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvZGl2ZXJnaW5nLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VxdWFsLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwvZGlzdC9SZXNpemVPYnNlcnZlci5lcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY29tcG9uZW50L0RlZmF1bHRMZWdlbmRDb250ZW50LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3BlcmZvcm1hbmNlLW5vdy9saWIvcGVyZm9ybWFuY2Utbm93LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmluZEluZGV4LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmFOLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaWN0SW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXNXaXRoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbHRlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvck93bi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hdGNoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9oYXNDbGFzcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1JlcGxhY2VUcmFuc2l0aW9uLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NvbXBvbmVudC9EZWZhdWx0VG9vbHRpcENvbnRlbnQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NvbXBvbmVudC9SZXNwb25zaXZlQ29udGFpbmVyLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3BhcnNlLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtdmFsdWUtcGFyc2VyL2xpYi93YWxrLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtdmFsdWUtcGFyc2VyL2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3VuaXQuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVkdWNlLWNzcy1jYWxjL2Rpc3QvcGFyc2VyLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlZHVjZS1jc3MtY2FsYy9kaXN0L2xpYi9jb252ZXJ0LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL2Nzcy11bml0LWNvbnZlcnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvc3RyaW5naWZpZXIuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVjaGFydHMtc2NhbGUvbGliL2luZGV4LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlY2hhcnRzLXNjYWxlL2xpYi9nZXROaWNlVGlja1ZhbHVlcy5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWNoYXJ0cy1zY2FsZS9saWIvdXRpbC9hcml0aG1ldGljLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NvbXBvbmVudC9DdXN0b21pemVkLnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9wb2xhci9Qb2xhckdyaWQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL3V0aWwvQ3NzUHJlZml4VXRpbHMudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2FydGVzaWFuL0NhcnRlc2lhbkdyaWQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NoYXJ0L0xpbmVDaGFydC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvdXRpbC9EZXRlY3RSZWZlcmVuY2VFbGVtZW50c0RvbWFpbi50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy91dGlsL0V2ZW50cy50cyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NoYXJ0L0JhckNoYXJ0LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jaGFydC9QaWVDaGFydC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2hhcnQvVHJlZW1hcC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvdXRpbC9Db25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2hhcnQvU2Fua2V5LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jaGFydC9SYWRhckNoYXJ0LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL3NyYy9jaGFydC9TY2F0dGVyQ2hhcnQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NoYXJ0L0FyZWFDaGFydC50c3giLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9zcmMvY2hhcnQvUmFkaWFsQmFyQ2hhcnQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NoYXJ0L0NvbXBvc2VkQ2hhcnQudHN4Iiwid2VicGFjazovL1JlY2hhcnRzLy4vc3JjL2NoYXJ0L0Z1bm5lbENoYXJ0LnRzeCIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yYWYtc2NoZC9kaXN0L3JhZi1zY2hkLmVzbS5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNpemUtZGV0ZWN0b3IvbGliL2VzbS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vUmVjaGFydHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzaXplLWRldGVjdG9yL2xpYi9lc20vY29tcG9uZW50cy9SZXNpemVEZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly9SZWNoYXJ0cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNpemUtZGV0ZWN0b3IvbGliL2VzbS9ob2Mvd2l0aFJlc2l6ZURldGVjdG9yLmpzIiwid2VicGFjazovL1JlY2hhcnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc2l6ZS1kZXRlY3Rvci9saWIvZXNtL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181Ml9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlNWR0NvbnRhaW5lclByb3BLZXlzIiwiU1ZHRWxlbWVudFByb3BLZXlzIiwiRXZlbnRLZXlzIiwiZmlsdGVyUHJvcHMiLCJwcm9wcyIsImluY2x1ZGVFdmVudHMiLCJpc1N2ZyIsImlucHV0UHJvcHMiLCJpc1ZhbGlkRWxlbWVudCIsImlzT2JqZWN0Iiwib3V0Iiwia2V5cyIsImZvckVhY2giLCJpbmNsdWRlcyIsImFkYXB0RXZlbnRIYW5kbGVycyIsIm5ld0hhbmRsZXIiLCJlIiwiYWRhcHRFdmVudHNPZkNoaWxkIiwiZGF0YSIsImluZGV4IiwiaXRlbSIsIm9yaWdpbmFsSGFuZGxlciIsImdldEV2ZW50SGFuZGxlck9mQ2hpbGQiLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFwcGx5IiwiZnVuYyIsInRoaXNBcmciLCJhcmdzIiwibGVuZ3RoIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiQXJyYXkiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwidW5kZWZpbmVkIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiY291bnRIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJtYXAiLCJzaXplIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsInNwbGl0IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIkVycm9yIiwiTWF0aCIsIlN0cmluZyIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJ0b1N0cmluZyIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsInJlcGxhY2UiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3BsaWNlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJtaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXkiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJ0aGlzIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJwdXNoIiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0IiwicGF0aHMiLCJza2lwIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsInBvcCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJkZXB0aCIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsInNvcnQiLCJiYXNlU29ydEJ5Iiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsIm9yZGVyIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImluZGV4T2YiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIk1BWF9BUlJBWV9MRU5HVEgiLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsInNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJvbGRBcnJheSIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25jYXQiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmlsdGVyIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlbW92ZSIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwidGFyZ2V0IiwicG9zaXRpb24iLCJlc2NhcGUiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmFOIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImFyZ1R5cGUiLCJpbm5lciIsImRlZmF1bHQiLCJtYXRoU2lnbiIsImlzUGVyY2VudCIsImlzTnVtT3JTdHIiLCJnZXRQZXJjZW50VmFsdWUiLCJwZXJjZW50IiwidG90YWxWYWx1ZSIsInZhbGlkYXRlIiwiZ2V0QW55RWxlbWVudE9mT2JqZWN0Iiwib2JqIiwiaGFzRHVwbGljYXRlIiwibGVuIiwiaW50ZXJwb2xhdGVOdW1iZXIiLCJudW1iZXJBIiwibnVtYmVyQiIsInNwZWNpZmllZEtleSIsInNwZWNpZmllZFZhbHVlIiwiZ2V0TGluZWFyUmVncmVzc2lvbiIsInhzdW0iLCJ5c3VtIiwieHlzdW0iLCJ4eHN1bSIsInhtaW4iLCJ4bWF4IiwiY3giLCJjeSIsImEiLCJiIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJvdGhlcnMiLCJsYXllckNsYXNzIiwiZ2V0VmFsdWVCeURhdGFLZXkiLCJkYXRhS2V5IiwiZ2V0RG9tYWluT2ZEYXRhQnlLZXkiLCJmaWx0ZXJOaWwiLCJmbGF0dGVuRGF0YSIsImRvbWFpbiIsImNhbGN1bGF0ZUFjdGl2ZVRpY2tJbmRleCIsImNvb3JkaW5hdGUiLCJ0aWNrcyIsInVuc29ydGVkVGlja3MiLCJheGlzIiwiYXhpc1R5cGUiLCJhYnMiLCJjdXIiLCJzYW1lRGlyZWN0aW9uQ29vcmQiLCJkaWZmSW50ZXJ2YWwiLCJjdXJJblJhbmdlIiwiYWZ0ZXJJblJhbmdlIiwic2FtZUludGVydmFsIiwiZ2V0TWFpbkNvbG9yT2ZHcmFwaGljSXRlbSIsImRpc3BsYXlOYW1lIiwic3Ryb2tlIiwiZ2V0TGVnZW5kUHJvcHMiLCJsZWdlbmREYXRhIiwiZm9ybWF0ZWRHcmFwaGljYWxJdGVtcyIsImxlZ2VuZFdpZHRoIiwibGVnZW5kQ29udGVudCIsImxlZ2VuZEl0ZW0iLCJmaW5kQ2hpbGRCeVR5cGUiLCJMZWdlbmQiLCJwYXlsb2FkIiwic2VjdG9ycyIsImljb25UeXBlIiwibGVnZW5kVHlwZSIsImNvbG9yIiwiaW5hY3RpdmUiLCJnZXRXaXRoSGVpZ2h0IiwiZ2V0QmFyU2l6ZUxpc3QiLCJnbG9iYWxTaXplIiwic3RhY2tHcm91cHMiLCJudW1lcmljQXhpc0lkcyIsInNncyIsInN0YWNrSWRzIiwiaiIsInNMZW4iLCJpdGVtcyIsImNhdGVBeGlzSWQiLCJiYXJJdGVtcyIsImdldERpc3BsYXlOYW1lIiwic2VsZlNpemUiLCJjYXRlSWQiLCJzdGFja0xpc3QiLCJiYXJTaXplIiwiZ2V0QmFyUG9zaXRpb24iLCJiYXJHYXAiLCJiYXJDYXRlZ29yeUdhcCIsImJhbmRTaXplIiwic2l6ZUxpc3QiLCJtYXhCYXJTaXplIiwicmVhbEJhckdhcCIsInJlcyIsIm5ld1JlcyIsImFwcGVuZE9mZnNldE9mTGVnZW5kIiwibGVnZW5kQm94Iiwid2lkdGgiLCJtYXJnaW4iLCJsZWZ0IiwicmlnaHQiLCJsZWdlbmRQcm9wcyIsIm5ld09mZnNldCIsImJveCIsImFsaWduIiwidmVydGljYWxBbGlnbiIsImxheW91dCIsImhlaWdodCIsImdldERvbWFpbk9mRXJyb3JCYXJzIiwiZXJyb3JCYXJzIiwiZmluZEFsbEJ5VHlwZSIsImVycm9yQmFyQ2hpbGQiLCJkaXJlY3Rpb24iLCJlbnRyeVZhbHVlIiwibWFpblZhbHVlIiwiZXJyb3JEb21haW4iLCJwcmV2RXJyb3JBcnIiLCJrIiwiZXJyb3JWYWx1ZSIsImxvd2VyVmFsdWUiLCJ1cHBlclZhbHVlIiwicGFyc2VFcnJvckJhcnNPZkF4aXMiLCJkb21haW5zIiwiZ2V0RG9tYWluT2ZJdGVtc1dpdGhTYW1lQXhpcyIsImlzQ2F0ZWdvcmljYWxBeGlzIiwiZ2V0Q29vcmRpbmF0ZXNPZkdyaWQiLCJoYXNNaW4iLCJoYXNNYXgiLCJnZXRUaWNrc09mQXhpcyIsImlzR3JpZCIsImlzQWxsIiwic2NhbGUiLCJkdXBsaWNhdGVEb21haW4iLCJiYW5kd2lkdGgiLCJuaWNlVGlja3MiLCJzY2FsZUNvbnRlbnQiLCJpc0NhdGVnb3JpY2FsIiwiY2F0ZWdvcmljYWxEb21haW4iLCJ0aWNrQ291bnQiLCJjb21iaW5lRXZlbnRIYW5kbGVycyIsImRlZmF1bHRIYW5kbGVyIiwicGFyZW50SGFuZGxlciIsImNoaWxkSGFuZGxlciIsImN1c3RvbWl6ZWRIYW5kbGVyIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYXJnNCIsInBhcnNlU2NhbGUiLCJjaGFydFR5cGUiLCJkM1NjYWxlcyIsInNjYWxlQmFuZCIsInJlYWxTY2FsZVR5cGUiLCJzY2FsZUxpbmVhciIsInNjYWxlUG9pbnQiLCJjaGVja0RvbWFpbk9mU2NhbGUiLCJmaW5kUG9zaXRpb25PZkJhciIsImJhclBvc2l0aW9uIiwiY2hpbGQiLCJ0cnVuY2F0ZUJ5RG9tYWluIiwib2Zmc2V0U2lnbiIsInNlcmllcyIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJvZmZzZXRQb3NpdGl2ZSIsIlNUQUNLX09GRlNFVF9NQVAiLCJzaWduIiwiZXhwYW5kIiwic3RhY2tPZmZzZXRFeHBhbmQiLCJub25lIiwic3RhY2tPZmZzZXROb25lIiwic2lsaG91ZXR0ZSIsInN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSIsIndpZ2dsZSIsInN0YWNrT2Zmc2V0V2lnZ2xlIiwiZ2V0U3RhY2tlZERhdGEiLCJzdGFja0l0ZW1zIiwib2Zmc2V0VHlwZSIsImRhdGFLZXlzIiwic3RhY2tPcmRlck5vbmUiLCJnZXRTdGFja0dyb3Vwc0J5QXhpc0lkIiwiX2l0ZW1zIiwibnVtZXJpY0F4aXNJZCIsInJldmVyc2VTdGFja09yZGVyIiwic3RhY2tJZCIsImF4aXNJZCIsInBhcmVudEdyb3VwIiwiaGFzU3RhY2siLCJjaGlsZEdyb3VwIiwiZyIsInN0YWNrZWREYXRhIiwiY2FsY3VsYXRlRG9tYWluT2ZUaWNrcyIsImdldFRpY2tzT2ZTY2FsZSIsIm9wdHMiLCJvcmlnaW5hbERvbWFpbiIsImFsbG93RGVjaW1hbHMiLCJzY2FsZVR5cGUiLCJ0aWNrVmFsdWVzIiwiZ2V0TmljZVRpY2tWYWx1ZXMiLCJnZXRUaWNrVmFsdWVzRml4ZWREb21haW4iLCJnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSIsImFsbG93RHVwbGljYXRlZENhdGVnb3J5IiwibWF0Y2hlZFRpY2siLCJmaW5kRW50cnlJbkFycmF5IiwiZ2V0Q2F0ZUNvb3JkaW5hdGVPZkJhciIsImdldEJhc2VWYWx1ZU9mQmFyIiwibnVtZXJpY0F4aXMiLCJnZXRTdGFja2VkRGF0YU9mSXRlbSIsIml0ZW1JbmRleCIsImdldERvbWFpbk9mU3RhY2tHcm91cHMiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJNSU5fVkFMVUVfUkVHIiwiTUFYX1ZBTFVFX1JFRyIsInBhcnNlU3BlY2lmaWVkRG9tYWluIiwic3BlY2lmaWVkRG9tYWluIiwiZGF0YURvbWFpbiIsImFsbG93RGF0YU92ZXJmbG93IiwiZ2V0QmFuZFNpemVPZkF4aXMiLCJpc0JhciIsImJhbmRXaWR0aCIsIm9yZGVyZWRUaWNrcyIsInByZXYiLCJwYXJzZURvbWFpbk9mQ2F0ZWdvcnlBeGlzIiwiY2FsY3VsYXRlZERvbWFpbiIsImF4aXNDaGlsZCIsIkdsb2JhbCIsImlzU3NyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiUkVBQ1RfQlJPV1NFUl9FVkVOVF9NQVAiLCJjbGljayIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJtb3VzZW92ZXIiLCJtb3VzZW1vdmUiLCJtb3VzZW91dCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwidG91Y2hjYW5jZWwiLCJ0b3VjaGVuZCIsInRvdWNobW92ZSIsInRvdWNoc3RhcnQiLCJTQ0FMRV9UWVBFUyIsIkxFR0VORF9UWVBFUyIsIlRPT0xUSVBfVFlQRVMiLCJDb21wIiwiQ2hpbGRyZW4iLCJjaGlsZFR5cGUiLCJ3aXRob3V0VHlwZSIsIm5ld0NoaWxkcmVuIiwidmFsaWRhdGVXaWR0aEhlaWdodCIsImVsIiwiU1ZHX1RBR1MiLCJpc1N2Z0VsZW1lbnQiLCJmaWx0ZXJTdmdFbGVtZW50cyIsInN2Z0VsZW1lbnRzIiwiaXNDaGlsZHJlbkVxdWFsIiwibmV4dENoaWxkcmVuIiwicHJldkNoaWxkcmVuIiwiaXNTaW5nbGVDaGlsZEVxdWFsIiwibmV4dENoaWxkIiwicHJldkNoaWxkIiwibmV4dFByb3BzIiwicHJldlByb3BzIiwic2hhbGxvd0VxdWFsIiwicmVuZGVyQnlPcmRlciIsInJlbmRlck1hcCIsImVsZW1lbnRzIiwicmVjb3JkIiwiaGFuZGxlciIsInJlc3VsdHMiLCJnZXRSZWFjdEV2ZW50QnlUeXBlIiwicGFyc2VDaGlsZEluZGV4Iiwic2V0UmFmVGltZW91dCIsInRpbWVvdXQiLCJjdXJyVGltZSIsInNob3VsZFVwZGF0ZSIsIl90eXBlb2YiLCJfdG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIml0ZXIiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJjcmVhdGVBbmltYXRlTWFuYWdlciIsImhhbmRsZUNoYW5nZSIsInNob3VsZFN0b3AiLCJzdG9wIiwic3R5bGUiLCJzZXRTdHlsZSIsIl9zdHlsZSIsIl9zdHlsZXMiLCJjdXJyIiwicmVzdFN0eWxlcyIsInN1YnNjcmliZSIsIl9oYW5kbGVDaGFuZ2UiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiUFJFRklYX0xJU1QiLCJJTl9MSU5FX1BSRUZJWF9MSVNUIiwiSU5fQ09NUEFUSUJMRV9QUk9QRVJUWSIsInBhcmFtIiwibWFwT2JqZWN0IiwidHJhbnNsYXRlU3R5bGUiLCJpc1RyYW5zaXRpb24iLCJjYW1lbE5hbWUiLCJ2Iiwic3R5bGVWYWwiLCJnZW5lcmF0ZVByZWZpeFN0eWxlIiwiZ2V0VHJhbnNpdGlvblZhbCIsImR1cmF0aW9uIiwiZWFzaW5nIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJjdWJpY0JlemllckZhY3RvciIsImMxIiwiYzIiLCJtdWx0eVRpbWUiLCJwYXJhbXMiLCJwb3ciLCJwcmUiLCJjdWJpY0JlemllciIsImRlcml2YXRpdmVDdWJpY0JlemllciIsIm5ld1BhcmFtcyIsIl9sZW4iLCJfa2V5IiwieDEiLCJ5MSIsIngyIiwieTIiLCJfZWFzaW5nJDEkc3BsaXQkMCRzcGwiLCJ4IiwiX2Vhc2luZyQxJHNwbGl0JDAkc3BsMiIsIm51bSIsImN1cnZlWCIsImN1cnZlWSIsImRlckN1cnZlWCIsInJhbmdlVmFsdWUiLCJiZXppZXIiLCJfdCIsImV2YWxUIiwiZGVyVmFsIiwiaXNTdGVwcGVyIiwiY29uZmlnU3ByaW5nIiwiY29uZmlnIiwiX2NvbmZpZyRzdGlmZiIsInN0aWZmIiwiX2NvbmZpZyRkYW1waW5nIiwiZGFtcGluZyIsIl9jb25maWckZHQiLCJkdCIsInN0ZXBwZXIiLCJjdXJyWCIsImRlc3RYIiwiY3VyclYiLCJuZXdWIiwibmV3WCIsImFscGhhIiwiYmVnaW4iLCJuZWVkQ29udGludWUiLCJfcmVmIiwidG8iLCJwcmVPYmoiLCJuZXh0T2JqIiwicHJlVGltZSIsImJlZ2luVGltZSIsImludGVyS2V5cyIsInRpbWluZ1N0eWxlIiwic3RlcHBlclN0eWxlIiwidmVsb2NpdHkiLCJjYWZJZCIsInN0ZXBzIiwiY2FsU3RlcHBlclZhbHMiLCJwcmVWYWxzIiwibmV4dFN0ZXBWYWxzIiwidmFsIiwiX2Vhc2luZzIiLCJyZW5kZXIiLCJjdXJyU3R5bGUiLCJmaW5hbFN0eWxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2V0UHJvdG90eXBlT2YiLCJSZWZlcmVuY2VFcnJvciIsIl9QdXJlQ29tcG9uZW50IiwiQW5pbWF0ZSIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsIl90aGlzJHByb3BzIiwiaXNBY3RpdmUiLCJhdHRyaWJ1dGVOYW1lIiwiaGFuZGxlU3R5bGVDaGFuZ2UiLCJjaGFuZ2VTdHlsZSIsInN0YXRlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwiX3RoaXMkcHJvcHMyIiwiY2FuQmVnaW4iLCJtb3VudGVkIiwicnVuQW5pbWF0aW9uIiwiX3RoaXMkcHJvcHMzIiwic2hvdWxkUmVBbmltYXRlIiwiaXNUcmlnZ2VyZWQiLCJtYW5hZ2VyIiwic3RvcEpTQW5pbWF0aW9uIiwiX25ld1N0YXRlIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsInVuU3Vic2NyaWJlIiwiX3RoaXMyIiwib25BbmltYXRpb25FbmQiLCJvbkFuaW1hdGlvblN0YXJ0Iiwic3RhcnRBbmltYXRpb24iLCJjb25maWdVcGRhdGUiLCJfbGVuMiIsIl9rZXkyIiwiX3RoaXMzIiwiX3N0ZXBzJCIsImluaXRpYWxTdHlsZSIsIl9zdGVwcyQkZHVyYXRpb24iLCJpbml0aWFsVGltZSIsInNlcXVlbmNlIiwibmV4dEl0ZW0iLCJfbmV4dEl0ZW0kZWFzaW5nIiwibmV4dFByb3BlcnRpZXMiLCJwcmVJdGVtIiwicnVuSlNBbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwibmV3U3R5bGUiLCJwcm9wc1RvIiwicnVuU3RlcEFuaW1hdGlvbiIsIl90aGlzJHByb3BzNCIsIm9uQW5pbWF0aW9uUmVTdGFydCIsInN0YXRlU3R5bGUiLCJjbG9uZUNvbnRhaW5lciIsImNvbnRhaW5lciIsIl9jb250YWluZXIkcHJvcHMiLCJfY29udGFpbmVyJHByb3BzJHN0eWwiLCJvbmx5IiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsInNoYXBlIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwibm9kZSIsImJvb2wiLCJkZWZhdWx0UHJvcHMiLCJfZXh0ZW5kcyIsIl9Db21wb25lbnQiLCJBbmltYXRlR3JvdXBDaGlsZCIsIl9nZXRQcm90b3R5cGVPZjIiLCJoYW5kbGVFbnRlciIsImlzQXBwZWFyaW5nIiwiYXBwZWFyT3B0aW9ucyIsImVudGVyT3B0aW9ucyIsImhhbmRsZVN0eWxlQWN0aXZlIiwiaGFuZGxlRXhpdCIsImxlYXZlT3B0aW9ucyIsIm9uRW50ZXIiLCJvbkV4aXQiLCJwYXJzZVRpbWVvdXQiLCJlbGVtZW50IiwiQW5pbWF0ZUdyb3VwIiwiY29tcG9uZW50IiwiYXBwZWFyIiwiZW50ZXIiLCJsZWF2ZSIsImFueSIsIlJBRElBTiIsIlBJIiwiZGVncmVlVG9SYWRpYW4iLCJhbmdsZSIsInJhZGlhblRvRGVncmVlIiwiYW5nbGVJblJhZGlhbiIsInBvbGFyVG9DYXJ0ZXNpYW4iLCJyYWRpdXMiLCJjb3MiLCJ5Iiwic2luIiwiZ2V0TWF4UmFkaXVzIiwidG9wIiwiYm90dG9tIiwiZm9ybWF0QXhpc01hcCIsImF4aXNNYXAiLCJjaGFydE5hbWUiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJtYXhSYWRpdXMiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwicmV2ZXJzZWQiLCJmaW5hbEF4aXMiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwb2ludCIsImFub3RoZXJQb2ludCIsInNxcnQiLCJnZXRBbmdsZU9mUG9pbnQiLCJhY29zIiwiZm9ybWF0QW5nbGVPZlNlY3RvciIsInN0YXJ0Q250IiwiZW5kQ250IiwicmV2ZXJzZUZvcm1hdEFuZ2xlT2ZTZXRvciIsImluUmFuZ2VPZlNlY3RvciIsInNlY3RvciIsImZvcm1hdEFuZ2xlIiwidmFsdWVBY2Nlc3NvciIsIkxhYmVsTGlzdCIsImNsb2NrV2lzZSIsInRleHRCcmVha0FsbCIsIkxheWVyIiwiaWRQcm9wcyIsIkxhYmVsIiwicGFyZW50Vmlld0JveCIsInZpZXdCb3giLCJwYXJzZVZpZXdCb3giLCJyZW5kZXJDYWxsQnlQYXJlbnQiLCJwYXJlbnRQcm9wcyIsImNrZWNrUHJvcHNMYWJlbCIsImxhYmVsIiwiZXhwbGljaXRDaGlscmVuIiwiY2xvbmVFbGVtZW50IiwiaW1wbGljaXRMYWJlbExpc3QiLCJjb250ZW50IiwicGFyc2VMYWJlbExpc3QiLCJPUklFTlRfTUFQIiwieEF4aXMiLCJ5QXhpcyIsIm9yaWdpbkNvb3JkaW5hdGUiLCJpc0Zpbml0IiwiTnVtYmVyIiwiZ2V0RGlzcGxheWVkRGF0YSIsImdyYXBoaWNhbEl0ZW1zIiwiZGF0YVN0YXJ0SW5kZXgiLCJkYXRhRW5kSW5kZXgiLCJpdGVtc0RhdGEiLCJpdGVtRGF0YSIsImdldFRvb2x0aXBDb250ZW50IiwiY2hhcnREYXRhIiwiYWN0aXZlSW5kZXgiLCJhY3RpdmVMYWJlbCIsInRvb2x0aXBBeGlzIiwiZGlzcGxheWVkRGF0YSIsInVuaXQiLCJmb3JtYXR0ZXIiLCJ0b29sdGlwVHlwZSIsImdldFRvb2x0aXBEYXRhIiwicmFuZ2VPYmoiLCJyYW5nZURhdGEiLCJjaGFydFgiLCJjaGFydFkiLCJwb3MiLCJjYWxjdWxhdGVUb29sdGlwUG9zIiwidG9vbHRpcFRpY2tzIiwiYWN0aXZlVG9vbHRpcEluZGV4IiwiYWN0aXZlUGF5bG9hZCIsImFjdGl2ZUNvb3JkaW5hdGUiLCJ0aWNrIiwiZ2V0QWN0aXZlQ29vcmRpbmF0ZSIsImdldEF4aXNNYXAiLCJBeGlzQ29tcCIsImF4aXNJZEtleSIsImF4ZXMiLCJzdGFja09mZnNldCIsImR1cGxpY2F0ZSIsImZpbmFsRG9tYWluIiwiZXJyb3JCYXJzRG9tYWluIiwiZGV0ZWN0UmVmZXJlbmNlRWxlbWVudHNEb21haW4iLCJnZXRBeGlzTWFwQnlBeGVzIiwiQXhpcyIsImhpZGUiLCJvcmllbnRhdGlvbiIsImdldEF4aXNNYXBCeUl0ZW1zIiwiY3JlYXRlRGVmYXVsdFN0YXRlIiwiZGVmYXVsdFNob3dUb29sdGlwIiwiYnJ1c2hJdGVtIiwiQnJ1c2giLCJpc1Rvb2x0aXBBY3RpdmUiLCJnZXRBeGlzTmFtZUJ5TGF5b3V0IiwibnVtZXJpY0F4aXNOYW1lIiwiY2F0ZUF4aXNOYW1lIiwiZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0IiwiR3JhcGhpY2FsQ2hpbGQiLCJldmVudFR5cGUiLCJheGlzQ29tcG9uZW50cyIsImdldEZvcm1hdEl0ZW1zIiwiY3VycmVudFN0YXRlIiwidXBkYXRlSWQiLCJnbG9iYWxNYXhCYXJTaXplIiwiaGFzR3JhcGhpY2FsQmFySXRlbSIsImZvcm1hdGVkSXRlbXMiLCJjaGlsZE1heEJhclNpemUiLCJheGlzT2JqIiwiY2F0ZUF4aXMiLCJjYXRlVGlja3MiLCJpdGVtSXNCYXIiLCJjb21wb25zZWRGbiIsImdldENvbXBvc2VkRGF0YSIsImFuaW1hdGlvbklkIiwiY2hpbGRJbmRleCIsInVwZGF0ZVN0YXRlT2ZBeGlzTWFwc09mZnNldEFuZFN0YWNrR3JvdXBzIiwicHJldlN0YXRlIiwicHJldkxlZ2VuZEJCb3giLCJ4QXhpc01hcCIsInlBeGlzTWFwIiwib2Zmc2V0SCIsIm1pcnJvciIsIm9mZnNldFYiLCJicnVzaEJvdHRvbSIsImNhbGN1bGF0ZU9mZnNldCIsImxlZ2VuZEJCb3giLCJjYXRlQXhpc01hcCIsInRpY2tzT2JqIiwib3JkZXJlZFRvb2x0aXBUaWNrcyIsInRvb2x0aXBBeGlzQmFuZFNpemUiLCJoYW5kbGVMZWdlbmRCQm94VXBkYXRlIiwibGVnZW5kSW5zdGFuY2UiLCJoYW5kbGVSZWNlaXZlU3luY0V2ZW50IiwiY0lkIiwiY2hhcnRJZCIsInN5bmNJZCIsInVuaXF1ZUNoYXJ0SWQiLCJ2YWxpZGF0ZUNoYXJ0WCIsInZhbGlkYXRlQ2hhcnRZIiwiaGFuZGxlQnJ1c2hDaGFuZ2UiLCJ0cmlnZ2VyU3luY0V2ZW50IiwiaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VFbnRlciIsIm1vdXNlIiwiZ2V0TW91c2VJbmZvIiwibmV4dFN0YXRlIiwidHJpZ2dlcmVkQWZ0ZXJNb3VzZU1vdmUiLCJvbk1vdXNlTW92ZSIsImhhbmRsZUl0ZW1Nb3VzZUVudGVyIiwiYWN0aXZlSXRlbSIsInRvb2x0aXBQYXlsb2FkIiwidG9vbHRpcFBvc2l0aW9uIiwiaGFuZGxlSXRlbU1vdXNlTGVhdmUiLCJoYW5kbGVNb3VzZU1vdmUiLCJwZXJzaXN0IiwiaGFuZGxlTW91c2VMZWF2ZSIsIm9uTW91c2VMZWF2ZSIsImNhbmNlbFRocm90dGxlZFRyaWdnZXJBZnRlck1vdXNlTW92ZSIsImhhbmRsZU91dGVyRXZlbnQiLCJldmVudE5hbWUiLCJldmVudCIsImNoYW5nZWRUb3VjaGVzIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiaGFuZGxlTW91c2VEb3duIiwib25Nb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwib25Nb3VzZVVwIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwidmVydGljYWxDb29yZGluYXRlc0dlbmVyYXRvciIsIkNhcnRlc2lhbkF4aXMiLCJnZXRUaWNrcyIsImhvcml6b250YWxDb29yZGluYXRlc0dlbmVyYXRvciIsImF4ZXNUaWNrc0dlbmVyYXRvciIsInJlbmRlckN1cnNvciIsImN1cnNvciIsInJlc3RQcm9wcyIsImN1cnNvckNvbXAiLCJDdXJ2ZSIsIkNyb3NzIiwiZ2V0Q3Vyc29yUmVjdGFuZ2xlIiwiUmVjdGFuZ2xlIiwiZ2V0Q3Vyc29yUG9pbnRzIiwiU2VjdG9yIiwicG9pbnRzIiwiY3Vyc29yUHJvcHMiLCJwb2ludGVyRXZlbnRzIiwicGF5bG9hZEluZGV4IiwicmVuZGVyUG9sYXJBeGlzIiwiYXhpc09wdGlvbiIsInJlbmRlclhBeGlzIiwieEF4aXNJZCIsInJlbmRlckF4aXMiLCJyZW5kZXJZQXhpcyIsInlBeGlzSWQiLCJyZW5kZXJHcmlkIiwiY2hhcnRXaWR0aCIsImNoYXJ0SGVpZ2h0IiwicmVuZGVyUG9sYXJHcmlkIiwicmFkaWFsTGluZXMiLCJyYWRpdXNBeGlzTWFwIiwiYW5nbGVBeGlzTWFwIiwicmFkaXVzQXhpcyIsImFuZ2xlQXhpcyIsInBvbGFyQW5nbGVzIiwicG9sYXJSYWRpdXMiLCJyZW5kZXJMZWdlbmQiLCJvdGhlclByb3BzIiwicmVmIiwibGVnZW5kIiwib25CQm94VXBkYXRlIiwicmVuZGVyVG9vbHRpcCIsInRvb2x0aXBJdGVtIiwiVG9vbHRpcCIsImFjdGl2ZSIsInJlbmRlckJydXNoIiwib25DaGFuZ2UiLCJyZW5kZXJSZWZlcmVuY2VFbGVtZW50IiwiY2xpcFBhdGhJZCIsInJlbmRlckFjdGl2ZVBvaW50cyIsImFjdGl2ZVBvaW50IiwiYmFzZVBvaW50IiwiaXNSYW5nZSIsImFjdGl2ZURvdCIsImRvdFByb3BzIiwic3Ryb2tlV2lkdGgiLCJDYXRlZ29yaWNhbENoYXJ0V3JhcHBlciIsInJlbmRlckFjdGl2ZURvdCIsInJlbmRlckdyYXBoaWNDaGlsZCIsImZpbHRlckZvcm1hdEl0ZW0iLCJiYXNlTGluZSIsImhhc0FjdGl2ZSIsIml0ZW1FdmVudHMiLCJ0cmlnZ2VyIiwib25DTGljayIsImdyYXBoaWNhbEl0ZW0iLCJyZW5kZXJDdXN0b21pemVkIiwidGhyb3R0bGVEZWxheSIsImNvbXBvbmVudERpZE1vdW50IiwiYWRkTGlzdGVuZXIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJyZW1vdmVMaXN0ZW5lciIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGFpbmVyT2Zmc2V0IiwiZ2V0T2Zmc2V0IiwiY2FsY3VsYXRlQ2hhcnRDb29yZGluYXRlIiwieFNjYWxlIiwieVNjYWxlIiwieFZhbHVlIiwieVZhbHVlIiwidG9vbFRpcERhdGEiLCJoYWxmU2l6ZSIsImlubmVyUG9pbnQiLCJvdXRlclBvaW50IiwicGFyc2VFdmVudHNPZldyYXBwZXIiLCJ0b29sdGlwRXZlbnRzIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoRW5kIiwib3V0ZXJFdmVudHMiLCJldmVudENlbnRlciIsIm9uIiwiU1lOQ19FVkVOVCIsInNldE1heExpc3RlbmVycyIsIl9tYXhMaXN0ZW5lcnMiLCJlbWl0IiwiYXhpc09wdGlvbnMiLCJ0aWNrc0dlbmVyYXRvciIsInJlbmRlckNsaXBQYXRoIiwiYXR0cnMiLCJDYXJ0ZXNpYW5HcmlkIiwiUmVmZXJlbmNlQXJlYSIsIlJlZmVyZW5jZUxpbmUiLCJSZWZlcmVuY2VEb3QiLCJYQXhpcyIsIllBeGlzIiwiQmFyIiwiTGluZSIsIkFyZWEiLCJSYWRhciIsIlJhZGlhbEJhciIsIlNjYXR0ZXIiLCJQaWUiLCJGdW5uZWwiLCJQb2xhckdyaWQiLCJQb2xhckFuZ2xlQXhpcyIsIlBvbGFyUmFkaXVzQXhpcyIsIkN1c3RvbWl6ZWQiLCJTdXJmYWNlIiwiZXZlbnRzIiwiQ29tcG9uZW50IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZGVmYXVsdFN0YXRlIiwicHJldkRhdGEiLCJwcmV2V2lkdGgiLCJwcmV2SGVpZ2h0IiwicHJldkxheW91dCIsInByZXZTdGFja09mZnNldCIsInByZXZNYXJnaW4iLCJrZWVwRnJvbVByZXZTdGF0ZSIsInVwZGF0ZXNUb1N0YXRlIiwibmV3VXBkYXRlSWQiLCJvcHRpb24iLCJkb3QiLCJEb3QiLCJyZW5kZXJSYWRpYWxMYWJlbCIsImxhYmVsUHJvcHMiLCJsYWJlbEFuZ2xlIiwiZGVsdGFBbmdsZSIsImdldERlbHRhQW5nbGUiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJkb21pbmFudEJhc2VsaW5lIiwieGxpbmtIcmVmIiwiZ2V0TGFiZWwiLCJpc1BvbGFyTGFiZWwiLCJpc1BvbGFyIiwicG9zaXRpb25BdHRycyIsIm1pZEFuZ2xlIiwidGV4dEFuY2hvciIsInZlcnRpY2FsQW5jaG9yIiwiZ2V0QXR0cnNPZlBvbGFyTGFiZWwiLCJ2ZXJ0aWNhbFNpZ24iLCJ2ZXJ0aWNhbE9mZnNldCIsInZlcnRpY2FsRW5kIiwidmVydGljYWxTdGFydCIsImhvcml6b250YWxTaWduIiwiaG9yaXpvbnRhbE9mZnNldCIsImhvcml6b250YWxFbmQiLCJob3Jpem9udGFsU3RhcnQiLCJzaXplQXR0cnMiLCJnZXRBdHRyc09mQ2FydGVzaWFuTGFiZWwiLCJUZXh0IiwiYnJlYWtBbGwiLCJsYWJlbFZpZXdCb3giLCJjaGVja1Byb3BzTGFiZWwiLCJleHBsaWNpdENoaWxkcmVuIiwiaW1wbGljaXRMYWJlbCIsInBhcnNlTGFiZWwiLCJpZHMiLCJsZWZ0TWlycm9yIiwicmlnaHRNaXJyb3IiLCJ0b3BNaXJyb3IiLCJib3R0b21NaXJyb3IiLCJuZWVkU3BhY2UiLCJwYWRkaW5nIiwib2Zmc2V0S2V5IiwicmVjdFdpdGhQb2ludHMiLCJyZWN0V2l0aENvb3JkcyIsIlNjYWxlSGVscGVyIiwiYmFuZEF3YXJlIiwiaXNJblJhbmdlIiwiRVBTIiwiY3JlYXRlTGFiZWxlZFNjYWxlcyIsInNjYWxlcyIsImNvb3JkIiwidmVuZG9ycyIsInN1ZmZpeCIsInJhZiIsImNhZiIsInF1ZXVlIiwiX25vdyIsImNwIiwiY2FuY2VsbGVkIiwiaGFuZGxlIiwicG9seWZpbGwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIkJSRUFLSU5HX1NQQUNFUyIsImNhbGN1bGF0ZVdvcmRXaWR0aHMiLCJ3b3Jkc1dpdGhDb21wdXRlZFdpZHRoIiwiZ2V0U3RyaW5nU2l6ZSIsInNwYWNlV2lkdGgiLCJnZXRXb3Jkc1dpdGhvdXRDYWxjdWxhdGUiLCJnZXRXb3Jkc0J5TGluZXMiLCJuZWVkQ2FsY3VsYXRlIiwic2NhbGVUb0ZpdCIsIndvcmRXaWR0aHMiLCJpbml0aWFsV29yZHNXaXRoQ29tcHV0ZWRXaXRoIiwibGluZVdpZHRoIiwic2hvdWxkTGltaXRMaW5lcyIsIm1heExpbmVzIiwidGV4dCIsImNhbGN1bGF0ZSIsImN1cnJlbnRMaW5lIiwibmV3TGluZSIsIm9yaWdpbmFsUmVzdWx0IiwidHJpbW1lZFJlc3VsdCIsImNoZWNrT3ZlcmZsb3ciLCJ0ZW1wVGV4dCIsImZpbmRMb25nZXN0TGluZSIsIml0ZXJhdGlvbnMiLCJtaWRkbGUiLCJkb2VzUHJldk92ZXJmbG93IiwiZG9lc01pZGRsZU92ZXJmbG93IiwiY2FsY3VsYXRlV29yZHNCeUxpbmVzIiwicHJldlNjYWxlVG9GaXQiLCJwcmV2U3R5bGUiLCJwcmV2QnJlYWtBbGwiLCJ3b3Jkc0J5TGluZXMiLCJkeCIsImR5IiwibGluZUhlaWdodCIsImNhcEhlaWdodCIsInRleHRQcm9wcyIsInN0YXJ0RHkiLCJsaW5lIiwiUHVyZUNvbXBvbmVudCIsIndhcm4iLCJjb25kaXRpb24iLCJmb3JtYXQiLCJDZWxsIiwiQ1VSVkVfRkFDVE9SSUVTIiwiY3VydmVCYXNpc0Nsb3NlZCIsImN1cnZlQmFzaXNPcGVuIiwiY3VydmVCYXNpcyIsImN1cnZlTGluZWFyQ2xvc2VkIiwiY3VydmVMaW5lYXIiLCJjdXJ2ZU1vbm90b25lWCIsImN1cnZlTW9ub3RvbmVZIiwiY3VydmVOYXR1cmFsIiwiY3VydmVTdGVwIiwiY3VydmVTdGVwQWZ0ZXIiLCJjdXJ2ZVN0ZXBCZWZvcmUiLCJkZWZpbmVkIiwiZ2V0WCIsImdldFkiLCJnZXRQYXRoIiwibGluZUZ1bmN0aW9uIiwiY29ubmVjdE51bGxzIiwiY3VydmVGYWN0b3J5IiwiZ2V0Q3VydmVGYWN0b3J5IiwiZm9ybWF0UG9pbnRzIiwiYmFzZSIsImFyZWFQb2ludHMiLCJ4MCIsInkwIiwiY3VydmUiLCJwYXRoUmVmIiwicmVhbFBhdGgiLCJnZXRSZWN0YW5nbGVQYXRoIiwieVNpZ24iLCJ4U2lnbiIsIm5ld1JhZGl1cyIsInRvdGFsTGVuZ3RoIiwiZ2V0VG90YWxMZW5ndGgiLCJhbmltYXRpb25FYXNpbmciLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkJlZ2luIiwiaXNBbmltYXRpb25BY3RpdmUiLCJpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZSIsImN1cnJXaWR0aCIsImN1cnJIZWlnaHQiLCJjdXJyWSIsInN2Z1ZpZXciLCJ2ZXJzaW9uIiwiQ0xTX1BSRUZJWCIsImRlZmF1bHRVbmlxQnkiLCJib3hXaWR0aCIsImJveEhlaWdodCIsImdldFRyYW5zbGF0ZSIsInRvb2x0aXBEaW1lbnNpb24iLCJ2aWV3Qm94RGltZW5zaW9uIiwiYWxsb3dFc2NhcGVWaWV3Qm94IiwicmVzdHJpY3RlZCIsInVucmVzdHJpY3RlZCIsInVwZGF0ZUJCb3giLCJ3cmFwcGVyTm9kZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiZmlsdGVyTnVsbCIsImZpbmFsUGF5bG9hZCIsImdldFVuaXFQYXlsb2FkIiwiaGFzUGF5bG9hZCIsIndyYXBwZXJTdHlsZSIsIm91dGVyU3R5bGUiLCJ2aXNpYmlsaXR5IiwidXNlVHJhbnNsYXRlM2QiLCJjbHMiLCJEZWZhdWx0VG9vbHRpcENvbnRlbnQiLCJyZW5kZXJDb250ZW50IiwiY3Vyc29yU3R5bGUiLCJjb250ZW50U3R5bGUiLCJpdGVtU3R5bGUiLCJsYWJlbFN0eWxlIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJpc0tleWFibGUiLCJzdHJpbmdDYWNoZSIsIndpZHRoQ2FjaGUiLCJjYWNoZUNvdW50IiwiU1BBTl9TVFlMRSIsImJvcmRlciIsIndoaXRlU3BhY2UiLCJTVFlMRV9MSVNUIiwiZ2V0U3R5bGVTdHJpbmciLCJzdHIiLCJjYWNoZUtleSIsImdldEVsZW1lbnRCeUlkIiwic2V0QXR0cmlidXRlIiwiYm9keSIsImFwcGVuZENoaWxkIiwic3R5bGVLZXkiLCJ0ZXh0Q29udGVudCIsInJlY3QiLCJodG1sIiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0IiwicGFnZVgiLCJwYWdlWSIsImdldFRhbmdlbnRDaXJjbGUiLCJpc0V4dGVybmFsIiwiY29ybmVyUmFkaXVzIiwiY29ybmVySXNFeHRlcm5hbCIsImNlbnRlclJhZGl1cyIsInRoZXRhIiwiYXNpbiIsImNlbnRlckFuZ2xlIiwibGluZVRhbmdlbmN5QW5nbGUiLCJjZW50ZXIiLCJjaXJjbGVUYW5nZW5jeSIsImxpbmVUYW5nZW5jeSIsImdldFNlY3RvclBhdGgiLCJ0ZW1wRW5kQW5nbGUiLCJvdXRlclN0YXJ0UG9pbnQiLCJvdXRlckVuZFBvaW50IiwiaW5uZXJTdGFydFBvaW50IiwiaW5uZXJFbmRQb2ludCIsImZvcmNlQ29ybmVyUmFkaXVzIiwiZGVsdGFSYWRpdXMiLCJjciIsInNvY3QiLCJzb2x0Iiwic290IiwiZW9jdCIsImVvbHQiLCJlb3QiLCJvdXRlckFyY0FuZ2xlIiwic2ljdCIsInNpbHQiLCJzaXQiLCJlaWN0IiwiZWlsdCIsImVpdCIsImlubmVyQXJjQW5nbGUiLCJnZXRTZWN0b3JXaXRoQ29ybmVyIiwiaXNWYWxpZGF0ZVBvaW50IiwiZ2V0U2luZ2xlUG9seWdvblBhdGgiLCJzZWdtZW50UG9pbnRzIiwiZ2V0UGFyc2VkUG9pbnRzIiwic2VnUG9pbnRzIiwicG9seWdvblBhdGgiLCJiYXNlTGluZVBvaW50cyIsImhhc1N0cm9rZSIsInJhbmdlUGF0aCIsIm91dGVyUGF0aCIsImdldFJhbmdsZVBhdGgiLCJzaW5nbGVQYXRoIiwiUG9seWdvbiIsImdldFRpY2tWYWx1ZUNvb3JkIiwiZ2V0VGlja1RleHRBbmNob3IiLCJnZXRWaWV3Qm94IiwibWF4UmFkaXVzVGljayIsInJlbmRlckF4aXNMaW5lIiwiYXhpc0xpbmUiLCJleHRlbnQiLCJwb2ludDAiLCJwb2ludDEiLCJyZW5kZXJUaWNrSXRlbSIsInJlbmRlclRpY2tzIiwidGlja0Zvcm1hdHRlciIsImF4aXNQcm9wcyIsImN1c3RvbVRpY2tQcm9wcyIsInRpY2tQcm9wcyIsInJhZGl1c0F4aXNJZCIsImdldFRpY2tMaW5lQ29vcmQiLCJ0aWNrTGluZVNpemUiLCJwMSIsInAyIiwiYXhpc0xpbmVUeXBlIiwidGlja0xpbmUiLCJ0aWNrTGluZVByb3BzIiwibGluZUNvb3JkIiwiYW5nbGVBeGlzSWQiLCJ0aWNrU2l6ZSIsImlmT3ZlcmZsb3dNYXRjaGVzIiwiYWx3YXlzU2hvdyIsImlmT3ZlcmZsb3ciLCJFcnJvckJhciIsImRhdGFQb2ludEZvcm1hdHRlciIsInN2Z1Byb3BzIiwiZXJyb3JWYWwiLCJsb3dCb3VuZCIsImhpZ2hCb3VuZCIsImxpbmVDb29yZGluYXRlcyIsInlNaWQiLCJ5TWluIiwieU1heCIsInhNaW4iLCJ4TWF4IiwieE1pZCIsImNvb3JkaW5hdGVzIiwiWkF4aXMiLCJ6QXhpc0lkIiwiX0NTU1RyYW5zaXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1JlcGxhY2VUcmFuc2l0aW9uIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9UcmFuc2l0aW9uIiwiVHJhbnNpdGlvbiIsIlRyYW5zaXRpb25Hcm91cCIsIlJlcGxhY2VUcmFuc2l0aW9uIiwiQ1NTVHJhbnNpdGlvbiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsImdldEJCb3giLCJnZXRCQm94U25hcHNob3QiLCJnZXREZWZhdWx0UG9zaXRpb24iLCJoUG9zIiwidlBvcyIsInBheWxvYWRVbmlxQnkiLCJEZWZhdWx0TGVnZW5kQ29udGVudCIsImljb25TaXplIiwic3ltYm9sRmFjdG9yaWVzIiwic3ltYm9sQ2lyY2xlIiwic3ltYm9sQ3Jvc3MiLCJzeW1ib2xEaWFtb25kIiwic3ltYm9sU3F1YXJlIiwic3ltYm9sU3RhciIsInN5bWJvbFRyaWFuZ2xlIiwic3ltYm9sV3llIiwic2l6ZVR5cGUiLCJzeW1ib2xGYWN0b3J5IiwiZ2V0U3ltYm9sRmFjdG9yeSIsInRhbiIsImNhbGN1bGF0ZUFyZWFTaXplIiwicmVnaXN0ZXJTeW1ib2wiLCJTeW1ib2xzIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiaXNBbmltYXRpb25GaW5pc2hlZCIsImdldFN0cm9rZURhc2hhcnJheSIsImxpbmVzIiwibGluZUxlbmd0aCIsInJlbWFpbkxlbmd0aCIsInJlc3RMZW5ndGgiLCJyZW1haW5MaW5lcyIsImVtcHR5TGluZXMiLCJtYWluQ3VydmUiLCJoYW5kbGVBbmltYXRpb25FbmQiLCJoYW5kbGVBbmltYXRpb25TdGFydCIsInByZXZBbmltYXRpb25JZCIsImN1clBvaW50cyIsInByZXZQb2ludHMiLCJjdXJ2ZURvbSIsImxpbmVzVW5pdCIsInJlbmRlckVycm9yQmFyIiwiZXJyb3JCYXJJdGVtcyIsImRhdGFQb2ludCIsInJlbmRlckRvdEl0ZW0iLCJkb3RJdGVtIiwicmVuZGVyRG90cyIsIm5lZWRDbGlwIiwibGluZVByb3BzIiwiY3VzdG9tRG90UHJvcHMiLCJkb3RzIiwiZG90c1Byb3BzIiwiY2xpcFBhdGgiLCJyZW5kZXJDdXJ2ZVN0YXRpY2FsbHkiLCJjdXJ2ZVByb3BzIiwicmVuZGVyQ3VydmVXaXRoQW5pbWF0aW9uIiwic3Ryb2tlRGFzaGFycmF5IiwiYW5pbWF0ZU5ld1ZhbHVlcyIsInN0ZXBEYXRhIiwicHJldlBvaW50SW5kZXgiLCJpbnRlcnBvbGF0b3JYIiwiaW50ZXJwb2xhdG9yWSIsImN1cnJlbnRTdHJva2VEYXNoYXJyYXkiLCJjdXJMZW5ndGgiLCJpbnRlcnBvbGF0b3IiLCJyZW5kZXJDdXJ2ZSIsImhhc1NpbmdsZVBvaW50IiwieEF4aXNUaWNrcyIsInlBeGlzVGlja3MiLCJjdXJCYXNlTGluZSIsInByZXZCYXNlTGluZSIsImFyZWFQcm9wcyIsInJlbmRlckhvcml6b250YWxSZWN0Iiwic3RhcnRYIiwiZW5kWCIsIm1heFkiLCJyZW5kZXJWZXJ0aWNhbFJlY3QiLCJzdGFydFkiLCJlbmRZIiwibWF4WCIsInJlbmRlckNsaXBSZWN0IiwicmVuZGVyQXJlYVN0YXRpY2FsbHkiLCJyZW5kZXJBcmVhV2l0aEFuaW1hdGlvbiIsInN0ZXBQb2ludHMiLCJzdGVwQmFzZUxpbmUiLCJyZW5kZXJBcmVhIiwiZmlsbE9wYWNpdHkiLCJnZXRCYXNlVmFsdWUiLCJiYXNlVmFsdWUiLCJvcmlnaW5hbFZhbHVlIiwiaXNCcmVha1BvaW50IiwiY3VyRGF0YSIsInJlbmRlclJlY3RhbmdsZSIsInJlbmRlclJlY3RhbmdsZXNTdGF0aWNhbGx5IiwiYmFzZVByb3BzIiwicmVuZGVyUmVjdGFuZ2xlc1dpdGhBbmltYXRpb24iLCJpbnRlcnBvbGF0b3JXaWR0aCIsImludGVycG9sYXRvckhlaWdodCIsImgiLCJ3IiwicmVuZGVyUmVjdGFuZ2xlcyIsInJlbmRlckJhY2tncm91bmQiLCJiYWNrZ3JvdW5kUHJvcHMiLCJiYWNrZ3JvdW5kIiwibWluUG9pbnRTaXplIiwic3RhY2tlZERvbWFpbiIsImNlbGxzIiwicmVjdHMiLCJkZWx0YSIsInJlbmRlclN5bWJvbEl0ZW0iLCJyZW5kZXJTeW1ib2xzU3RhdGljYWxseSIsImFjdGl2ZVNoYXBlIiwicmVuZGVyU3ltYm9sc1dpdGhBbmltYXRpb24iLCJpbnRlcnBvbGF0b3JDeCIsImludGVycG9sYXRvckN5IiwiaW50ZXJwb2xhdG9yU2l6ZSIsInJlbmRlclN5bWJvbHMiLCJkYXRhUG9pbnRGb3JtYXR0ZXJZIiwiZGF0YVBvaW50Rm9ybWF0dGVyWCIsInJlbmRlckxpbmUiLCJsaW5lUG9pbnRzIiwibGluZUl0ZW0iLCJsaW5lVHlwZSIsImxpbmVKb2ludFR5cGUiLCJzY2F0dGVyUHJvcHMiLCJjdXN0b21MaW5lUHJvcHMiLCJsaW5lYXJFeHAiLCJ6QXhpcyIsInhBeGlzRGF0YUtleSIsInlBeGlzRGF0YUtleSIsInpBeGlzRGF0YUtleSIsImRlZmF1bHRSYW5nZVoiLCJkZWZhdWx0WiIsInhCYW5kU2l6ZSIsInlCYW5kU2l6ZSIsInoiLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJhcmNUbyIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJjdyIsImRhIiwiYXRhbjIiLCJoYWxmUGkiLCJhcmNJbm5lclJhZGl1cyIsImFyY091dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImludGVyc2VjdCIsIngzIiwieTMiLCJ4MTAiLCJ5MTAiLCJ4MzIiLCJ5MzIiLCJjb3JuZXJUYW5nZW50cyIsInIxIiwicmMiLCJsbyIsIm94Iiwib3kiLCJ4MTEiLCJ5MTEiLCJ4MDAiLCJ5MDAiLCJkMiIsIkQiLCJjeDAiLCJjeTAiLCJjeDEiLCJjeTEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJwYWRSYWRpdXMiLCJyMCIsInQwIiwidDEiLCJhMDEiLCJhMTEiLCJhMDAiLCJhMTAiLCJkYTAiLCJkYTEiLCJhcCIsInJwIiwicmMwIiwicmMxIiwicDAiLCJvYyIsImF4IiwiYXkiLCJieCIsImJ5Iiwia2MiLCJsYyIsImNlbnRyb2lkIiwiTGluZWFyIiwiX2NvbnRleHQiLCJhcmVhU3RhcnQiLCJfbGluZSIsImFyZWFFbmQiLCJOYU4iLCJsaW5lU3RhcnQiLCJfcG9pbnQiLCJsaW5lRW5kIiwib3V0cHV0IiwiZGVmaW5lZDAiLCJhcmVhIiwieDB6IiwieTB6IiwiYXJlYWxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJzb3J0VmFsdWVzIiwiZGVzY2VuZGluZyIsInBpZSIsImFyY3MiLCJwYSIsImN1cnZlUmFkaWFsTGluZWFyIiwiY3VydmVSYWRpYWwiLCJSYWRpYWwiLCJfY3VydmUiLCJyYWRpYWwiLCJsaW5lUmFkaWFsIiwibGluZVN0YXJ0QW5nbGUiLCJsaW5lRW5kQW5nbGUiLCJsaW5lSW5uZXJSYWRpdXMiLCJsaW5lT3V0ZXJSYWRpdXMiLCJsaW5rU291cmNlIiwibGlua1RhcmdldCIsImxpbmsiLCJhcmd2IiwiY3VydmVIb3Jpem9udGFsIiwiY3VydmVWZXJ0aWNhbCIsInBvaW50UmFkaWFsIiwicDMiLCJsaW5rSG9yaXpvbnRhbCIsImxpbmtWZXJ0aWNhbCIsImxpbmtSYWRpYWwiLCJkcmF3IiwidGFuMzAiLCJ0YW4zMF8yIiwia3IiLCJreCIsImt5Iiwic3FydDMiLCJzeW1ib2xzIiwiY2lyY2xlIiwiY3Jvc3MiLCJkaWFtb25kIiwic3F1YXJlIiwic3RhciIsInRyaWFuZ2xlIiwid3llIiwidGhhdCIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJCYXNpc09wZW4iLCJCdW5kbGUiLCJiZXRhIiwiX2Jhc2lzIiwiX2JldGEiLCJfeCIsIl95IiwiYnVuZGxlIiwiY3VzdG9tIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiQ2FyZGluYWxPcGVuIiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIngyMyIsInkyMyIsImNhdG11bGxSb20iLCJDYXRtdWxsUm9tQ2xvc2VkIiwiQ2F0bXVsbFJvbU9wZW4iLCJMaW5lYXJDbG9zZWQiLCJzbG9wZTMiLCJoMCIsImgxIiwiczAiLCJzMSIsInNsb3BlMiIsIk1vbm90b25lWCIsIk1vbm90b25lWSIsIlJlZmxlY3RDb250ZXh0IiwibW9ub3RvbmVYIiwibW9ub3RvbmVZIiwiTmF0dXJhbCIsImNvbnRyb2xQb2ludHMiLCJfdDAiLCJweCIsInB5IiwiaTAiLCJpMSIsIlN0ZXAiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic3RhY2tWYWx1ZSIsInN0YWNrU2VyaWVzIiwib3oiLCJzeiIsInlwIiwieW4iLCJzMiIsInNpIiwic2lqMCIsInMzIiwic2siLCJwZWFrcyIsInBlYWsiLCJ2aSIsInZqIiwic3VtcyIsImFzY2VuZGluZyIsImFwcGVhcmFuY2UiLCJ0b3BzIiwiYm90dG9tcyIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJiYXNlSXNUeXBlZEFycmF5IiwiRVhJVElORyIsIkVOVEVSRUQiLCJFTlRFUklORyIsIkVYSVRFRCIsIlVOTU9VTlRFRCIsIlByb3BUeXBlcyIsIm5ld09iaiIsImRlc2MiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdCIsIl9yZWFjdERvbSIsIl9yZWFjdExpZmVjeWNsZXNDb21wYXQiLCJfUmVhY3QkQ29tcG9uZW50IiwiaW5pdGlhbFN0YXR1cyIsInRyYW5zaXRpb25Hcm91cCIsImlzTW91bnRpbmciLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJ1cGRhdGVTdGF0dXMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwibW91bnRpbmciLCJmaW5kRE9NTm9kZSIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwiY29udGV4dFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJfZGVmYXVsdCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIiwiX19yZWFjdEludGVybmFsU25hcHNob3QiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImlzUmVhY3RDb21wb25lbnQiLCJmb3VuZFdpbGxNb3VudE5hbWUiLCJmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIiwiZm91bmRXaWxsVXBkYXRlTmFtZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50TmFtZSIsIm5ld0FwaU5hbWUiLCJtYXliZVNuYXBzaG90Iiwic25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiY2xhc3NOYW1lc1NoYXBlIiwidGltZW91dHNTaGFwZSIsIl9wcm9wVHlwZXMiLCJfQ2hpbGRNYXBwaW5nIiwiaGFuZGxlRXhpdGVkIiwiZmlyc3RSZW5kZXIiLCJhcHBlYXJlZCIsInByZXZDaGlsZE1hcHBpbmciLCJnZXRJbml0aWFsQ2hpbGRNYXBwaW5nIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJnZXRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJfY29udmVydCIsIl9jb252ZXJ0MiIsIm5vZGVzIiwiY29udmVydE1hdGhFeHByZXNzaW9uIiwiX25vZGUiLCJvcCIsImZsaXBWYWx1ZSIsImlzVmFsdWVUeXBlIiwicmVkdWNlQWRkU3ViRXhwcmVzc2lvbiIsInJlZHVjZURpdmlzaW9uRXhwcmVzc2lvbiIsInJlZHVjZU11bHRpcGxpY2F0aW9uRXhwcmVzc2lvbiIsInJlZHVjZU1hdGhFeHByZXNzaW9uIiwiZ2xvYmFsU2NvcGUiLCJPTkUiLCJEZWNpbWFsIiwicm91bmRpbmciLCJ0b0V4cE5lZyIsInRvRXhwUG9zIiwiTE4xMCIsImV4dGVybmFsIiwiZGVjaW1hbEVycm9yIiwiaW52YWxpZEFyZ3VtZW50IiwiZXhwb25lbnRPdXRPZlJhbmdlIiwibWF0aGZsb29yIiwibWF0aHBvdyIsImlzRGVjaW1hbCIsIkJBU0UiLCJNQVhfRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJQIiwiY2FycnkiLCJ4ZCIsInlkIiwicHIiLCJ1bnNoaWZ0IiwiY2hlY2tJbnQzMiIsImRpZ2l0c1RvU3RyaW5nIiwid3MiLCJpbmRleE9mTGFzdFdvcmQiLCJnZXRaZXJvU3RyaW5nIiwiYWJzb2x1dGVWYWx1ZSIsImNvbXBhcmVkVG8iLCJjbXAiLCJ4ZEwiLCJ5ZEwiLCJkZWNpbWFsUGxhY2VzIiwiZHAiLCJkaXZpZGVkQnkiLCJkaXYiLCJkaXZpZGVkVG9JbnRlZ2VyQnkiLCJpZGl2IiwiZXF1YWxzIiwiZXhwb25lbnQiLCJnZXRCYXNlMTBFeHBvbmVudCIsImdyZWF0ZXJUaGFuIiwiZ3JlYXRlclRoYW5PckVxdWFsVG8iLCJpc2ludCIsImlzTmVnYXRpdmUiLCJpc25lZyIsImlzUG9zaXRpdmUiLCJpc3BvcyIsImlzWmVybyIsImxlc3NUaGFuIiwibGVzc1RoYW5PckVxdWFsVG8iLCJsb2dhcml0aG0iLCJsb2ciLCJ3cHIiLCJsbiIsIm1pbnVzIiwic3ViIiwibW9kdWxvIiwibW9kIiwicSIsIm5hdHVyYWxFeHBvbmVudGlhbCIsImV4cCIsIm5hdHVyYWxMb2dhcml0aG0iLCJuZWdhdGVkIiwibmVnIiwicGx1cyIsInNkIiwic3F1YXJlUm9vdCIsInRvRXhwb25lbnRpYWwiLCJtdWwiLCJyTCIsInNoaWZ0IiwidG9EZWNpbWFsUGxhY2VzIiwidG9kcCIsInJtIiwidG9GaXhlZCIsInRvaW50IiwidG9Qb3dlciIsInlJc0ludCIsInRvUHJlY2lzaW9uIiwidG9TaWduaWZpY2FudERpZ2l0cyIsInRvc2QiLCJtdWx0aXBseUludGVnZXIiLCJjb21wYXJlIiwiYUwiLCJiTCIsInByb2QiLCJwcm9kTCIsInFkIiwicmVtIiwicmVtTCIsInJlbTAiLCJ4aSIsInhMIiwieWQwIiwieUwiLCJ5eiIsImRlbm9taW5hdG9yIiwiZ2V0TG4xMCIsInpzIiwiYzAiLCJudW1lcmF0b3IiLCJwYXJzZURlY2ltYWwiLCJyZCIsImRvUm91bmQiLCJ4ZGkiLCJ4ZSIsInhMVHkiLCJpc0V4cCIsInBzIiwiUk9VTkRfVVAiLCJST1VORF9ET1dOIiwiUk9VTkRfQ0VJTCIsIlJPVU5EX0ZMT09SIiwiUk9VTkRfSEFMRl9VUCIsIlJPVU5EX0hBTEZfRE9XTiIsIlJPVU5EX0hBTEZfRVZFTiIsIlJPVU5EX0hBTEZfQ0VJTCIsIlJPVU5EX0hBTEZfRkxPT1IiLCJjb21wb3NlIiwiUExBQ0VfSE9MREVSIiwiaXNQbGFjZUhvbGRlciIsImN1cnJ5MCIsIl9jdXJyaWVkIiwiY3VycnlOIiwicmVzdEFyZ3MiLCJuZXdBcmdzIiwiX2xlbjMiLCJfa2V5MyIsImZucyIsImZpcnN0Rm4iLCJ0YWlsc0ZuIiwibGFzdFJlc3VsdCIsIl9sZW40IiwiX2tleTQiLCJwcmV2SXNBbmltYXRpb25BY3RpdmUiLCJjdXJTZWN0b3JzIiwicHJldlNlY3RvcnMiLCJnZXRUZXh0QW5jaG9yIiwiaXNBY3RpdmVJbmRleCIsInJlbmRlckxhYmVsTGluZUl0ZW0iLCJyZW5kZXJMYWJlbEl0ZW0iLCJhbGlnbm1lbnRCYXNlbGluZSIsInJlbmRlckxhYmVscyIsImxhYmVsTGluZSIsInZhbHVlS2V5IiwicGllUHJvcHMiLCJjdXN0b21MYWJlbFByb3BzIiwiY3VzdG9tTGFiZWxMaW5lUHJvcHMiLCJvZmZzZXRSYWRpdXMiLCJsYWJlbHMiLCJyZWFsRGF0YUtleSIsInJlbmRlclNlY3Rvckl0ZW0iLCJyZW5kZXJTZWN0b3JzU3RhdGljYWxseSIsImJsZW5kU3Ryb2tlIiwic2VjdG9yT3B0aW9ucyIsInNlY3RvclByb3BzIiwicmVuZGVyU2VjdG9yc1dpdGhBbmltYXRpb24iLCJjdXJBbmdsZSIsInBhZGRpbmdBbmdsZSIsImFuZ2xlSXAiLCJsYXRlc3QiLCJpbnRlcnBvbGF0b3JBbmdsZSIsInJlbmRlclNlY3RvcnMiLCJtaW5BbmdsZSIsIm5hbWVLZXkiLCJwYXJzZURlbHRhQW5nbGUiLCJnZXRSZWFsUGllRGF0YSIsInByZXNlbnRhdGlvblByb3BzIiwiY2VsbCIsInBhcnNlQ29vcmRpbmF0ZU9mUGllIiwibWF4UGllUmFkaXVzIiwicGllRGF0YSIsImFic0RlbHRhQW5nbGUiLCJub3RaZXJvSXRlbUNvdW50IiwicmVhbFRvdGFsQW5nbGUiLCJ0ZW1wU3RhcnRBbmdsZSIsIm1pZGRsZVJhZGl1cyIsInJlbmRlclBvbHlnb25TdGF0aWNhbGx5IiwicmFkYXIiLCJyZW5kZXJQb2x5Z29uV2l0aEFuaW1hdGlvbiIsInByZXZQb2ludHNEaWZmRmFjdG9yIiwicmVuZGVyUG9seWdvbiIsInBvaW50VmFsdWUiLCJyZW5kZXJTZWN0b3JTaGFwZSIsImludGVycG9sYXRvclN0YXJ0QW5nbGUiLCJpbnRlcnBvbGF0b3JFbmRBbmdsZSIsInJhZGl1c0F4aXNUaWNrcyIsImFuZ2xlQXhpc1RpY2tzIiwiYmFja2dyb3VuZFNlY3RvciIsImlzVG91Y2giLCJoYW5kbGVEcmFnIiwibGVhdmVUaW1lciIsImlzVHJhdmVsbGVyTW92aW5nIiwiaGFuZGxlVHJhdmVsbGVyTW92ZSIsImlzU2xpZGVNb3ZpbmciLCJoYW5kbGVTbGlkZURyYWciLCJoYW5kbGVEcmFnRW5kIiwiZGV0YWNoRHJhZ0VuZExpc3RlbmVyIiwiaGFuZGxlTGVhdmVXcmFwcGVyIiwibGVhdmVUaW1lT3V0IiwiaGFuZGxlRW50ZXJTbGlkZU9yVHJhdmVsbGVyIiwiaXNUZXh0QWN0aXZlIiwiaGFuZGxlTGVhdmVTbGlkZU9yVHJhdmVsbGVyIiwiaGFuZGxlU2xpZGVEcmFnU3RhcnQiLCJzbGlkZU1vdmVTdGFydFgiLCJhdHRhY2hEcmFnRW5kTGlzdGVuZXIiLCJ0cmF2ZWxsZXJEcmFnU3RhcnRIYW5kbGVycyIsImhhbmRsZVRyYXZlbGxlckRyYWdTdGFydCIsInJlbmRlckRlZmF1bHRUcmF2ZWxsZXIiLCJsaW5lWSIsInJlbmRlclRyYXZlbGxlciIsInRyYXZlbGxlcldpZHRoIiwicHJldlVwZGF0ZUlkIiwicHJldlRyYXZlbGxlcldpZHRoIiwicHJldlgiLCJzY2FsZVZhbHVlcyIsImNyZWF0ZVNjYWxlIiwiZ2V0SW5kZXhJblJhbmdlIiwiZ2V0SW5kZXgiLCJnYXAiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiZ2V0VGV4dE9mVGljayIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibmV3SW5kZXgiLCJtb3ZpbmdUcmF2ZWxsZXJJZCIsImJydXNoTW92ZVN0YXJ0WCIsInByZXZWYWx1ZSIsInJlbmRlclBhbm9yYW1hIiwiY2hhcnRFbGVtZW50IiwicmVuZGVyVHJhdmVsbGVyTGF5ZXIiLCJ0cmF2ZWxsZXJYIiwidHJhdmVsbGVyIiwidHJhdmVsbGVyUHJvcHMiLCJyZW5kZXJTbGlkZSIsInJlbmRlclRleHQiLCJhbHdheXNTaG93VGV4dCIsImlzUGFub3JhbWljIiwiZml4ZWRYIiwiZml4ZWRZIiwic2VnbWVudCIsImVuZFBvaW50cyIsImlzRml4ZWRYIiwiaXNGaXhlZFkiLCJpc1NlZ21lbnQiLCJ5Q29vcmQiLCJ4Q29vcmQiLCJnZXRFbmRQb2ludHMiLCJpc0Zyb250IiwiaXNYIiwiaXNZIiwiZ2V0Q29vcmRpbmF0ZSIsInJlbmRlckRvdCIsImhhc1gxIiwiaGFzWDIiLCJoYXNZMSIsImhhc1kyIiwieFZhbHVlMSIsInhWYWx1ZTIiLCJ5VmFsdWUxIiwieVZhbHVlMiIsInJhbmdlTWluIiwicmFuZ2VNYXgiLCJnZXRSZWN0IiwicmVuZGVyUmVjdCIsIm1pblRpY2tHYXAiLCJpbnRlcnZhbCIsImdldE51bWJlckludGVydmFsVGlja3MiLCJnZXRUaWNrc1N0YXJ0IiwiZ2V0VGlja3NFbmQiLCJwcmVzZXJ2ZUVuZCIsInNpemVLZXkiLCJ1bml0U2l6ZSIsInRhaWxDb250ZW50IiwidGFpbFNpemUiLCJ0YWlsR2FwIiwidGlja0Nvb3JkIiwiaXNTaG93Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwidmlld0JveE9sZCIsInJlc3RQcm9wc09sZCIsInR4IiwidHkiLCJ0aWNrTWFyZ2luIiwiZmluYWxUaWNrU2l6ZSIsImdldFRpY2tWZXJ0aWNhbEFuY2hvciIsIm5lZWRIZWlnaHQiLCJuZWVkV2lkdGgiLCJmaW5hbFRpY2tzIiwidmlzaWJsZVRpY2tzQ291bnQiLCJub1RpY2tzUHJvcHMiLCJjdXJUcmFwZXpvaWRzIiwidHJhcGV6b2lkcyIsInByZXZUcmFwZXpvaWRzIiwicmVuZGVyVHJhcGV6b2lkSXRlbSIsIlRyYXBlem9pZCIsInJlbmRlclRyYXBlem9pZHNTdGF0aWNhbGx5IiwidHJhcGV6b2lkT3B0aW9ucyIsInRyYXBlem9pZFByb3BzIiwicmVuZGVyVHJhcGV6b2lkc1dpdGhBbmltYXRpb24iLCJ1cHBlcldpZHRoIiwibG93ZXJXaWR0aCIsImludGVycG9sYXRvclVwcGVyV2lkdGgiLCJpbnRlcnBvbGF0b3JMb3dlcldpZHRoIiwicmVuZGVyVHJhcGV6b2lkcyIsImxhc3RTaGFwZVR5cGUiLCJnZXRSZWFsRnVubmVsRGF0YSIsImdldFJlYWxXaWR0aEhlaWdodCIsImN1c3RvbVdpZHRoIiwicmVhbEhlaWdodCIsInJlYWxXaWR0aCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZnVubmVsRGF0YSIsIm1heFZhbHVlIiwicm93SGVpZ2h0IiwibmV4dFZhbCIsInJhd1ZhbCIsIm5ld1kiLCJnZXRUcmFwZXpvaWRQYXRoIiwid2lkdGhHYXAiLCJjdXJyVXBwZXJXaWR0aCIsImN1cnJMb3dlcldpZHRoIiwiaW5pdFJhbmdlIiwiaW5pdEludGVycG9sYXRvciIsImltcGxpY2l0Iiwib3JkaW5hbCIsInVua25vd24iLCJiYW5kIiwib3JkaW5hbFJhbmdlIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ091dGVyIiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJwb2ludGlzaCIsImUxMCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50IiwicG93ZXIiLCJlcnJvciIsInRpY2tTdGVwIiwic3RlcDAiLCJzdGVwMSIsImYiLCJoaSIsImFzY2VuZGluZ0NvbXBhcmF0b3IiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RvciIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0IiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwicmdibiIsIlJnYiIsInJnYmEiLCJoc2xhIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTEiLCJtMiIsImJhc2lzIiwidjAiLCJ2MSIsInYyIiwidjMiLCJ0MiIsInQzIiwiY2hhbm5lbHMiLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsImJyaWdodGVyIiwiZGFya2VyIiwibGluZWFyIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJyZ2JHYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsImlzTnVtYmVyQXJyYXkiLCJpc1ZpZXciLCJnZW5lcmljQXJyYXkiLCJuYiIsIm5hIiwic2V0VGltZSIsInJlQSIsInJlQiIsImFtIiwiYm0iLCJicyIsImJpIiwib25lIiwibnVtYmVyQXJyYXkiLCJub3JtYWxpemUiLCJiaW1hcCIsImQwIiwiZDEiLCJwb2x5bWFwIiwidHJhbnNmb3JtZXIiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsInUiLCJjb250aW51b3VzIiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJ6ZXJvIiwiY29tbWEiLCJmb3JtYXREZWNpbWFsUGFydHMiLCJjb2VmZmljaWVudCIsInByZWZpeEV4cG9uZW50IiwidG9Mb2NhbGVTdHJpbmciLCJmb3JtYXRSb3VuZGVkIiwicHJlZml4ZXMiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFRyaW0iLCJmb3JtYXRQcmVmaXgiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwidGlja0Zvcm1hdCIsIm5pY2UiLCJwcmVzdGVwIiwibWF4SXRlciIsInRyYW5zZm9ybUxvZyIsInRyYW5zZm9ybUV4cCIsInRyYW5zZm9ybUxvZ24iLCJ0cmFuc2Zvcm1FeHBuIiwicG93MTAiLCJyZWZsZWN0IiwibG9nZ2lzaCIsImxvZ3MiLCJwb3dzIiwiRSIsImxvZzEwIiwibG9nMiIsImxvZ3AiLCJwb3dwIiwidHJhbnNmb3JtU3ltbG9nIiwibG9nMXAiLCJ0cmFuc2Zvcm1TeW1leHAiLCJleHBtMSIsInN5bWxvZ2lzaCIsInN5bWxvZyIsInRyYW5zZm9ybVBvdyIsInRyYW5zZm9ybVNxcnQiLCJ0cmFuc2Zvcm1TcXVhcmUiLCJwb3dpc2giLCJ1bnNxdWFyZSIsInNxdWFyZWQiLCJ2YWx1ZW9mIiwic3dhcCIsInF1YW50aWxlIiwiRmxvYXQ2NEFycmF5IiwibnVtYmVycyIsInZhbHVlMCIsInF1aWNrc2VsZWN0Iiwic3ViYXJyYXkiLCJxdWFudGlsZVNvcnRlZCIsInRocmVzaG9sZHMiLCJpbnZlcnRFeHRlbnQiLCJxdWFudGlsZXMiLCJxdWFudGl6ZSIsInRocmVzaG9sZCIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiZGF0ZSIsInNldE1vbnRoIiwic2V0SG91cnMiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwic2V0RGF0ZSIsImdldE1vbnRoIiwid2Vla2RheSIsImdldERhdGUiLCJnZXREYXkiLCJnZXRUaW1lem9uZU9mZnNldCIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5IiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRIb3VycyIsImdldFVUQ1NlY29uZHMiLCJ1dGNXZWVrZGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJzZXRVVENIb3VycyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjRGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwic2V0VVRDRnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsImxvY2FsRGF0ZSIsIkgiLCJNIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3RGF0ZSIsInRpbWVGb3JtYXQiLCJ1dGNGb3JtYXQiLCJwYWRzIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJuYW1lcyIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiVyIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVllYXIiLCJwYXJzZVpvbmUiLCJaIiwicGFyc2VRdWFydGVyIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VIb3VyMjQiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhcnNlVW5peFRpbWVzdGFtcCIsIlEiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsImRJU08iLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRZZWFySVNPIiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRGdWxsWWVhcklTTyIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZ2V0VVRDSG91cnMiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImdldFVUQ01vbnRoIiwiZm9ybWF0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJVVENkSVNPIiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ1llYXJJU08iLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFySVNPIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsIm5ld1BhcnNlIiwid2VlayIsInBhcnNlIiwiWCIsInV0Y1BhcnNlIiwiZm9ybWF0TG9jYWxlIiwiY2FsZW5kYXIiLCJ5ZWFyIiwibW9udGgiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJmb3JtYXRNaWxsaXNlY29uZCIsImZvcm1hdFNlY29uZCIsImZvcm1hdE1pbnV0ZSIsImZvcm1hdEhvdXIiLCJmb3JtYXREYXkiLCJmb3JtYXRXZWVrIiwiZm9ybWF0TW9udGgiLCJmb3JtYXRZZWFyIiwidGlja0ludGVydmFscyIsInRpY2tJbnRlcnZhbCIsInV0Y01vbnRoIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwidXRjVGltZSIsImsxMCIsInNlcXVlbnRpYWwiLCJzZXF1ZW50aWFsTG9nIiwic2VxdWVudGlhbFN5bWxvZyIsInNlcXVlbnRpYWxQb3ciLCJzZXF1ZW50aWFsU3FydCIsInNlcXVlbnRpYWxRdWFudGlsZSIsIkkiLCJrMjEiLCJyMiIsImRpdmVyZ2luZyIsImRpdmVyZ2luZ0xvZyIsImRpdmVyZ2luZ1N5bWxvZyIsImRpdmVyZ2luZ1BvdyIsImRpdmVyZ2luZ1NxcnQiLCJNYXBTaGltIiwiY2xhc3NfMSIsIl9fZW50cmllc19fIiwiZGVsZXRlIiwiY3R4IiwiX2EiLCJpc0Jyb3dzZXIiLCJnbG9iYWwkMSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSQxIiwidHJhbnNpdGlvbktleXMiLCJtdXRhdGlvbk9ic2VydmVyU3VwcG9ydGVkIiwiTXV0YXRpb25PYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciIsImNvbm5lY3RlZF8iLCJtdXRhdGlvbkV2ZW50c0FkZGVkXyIsIm11dGF0aW9uc09ic2VydmVyXyIsIm9ic2VydmVyc18iLCJvblRyYW5zaXRpb25FbmRfIiwicmVmcmVzaCIsImxlYWRpbmdDYWxsIiwidHJhaWxpbmdDYWxsIiwicmVzb2x2ZVBlbmRpbmciLCJwcm94eSIsInRpbWVvdXRDYWxsYmFjayIsInRpbWVTdGFtcCIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb25uZWN0XyIsInJlbW92ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZGlzY29ubmVjdF8iLCJ1cGRhdGVPYnNlcnZlcnNfIiwiYWN0aXZlT2JzZXJ2ZXJzIiwiZ2F0aGVyQWN0aXZlIiwiYnJvYWRjYXN0QWN0aXZlIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJfYiIsInByb3BlcnR5TmFtZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwiZ2V0V2luZG93T2YiLCJkZWZhdWx0VmlldyIsImVtcHR5UmVjdCIsImNyZWF0ZVJlY3RJbml0IiwidG9GbG9hdCIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwicG9zaXRpb25zIiwiZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhZGRpbmdzIiwicG9zaXRpb25zXzEiLCJnZXRQYWRkaW5ncyIsImhvcml6UGFkIiwidmVydFBhZCIsImJveFNpemluZyIsImlzRG9jdW1lbnRFbGVtZW50IiwidmVydFNjcm9sbGJhciIsImhvcml6U2Nyb2xsYmFyIiwiaXNTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdFbGVtZW50IiwiZ2V0Q29udGVudFJlY3QiLCJiYm94IiwiZ2V0U1ZHQ29udGVudFJlY3QiLCJSZXNpemVPYnNlcnZhdGlvbiIsImJyb2FkY2FzdFdpZHRoIiwiYnJvYWRjYXN0SGVpZ2h0IiwiY29udGVudFJlY3RfIiwiYnJvYWRjYXN0UmVjdCIsIlJlc2l6ZU9ic2VydmVyRW50cnkiLCJyZWN0SW5pdCIsIkNvbnN0ciIsImNvbnRlbnRSZWN0IiwiRE9NUmVjdFJlYWRPbmx5IiwiUmVzaXplT2JzZXJ2ZXJTUEkiLCJjb250cm9sbGVyIiwiY2FsbGJhY2tDdHgiLCJhY3RpdmVPYnNlcnZhdGlvbnNfIiwib2JzZXJ2YXRpb25zXyIsImNhbGxiYWNrXyIsImNvbnRyb2xsZXJfIiwiY2FsbGJhY2tDdHhfIiwiRWxlbWVudCIsIm9ic2VydmF0aW9ucyIsInVub2JzZXJ2ZSIsImNsZWFyQWN0aXZlIiwib2JzZXJ2YXRpb24iLCJSZXNpemVPYnNlcnZlciIsIlJlc3BvbnNpdmVDb250YWluZXIiLCJMaW5lQ2hhcnQiLCJCYXJDaGFydCIsIlBpZUNoYXJ0IiwiVHJlZW1hcCIsIlNhbmtleSIsIlJhZGFyQ2hhcnQiLCJTY2F0dGVyQ2hhcnQiLCJBcmVhQ2hhcnQiLCJSYWRpYWxCYXJDaGFydCIsIkNvbXBvc2VkQ2hhcnQiLCJGdW5uZWxDaGFydCIsInJlbmRlckljb24iLCJpbmFjdGl2ZUNvbG9yIiwiU0laRSIsImxlZ2VuZEljb24iLCJpY29uUHJvcHMiLCJyZW5kZXJJdGVtcyIsImRpc3BsYXkiLCJtYXJnaW5SaWdodCIsInN2Z1N0eWxlIiwiZmluYWxGb3JtYXR0ZXIiLCJ0ZXh0QWxpZ24iLCJpc01hc2tlZCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJnZXROYW5vU2Vjb25kcyIsImhydGltZSIsImxvYWRUaW1lIiwibW9kdWxlTG9hZFRpbWUiLCJub2RlTG9hZFRpbWUiLCJ1cFRpbWUiLCJwZXJmb3JtYW5jZSIsImhyIiwidXB0aW1lIiwiZ2V0VGltZSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwidmVyc2lvbnMiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl9hZGRDbGFzcyIsIl9yZW1vdmVDbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJnZXRDbGFzc05hbWVzIiwicmVtb3ZlQ2xhc3NlcyIsImFjdGl2ZUNsYXNzTmFtZSIsInJlZmxvd0FuZEFkZENsYXNzIiwiYXBwZWFyQ2xhc3NOYW1lIiwiZG9uZUNsYXNzTmFtZSIsImVudGVyQ2xhc3NOYW1lIiwiaXNTdHJpbmdDbGFzc05hbWVzIiwiX3RoaXMkZ2V0Q2xhc3NOYW1lczYiLCJzY3JvbGxUb3AiLCJjbGFzc0xpc3QiLCJfaGFzQ2xhc3MiLCJiYXNlVmFsIiwiY29udGFpbnMiLCJyZXBsYWNlQ2xhc3NOYW1lIiwib3JpZ0NsYXNzIiwiY2xhc3NUb1JlbW92ZSIsIl9hcmdzIiwiaGFuZGxlTGlmZWN5Y2xlIiwiaGFuZGxlRW50ZXJpbmciLCJoYW5kbGVFbnRlcmVkIiwiX2xlbjUiLCJfa2V5NSIsImhhbmRsZUV4aXRpbmciLCJfbGVuNiIsIl9rZXk2IiwiX2xlbjciLCJfa2V5NyIsImlkeCIsIm9yaWdpbmFsQXJncyIsIl9jaGlsZCRwcm9wcyIsImluUHJvcCIsIl9SZWFjdCRDaGlsZHJlbiR0b0FyciIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImdldFByb3AiLCJuZXh0Q2hpbGRNYXBwaW5nIiwiaGFzUHJldiIsImhhc05leHQiLCJpc0xlYXZpbmciLCJtYXBGbiIsIm1hcHBlciIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwiZGVmYXVsdEZvcm1hdHRlciIsIml0ZW1Tb3J0ZXIiLCJmaW5hbEl0ZW1TdHlsZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiZm9ybWF0dGVkIiwid3JhcHBlckNsYXNzTmFtZSIsImxhYmVsQ2xhc3NOYW1lIiwibGFiZWxGb3JtYXR0ZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmaW5hbExhYmVsU3R5bGUiLCJoYXNMYWJlbCIsImZpbmFsTGFiZWwiLCJ3cmFwcGVyQ04iLCJsYWJlbENOIiwidXBkYXRlRGltZW5zaW9uc0ltbWVkaWF0ZSIsIm5ld1NpemUiLCJnZXRDb250YWluZXJTaXplIiwib2xkV2lkdGgiLCJvbGRIZWlnaHQiLCJjb250YWluZXJXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsImhhbmRsZVJlc2l6ZSIsImNvbnRhaW5lclJlZiIsImNyZWF0ZVJlZiIsInJlbmRlckNoYXJ0IiwiYXNwZWN0IiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJjYWxjdWxhdGVkV2lkdGgiLCJjYWxjdWxhdGVkSGVpZ2h0IiwiaGFuZGxlV2lkdGgiLCJoYW5kbGVIZWlnaHQiLCJvblJlc2l6ZSIsInRhcmdldFJlZiIsIl9wb3N0Y3NzVmFsdWVQYXJzZXIyIiwiX3BhcnNlciIsIl9yZWR1Y2VyMiIsIl9zdHJpbmdpZmllcjIiLCJNQVRDSF9DQUxDIiwid2FsayIsImNvbnRlbnRzIiwic3RyaW5naWZ5IiwiYXN0IiwicGFyc2VyIiwicmVkdWNlZEFzdCIsIlZhbHVlUGFyc2VyIiwiY2IiLCJidWJibGUiLCJvcGVuUGFyZW50aGVzZXMiLCJjbG9zZVBhcmVudGhlc2VzIiwic2luZ2xlUXVvdGUiLCJkb3VibGVRdW90ZSIsImJhY2tzbGFzaCIsInNsYXNoIiwiY29sb24iLCJ0b2tlbiIsImVzY2FwZVBvcyIsIndoaXRlc3BhY2VQb3MiLCJ0b2tlbnMiLCJjb2RlIiwiYmFsYW5jZWQiLCJzb3VyY2VJbmRleCIsInVuY2xvc2VkIiwic3RyaW5naWZ5Tm9kZSIsImJ1ZiIsImN1c3RvbVJlc3VsdCIsIkVYUCIsImRvdHRlZCIsInNjaVBvcyIsImNvbnRhaW5zTnVtYmVyIiwiSmlzb25QYXJzZXJFcnJvciIsIm1zZyIsImhhc2giLCJzdGFja3RyYWNlIiwiZXhjZXB0aW9uIiwiZXgyIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJydiIsInRyYWNlIiwieXkiLCJoYXNQYXJ0aWFsTHJVcGdyYWRlT25Db25mbGljdCIsImVycm9yUmVjb3ZlcnlUb2tlbkRpc2NhcmRDb3VudCIsInN5bWJvbHNfIiwidGVybWluYWxzXyIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyMSIsIjIyIiwiMjMiLCIyNCIsIjI1IiwiMjYiLCIyNyIsIjI4IiwiVEVSUk9SIiwiRU9GIiwib3JpZ2luYWxRdW90ZU5hbWUiLCJvcmlnaW5hbFBhcnNlRXJyb3IiLCJjbGVhbnVwQWZ0ZXJQYXJzZSIsImNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvIiwieXlNZXJnZUxvY2F0aW9uSW5mbyIsIl9fcmVlbnRyYW50X2NhbGxfZGVwdGgiLCJfX2Vycm9yX2luZm9zIiwiX19lcnJvcl9yZWNvdmVyeV9pbmZvcyIsInF1b3RlTmFtZSIsImlkX3N0ciIsImdldFN5bWJvbE5hbWUiLCJkZXNjcmliZVN5bWJvbCIsInRlcm1pbmFsX2Rlc2NyaXB0aW9uc18iLCJjb2xsZWN0X2V4cGVjdGVkX3Rva2VuX3NldCIsImRvX25vdF9kZXNjcmliZSIsInRva2Vuc2V0IiwiY2hlY2siLCJzdGF0ZV9kZXNjcmlwdGlvbnNfIiwidGFibGUiLCJwcm9kdWN0aW9uc18iLCJydWxlIiwiYnAiLCJwZXJmb3JtQWN0aW9uIiwieXlzdGF0ZSIsInl5c3AiLCJ5eXZzdGFjayIsImxleGVyIiwiJCIsImZhbGxiYWNrIiwiZ290byIsImJ0IiwiZGVmYXVsdEFjdGlvbnMiLCJiZGEiLCJwYXJzZUVycm9yIiwiRXhjZXB0aW9uQ2xhc3MiLCJyZWNvdmVyYWJsZSIsImRlc3Ryb3kiLCJzc3RhY2siLCJ2c3RhY2siLCJzcCIsIk5PX0FDVElPTiIsIl9fbGV4ZXJfXyIsInNoYXJlZFN0YXRlX3l5IiwicHJlX3BhcnNlIiwicG9zdF9wYXJzZSIsInByZV9sZXgiLCJwb3N0X2xleCIsImZhc3RMZXgiLCJhc3NlcnQiLCJ5eUdldFNoYXJlZFN0YXRlIiwiZHN0Iiwic3JjIiwic2hhbGxvd19jb3B5X25vY2xvYmJlciIsInJlc3VsdFZhbHVlIiwiaW52b2tlX3Bvc3RfbWV0aG9kcyIsImRvX25vdF9udWtlX2Vycm9yaW5mb3MiLCJjbGVhbnVwQWZ0ZXJMZXgiLCJleCIsImV4cGVjdGVkIiwicGVpIiwiZXJyU3RyIiwieXl0ZXh0IiwidG9rZW5faWQiLCJ5eWxpbmVubyIsIm5ld19zdGF0ZSIsInN5bWJvbF9zdGFjayIsInN0YXRlX3N0YWNrIiwidmFsdWVfc3RhY2siLCJzdGFja19wb2ludGVyIiwicmVjIiwieXlydWxlbGVuIiwidGhpc19wcm9kdWN0aW9uIiwibGV4IiwieXl2YWwiLCJfJCIsInJldHZhbCIsInNldElucHV0IiwiY2FuSVVzZSIsImVyclN5bWJvbERlc2NyIiwic2hvd1Bvc2l0aW9uIiwibnRzeW1ib2wiLCJKaXNvbkxleGVyRXJyb3IiLCJFUlJPUiIsIl9fY3VycmVudFJ1bGVTZXRfXyIsIl9fZGVjb21wcmVzc2VkIiwiX2JhY2t0cmFjayIsIl9pbnB1dCIsIl9tb3JlIiwiX3NpZ25hbGVkX2Vycm9yX3Rva2VuIiwiY29uZGl0aW9uU3RhY2siLCJtYXRjaGVkIiwieXlsZW5nIiwieXlsbG9jIiwiY29uc3RydWN0TGV4RXJyb3JJbmZvIiwic2hvd19pbnB1dF9wb3NpdGlvbiIsInByZXR0eVByaW50UmFuZ2UiLCJwb3Nfc3RyIiwibG9jIiwieXllcnJvciIsImxpbmVub19tc2ciLCJsZXhlckVycm9yc0FyZVJlY292ZXJhYmxlIiwiZXh0cmFfZXJyb3JfYXR0cmlidXRlcyIsImNvbCIsImxhc3RfY29sdW1uIiwiZmlyc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfbGluZSIsInJ1bGVzIiwicnVsZV9yZSIsImNvbmRpdGlvbnMiLCJzcGVjIiwicnVsZV9pZHMiLCJydWxlX3JlZ2V4ZXMiLCJydWxlX25ld19pZHMiLCJfX3J1bGVfcmVnZXhlcyIsIl9fcnVsZV9jb3VudCIsImVkaXRSZW1haW5pbmdJbnB1dCIsImNwc0FyZyIsImNoIiwic2xpY2VfbGVuIiwiY2gyIiwidW5wdXQiLCJzdWJzdHIiLCJwcmVfbGluZXMiLCJtb3JlIiwiYmFja3RyYWNrX2xleGVyIiwibGVzcyIsInBhc3RJbnB1dCIsIm1heFNpemUiLCJwYXN0IiwidXBjb21pbmdJbnB1dCIsIm1heFByZWZpeCIsIm1heFBvc3RmaXgiLCJkZXJpdmVMb2NhdGlvbkluZm8iLCJhY3R1YWwiLCJwcmVjZWRpbmciLCJmb2xsb3dpbmciLCJjb250ZXh0X2xvYyIsImNvbnRleHRfbG9jMiIsImwwIiwibDEiLCJsaW5lbm9fZGlzcGxheV93aWR0aCIsIndzX3ByZWZpeCIsIm5vbmVtcHR5X2xpbmVfaW5kZXhlcyIsImxubyIsImVycnBmeCIsImNsaXBfc3RhcnQiLCJNSU5JTVVNX1ZJU0lCTEVfTk9ORU1QVFlfTElORV9DT1VOVCIsImNsaXBfZW5kIiwiaW50ZXJtZWRpYXRlX2xpbmUiLCJkZXNjcmliZVlZTExPQyIsImRpc3BsYXlfcmFuZ2VfdG9vIiwibDIiLCJ0ZXN0X21hdGNoIiwiaW5kZXhlZF9ydWxlIiwiYmFja3VwIiwibWF0Y2hfc3RyIiwibWF0Y2hfc3RyX2xlbiIsInRlbXBNYXRjaCIsIl9jdXJyZW50UnVsZXMiLCJ0cmFja1Bvc2l0aW9uIiwidG9wU3RhdGUiLCJyZWdleGVzIiwiZmxleCIsInBlbmRpbmdJbnB1dCIsImFjdGl2ZUNvbmRpdGlvbiIsImNvbmRpdGlvblN0YWNrRGVwdGgiLCJwdXNoU3RhdGUiLCJwb3BTdGF0ZSIsInN0YXRlU3RhY2tTaXplIiwieXlydWxlbnVtYmVyIiwiWVlfU1RBUlQiLCJzaW1wbGVDYXNlQWN0aW9uQ2x1c3RlcnMiLCIwIiwiMjkiLCIzMCIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsImluY2x1c2l2ZSIsIlBhcnNlciIsIl9jc3NVbml0Q29udmVydGVyIiwiX2Nzc1VuaXRDb252ZXJ0ZXIyIiwiY29udmVydEFic29sdXRlTGVuZ3RoIiwiY29udmVyc2lvbnMiLCJzb3VyY2VVbml0IiwidGFyZ2V0VW5pdCIsImNvbnZlcnRlZCIsImNhbGMiLCJwcmVjIiwiX3JlZHVjZXIiLCJfZ2V0TmljZVRpY2tWYWx1ZXMiLCJnZXRUaWNrVmFsdWVzIiwiX2RlY2ltYWwiLCJfdXRpbHMiLCJfYXJpdGhtZXRpYyIsImdldFZhbGlkSW50ZXJ2YWwiLCJfcmVmMiIsInZhbGlkTWluIiwidmFsaWRNYXgiLCJnZXRGb3JtYXRTdGVwIiwicm91Z2hTdGVwIiwiY29ycmVjdGlvbkZhY3RvciIsImRpZ2l0Q291bnQiLCJnZXREaWdpdENvdW50IiwiZGlnaXRDb3VudFZhbHVlIiwic3RlcFJhdGlvIiwic3RlcFJhdGlvU2NhbGUiLCJmb3JtYXRTdGVwIiwiZ2V0VGlja09mU2luZ2xlVmFsdWUiLCJhYnNWYWwiLCJtaWRkbGVJbmRleCIsImNhbGN1bGF0ZVN0ZXAiLCJ0aWNrTWluIiwidGlja01heCIsImJlbG93Q291bnQiLCJ1cENvdW50Iiwic2NhbGVDb3VudCIsIl9yZWYzIiwiX3JlZjQiLCJfZ2V0VmFsaWRJbnRlcnZhbCIsIl9nZXRWYWxpZEludGVydmFsMiIsImNvcm1pbiIsImNvcm1heCIsIl92YWx1ZXMiLCJfY2FsY3VsYXRlU3RlcCIsInJhbmdlU3RlcCIsIl9yZWY1IiwiX3JlZjYiLCJfZ2V0VmFsaWRJbnRlcnZhbDMiLCJfZ2V0VmFsaWRJbnRlcnZhbDQiLCJfcmVmNyIsIl9yZWY4IiwiX2dldFZhbGlkSW50ZXJ2YWw1IiwiX2dldFZhbGlkSW50ZXJ2YWw2IiwibmV3QSIsInVuaW50ZXJwb2xhdGVOdW1iZXIiLCJkaWZmIiwidW5pbnRlcnBvbGF0ZVRydW5jYXRpb24iLCJnZXRQb2x5Z29uUGF0aCIsInJlbmRlclBvbGFyQW5nbGVzIiwicmVuZGVyQ29uY2VudHJpY0NpcmNsZSIsImV4dHJhUHJvcHMiLCJyZW5kZXJDb25jZW50cmljUG9seWdvbiIsInJlbmRlckNvbmNlbnRyaWNQYXRoIiwiZ3JpZFR5cGUiLCJyZW5kZXJMaW5lSXRlbSIsInJlbmRlckhvcml6b250YWwiLCJob3Jpem9udGFsUG9pbnRzIiwiaG9yaXpvbnRhbCIsInJlbmRlclZlcnRpY2FsIiwidmVydGljYWxQb2ludHMiLCJ2ZXJ0aWNhbCIsInJlbmRlclZlcnRpY2FsU3RyaXBlcyIsInZlcnRpY2FsRmlsbCIsInZlcnRpY2FsUG9pbnRzVXBkYXRlZCIsImNvbG9ySW5kZXgiLCJyZW5kZXJIb3Jpem9udGFsU3RyaXBlcyIsImhvcml6b250YWxGaWxsIiwiaG9yaXpvbnRhbFBvaW50c1VwZGF0ZWQiLCJzcGVjaWZpZWRUaWNrcyIsImFyZWFzIiwiaWRLZXkiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJFdmVudHMiLCJFRSIsImVtaXR0ZXIiLCJsaXN0ZW5lciIsImV2dCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiZXZlbnROYW1lcyIsImhhbmRsZXJzIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiYTIiLCJhMyIsImE0IiwiYTUiLCJwcmVmaXhlZCIsImNvbXB1dGVOb2RlIiwiY2hpbGREZXB0aCIsImNvbXB1dGVkQ2hpbGRyZW4iLCJnZXRXb3JzdFNjb3JlIiwicm93IiwicGFyZW50U2l6ZSIsImFzcGVjdFJhdGlvIiwicGFyZW50QXJlYSIsInJvd0FyZWEiLCJwYXJlbnRSZWN0IiwiaXNGbHVzaCIsImN1clgiLCJob3Jpem9udGFsUG9zaXRpb24iLCJyb3dXaWR0aCIsImN1clkiLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwic3F1YXJpZnkiLCJmaWx0ZXJSZWN0IiwiYmVzdCIsInNjb3JlIiwic2NhbGVDaGlsZHJlbiIsImFyZWFWYWx1ZVJhdGlvIiwicmF0aW8iLCJnZXRBcmVhT2ZDaGlsZHJlbiIsInRlbXBDaGlsZHJlbiIsImFjdGl2ZU5vZGUiLCJmb3JtYXRSb290IiwiY3VycmVudFJvb3QiLCJuZXN0SW5kZXgiLCJwcmV2VHlwZSIsInByZXZEYXRhS2V5IiwicHJldkFzcGVjdFJhdGlvIiwiaGFuZGxlTmVzdEluZGV4IiwicmVuZGVySXRlbSIsIm5vZGVQcm9wcyIsImlzTGVhZiIsImNvbG9yUGFuZWwiLCJyZW5kZXJDb250ZW50SXRlbSIsImFycm93IiwibmFtZVNpemUiLCJmb250U2l6ZSIsIkNPTE9SX1BBTkVMIiwicmVuZGVyTm9kZSIsInJlbmRlckFsbE5vZGVzIiwicmVuZGVyTmVzdEluZGV4IiwibmVzdEluZGV4Q29udGVudCIsIm1hcmdpblRvcCIsImRlZmF1bHRDb29yZGluYXRlT2ZUb29sdGlwIiwiY2VudGVyWSIsImdldFN1bU9mSWRzIiwibGlua3MiLCJnZXRTdW1XaXRoV2VpZ2h0ZWRTb3VyY2UiLCJ0cmVlIiwic291cmNlTm9kZSIsImdldFN1bVdpdGhXZWlnaHRlZFRhcmdldCIsInRhcmdldE5vZGUiLCJhc2NlbmRpbmdZIiwidXBkYXRlRGVwdGhPZlRhcmdldHMiLCJjdXJOb2RlIiwidGFyZ2V0Tm9kZXMiLCJyZXNvbHZlQ29sbGlzaW9ucyIsImRlcHRoVHJlZSIsIm5vZGVQYWRkaW5nIiwicmVsYXhMZWZ0VG9SaWdodCIsIm1heERlcHRoIiwic291cmNlTGlua3MiLCJzb3VyY2VTdW0iLCJyZWxheFJpZ2h0VG9MZWZ0IiwidGFyZ2V0TGlua3MiLCJ0YXJnZXRTdW0iLCJjb21wdXRlRGF0YSIsIm5vZGVXaWR0aCIsInNvdXJjZU5vZGVzIiwic2VhcmNoVGFyZ2V0c0FuZFNvdXJjZXMiLCJjaGlsZFdpZHRoIiwiZ2V0Tm9kZXNUcmVlIiwiZ2V0RGVwdGhUcmVlIiwibmV3TGlua3MiLCJ5UmF0aW8iLCJ1cGRhdGVZT2ZUcmVlIiwic3kiLCJ0TGVuIiwidXBkYXRlWU9mTGlua3MiLCJhY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudFR5cGUiLCJwcmV2SXRlcmF0aW9ucyIsInByZXZOb2RlV2lkdGgiLCJwcmV2Tm9kZVBhZGRpbmciLCJjb250ZW50V2lkdGgiLCJjb250ZW50SGVpZ2h0IiwicmVuZGVyTGlua0l0ZW0iLCJzb3VyY2VYIiwic291cmNlWSIsInNvdXJjZUNvbnRyb2xYIiwidGFyZ2V0WCIsInRhcmdldFkiLCJ0YXJnZXRDb250cm9sWCIsImxpbmtXaWR0aCIsInN0cm9rZU9wYWNpdHkiLCJyZW5kZXJMaW5rcyIsImxpbmtDdXJ2YXR1cmUiLCJsaW5rQ29udGVudCIsImthIiwia2IiLCJzb3VyY2VSZWxhdGl2ZVkiLCJ0YXJnZXRSZWxhdGl2ZVkiLCJpbnRlcnBvbGF0aW9uRnVuYyIsImxpbmtQcm9wcyIsInJlbmRlck5vZGVJdGVtIiwicmVuZGVyTm9kZXMiLCJub2RlQ29udGVudCIsImdldFBheWxvYWRPZlRvb2x0aXAiLCJmcmFtZUlkIiwid3JhcHBlckZuIiwibGlzdEhhbmRsZSIsImlzU1NSIiwiaXNET01FbGVtZW50IiwiSFRNTERvY3VtZW50IiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiUmVzaXplRGV0ZWN0b3IiLCJfc3VwZXIiLCJyZXNpemVIYW5kbGVyIiwiZ2V0RWxlbWVudCIsIm9ic2VydmFibGVFbGVtZW50IiwicmVzaXplT2JzZXJ2ZXIiLCJxdWVyeVNlbGVjdG9yIiwidGFyZ2V0RG9tRWwiLCJjdXJyZW50RWxlbWVudCIsImdldFJlbmRlclR5cGUiLCJwYXJlbnRFbGVtZW50IiwicmFmQ2xlYW4iLCJfdGhpcyRzdGF0ZSIsIndpZHRoQ3VycmVudCIsImhlaWdodEN1cnJlbnQiLCJjcmVhdGVVcGRhdGVyIiwiaXNTaXplQ2hhbmdlZCIsInNraXBPbk1vdW50IiwicmVmcmVzaE1vZGUiLCJyZWZyZXNoUmF0ZSIsInJlZnJlc2hPcHRpb25zIiwidW5tb3VudGVkIiwiY3JlYXRlUmVzaXplSGFuZGxlciIsImF0dGFjaE9ic2VydmVyIiwiY2FuY2VsSGFuZGxlciIsIldyYXBwZXJUYWciLCJfdGhpcyRzdGF0ZTIiLCJuYXRpdmVQcm9wcyIsIlJlc2l6ZURldGVjdG9ySE9DIiwiZm9yd2FyZGVkUmVmIiwiZm9yd2FyZFJlZldyYXBwZXIiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFNBQVVBLFFBQVEs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SUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElB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eHhJLEtBQUttTCxNQUFNcW1JLEVBQVEsQ0FBQ2g3SCxNQUFNOGtCLE9BQU9od0IsS0FFRCxNQUFvQix1QkFFNURvMkMsRUFtQlQsT0FoQkEsRUFBYXl4RixFQUFtQixDQUFDLENBQy9CL3hJLElBQUssU0FDTE4sTUFBTyxXQUNMLElBQUlnaEQsRUFBY3RyQyxLQUFLdlUsTUFDbkJteEksRUFBZXR4RixFQUFZc3hGLGFBQzNCejFHLEVBQU8sRUFBeUJta0IsRUFBYSxDQUFDLGlCQUU5Q3V3RSxFQUFZK2dCLEdBQWdCNThILEtBQUs0K0MsSUFDckMsT0FBb0IsSUFBTW5mLGNBQWMsRUFBZ0I0UCxFQUFTLEdBQUkxeEIsRUFBUyxDQUM1RWsrRixVQUFXQSxJQUNJLElBQU1wOEUsY0FBY3FrQixFQUFXelUsRUFBUyxDQUN2RHdzRSxVQUFXQSxHQUNWMTBGLFNBSUF3MUcsRUFyQzRCLENBc0NuQyxJQUFNNzRFLFdBRVIsU0FBUys0RSxFQUFrQnB4SSxFQUFPbXpELEdBQ2hDLE9BQW9CLElBQU1uZixjQUFjazlGLEVBQW1CdHRGLEVBQVMsR0FBSTVqRCxFQUFPLENBQzdFbXhJLGFBQWNoK0UsS0FJbEIsSUFBSWgxRCxFQUFPazZELEVBQVVydkIsYUFBZXF2QixFQUFVbDZELEtBSzlDLE9BSkFpekksRUFBa0Jwb0csWUFBYyxzQkFBc0IzUCxPQUFPbDdCLEVBQU0sS0FDbkUreUksRUFBa0J2dEYsYUFBZSxDQUMvQnd0RixrQkFBY3RsSSxHQUVJLHFCQUFXdWxJLElDdkZsQiIsImZpbGUiOiJSZWNoYXJ0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSwgcmVxdWlyZShcInByb3AtdHlwZXNcIiksIHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicmVhY3RcIiwgXCJwcm9wLXR5cGVzXCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlJlY2hhcnRzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJSZWNoYXJ0c1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUHJvcFR5cGVzXCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNTJfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187IiwiaW1wb3J0IHtcbiAgQXJpYUF0dHJpYnV0ZXMsXG4gIFNWR1Byb3BzLFxuICBTeW50aGV0aWNFdmVudCxcbiAgQ2xpcGJvYXJkRXZlbnQsXG4gIENvbXBvc2l0aW9uRXZlbnQsXG4gIERyYWdFdmVudCxcbiAgRm9jdXNFdmVudCxcbiAgRm9ybUV2ZW50LFxuICBLZXlib2FyZEV2ZW50LFxuICBNb3VzZUV2ZW50LFxuICBUb3VjaEV2ZW50LFxuICBQb2ludGVyRXZlbnQsXG4gIFVJRXZlbnQsXG4gIFdoZWVsRXZlbnQsXG4gIEFuaW1hdGlvbkV2ZW50LFxuICBUcmFuc2l0aW9uRXZlbnQsXG4gIFJlYWN0Tm9kZSxcbiAgQ29tcG9uZW50LFxuICBpc1ZhbGlkRWxlbWVudCxcbiAgRnVuY3Rpb25Db21wb25lbnQsXG4gIFJlYWN0RWxlbWVudCxcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNjYWxlQ29udGludW91c051bWVyaWMgYXMgRDNTY2FsZUNvbnRpbnVvdXNOdW1lcmljIH0gZnJvbSAnZDMtc2NhbGUnO1xuXG5leHBvcnQgdHlwZSBTdGFja09mZnNldFR5cGUgPSAnc2lnbicgfCAnZXhwYW5kJyB8ICdub25lJyB8ICd3aWdnbGUnIHwgJ3NpbGhvdWV0dGUnO1xuZXhwb3J0IHR5cGUgTGF5b3V0VHlwZSA9ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcgfCAnY2VudHJpYycgfCAncmFkaWFsJztcbmV4cG9ydCB0eXBlIFBvbGFyTGF5b3V0VHlwZSA9ICdyYWRpYWwnIHwgJ2NlbnRyaWMnO1xuZXhwb3J0IHR5cGUgQXhpc1R5cGUgPSAneEF4aXMnIHwgJ3lBeGlzJyB8ICdhbmdsZUF4aXMnIHwgJ3JhZGl1c0F4aXMnO1xuZXhwb3J0IHR5cGUgRGF0YUtleTxUPiA9IHN0cmluZyB8IG51bWJlciB8ICgob2JqOiBUKSA9PiBhbnkpO1xuZXhwb3J0IHR5cGUgUHJlc2VudGF0aW9uQXR0cmlidXRlc1dpdGhQcm9wczxQLCBUPiA9IEFyaWFBdHRyaWJ1dGVzICZcbiAgRE9NQXR0cmlidXRlc1dpdGhQcm9wczxQLCBUPiAmXG4gIE9taXQ8U1ZHUHJvcHM8VD4sIGtleW9mIERPTUF0dHJpYnV0ZXNXaXRoUHJvcHM8UCwgVD4+O1xuZXhwb3J0IHR5cGUgUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudDxQLCBUPiA9IEFyaWFBdHRyaWJ1dGVzICZcbiAgRE9NQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudDxQLCBUPiAmXG4gIE9taXQ8U1ZHUHJvcHM8VD4sIGtleW9mIERPTUF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQ8UCwgVD4+O1xuXG5leHBvcnQgdHlwZSBTeW1ib2xUeXBlID0gJ2NpcmNsZScgfCAnY3Jvc3MnIHwgJ2RpYW1vbmQnIHwgJ3NxdWFyZScgfCAnc3RhcicgfCAndHJpYW5nbGUnIHwgJ3d5ZSc7XG5leHBvcnQgdHlwZSBMZWdlbmRUeXBlID1cbiAgfCAncGxhaW5saW5lJ1xuICB8ICdsaW5lJ1xuICB8ICdzcXVhcmUnXG4gIHwgJ3JlY3QnXG4gIHwgJ2NpcmNsZSdcbiAgfCAnY3Jvc3MnXG4gIHwgJ2RpYW1vbmQnXG4gIHwgJ3N0YXInXG4gIHwgJ3RyaWFuZ2xlJ1xuICB8ICd3eWUnXG4gIHwgJ25vbmUnO1xuZXhwb3J0IHR5cGUgVG9vbHRpcFR5cGUgPSAnbm9uZSc7XG5leHBvcnQgaW50ZXJmYWNlIENvb3JkaW5hdGUge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFydENvb3JkaW5hdGUgZXh0ZW5kcyBDb29yZGluYXRlIHtcbiAgeEF4aXM/OiBhbnk7XG4gIHlBeGlzPzogYW55O1xuICB3aWR0aD86IGFueTtcbiAgaGVpZ2h0PzogYW55O1xuICBvZmZzZXQ/OiBDaGFydE9mZnNldDtcbiAgYW5nbGU/OiBudW1iZXI7XG4gIHJhZGl1cz86IG51bWJlcjtcbiAgY3g/OiBudW1iZXI7XG4gIGN5PzogbnVtYmVyO1xuICBzdGFydEFuZ2xlPzogbnVtYmVyO1xuICBlbmRBbmdsZT86IG51bWJlcjtcbiAgaW5uZXJSYWRpdXM/OiBudW1iZXI7XG4gIG91dGVyUmFkaXVzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBTY2FsZVR5cGUgPVxuICB8ICdhdXRvJ1xuICB8ICdsaW5lYXInXG4gIHwgJ3BvdydcbiAgfCAnc3FydCdcbiAgfCAnbG9nJ1xuICB8ICdpZGVudGl0eSdcbiAgfCAndGltZSdcbiAgfCAnYmFuZCdcbiAgfCAncG9pbnQnXG4gIHwgJ29yZGluYWwnXG4gIHwgJ3F1YW50aWxlJ1xuICB8ICdxdWFudGl6ZSdcbiAgfCAndXRjJ1xuICB8ICdzZXF1ZW50aWFsJ1xuICB8ICd0aHJlc2hvbGQnO1xuXG4vL1xuLy8gRXZlbnQgSGFuZGxlciBUeXBlcyAtLSBDb3BpZWQgZnJvbSBAdHlwZXMvcmVhY3QvaW5kZXguZC50cyBhbmQgYWRhcHRlZCBmb3IgUHJvcHMuXG4vL1xuXG50eXBlIEV2ZW50SGFuZGxlcjxQLCBFIGV4dGVuZHMgU3ludGhldGljRXZlbnQ8YW55Pj4gPSB7XG4gIGJpdmFyaWFuY2VIYWNrKHByb3BzOiBQLCBldmVudDogRSk6IHZvaWQ7XG59WydiaXZhcmlhbmNlSGFjayddO1xuXG50eXBlIFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEV2ZW50SGFuZGxlcjxQLCBTeW50aGV0aWNFdmVudDxUPj47XG50eXBlIENsaXBib2FyZEV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgQ2xpcGJvYXJkRXZlbnQ8VD4+O1xudHlwZSBDb21wb3NpdGlvbkV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgQ29tcG9zaXRpb25FdmVudDxUPj47XG50eXBlIERyYWdFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gRXZlbnRIYW5kbGVyPFAsIERyYWdFdmVudDxUPj47XG50eXBlIEZvY3VzRXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEV2ZW50SGFuZGxlcjxQLCBGb2N1c0V2ZW50PFQ+PjtcbnR5cGUgRm9ybUV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgRm9ybUV2ZW50PFQ+PjtcbnR5cGUgS2V5Ym9hcmRFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gRXZlbnRIYW5kbGVyPFAsIEtleWJvYXJkRXZlbnQ8VD4+O1xudHlwZSBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgTW91c2VFdmVudDxUPj47XG50eXBlIFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEV2ZW50SGFuZGxlcjxQLCBUb3VjaEV2ZW50PFQ+PjtcbnR5cGUgUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgUG9pbnRlckV2ZW50PFQ+PjtcbnR5cGUgVUlFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gRXZlbnRIYW5kbGVyPFAsIFVJRXZlbnQ8VD4+O1xudHlwZSBXaGVlbEV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgV2hlZWxFdmVudDxUPj47XG50eXBlIEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBFdmVudEhhbmRsZXI8UCwgQW5pbWF0aW9uRXZlbnQ8VD4+O1xudHlwZSBUcmFuc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEV2ZW50SGFuZGxlcjxQLCBUcmFuc2l0aW9uRXZlbnQ8VD4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERPTUF0dHJpYnV0ZXNXaXRoUHJvcHM8UCwgVD4ge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/OiB7XG4gICAgX19odG1sOiBzdHJpbmc7XG4gIH07XG5cbiAgLy8gQ2xpcGJvYXJkIEV2ZW50c1xuICBvbkNvcHk/OiBDbGlwYm9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29weUNhcHR1cmU/OiBDbGlwYm9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ3V0PzogQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkN1dENhcHR1cmU/OiBDbGlwYm9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGFzdGU/OiBDbGlwYm9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGFzdGVDYXB0dXJlPzogQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIENvbXBvc2l0aW9uIEV2ZW50c1xuICBvbkNvbXBvc2l0aW9uRW5kPzogQ29tcG9zaXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29tcG9zaXRpb25FbmRDYXB0dXJlPzogQ29tcG9zaXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29tcG9zaXRpb25TdGFydD86IENvbXBvc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlPzogQ29tcG9zaXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29tcG9zaXRpb25VcGRhdGU/OiBDb21wb3NpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmU/OiBDb21wb3NpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBGb2N1cyBFdmVudHNcbiAgb25Gb2N1cz86IEZvY3VzRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkZvY3VzQ2FwdHVyZT86IEZvY3VzRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkJsdXI/OiBGb2N1c0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25CbHVyQ2FwdHVyZT86IEZvY3VzRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIEZvcm0gRXZlbnRzXG4gIG9uQ2hhbmdlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DaGFuZ2VDYXB0dXJlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25CZWZvcmVJbnB1dD86IEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQmVmb3JlSW5wdXRDYXB0dXJlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25JbnB1dD86IEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uSW5wdXRDYXB0dXJlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25SZXNldD86IEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUmVzZXRDYXB0dXJlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TdWJtaXQ/OiBGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblN1Ym1pdENhcHR1cmU/OiBGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkludmFsaWQ/OiBGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkludmFsaWRDYXB0dXJlPzogRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBJbWFnZSBFdmVudHNcbiAgb25Mb2FkPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTG9hZENhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FcnJvcj86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+OyAvLyBhbHNvIGEgTWVkaWEgRXZlbnRcbiAgb25FcnJvckNhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjsgLy8gYWxzbyBhIE1lZGlhIEV2ZW50XG5cbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIG9uS2V5RG93bj86IEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbktleURvd25DYXB0dXJlPzogS2V5Ym9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uS2V5UHJlc3M/OiBLZXlib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25LZXlQcmVzc0NhcHR1cmU/OiBLZXlib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25LZXlVcD86IEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbktleVVwQ2FwdHVyZT86IEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIE1lZGlhIEV2ZW50c1xuICBvbkFib3J0PzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQWJvcnRDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ2FuUGxheT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNhblBsYXlDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ2FuUGxheVRocm91Z2g/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DYW5QbGF5VGhyb3VnaENhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EdXJhdGlvbkNoYW5nZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVtcHRpZWQ/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FbXB0aWVkQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuY3J5cHRlZD86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuY3J5cHRlZENhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FbmRlZD86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuZGVkQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvYWRlZERhdGE/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Mb2FkZWREYXRhQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvYWRlZE1ldGFkYXRhPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTG9hZGVkTWV0YWRhdGFDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTG9hZFN0YXJ0PzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTG9hZFN0YXJ0Q2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBhdXNlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGF1c2VDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGxheT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBsYXlDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGxheWluZz86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBsYXlpbmdDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUHJvZ3Jlc3M/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qcm9ncmVzc0NhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25SYXRlQ2hhbmdlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUmF0ZUNoYW5nZUNhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TZWVrZWQ/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TZWVrZWRDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU2Vla2luZz86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblNlZWtpbmdDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU3RhbGxlZD86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblN0YWxsZWRDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU3VzcGVuZD86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblN1c3BlbmRDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVGltZVVwZGF0ZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRpbWVVcGRhdGVDYXB0dXJlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVm9sdW1lQ2hhbmdlPzogUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVm9sdW1lQ2hhbmdlQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbldhaXRpbmc/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25XYWl0aW5nQ2FwdHVyZT86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIE1vdXNlRXZlbnRzXG4gIG9uQXV4Q2xpY2s/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25BdXhDbGlja0NhcHR1cmU/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNsaWNrQ2FwdHVyZT86IE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbnRleHRNZW51PzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29udGV4dE1lbnVDYXB0dXJlPzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRG91YmxlQ2xpY2s/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Eb3VibGVDbGlja0NhcHR1cmU/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnPzogRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnQ2FwdHVyZT86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0VuZD86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0VuZENhcHR1cmU/OiBEcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyYWdFbnRlcj86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0VudGVyQ2FwdHVyZT86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0V4aXQ/OiBEcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyYWdFeGl0Q2FwdHVyZT86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0xlYXZlPzogRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnTGVhdmVDYXB0dXJlPzogRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnT3Zlcj86IERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ092ZXJDYXB0dXJlPzogRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnU3RhcnQ/OiBEcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyYWdTdGFydENhcHR1cmU/OiBEcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyb3A/OiBEcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyb3BDYXB0dXJlPzogRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZURvd24/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZURvd25DYXB0dXJlPzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VFbnRlcj86IE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlTGVhdmU/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU1vdmU/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU1vdmVDYXB0dXJlPzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VPdXQ/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU91dENhcHR1cmU/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU92ZXI/OiBNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU92ZXJDYXB0dXJlPzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VVcD86IE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlVXBDYXB0dXJlPzogTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gU2VsZWN0aW9uIEV2ZW50c1xuICBvblNlbGVjdD86IFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblNlbGVjdENhcHR1cmU/OiBSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgb25Ub3VjaENhbmNlbD86IFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRvdWNoQ2FuY2VsQ2FwdHVyZT86IFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRvdWNoRW5kPzogVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hFbmRDYXB0dXJlPzogVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hNb3ZlPzogVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hNb3ZlQ2FwdHVyZT86IFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRvdWNoU3RhcnQ/OiBUb3VjaEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Ub3VjaFN0YXJ0Q2FwdHVyZT86IFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIFBvaW50ZXIgRXZlbnRzXG4gIG9uUG9pbnRlckRvd24/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJEb3duQ2FwdHVyZT86IFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlck1vdmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJNb3ZlQ2FwdHVyZT86IFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlclVwPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyVXBDYXB0dXJlPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyQ2FuY2VsPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyQ2FuY2VsQ2FwdHVyZT86IFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlckVudGVyPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyRW50ZXJDYXB0dXJlPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyTGVhdmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJMZWF2ZUNhcHR1cmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJPdmVyPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyT3ZlckNhcHR1cmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJPdXQ/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJPdXRDYXB0dXJlPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Hb3RQb2ludGVyQ2FwdHVyZT86IFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uR290UG9pbnRlckNhcHR1cmVDYXB0dXJlPzogUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Mb3N0UG9pbnRlckNhcHR1cmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvc3RQb2ludGVyQ2FwdHVyZUNhcHR1cmU/OiBQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIFVJIEV2ZW50c1xuICBvblNjcm9sbD86IFVJRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblNjcm9sbENhcHR1cmU/OiBVSUV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBXaGVlbCBFdmVudHNcbiAgb25XaGVlbD86IFdoZWVsRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbldoZWVsQ2FwdHVyZT86IFdoZWVsRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIEFuaW1hdGlvbiBFdmVudHNcbiAgb25BbmltYXRpb25TdGFydD86IEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25BbmltYXRpb25TdGFydENhcHR1cmU/OiBBbmltYXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQW5pbWF0aW9uRW5kPzogQW5pbWF0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkFuaW1hdGlvbkVuZENhcHR1cmU/OiBBbmltYXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQW5pbWF0aW9uSXRlcmF0aW9uPzogQW5pbWF0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkFuaW1hdGlvbkl0ZXJhdGlvbkNhcHR1cmU/OiBBbmltYXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gVHJhbnNpdGlvbiBFdmVudHNcbiAgb25UcmFuc2l0aW9uRW5kPzogVHJhbnNpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25UcmFuc2l0aW9uRW5kQ2FwdHVyZT86IFRyYW5zaXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG59XG5cbnR5cGUgQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBFIGV4dGVuZHMgU3ludGhldGljRXZlbnQ8YW55Pj4gPSB7XG4gIGJpdmFyaWFuY2VIYWNrKGRhdGE6IFAsIGluZGV4OiBudW1iZXIsIGV2ZW50OiBFKTogdm9pZDtcbn1bJ2JpdmFyaWFuY2VIYWNrJ107XG5cbnR5cGUgQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEFkYXB0Q2hpbGRFdmVudEhhbmRsZXI8UCwgU3ludGhldGljRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEFkYXB0Q2hpbGRFdmVudEhhbmRsZXI8UCwgQ2xpcGJvYXJkRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkQ29tcG9zaXRpb25FdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBDb21wb3NpdGlvbkV2ZW50PFQ+PjtcbnR5cGUgQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBEcmFnRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkRm9jdXNFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBGb2N1c0V2ZW50PFQ+PjtcbnR5cGUgQWRhcHRDaGlsZEZvcm1FdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBGb3JtRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkS2V5Ym9hcmRFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBLZXlib2FyZEV2ZW50PFQ+PjtcbnR5cGUgQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQgPSBFbGVtZW50PiA9IEFkYXB0Q2hpbGRFdmVudEhhbmRsZXI8UCwgTW91c2VFdmVudDxUPj47XG50eXBlIEFkYXB0Q2hpbGRUb3VjaEV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBBZGFwdENoaWxkRXZlbnRIYW5kbGVyPFAsIFRvdWNoRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBBZGFwdENoaWxkRXZlbnRIYW5kbGVyPFAsIFBvaW50ZXJFdmVudDxUPj47XG50eXBlIEFkYXB0Q2hpbGRVSUV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBBZGFwdENoaWxkRXZlbnRIYW5kbGVyPFAsIFVJRXZlbnQ8VD4+O1xudHlwZSBBZGFwdENoaWxkV2hlZWxFdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBXaGVlbEV2ZW50PFQ+PjtcbnR5cGUgQWRhcHRDaGlsZEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUID0gRWxlbWVudD4gPSBBZGFwdENoaWxkRXZlbnRIYW5kbGVyPFAsIEFuaW1hdGlvbkV2ZW50PFQ+PjtcbnR5cGUgQWRhcHRDaGlsZFRyYW5zaXRpb25FdmVudEhhbmRsZXI8UCwgVCA9IEVsZW1lbnQ+ID0gQWRhcHRDaGlsZEV2ZW50SGFuZGxlcjxQLCBUcmFuc2l0aW9uRXZlbnQ8VD4+O1xuXG5leHBvcnQgdHlwZSBET01BdHRyaWJ1dGVzQWRhcHRDaGlsZEV2ZW50PFAsIFQ+ID0ge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/OiB7XG4gICAgX19odG1sOiBzdHJpbmc7XG4gIH07XG5cbiAgLy8gQ2xpcGJvYXJkIEV2ZW50c1xuICBvbkNvcHk/OiBBZGFwdENoaWxkQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvcHlDYXB0dXJlPzogQWRhcHRDaGlsZENsaXBib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DdXQ/OiBBZGFwdENoaWxkQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkN1dENhcHR1cmU/OiBBZGFwdENoaWxkQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBhc3RlPzogQWRhcHRDaGlsZENsaXBib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25QYXN0ZUNhcHR1cmU/OiBBZGFwdENoaWxkQ2xpcGJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIENvbXBvc2l0aW9uIEV2ZW50c1xuICBvbkNvbXBvc2l0aW9uRW5kPzogQWRhcHRDaGlsZENvbXBvc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZT86IEFkYXB0Q2hpbGRDb21wb3NpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Db21wb3NpdGlvblN0YXJ0PzogQWRhcHRDaGlsZENvbXBvc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlPzogQWRhcHRDaGlsZENvbXBvc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbXBvc2l0aW9uVXBkYXRlPzogQWRhcHRDaGlsZENvbXBvc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZT86IEFkYXB0Q2hpbGRDb21wb3NpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBGb2N1cyBFdmVudHNcbiAgb25Gb2N1cz86IEFkYXB0Q2hpbGRGb2N1c0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Gb2N1c0NhcHR1cmU/OiBBZGFwdENoaWxkRm9jdXNFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQmx1cj86IEFkYXB0Q2hpbGRGb2N1c0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25CbHVyQ2FwdHVyZT86IEFkYXB0Q2hpbGRGb2N1c0V2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBGb3JtIEV2ZW50c1xuICBvbkNoYW5nZT86IEFkYXB0Q2hpbGRGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNoYW5nZUNhcHR1cmU/OiBBZGFwdENoaWxkRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25CZWZvcmVJbnB1dD86IEFkYXB0Q2hpbGRGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkJlZm9yZUlucHV0Q2FwdHVyZT86IEFkYXB0Q2hpbGRGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbklucHV0PzogQWRhcHRDaGlsZEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uSW5wdXRDYXB0dXJlPzogQWRhcHRDaGlsZEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUmVzZXQ/OiBBZGFwdENoaWxkRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25SZXNldENhcHR1cmU/OiBBZGFwdENoaWxkRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TdWJtaXQ/OiBBZGFwdENoaWxkRm9ybUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TdWJtaXRDYXB0dXJlPzogQWRhcHRDaGlsZEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uSW52YWxpZD86IEFkYXB0Q2hpbGRGb3JtRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkludmFsaWRDYXB0dXJlPzogQWRhcHRDaGlsZEZvcm1FdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gSW1hZ2UgRXZlbnRzXG4gIG9uTG9hZD86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Mb2FkQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FcnJvcj86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjsgLy8gYWxzbyBhIE1lZGlhIEV2ZW50XG4gIG9uRXJyb3JDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+OyAvLyBhbHNvIGEgTWVkaWEgRXZlbnRcblxuICAvLyBLZXlib2FyZCBFdmVudHNcbiAgb25LZXlEb3duPzogQWRhcHRDaGlsZEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbktleURvd25DYXB0dXJlPzogQWRhcHRDaGlsZEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbktleVByZXNzPzogQWRhcHRDaGlsZEtleWJvYXJkRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbktleVByZXNzQ2FwdHVyZT86IEFkYXB0Q2hpbGRLZXlib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25LZXlVcD86IEFkYXB0Q2hpbGRLZXlib2FyZEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25LZXlVcENhcHR1cmU/OiBBZGFwdENoaWxkS2V5Ym9hcmRFdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gTWVkaWEgRXZlbnRzXG4gIG9uQWJvcnQ/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQWJvcnRDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkNhblBsYXk/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ2FuUGxheUNhcHR1cmU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ2FuUGxheVRocm91Z2g/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ2FuUGxheVRocm91Z2hDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkR1cmF0aW9uQ2hhbmdlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FbXB0aWVkPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVtcHRpZWRDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuY3J5cHRlZD86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25FbmNyeXB0ZWRDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuZGVkPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkVuZGVkQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Mb2FkZWREYXRhPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvYWRlZERhdGFDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvYWRlZE1ldGFkYXRhPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvYWRlZE1ldGFkYXRhQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Mb2FkU3RhcnQ/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTG9hZFN0YXJ0Q2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25QYXVzZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25QYXVzZUNhcHR1cmU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUGxheT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25QbGF5Q2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25QbGF5aW5nPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBsYXlpbmdDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblByb2dyZXNzPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblByb2dyZXNzQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25SYXRlQ2hhbmdlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblJhdGVDaGFuZ2VDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblNlZWtlZD86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TZWVrZWRDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblNlZWtpbmc/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU2Vla2luZ0NhcHR1cmU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU3RhbGxlZD86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TdGFsbGVkQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25TdXNwZW5kPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblN1c3BlbmRDYXB0dXJlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRpbWVVcGRhdGU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVGltZVVwZGF0ZUNhcHR1cmU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVm9sdW1lQ2hhbmdlPzogQWRhcHRDaGlsZFJlYWN0RXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblZvbHVtZUNoYW5nZUNhcHR1cmU/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uV2FpdGluZz86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25XYWl0aW5nQ2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBNb3VzZUV2ZW50c1xuICBvbkF1eENsaWNrPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkF1eENsaWNrQ2FwdHVyZT86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DbGljaz86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25DbGlja0NhcHR1cmU/OiBBZGFwdENoaWxkTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29udGV4dE1lbnU/OiBBZGFwdENoaWxkTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQ29udGV4dE1lbnVDYXB0dXJlPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRvdWJsZUNsaWNrPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZT86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0NhcHR1cmU/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnRW5kPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0VuZENhcHR1cmU/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnRW50ZXI/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnRW50ZXJDYXB0dXJlPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ0V4aXQ/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnRXhpdENhcHR1cmU/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnTGVhdmU/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnTGVhdmVDYXB0dXJlPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJhZ092ZXI/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnT3ZlckNhcHR1cmU/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnU3RhcnQ/OiBBZGFwdENoaWxkRHJhZ0V2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25EcmFnU3RhcnRDYXB0dXJlPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uRHJvcD86IEFkYXB0Q2hpbGREcmFnRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkRyb3BDYXB0dXJlPzogQWRhcHRDaGlsZERyYWdFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VEb3duPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlRG93bkNhcHR1cmU/OiBBZGFwdENoaWxkTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VFbnRlcj86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZUxlYXZlPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlTW92ZT86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU1vdmVDYXB0dXJlPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlT3V0PzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlT3V0Q2FwdHVyZT86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZU92ZXI/OiBBZGFwdENoaWxkTW91c2VFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uTW91c2VPdmVyQ2FwdHVyZT86IEFkYXB0Q2hpbGRNb3VzZUV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Nb3VzZVVwPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbk1vdXNlVXBDYXB0dXJlPzogQWRhcHRDaGlsZE1vdXNlRXZlbnRIYW5kbGVyPFAsIFQ+O1xuXG4gIC8vIFNlbGVjdGlvbiBFdmVudHNcbiAgb25TZWxlY3Q/OiBBZGFwdENoaWxkUmVhY3RFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU2VsZWN0Q2FwdHVyZT86IEFkYXB0Q2hpbGRSZWFjdEV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgb25Ub3VjaENhbmNlbD86IEFkYXB0Q2hpbGRUb3VjaEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Ub3VjaENhbmNlbENhcHR1cmU/OiBBZGFwdENoaWxkVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hFbmQ/OiBBZGFwdENoaWxkVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hFbmRDYXB0dXJlPzogQWRhcHRDaGlsZFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRvdWNoTW92ZT86IEFkYXB0Q2hpbGRUb3VjaEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Ub3VjaE1vdmVDYXB0dXJlPzogQWRhcHRDaGlsZFRvdWNoRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblRvdWNoU3RhcnQ/OiBBZGFwdENoaWxkVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uVG91Y2hTdGFydENhcHR1cmU/OiBBZGFwdENoaWxkVG91Y2hFdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gUG9pbnRlciBFdmVudHNcbiAgb25Qb2ludGVyRG93bj86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJEb3duQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJNb3ZlPzogQWRhcHRDaGlsZFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlck1vdmVDYXB0dXJlPzogQWRhcHRDaGlsZFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlclVwPzogQWRhcHRDaGlsZFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlclVwQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJDYW5jZWw/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyQ2FuY2VsQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJFbnRlcj86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvblBvaW50ZXJFbnRlckNhcHR1cmU/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyTGVhdmU/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyTGVhdmVDYXB0dXJlPzogQWRhcHRDaGlsZFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlck92ZXI/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyT3ZlckNhcHR1cmU/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Qb2ludGVyT3V0PzogQWRhcHRDaGlsZFBvaW50ZXJFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uUG9pbnRlck91dENhcHR1cmU/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25Hb3RQb2ludGVyQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkdvdFBvaW50ZXJDYXB0dXJlQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvc3RQb2ludGVyQ2FwdHVyZT86IEFkYXB0Q2hpbGRQb2ludGVyRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkxvc3RQb2ludGVyQ2FwdHVyZUNhcHR1cmU/OiBBZGFwdENoaWxkUG9pbnRlckV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBVSSBFdmVudHNcbiAgb25TY3JvbGw/OiBBZGFwdENoaWxkVUlFdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uU2Nyb2xsQ2FwdHVyZT86IEFkYXB0Q2hpbGRVSUV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBXaGVlbCBFdmVudHNcbiAgb25XaGVlbD86IEFkYXB0Q2hpbGRXaGVlbEV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25XaGVlbENhcHR1cmU/OiBBZGFwdENoaWxkV2hlZWxFdmVudEhhbmRsZXI8UCwgVD47XG5cbiAgLy8gQW5pbWF0aW9uIEV2ZW50c1xuICBvbkFuaW1hdGlvblN0YXJ0PzogQWRhcHRDaGlsZEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25BbmltYXRpb25TdGFydENhcHR1cmU/OiBBZGFwdENoaWxkQW5pbWF0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xuICBvbkFuaW1hdGlvbkVuZD86IEFkYXB0Q2hpbGRBbmltYXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQW5pbWF0aW9uRW5kQ2FwdHVyZT86IEFkYXB0Q2hpbGRBbmltYXRpb25FdmVudEhhbmRsZXI8UCwgVD47XG4gIG9uQW5pbWF0aW9uSXRlcmF0aW9uPzogQWRhcHRDaGlsZEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25BbmltYXRpb25JdGVyYXRpb25DYXB0dXJlPzogQWRhcHRDaGlsZEFuaW1hdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcblxuICAvLyBUcmFuc2l0aW9uIEV2ZW50c1xuICBvblRyYW5zaXRpb25FbmQ/OiBBZGFwdENoaWxkVHJhbnNpdGlvbkV2ZW50SGFuZGxlcjxQLCBUPjtcbiAgb25UcmFuc2l0aW9uRW5kQ2FwdHVyZT86IEFkYXB0Q2hpbGRUcmFuc2l0aW9uRXZlbnRIYW5kbGVyPFAsIFQ+O1xufTtcbmNvbnN0IFNWR0NvbnRhaW5lclByb3BLZXlzID0gWyd2aWV3Qm94JywgJ2NoaWxkcmVuJ107XG5jb25zdCBTVkdFbGVtZW50UHJvcEtleXMgPSBbXG4gICdjbGFzc05hbWUnLFxuICAnY29sb3InLFxuICAnaGVpZ2h0JyxcbiAgJ2lkJyxcbiAgJ2xhbmcnLFxuICAnbWF4JyxcbiAgJ21lZGlhJyxcbiAgJ21ldGhvZCcsXG4gICdtaW4nLFxuICAnbmFtZScsXG4gICdzdHlsZScsXG4gICd0YXJnZXQnLFxuICAndHlwZScsXG4gICd3aWR0aCcsXG4gICdyb2xlJyxcbiAgJ3RhYkluZGV4JyxcbiAgJ2FjY2VudEhlaWdodCcsXG4gICdhY2N1bXVsYXRlJyxcbiAgJ2FkZGl0aXZlJyxcbiAgJ2FsaWdubWVudEJhc2VsaW5lJyxcbiAgJ2FsbG93UmVvcmRlcicsXG4gICdhbHBoYWJldGljJyxcbiAgJ2FtcGxpdHVkZScsXG4gICdhcmFiaWNGb3JtJyxcbiAgJ2FzY2VudCcsXG4gICdhdHRyaWJ1dGVOYW1lJyxcbiAgJ2F0dHJpYnV0ZVR5cGUnLFxuICAnYXV0b1JldmVyc2UnLFxuICAnYXppbXV0aCcsXG4gICdiYXNlRnJlcXVlbmN5JyxcbiAgJ2Jhc2VsaW5lU2hpZnQnLFxuICAnYmFzZVByb2ZpbGUnLFxuICAnYmJveCcsXG4gICdiZWdpbicsXG4gICdiaWFzJyxcbiAgJ2J5JyxcbiAgJ2NhbGNNb2RlJyxcbiAgJ2NhcEhlaWdodCcsXG4gICdjbGlwJyxcbiAgJ2NsaXBQYXRoJyxcbiAgJ2NsaXBQYXRoVW5pdHMnLFxuICAnY2xpcFJ1bGUnLFxuICAnY29sb3JJbnRlcnBvbGF0aW9uJyxcbiAgJ2NvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMnLFxuICAnY29sb3JQcm9maWxlJyxcbiAgJ2NvbG9yUmVuZGVyaW5nJyxcbiAgJ2NvbnRlbnRTY3JpcHRUeXBlJyxcbiAgJ2NvbnRlbnRTdHlsZVR5cGUnLFxuICAnY3Vyc29yJyxcbiAgJ2N4JyxcbiAgJ2N5JyxcbiAgJ2QnLFxuICAnZGVjZWxlcmF0ZScsXG4gICdkZXNjZW50JyxcbiAgJ2RpZmZ1c2VDb25zdGFudCcsXG4gICdkaXJlY3Rpb24nLFxuICAnZGlzcGxheScsXG4gICdkaXZpc29yJyxcbiAgJ2RvbWluYW50QmFzZWxpbmUnLFxuICAnZHVyJyxcbiAgJ2R4JyxcbiAgJ2R5JyxcbiAgJ2VkZ2VNb2RlJyxcbiAgJ2VsZXZhdGlvbicsXG4gICdlbmFibGVCYWNrZ3JvdW5kJyxcbiAgJ2VuZCcsXG4gICdleHBvbmVudCcsXG4gICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJyxcbiAgJ2ZpbGwnLFxuICAnZmlsbE9wYWNpdHknLFxuICAnZmlsbFJ1bGUnLFxuICAnZmlsdGVyJyxcbiAgJ2ZpbHRlclJlcycsXG4gICdmaWx0ZXJVbml0cycsXG4gICdmbG9vZENvbG9yJyxcbiAgJ2Zsb29kT3BhY2l0eScsXG4gICdmb2N1c2FibGUnLFxuICAnZm9udEZhbWlseScsXG4gICdmb250U2l6ZScsXG4gICdmb250U2l6ZUFkanVzdCcsXG4gICdmb250U3RyZXRjaCcsXG4gICdmb250U3R5bGUnLFxuICAnZm9udFZhcmlhbnQnLFxuICAnZm9udFdlaWdodCcsXG4gICdmb3JtYXQnLFxuICAnZnJvbScsXG4gICdmeCcsXG4gICdmeScsXG4gICdnMScsXG4gICdnMicsXG4gICdnbHlwaE5hbWUnLFxuICAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICAnZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsJyxcbiAgJ2dseXBoUmVmJyxcbiAgJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgJ2dyYWRpZW50VW5pdHMnLFxuICAnaGFuZ2luZycsXG4gICdob3JpekFkdlgnLFxuICAnaG9yaXpPcmlnaW5YJyxcbiAgJ2hyZWYnLFxuICAnaWRlb2dyYXBoaWMnLFxuICAnaW1hZ2VSZW5kZXJpbmcnLFxuICAnaW4yJyxcbiAgJ2luJyxcbiAgJ2ludGVyY2VwdCcsXG4gICdrMScsXG4gICdrMicsXG4gICdrMycsXG4gICdrNCcsXG4gICdrJyxcbiAgJ2tlcm5lbE1hdHJpeCcsXG4gICdrZXJuZWxVbml0TGVuZ3RoJyxcbiAgJ2tlcm5pbmcnLFxuICAna2V5UG9pbnRzJyxcbiAgJ2tleVNwbGluZXMnLFxuICAna2V5VGltZXMnLFxuICAnbGVuZ3RoQWRqdXN0JyxcbiAgJ2xldHRlclNwYWNpbmcnLFxuICAnbGlnaHRpbmdDb2xvcicsXG4gICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gICdsb2NhbCcsXG4gICdtYXJrZXJFbmQnLFxuICAnbWFya2VySGVpZ2h0JyxcbiAgJ21hcmtlck1pZCcsXG4gICdtYXJrZXJTdGFydCcsXG4gICdtYXJrZXJVbml0cycsXG4gICdtYXJrZXJXaWR0aCcsXG4gICdtYXNrJyxcbiAgJ21hc2tDb250ZW50VW5pdHMnLFxuICAnbWFza1VuaXRzJyxcbiAgJ21hdGhlbWF0aWNhbCcsXG4gICdtb2RlJyxcbiAgJ251bU9jdGF2ZXMnLFxuICAnb2Zmc2V0JyxcbiAgJ29wYWNpdHknLFxuICAnb3BlcmF0b3InLFxuICAnb3JkZXInLFxuICAnb3JpZW50JyxcbiAgJ29yaWVudGF0aW9uJyxcbiAgJ29yaWdpbicsXG4gICdvdmVyZmxvdycsXG4gICdvdmVybGluZVBvc2l0aW9uJyxcbiAgJ292ZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ3BhaW50T3JkZXInLFxuICAncGFub3NlMScsXG4gICdwYXRoTGVuZ3RoJyxcbiAgJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICAncGF0dGVyblRyYW5zZm9ybScsXG4gICdwYXR0ZXJuVW5pdHMnLFxuICAncG9pbnRlckV2ZW50cycsXG4gICdwb2ludHMnLFxuICAncG9pbnRzQXRYJyxcbiAgJ3BvaW50c0F0WScsXG4gICdwb2ludHNBdFonLFxuICAncHJlc2VydmVBbHBoYScsXG4gICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgJ3InLFxuICAncmFkaXVzJyxcbiAgJ3JlZlgnLFxuICAncmVmWScsXG4gICdyZW5kZXJpbmdJbnRlbnQnLFxuICAncmVwZWF0Q291bnQnLFxuICAncmVwZWF0RHVyJyxcbiAgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsXG4gICdyZXF1aXJlZEZlYXR1cmVzJyxcbiAgJ3Jlc3RhcnQnLFxuICAncmVzdWx0JyxcbiAgJ3JvdGF0ZScsXG4gICdyeCcsXG4gICdyeScsXG4gICdzZWVkJyxcbiAgJ3NoYXBlUmVuZGVyaW5nJyxcbiAgJ3Nsb3BlJyxcbiAgJ3NwYWNpbmcnLFxuICAnc3BlY3VsYXJDb25zdGFudCcsXG4gICdzcGVjdWxhckV4cG9uZW50JyxcbiAgJ3NwZWVkJyxcbiAgJ3NwcmVhZE1ldGhvZCcsXG4gICdzdGFydE9mZnNldCcsXG4gICdzdGREZXZpYXRpb24nLFxuICAnc3RlbWgnLFxuICAnc3RlbXYnLFxuICAnc3RpdGNoVGlsZXMnLFxuICAnc3RvcENvbG9yJyxcbiAgJ3N0b3BPcGFjaXR5JyxcbiAgJ3N0cmlrZXRocm91Z2hQb3NpdGlvbicsXG4gICdzdHJpa2V0aHJvdWdoVGhpY2tuZXNzJyxcbiAgJ3N0cmluZycsXG4gICdzdHJva2UnLFxuICAnc3Ryb2tlRGFzaGFycmF5JyxcbiAgJ3N0cm9rZURhc2hvZmZzZXQnLFxuICAnc3Ryb2tlTGluZWNhcCcsXG4gICdzdHJva2VMaW5lam9pbicsXG4gICdzdHJva2VNaXRlcmxpbWl0JyxcbiAgJ3N0cm9rZU9wYWNpdHknLFxuICAnc3Ryb2tlV2lkdGgnLFxuICAnc3VyZmFjZVNjYWxlJyxcbiAgJ3N5c3RlbUxhbmd1YWdlJyxcbiAgJ3RhYmxlVmFsdWVzJyxcbiAgJ3RhcmdldFgnLFxuICAndGFyZ2V0WScsXG4gICd0ZXh0QW5jaG9yJyxcbiAgJ3RleHREZWNvcmF0aW9uJyxcbiAgJ3RleHRMZW5ndGgnLFxuICAndGV4dFJlbmRlcmluZycsXG4gICd0bycsXG4gICd0cmFuc2Zvcm0nLFxuICAndTEnLFxuICAndTInLFxuICAndW5kZXJsaW5lUG9zaXRpb24nLFxuICAndW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ3VuaWNvZGUnLFxuICAndW5pY29kZUJpZGknLFxuICAndW5pY29kZVJhbmdlJyxcbiAgJ3VuaXRzUGVyRW0nLFxuICAndkFscGhhYmV0aWMnLFxuICAndmFsdWVzJyxcbiAgJ3ZlY3RvckVmZmVjdCcsXG4gICd2ZXJzaW9uJyxcbiAgJ3ZlcnRBZHZZJyxcbiAgJ3ZlcnRPcmlnaW5YJyxcbiAgJ3ZlcnRPcmlnaW5ZJyxcbiAgJ3ZIYW5naW5nJyxcbiAgJ3ZJZGVvZ3JhcGhpYycsXG4gICd2aWV3VGFyZ2V0JyxcbiAgJ3Zpc2liaWxpdHknLFxuICAndk1hdGhlbWF0aWNhbCcsXG4gICd3aWR0aHMnLFxuICAnd29yZFNwYWNpbmcnLFxuICAnd3JpdGluZ01vZGUnLFxuICAneDEnLFxuICAneDInLFxuICAneCcsXG4gICd4Q2hhbm5lbFNlbGVjdG9yJyxcbiAgJ3hIZWlnaHQnLFxuICAneGxpbmtBY3R1YXRlJyxcbiAgJ3hsaW5rQXJjcm9sZScsXG4gICd4bGlua0hyZWYnLFxuICAneGxpbmtSb2xlJyxcbiAgJ3hsaW5rU2hvdycsXG4gICd4bGlua1RpdGxlJyxcbiAgJ3hsaW5rVHlwZScsXG4gICd4bWxCYXNlJyxcbiAgJ3htbExhbmcnLFxuICAneG1sbnMnLFxuICAneG1sbnNYbGluaycsXG4gICd4bWxTcGFjZScsXG4gICd5MScsXG4gICd5MicsXG4gICd5JyxcbiAgJ3lDaGFubmVsU2VsZWN0b3InLFxuICAneicsXG4gICd6b29tQW5kUGFuJyxcbiAgJ3JlZicsXG4gICdrZXknLFxuICAnYW5nbGUnLFxuXTtcblxuY29uc3QgRXZlbnRLZXlzID0gW1xuICAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnLFxuICAnb25Db3B5JyxcbiAgJ29uQ29weUNhcHR1cmUnLFxuICAnb25DdXQnLFxuICAnb25DdXRDYXB0dXJlJyxcbiAgJ29uUGFzdGUnLFxuICAnb25QYXN0ZUNhcHR1cmUnLFxuICAnb25Db21wb3NpdGlvbkVuZCcsXG4gICdvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZScsXG4gICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAnb25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZScsXG4gICdvbkNvbXBvc2l0aW9uVXBkYXRlJyxcbiAgJ29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlJyxcbiAgJ29uRm9jdXMnLFxuICAnb25Gb2N1c0NhcHR1cmUnLFxuICAnb25CbHVyJyxcbiAgJ29uQmx1ckNhcHR1cmUnLFxuICAnb25DaGFuZ2UnLFxuICAnb25DaGFuZ2VDYXB0dXJlJyxcbiAgJ29uQmVmb3JlSW5wdXQnLFxuICAnb25CZWZvcmVJbnB1dENhcHR1cmUnLFxuICAnb25JbnB1dCcsXG4gICdvbklucHV0Q2FwdHVyZScsXG4gICdvblJlc2V0JyxcbiAgJ29uUmVzZXRDYXB0dXJlJyxcbiAgJ29uU3VibWl0JyxcbiAgJ29uU3VibWl0Q2FwdHVyZScsXG4gICdvbkludmFsaWQnLFxuICAnb25JbnZhbGlkQ2FwdHVyZScsXG4gICdvbkxvYWQnLFxuICAnb25Mb2FkQ2FwdHVyZScsXG4gICdvbkVycm9yJyxcbiAgJ29uRXJyb3JDYXB0dXJlJyxcbiAgJ29uS2V5RG93bicsXG4gICdvbktleURvd25DYXB0dXJlJyxcbiAgJ29uS2V5UHJlc3MnLFxuICAnb25LZXlQcmVzc0NhcHR1cmUnLFxuICAnb25LZXlVcCcsXG4gICdvbktleVVwQ2FwdHVyZScsXG4gICdvbkFib3J0JyxcbiAgJ29uQWJvcnRDYXB0dXJlJyxcbiAgJ29uQ2FuUGxheScsXG4gICdvbkNhblBsYXlDYXB0dXJlJyxcbiAgJ29uQ2FuUGxheVRocm91Z2gnLFxuICAnb25DYW5QbGF5VGhyb3VnaENhcHR1cmUnLFxuICAnb25EdXJhdGlvbkNoYW5nZScsXG4gICdvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZScsXG4gICdvbkVtcHRpZWQnLFxuICAnb25FbXB0aWVkQ2FwdHVyZScsXG4gICdvbkVuY3J5cHRlZCcsXG4gICdvbkVuY3J5cHRlZENhcHR1cmUnLFxuICAnb25FbmRlZCcsXG4gICdvbkVuZGVkQ2FwdHVyZScsXG4gICdvbkxvYWRlZERhdGEnLFxuICAnb25Mb2FkZWREYXRhQ2FwdHVyZScsXG4gICdvbkxvYWRlZE1ldGFkYXRhJyxcbiAgJ29uTG9hZGVkTWV0YWRhdGFDYXB0dXJlJyxcbiAgJ29uTG9hZFN0YXJ0JyxcbiAgJ29uTG9hZFN0YXJ0Q2FwdHVyZScsXG4gICdvblBhdXNlJyxcbiAgJ29uUGF1c2VDYXB0dXJlJyxcbiAgJ29uUGxheScsXG4gICdvblBsYXlDYXB0dXJlJyxcbiAgJ29uUGxheWluZycsXG4gICdvblBsYXlpbmdDYXB0dXJlJyxcbiAgJ29uUHJvZ3Jlc3MnLFxuICAnb25Qcm9ncmVzc0NhcHR1cmUnLFxuICAnb25SYXRlQ2hhbmdlJyxcbiAgJ29uUmF0ZUNoYW5nZUNhcHR1cmUnLFxuICAnb25TZWVrZWQnLFxuICAnb25TZWVrZWRDYXB0dXJlJyxcbiAgJ29uU2Vla2luZycsXG4gICdvblNlZWtpbmdDYXB0dXJlJyxcbiAgJ29uU3RhbGxlZCcsXG4gICdvblN0YWxsZWRDYXB0dXJlJyxcbiAgJ29uU3VzcGVuZCcsXG4gICdvblN1c3BlbmRDYXB0dXJlJyxcbiAgJ29uVGltZVVwZGF0ZScsXG4gICdvblRpbWVVcGRhdGVDYXB0dXJlJyxcbiAgJ29uVm9sdW1lQ2hhbmdlJyxcbiAgJ29uVm9sdW1lQ2hhbmdlQ2FwdHVyZScsXG4gICdvbldhaXRpbmcnLFxuICAnb25XYWl0aW5nQ2FwdHVyZScsXG4gICdvbkF1eENsaWNrJyxcbiAgJ29uQXV4Q2xpY2tDYXB0dXJlJyxcbiAgJ29uQ2xpY2snLFxuICAnb25DbGlja0NhcHR1cmUnLFxuICAnb25Db250ZXh0TWVudScsXG4gICdvbkNvbnRleHRNZW51Q2FwdHVyZScsXG4gICdvbkRvdWJsZUNsaWNrJyxcbiAgJ29uRG91YmxlQ2xpY2tDYXB0dXJlJyxcbiAgJ29uRHJhZycsXG4gICdvbkRyYWdDYXB0dXJlJyxcbiAgJ29uRHJhZ0VuZCcsXG4gICdvbkRyYWdFbmRDYXB0dXJlJyxcbiAgJ29uRHJhZ0VudGVyJyxcbiAgJ29uRHJhZ0VudGVyQ2FwdHVyZScsXG4gICdvbkRyYWdFeGl0JyxcbiAgJ29uRHJhZ0V4aXRDYXB0dXJlJyxcbiAgJ29uRHJhZ0xlYXZlJyxcbiAgJ29uRHJhZ0xlYXZlQ2FwdHVyZScsXG4gICdvbkRyYWdPdmVyJyxcbiAgJ29uRHJhZ092ZXJDYXB0dXJlJyxcbiAgJ29uRHJhZ1N0YXJ0JyxcbiAgJ29uRHJhZ1N0YXJ0Q2FwdHVyZScsXG4gICdvbkRyb3AnLFxuICAnb25Ecm9wQ2FwdHVyZScsXG4gICdvbk1vdXNlRG93bicsXG4gICdvbk1vdXNlRG93bkNhcHR1cmUnLFxuICAnb25Nb3VzZUVudGVyJyxcbiAgJ29uTW91c2VMZWF2ZScsXG4gICdvbk1vdXNlTW92ZScsXG4gICdvbk1vdXNlTW92ZUNhcHR1cmUnLFxuICAnb25Nb3VzZU91dCcsXG4gICdvbk1vdXNlT3V0Q2FwdHVyZScsXG4gICdvbk1vdXNlT3ZlcicsXG4gICdvbk1vdXNlT3ZlckNhcHR1cmUnLFxuICAnb25Nb3VzZVVwJyxcbiAgJ29uTW91c2VVcENhcHR1cmUnLFxuICAnb25TZWxlY3QnLFxuICAnb25TZWxlY3RDYXB0dXJlJyxcbiAgJ29uVG91Y2hDYW5jZWwnLFxuICAnb25Ub3VjaENhbmNlbENhcHR1cmUnLFxuICAnb25Ub3VjaEVuZCcsXG4gICdvblRvdWNoRW5kQ2FwdHVyZScsXG4gICdvblRvdWNoTW92ZScsXG4gICdvblRvdWNoTW92ZUNhcHR1cmUnLFxuICAnb25Ub3VjaFN0YXJ0JyxcbiAgJ29uVG91Y2hTdGFydENhcHR1cmUnLFxuICAnb25Qb2ludGVyRG93bicsXG4gICdvblBvaW50ZXJEb3duQ2FwdHVyZScsXG4gICdvblBvaW50ZXJNb3ZlJyxcbiAgJ29uUG9pbnRlck1vdmVDYXB0dXJlJyxcbiAgJ29uUG9pbnRlclVwJyxcbiAgJ29uUG9pbnRlclVwQ2FwdHVyZScsXG4gICdvblBvaW50ZXJDYW5jZWwnLFxuICAnb25Qb2ludGVyQ2FuY2VsQ2FwdHVyZScsXG4gICdvblBvaW50ZXJFbnRlcicsXG4gICdvblBvaW50ZXJFbnRlckNhcHR1cmUnLFxuICAnb25Qb2ludGVyTGVhdmUnLFxuICAnb25Qb2ludGVyTGVhdmVDYXB0dXJlJyxcbiAgJ29uUG9pbnRlck92ZXInLFxuICAnb25Qb2ludGVyT3ZlckNhcHR1cmUnLFxuICAnb25Qb2ludGVyT3V0JyxcbiAgJ29uUG9pbnRlck91dENhcHR1cmUnLFxuICAnb25Hb3RQb2ludGVyQ2FwdHVyZScsXG4gICdvbkdvdFBvaW50ZXJDYXB0dXJlQ2FwdHVyZScsXG4gICdvbkxvc3RQb2ludGVyQ2FwdHVyZScsXG4gICdvbkxvc3RQb2ludGVyQ2FwdHVyZUNhcHR1cmUnLFxuICAnb25TY3JvbGwnLFxuICAnb25TY3JvbGxDYXB0dXJlJyxcbiAgJ29uV2hlZWwnLFxuICAnb25XaGVlbENhcHR1cmUnLFxuICAnb25BbmltYXRpb25TdGFydCcsXG4gICdvbkFuaW1hdGlvblN0YXJ0Q2FwdHVyZScsXG4gICdvbkFuaW1hdGlvbkVuZCcsXG4gICdvbkFuaW1hdGlvbkVuZENhcHR1cmUnLFxuICAnb25BbmltYXRpb25JdGVyYXRpb24nLFxuICAnb25BbmltYXRpb25JdGVyYXRpb25DYXB0dXJlJyxcbiAgJ29uVHJhbnNpdGlvbkVuZCcsXG4gICdvblRyYW5zaXRpb25FbmRDYXB0dXJlJyxcbl07XG5cbi8vIEFuaW1hdGlvbiBUeXBlcyA9PiBUT0RPOiBTaG91bGQgYmUgbW92ZWQgd2hlbiByZWFjdC1zbW9vdGggaXMgdHlwZXNjcmlwdGlmaWVkLlxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uVGltaW5nID0gJ2Vhc2UnIHwgJ2Vhc2UtaW4nIHwgJ2Vhc2Utb3V0JyB8ICdlYXNlLWluLW91dCcgfCAnbGluZWFyJztcblxuLyoqIHRoZSBvZmZzZXQgb2YgYSBjaGFydCwgd2hpY2ggZGVmaW5lIHRoZSBibGFuayBzcGFjZSBhbGwgYXJvdW5kICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0T2Zmc2V0IHtcbiAgdG9wPzogbnVtYmVyO1xuICBib3R0b20/OiBudW1iZXI7XG4gIGxlZnQ/OiBudW1iZXI7XG4gIHJpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBicnVzaEJvdHRvbT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWRkaW5nIHtcbiAgdG9wPzogbnVtYmVyO1xuICBib3R0b20/OiBudW1iZXI7XG4gIGxlZnQ/OiBudW1iZXI7XG4gIHJpZ2h0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlb21ldHJ5U2VjdG9yIHtcbiAgY3g/OiBudW1iZXI7XG4gIGN5PzogbnVtYmVyO1xuICBpbm5lclJhZGl1cz86IG51bWJlcjtcbiAgb3V0ZXJSYWRpdXM/OiBudW1iZXI7XG4gIHN0YXJ0QW5nbGU/OiBudW1iZXI7XG4gIGVuZEFuZ2xlPzogbnVtYmVyO1xuICBjb3JuZXJSYWRpdXM/OiBudW1iZXI7XG4gIGZvcmNlQ29ybmVyUmFkaXVzPzogYm9vbGVhbjtcbiAgY29ybmVySXNFeHRlcm5hbD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEQzU2NhbGU8VD4gPSBEM1NjYWxlQ29udGludW91c051bWVyaWM8VCwgbnVtYmVyPjtcblxuZXhwb3J0IHR5cGUgQXhpc0RvbWFpbkl0ZW0gPSBzdHJpbmcgfCBudW1iZXIgfCBGdW5jdGlvbiB8ICdhdXRvJyB8ICdkYXRhTWluJyB8ICdkYXRhTWF4Jztcbi8qKiBUaGUgZG9tYWluIG9mIGF4aXMgKi9cbmV4cG9ydCB0eXBlIEF4aXNEb21haW4gPSBzdHJpbmdbXSB8IG51bWJlcltdIHwgW0F4aXNEb21haW5JdGVtLCBBeGlzRG9tYWluSXRlbV07XG5cbi8qKiBUaGUgcHJvcHMgZGVmaW5pdGlvbiBvZiBiYXNlIGF4aXMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUF4aXNQcm9wcyB7XG4gIC8qKiBUaGUgdHlwZSBvZiBheGlzICovXG4gIHR5cGU/OiAnbnVtYmVyJyB8ICdjYXRlZ29yeSc7XG4gIC8qKiBUaGUga2V5IG9mIGRhdGEgZGlzcGxheWVkIGluIHRoZSBheGlzICovXG4gIGRhdGFLZXk/OiBEYXRhS2V5PGFueT47XG4gIC8qKiBXaGV0aGVyIG9yIG5vdCBkaXNwbGF5IHRoZSBheGlzICovXG4gIGhpZGU/OiBib29sZWFuO1xuICAvKiogVGhlIHNjYWxlIHR5cGUgb3IgZnVuY3RvciBvZiBzY2FsZSAqL1xuICBzY2FsZT86IFNjYWxlVHlwZSB8IEZ1bmN0aW9uO1xuICAvKiogVGhlIG9wdGlvbiBmb3IgdGljayAqL1xuICB0aWNrPzogU1ZHUHJvcHM8U1ZHVGV4dEVsZW1lbnQ+IHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+IHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pIHwgYm9vbGVhbjtcbiAgLyoqIFRoZSBjb3VudCBvZiB0aWNrcyAqL1xuICB0aWNrQ291bnQ/OiBudW1iZXI7XG4gIC8qKiBUaGUgb3B0aW9uIGZvciBheGlzTGluZSAqL1xuICBheGlzTGluZT86IGJvb2xlYW4gfCBTVkdQcm9wczxTVkdMaW5lRWxlbWVudD47XG4gIC8qKiBUaGUgb3B0aW9uIGZvciB0aWNrTGluZSAqL1xuICB0aWNrTGluZT86IGJvb2xlYW4gfCBTVkdQcm9wczxTVkdUZXh0RWxlbWVudD47XG4gIC8qKiBUaGUgc2l6ZSBvZiB0aWNrIGxpbmUgKi9cbiAgdGlja1NpemU/OiBudW1iZXI7XG4gIC8qKiBUaGUgZm9ybWF0dGVyIGZ1bmN0aW9uIG9mIHRpY2sgKi9cbiAgdGlja0Zvcm1hdHRlcj86ICh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGVuIGRvbWFpbiBvZiB0aGUgYXhpcyBpcyBzcGVjaWZpZWQgYW5kIHRoZSB0eXBlIG9mIHRoZSBheGlzIGlzICdudW1iZXInLFxuICAgKiBpZiBhbGxvd0RhdGFPdmVyZmxvdyBpcyBzZXQgdG8gYmUgZmFsc2UsXG4gICAqIHRoZSBkb21haW4gd2lsbCBiZSBhZGp1c3RlZCB3aGVuIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGRhdGEgaXMgc21hbGxlciB0aGFuIGRvbWFpblswXSBvclxuICAgKiB0aGUgbWF4aW11bSB2YWx1ZSBvZiBkYXRhIGlzIGdyZWF0ZXIgdGhhbiBkb21haW5bMV0gc28gdGhhdCB0aGUgYXhpcyBkaXNwbGF5cyBhbGwgZGF0YSB2YWx1ZXMuXG4gICAqIElmIHNldCB0byB0cnVlLCBncmFwaGljIGVsZW1lbnRzIChsaW5lLCBhcmVhLCBiYXJzKSB3aWxsIGJlIGNsaXBwZWQgdG8gY29uZm9ybSB0byB0aGUgc3BlY2lmaWVkIGRvbWFpbi5cbiAgICovXG4gIGFsbG93RGF0YU92ZXJmbG93PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBheGlzIGhhcyBkdXBsaWNhdGVkIGNhdGVnb3J5cyBvciBub3Qgd2hlbiB0aGUgdHlwZSBvZiBheGlzIGlzIFwiY2F0ZWdvcnlcIi5cbiAgICovXG4gIGFsbG93RHVwbGljYXRlZENhdGVnb3J5PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB0aWNrcyBvZiBheGlzIHRvIGJlIGRlY2ltYWxzIG9yIG5vdC5cbiAgICovXG4gIGFsbG93RGVjaW1hbHM/OiBib29sZWFuO1xuICAvKiogVGhlIGRvbWFpbiBvZiBzY2FsZSBpbiB0aGlzIGF4aXMgKi9cbiAgZG9tYWluPzogQXhpc0RvbWFpbjtcbiAgLyoqIFRoZSBuYW1lIG9mIGRhdGEgZGlzcGxheWVkIGluIHRoZSBheGlzICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKiBUaGUgdW5pdCBvZiBkYXRhIGRpc3BsYXllZCBpbiB0aGUgYXhpcyAqL1xuICB1bml0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICAvKiogVGhlIHR5cGUgb2YgYXhpcyAqL1xuICBheGlzVHlwZT86IEF4aXNUeXBlO1xuICByYW5nZT86IEFycmF5PG51bWJlcj47XG4gIC8qKiBheGlzIHJlYWN0IGNvbXBvbmVudCAqL1xuICBBeGlzQ29tcD86IGFueTtcbiAgLyoqIE5lZWRlZCB0byBhbGxvdyB1c2FnZSBvZiB0aGUgbGFiZWwgcHJvcCBvbiB0aGUgWCBhbmQgWSBheGlzICovXG4gIGxhYmVsPzogc3RyaW5nIHwgbnVtYmVyIHwgUmVhY3RFbGVtZW50IHwgb2JqZWN0O1xufVxuXG5leHBvcnQgdHlwZSBBeGlzSW50ZXJ2YWwgPSBudW1iZXIgfCAncHJlc2VydmVTdGFydCcgfCAncHJlc2VydmVFbmQnIHwgJ3ByZXNlcnZlU3RhcnRFbmQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpY2tJdGVtIHtcbiAgdmFsdWU/OiBhbnk7XG4gIGNvb3JkaW5hdGU6IG51bWJlcjtcbiAgaW5kZXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFyZ2luIHtcbiAgdG9wPzogbnVtYmVyO1xuICByaWdodD86IG51bWJlcjtcbiAgYm90dG9tPzogbnVtYmVyO1xuICBsZWZ0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcnRlc2lhblZpZXdCb3gge1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvbGFyVmlld0JveCB7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgaW5uZXJSYWRpdXM/OiBudW1iZXI7XG4gIG91dGVyUmFkaXVzPzogbnVtYmVyO1xuICBzdGFydEFuZ2xlPzogbnVtYmVyO1xuICBlbmRBbmdsZT86IG51bWJlcjtcbiAgY2xvY2tXaXNlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgVmlld0JveCA9IENhcnRlc2lhblZpZXdCb3ggfCBQb2xhclZpZXdCb3g7XG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJQcm9wcyA9IChcbiAgcHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4gfCBDb21wb25lbnQgfCBGdW5jdGlvbkNvbXBvbmVudCB8IGJvb2xlYW4sXG4gIGluY2x1ZGVFdmVudHM/OiBib29sZWFuLFxuICBpc1N2Zz86IGJvb2xlYW4sXG4pID0+IHtcbiAgaWYgKCFwcm9wcyB8fCB0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBpbnB1dFByb3BzID0gcHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PjtcblxuICBpZiAoaXNWYWxpZEVsZW1lbnQocHJvcHMpKSB7XG4gICAgaW5wdXRQcm9wcyA9IHByb3BzLnByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH1cblxuICBpZiAoIV8uaXNPYmplY3QoaW5wdXRQcm9wcykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG91dDogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGlucHV0UHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAvLyB2aWV3Qm94IG9ubHkgZXhpc3QgaW4gPHN2ZyAvPlxuICAgIGlmIChcbiAgICAgIFNWR0VsZW1lbnRQcm9wS2V5cy5pbmNsdWRlcyhrZXkpIHx8XG4gICAgICAoaXNTdmcgJiYgU1ZHQ29udGFpbmVyUHJvcEtleXMuaW5jbHVkZXMoa2V5KSkgfHxcbiAgICAgIChpbmNsdWRlRXZlbnRzICYmIEV2ZW50S2V5cy5pbmNsdWRlcyhrZXkpKVxuICAgICkge1xuICAgICAgb3V0W2tleV0gPSAoaW5wdXRQcm9wcyBhcyBhbnkpW2tleV07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuZXhwb3J0IGNvbnN0IGFkYXB0RXZlbnRIYW5kbGVycyA9IChcbiAgcHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4gfCBDb21wb25lbnQgfCBGdW5jdGlvbkNvbXBvbmVudCB8IGJvb2xlYW4sXG4gIG5ld0hhbmRsZXI/OiAoZT86IEV2ZW50KSA9PiBhbnksXG4pOiBSZWNvcmQ8c3RyaW5nLCAoZT86IEV2ZW50KSA9PiBhbnk+ID0+IHtcbiAgaWYgKCFwcm9wcyB8fCB0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBpbnB1dFByb3BzID0gcHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PjtcblxuICBpZiAoaXNWYWxpZEVsZW1lbnQocHJvcHMpKSB7XG4gICAgaW5wdXRQcm9wcyA9IHByb3BzLnByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH1cblxuICBpZiAoIV8uaXNPYmplY3QoaW5wdXRQcm9wcykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG91dDogUmVjb3JkPHN0cmluZywgKGU6IEV2ZW50KSA9PiB2b2lkPiA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGlucHV0UHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoRXZlbnRLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIG91dFtrZXldID0gbmV3SGFuZGxlciB8fCAoKGU6IEV2ZW50KSA9PiBpbnB1dFByb3BzW2tleV0oaW5wdXRQcm9wcywgZSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbmNvbnN0IGdldEV2ZW50SGFuZGxlck9mQ2hpbGQgPSAob3JpZ2luYWxIYW5kbGVyOiBGdW5jdGlvbiwgZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiAoZTogRXZlbnQpOiB2b2lkID0+IHtcbiAgb3JpZ2luYWxIYW5kbGVyKGRhdGEsIGluZGV4LCBlKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGFwdEV2ZW50c09mQ2hpbGQgPSAoXG4gIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBkYXRhOiBhbnksXG4gIGluZGV4OiBudW1iZXIsXG4pOiBSZWNvcmQ8c3RyaW5nLCAoZT86IEV2ZW50KSA9PiBhbnk+ID0+IHtcbiAgaWYgKCFfLmlzT2JqZWN0KHByb3BzKSB8fCB0eXBlb2YgcHJvcHMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgb3V0OiBSZWNvcmQ8c3RyaW5nLCAoZTogRXZlbnQpID0+IHZvaWQ+ID0gbnVsbDtcblxuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBpdGVtID0gKHByb3BzIGFzIGFueSlba2V5XTtcbiAgICBpZiAoRXZlbnRLZXlzLmluY2x1ZGVzKGtleSkgJiYgdHlwZW9mIGl0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghb3V0KSBvdXQgPSB7fTtcbiAgICAgIG91dFtrZXldID0gZ2V0RXZlbnRIYW5kbGVyT2ZDaGlsZChpdGVtLCBkYXRhLCBpbmRleCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMge1xuICBjaGFydE5hbWU/OiBzdHJpbmc7XG4gIEdyYXBoaWNhbENoaWxkPzogYW55O1xuICBldmVudFR5cGU/OiBzdHJpbmc7XG4gIGF4aXNDb21wb25lbnRzPzogQmFzZUF4aXNQcm9wc1tdO1xuICBsZWdlbmRDb250ZW50PzogYW55O1xuICBmb3JtYXRBeGlzTWFwPzogYW55O1xuICBkZWZhdWx0UHJvcHM/OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJlZW1hcE5vZGUge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGRlcHRoOiBudW1iZXI7XG4gIGluZGV4OiBudW1iZXI7XG4gIGNoaWxkcmVuPzogYW55O1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlOiBudW1iZXI7XG4gIFtrOiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Fua2V5Tm9kZSB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICBkeDogbnVtYmVyO1xuICBkeTogbnVtYmVyO1xuICBkZXB0aDogbnVtYmVyO1xuICB2YWx1ZTogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBTYW5rZXlMaW5rIHtcbiAgdGFyZ2V0OiBudW1iZXI7XG4gIHNvdXJjZTogbnVtYmVyO1xuICB2YWx1ZTogbnVtYmVyO1xuICBzeTogbnVtYmVyO1xuICBkeTogbnVtYmVyO1xuICB0eTogbnVtYmVyO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMCc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGNvbnN0IG1hdGhTaWduID0gKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHZhbHVlID4gMCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUGVyY2VudCA9ICh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiBfLmlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCclJykgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG5cbmV4cG9ydCBjb25zdCBpc051bWJlciA9ICh2YWx1ZTogYW55KSA9PiBfLmlzTnVtYmVyKHZhbHVlKSAmJiAhXy5pc05hTih2YWx1ZSk7XG5cbmV4cG9ydCBjb25zdCBpc051bU9yU3RyID0gKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpID0+IGlzTnVtYmVyKHZhbHVlIGFzIG51bWJlcikgfHwgXy5pc1N0cmluZyh2YWx1ZSk7XG5cbmxldCBpZENvdW50ZXIgPSAwO1xuZXhwb3J0IGNvbnN0IHVuaXF1ZUlkID0gKHByZWZpeD86IHN0cmluZykgPT4ge1xuICBjb25zdCBpZCA9ICsraWRDb3VudGVyO1xuXG4gIHJldHVybiBgJHtwcmVmaXggfHwgJyd9JHtpZH1gO1xufTtcbi8qKlxuICogR2V0IHBlcmNlbnQgdmFsdWUgb2YgYSB0b3RhbCB2YWx1ZVxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBwZXJjZW50IEEgcGVyY2VudFxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsVmFsdWUgICAgIFRvdGFsIHZhbHVlXG4gKiBAcGFyYW0ge05VbWJlcn0gZGVmYXVsdFZhbHVlICAgVGhlIHZhbHVlIHJldHVybmVkIHdoZW4gcGVyY2VudCBpcyB1bmRlZmluZWQgb3IgaW52YWxpZFxuICogQHBhcmFtIHtCb29sZWFufSB2YWxpZGF0ZSAgICAgIElmIHNldCB0byBiZSB0cnVlLCB0aGUgcmVzdWx0IHdpbGwgYmUgdmFsaWRhdGVkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQZXJjZW50VmFsdWUgPSAocGVyY2VudDogbnVtYmVyIHwgc3RyaW5nLCB0b3RhbFZhbHVlOiBudW1iZXIsIGRlZmF1bHRWYWx1ZSA9IDAsIHZhbGlkYXRlID0gZmFsc2UpID0+IHtcbiAgaWYgKCFpc051bWJlcihwZXJjZW50IGFzIG51bWJlcikgJiYgIV8uaXNTdHJpbmcocGVyY2VudCkpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgbGV0IHZhbHVlO1xuXG4gIGlmIChpc1BlcmNlbnQocGVyY2VudCBhcyBzdHJpbmcpKSB7XG4gICAgY29uc3QgaW5kZXggPSAocGVyY2VudCBhcyBzdHJpbmcpLmluZGV4T2YoJyUnKTtcbiAgICB2YWx1ZSA9ICh0b3RhbFZhbHVlICogcGFyc2VGbG9hdCgocGVyY2VudCBhcyBzdHJpbmcpLnNsaWNlKDAsIGluZGV4KSkpIC8gMTAwO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gK3BlcmNlbnQ7XG4gIH1cblxuICBpZiAoXy5pc05hTih2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGlmICh2YWxpZGF0ZSAmJiB2YWx1ZSA+IHRvdGFsVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvdGFsVmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QW55RWxlbWVudE9mT2JqZWN0ID0gKG9iajogYW55KSA9PiB7XG4gIGlmICghb2JqKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcblxuICBpZiAoa2V5cyAmJiBrZXlzLmxlbmd0aCkge1xuICAgIHJldHVybiBvYmpba2V5c1swXV07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNEdXBsaWNhdGUgPSAoYXJ5OiBBcnJheTxhbnk+KSA9PiB7XG4gIGlmICghXy5pc0FycmF5KGFyeSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBsZW4gPSBhcnkubGVuZ3RoO1xuICBjb25zdCBjYWNoZTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIWNhY2hlW2FyeVtpXV0pIHtcbiAgICAgIGNhY2hlW2FyeVtpXV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaW50ZXJwb2xhdGVOdW1iZXIgPSAobnVtYmVyQTogbnVtYmVyLCBudW1iZXJCOiBudW1iZXIpID0+IHtcbiAgaWYgKGlzTnVtYmVyKG51bWJlckEpICYmIGlzTnVtYmVyKG51bWJlckIpKSB7XG4gICAgcmV0dXJuICh0OiBudW1iZXIpID0+IG51bWJlckEgKyB0ICogKG51bWJlckIgLSBudW1iZXJBKTtcbiAgfVxuXG4gIHJldHVybiAoKSA9PiBudW1iZXJCO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFbnRyeUluQXJyYXk8VD4oXG4gIGFyeTogQXJyYXk8VD4sXG4gIHNwZWNpZmllZEtleTogbnVtYmVyIHwgc3RyaW5nIHwgKChlbnRyeTogVCkgPT4gdW5rbm93biksXG4gIHNwZWNpZmllZFZhbHVlOiBhbnksXG4pIHtcbiAgaWYgKCFhcnkgfHwgIWFyeS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBhcnkuZmluZChcbiAgICBlbnRyeSA9PlxuICAgICAgZW50cnkgJiZcbiAgICAgICh0eXBlb2Ygc3BlY2lmaWVkS2V5ID09PSAnZnVuY3Rpb24nID8gc3BlY2lmaWVkS2V5KGVudHJ5KSA6IF8uZ2V0KGVudHJ5LCBzcGVjaWZpZWRLZXkpKSA9PT0gc3BlY2lmaWVkVmFsdWUsXG4gICk7XG59XG5cbi8qKlxuICogVGhlIGxlYXN0IHNxdWFyZSBsaW5lYXIgcmVncmVzc2lvblxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgYXJyYXkgb2YgcG9pbnRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZG9tYWluIG9mIHgsIGFuZCB0aGUgcGFyYW1ldGVyIG9mIGxpbmVhciBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZ2V0TGluZWFyUmVncmVzc2lvbiA9IChkYXRhOiBBcnJheTx7IGN4PzogbnVtYmVyOyBjeT86IG51bWJlciB9PikgPT4ge1xuICBpZiAoIWRhdGEgfHwgIWRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgbGV0IHhzdW0gPSAwO1xuICBsZXQgeXN1bSA9IDA7XG4gIGxldCB4eXN1bSA9IDA7XG4gIGxldCB4eHN1bSA9IDA7XG4gIGxldCB4bWluID0gSW5maW5pdHk7XG4gIGxldCB4bWF4ID0gLUluZmluaXR5O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB4c3VtICs9IGRhdGFbaV0uY3g7XG4gICAgeXN1bSArPSBkYXRhW2ldLmN5O1xuICAgIHh5c3VtICs9IGRhdGFbaV0uY3ggKiBkYXRhW2ldLmN5O1xuICAgIHh4c3VtICs9IGRhdGFbaV0uY3ggKiBkYXRhW2ldLmN4O1xuICAgIHhtaW4gPSBNYXRoLm1pbih4bWluLCBkYXRhW2ldLmN4KTtcbiAgICB4bWF4ID0gTWF0aC5tYXgoeG1heCwgZGF0YVtpXS5jeCk7XG4gIH1cblxuICBjb25zdCBhID0gbGVuICogeHhzdW0gIT09IHhzdW0gKiB4c3VtID8gKGxlbiAqIHh5c3VtIC0geHN1bSAqIHlzdW0pIC8gKGxlbiAqIHh4c3VtIC0geHN1bSAqIHhzdW0pIDogMDtcblxuICByZXR1cm4ge1xuICAgIHhtaW4sXG4gICAgeG1heCxcbiAgICBhLFxuICAgIGI6ICh5c3VtIC0gYSAqIHhzdW0pIC8gbGVuLFxuICB9O1xufTtcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBMYXllclxuICovXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW50ZXJmYWNlIExheWVyUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFNWR1Byb3BzPFNWR0dFbGVtZW50PiAmIExheWVyUHJvcHM7XG5cbmV4cG9ydCBmdW5jdGlvbiBMYXllcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5vdGhlcnMgfSA9IHByb3BzO1xuICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtbGF5ZXInLCBjbGFzc05hbWUpO1xuXG4gIHJldHVybiAoXG4gICAgPGcgY2xhc3NOYW1lPXtsYXllckNsYXNzfSB7Li4uZmlsdGVyUHJvcHMob3RoZXJzLCB0cnVlKX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9nPlxuICApO1xufVxuIiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldE5pY2VUaWNrVmFsdWVzLCBnZXRUaWNrVmFsdWVzRml4ZWREb21haW4gfSBmcm9tICdyZWNoYXJ0cy1zY2FsZSc7XG5pbXBvcnQgKiBhcyBkM1NjYWxlcyBmcm9tICdkMy1zY2FsZSc7XG5pbXBvcnQge1xuICBzdGFjayBhcyBzaGFwZVN0YWNrLFxuICBzdGFja09yZGVyTm9uZSxcbiAgc3RhY2tPZmZzZXRFeHBhbmQsXG4gIHN0YWNrT2Zmc2V0Tm9uZSxcbiAgc3RhY2tPZmZzZXRTaWxob3VldHRlLFxuICBzdGFja09mZnNldFdpZ2dsZSxcbn0gZnJvbSAnZDMtc2hhcGUnO1xuaW1wb3J0IHsgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc051bU9yU3RyLCB1bmlxdWVJZCwgaXNOdW1iZXIsIGdldFBlcmNlbnRWYWx1ZSwgbWF0aFNpZ24sIGZpbmRFbnRyeUluQXJyYXkgfSBmcm9tICcuL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBMZWdlbmQgfSBmcm9tICcuLi9jb21wb25lbnQvTGVnZW5kJztcbmltcG9ydCB7IGZpbmRBbGxCeVR5cGUsIGZpbmRDaGlsZEJ5VHlwZSwgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICcuL1JlYWN0VXRpbHMnO1xuLy8gVE9ETzogQ2F1c2Ugb2YgY2lyY3VsYXIgZGVwZW5kZW5jeS4gTmVlZHMgcmVmYWN0b3IuXG4vLyBpbXBvcnQgeyBSYWRpdXNBeGlzUHJvcHMsIEFuZ2xlQXhpc1Byb3BzIH0gZnJvbSAnLi4vcG9sYXIvdHlwZXMnO1xuaW1wb3J0IHsgTGF5b3V0VHlwZSwgUG9sYXJMYXlvdXRUeXBlLCBBeGlzVHlwZSwgVGlja0l0ZW0sIEJhc2VBeGlzUHJvcHMsIERhdGFLZXkgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlQnlEYXRhS2V5PFQ+KG9iajogVCwgZGF0YUtleTogRGF0YUtleTxhbnk+LCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgaWYgKF8uaXNOaWwob2JqKSB8fCBfLmlzTmlsKGRhdGFLZXkpKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGlmIChpc051bU9yU3RyKGRhdGFLZXkgYXMgc3RyaW5nKSkge1xuICAgIHJldHVybiBfLmdldChvYmosIGRhdGFLZXkgYXMgc3RyaW5nLCBkZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgaWYgKF8uaXNGdW5jdGlvbihkYXRhS2V5KSkge1xuICAgIHJldHVybiBkYXRhS2V5KG9iaik7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufVxuLyoqXG4gKiBHZXQgZG9tYWluIG9mIGRhdGEgYnkga2V5XG4gKiBAcGFyYW0gIHtBcnJheX0gICBkYXRhICAgICAgVGhlIGRhdGEgZGlzcGxheWVkIGluIHRoZSBjaGFydFxuICogQHBhcmFtICB7U3RyaW5nfSAga2V5ICAgICAgIFRoZSB1bmlxdWUga2V5IG9mIGEgZ3JvdXAgb2YgZGF0YVxuICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSAgICAgIFRoZSB0eXBlIG9mIGF4aXNcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGZpbHRlck5pbCBXaGV0aGVyIG9yIG5vdCBmaWx0ZXIgbmlsIHZhbHVlc1xuICogQHJldHVybiB7QXJyYXl9IERvbWFpbiBvZiBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21haW5PZkRhdGFCeUtleTxUPihkYXRhOiBBcnJheTxUPiwga2V5OiBzdHJpbmcsIHR5cGU6IHN0cmluZywgZmlsdGVyTmlsPzogYm9vbGVhbikge1xuICBjb25zdCBmbGF0dGVuRGF0YSA9IF8uZmxhdE1hcChkYXRhLCBlbnRyeSA9PiBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwga2V5KSk7XG5cbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgY29uc3QgZG9tYWluID0gZmxhdHRlbkRhdGEuZmlsdGVyKGVudHJ5ID0+IGlzTnVtYmVyKGVudHJ5KSB8fCBwYXJzZUZsb2F0KGVudHJ5KSk7XG5cbiAgICByZXR1cm4gZG9tYWluLmxlbmd0aCA/IFtfLm1pbihkb21haW4pLCBfLm1heChkb21haW4pXSA6IFtJbmZpbml0eSwgLUluZmluaXR5XTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlRGF0YSA9IGZpbHRlck5pbCA/IGZsYXR0ZW5EYXRhLmZpbHRlcihlbnRyeSA9PiAhXy5pc05pbChlbnRyeSkpIDogZmxhdHRlbkRhdGE7XG5cbiAgLy8g5pSv5oyBRGF0Zeexu+Wei+eahHjovbRcbiAgcmV0dXJuIHZhbGlkYXRlRGF0YS5tYXAoZW50cnkgPT4gKGlzTnVtT3JTdHIoZW50cnkpIHx8IGVudHJ5IGluc3RhbmNlb2YgRGF0ZSA/IGVudHJ5IDogJycpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUFjdGl2ZVRpY2tJbmRleCA9IChcbiAgY29vcmRpbmF0ZTogbnVtYmVyLFxuICB0aWNrczogQXJyYXk8VGlja0l0ZW0+ID0gW10sXG4gIHVuc29ydGVkVGlja3M6IEFycmF5PFRpY2tJdGVtPixcbiAgYXhpczogQmFzZUF4aXNQcm9wcyxcbikgPT4ge1xuICBsZXQgaW5kZXggPSAtMTtcbiAgY29uc3QgbGVuID0gdGlja3M/Lmxlbmd0aCA/PyAwO1xuXG4gIGlmIChsZW4gPiAxKSB7XG4gICAgaWYgKGF4aXMgJiYgYXhpcy5heGlzVHlwZSA9PT0gJ2FuZ2xlQXhpcycgJiYgTWF0aC5hYnMoTWF0aC5hYnMoYXhpcy5yYW5nZVsxXSAtIGF4aXMucmFuZ2VbMF0pIC0gMzYwKSA8PSAxZS02KSB7XG4gICAgICBjb25zdCB7IHJhbmdlIH0gPSBheGlzO1xuICAgICAgLy8gdGlja3MgYXJlIGRpc3RyaWJ1dGVkIGluIGEgY2lyY2xlXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZSA9IGkgPiAwID8gdW5zb3J0ZWRUaWNrc1tpIC0gMV0uY29vcmRpbmF0ZSA6IHVuc29ydGVkVGlja3NbbGVuIC0gMV0uY29vcmRpbmF0ZTtcbiAgICAgICAgY29uc3QgY3VyID0gdW5zb3J0ZWRUaWNrc1tpXS5jb29yZGluYXRlO1xuICAgICAgICBjb25zdCBhZnRlciA9IGkgPj0gbGVuIC0gMSA/IHVuc29ydGVkVGlja3NbMF0uY29vcmRpbmF0ZSA6IHVuc29ydGVkVGlja3NbaSArIDFdLmNvb3JkaW5hdGU7XG4gICAgICAgIGxldCBzYW1lRGlyZWN0aW9uQ29vcmQ7XG5cbiAgICAgICAgaWYgKG1hdGhTaWduKGN1ciAtIGJlZm9yZSkgIT09IG1hdGhTaWduKGFmdGVyIC0gY3VyKSkge1xuICAgICAgICAgIGNvbnN0IGRpZmZJbnRlcnZhbCA9IFtdO1xuICAgICAgICAgIGlmIChtYXRoU2lnbihhZnRlciAtIGN1cikgPT09IG1hdGhTaWduKHJhbmdlWzFdIC0gcmFuZ2VbMF0pKSB7XG4gICAgICAgICAgICBzYW1lRGlyZWN0aW9uQ29vcmQgPSBhZnRlcjtcblxuICAgICAgICAgICAgY29uc3QgY3VySW5SYW5nZSA9IGN1ciArIHJhbmdlWzFdIC0gcmFuZ2VbMF07XG4gICAgICAgICAgICBkaWZmSW50ZXJ2YWxbMF0gPSBNYXRoLm1pbihjdXJJblJhbmdlLCAoY3VySW5SYW5nZSArIGJlZm9yZSkgLyAyKTtcbiAgICAgICAgICAgIGRpZmZJbnRlcnZhbFsxXSA9IE1hdGgubWF4KGN1ckluUmFuZ2UsIChjdXJJblJhbmdlICsgYmVmb3JlKSAvIDIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzYW1lRGlyZWN0aW9uQ29vcmQgPSBiZWZvcmU7XG5cbiAgICAgICAgICAgIGNvbnN0IGFmdGVySW5SYW5nZSA9IGFmdGVyICsgcmFuZ2VbMV0gLSByYW5nZVswXTtcbiAgICAgICAgICAgIGRpZmZJbnRlcnZhbFswXSA9IE1hdGgubWluKGN1ciwgKGFmdGVySW5SYW5nZSArIGN1cikgLyAyKTtcbiAgICAgICAgICAgIGRpZmZJbnRlcnZhbFsxXSA9IE1hdGgubWF4KGN1ciwgKGFmdGVySW5SYW5nZSArIGN1cikgLyAyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2FtZUludGVydmFsID0gW1xuICAgICAgICAgICAgTWF0aC5taW4oY3VyLCAoc2FtZURpcmVjdGlvbkNvb3JkICsgY3VyKSAvIDIpLFxuICAgICAgICAgICAgTWF0aC5tYXgoY3VyLCAoc2FtZURpcmVjdGlvbkNvb3JkICsgY3VyKSAvIDIpLFxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoY29vcmRpbmF0ZSA+IHNhbWVJbnRlcnZhbFswXSAmJiBjb29yZGluYXRlIDw9IHNhbWVJbnRlcnZhbFsxXSkgfHxcbiAgICAgICAgICAgIChjb29yZGluYXRlID49IGRpZmZJbnRlcnZhbFswXSAmJiBjb29yZGluYXRlIDw9IGRpZmZJbnRlcnZhbFsxXSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgICh7IGluZGV4IH0gPSB1bnNvcnRlZFRpY2tzW2ldKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihiZWZvcmUsIGFmdGVyKTtcbiAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChiZWZvcmUsIGFmdGVyKTtcblxuICAgICAgICAgIGlmIChjb29yZGluYXRlID4gKG1pbiArIGN1cikgLyAyICYmIGNvb3JkaW5hdGUgPD0gKG1heCArIGN1cikgLyAyKSB7XG4gICAgICAgICAgICAoeyBpbmRleCB9ID0gdW5zb3J0ZWRUaWNrc1tpXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGlja3MgYXJlIGRpc3RyaWJ1dGVkIGluIGEgc2luZ2xlIGRpcmVjdGlvblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGkgPT09IDAgJiYgY29vcmRpbmF0ZSA8PSAodGlja3NbaV0uY29vcmRpbmF0ZSArIHRpY2tzW2kgKyAxXS5jb29yZGluYXRlKSAvIDIpIHx8XG4gICAgICAgICAgKGkgPiAwICYmXG4gICAgICAgICAgICBpIDwgbGVuIC0gMSAmJlxuICAgICAgICAgICAgY29vcmRpbmF0ZSA+ICh0aWNrc1tpXS5jb29yZGluYXRlICsgdGlja3NbaSAtIDFdLmNvb3JkaW5hdGUpIC8gMiAmJlxuICAgICAgICAgICAgY29vcmRpbmF0ZSA8PSAodGlja3NbaV0uY29vcmRpbmF0ZSArIHRpY2tzW2kgKyAxXS5jb29yZGluYXRlKSAvIDIpIHx8XG4gICAgICAgICAgKGkgPT09IGxlbiAtIDEgJiYgY29vcmRpbmF0ZSA+ICh0aWNrc1tpXS5jb29yZGluYXRlICsgdGlja3NbaSAtIDFdLmNvb3JkaW5hdGUpIC8gMilcbiAgICAgICAgKSB7XG4gICAgICAgICAgKHsgaW5kZXggfSA9IHRpY2tzW2ldKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbWFpbiBjb2xvciBvZiBlYWNoIGdyYXBoaWMgaXRlbVxuICogQHBhcmFtICB7UmVhY3RFbGVtZW50fSBpdGVtIEEgZ3JhcGhpYyBpdGVtXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgQ29sb3JcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE1haW5Db2xvck9mR3JhcGhpY0l0ZW0gPSAoaXRlbTogUmVhY3RFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0eXBlOiB7IGRpc3BsYXlOYW1lIH0sXG4gIH0gPSBpdGVtIGFzIGFueTsgLy8gVE9ETzogY2hlY2sgaWYgZGlzcGxheU5hbWUgaXMgdmFsaWQuXG4gIGNvbnN0IHsgc3Ryb2tlLCBmaWxsIH0gPSBpdGVtLnByb3BzO1xuICBsZXQgcmVzdWx0O1xuXG4gIHN3aXRjaCAoZGlzcGxheU5hbWUpIHtcbiAgICBjYXNlICdMaW5lJzpcbiAgICAgIHJlc3VsdCA9IHN0cm9rZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0FyZWEnOlxuICAgIGNhc2UgJ1JhZGFyJzpcbiAgICAgIHJlc3VsdCA9IHN0cm9rZSAmJiBzdHJva2UgIT09ICdub25lJyA/IHN0cm9rZSA6IGZpbGw7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVzdWx0ID0gZmlsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIFRPRE86IEZvcm1hdGVkIC0+IEZvcm1hdHRlZC5cbmludGVyZmFjZSBGb3JtYXRlZEdyYXBoaWNhbEl0ZW0ge1xuICBwcm9wczogYW55O1xuICBjaGlsZEluZGV4OiBudW1iZXI7XG4gIGl0ZW06IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldExlZ2VuZFByb3BzID0gKHtcbiAgY2hpbGRyZW4sXG4gIGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMsXG4gIGxlZ2VuZFdpZHRoLFxuICBsZWdlbmRDb250ZW50LFxufToge1xuICBjaGlsZHJlbjogYW55O1xuICBmb3JtYXRlZEdyYXBoaWNhbEl0ZW1zPzogQXJyYXk8Rm9ybWF0ZWRHcmFwaGljYWxJdGVtPjtcbiAgbGVnZW5kV2lkdGg6IG51bWJlcjtcbiAgbGVnZW5kQ29udGVudD86IGFueTtcbn0pID0+IHtcbiAgY29uc3QgbGVnZW5kSXRlbSA9IGZpbmRDaGlsZEJ5VHlwZShjaGlsZHJlbiwgTGVnZW5kLmRpc3BsYXlOYW1lKTtcbiAgaWYgKCFsZWdlbmRJdGVtKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgbGVnZW5kRGF0YTtcbiAgaWYgKGxlZ2VuZEl0ZW0ucHJvcHMgJiYgbGVnZW5kSXRlbS5wcm9wcy5wYXlsb2FkKSB7XG4gICAgbGVnZW5kRGF0YSA9IGxlZ2VuZEl0ZW0ucHJvcHMgJiYgbGVnZW5kSXRlbS5wcm9wcy5wYXlsb2FkO1xuICB9IGVsc2UgaWYgKGxlZ2VuZENvbnRlbnQgPT09ICdjaGlsZHJlbicpIHtcbiAgICBsZWdlbmREYXRhID0gKGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMgfHwgW10pLnJlZHVjZSgocmVzdWx0LCB7IGl0ZW0sIHByb3BzIH0pID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBwcm9wcy5zZWN0b3JzIHx8IHByb3BzLmRhdGEgfHwgW107XG5cbiAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KFxuICAgICAgICBkYXRhLm1hcCgoZW50cnk6IGFueSkgPT4gKHtcbiAgICAgICAgICB0eXBlOiBsZWdlbmRJdGVtLnByb3BzLmljb25UeXBlIHx8IGl0ZW0ucHJvcHMubGVnZW5kVHlwZSxcbiAgICAgICAgICB2YWx1ZTogZW50cnkubmFtZSxcbiAgICAgICAgICBjb2xvcjogZW50cnkuZmlsbCxcbiAgICAgICAgICBwYXlsb2FkOiBlbnRyeSxcbiAgICAgICAgfSkpLFxuICAgICAgKTtcbiAgICB9LCBbXSk7XG4gIH0gZWxzZSB7XG4gICAgbGVnZW5kRGF0YSA9IChmb3JtYXRlZEdyYXBoaWNhbEl0ZW1zIHx8IFtdKS5tYXAoKHsgaXRlbSB9KSA9PiB7XG4gICAgICBjb25zdCB7IGRhdGFLZXksIG5hbWUsIGxlZ2VuZFR5cGUsIGhpZGUgfSA9IGl0ZW0ucHJvcHM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluYWN0aXZlOiBoaWRlLFxuICAgICAgICBkYXRhS2V5LFxuICAgICAgICB0eXBlOiBsZWdlbmRJdGVtLnByb3BzLmljb25UeXBlIHx8IGxlZ2VuZFR5cGUgfHwgJ3NxdWFyZScsXG4gICAgICAgIGNvbG9yOiBnZXRNYWluQ29sb3JPZkdyYXBoaWNJdGVtKGl0ZW0pLFxuICAgICAgICB2YWx1ZTogbmFtZSB8fCBkYXRhS2V5LFxuICAgICAgICBwYXlsb2FkOiBpdGVtLnByb3BzLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4ubGVnZW5kSXRlbS5wcm9wcyxcbiAgICAuLi5MZWdlbmQuZ2V0V2l0aEhlaWdodChsZWdlbmRJdGVtLCBsZWdlbmRXaWR0aCksXG4gICAgcGF5bG9hZDogbGVnZW5kRGF0YSxcbiAgICBpdGVtOiBsZWdlbmRJdGVtLFxuICB9O1xufTtcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzaXplIG9mIGFsbCBncm91cHMgZm9yIHN0YWNrZWQgYmFyIGdyYXBoXG4gKiBAcGFyYW0gIHtPYmplY3R9IHN0YWNrR3JvdXBzIFRoZSBpdGVtcyBncm91cGVkIGJ5IGF4aXNJZCBhbmQgc3RhY2tJZFxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc2l6ZSBvZiBhbGwgZ3JvdXBzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCYXJTaXplTGlzdCA9ICh7XG4gIGJhclNpemU6IGdsb2JhbFNpemUsXG4gIHN0YWNrR3JvdXBzID0ge30sXG59OiB7XG4gIGJhclNpemU6IG51bWJlciB8IHN0cmluZztcbiAgc3RhY2tHcm91cHM6IGFueTtcbn0pID0+IHtcbiAgaWYgKCFzdGFja0dyb3Vwcykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICBjb25zdCBudW1lcmljQXhpc0lkcyA9IE9iamVjdC5rZXlzKHN0YWNrR3JvdXBzKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gbnVtZXJpY0F4aXNJZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBzZ3MgPSBzdGFja0dyb3Vwc1tudW1lcmljQXhpc0lkc1tpXV0uc3RhY2tHcm91cHM7XG4gICAgY29uc3Qgc3RhY2tJZHMgPSBPYmplY3Qua2V5cyhzZ3MpO1xuXG4gICAgZm9yIChsZXQgaiA9IDAsIHNMZW4gPSBzdGFja0lkcy5sZW5ndGg7IGogPCBzTGVuOyBqKyspIHtcbiAgICAgIGNvbnN0IHsgaXRlbXMsIGNhdGVBeGlzSWQgfSA9IHNnc1tzdGFja0lkc1tqXV07XG5cbiAgICAgIGNvbnN0IGJhckl0ZW1zID0gaXRlbXMuZmlsdGVyKChpdGVtOiBhbnkpID0+IGdldERpc3BsYXlOYW1lKGl0ZW0udHlwZSkuaW5kZXhPZignQmFyJykgPj0gMCk7XG5cbiAgICAgIGlmIChiYXJJdGVtcyAmJiBiYXJJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgeyBiYXJTaXplOiBzZWxmU2l6ZSB9ID0gYmFySXRlbXNbMF0ucHJvcHM7XG4gICAgICAgIGNvbnN0IGNhdGVJZCA9IGJhckl0ZW1zWzBdLnByb3BzW2NhdGVBeGlzSWRdO1xuXG4gICAgICAgIGlmICghcmVzdWx0W2NhdGVJZF0pIHtcbiAgICAgICAgICByZXN1bHRbY2F0ZUlkXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0W2NhdGVJZF0ucHVzaCh7XG4gICAgICAgICAgaXRlbTogYmFySXRlbXNbMF0sXG4gICAgICAgICAgc3RhY2tMaXN0OiBiYXJJdGVtcy5zbGljZSgxKSxcbiAgICAgICAgICBiYXJTaXplOiBfLmlzTmlsKHNlbGZTaXplKSA/IGdsb2JhbFNpemUgOiBzZWxmU2l6ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzaXplIG9mIGVhY2ggYmFyIGFuZCB0aGUgZ2FwIGJldHdlZW4gdHdvIGJhcnNcbiAqIEBwYXJhbSAge051bWJlcn0gYmFuZFNpemUgIFRoZSBzaXplIG9mIGVhY2ggY2F0ZWdvcnlcbiAqIEBwYXJhbSAge3NpemVMaXN0fSBzaXplTGlzdCAgVGhlIHNpemUgb2YgYWxsIGdyb3Vwc1xuICogQHBhcmFtICB7bWF4QmFyU2l6ZX0gbWF4QmFyU2l6ZSBUaGUgbWF4aW11bSBzaXplIG9mIGJhclxuICogQHJldHVybiB7TnVtYmVyfSBUaGUgc2l6ZSBvZiBlYWNoIGJhciBhbmQgdGhlIGdhcCBiZXR3ZWVuIHR3byBiYXJzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCYXJQb3NpdGlvbiA9ICh7XG4gIGJhckdhcCxcbiAgYmFyQ2F0ZWdvcnlHYXAsXG4gIGJhbmRTaXplLFxuICBzaXplTGlzdCA9IFtdLFxuICBtYXhCYXJTaXplLFxufToge1xuICBiYXJHYXA6IHN0cmluZyB8IG51bWJlcjtcbiAgYmFyQ2F0ZWdvcnlHYXA6IHN0cmluZyB8IG51bWJlcjtcbiAgYmFuZFNpemU6IG51bWJlcjtcbiAgc2l6ZUxpc3Q6IEFycmF5PGFueT47XG4gIG1heEJhclNpemU6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgbGVuID0gc2l6ZUxpc3QubGVuZ3RoO1xuICBpZiAobGVuIDwgMSkgcmV0dXJuIG51bGw7XG5cbiAgbGV0IHJlYWxCYXJHYXAgPSBnZXRQZXJjZW50VmFsdWUoYmFyR2FwLCBiYW5kU2l6ZSwgMCwgdHJ1ZSk7XG4gIGxldCByZXN1bHQ7XG5cbiAgLy8gd2hldGhlciBvciBub3QgaXMgYmFyU2l6ZSBzZXR0ZWQgYnkgdXNlclxuICBpZiAoc2l6ZUxpc3RbMF0uYmFyU2l6ZSA9PT0gK3NpemVMaXN0WzBdLmJhclNpemUpIHtcbiAgICBsZXQgdXNlRnVsbCA9IGZhbHNlO1xuICAgIGxldCBmdWxsQmFyU2l6ZSA9IGJhbmRTaXplIC8gbGVuO1xuICAgIGxldCBzdW0gPSBzaXplTGlzdC5yZWR1Y2UoKHJlcywgZW50cnkpID0+IHJlcyArIGVudHJ5LmJhclNpemUgfHwgMCwgMCk7XG4gICAgc3VtICs9IChsZW4gLSAxKSAqIHJlYWxCYXJHYXA7XG5cbiAgICBpZiAoc3VtID49IGJhbmRTaXplKSB7XG4gICAgICBzdW0gLT0gKGxlbiAtIDEpICogcmVhbEJhckdhcDtcbiAgICAgIHJlYWxCYXJHYXAgPSAwO1xuICAgIH1cbiAgICBpZiAoc3VtID49IGJhbmRTaXplICYmIGZ1bGxCYXJTaXplID4gMCkge1xuICAgICAgdXNlRnVsbCA9IHRydWU7XG4gICAgICBmdWxsQmFyU2l6ZSAqPSAwLjk7XG4gICAgICBzdW0gPSBsZW4gKiBmdWxsQmFyU2l6ZTtcbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXQgPSAoKGJhbmRTaXplIC0gc3VtKSAvIDIpID4+IDA7XG4gICAgbGV0IHByZXYgPSB7IG9mZnNldDogb2Zmc2V0IC0gcmVhbEJhckdhcCwgc2l6ZTogMCB9O1xuXG4gICAgcmVzdWx0ID0gc2l6ZUxpc3QucmVkdWNlKChyZXMsIGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBuZXdSZXMgPSBbXG4gICAgICAgIC4uLnJlcyxcbiAgICAgICAge1xuICAgICAgICAgIGl0ZW06IGVudHJ5Lml0ZW0sXG4gICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgIG9mZnNldDogcHJldi5vZmZzZXQgKyBwcmV2LnNpemUgKyByZWFsQmFyR2FwLFxuICAgICAgICAgICAgc2l6ZTogdXNlRnVsbCA/IGZ1bGxCYXJTaXplIDogZW50cnkuYmFyU2l6ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgcHJldiA9IG5ld1Jlc1tuZXdSZXMubGVuZ3RoIC0gMV0ucG9zaXRpb247XG5cbiAgICAgIGlmIChlbnRyeS5zdGFja0xpc3QgJiYgZW50cnkuc3RhY2tMaXN0Lmxlbmd0aCkge1xuICAgICAgICBlbnRyeS5zdGFja0xpc3QuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgbmV3UmVzLnB1c2goeyBpdGVtLCBwb3NpdGlvbjogcHJldiB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3UmVzO1xuICAgIH0sIFtdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBvZmZzZXQgPSBnZXRQZXJjZW50VmFsdWUoYmFyQ2F0ZWdvcnlHYXAsIGJhbmRTaXplLCAwLCB0cnVlKTtcblxuICAgIGlmIChiYW5kU2l6ZSAtIDIgKiBvZmZzZXQgLSAobGVuIC0gMSkgKiByZWFsQmFyR2FwIDw9IDApIHtcbiAgICAgIHJlYWxCYXJHYXAgPSAwO1xuICAgIH1cblxuICAgIGxldCBvcmlnaW5hbFNpemUgPSAoYmFuZFNpemUgLSAyICogb2Zmc2V0IC0gKGxlbiAtIDEpICogcmVhbEJhckdhcCkgLyBsZW47XG4gICAgaWYgKG9yaWdpbmFsU2l6ZSA+IDEpIHtcbiAgICAgIG9yaWdpbmFsU2l6ZSA+Pj0gMDtcbiAgICB9XG4gICAgY29uc3Qgc2l6ZSA9IG1heEJhclNpemUgPT09ICttYXhCYXJTaXplID8gTWF0aC5taW4ob3JpZ2luYWxTaXplLCBtYXhCYXJTaXplKSA6IG9yaWdpbmFsU2l6ZTtcblxuICAgIHJlc3VsdCA9IHNpemVMaXN0LnJlZHVjZSgocmVzLCBlbnRyeSwgaSkgPT4ge1xuICAgICAgY29uc3QgbmV3UmVzID0gW1xuICAgICAgICAuLi5yZXMsXG4gICAgICAgIHtcbiAgICAgICAgICBpdGVtOiBlbnRyeS5pdGVtLFxuICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCArIChvcmlnaW5hbFNpemUgKyByZWFsQmFyR2FwKSAqIGkgKyAob3JpZ2luYWxTaXplIC0gc2l6ZSkgLyAyLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgaWYgKGVudHJ5LnN0YWNrTGlzdCAmJiBlbnRyeS5zdGFja0xpc3QubGVuZ3RoKSB7XG4gICAgICAgIGVudHJ5LnN0YWNrTGlzdC5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICBuZXdSZXMucHVzaCh7IGl0ZW0sIHBvc2l0aW9uOiBuZXdSZXNbbmV3UmVzLmxlbmd0aCAtIDFdLnBvc2l0aW9uIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdSZXM7XG4gICAgfSwgW10pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBhcHBlbmRPZmZzZXRPZkxlZ2VuZCA9IChvZmZzZXQ6IGFueSwgaXRlbXM6IEFycmF5PEZvcm1hdGVkR3JhcGhpY2FsSXRlbT4sIHByb3BzOiBhbnksIGxlZ2VuZEJveDogYW55KSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIHdpZHRoLCBtYXJnaW4gfSA9IHByb3BzO1xuICBjb25zdCBsZWdlbmRXaWR0aCA9IHdpZHRoIC0gKG1hcmdpbi5sZWZ0IHx8IDApIC0gKG1hcmdpbi5yaWdodCB8fCAwKTtcbiAgLy8gY29uc3QgbGVnZW5kSGVpZ2h0ID0gaGVpZ2h0IC0gKG1hcmdpbi50b3AgfHwgMCkgLSAobWFyZ2luLmJvdHRvbSB8fCAwKTtcbiAgY29uc3QgbGVnZW5kUHJvcHMgPSBnZXRMZWdlbmRQcm9wcyh7IGNoaWxkcmVuLCBsZWdlbmRXaWR0aCB9KTtcbiAgbGV0IG5ld09mZnNldCA9IG9mZnNldDtcblxuICBpZiAobGVnZW5kUHJvcHMpIHtcbiAgICBjb25zdCBib3ggPSBsZWdlbmRCb3ggfHwge307XG4gICAgY29uc3QgeyBhbGlnbiwgdmVydGljYWxBbGlnbiwgbGF5b3V0IH0gPSBsZWdlbmRQcm9wcztcblxuICAgIGlmICgobGF5b3V0ID09PSAndmVydGljYWwnIHx8IChsYXlvdXQgPT09ICdob3Jpem9udGFsJyAmJiB2ZXJ0aWNhbEFsaWduID09PSAnY2VudGVyJykpICYmIGlzTnVtYmVyKG9mZnNldFthbGlnbl0pKSB7XG4gICAgICBuZXdPZmZzZXQgPSB7IC4uLm9mZnNldCwgW2FsaWduXTogbmV3T2Zmc2V0W2FsaWduXSArIChib3gud2lkdGggfHwgMCkgfTtcbiAgICB9XG5cbiAgICBpZiAoKGxheW91dCA9PT0gJ2hvcml6b250YWwnIHx8IChsYXlvdXQgPT09ICd2ZXJ0aWNhbCcgJiYgYWxpZ24gPT09ICdjZW50ZXInKSkgJiYgaXNOdW1iZXIob2Zmc2V0W3ZlcnRpY2FsQWxpZ25dKSkge1xuICAgICAgbmV3T2Zmc2V0ID0geyAuLi5vZmZzZXQsIFt2ZXJ0aWNhbEFsaWduXTogbmV3T2Zmc2V0W3ZlcnRpY2FsQWxpZ25dICsgKGJveC5oZWlnaHQgfHwgMCkgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3T2Zmc2V0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERvbWFpbk9mRXJyb3JCYXJzID0gKGRhdGE6IGFueVtdLCBpdGVtOiBhbnksIGRhdGFLZXk6IGFueSwgYXhpc1R5cGU/OiBBeGlzVHlwZSkgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBpdGVtLnByb3BzO1xuICBjb25zdCBlcnJvckJhcnMgPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCAnRXJyb3JCYXInKS5maWx0ZXIoKGVycm9yQmFyQ2hpbGQ6IGFueSkgPT4ge1xuICAgIGNvbnN0IHsgZGlyZWN0aW9uIH0gPSBlcnJvckJhckNoaWxkLnByb3BzO1xuXG4gICAgcmV0dXJuIF8uaXNOaWwoZGlyZWN0aW9uKSB8fCBfLmlzTmlsKGF4aXNUeXBlKSA/IHRydWUgOiBheGlzVHlwZS5pbmRleE9mKGRpcmVjdGlvbikgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGVycm9yQmFycyAmJiBlcnJvckJhcnMubGVuZ3RoKSB7XG4gICAgY29uc3Qga2V5cyA9IGVycm9yQmFycy5tYXAoKGVycm9yQmFyQ2hpbGQ6IGFueSkgPT4gZXJyb3JCYXJDaGlsZC5wcm9wcy5kYXRhS2V5KTtcblxuICAgIHJldHVybiBkYXRhLnJlZHVjZShcbiAgICAgIChyZXN1bHQsIGVudHJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVudHJ5VmFsdWUgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgZGF0YUtleSwgMCk7XG4gICAgICAgIGNvbnN0IG1haW5WYWx1ZSA9IF8uaXNBcnJheShlbnRyeVZhbHVlKSA/IFtfLm1pbihlbnRyeVZhbHVlKSwgXy5tYXgoZW50cnlWYWx1ZSldIDogW2VudHJ5VmFsdWUsIGVudHJ5VmFsdWVdO1xuICAgICAgICBjb25zdCBlcnJvckRvbWFpbiA9IGtleXMucmVkdWNlKFxuICAgICAgICAgIChwcmV2RXJyb3JBcnI6IFtudW1iZXIsIG51bWJlcl0sIGs6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JWYWx1ZSA9IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5LCBrLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyVmFsdWUgPSBtYWluVmFsdWVbMF0gLSBNYXRoLmFicyhfLmlzQXJyYXkoZXJyb3JWYWx1ZSkgPyBlcnJvclZhbHVlWzBdIDogZXJyb3JWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCB1cHBlclZhbHVlID0gbWFpblZhbHVlWzFdICsgTWF0aC5hYnMoXy5pc0FycmF5KGVycm9yVmFsdWUpID8gZXJyb3JWYWx1ZVsxXSA6IGVycm9yVmFsdWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gW01hdGgubWluKGxvd2VyVmFsdWUsIHByZXZFcnJvckFyclswXSksIE1hdGgubWF4KHVwcGVyVmFsdWUsIHByZXZFcnJvckFyclsxXSldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgW0luZmluaXR5LCAtSW5maW5pdHldLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBbTWF0aC5taW4oZXJyb3JEb21haW5bMF0sIHJlc3VsdFswXSksIE1hdGgubWF4KGVycm9yRG9tYWluWzFdLCByZXN1bHRbMV0pXTtcbiAgICAgIH0sXG4gICAgICBbSW5maW5pdHksIC1JbmZpbml0eV0sXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCBjb25zdCBwYXJzZUVycm9yQmFyc09mQXhpcyA9IChkYXRhOiBhbnlbXSwgaXRlbXM6IGFueVtdLCBkYXRhS2V5OiBhbnksIGF4aXNUeXBlOiBBeGlzVHlwZSkgPT4ge1xuICBjb25zdCBkb21haW5zID0gaXRlbXNcbiAgICAubWFwKGl0ZW0gPT4gZ2V0RG9tYWluT2ZFcnJvckJhcnMoZGF0YSwgaXRlbSwgZGF0YUtleSwgYXhpc1R5cGUpKVxuICAgIC5maWx0ZXIoZW50cnkgPT4gIV8uaXNOaWwoZW50cnkpKTtcblxuICBpZiAoZG9tYWlucyAmJiBkb21haW5zLmxlbmd0aCkge1xuICAgIHJldHVybiBkb21haW5zLnJlZHVjZSgocmVzdWx0LCBlbnRyeSkgPT4gW01hdGgubWluKHJlc3VsdFswXSwgZW50cnlbMF0pLCBNYXRoLm1heChyZXN1bHRbMV0sIGVudHJ5WzFdKV0sIFtcbiAgICAgIEluZmluaXR5LFxuICAgICAgLUluZmluaXR5LFxuICAgIF0pO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuLyoqXG4gKiBHZXQgZG9tYWluIG9mIGRhdGEgYnkgdGhlIGNvbmZpZ3VyYXRpb24gb2YgaXRlbSBlbGVtZW50XG4gKiBAcGFyYW0gIHtBcnJheX0gICBkYXRhICAgICAgVGhlIGRhdGEgZGlzcGxheWVkIGluIHRoZSBjaGFydFxuICogQHBhcmFtICB7QXJyYXl9ICAgaXRlbXMgICAgIFRoZSBpbnN0YW5jZXMgb2YgaXRlbVxuICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSAgICAgIFRoZSB0eXBlIG9mIGF4aXMsIG51bWJlciAtIE51bWJlciBBeGlzLCBjYXRlZ29yeSAtIENhdGVnb3J5IEF4aXNcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGZpbHRlck5pbCBXaGV0aGVyIG9yIG5vdCBmaWx0ZXIgbmlsIHZhbHVlc1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgICBEb21haW5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldERvbWFpbk9mSXRlbXNXaXRoU2FtZUF4aXMgPSAoZGF0YTogYW55W10sIGl0ZW1zOiBhbnlbXSwgdHlwZTogc3RyaW5nLCBmaWx0ZXJOaWw/OiBib29sZWFuKSA9PiB7XG4gIGNvbnN0IGRvbWFpbnMgPSBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgY29uc3QgeyBkYXRhS2V5IH0gPSBpdGVtLnByb3BzO1xuXG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGRhdGFLZXkpIHtcbiAgICAgIHJldHVybiBnZXREb21haW5PZkVycm9yQmFycyhkYXRhLCBpdGVtLCBkYXRhS2V5KSB8fCBnZXREb21haW5PZkRhdGFCeUtleShkYXRhLCBkYXRhS2V5LCB0eXBlLCBmaWx0ZXJOaWwpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RG9tYWluT2ZEYXRhQnlLZXkoZGF0YSwgZGF0YUtleSwgdHlwZSwgZmlsdGVyTmlsKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkb21haW4gb2YgbnVtYmVyIGF4aXNcbiAgICByZXR1cm4gZG9tYWlucy5yZWR1Y2UoKHJlc3VsdCwgZW50cnkpID0+IFtNYXRoLm1pbihyZXN1bHRbMF0sIGVudHJ5WzBdKSwgTWF0aC5tYXgocmVzdWx0WzFdLCBlbnRyeVsxXSldLCBbXG4gICAgICBJbmZpbml0eSxcbiAgICAgIC1JbmZpbml0eSxcbiAgICBdKTtcbiAgfVxuXG4gIGNvbnN0IHRhZzogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAvLyBHZXQgdGhlIHVuaW9uIHNldCBvZiBjYXRlZ29yeSBheGlzXG4gIHJldHVybiBkb21haW5zLnJlZHVjZSgocmVzdWx0LCBlbnRyeSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbnRyeS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCF0YWdbZW50cnlbaV1dKSB7XG4gICAgICAgIHRhZ1tlbnRyeVtpXV0gPSB0cnVlO1xuXG4gICAgICAgIHJlc3VsdC5wdXNoKGVudHJ5W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgW10pO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ2F0ZWdvcmljYWxBeGlzID0gKGxheW91dDogTGF5b3V0VHlwZSB8IFBvbGFyTGF5b3V0VHlwZSwgYXhpc1R5cGU6IEF4aXNUeXBlKSA9PlxuICAobGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgJiYgYXhpc1R5cGUgPT09ICd4QXhpcycpIHx8XG4gIChsYXlvdXQgPT09ICd2ZXJ0aWNhbCcgJiYgYXhpc1R5cGUgPT09ICd5QXhpcycpIHx8XG4gIChsYXlvdXQgPT09ICdjZW50cmljJyAmJiBheGlzVHlwZSA9PT0gJ2FuZ2xlQXhpcycpIHx8XG4gIChsYXlvdXQgPT09ICdyYWRpYWwnICYmIGF4aXNUeXBlID09PSAncmFkaXVzQXhpcycpO1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgQ29vcmRpbmF0ZXMgb2YgZ3JpZFxuICogQHBhcmFtICB7QXJyYXl9IHRpY2tzIFRoZSB0aWNrcyBpbiBheGlzXG4gKiBAcGFyYW0ge051bWJlcn0gbWluICAgVGhlIG1pbmltdW4gdmFsdWUgb2YgYXhpc1xuICogQHBhcmFtIHtOdW1iZXJ9IG1heCAgIFRoZSBtYXhpbXVuIHZhbHVlIG9mIGF4aXNcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBDb29yZGluYXRlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0Q29vcmRpbmF0ZXNPZkdyaWQgPSAodGlja3M6IEFycmF5PFRpY2tJdGVtPiwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiB7XG4gIGxldCBoYXNNaW4sIGhhc01heDtcblxuICBjb25zdCB2YWx1ZXMgPSB0aWNrcy5tYXAoZW50cnkgPT4ge1xuICAgIGlmIChlbnRyeS5jb29yZGluYXRlID09PSBtaW4pIHtcbiAgICAgIGhhc01pbiA9IHRydWU7XG4gICAgfVxuICAgIGlmIChlbnRyeS5jb29yZGluYXRlID09PSBtYXgpIHtcbiAgICAgIGhhc01heCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudHJ5LmNvb3JkaW5hdGU7XG4gIH0pO1xuXG4gIGlmICghaGFzTWluKSB7XG4gICAgdmFsdWVzLnB1c2gobWluKTtcbiAgfVxuICBpZiAoIWhhc01heCkge1xuICAgIHZhbHVlcy5wdXNoKG1heCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHRpY2tzIG9mIGFuIGF4aXNcbiAqIEBwYXJhbSAge09iamVjdH0gIGF4aXMgVGhlIGNvbmZpZ3VyYXRpb24gb2YgYW4gYXhpc1xuICogQHBhcmFtIHtCb29sZWFufSBpc0dyaWQgV2hldGhlciBvciBub3QgYXJlIHRoZSB0aWNrcyBpbiBncmlkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWxsIFJldHVybiB0aGUgdGlja3Mgb2YgYWxsIHRoZSBwb2ludHMgb3Igbm90XG4gKiBAcmV0dXJuIHtBcnJheX0gIFRpY2tzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUaWNrc09mQXhpcyA9IChheGlzOiBhbnksIGlzR3JpZD86IGJvb2xlYW4sIGlzQWxsPzogYm9vbGVhbik6IFRpY2tJdGVtW10gPT4ge1xuICBpZiAoIWF4aXMpIHJldHVybiBudWxsO1xuICBjb25zdCB7IHNjYWxlIH0gPSBheGlzO1xuICBjb25zdCB7IGR1cGxpY2F0ZURvbWFpbiwgdHlwZSwgcmFuZ2UgfSA9IGF4aXM7XG4gIGxldCBvZmZzZXQgPSAoaXNHcmlkIHx8IGlzQWxsKSAmJiB0eXBlID09PSAnY2F0ZWdvcnknICYmIHNjYWxlLmJhbmR3aWR0aCA/IHNjYWxlLmJhbmR3aWR0aCgpIC8gMiA6IDA7XG4gIG9mZnNldCA9IGF4aXMuYXhpc1R5cGUgPT09ICdhbmdsZUF4aXMnID8gbWF0aFNpZ24ocmFuZ2VbMF0gLSByYW5nZVsxXSkgKiAyICogb2Zmc2V0IDogb2Zmc2V0O1xuXG4gIC8vIFRoZSB0aWNrcyBzZXR0ZWQgYnkgdXNlciBzaG91bGQgb25seSBhZmZlY3QgdGhlIHRpY2tzIGFkamFjZW50IHRvIGF4aXMgbGluZVxuICBpZiAoaXNHcmlkICYmIChheGlzLnRpY2tzIHx8IGF4aXMubmljZVRpY2tzKSkge1xuICAgIHJldHVybiAoYXhpcy50aWNrcyB8fCBheGlzLm5pY2VUaWNrcykubWFwKChlbnRyeTogVGlja0l0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29udGVudCA9IGR1cGxpY2F0ZURvbWFpbiA/IGR1cGxpY2F0ZURvbWFpbi5pbmRleE9mKGVudHJ5KSA6IGVudHJ5O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb29yZGluYXRlOiBzY2FsZShzY2FsZUNvbnRlbnQpICsgb2Zmc2V0LFxuICAgICAgICB2YWx1ZTogZW50cnksXG4gICAgICAgIG9mZnNldCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBXaGVuIGF4aXMgaXMgYSBjYXRlZ29yaWFsIGF4aXMsIGJ1dCB0aGUgdHlwZSBvZiBheGlzIGlzIG51bWJlciBvciB0aGUgc2NhbGUgb2YgYXhpcyBpcyBub3QgXCJhdXRvXCJcbiAgaWYgKGF4aXMuaXNDYXRlZ29yaWNhbCAmJiBheGlzLmNhdGVnb3JpY2FsRG9tYWluKSB7XG4gICAgcmV0dXJuIGF4aXMuY2F0ZWdvcmljYWxEb21haW4ubWFwKChlbnRyeTogYW55LCBpbmRleDogbnVtYmVyKSA9PiAoe1xuICAgICAgY29vcmRpbmF0ZTogc2NhbGUoZW50cnkpICsgb2Zmc2V0LFxuICAgICAgdmFsdWU6IGVudHJ5LFxuICAgICAgaW5kZXgsXG4gICAgICBvZmZzZXQsXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKHNjYWxlLnRpY2tzICYmICFpc0FsbCkge1xuICAgIHJldHVybiBzY2FsZVxuICAgICAgLnRpY2tzKGF4aXMudGlja0NvdW50KVxuICAgICAgLm1hcCgoZW50cnk6IGFueSkgPT4gKHsgY29vcmRpbmF0ZTogc2NhbGUoZW50cnkpICsgb2Zmc2V0LCB2YWx1ZTogZW50cnksIG9mZnNldCB9KSk7XG4gIH1cblxuICAvLyBXaGVuIGF4aXMgaGFzIGR1cGxpY2F0ZWQgdGV4dCwgc2VyaWFsIG51bWJlcnMgYXJlIHVzZWQgdG8gZ2VuZXJhdGUgc2NhbGVcbiAgcmV0dXJuIHNjYWxlLmRvbWFpbigpLm1hcCgoZW50cnk6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gKHtcbiAgICBjb29yZGluYXRlOiBzY2FsZShlbnRyeSkgKyBvZmZzZXQsXG4gICAgdmFsdWU6IGR1cGxpY2F0ZURvbWFpbiA/IGR1cGxpY2F0ZURvbWFpbltlbnRyeV0gOiBlbnRyeSxcbiAgICBpbmRleCxcbiAgICBvZmZzZXQsXG4gIH0pKTtcbn07XG5cbi8qKlxuICogY29tYmluZSB0aGUgaGFuZGxlcnNcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBkZWZhdWx0SGFuZGxlciBJbnRlcm5hbCBwcml2YXRlIGhhbmRsZXJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBwYXJlbnRIYW5kbGVyICBIYW5kbGVyIGZ1bmN0aW9uIHNwZWNpZmllZCBpbiBwYXJlbnQgY29tcG9uZW50XG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2hpbGRIYW5kbGVyICAgSGFuZGxlciBmdW5jdGlvbiBzcGVjaWZpZWQgaW4gY2hpbGQgY29tcG9uZW50XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gICAgICAgICAgICAgICAgVGhlIGNvbWJpbmVkIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbWJpbmVFdmVudEhhbmRsZXJzID0gKGRlZmF1bHRIYW5kbGVyOiBGdW5jdGlvbiwgcGFyZW50SGFuZGxlcjogRnVuY3Rpb24sIGNoaWxkSGFuZGxlcjogRnVuY3Rpb24pID0+IHtcbiAgbGV0IGN1c3RvbWl6ZWRIYW5kbGVyOiBGdW5jdGlvbjtcblxuICBpZiAoXy5pc0Z1bmN0aW9uKGNoaWxkSGFuZGxlcikpIHtcbiAgICBjdXN0b21pemVkSGFuZGxlciA9IGNoaWxkSGFuZGxlcjtcbiAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ocGFyZW50SGFuZGxlcikpIHtcbiAgICBjdXN0b21pemVkSGFuZGxlciA9IHBhcmVudEhhbmRsZXI7XG4gIH1cblxuICBpZiAoXy5pc0Z1bmN0aW9uKGRlZmF1bHRIYW5kbGVyKSB8fCBjdXN0b21pemVkSGFuZGxlcikge1xuICAgIHJldHVybiAoYXJnMTogYW55LCBhcmcyOiBhbnksIGFyZzM6IGFueSwgYXJnNDogYW55KSA9PiB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKGRlZmF1bHRIYW5kbGVyKSkge1xuICAgICAgICBkZWZhdWx0SGFuZGxlcihhcmcxLCBhcmcyLCBhcmczLCBhcmc0KTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzRnVuY3Rpb24oY3VzdG9taXplZEhhbmRsZXIpKSB7XG4gICAgICAgIGN1c3RvbWl6ZWRIYW5kbGVyKGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG4vKipcbiAqIFBhcnNlIHRoZSBzY2FsZSBmdW5jdGlvbiBvZiBheGlzXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgYXhpcyAgICAgICAgICBUaGUgb3B0aW9uIG9mIGF4aXNcbiAqIEBwYXJhbSAge1N0cmluZ30gICBjaGFydFR5cGUgICAgIFRoZSBkaXNwbGF5TmFtZSBvZiBjaGFydFxuICogQHJldHVybiB7RnVuY3Rpb259ICAgICAgICAgICAgICAgVGhlIHNjYWxlIGZ1bmNpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlU2NhbGUgPSAoYXhpczogYW55LCBjaGFydFR5cGU6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IHNjYWxlLCB0eXBlLCBsYXlvdXQsIGF4aXNUeXBlIH0gPSBheGlzO1xuICBpZiAoc2NhbGUgPT09ICdhdXRvJykge1xuICAgIGlmIChsYXlvdXQgPT09ICdyYWRpYWwnICYmIGF4aXNUeXBlID09PSAncmFkaXVzQXhpcycpIHtcbiAgICAgIHJldHVybiB7IHNjYWxlOiBkM1NjYWxlcy5zY2FsZUJhbmQoKSwgcmVhbFNjYWxlVHlwZTogJ2JhbmQnIH07XG4gICAgfVxuICAgIGlmIChsYXlvdXQgPT09ICdyYWRpYWwnICYmIGF4aXNUeXBlID09PSAnYW5nbGVBeGlzJykge1xuICAgICAgcmV0dXJuIHsgc2NhbGU6IGQzU2NhbGVzLnNjYWxlTGluZWFyKCksIHJlYWxTY2FsZVR5cGU6ICdsaW5lYXInIH07XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdHlwZSA9PT0gJ2NhdGVnb3J5JyAmJlxuICAgICAgY2hhcnRUeXBlICYmXG4gICAgICAoY2hhcnRUeXBlLmluZGV4T2YoJ0xpbmVDaGFydCcpID49IDAgfHxcbiAgICAgICAgY2hhcnRUeXBlLmluZGV4T2YoJ0FyZWFDaGFydCcpID49IDAgfHxcbiAgICAgICAgY2hhcnRUeXBlLmluZGV4T2YoJ0NvbXBvc2VkQ2hhcnQnKSA+PSAwKVxuICAgICkge1xuICAgICAgcmV0dXJuIHsgc2NhbGU6IGQzU2NhbGVzLnNjYWxlUG9pbnQoKSwgcmVhbFNjYWxlVHlwZTogJ3BvaW50JyB9O1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2NhdGVnb3J5Jykge1xuICAgICAgcmV0dXJuIHsgc2NhbGU6IGQzU2NhbGVzLnNjYWxlQmFuZCgpLCByZWFsU2NhbGVUeXBlOiAnYmFuZCcgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBzY2FsZTogZDNTY2FsZXMuc2NhbGVMaW5lYXIoKSwgcmVhbFNjYWxlVHlwZTogJ2xpbmVhcicgfTtcbiAgfVxuICBpZiAoXy5pc1N0cmluZyhzY2FsZSkpIHtcbiAgICBjb25zdCBuYW1lID0gYHNjYWxlJHtfLnVwcGVyRmlyc3Qoc2NhbGUpfWA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6ICgoZDNTY2FsZXMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbbmFtZV0gfHwgZDNTY2FsZXMuc2NhbGVQb2ludCkoKSxcbiAgICAgIHJlYWxTY2FsZVR5cGU6IChkM1NjYWxlcyBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVtuYW1lXSA/IG5hbWUgOiAncG9pbnQnLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gXy5pc0Z1bmN0aW9uKHNjYWxlKSA/IHsgc2NhbGUgfSA6IHsgc2NhbGU6IGQzU2NhbGVzLnNjYWxlUG9pbnQoKSwgcmVhbFNjYWxlVHlwZTogJ3BvaW50JyB9O1xufTtcbmNvbnN0IEVQUyA9IDFlLTQ7XG5leHBvcnQgY29uc3QgY2hlY2tEb21haW5PZlNjYWxlID0gKHNjYWxlOiBhbnkpID0+IHtcbiAgY29uc3QgZG9tYWluID0gc2NhbGUuZG9tYWluKCk7XG5cbiAgaWYgKCFkb21haW4gfHwgZG9tYWluLmxlbmd0aCA8PSAyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbGVuID0gZG9tYWluLmxlbmd0aDtcbiAgY29uc3QgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihyYW5nZVswXSwgcmFuZ2VbMV0pIC0gRVBTO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyYW5nZVswXSwgcmFuZ2VbMV0pICsgRVBTO1xuICBjb25zdCBmaXJzdCA9IHNjYWxlKGRvbWFpblswXSk7XG4gIGNvbnN0IGxhc3QgPSBzY2FsZShkb21haW5bbGVuIC0gMV0pO1xuXG4gIGlmIChmaXJzdCA8IG1pbiB8fCBmaXJzdCA+IG1heCB8fCBsYXN0IDwgbWluIHx8IGxhc3QgPiBtYXgpIHtcbiAgICBzY2FsZS5kb21haW4oW2RvbWFpblswXSwgZG9tYWluW2xlbiAtIDFdXSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBmaW5kUG9zaXRpb25PZkJhciA9IChiYXJQb3NpdGlvbjogYW55W10sIGNoaWxkOiBSZWFjdE5vZGUpID0+IHtcbiAgaWYgKCFiYXJQb3NpdGlvbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJhclBvc2l0aW9uLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGJhclBvc2l0aW9uW2ldLml0ZW0gPT09IGNoaWxkKSB7XG4gICAgICByZXR1cm4gYmFyUG9zaXRpb25baV0ucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgdHJ1bmNhdGVCeURvbWFpbiA9ICh2YWx1ZTogYW55W10sIGRvbWFpbjogYW55W10pID0+IHtcbiAgaWYgKCFkb21haW4gfHwgZG9tYWluLmxlbmd0aCAhPT0gMiB8fCAhaXNOdW1iZXIoZG9tYWluWzBdKSB8fCAhaXNOdW1iZXIoZG9tYWluWzFdKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKGRvbWFpblswXSwgZG9tYWluWzFdKTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgoZG9tYWluWzBdLCBkb21haW5bMV0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IFt2YWx1ZVswXSwgdmFsdWVbMV1dO1xuICBpZiAoIWlzTnVtYmVyKHZhbHVlWzBdKSB8fCB2YWx1ZVswXSA8IG1pbikge1xuICAgIHJlc3VsdFswXSA9IG1pbjtcbiAgfVxuXG4gIGlmICghaXNOdW1iZXIodmFsdWVbMV0pIHx8IHZhbHVlWzFdID4gbWF4KSB7XG4gICAgcmVzdWx0WzFdID0gbWF4O1xuICB9XG5cbiAgaWYgKHJlc3VsdFswXSA+IG1heCkge1xuICAgIHJlc3VsdFswXSA9IG1heDtcbiAgfVxuXG4gIGlmIChyZXN1bHRbMV0gPCBtaW4pIHtcbiAgICByZXN1bHRbMV0gPSBtaW47XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG5leHBvcnQgY29uc3Qgb2Zmc2V0U2lnbiA9IChzZXJpZXM6IGFueSkgPT4ge1xuICBjb25zdCBuID0gc2VyaWVzLmxlbmd0aDtcbiAgaWYgKG4gPD0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAobGV0IGogPSAwLCBtID0gc2VyaWVzWzBdLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGxldCBwb3NpdGl2ZSA9IDA7XG4gICAgbGV0IG5lZ2F0aXZlID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IF8uaXNOYU4oc2VyaWVzW2ldW2pdWzFdKSA/IHNlcmllc1tpXVtqXVswXSA6IHNlcmllc1tpXVtqXVsxXTtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cbiAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgIHNlcmllc1tpXVtqXVswXSA9IHBvc2l0aXZlO1xuICAgICAgICBzZXJpZXNbaV1bal1bMV0gPSBwb3NpdGl2ZSArIHZhbHVlO1xuICAgICAgICBwb3NpdGl2ZSA9IHNlcmllc1tpXVtqXVsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmllc1tpXVtqXVswXSA9IG5lZ2F0aXZlO1xuICAgICAgICBzZXJpZXNbaV1bal1bMV0gPSBuZWdhdGl2ZSArIHZhbHVlO1xuICAgICAgICBuZWdhdGl2ZSA9IHNlcmllc1tpXVtqXVsxXTtcbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cbiAgICB9XG4gIH1cbn07XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuZXhwb3J0IGNvbnN0IG9mZnNldFBvc2l0aXZlID0gKHNlcmllczogYW55KSA9PiB7XG4gIGNvbnN0IG4gPSBzZXJpZXMubGVuZ3RoO1xuICBpZiAobiA8PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChsZXQgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgbGV0IHBvc2l0aXZlID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IF8uaXNOYU4oc2VyaWVzW2ldW2pdWzFdKSA/IHNlcmllc1tpXVtqXVswXSA6IHNlcmllc1tpXVtqXVsxXTtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cbiAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgIHNlcmllc1tpXVtqXVswXSA9IHBvc2l0aXZlO1xuICAgICAgICBzZXJpZXNbaV1bal1bMV0gPSBwb3NpdGl2ZSArIHZhbHVlO1xuICAgICAgICBwb3NpdGl2ZSA9IHNlcmllc1tpXVtqXVsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmllc1tpXVtqXVswXSA9IDA7XG4gICAgICAgIHNlcmllc1tpXVtqXVsxXSA9IDA7XG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci1kZXN0cnVjdHVyaW5nICovXG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBTVEFDS19PRkZTRVRfTUFQOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge1xuICBzaWduOiBvZmZzZXRTaWduLFxuICBleHBhbmQ6IHN0YWNrT2Zmc2V0RXhwYW5kLFxuICBub25lOiBzdGFja09mZnNldE5vbmUsXG4gIHNpbGhvdWV0dGU6IHN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSxcbiAgd2lnZ2xlOiBzdGFja09mZnNldFdpZ2dsZSxcbiAgcG9zaXRpdmU6IG9mZnNldFBvc2l0aXZlLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0YWNrZWREYXRhID0gKGRhdGE6IGFueSwgc3RhY2tJdGVtczogYW55LCBvZmZzZXRUeXBlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZGF0YUtleXMgPSBzdGFja0l0ZW1zLm1hcCgoaXRlbTogYW55KSA9PiBpdGVtLnByb3BzLmRhdGFLZXkpO1xuICBjb25zdCBzdGFjayA9IHNoYXBlU3RhY2soKVxuICAgIC5rZXlzKGRhdGFLZXlzKVxuICAgIC52YWx1ZSgoZCwga2V5KSA9PiArZ2V0VmFsdWVCeURhdGFLZXkoZCwga2V5LCAwKSlcbiAgICAub3JkZXIoc3RhY2tPcmRlck5vbmUpXG4gICAgLm9mZnNldChTVEFDS19PRkZTRVRfTUFQW29mZnNldFR5cGVdKTtcblxuICByZXR1cm4gc3RhY2soZGF0YSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U3RhY2tHcm91cHNCeUF4aXNJZCA9IChcbiAgZGF0YTogYW55LFxuICBfaXRlbXM6IEFycmF5PGFueT4sXG4gIG51bWVyaWNBeGlzSWQ6IHN0cmluZyxcbiAgY2F0ZUF4aXNJZDogc3RyaW5nLFxuICBvZmZzZXRUeXBlOiBhbnksXG4gIHJldmVyc2VTdGFja09yZGVyOiBib29sZWFuLFxuKSA9PiB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gcmV2ZXJzaW5nIGl0ZW1zIHRvIGFmZmVjdCByZW5kZXIgb3JkZXIgKGZvciBsYXllcmluZylcbiAgY29uc3QgaXRlbXMgPSByZXZlcnNlU3RhY2tPcmRlciA/IF9pdGVtcy5yZXZlcnNlKCkgOiBfaXRlbXM7XG5cbiAgY29uc3Qgc3RhY2tHcm91cHMgPSBpdGVtcy5yZWR1Y2UoKHJlc3VsdCwgaXRlbSkgPT4ge1xuICAgIGNvbnN0IHsgc3RhY2tJZCwgaGlkZSB9ID0gaXRlbS5wcm9wcztcblxuICAgIGlmIChoaWRlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IGF4aXNJZCA9IGl0ZW0ucHJvcHNbbnVtZXJpY0F4aXNJZF07XG4gICAgY29uc3QgcGFyZW50R3JvdXAgPSByZXN1bHRbYXhpc0lkXSB8fCB7IGhhc1N0YWNrOiBmYWxzZSwgc3RhY2tHcm91cHM6IHt9IH07XG5cbiAgICBpZiAoaXNOdW1PclN0cihzdGFja0lkKSkge1xuICAgICAgY29uc3QgY2hpbGRHcm91cCA9IHBhcmVudEdyb3VwLnN0YWNrR3JvdXBzW3N0YWNrSWRdIHx8IHtcbiAgICAgICAgbnVtZXJpY0F4aXNJZCxcbiAgICAgICAgY2F0ZUF4aXNJZCxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgfTtcblxuICAgICAgY2hpbGRHcm91cC5pdGVtcy5wdXNoKGl0ZW0pO1xuXG4gICAgICBwYXJlbnRHcm91cC5oYXNTdGFjayA9IHRydWU7XG5cbiAgICAgIHBhcmVudEdyb3VwLnN0YWNrR3JvdXBzW3N0YWNrSWRdID0gY2hpbGRHcm91cDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50R3JvdXAuc3RhY2tHcm91cHNbdW5pcXVlSWQoJ19zdGFja0lkXycpXSA9IHtcbiAgICAgICAgbnVtZXJpY0F4aXNJZCxcbiAgICAgICAgY2F0ZUF4aXNJZCxcbiAgICAgICAgaXRlbXM6IFtpdGVtXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBbYXhpc0lkXTogcGFyZW50R3JvdXAgfTtcbiAgfSwge30pO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhzdGFja0dyb3VwcykucmVkdWNlKChyZXN1bHQsIGF4aXNJZCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gc3RhY2tHcm91cHNbYXhpc0lkXTtcblxuICAgIGlmIChncm91cC5oYXNTdGFjaykge1xuICAgICAgZ3JvdXAuc3RhY2tHcm91cHMgPSBPYmplY3Qua2V5cyhncm91cC5zdGFja0dyb3VwcykucmVkdWNlKChyZXMsIHN0YWNrSWQpID0+IHtcbiAgICAgICAgY29uc3QgZyA9IGdyb3VwLnN0YWNrR3JvdXBzW3N0YWNrSWRdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ucmVzLFxuICAgICAgICAgIFtzdGFja0lkXToge1xuICAgICAgICAgICAgbnVtZXJpY0F4aXNJZCxcbiAgICAgICAgICAgIGNhdGVBeGlzSWQsXG4gICAgICAgICAgICBpdGVtczogZy5pdGVtcyxcbiAgICAgICAgICAgIHN0YWNrZWREYXRhOiBnZXRTdGFja2VkRGF0YShkYXRhLCBnLml0ZW1zLCBvZmZzZXRUeXBlKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIHJldHVybiB7IC4uLnJlc3VsdCwgW2F4aXNJZF06IGdyb3VwIH07XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogZ2V0IGRvbWFpbiBvZiB0aWNrc1xuICogQHBhcmFtICB7QXJyYXl9IHRpY2tzIFRpY2tzIG9mIGF4aXNcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSAgVGhlIHR5cGUgb2YgYXhpc1xuICogQHJldHVybiB7QXJyYXl9IGRvbWFpblxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlRG9tYWluT2ZUaWNrcyA9ICh0aWNrczogQXJyYXk8VGlja0l0ZW0+LCB0eXBlOiBzdHJpbmcpID0+IHtcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtfLm1pbih0aWNrcyksIF8ubWF4KHRpY2tzKV07XG4gIH1cblxuICByZXR1cm4gdGlja3M7XG59O1xuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGUgc2NhbGUgZnVuY3Rpb24gb2YgYXhpc1xuICogQHBhcmFtIHtPYmplY3R9IHNjYWxlIFRoZSBzY2FsZSBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgIFRoZSBjb25maWd1cmF0aW9uIG9mIGF4aXNcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUaWNrc09mU2NhbGUgPSAoc2NhbGU6IGFueSwgb3B0czogYW55KSA9PiB7XG4gIGNvbnN0IHsgcmVhbFNjYWxlVHlwZSwgdHlwZSwgdGlja0NvdW50LCBvcmlnaW5hbERvbWFpbiwgYWxsb3dEZWNpbWFscyB9ID0gb3B0cztcbiAgY29uc3Qgc2NhbGVUeXBlID0gcmVhbFNjYWxlVHlwZSB8fCBvcHRzLnNjYWxlO1xuXG4gIGlmIChzY2FsZVR5cGUgIT09ICdhdXRvJyAmJiBzY2FsZVR5cGUgIT09ICdsaW5lYXInKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoXG4gICAgdGlja0NvdW50ICYmXG4gICAgdHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICBvcmlnaW5hbERvbWFpbiAmJlxuICAgIChvcmlnaW5hbERvbWFpblswXSA9PT0gJ2F1dG8nIHx8IG9yaWdpbmFsRG9tYWluWzFdID09PSAnYXV0bycpXG4gICkge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgdGlja3MgYnkgdGhlIG51bWJlciBvZiBncmlkIHdoZW4gdGhlIGF4aXMgaXMgYSBudW1iZXIgYXhpc1xuICAgIGNvbnN0IGRvbWFpbiA9IHNjYWxlLmRvbWFpbigpO1xuICAgIGlmICghZG9tYWluLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRpY2tWYWx1ZXMgPSBnZXROaWNlVGlja1ZhbHVlcyhkb21haW4sIHRpY2tDb3VudCwgYWxsb3dEZWNpbWFscyk7XG5cbiAgICBzY2FsZS5kb21haW4oY2FsY3VsYXRlRG9tYWluT2ZUaWNrcyh0aWNrVmFsdWVzLCB0eXBlKSk7XG5cbiAgICByZXR1cm4geyBuaWNlVGlja3M6IHRpY2tWYWx1ZXMgfTtcbiAgfVxuICBpZiAodGlja0NvdW50ICYmIHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgY29uc3QgZG9tYWluID0gc2NhbGUuZG9tYWluKCk7XG4gICAgY29uc3QgdGlja1ZhbHVlcyA9IGdldFRpY2tWYWx1ZXNGaXhlZERvbWFpbihkb21haW4sIHRpY2tDb3VudCwgYWxsb3dEZWNpbWFscyk7XG5cbiAgICByZXR1cm4geyBuaWNlVGlja3M6IHRpY2tWYWx1ZXMgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhdGVDb29yZGluYXRlT2ZMaW5lID0gKHtcbiAgYXhpcyxcbiAgdGlja3MsXG4gIGJhbmRTaXplLFxuICBlbnRyeSxcbiAgaW5kZXgsXG4gIGRhdGFLZXksXG59OiB7XG4gIGF4aXM6IGFueTtcbiAgdGlja3M6IEFycmF5PFRpY2tJdGVtPjtcbiAgYmFuZFNpemU6IG51bWJlcjtcbiAgZW50cnk6IGFueTtcbiAgaW5kZXg6IG51bWJlcjtcbiAgZGF0YUtleT86IHN0cmluZyB8IG51bWJlciB8ICgob2JqOiBhbnkpID0+IGFueSk7XG59KSA9PiB7XG4gIGlmIChheGlzLnR5cGUgPT09ICdjYXRlZ29yeScpIHtcbiAgICAvLyBmaW5kIGNvb3JkaW5hdGUgb2YgY2F0ZWdvcnkgYXhpcyBieSB0aGUgdmFsdWUgb2YgY2F0ZWdvcnlcbiAgICBpZiAoIWF4aXMuYWxsb3dEdXBsaWNhdGVkQ2F0ZWdvcnkgJiYgYXhpcy5kYXRhS2V5ICYmICFfLmlzTmlsKGVudHJ5W2F4aXMuZGF0YUtleV0pKSB7XG4gICAgICBjb25zdCBtYXRjaGVkVGljayA9IGZpbmRFbnRyeUluQXJyYXkodGlja3MsICd2YWx1ZScsIGVudHJ5W2F4aXMuZGF0YUtleV0pO1xuXG4gICAgICBpZiAobWF0Y2hlZFRpY2spIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZWRUaWNrLmNvb3JkaW5hdGUgKyBiYW5kU2l6ZSAvIDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpY2tzW2luZGV4XSA/IHRpY2tzW2luZGV4XS5jb29yZGluYXRlICsgYmFuZFNpemUgLyAyIDogbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlID0gZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksICFfLmlzTmlsKGRhdGFLZXkpID8gZGF0YUtleSA6IGF4aXMuZGF0YUtleSk7XG5cbiAgcmV0dXJuICFfLmlzTmlsKHZhbHVlKSA/IGF4aXMuc2NhbGUodmFsdWUpIDogbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDYXRlQ29vcmRpbmF0ZU9mQmFyID0gKHtcbiAgYXhpcyxcbiAgdGlja3MsXG4gIG9mZnNldCxcbiAgYmFuZFNpemUsXG4gIGVudHJ5LFxuICBpbmRleCxcbn06IHtcbiAgYXhpczogYW55OyAvLyBSYWRpdXNBeGlzUHJvcHMgJiB7IGRhdGFLZXk/OiBhbnkgfTsgLy8gVE9ETzogc2hvdWxkIGRhdGFLZXkgYmUgaW5jbHVkZWQgaW4gUmFkaXVzQXhpc1Byb3BzP1xuICB0aWNrczogQXJyYXk8VGlja0l0ZW0+O1xuICBvZmZzZXQ6IGFueTtcbiAgYmFuZFNpemU6IG51bWJlcjtcbiAgZW50cnk6IGFueTtcbiAgaW5kZXg6IG51bWJlcjtcbn0pID0+IHtcbiAgaWYgKGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5Jykge1xuICAgIHJldHVybiB0aWNrc1tpbmRleF0gPyB0aWNrc1tpbmRleF0uY29vcmRpbmF0ZSArIG9mZnNldCA6IG51bGw7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgYXhpcy5kYXRhS2V5LCBheGlzLmRvbWFpbltpbmRleF0pO1xuXG4gIHJldHVybiAhXy5pc05pbCh2YWx1ZSkgPyBheGlzLnNjYWxlKHZhbHVlKSAtIGJhbmRTaXplIC8gMiArIG9mZnNldCA6IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QmFzZVZhbHVlT2ZCYXIgPSAoe1xuICBudW1lcmljQXhpcyxcbn06IHtcbiAgbnVtZXJpY0F4aXM6IGFueTsgLy8gQW5nbGVBeGlzUHJvcHMgfCBSYWRpdXNBeGlzUHJvcHNcbn0pID0+IHtcbiAgY29uc3QgZG9tYWluID0gbnVtZXJpY0F4aXMuc2NhbGUuZG9tYWluKCk7XG5cbiAgaWYgKG51bWVyaWNBeGlzLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgY29uc3QgbWluID0gTWF0aC5taW4oZG9tYWluWzBdLCBkb21haW5bMV0pO1xuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KGRvbWFpblswXSwgZG9tYWluWzFdKTtcblxuICAgIGlmIChtaW4gPD0gMCAmJiBtYXggPj0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChtYXggPCAwKSB7XG4gICAgICByZXR1cm4gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiBtaW47XG4gIH1cblxuICByZXR1cm4gZG9tYWluWzBdO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0YWNrZWREYXRhT2ZJdGVtID0gKGl0ZW06IGFueSwgc3RhY2tHcm91cHM6IGFueSkgPT4ge1xuICBjb25zdCB7IHN0YWNrSWQgfSA9IGl0ZW0ucHJvcHM7XG5cbiAgaWYgKGlzTnVtT3JTdHIoc3RhY2tJZCkpIHtcbiAgICBjb25zdCBncm91cCA9IHN0YWNrR3JvdXBzW3N0YWNrSWRdO1xuXG4gICAgaWYgKGdyb3VwICYmIGdyb3VwLml0ZW1zLmxlbmd0aCkge1xuICAgICAgbGV0IGl0ZW1JbmRleCA9IC0xO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZ3JvdXAuaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGdyb3VwLml0ZW1zW2ldID09PSBpdGVtKSB7XG4gICAgICAgICAgaXRlbUluZGV4ID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW1JbmRleCA+PSAwID8gZ3JvdXAuc3RhY2tlZERhdGFbaXRlbUluZGV4XSA6IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBnZXREb21haW5PZlNpbmdsZSA9IChkYXRhOiBBcnJheTxhbnk+KSA9PlxuICBkYXRhLnJlZHVjZShcbiAgICAocmVzdWx0LCBlbnRyeSkgPT4gW1xuICAgICAgXy5taW4oZW50cnkuY29uY2F0KFtyZXN1bHRbMF1dKS5maWx0ZXIoaXNOdW1iZXIpKSxcbiAgICAgIF8ubWF4KGVudHJ5LmNvbmNhdChbcmVzdWx0WzFdXSkuZmlsdGVyKGlzTnVtYmVyKSksXG4gICAgXSxcbiAgICBbSW5maW5pdHksIC1JbmZpbml0eV0sXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXREb21haW5PZlN0YWNrR3JvdXBzID0gKHN0YWNrR3JvdXBzOiBhbnksIHN0YXJ0SW5kZXg6IG51bWJlciwgZW5kSW5kZXg6IG51bWJlcikgPT5cbiAgT2JqZWN0LmtleXMoc3RhY2tHcm91cHMpXG4gICAgLnJlZHVjZShcbiAgICAgIChyZXN1bHQsIHN0YWNrSWQpID0+IHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBzdGFja0dyb3Vwc1tzdGFja0lkXTtcbiAgICAgICAgY29uc3QgeyBzdGFja2VkRGF0YSB9ID0gZ3JvdXA7XG4gICAgICAgIGNvbnN0IGRvbWFpbiA9IHN0YWNrZWREYXRhLnJlZHVjZShcbiAgICAgICAgICAocmVzOiBbbnVtYmVyLCBudW1iZXJdLCBlbnRyeTogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gZ2V0RG9tYWluT2ZTaW5nbGUoZW50cnkuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXggKyAxKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBbTWF0aC5taW4ocmVzWzBdLCBzWzBdKSwgTWF0aC5tYXgocmVzWzFdLCBzWzFdKV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbSW5maW5pdHksIC1JbmZpbml0eV0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIFtNYXRoLm1pbihkb21haW5bMF0sIHJlc3VsdFswXSksIE1hdGgubWF4KGRvbWFpblsxXSwgcmVzdWx0WzFdKV07XG4gICAgICB9LFxuICAgICAgW0luZmluaXR5LCAtSW5maW5pdHldLFxuICAgIClcbiAgICAubWFwKHJlc3VsdCA9PiAocmVzdWx0ID09PSBJbmZpbml0eSB8fCByZXN1bHQgPT09IC1JbmZpbml0eSA/IDAgOiByZXN1bHQpKTtcblxuZXhwb3J0IGNvbnN0IE1JTl9WQUxVRV9SRUcgPSAvXmRhdGFNaW5bXFxzXSotW1xcc10qKFswLTldKyhbLl17MX1bMC05XSspezAsMX0pJC87XG5leHBvcnQgY29uc3QgTUFYX1ZBTFVFX1JFRyA9IC9eZGF0YU1heFtcXHNdKlxcK1tcXHNdKihbMC05XSsoWy5dezF9WzAtOV0rKXswLDF9KSQvO1xuXG5leHBvcnQgY29uc3QgcGFyc2VTcGVjaWZpZWREb21haW4gPSAoc3BlY2lmaWVkRG9tYWluOiBhbnksIGRhdGFEb21haW46IGFueSwgYWxsb3dEYXRhT3ZlcmZsb3c6IGJvb2xlYW4pID0+IHtcbiAgaWYgKCFfLmlzQXJyYXkoc3BlY2lmaWVkRG9tYWluKSkge1xuICAgIHJldHVybiBkYXRhRG9tYWluO1xuICB9XG5cbiAgY29uc3QgZG9tYWluID0gW107XG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cbiAgaWYgKGlzTnVtYmVyKHNwZWNpZmllZERvbWFpblswXSkpIHtcbiAgICBkb21haW5bMF0gPSBhbGxvd0RhdGFPdmVyZmxvdyA/IHNwZWNpZmllZERvbWFpblswXSA6IE1hdGgubWluKHNwZWNpZmllZERvbWFpblswXSwgZGF0YURvbWFpblswXSk7XG4gIH0gZWxzZSBpZiAoTUlOX1ZBTFVFX1JFRy50ZXN0KHNwZWNpZmllZERvbWFpblswXSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICtNSU5fVkFMVUVfUkVHLmV4ZWMoc3BlY2lmaWVkRG9tYWluWzBdKVsxXTtcblxuICAgIGRvbWFpblswXSA9IGRhdGFEb21haW5bMF0gLSB2YWx1ZTtcbiAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24oc3BlY2lmaWVkRG9tYWluWzBdKSkge1xuICAgIGRvbWFpblswXSA9IHNwZWNpZmllZERvbWFpblswXShkYXRhRG9tYWluWzBdKTtcbiAgfSBlbHNlIHtcbiAgICBkb21haW5bMF0gPSBkYXRhRG9tYWluWzBdO1xuICB9XG5cbiAgaWYgKGlzTnVtYmVyKHNwZWNpZmllZERvbWFpblsxXSkpIHtcbiAgICBkb21haW5bMV0gPSBhbGxvd0RhdGFPdmVyZmxvdyA/IHNwZWNpZmllZERvbWFpblsxXSA6IE1hdGgubWF4KHNwZWNpZmllZERvbWFpblsxXSwgZGF0YURvbWFpblsxXSk7XG4gIH0gZWxzZSBpZiAoTUFYX1ZBTFVFX1JFRy50ZXN0KHNwZWNpZmllZERvbWFpblsxXSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICtNQVhfVkFMVUVfUkVHLmV4ZWMoc3BlY2lmaWVkRG9tYWluWzFdKVsxXTtcblxuICAgIGRvbWFpblsxXSA9IGRhdGFEb21haW5bMV0gKyB2YWx1ZTtcbiAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24oc3BlY2lmaWVkRG9tYWluWzFdKSkge1xuICAgIGRvbWFpblsxXSA9IHNwZWNpZmllZERvbWFpblsxXShkYXRhRG9tYWluWzFdKTtcbiAgfSBlbHNlIHtcbiAgICBkb21haW5bMV0gPSBkYXRhRG9tYWluWzFdO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLWRlc3RydWN0dXJpbmcgKi9cblxuICByZXR1cm4gZG9tYWluO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHNpemUgYmV0d2VlbiB0d28gY2F0ZWdvcnlcbiAqIEBwYXJhbSAge09iamVjdH0gYXhpcyAgVGhlIG9wdGlvbnMgb2YgYXhpc1xuICogQHBhcmFtICB7QXJyYXl9ICB0aWNrcyBUaGUgdGlja3Mgb2YgYXhpc1xuICogQHBhcmFtICB7Qm9vbGVhbn0gaXNCYXIgaWYgaXRlbXMgaW4gYXhpcyBhcmUgYmFyc1xuICogQHJldHVybiB7TnVtYmVyfSBTaXplXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCYW5kU2l6ZU9mQXhpcyA9IChheGlzOiBhbnksIHRpY2tzPzogQXJyYXk8VGlja0l0ZW0+LCBpc0Jhcj86IGJvb2xlYW4pID0+IHtcbiAgaWYgKGF4aXMgJiYgYXhpcy5zY2FsZSAmJiBheGlzLnNjYWxlLmJhbmR3aWR0aCkge1xuICAgIGNvbnN0IGJhbmRXaWR0aCA9IGF4aXMuc2NhbGUuYmFuZHdpZHRoKCk7XG5cbiAgICBpZiAoIWlzQmFyIHx8IGJhbmRXaWR0aCA+IDApIHtcbiAgICAgIHJldHVybiBiYW5kV2lkdGg7XG4gICAgfVxuICB9XG5cbiAgaWYgKGF4aXMgJiYgdGlja3MgJiYgdGlja3MubGVuZ3RoID49IDIpIHtcbiAgICBjb25zdCBvcmRlcmVkVGlja3MgPSBfLnNvcnRCeSh0aWNrcywgbyA9PiBvLmNvb3JkaW5hdGUpO1xuICAgIGxldCBiYW5kU2l6ZSA9IEluZmluaXR5O1xuXG4gICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IG9yZGVyZWRUaWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VyID0gb3JkZXJlZFRpY2tzW2ldO1xuICAgICAgY29uc3QgcHJldiA9IG9yZGVyZWRUaWNrc1tpIC0gMV07XG5cbiAgICAgIGJhbmRTaXplID0gTWF0aC5taW4oKGN1ci5jb29yZGluYXRlIHx8IDApIC0gKHByZXYuY29vcmRpbmF0ZSB8fCAwKSwgYmFuZFNpemUpO1xuICAgIH1cblxuICAgIHJldHVybiBiYW5kU2l6ZSA9PT0gSW5maW5pdHkgPyAwIDogYmFuZFNpemU7XG4gIH1cblxuICByZXR1cm4gMDtcbn07XG4vKipcbiAqIHBhcnNlIHRoZSBkb21haW4gb2YgYSBjYXRlZ29yeSBheGlzIHdoZW4gYSBkb21haW4gaXMgc3BlY2lmaWVkXG4gKiBAcGFyYW0gICB7QXJyYXl9ICAgICAgICBzcGVjaWZpZWREb21haW4gIFRoZSBkb21haW4gc3BlY2lmaWVkIGJ5IHVzZXJzXG4gKiBAcGFyYW0gICB7QXJyYXl9ICAgICAgICBjYWxjdWxhdGVkRG9tYWluIFRoZSBkb21haW4gY2FsY3VsYXRlZCBieSBkYXRlS2V5XG4gKiBAcGFyYW0gICB7UmVhY3RFbGVtZW50fSBheGlzQ2hpbGQgICAgICAgIFRoZSBheGlzIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gICAgICAgIGRvbWFpbnNcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlRG9tYWluT2ZDYXRlZ29yeUF4aXMgPSAoXG4gIHNwZWNpZmllZERvbWFpbjogQXJyYXk8YW55PixcbiAgY2FsY3VsYXRlZERvbWFpbjogQXJyYXk8YW55PixcbiAgYXhpc0NoaWxkOiBSZWFjdEVsZW1lbnQsXG4pID0+IHtcbiAgaWYgKCFzcGVjaWZpZWREb21haW4gfHwgIXNwZWNpZmllZERvbWFpbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsY3VsYXRlZERvbWFpbjtcbiAgfVxuXG4gIGlmIChfLmlzRXF1YWwoc3BlY2lmaWVkRG9tYWluLCBfLmdldChheGlzQ2hpbGQsICd0eXBlLmRlZmF1bHRQcm9wcy5kb21haW4nKSkpIHtcbiAgICByZXR1cm4gY2FsY3VsYXRlZERvbWFpbjtcbiAgfVxuXG4gIHJldHVybiBzcGVjaWZpZWREb21haW47XG59O1xuIiwiY29uc3QgcGFyc2VJc1NzckJ5RGVmYXVsdCA9ICgpOiBib29sZWFuID0+XG4gICEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICYmIHdpbmRvdy5zZXRUaW1lb3V0KTtcblxuZXhwb3J0IGludGVyZmFjZSBHbG9iYWxDb25maWcge1xuICBpc1Nzcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEdsb2JhbENvbmZpZ0tleXMgPSAnaXNTc3InO1xuXG5leHBvcnQgY29uc3QgR2xvYmFsID0ge1xuICBpc1NzcjogcGFyc2VJc1NzckJ5RGVmYXVsdCgpLFxuXG4gIGdldDogKGtleTogJ2lzU3NyJykgPT4ge1xuICAgIHJldHVybiBHbG9iYWxba2V5XTtcbiAgfSxcblxuICBzZXQ6IChrZXk6IEdsb2JhbENvbmZpZ0tleXMgfCBHbG9iYWxDb25maWcsIHZhbHVlPzogYW55KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBHbG9iYWxba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoa2V5KTtcblxuICAgICAgaWYgKGtleXMgJiYga2V5cy5sZW5ndGgpIHtcbiAgICAgICAga2V5cy5mb3JFYWNoKChrOiBHbG9iYWxDb25maWdLZXlzKSA9PiB7XG4gICAgICAgICAgR2xvYmFsW2tdID0ga2V5W2tdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4vRGF0YVV0aWxzJztcbmltcG9ydCB7IHNoYWxsb3dFcXVhbCB9IGZyb20gJy4vU2hhbGxvd0VxdWFsJztcblxuY29uc3QgUkVBQ1RfQlJPV1NFUl9FVkVOVF9NQVA6IGFueSA9IHtcbiAgY2xpY2s6ICdvbkNsaWNrJyxcbiAgbW91c2Vkb3duOiAnb25Nb3VzZURvd24nLFxuICBtb3VzZXVwOiAnb25Nb3VzZVVwJyxcbiAgbW91c2VvdmVyOiAnb25Nb3VzZU92ZXInLFxuICBtb3VzZW1vdmU6ICdvbk1vdXNlTW92ZScsXG4gIG1vdXNlb3V0OiAnb25Nb3VzZU91dCcsXG4gIG1vdXNlZW50ZXI6ICdvbk1vdXNlRW50ZXInLFxuICBtb3VzZWxlYXZlOiAnb25Nb3VzZUxlYXZlJyxcbiAgdG91Y2hjYW5jZWw6ICdvblRvdWNoQ2FuY2VsJyxcbiAgdG91Y2hlbmQ6ICdvblRvdWNoRW5kJyxcbiAgdG91Y2htb3ZlOiAnb25Ub3VjaE1vdmUnLFxuICB0b3VjaHN0YXJ0OiAnb25Ub3VjaFN0YXJ0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBTQ0FMRV9UWVBFUyA9IFtcbiAgJ2F1dG8nLFxuICAnbGluZWFyJyxcbiAgJ3BvdycsXG4gICdzcXJ0JyxcbiAgJ2xvZycsXG4gICdpZGVudGl0eScsXG4gICd0aW1lJyxcbiAgJ2JhbmQnLFxuICAncG9pbnQnLFxuICAnb3JkaW5hbCcsXG4gICdxdWFudGlsZScsXG4gICdxdWFudGl6ZScsXG4gICd1dGMnLFxuICAnc2VxdWVudGlhbCcsXG4gICd0aHJlc2hvbGQnLFxuXTtcblxuZXhwb3J0IGNvbnN0IExFR0VORF9UWVBFUyA9IFtcbiAgJ3BsYWlubGluZScsXG4gICdsaW5lJyxcbiAgJ3NxdWFyZScsXG4gICdyZWN0JyxcbiAgJ2NpcmNsZScsXG4gICdjcm9zcycsXG4gICdkaWFtb25kJyxcbiAgJ3N0YXInLFxuICAndHJpYW5nbGUnLFxuICAnd3llJyxcbiAgJ25vbmUnLFxuXTtcblxuZXhwb3J0IGNvbnN0IFRPT0xUSVBfVFlQRVMgPSBbJ25vbmUnXTtcblxuLyoqXG4gKiBHZXQgdGhlIGRpc3BsYXkgbmFtZSBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtICB7T2JqZWN0fSBDb21wIFNwZWNpZmllZCBDb21wb25lbnRcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICBEaXNwbGF5IG5hbWUgb2YgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBjb25zdCBnZXREaXNwbGF5TmFtZSA9IChDb21wOiBhbnkpID0+IHtcbiAgaWYgKHR5cGVvZiBDb21wID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wO1xuICB9XG4gIGlmICghQ29tcCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gQ29tcC5kaXNwbGF5TmFtZSB8fCBDb21wLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG4vKlxuICogRmluZCBhbmQgcmV0dXJuIGFsbCBtYXRjaGVkIGNoaWxkcmVuIGJ5IHR5cGUuIGB0eXBlYCBjYW4gYmUgYSBSZWFjdCBlbGVtZW50IGNsYXNzIG9yXG4gKiBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRBbGxCeVR5cGUgPSAoXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGUsXG4gIHR5cGU6IHN0cmluZyB8IHN0cmluZ1tdLFxuKTogUmVhY3QuRGV0YWlsZWRSZWFjdEhUTUxFbGVtZW50PGFueSwgSFRNTEVsZW1lbnQ+W10gPT4ge1xuICBjb25zdCByZXN1bHQ6IFJlYWN0LkRldGFpbGVkUmVhY3RIVE1MRWxlbWVudDxhbnksIEhUTUxFbGVtZW50PltdID0gW107XG4gIGxldCB0eXBlczogc3RyaW5nW10gPSBbXTtcblxuICBpZiAoXy5pc0FycmF5KHR5cGUpKSB7XG4gICAgdHlwZXMgPSB0eXBlLm1hcCh0ID0+IGdldERpc3BsYXlOYW1lKHQpKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlcyA9IFtnZXREaXNwbGF5TmFtZSh0eXBlKV07XG4gIH1cblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoY2hpbGQ6IFJlYWN0LkRldGFpbGVkUmVhY3RIVE1MRWxlbWVudDxhbnksIEhUTUxFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IGNoaWxkVHlwZSA9IF8uZ2V0KGNoaWxkLCAndHlwZS5kaXNwbGF5TmFtZScpIHx8IF8uZ2V0KGNoaWxkLCAndHlwZS5uYW1lJyk7XG4gICAgaWYgKHR5cGVzLmluZGV4T2YoY2hpbGRUeXBlKSAhPT0gLTEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLypcbiAqIFJldHVybiB0aGUgZmlyc3QgbWF0Y2hlZCBjaGlsZCBieSB0eXBlLCByZXR1cm4gbnVsbCBvdGhlcndpc2UuXG4gKiBgdHlwZWAgY2FuIGJlIGEgUmVhY3QgZWxlbWVudCBjbGFzcyBvciBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kQ2hpbGRCeVR5cGUgPSAoXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVbXSxcbiAgdHlwZTogc3RyaW5nLFxuKTogUmVhY3QuRGV0YWlsZWRSZWFjdEhUTUxFbGVtZW50PGFueSwgSFRNTEVsZW1lbnQ+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gZmluZEFsbEJ5VHlwZShjaGlsZHJlbiwgdHlwZSk7XG5cbiAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHRbMF07XG59O1xuXG4vKlxuICogQ3JlYXRlIGEgbmV3IGFycmF5IG9mIGNoaWxkcmVuIGV4Y2x1ZGluZyB0aGUgb25lcyBtYXRjaGVkIHRoZSB0eXBlXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRob3V0VHlwZSA9IChjaGlsZHJlbjogUmVhY3ROb2RlLCB0eXBlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgbmV3Q2hpbGRyZW46IFJlYWN0Tm9kZVtdID0gW107XG4gIGxldCB0eXBlczogc3RyaW5nW107XG5cbiAgaWYgKF8uaXNBcnJheSh0eXBlKSkge1xuICAgIHR5cGVzID0gdHlwZS5tYXAodCA9PiBnZXREaXNwbGF5TmFtZSh0KSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZXMgPSBbZ2V0RGlzcGxheU5hbWUodHlwZSldO1xuICB9XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gXy5nZXQoY2hpbGQsICd0eXBlLmRpc3BsYXlOYW1lJyk7XG5cbiAgICBpZiAoZGlzcGxheU5hbWUgJiYgdHlwZXMuaW5kZXhPZihkaXNwbGF5TmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2goY2hpbGQpO1xuICB9KTtcblxuICByZXR1cm4gbmV3Q2hpbGRyZW47XG59O1xuXG4vKipcbiAqIHZhbGlkYXRlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHByb3BzIG9mIGEgY2hhcnQgZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBlbCBBIGNoYXJ0IGVsZW1lbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgdHJ1ZSBJZiB0aGUgcHJvcHMgd2lkdGggYW5kIGhlaWdodCBhcmUgbnVtYmVyLCBhbmQgZ3JlYXRlciB0aGFuIDBcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlV2lkdGhIZWlnaHQgPSAoZWw6IGFueSk6IGJvb2xlYW4gPT4ge1xuICBpZiAoIWVsIHx8ICFlbC5wcm9wcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGVsLnByb3BzO1xuXG4gIGlmICghaXNOdW1iZXIod2lkdGgpIHx8IHdpZHRoIDw9IDAgfHwgIWlzTnVtYmVyKGhlaWdodCkgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IFNWR19UQUdTOiBzdHJpbmdbXSA9IFtcbiAgJ2EnLFxuICAnYWx0R2x5cGgnLFxuICAnYWx0R2x5cGhEZWYnLFxuICAnYWx0R2x5cGhJdGVtJyxcbiAgJ2FuaW1hdGUnLFxuICAnYW5pbWF0ZUNvbG9yJyxcbiAgJ2FuaW1hdGVNb3Rpb24nLFxuICAnYW5pbWF0ZVRyYW5zZm9ybScsXG4gICdjaXJjbGUnLFxuICAnY2xpcFBhdGgnLFxuICAnY29sb3ItcHJvZmlsZScsXG4gICdjdXJzb3InLFxuICAnZGVmcycsXG4gICdkZXNjJyxcbiAgJ2VsbGlwc2UnLFxuICAnZmVCbGVuZCcsXG4gICdmZUNvbG9ybWF0cml4JyxcbiAgJ2ZlQ29tcG9uZW50VHJhbnNmZXInLFxuICAnZmVDb21wb3NpdGUnLFxuICAnZmVDb252b2x2ZU1hdHJpeCcsXG4gICdmZURpZmZ1c2VMaWdodGluZycsXG4gICdmZURpc3BsYWNlbWVudE1hcCcsXG4gICdmZURpc3RhbnRMaWdodCcsXG4gICdmZUZsb29kJyxcbiAgJ2ZlRnVuY0EnLFxuICAnZmVGdW5jQicsXG4gICdmZUZ1bmNHJyxcbiAgJ2ZlRnVuY1InLFxuICAnZmVHYXVzc2lhbkJsdXInLFxuICAnZmVJbWFnZScsXG4gICdmZU1lcmdlJyxcbiAgJ2ZlTWVyZ2VOb2RlJyxcbiAgJ2ZlTW9ycGhvbG9neScsXG4gICdmZU9mZnNldCcsXG4gICdmZVBvaW50TGlnaHQnLFxuICAnZmVTcGVjdWxhckxpZ2h0aW5nJyxcbiAgJ2ZlU3BvdExpZ2h0JyxcbiAgJ2ZlVGlsZScsXG4gICdmZVR1cmJ1bGVuY2UnLFxuICAnZmlsdGVyJyxcbiAgJ2ZvbnQnLFxuICAnZm9udC1mYWNlJyxcbiAgJ2ZvbnQtZmFjZS1mb3JtYXQnLFxuICAnZm9udC1mYWNlLW5hbWUnLFxuICAnZm9udC1mYWNlLXVybCcsXG4gICdmb3JlaWduT2JqZWN0JyxcbiAgJ2cnLFxuICAnZ2x5cGgnLFxuICAnZ2x5cGhSZWYnLFxuICAnaGtlcm4nLFxuICAnaW1hZ2UnLFxuICAnbGluZScsXG4gICdsaW5lR3JhZGllbnQnLFxuICAnbWFya2VyJyxcbiAgJ21hc2snLFxuICAnbWV0YWRhdGEnLFxuICAnbWlzc2luZy1nbHlwaCcsXG4gICdtcGF0aCcsXG4gICdwYXRoJyxcbiAgJ3BhdHRlcm4nLFxuICAncG9seWdvbicsXG4gICdwb2x5bGluZScsXG4gICdyYWRpYWxHcmFkaWVudCcsXG4gICdyZWN0JyxcbiAgJ3NjcmlwdCcsXG4gICdzZXQnLFxuICAnc3RvcCcsXG4gICdzdHlsZScsXG4gICdzdmcnLFxuICAnc3dpdGNoJyxcbiAgJ3N5bWJvbCcsXG4gICd0ZXh0JyxcbiAgJ3RleHRQYXRoJyxcbiAgJ3RpdGxlJyxcbiAgJ3RyZWYnLFxuICAndHNwYW4nLFxuICAndXNlJyxcbiAgJ3ZpZXcnLFxuICAndmtlcm4nLFxuXTtcblxuY29uc3QgaXNTdmdFbGVtZW50ID0gKGNoaWxkOiBhbnkpID0+IGNoaWxkICYmIGNoaWxkLnR5cGUgJiYgXy5pc1N0cmluZyhjaGlsZC50eXBlKSAmJiBTVkdfVEFHUy5pbmRleE9mKGNoaWxkLnR5cGUpID49IDA7XG5cbi8qKlxuICogRmlsdGVyIGFsbCB0aGUgc3ZnIGVsZW1lbnRzIG9mIGNoaWxkcmVuXG4gKiBAcGFyYW0gIHtBcnJheX0gY2hpbGRyZW4gVGhlIGNoaWxkcmVuIG9mIGEgcmVhY3QgZWxlbWVudFxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFsbCB0aGUgc3ZnIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJTdmdFbGVtZW50cyA9IChjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50W10pOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSA9PiB7XG4gIGNvbnN0IHN2Z0VsZW1lbnRzID0gW10gYXMgUmVhY3QuUmVhY3RFbGVtZW50W107XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVudHJ5OiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcbiAgICBpZiAoaXNTdmdFbGVtZW50KGVudHJ5KSkge1xuICAgICAgc3ZnRWxlbWVudHMucHVzaChlbnRyeSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc3ZnRWxlbWVudHM7XG59O1xuXG4vKipcbiAqIFdldGhlciBwcm9wcyBvZiBjaGlsZHJlbiBjaGFuZ2VkXG4gKiBAcGFyYW0gIHtPYmplY3R9IG5leHRDaGlsZHJlbiBUaGUgbGF0ZXN0IGNoaWxkcmVuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHByZXZDaGlsZHJlbiBUaGUgcHJldiBjaGlsZHJlblxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICAgZXF1YWwgb3Igbm90XG4gKi9cbmV4cG9ydCBjb25zdCBpc0NoaWxkcmVuRXF1YWwgPSAobmV4dENoaWxkcmVuOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSwgcHJldkNoaWxkcmVuOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSk6IGJvb2xlYW4gPT4ge1xuICBpZiAobmV4dENoaWxkcmVuID09PSBwcmV2Q2hpbGRyZW4pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChDaGlsZHJlbi5jb3VudChuZXh0Q2hpbGRyZW4pICE9PSBDaGlsZHJlbi5jb3VudChwcmV2Q2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGNvdW50ID0gQ2hpbGRyZW4uY291bnQobmV4dENoaWxkcmVuKTtcblxuICBpZiAoY291bnQgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgcmV0dXJuIGlzU2luZ2xlQ2hpbGRFcXVhbChcbiAgICAgIF8uaXNBcnJheShuZXh0Q2hpbGRyZW4pID8gbmV4dENoaWxkcmVuWzBdIDogbmV4dENoaWxkcmVuLFxuICAgICAgXy5pc0FycmF5KHByZXZDaGlsZHJlbikgPyBwcmV2Q2hpbGRyZW5bMF0gOiBwcmV2Q2hpbGRyZW4sXG4gICAgKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IG5leHRDaGlsZDogYW55ID0gbmV4dENoaWxkcmVuW2ldO1xuICAgIGNvbnN0IHByZXZDaGlsZDogYW55ID0gcHJldkNoaWxkcmVuW2ldO1xuXG4gICAgaWYgKF8uaXNBcnJheShuZXh0Q2hpbGQpIHx8IF8uaXNBcnJheShwcmV2Q2hpbGQpKSB7XG4gICAgICBpZiAoIWlzQ2hpbGRyZW5FcXVhbChuZXh0Q2hpbGQsIHByZXZDaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lLEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIH0gZWxzZSBpZiAoIWlzU2luZ2xlQ2hpbGRFcXVhbChuZXh0Q2hpbGQsIHByZXZDaGlsZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1NpbmdsZUNoaWxkRXF1YWwgPSAobmV4dENoaWxkOiBSZWFjdC5SZWFjdEVsZW1lbnQsIHByZXZDaGlsZDogUmVhY3QuUmVhY3RFbGVtZW50KTogYm9vbGVhbiA9PiB7XG4gIGlmIChfLmlzTmlsKG5leHRDaGlsZCkgJiYgXy5pc05pbChwcmV2Q2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFfLmlzTmlsKG5leHRDaGlsZCkgJiYgIV8uaXNOaWwocHJldkNoaWxkKSkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW46IG5leHRDaGlsZHJlbiwgLi4ubmV4dFByb3BzIH0gPSBuZXh0Q2hpbGQucHJvcHMgfHwge307XG4gICAgY29uc3QgeyBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCAuLi5wcmV2UHJvcHMgfSA9IHByZXZDaGlsZC5wcm9wcyB8fCB7fTtcblxuICAgIGlmIChuZXh0Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgIHJldHVybiBzaGFsbG93RXF1YWwobmV4dFByb3BzLCBwcmV2UHJvcHMpICYmIGlzQ2hpbGRyZW5FcXVhbChuZXh0Q2hpbGRyZW4sIHByZXZDaGlsZHJlbik7XG4gICAgfVxuICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBzaGFsbG93RXF1YWwobmV4dFByb3BzLCBwcmV2UHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJCeU9yZGVyID0gKGNoaWxkcmVuOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSwgcmVuZGVyTWFwOiBhbnkpID0+IHtcbiAgY29uc3QgZWxlbWVudHM6IFJlYWN0LlJlYWN0RWxlbWVudFtdID0gW107XG4gIGNvbnN0IHJlY29yZDogYW55ID0ge307XG5cbiAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgIGlmIChpc1N2Z0VsZW1lbnQoY2hpbGQpKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkKSB7XG4gICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKGNoaWxkLnR5cGUpO1xuICAgICAgY29uc3QgeyBoYW5kbGVyLCBvbmNlIH0gPSByZW5kZXJNYXBbZGlzcGxheU5hbWVdIHx8IHt9O1xuXG4gICAgICBpZiAoaGFuZGxlciAmJiAoIW9uY2UgfHwgIXJlY29yZFtkaXNwbGF5TmFtZV0pKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBoYW5kbGVyKGNoaWxkLCBkaXNwbGF5TmFtZSwgaW5kZXgpO1xuXG4gICAgICAgIGVsZW1lbnRzLnB1c2gocmVzdWx0cyk7XG4gICAgICAgIHJlY29yZFtkaXNwbGF5TmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF8uZmxhdHRlbihlbGVtZW50cyk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmVhY3RFdmVudEJ5VHlwZSA9IChlOiBhbnkpID0+IHtcbiAgY29uc3QgdHlwZSA9IGUgJiYgZS50eXBlO1xuXG4gIGlmICh0eXBlICYmIFJFQUNUX0JST1dTRVJfRVZFTlRfTUFQW3R5cGVdKSB7XG4gICAgcmV0dXJuIFJFQUNUX0JST1dTRVJfRVZFTlRfTUFQW3R5cGVdO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VDaGlsZEluZGV4ID0gKGNoaWxkOiBhbnksIGNoaWxkcmVuOiBhbnlbXSkgPT4ge1xuICBsZXQgcmVzdWx0ID0gLTE7XG4gIENoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICBpZiAoZW50cnkgPT09IGNoaWxkKSB7XG4gICAgICByZXN1bHQgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmFmVGltZW91dChjYWxsYmFjaykge1xuICB2YXIgdGltZW91dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIGN1cnJUaW1lID0gLTE7XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZShub3cpIHtcbiAgICBpZiAoY3VyclRpbWUgPCAwKSB7XG4gICAgICBjdXJyVGltZSA9IG5vdztcbiAgICB9XG5cbiAgICBpZiAobm93IC0gY3VyclRpbWUgPiB0aW1lb3V0KSB7XG4gICAgICBjYWxsYmFjayhub3cpO1xuICAgICAgY3VyclRpbWUgPSAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFmKHNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIHJhZihzaG91bGRVcGRhdGUpO1xufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF90b0FycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuaW1wb3J0IHNldFJhZlRpbWVvdXQgZnJvbSAnLi9zZXRSYWZUaW1lb3V0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGVNYW5hZ2VyKCkge1xuICB2YXIgY3VyclN0eWxlID0ge307XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgc2hvdWxkU3RvcCA9IGZhbHNlO1xuXG4gIHZhciBzZXRTdHlsZSA9IGZ1bmN0aW9uIHNldFN0eWxlKF9zdHlsZSkge1xuICAgIGlmIChzaG91bGRTdG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoX3N0eWxlKSkge1xuICAgICAgaWYgKCFfc3R5bGUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0eWxlcyA9IF9zdHlsZTtcblxuICAgICAgdmFyIF9zdHlsZXMgPSBfdG9BcnJheShzdHlsZXMpLFxuICAgICAgICAgIGN1cnIgPSBfc3R5bGVzWzBdLFxuICAgICAgICAgIHJlc3RTdHlsZXMgPSBfc3R5bGVzLnNsaWNlKDEpO1xuXG4gICAgICBpZiAodHlwZW9mIGN1cnIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNldFJhZlRpbWVvdXQoc2V0U3R5bGUuYmluZChudWxsLCByZXN0U3R5bGVzKSwgY3Vycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0U3R5bGUoY3Vycik7XG4gICAgICBzZXRSYWZUaW1lb3V0KHNldFN0eWxlLmJpbmQobnVsbCwgcmVzdFN0eWxlcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKF9zdHlsZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICBjdXJyU3R5bGUgPSBfc3R5bGU7XG4gICAgICBoYW5kbGVDaGFuZ2UoY3VyclN0eWxlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9zdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgX3N0eWxlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHNob3VsZFN0b3AgPSB0cnVlO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN0eWxlKSB7XG4gICAgICBzaG91bGRTdG9wID0gZmFsc2U7XG4gICAgICBzZXRTdHlsZShzdHlsZSk7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShfaGFuZGxlQ2hhbmdlKSB7XG4gICAgICBoYW5kbGVDaGFuZ2UgPSBfaGFuZGxlQ2hhbmdlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59IiwiaW1wb3J0IF9pbnRlcnNlY3Rpb24gZnJvbSBcImxvZGFzaC9pbnRlcnNlY3Rpb25cIjtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKiBlc2xpbnQgbm8tY29uc29sZTogMCAqL1xudmFyIFBSRUZJWF9MSVNUID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnXTtcbnZhciBJTl9MSU5FX1BSRUZJWF9MSVNUID0gWyctd2Via2l0LScsICctbW96LScsICctby0nLCAnLW1zLSddO1xudmFyIElOX0NPTVBBVElCTEVfUFJPUEVSVFkgPSBbJ3RyYW5zZm9ybScsICd0cmFuc2Zvcm1PcmlnaW4nLCAndHJhbnNpdGlvbiddO1xuZXhwb3J0IHZhciBnZXRJbnRlcnNlY3Rpb25LZXlzID0gZnVuY3Rpb24gZ2V0SW50ZXJzZWN0aW9uS2V5cyhwcmVPYmosIG5leHRPYmopIHtcbiAgcmV0dXJuIF9pbnRlcnNlY3Rpb24oT2JqZWN0LmtleXMocHJlT2JqKSwgT2JqZWN0LmtleXMobmV4dE9iaikpO1xufTtcbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eShwYXJhbSkge1xuICByZXR1cm4gcGFyYW07XG59O1xuLypcbiAqIEBkZXNjcmlwdGlvbjogY29udmVydCBjYW1lbCBjYXNlIHRvIGRhc2ggY2FzZVxuICogc3RyaW5nID0+IHN0cmluZ1xuICovXG5cbmV4cG9ydCB2YXIgZ2V0RGFzaENhc2UgPSBmdW5jdGlvbiBnZXREYXNoQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gXCItXCIuY29uY2F0KHYudG9Mb3dlckNhc2UoKSk7XG4gIH0pO1xufTtcbi8qXG4gKiBAZGVzY3JpcHRpb246IGFkZCBjb21wYXRpYmxlIHN0eWxlIHByZWZpeFxuICogKHN0cmluZywgc3RyaW5nKSA9PiBvYmplY3RcbiAqL1xuXG5leHBvcnQgdmFyIGdlbmVyYXRlUHJlZml4U3R5bGUgPSBmdW5jdGlvbiBnZW5lcmF0ZVByZWZpeFN0eWxlKG5hbWUsIHZhbHVlKSB7XG4gIGlmIChJTl9DT01QQVRJQkxFX1BST1BFUlRZLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgdmFyIGlzVHJhbnNpdGlvbiA9IG5hbWUgPT09ICd0cmFuc2l0aW9uJztcbiAgdmFyIGNhbWVsTmFtZSA9IG5hbWUucmVwbGFjZSgvKFxcdykvLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2LnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xuICB2YXIgc3R5bGVWYWwgPSB2YWx1ZTtcbiAgcmV0dXJuIFBSRUZJWF9MSVNULnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBwcm9wZXJ0eSwgaSkge1xuICAgIGlmIChpc1RyYW5zaXRpb24pIHtcbiAgICAgIHN0eWxlVmFsID0gdmFsdWUucmVwbGFjZSgvKHRyYW5zZm9ybXx0cmFuc2Zvcm0tb3JpZ2luKS9naW0sIFwiXCIuY29uY2F0KElOX0xJTkVfUFJFRklYX0xJU1RbaV0sIFwiJDFcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByZXN1bHQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHkgKyBjYW1lbE5hbWUsIHN0eWxlVmFsKSk7XG4gIH0sIHt9KTtcbn07XG5leHBvcnQgdmFyIGxvZyA9IGZ1bmN0aW9uIGxvZygpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIChfY29uc29sZSA9IGNvbnNvbGUpLmxvZy5hcHBseShfY29uc29sZSwgYXJndW1lbnRzKTtcbn07XG4vKlxuICogQGRlc2NyaXB0aW9uOiBsb2cgdGhlIHZhbHVlIG9mIGEgdmFyaWJsZVxuICogc3RyaW5nID0+IGFueSA9PiBhbnlcbiAqL1xuXG5leHBvcnQgdmFyIGRlYnVnID0gZnVuY3Rpb24gZGVidWcobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBsb2cobmFtZSwgaXRlbSk7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH07XG59O1xuLypcbiAqIEBkZXNjcmlwdGlvbjogbG9nIG5hbWUsIGFyZ3MsIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uXG4gKiBmdW5jdGlvbiA9PiBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGVidWdmID0gZnVuY3Rpb24gZGVidWdmKHRhZywgZikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gZi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIHZhciBuYW1lID0gdGFnIHx8IGYubmFtZSB8fCAnYW5vbnltb3VzIGZ1bmN0aW9uJztcbiAgICB2YXIgYXJnTmFtZXMgPSBcIihcIi5jb25jYXQoYXJncy5tYXAoSlNPTi5zdHJpbmdpZnkpLmpvaW4oJywgJyksIFwiKVwiKTtcbiAgICBsb2coXCJcIi5jb25jYXQobmFtZSwgXCI6IFwiKS5jb25jYXQoYXJnTmFtZXMsIFwiID0+IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkocmVzKSkpO1xuICAgIHJldHVybiByZXM7XG4gIH07XG59O1xuLypcbiAqIEBkZXNjcmlwdGlvbjogbWFwIG9iamVjdCBvbiBldmVyeSBlbGVtZW50IGluIHRoaXMgb2JqZWN0LlxuICogKGZ1bmN0aW9uLCBvYmplY3QpID0+IG9iamVjdFxuICovXG5cbmV4cG9ydCB2YXIgbWFwT2JqZWN0ID0gZnVuY3Rpb24gbWFwT2JqZWN0KGZuLCBvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChyZXMsIGtleSkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByZXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBmbihrZXksIG9ialtrZXldKSkpO1xuICB9LCB7fSk7XG59O1xuLypcbiAqIEBkZXNjcmlwdGlvbjogYWRkIGNvbXBhdGlibGUgcHJlZml4IHRvIHN0eWxlXG4gKiBvYmplY3QgPT4gb2JqZWN0XG4gKi9cblxuZXhwb3J0IHZhciB0cmFuc2xhdGVTdHlsZSA9IGZ1bmN0aW9uIHRyYW5zbGF0ZVN0eWxlKHN0eWxlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKGZ1bmN0aW9uIChyZXMsIGtleSkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByZXMsIGdlbmVyYXRlUHJlZml4U3R5bGUoa2V5LCByZXNba2V5XSkpO1xuICB9LCBzdHlsZSk7XG59O1xuZXhwb3J0IHZhciBjb21wb3NlID0gZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuXG4gIHZhciBmbnMgPSBhcmdzLnJldmVyc2UoKTsgLy8gZmlyc3QgZnVuY3Rpb24gY2FuIHJlY2VpdmUgbXVsdGlwbHkgYXJndW1lbnRzXG5cbiAgdmFyIGZpcnN0Rm4gPSBmbnNbMF07XG4gIHZhciB0YWlsc0ZuID0gZm5zLnNsaWNlKDEpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0YWlsc0ZuLnJlZHVjZShmdW5jdGlvbiAocmVzLCBmbikge1xuICAgICAgcmV0dXJuIGZuKHJlcyk7XG4gICAgfSwgZmlyc3RGbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICB9O1xufTtcbmV4cG9ydCB2YXIgZ2V0VHJhbnNpdGlvblZhbCA9IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25WYWwocHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgcmV0dXJuIHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChnZXREYXNoQ2FzZShwcm9wKSwgXCIgXCIpLmNvbmNhdChkdXJhdGlvbiwgXCJtcyBcIikuY29uY2F0KGVhc2luZyk7XG4gIH0pLmpvaW4oJywnKTtcbn07XG52YXIgaXNEZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuZXhwb3J0IHZhciB3YXJuID0gZnVuY3Rpb24gd2Fybihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoaXNEZXYgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKCdMb2dVdGlscyByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4vdXRpbCc7XG52YXIgQUNDVVJBQ1kgPSAxZS00O1xuXG52YXIgY3ViaWNCZXppZXJGYWN0b3IgPSBmdW5jdGlvbiBjdWJpY0JlemllckZhY3RvcihjMSwgYzIpIHtcbiAgcmV0dXJuIFswLCAzICogYzEsIDMgKiBjMiAtIDYgKiBjMSwgMyAqIGMxIC0gMyAqIGMyICsgMV07XG59O1xuXG52YXIgbXVsdHlUaW1lID0gZnVuY3Rpb24gbXVsdHlUaW1lKHBhcmFtcywgdCkge1xuICByZXR1cm4gcGFyYW1zLm1hcChmdW5jdGlvbiAocGFyYW0sIGkpIHtcbiAgICByZXR1cm4gcGFyYW0gKiBNYXRoLnBvdyh0LCBpKTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChwcmUsIGN1cnIpIHtcbiAgICByZXR1cm4gcHJlICsgY3VycjtcbiAgfSk7XG59O1xuXG52YXIgY3ViaWNCZXppZXIgPSBmdW5jdGlvbiBjdWJpY0JlemllcihjMSwgYzIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHBhcmFtcyA9IGN1YmljQmV6aWVyRmFjdG9yKGMxLCBjMik7XG4gICAgcmV0dXJuIG11bHR5VGltZShwYXJhbXMsIHQpO1xuICB9O1xufTtcblxudmFyIGRlcml2YXRpdmVDdWJpY0JlemllciA9IGZ1bmN0aW9uIGRlcml2YXRpdmVDdWJpY0JlemllcihjMSwgYzIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHBhcmFtcyA9IGN1YmljQmV6aWVyRmFjdG9yKGMxLCBjMik7XG5cbiAgICB2YXIgbmV3UGFyYW1zID0gX3RvQ29uc3VtYWJsZUFycmF5KHBhcmFtcy5tYXAoZnVuY3Rpb24gKHBhcmFtLCBpKSB7XG4gICAgICByZXR1cm4gcGFyYW0gKiBpO1xuICAgIH0pLnNsaWNlKDEpKS5jb25jYXQoWzBdKTtcblxuICAgIHJldHVybiBtdWx0eVRpbWUobmV3UGFyYW1zLCB0KTtcbiAgfTtcbn07IC8vIGNhbGN1bGF0ZSBjdWJpYy1iZXppZXIgdXNpbmcgTmV3dG9uJ3MgbWV0aG9kXG5cblxuZXhwb3J0IHZhciBjb25maWdCZXppZXIgPSBmdW5jdGlvbiBjb25maWdCZXppZXIoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeDEgPSBhcmdzWzBdLFxuICAgICAgeTEgPSBhcmdzWzFdLFxuICAgICAgeDIgPSBhcmdzWzJdLFxuICAgICAgeTIgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgIHN3aXRjaCAoYXJnc1swXSkge1xuICAgICAgY2FzZSAnbGluZWFyJzpcbiAgICAgICAgeDEgPSAwLjA7XG4gICAgICAgIHkxID0gMC4wO1xuICAgICAgICB4MiA9IDEuMDtcbiAgICAgICAgeTIgPSAxLjA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlYXNlJzpcbiAgICAgICAgeDEgPSAwLjI1O1xuICAgICAgICB5MSA9IDAuMTtcbiAgICAgICAgeDIgPSAwLjI1O1xuICAgICAgICB5MiA9IDEuMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vhc2UtaW4nOlxuICAgICAgICB4MSA9IDAuNDI7XG4gICAgICAgIHkxID0gMC4wO1xuICAgICAgICB4MiA9IDEuMDtcbiAgICAgICAgeTIgPSAxLjA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlYXNlLW91dCc6XG4gICAgICAgIHgxID0gMC40MjtcbiAgICAgICAgeTEgPSAwLjA7XG4gICAgICAgIHgyID0gMC41ODtcbiAgICAgICAgeTIgPSAxLjA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlYXNlLWluLW91dCc6XG4gICAgICAgIHgxID0gMC4wO1xuICAgICAgICB5MSA9IDAuMDtcbiAgICAgICAgeDIgPSAwLjU4O1xuICAgICAgICB5MiA9IDEuMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZWFzaW5nID0gYXJnc1swXS5zcGxpdCgnKCcpO1xuXG4gICAgICAgICAgaWYgKGVhc2luZ1swXSA9PT0gJ2N1YmljLWJlemllcicgJiYgZWFzaW5nWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIHZhciBfZWFzaW5nJDEkc3BsaXQkMCRzcGwgPSBlYXNpbmdbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgX2Vhc2luZyQxJHNwbGl0JDAkc3BsMiA9IF9zbGljZWRUb0FycmF5KF9lYXNpbmckMSRzcGxpdCQwJHNwbCwgNCk7XG5cbiAgICAgICAgICAgIHgxID0gX2Vhc2luZyQxJHNwbGl0JDAkc3BsMlswXTtcbiAgICAgICAgICAgIHkxID0gX2Vhc2luZyQxJHNwbGl0JDAkc3BsMlsxXTtcbiAgICAgICAgICAgIHgyID0gX2Vhc2luZyQxJHNwbGl0JDAkc3BsMlsyXTtcbiAgICAgICAgICAgIHkyID0gX2Vhc2luZyQxJHNwbGl0JDAkc3BsMlszXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybihmYWxzZSwgJ1tjb25maWdCZXppZXJdOiBhcmd1bWVudHMgc2hvdWxkIGJlIG9uZSBvZiAnICsgJ29uZU9mIFxcJ2xpbmVhclxcJywgXFwnZWFzZVxcJywgXFwnZWFzZS1pblxcJywgXFwnZWFzZS1vdXRcXCcsICcgKyAnXFwnZWFzZS1pbi1vdXRcXCcsXFwnY3ViaWMtYmV6aWVyKHgxLHkxLHgyLHkyKVxcJywgaW5zdGVhZCByZWNlaXZlZCAlcycsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhcm4oW3gxLCB4MiwgeTEsIHkyXS5ldmVyeShmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBudW0gPT09ICdudW1iZXInICYmIG51bSA+PSAwICYmIG51bSA8PSAxO1xuICB9KSwgJ1tjb25maWdCZXppZXJdOiBhcmd1bWVudHMgc2hvdWxkIGJlIHgxLCB5MSwgeDIsIHkyIG9mIFswLCAxXSBpbnN0ZWFkIHJlY2VpdmVkICVzJywgYXJncyk7XG4gIHZhciBjdXJ2ZVggPSBjdWJpY0Jlemllcih4MSwgeDIpO1xuICB2YXIgY3VydmVZID0gY3ViaWNCZXppZXIoeTEsIHkyKTtcbiAgdmFyIGRlckN1cnZlWCA9IGRlcml2YXRpdmVDdWJpY0Jlemllcih4MSwgeDIpO1xuXG4gIHZhciByYW5nZVZhbHVlID0gZnVuY3Rpb24gcmFuZ2VWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA+IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGJlemllciA9IGZ1bmN0aW9uIGJlemllcihfdCkge1xuICAgIHZhciB0ID0gX3QgPiAxID8gMSA6IF90O1xuICAgIHZhciB4ID0gdDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICB2YXIgZXZhbFQgPSBjdXJ2ZVgoeCkgLSB0O1xuICAgICAgdmFyIGRlclZhbCA9IGRlckN1cnZlWCh4KTtcblxuICAgICAgaWYgKE1hdGguYWJzKGV2YWxUIC0gdCkgPCBBQ0NVUkFDWSB8fCBkZXJWYWwgPCBBQ0NVUkFDWSkge1xuICAgICAgICByZXR1cm4gY3VydmVZKHgpO1xuICAgICAgfVxuXG4gICAgICB4ID0gcmFuZ2VWYWx1ZSh4IC0gZXZhbFQgLyBkZXJWYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJ2ZVkoeCk7XG4gIH07XG5cbiAgYmV6aWVyLmlzU3RlcHBlciA9IGZhbHNlO1xuICByZXR1cm4gYmV6aWVyO1xufTtcbmV4cG9ydCB2YXIgY29uZmlnU3ByaW5nID0gZnVuY3Rpb24gY29uZmlnU3ByaW5nKCkge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9jb25maWckc3RpZmYgPSBjb25maWcuc3RpZmYsXG4gICAgICBzdGlmZiA9IF9jb25maWckc3RpZmYgPT09IHZvaWQgMCA/IDEwMCA6IF9jb25maWckc3RpZmYsXG4gICAgICBfY29uZmlnJGRhbXBpbmcgPSBjb25maWcuZGFtcGluZyxcbiAgICAgIGRhbXBpbmcgPSBfY29uZmlnJGRhbXBpbmcgPT09IHZvaWQgMCA/IDggOiBfY29uZmlnJGRhbXBpbmcsXG4gICAgICBfY29uZmlnJGR0ID0gY29uZmlnLmR0LFxuICAgICAgZHQgPSBfY29uZmlnJGR0ID09PSB2b2lkIDAgPyAxNyA6IF9jb25maWckZHQ7XG5cbiAgdmFyIHN0ZXBwZXIgPSBmdW5jdGlvbiBzdGVwcGVyKGN1cnJYLCBkZXN0WCwgY3VyclYpIHtcbiAgICB2YXIgRlNwcmluZyA9IC0oY3VyclggLSBkZXN0WCkgKiBzdGlmZjtcbiAgICB2YXIgRkRhbXBpbmcgPSBjdXJyViAqIGRhbXBpbmc7XG4gICAgdmFyIG5ld1YgPSBjdXJyViArIChGU3ByaW5nIC0gRkRhbXBpbmcpICogZHQgLyAxMDAwO1xuICAgIHZhciBuZXdYID0gY3VyclYgKiBkdCAvIDEwMDAgKyBjdXJyWDtcblxuICAgIGlmIChNYXRoLmFicyhuZXdYIC0gZGVzdFgpIDwgQUNDVVJBQ1kgJiYgTWF0aC5hYnMobmV3VikgPCBBQ0NVUkFDWSkge1xuICAgICAgcmV0dXJuIFtkZXN0WCwgMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXdYLCBuZXdWXTtcbiAgfTtcblxuICBzdGVwcGVyLmlzU3RlcHBlciA9IHRydWU7XG4gIHN0ZXBwZXIuZHQgPSBkdDtcbiAgcmV0dXJuIHN0ZXBwZXI7XG59O1xuZXhwb3J0IHZhciBjb25maWdFYXNpbmcgPSBmdW5jdGlvbiBjb25maWdFYXNpbmcoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciBlYXNpbmcgPSBhcmdzWzBdO1xuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAnc3RyaW5nJykge1xuICAgIHN3aXRjaCAoZWFzaW5nKSB7XG4gICAgICBjYXNlICdlYXNlJzpcbiAgICAgIGNhc2UgJ2Vhc2UtaW4tb3V0JzpcbiAgICAgIGNhc2UgJ2Vhc2Utb3V0JzpcbiAgICAgIGNhc2UgJ2Vhc2UtaW4nOlxuICAgICAgY2FzZSAnbGluZWFyJzpcbiAgICAgICAgcmV0dXJuIGNvbmZpZ0JlemllcihlYXNpbmcpO1xuXG4gICAgICBjYXNlICdzcHJpbmcnOlxuICAgICAgICByZXR1cm4gY29uZmlnU3ByaW5nKCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChlYXNpbmcuc3BsaXQoJygnKVswXSA9PT0gJ2N1YmljLWJlemllcicpIHtcbiAgICAgICAgICByZXR1cm4gY29uZmlnQmV6aWVyKGVhc2luZyk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuKGZhbHNlLCAnW2NvbmZpZ0Vhc2luZ106IGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBvbmUgb2YgXFwnZWFzZVxcJywgXFwnZWFzZS1pblxcJywgJyArICdcXCdlYXNlLW91dFxcJywgXFwnZWFzZS1pbi1vdXRcXCcsXFwnY3ViaWMtYmV6aWVyKHgxLHkxLHgyLHkyKVxcJywgXFwnbGluZWFyXFwnIGFuZCBcXCdzcHJpbmdcXCcsIGluc3RlYWQgIHJlY2VpdmVkICVzJywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZWFzaW5nO1xuICB9XG5cbiAgd2FybihmYWxzZSwgJ1tjb25maWdFYXNpbmddOiBmaXJzdCBhcmd1bWVudCB0eXBlIHNob3VsZCBiZSBmdW5jdGlvbiBvciAnICsgJ3N0cmluZywgaW5zdGVhZCByZWNlaXZlZCAlcycsIGFyZ3MpO1xuICByZXR1cm4gbnVsbDtcbn07IiwiaW1wb3J0IF9maWx0ZXIgZnJvbSBcImxvZGFzaC9maWx0ZXJcIjtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuaW1wb3J0IHJhZiwgeyBjYW5jZWwgYXMgY2FmIH0gZnJvbSAncmFmJztcbmltcG9ydCB7IGdldEludGVyc2VjdGlvbktleXMsIG1hcE9iamVjdCB9IGZyb20gJy4vdXRpbCc7XG5cbnZhciBhbHBoYSA9IGZ1bmN0aW9uIGFscGhhKGJlZ2luLCBlbmQsIGspIHtcbiAgcmV0dXJuIGJlZ2luICsgKGVuZCAtIGJlZ2luKSAqIGs7XG59O1xuXG52YXIgbmVlZENvbnRpbnVlID0gZnVuY3Rpb24gbmVlZENvbnRpbnVlKF9yZWYpIHtcbiAgdmFyIGZyb20gPSBfcmVmLmZyb20sXG4gICAgICB0byA9IF9yZWYudG87XG4gIHJldHVybiBmcm9tICE9PSB0bztcbn07XG4vKlxuICogQGRlc2NyaXB0aW9uOiBjYWwgbmV3IGZyb20gdmFsdWUgYW5kIHZlbG9jaXR5IGluIGVhY2ggc3RlcHBlclxuICogQHJldHVybjogeyBbc3R5bGVQcm9wZXJ0eV06IHsgZnJvbSwgdG8sIHZlbG9jaXR5IH0gfVxuICovXG5cblxudmFyIGNhbFN0ZXBwZXJWYWxzID0gZnVuY3Rpb24gY2FsU3RlcHBlclZhbHMoZWFzaW5nLCBwcmVWYWxzLCBzdGVwcykge1xuICB2YXIgbmV4dFN0ZXBWYWxzID0gbWFwT2JqZWN0KGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIGlmIChuZWVkQ29udGludWUodmFsKSkge1xuICAgICAgdmFyIF9lYXNpbmcgPSBlYXNpbmcodmFsLmZyb20sIHZhbC50bywgdmFsLnZlbG9jaXR5KSxcbiAgICAgICAgICBfZWFzaW5nMiA9IF9zbGljZWRUb0FycmF5KF9lYXNpbmcsIDIpLFxuICAgICAgICAgIG5ld1ggPSBfZWFzaW5nMlswXSxcbiAgICAgICAgICBuZXdWID0gX2Vhc2luZzJbMV07XG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB2YWwsIHtcbiAgICAgICAgZnJvbTogbmV3WCxcbiAgICAgICAgdmVsb2NpdHk6IG5ld1ZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH0sIHByZVZhbHMpO1xuXG4gIGlmIChzdGVwcyA8IDEpIHtcbiAgICByZXR1cm4gbWFwT2JqZWN0KGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgICAgaWYgKG5lZWRDb250aW51ZSh2YWwpKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB2YWwsIHtcbiAgICAgICAgICB2ZWxvY2l0eTogYWxwaGEodmFsLnZlbG9jaXR5LCBuZXh0U3RlcFZhbHNba2V5XS52ZWxvY2l0eSwgc3RlcHMpLFxuICAgICAgICAgIGZyb206IGFscGhhKHZhbC5mcm9tLCBuZXh0U3RlcFZhbHNba2V5XS5mcm9tLCBzdGVwcylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSwgcHJlVmFscyk7XG4gIH1cblxuICByZXR1cm4gY2FsU3RlcHBlclZhbHMoZWFzaW5nLCBuZXh0U3RlcFZhbHMsIHN0ZXBzIC0gMSk7XG59OyAvLyBjb25maWd1cmUgdXBkYXRlIGZ1bmN0aW9uXG5cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChmcm9tLCB0bywgZWFzaW5nLCBkdXJhdGlvbiwgcmVuZGVyKSB7XG4gIHZhciBpbnRlcktleXMgPSBnZXRJbnRlcnNlY3Rpb25LZXlzKGZyb20sIHRvKTtcbiAgdmFyIHRpbWluZ1N0eWxlID0gaW50ZXJLZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzLCBrZXkpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgW2Zyb21ba2V5XSwgdG9ba2V5XV0pKTtcbiAgfSwge30pO1xuICB2YXIgc3RlcHBlclN0eWxlID0gaW50ZXJLZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzLCBrZXkpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwge1xuICAgICAgZnJvbTogZnJvbVtrZXldLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICB0bzogdG9ba2V5XVxuICAgIH0pKTtcbiAgfSwge30pO1xuICB2YXIgY2FmSWQgPSAtMTtcbiAgdmFyIHByZVRpbWU7XG4gIHZhciBiZWdpblRpbWU7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgZ2V0Q3VyclN0eWxlID0gZnVuY3Rpb24gZ2V0Q3VyclN0eWxlKCkge1xuICAgIHJldHVybiBtYXBPYmplY3QoZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgICByZXR1cm4gdmFsLmZyb207XG4gICAgfSwgc3RlcHBlclN0eWxlKTtcbiAgfTtcblxuICB2YXIgc2hvdWxkU3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uIHNob3VsZFN0b3BBbmltYXRpb24oKSB7XG4gICAgcmV0dXJuICFfZmlsdGVyKHN0ZXBwZXJTdHlsZSwgbmVlZENvbnRpbnVlKS5sZW5ndGg7XG4gIH07IC8vIHN0ZXBwZXIgdGltaW5nIGZ1bmN0aW9uIGxpa2Ugc3ByaW5nXG5cblxuICB2YXIgc3RlcHBlclVwZGF0ZSA9IGZ1bmN0aW9uIHN0ZXBwZXJVcGRhdGUobm93KSB7XG4gICAgaWYgKCFwcmVUaW1lKSB7XG4gICAgICBwcmVUaW1lID0gbm93O1xuICAgIH1cblxuICAgIHZhciBkZWx0YVRpbWUgPSBub3cgLSBwcmVUaW1lO1xuICAgIHZhciBzdGVwcyA9IGRlbHRhVGltZSAvIGVhc2luZy5kdDtcbiAgICBzdGVwcGVyU3R5bGUgPSBjYWxTdGVwcGVyVmFscyhlYXNpbmcsIHN0ZXBwZXJTdHlsZSwgc3RlcHMpOyAvLyBnZXQgdW5pb24gc2V0IGFuZCBhZGQgY29tcGF0aWJsZSBwcmVmaXhcblxuICAgIHJlbmRlcihfb2JqZWN0U3ByZWFkKHt9LCBmcm9tLCB0bywgZ2V0Q3VyclN0eWxlKHN0ZXBwZXJTdHlsZSkpKTtcbiAgICBwcmVUaW1lID0gbm93O1xuXG4gICAgaWYgKCFzaG91bGRTdG9wQW5pbWF0aW9uKCkpIHtcbiAgICAgIGNhZklkID0gcmFmKHVwZGF0ZSk7XG4gICAgfVxuICB9OyAvLyB0ID0+IHZhbCB0aW1pbmcgZnVuY3Rpb24gbGlrZSBjdWJpYy1iZXppZXJcblxuXG4gIHZhciB0aW1pbmdVcGRhdGUgPSBmdW5jdGlvbiB0aW1pbmdVcGRhdGUobm93KSB7XG4gICAgaWYgKCFiZWdpblRpbWUpIHtcbiAgICAgIGJlZ2luVGltZSA9IG5vdztcbiAgICB9XG5cbiAgICB2YXIgdCA9IChub3cgLSBiZWdpblRpbWUpIC8gZHVyYXRpb247XG4gICAgdmFyIGN1cnJTdHlsZSA9IG1hcE9iamVjdChmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgIHJldHVybiBhbHBoYS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheSh2YWwpLmNvbmNhdChbZWFzaW5nKHQpXSkpO1xuICAgIH0sIHRpbWluZ1N0eWxlKTsgLy8gZ2V0IHVuaW9uIHNldCBhbmQgYWRkIGNvbXBhdGlibGUgcHJlZml4XG5cbiAgICByZW5kZXIoX29iamVjdFNwcmVhZCh7fSwgZnJvbSwgdG8sIGN1cnJTdHlsZSkpO1xuXG4gICAgaWYgKHQgPCAxKSB7XG4gICAgICBjYWZJZCA9IHJhZih1cGRhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZmluYWxTdHlsZSA9IG1hcE9iamVjdChmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIGFscGhhLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbCkuY29uY2F0KFtlYXNpbmcoMSldKSk7XG4gICAgICB9LCB0aW1pbmdTdHlsZSk7XG4gICAgICByZW5kZXIoX29iamVjdFNwcmVhZCh7fSwgZnJvbSwgdG8sIGZpbmFsU3R5bGUpKTtcbiAgICB9XG4gIH07XG5cbiAgdXBkYXRlID0gZWFzaW5nLmlzU3RlcHBlciA/IHN0ZXBwZXJVcGRhdGUgOiB0aW1pbmdVcGRhdGU7IC8vIHJldHVybiBzdGFydCBhbmltYXRpb24gbWV0aG9kXG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByYWYodXBkYXRlKTsgLy8gcmV0dXJuIHN0b3AgYW5pbWF0aW9uIG1ldGhvZFxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhZihjYWZJZCk7XG4gICAgfTtcbiAgfTtcbn0pOyIsImltcG9ydCBfaXNFcXVhbCBmcm9tIFwibG9kYXNoL2lzRXF1YWxcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIGNsb25lRWxlbWVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUFuaW1hdGVNYW5hZ2VyIGZyb20gJy4vQW5pbWF0ZU1hbmFnZXInO1xuaW1wb3J0IHsgY29uZmlnRWFzaW5nIH0gZnJvbSAnLi9lYXNpbmcnO1xuaW1wb3J0IGNvbmZpZ1VwZGF0ZSBmcm9tICcuL2NvbmZpZ1VwZGF0ZSc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uVmFsLCBpZGVudGl0eSwgdHJhbnNsYXRlU3R5bGUgfSBmcm9tICcuL3V0aWwnO1xuXG52YXIgQW5pbWF0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEFuaW1hdGUsIF9QdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBbmltYXRlKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFuaW1hdGUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQW5pbWF0ZSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICBpc0FjdGl2ZSA9IF90aGlzJHByb3BzLmlzQWN0aXZlLFxuICAgICAgICBhdHRyaWJ1dGVOYW1lID0gX3RoaXMkcHJvcHMuYXR0cmlidXRlTmFtZSxcbiAgICAgICAgZnJvbSA9IF90aGlzJHByb3BzLmZyb20sXG4gICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG8sXG4gICAgICAgIHN0ZXBzID0gX3RoaXMkcHJvcHMuc3RlcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW47XG4gICAgX3RoaXMuaGFuZGxlU3R5bGVDaGFuZ2UgPSBfdGhpcy5oYW5kbGVTdHlsZUNoYW5nZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICBfdGhpcy5jaGFuZ2VTdHlsZSA9IF90aGlzLmNoYW5nZVN0eWxlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHN0eWxlOiB7fVxuICAgICAgfTsgLy8gaWYgY2hpbGRyZW4gaXMgYSBmdW5jdGlvbiBhbmQgYW5pbWF0aW9uIGlzIG5vdCBhY3RpdmUsIHNldCBzdHlsZSB0byAndG8nXG5cbiAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgc3R5bGU6IHRvXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXBzICYmIHN0ZXBzLmxlbmd0aCkge1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHN0eWxlOiBzdGVwc1swXS5zdHlsZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZyb20pIHtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgc3R5bGU6IGZyb21cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHN0eWxlOiBhdHRyaWJ1dGVOYW1lID8gX2RlZmluZVByb3BlcnR5KHt9LCBhdHRyaWJ1dGVOYW1lLCBmcm9tKSA6IGZyb21cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBzdHlsZToge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFuaW1hdGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNBY3RpdmUgPSBfdGhpcyRwcm9wczIuaXNBY3RpdmUsXG4gICAgICAgICAgY2FuQmVnaW4gPSBfdGhpcyRwcm9wczIuY2FuQmVnaW47XG4gICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlIHx8ICFjYW5CZWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVuQW5pbWF0aW9uKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaXNBY3RpdmUgPSBfdGhpcyRwcm9wczMuaXNBY3RpdmUsXG4gICAgICAgICAgY2FuQmVnaW4gPSBfdGhpcyRwcm9wczMuY2FuQmVnaW4sXG4gICAgICAgICAgYXR0cmlidXRlTmFtZSA9IF90aGlzJHByb3BzMy5hdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIHNob3VsZFJlQW5pbWF0ZSA9IF90aGlzJHByb3BzMy5zaG91bGRSZUFuaW1hdGU7XG5cbiAgICAgIGlmICghY2FuQmVnaW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICBzdHlsZTogYXR0cmlidXRlTmFtZSA/IF9kZWZpbmVQcm9wZXJ0eSh7fSwgYXR0cmlidXRlTmFtZSwgdGhpcy5wcm9wcy50bykgOiB0aGlzLnByb3BzLnRvXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5zdHlsZSkge1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lICYmIHRoaXMuc3RhdGUuc3R5bGVbYXR0cmlidXRlTmFtZV0gIT09IHRoaXMucHJvcHMudG8gfHwgIWF0dHJpYnV0ZU5hbWUgJiYgdGhpcy5zdGF0ZS5zdHlsZSAhPT0gdGhpcy5wcm9wcy50bykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRpZC11cGRhdGUtc2V0LXN0YXRlXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNFcXVhbChwcmV2UHJvcHMudG8sIHRoaXMucHJvcHMudG8pICYmIHByZXZQcm9wcy5jYW5CZWdpbiAmJiBwcmV2UHJvcHMuaXNBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNUcmlnZ2VyZWQgPSAhcHJldlByb3BzLmNhbkJlZ2luIHx8ICFwcmV2UHJvcHMuaXNBY3RpdmU7XG5cbiAgICAgIGlmICh0aGlzLm1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnN0b3AoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc3RvcEpTQW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcEpTQW5pbWF0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBmcm9tID0gaXNUcmlnZ2VyZWQgfHwgc2hvdWxkUmVBbmltYXRlID8gdGhpcy5wcm9wcy5mcm9tIDogcHJldlByb3BzLnRvO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLnN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV3U3RhdGUgPSB7XG4gICAgICAgICAgc3R5bGU6IGF0dHJpYnV0ZU5hbWUgPyBfZGVmaW5lUHJvcGVydHkoe30sIGF0dHJpYnV0ZU5hbWUsIGZyb20pIDogZnJvbVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lICYmIHRoaXMuc3RhdGUuc3R5bGVbYXR0cmlidXRlTmFtZV0gIT09IGZyb20gfHwgIWF0dHJpYnV0ZU5hbWUgJiYgdGhpcy5zdGF0ZS5zdHlsZSAhPT0gZnJvbSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoX25ld1N0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bkFuaW1hdGlvbihfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIGJlZ2luOiAwXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLnVuU3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWFuYWdlcikge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLm1hbmFnZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdG9wSlNBbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5zdG9wSlNBbmltYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicnVuSlNBbmltYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcnVuSlNBbmltYXRpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZnJvbSA9IHByb3BzLmZyb20sXG4gICAgICAgICAgdG8gPSBwcm9wcy50byxcbiAgICAgICAgICBkdXJhdGlvbiA9IHByb3BzLmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZyA9IHByb3BzLmVhc2luZyxcbiAgICAgICAgICBiZWdpbiA9IHByb3BzLmJlZ2luLFxuICAgICAgICAgIG9uQW5pbWF0aW9uRW5kID0gcHJvcHMub25BbmltYXRpb25FbmQsXG4gICAgICAgICAgb25BbmltYXRpb25TdGFydCA9IHByb3BzLm9uQW5pbWF0aW9uU3RhcnQ7XG4gICAgICB2YXIgc3RhcnRBbmltYXRpb24gPSBjb25maWdVcGRhdGUoZnJvbSwgdG8sIGNvbmZpZ0Vhc2luZyhlYXNpbmcpLCBkdXJhdGlvbiwgdGhpcy5jaGFuZ2VTdHlsZSk7XG5cbiAgICAgIHZhciBmaW5hbFN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24gZmluYWxTdGFydEFuaW1hdGlvbigpIHtcbiAgICAgICAgX3RoaXMyLnN0b3BKU0FuaW1hdGlvbiA9IHN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm1hbmFnZXIuc3RhcnQoW29uQW5pbWF0aW9uU3RhcnQsIGJlZ2luLCBmaW5hbFN0YXJ0QW5pbWF0aW9uLCBkdXJhdGlvbiwgb25BbmltYXRpb25FbmRdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicnVuU3RlcEFuaW1hdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBydW5TdGVwQW5pbWF0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHN0ZXBzID0gcHJvcHMuc3RlcHMsXG4gICAgICAgICAgYmVnaW4gPSBwcm9wcy5iZWdpbixcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0ID0gcHJvcHMub25BbmltYXRpb25TdGFydDtcbiAgICAgIHZhciBfc3RlcHMkID0gc3RlcHNbMF0sXG4gICAgICAgICAgaW5pdGlhbFN0eWxlID0gX3N0ZXBzJC5zdHlsZSxcbiAgICAgICAgICBfc3RlcHMkJGR1cmF0aW9uID0gX3N0ZXBzJC5kdXJhdGlvbixcbiAgICAgICAgICBpbml0aWFsVGltZSA9IF9zdGVwcyQkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfc3RlcHMkJGR1cmF0aW9uO1xuXG4gICAgICB2YXIgYWRkU3R5bGUgPSBmdW5jdGlvbiBhZGRTdHlsZShzZXF1ZW5jZSwgbmV4dEl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG5leHRJdGVtLmR1cmF0aW9uLFxuICAgICAgICAgICAgX25leHRJdGVtJGVhc2luZyA9IG5leHRJdGVtLmVhc2luZyxcbiAgICAgICAgICAgIGVhc2luZyA9IF9uZXh0SXRlbSRlYXNpbmcgPT09IHZvaWQgMCA/ICdlYXNlJyA6IF9uZXh0SXRlbSRlYXNpbmcsXG4gICAgICAgICAgICBzdHlsZSA9IG5leHRJdGVtLnN0eWxlLFxuICAgICAgICAgICAgbmV4dFByb3BlcnRpZXMgPSBuZXh0SXRlbS5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgb25BbmltYXRpb25FbmQgPSBuZXh0SXRlbS5vbkFuaW1hdGlvbkVuZDtcbiAgICAgICAgdmFyIHByZUl0ZW0gPSBpbmRleCA+IDAgPyBzdGVwc1tpbmRleCAtIDFdIDogbmV4dEl0ZW07XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gbmV4dFByb3BlcnRpZXMgfHwgT2JqZWN0LmtleXMoc3R5bGUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nIHx8IGVhc2luZyA9PT0gJ3NwcmluZycpIHtcbiAgICAgICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHNlcXVlbmNlKS5jb25jYXQoW190aGlzMy5ydW5KU0FuaW1hdGlvbi5iaW5kKF90aGlzMywge1xuICAgICAgICAgICAgZnJvbTogcHJlSXRlbS5zdHlsZSxcbiAgICAgICAgICAgIHRvOiBzdHlsZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgIGVhc2luZzogZWFzaW5nXG4gICAgICAgICAgfSksIGR1cmF0aW9uXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IGdldFRyYW5zaXRpb25WYWwocHJvcGVydGllcywgZHVyYXRpb24sIGVhc2luZyk7XG5cbiAgICAgICAgdmFyIG5ld1N0eWxlID0gX29iamVjdFNwcmVhZCh7fSwgcHJlSXRlbS5zdHlsZSwgc3R5bGUsIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfdG9Db25zdW1hYmxlQXJyYXkoc2VxdWVuY2UpLmNvbmNhdChbbmV3U3R5bGUsIGR1cmF0aW9uLCBvbkFuaW1hdGlvbkVuZF0pLmZpbHRlcihpZGVudGl0eSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnN0YXJ0KFtvbkFuaW1hdGlvblN0YXJ0XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0ZXBzLnJlZHVjZShhZGRTdHlsZSwgW2luaXRpYWxTdHlsZSwgTWF0aC5tYXgoaW5pdGlhbFRpbWUsIGJlZ2luKV0pKSwgW3Byb3BzLm9uQW5pbWF0aW9uRW5kXSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJydW5BbmltYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcnVuQW5pbWF0aW9uKHByb3BzKSB7XG4gICAgICBpZiAoIXRoaXMubWFuYWdlcikge1xuICAgICAgICB0aGlzLm1hbmFnZXIgPSBjcmVhdGVBbmltYXRlTWFuYWdlcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmVnaW4gPSBwcm9wcy5iZWdpbixcbiAgICAgICAgICBkdXJhdGlvbiA9IHByb3BzLmR1cmF0aW9uLFxuICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSBwcm9wcy5hdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIHByb3BzVG8gPSBwcm9wcy50byxcbiAgICAgICAgICBlYXNpbmcgPSBwcm9wcy5lYXNpbmcsXG4gICAgICAgICAgb25BbmltYXRpb25TdGFydCA9IHByb3BzLm9uQW5pbWF0aW9uU3RhcnQsXG4gICAgICAgICAgb25BbmltYXRpb25FbmQgPSBwcm9wcy5vbkFuaW1hdGlvbkVuZCxcbiAgICAgICAgICBzdGVwcyA9IHByb3BzLnN0ZXBzLFxuICAgICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgbWFuYWdlciA9IHRoaXMubWFuYWdlcjtcbiAgICAgIHRoaXMudW5TdWJzY3JpYmUgPSBtYW5hZ2VyLnN1YnNjcmliZSh0aGlzLmhhbmRsZVN0eWxlQ2hhbmdlKTtcblxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nIHx8IGVhc2luZyA9PT0gJ3NwcmluZycpIHtcbiAgICAgICAgdGhpcy5ydW5KU0FuaW1hdGlvbihwcm9wcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0ZXBzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5ydW5TdGVwQW5pbWF0aW9uKHByb3BzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG8gPSBhdHRyaWJ1dGVOYW1lID8gX2RlZmluZVByb3BlcnR5KHt9LCBhdHRyaWJ1dGVOYW1lLCBwcm9wc1RvKSA6IHByb3BzVG87XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9IGdldFRyYW5zaXRpb25WYWwoT2JqZWN0LmtleXModG8pLCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgICAgIG1hbmFnZXIuc3RhcnQoW29uQW5pbWF0aW9uU3RhcnQsIGJlZ2luLCBfb2JqZWN0U3ByZWFkKHt9LCB0bywge1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uXG4gICAgICB9KSwgZHVyYXRpb24sIG9uQW5pbWF0aW9uRW5kXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVN0eWxlQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN0eWxlQ2hhbmdlKHN0eWxlKSB7XG4gICAgICB0aGlzLmNoYW5nZVN0eWxlKHN0eWxlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hhbmdlU3R5bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlU3R5bGUoc3R5bGUpIHtcbiAgICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgYmVnaW4gPSBfdGhpcyRwcm9wczQuYmVnaW4sXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczQuZHVyYXRpb24sXG4gICAgICAgICAgYXR0cmlidXRlTmFtZSA9IF90aGlzJHByb3BzNC5hdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIGVhc2luZyA9IF90aGlzJHByb3BzNC5lYXNpbmcsXG4gICAgICAgICAgaXNBY3RpdmUgPSBfdGhpcyRwcm9wczQuaXNBY3RpdmUsXG4gICAgICAgICAgc3RlcHMgPSBfdGhpcyRwcm9wczQuc3RlcHMsXG4gICAgICAgICAgZnJvbSA9IF90aGlzJHByb3BzNC5mcm9tLFxuICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHM0LnRvLFxuICAgICAgICAgIGNhbkJlZ2luID0gX3RoaXMkcHJvcHM0LmNhbkJlZ2luLFxuICAgICAgICAgIG9uQW5pbWF0aW9uRW5kID0gX3RoaXMkcHJvcHM0Lm9uQW5pbWF0aW9uRW5kLFxuICAgICAgICAgIHNob3VsZFJlQW5pbWF0ZSA9IF90aGlzJHByb3BzNC5zaG91bGRSZUFuaW1hdGUsXG4gICAgICAgICAgb25BbmltYXRpb25SZVN0YXJ0ID0gX3RoaXMkcHJvcHM0Lm9uQW5pbWF0aW9uUmVTdGFydCxcbiAgICAgICAgICBvdGhlcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHM0LCBbXCJjaGlsZHJlblwiLCBcImJlZ2luXCIsIFwiZHVyYXRpb25cIiwgXCJhdHRyaWJ1dGVOYW1lXCIsIFwiZWFzaW5nXCIsIFwiaXNBY3RpdmVcIiwgXCJzdGVwc1wiLCBcImZyb21cIiwgXCJ0b1wiLCBcImNhbkJlZ2luXCIsIFwib25BbmltYXRpb25FbmRcIiwgXCJzaG91bGRSZUFuaW1hdGVcIiwgXCJvbkFuaW1hdGlvblJlU3RhcnRcIl0pO1xuXG4gICAgICB2YXIgY291bnQgPSBDaGlsZHJlbi5jb3VudChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RhdGVTdHlsZSA9IHRyYW5zbGF0ZVN0eWxlKHRoaXMuc3RhdGUuc3R5bGUpO1xuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbihzdGF0ZVN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FjdGl2ZSB8fCBjb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9uZUNvbnRhaW5lciA9IGZ1bmN0aW9uIGNsb25lQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2NvbnRhaW5lciRwcm9wcyA9IGNvbnRhaW5lci5wcm9wcyxcbiAgICAgICAgICAgIF9jb250YWluZXIkcHJvcHMkc3R5bCA9IF9jb250YWluZXIkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgICBzdHlsZSA9IF9jb250YWluZXIkcHJvcHMkc3R5bCA9PT0gdm9pZCAwID8ge30gOiBfY29udGFpbmVyJHByb3BzJHN0eWwsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBfY29udGFpbmVyJHByb3BzLmNsYXNzTmFtZTtcbiAgICAgICAgdmFyIHJlcyA9IGNsb25lRWxlbWVudChjb250YWluZXIsIF9vYmplY3RTcHJlYWQoe30sIG90aGVycywge1xuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZSwgc3RhdGVTdHlsZSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfTtcblxuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjbG9uZUNvbnRhaW5lcihDaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjbG9uZUNvbnRhaW5lcihjaGlsZCk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFuaW1hdGU7XG59KFB1cmVDb21wb25lbnQpO1xuXG5BbmltYXRlLmRpc3BsYXlOYW1lID0gJ0FuaW1hdGUnO1xuQW5pbWF0ZS5wcm9wVHlwZXMgPSB7XG4gIGZyb206IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgYXR0cmlidXRlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gYW5pbWF0aW9uIGR1cmF0aW9uXG4gIGR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuICBiZWdpbjogUHJvcFR5cGVzLm51bWJlcixcbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICBzdGVwczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBkdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlYXNlJywgJ2Vhc2UtaW4nLCAnZWFzZS1vdXQnLCAnZWFzZS1pbi1vdXQnLCAnbGluZWFyJ10pLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIC8vIHRyYW5zaXRpb24gY3NzIHByb3BlcnRpZXMoZGFzaCBjYXNlKSwgb3B0aW9uYWxcbiAgICBwcm9wZXJ0aWVzOiBQcm9wVHlwZXMuYXJyYXlPZignc3RyaW5nJyksXG4gICAgb25BbmltYXRpb25FbmQ6IFByb3BUeXBlcy5mdW5jXG4gIH0pKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNhbkJlZ2luOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25BbmltYXRpb25FbmQ6IFByb3BUeXBlcy5mdW5jLFxuICAvLyBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlYW5pbWF0ZSB3aXRoIGluaXRpYWwgZnJvbSBzdHlsZSB3aGVuIHByb3BzIGNoYW5nZVxuICBzaG91bGRSZUFuaW1hdGU6IFByb3BUeXBlcy5ib29sLFxuICBvbkFuaW1hdGlvblN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25BbmltYXRpb25SZVN0YXJ0OiBQcm9wVHlwZXMuZnVuY1xufTtcbkFuaW1hdGUuZGVmYXVsdFByb3BzID0ge1xuICBiZWdpbjogMCxcbiAgZHVyYXRpb246IDEwMDAsXG4gIGZyb206ICcnLFxuICB0bzogJycsXG4gIGF0dHJpYnV0ZU5hbWU6ICcnLFxuICBlYXNpbmc6ICdlYXNlJyxcbiAgaXNBY3RpdmU6IHRydWUsXG4gIGNhbkJlZ2luOiB0cnVlLFxuICBzdGVwczogW10sXG4gIG9uQW5pbWF0aW9uRW5kOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkVuZCgpIHt9LFxuICBvbkFuaW1hdGlvblN0YXJ0OiBmdW5jdGlvbiBvbkFuaW1hdGlvblN0YXJ0KCkge31cbn07XG5leHBvcnQgZGVmYXVsdCBBbmltYXRlOyIsImltcG9ydCBfaXNOdW1iZXIgZnJvbSBcImxvZGFzaC9pc051bWJlclwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICcuL0FuaW1hdGUnO1xuXG52YXIgcGFyc2VEdXJhdGlvbk9mU2luZ2xlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRHVyYXRpb25PZlNpbmdsZVRyYW5zaXRpb24oKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIHN0ZXBzID0gb3B0aW9ucy5zdGVwcyxcbiAgICAgIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbjtcblxuICBpZiAoc3RlcHMgJiYgc3RlcHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0ZXBzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBlbnRyeSkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChfaXNOdW1iZXIoZW50cnkuZHVyYXRpb24pICYmIGVudHJ5LmR1cmF0aW9uID4gMCA/IGVudHJ5LmR1cmF0aW9uIDogMCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBpZiAoX2lzTnVtYmVyKGR1cmF0aW9uKSkge1xuICAgIHJldHVybiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiAwO1xufTtcblxudmFyIEFuaW1hdGVHcm91cENoaWxkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhBbmltYXRlR3JvdXBDaGlsZCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQW5pbWF0ZUdyb3VwQ2hpbGQoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0ZUdyb3VwQ2hpbGQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQW5pbWF0ZUdyb3VwQ2hpbGQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQWN0aXZlOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBwZWFyT3B0aW9ucyA9IF90aGlzJHByb3BzLmFwcGVhck9wdGlvbnMsXG4gICAgICAgICAgZW50ZXJPcHRpb25zID0gX3RoaXMkcHJvcHMuZW50ZXJPcHRpb25zO1xuXG4gICAgICBfdGhpcy5oYW5kbGVTdHlsZUFjdGl2ZShpc0FwcGVhcmluZyA/IGFwcGVhck9wdGlvbnMgOiBlbnRlck9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaGFuZGxlU3R5bGVBY3RpdmUoX3RoaXMucHJvcHMubGVhdmVPcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFuaW1hdGVHcm91cENoaWxkLCBbe1xuICAgIGtleTogXCJoYW5kbGVTdHlsZUFjdGl2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTdHlsZUFjdGl2ZShzdHlsZSkge1xuICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIHZhciBvbkFuaW1hdGlvbkVuZCA9IHN0eWxlLm9uQW5pbWF0aW9uRW5kID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0eWxlLm9uQW5pbWF0aW9uRW5kKCk7XG4gICAgICAgIH0gOiBudWxsO1xuICAgICAgICB0aGlzLnNldFN0YXRlKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlLCB7XG4gICAgICAgICAgb25BbmltYXRpb25FbmQ6IG9uQW5pbWF0aW9uRW5kLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGFyc2VUaW1lb3V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGltZW91dCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFwcGVhck9wdGlvbnMgPSBfdGhpcyRwcm9wczIuYXBwZWFyT3B0aW9ucyxcbiAgICAgICAgICBlbnRlck9wdGlvbnMgPSBfdGhpcyRwcm9wczIuZW50ZXJPcHRpb25zLFxuICAgICAgICAgIGxlYXZlT3B0aW9ucyA9IF90aGlzJHByb3BzMi5sZWF2ZU9wdGlvbnM7XG4gICAgICByZXR1cm4gcGFyc2VEdXJhdGlvbk9mU2luZ2xlVHJhbnNpdGlvbihhcHBlYXJPcHRpb25zKSArIHBhcnNlRHVyYXRpb25PZlNpbmdsZVRyYW5zaXRpb24oZW50ZXJPcHRpb25zKSArIHBhcnNlRHVyYXRpb25PZlNpbmdsZVRyYW5zaXRpb24obGVhdmVPcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBhcHBlYXJPcHRpb25zID0gX3RoaXMkcHJvcHMzLmFwcGVhck9wdGlvbnMsXG4gICAgICAgICAgZW50ZXJPcHRpb25zID0gX3RoaXMkcHJvcHMzLmVudGVyT3B0aW9ucyxcbiAgICAgICAgICBsZWF2ZU9wdGlvbnMgPSBfdGhpcyRwcm9wczMubGVhdmVPcHRpb25zLFxuICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMywgW1wiY2hpbGRyZW5cIiwgXCJhcHBlYXJPcHRpb25zXCIsIFwiZW50ZXJPcHRpb25zXCIsIFwibGVhdmVPcHRpb25zXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgICB0aW1lb3V0OiB0aGlzLnBhcnNlVGltZW91dCgpXG4gICAgICB9KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBbmltYXRlLCBfdGhpczIuc3RhdGUsIENoaWxkcmVuLm9ubHkoY2hpbGRyZW4pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBbmltYXRlR3JvdXBDaGlsZDtcbn0oQ29tcG9uZW50KTtcblxuQW5pbWF0ZUdyb3VwQ2hpbGQucHJvcFR5cGVzID0ge1xuICBhcHBlYXJPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBlbnRlck9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGxlYXZlT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50XG59O1xuZXhwb3J0IGRlZmF1bHQgQW5pbWF0ZUdyb3VwQ2hpbGQ7IiwiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEFuaW1hdGVHcm91cENoaWxkIGZyb20gJy4vQW5pbWF0ZUdyb3VwQ2hpbGQnO1xuXG5mdW5jdGlvbiBBbmltYXRlR3JvdXAocHJvcHMpIHtcbiAgdmFyIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBhcHBlYXIgPSBwcm9wcy5hcHBlYXIsXG4gICAgICBlbnRlciA9IHByb3BzLmVudGVyLFxuICAgICAgbGVhdmUgPSBwcm9wcy5sZWF2ZTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBjb21wb25lbnRcbiAgfSwgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQW5pbWF0ZUdyb3VwQ2hpbGQsIHtcbiAgICAgIGFwcGVhck9wdGlvbnM6IGFwcGVhcixcbiAgICAgIGVudGVyT3B0aW9uczogZW50ZXIsXG4gICAgICBsZWF2ZU9wdGlvbnM6IGxlYXZlLFxuICAgICAga2V5OiBcImNoaWxkLVwiLmNvbmNhdChpbmRleClcbiAgICB9LCBjaGlsZCk7XG4gIH0pKTtcbn1cblxuQW5pbWF0ZUdyb3VwLnByb3BUeXBlcyA9IHtcbiAgYXBwZWFyOiBQcm9wVHlwZXMub2JqZWN0LFxuICBlbnRlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgbGVhdmU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5lbGVtZW50XSksXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueVxufTtcbkFuaW1hdGVHcm91cC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3NwYW4nXG59O1xuZXhwb3J0IGRlZmF1bHQgQW5pbWF0ZUdyb3VwOyIsImltcG9ydCBBbmltYXRlIGZyb20gJy4vQW5pbWF0ZSc7XG5pbXBvcnQgeyBjb25maWdCZXppZXIsIGNvbmZpZ1NwcmluZyB9IGZyb20gJy4vZWFzaW5nJztcbmltcG9ydCB7IHRyYW5zbGF0ZVN0eWxlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBBbmltYXRlR3JvdXAgZnJvbSAnLi9BbmltYXRlR3JvdXAnO1xuZXhwb3J0IHsgY29uZmlnU3ByaW5nLCBjb25maWdCZXppZXIsIEFuaW1hdGVHcm91cCwgdHJhbnNsYXRlU3R5bGUgfTtcbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGU7IiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldFBlcmNlbnRWYWx1ZSB9IGZyb20gJy4vRGF0YVV0aWxzJztcbmltcG9ydCB7IHBhcnNlU2NhbGUsIGNoZWNrRG9tYWluT2ZTY2FsZSwgZ2V0VGlja3NPZlNjYWxlIH0gZnJvbSAnLi9DaGFydFV0aWxzJztcbmltcG9ydCB7IENvb3JkaW5hdGUsIENoYXJ0T2Zmc2V0LCBHZW9tZXRyeVNlY3RvciB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgUkFESUFOID0gTWF0aC5QSSAvIDE4MDtcblxuZXhwb3J0IGNvbnN0IGRlZ3JlZVRvUmFkaWFuID0gKGFuZ2xlOiBudW1iZXIpID0+IChhbmdsZSAqIE1hdGguUEkpIC8gMTgwO1xuXG5leHBvcnQgY29uc3QgcmFkaWFuVG9EZWdyZWUgPSAoYW5nbGVJblJhZGlhbjogbnVtYmVyKSA9PiAoYW5nbGVJblJhZGlhbiAqIDE4MCkgLyBNYXRoLlBJO1xuXG5leHBvcnQgY29uc3QgcG9sYXJUb0NhcnRlc2lhbiA9IChjeDogbnVtYmVyLCBjeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgYW5nbGU6IG51bWJlcik6IENvb3JkaW5hdGUgPT4gKHtcbiAgeDogY3ggKyBNYXRoLmNvcygtUkFESUFOICogYW5nbGUpICogcmFkaXVzLFxuICB5OiBjeSArIE1hdGguc2luKC1SQURJQU4gKiBhbmdsZSkgKiByYWRpdXMsXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldE1heFJhZGl1cyA9IChcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIG9mZnNldDogQ2hhcnRPZmZzZXQgPSB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICB9LFxuKSA9PlxuICBNYXRoLm1pbihcbiAgICBNYXRoLmFicyh3aWR0aCAtIChvZmZzZXQubGVmdCB8fCAwKSAtIChvZmZzZXQucmlnaHQgfHwgMCkpLFxuICAgIE1hdGguYWJzKGhlaWdodCAtIChvZmZzZXQudG9wIHx8IDApIC0gKG9mZnNldC5ib3R0b20gfHwgMCkpLFxuICApIC8gMjtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHNjYWxlIGZ1bmN0aW9uLCBwb3NpdGlvbiwgd2lkdGgsIGhlaWdodCBvZiBheGVzXG4gKiBAcGFyYW0gIHtPYmplY3R9IHByb3BzICAgICBMYXRlc3QgcHJvcHNcbiAqIEBwYXJhbSAge09iamVjdH0gYXhpc01hcCAgIFRoZSBjb25maWd1cmF0aW9uIG9mIGF4ZXNcbiAqIEBwYXJhbSAge09iamVjdH0gb2Zmc2V0ICAgIFRoZSBvZmZzZXQgb2YgbWFpbiBwYXJ0IGluIHRoZSBzdmcgZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBheGlzVHlwZSAgVGhlIHR5cGUgb2YgYXhlcywgcmFkaXVzLWF4aXMgb3IgYW5nbGUtYXhpc1xuICogQHBhcmFtICB7U3RyaW5nfSBjaGFydE5hbWUgVGhlIG5hbWUgb2YgY2hhcnRcbiAqIEByZXR1cm4ge09iamVjdH0gQ29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0QXhpc01hcCA9IChcbiAgcHJvcHM6IGFueSxcbiAgYXhpc01hcDogYW55LFxuICBvZmZzZXQ6IENoYXJ0T2Zmc2V0LFxuICBheGlzVHlwZTogJ2FuZ2xlQXhpcycgfCAncmFkaXVzQXhpcycsXG4gIGNoYXJ0TmFtZTogc3RyaW5nLFxuKSA9PiB7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gcHJvcHM7XG4gIGxldCB7IHN0YXJ0QW5nbGUsIGVuZEFuZ2xlIH0gPSBwcm9wcztcbiAgY29uc3QgY3ggPSBnZXRQZXJjZW50VmFsdWUocHJvcHMuY3gsIHdpZHRoLCB3aWR0aCAvIDIpO1xuICBjb25zdCBjeSA9IGdldFBlcmNlbnRWYWx1ZShwcm9wcy5jeSwgaGVpZ2h0LCBoZWlnaHQgLyAyKTtcbiAgY29uc3QgbWF4UmFkaXVzID0gZ2V0TWF4UmFkaXVzKHdpZHRoLCBoZWlnaHQsIG9mZnNldCk7XG4gIGNvbnN0IGlubmVyUmFkaXVzID0gZ2V0UGVyY2VudFZhbHVlKHByb3BzLmlubmVyUmFkaXVzLCBtYXhSYWRpdXMsIDApO1xuICBjb25zdCBvdXRlclJhZGl1cyA9IGdldFBlcmNlbnRWYWx1ZShwcm9wcy5vdXRlclJhZGl1cywgbWF4UmFkaXVzLCBtYXhSYWRpdXMgKiAwLjgpO1xuICBjb25zdCBpZHMgPSBPYmplY3Qua2V5cyhheGlzTWFwKTtcblxuICByZXR1cm4gaWRzLnJlZHVjZSgocmVzdWx0LCBpZCkgPT4ge1xuICAgIGNvbnN0IGF4aXMgPSBheGlzTWFwW2lkXTtcbiAgICBjb25zdCB7IGRvbWFpbiwgcmV2ZXJzZWQgfSA9IGF4aXM7XG4gICAgbGV0IHJhbmdlO1xuXG4gICAgaWYgKF8uaXNOaWwoYXhpcy5yYW5nZSkpIHtcbiAgICAgIGlmIChheGlzVHlwZSA9PT0gJ2FuZ2xlQXhpcycpIHtcbiAgICAgICAgcmFuZ2UgPSBbc3RhcnRBbmdsZSwgZW5kQW5nbGVdO1xuICAgICAgfSBlbHNlIGlmIChheGlzVHlwZSA9PT0gJ3JhZGl1c0F4aXMnKSB7XG4gICAgICAgIHJhbmdlID0gW2lubmVyUmFkaXVzLCBvdXRlclJhZGl1c107XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXZlcnNlZCkge1xuICAgICAgICByYW5nZSA9IFtyYW5nZVsxXSwgcmFuZ2VbMF1dO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoeyByYW5nZSB9ID0gYXhpcyk7XG4gICAgICBbc3RhcnRBbmdsZSwgZW5kQW5nbGVdID0gcmFuZ2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyByZWFsU2NhbGVUeXBlLCBzY2FsZSB9ID0gcGFyc2VTY2FsZShheGlzLCBjaGFydE5hbWUpO1xuICAgIHNjYWxlLmRvbWFpbihkb21haW4pLnJhbmdlKHJhbmdlKTtcbiAgICBjaGVja0RvbWFpbk9mU2NhbGUoc2NhbGUpO1xuICAgIGNvbnN0IHRpY2tzID0gZ2V0VGlja3NPZlNjYWxlKHNjYWxlLCB7IC4uLmF4aXMsIHJlYWxTY2FsZVR5cGUgfSk7XG5cbiAgICBjb25zdCBmaW5hbEF4aXMgPSB7XG4gICAgICAuLi5heGlzLFxuICAgICAgLi4udGlja3MsXG4gICAgICByYW5nZSxcbiAgICAgIHJhZGl1czogb3V0ZXJSYWRpdXMsXG4gICAgICByZWFsU2NhbGVUeXBlLFxuICAgICAgc2NhbGUsXG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgaW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyxcbiAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBbaWRdOiBmaW5hbEF4aXMgfTtcbiAgfSwge30pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpc3RhbmNlQmV0d2VlblBvaW50cyA9IChwb2ludDogQ29vcmRpbmF0ZSwgYW5vdGhlclBvaW50OiBDb29yZGluYXRlKSA9PiB7XG4gIGNvbnN0IHsgeDogeDEsIHk6IHkxIH0gPSBwb2ludDtcbiAgY29uc3QgeyB4OiB4MiwgeTogeTIgfSA9IGFub3RoZXJQb2ludDtcblxuICByZXR1cm4gTWF0aC5zcXJ0KCh4MSAtIHgyKSAqKiAyICsgKHkxIC0geTIpICoqIDIpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFuZ2xlT2ZQb2ludCA9ICh7IHgsIHkgfTogQ29vcmRpbmF0ZSwgeyBjeCwgY3kgfTogR2VvbWV0cnlTZWN0b3IpID0+IHtcbiAgY29uc3QgcmFkaXVzID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHsgeCwgeSB9LCB7IHg6IGN4LCB5OiBjeSB9KTtcblxuICBpZiAocmFkaXVzIDw9IDApIHtcbiAgICByZXR1cm4geyByYWRpdXMgfTtcbiAgfVxuXG4gIGNvbnN0IGNvcyA9ICh4IC0gY3gpIC8gcmFkaXVzO1xuICBsZXQgYW5nbGVJblJhZGlhbiA9IE1hdGguYWNvcyhjb3MpO1xuXG4gIGlmICh5ID4gY3kpIHtcbiAgICBhbmdsZUluUmFkaWFuID0gMiAqIE1hdGguUEkgLSBhbmdsZUluUmFkaWFuO1xuICB9XG5cbiAgcmV0dXJuIHsgcmFkaXVzLCBhbmdsZTogcmFkaWFuVG9EZWdyZWUoYW5nbGVJblJhZGlhbiksIGFuZ2xlSW5SYWRpYW4gfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRBbmdsZU9mU2VjdG9yID0gKHsgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfTogR2VvbWV0cnlTZWN0b3IpID0+IHtcbiAgY29uc3Qgc3RhcnRDbnQgPSBNYXRoLmZsb29yKHN0YXJ0QW5nbGUgLyAzNjApO1xuICBjb25zdCBlbmRDbnQgPSBNYXRoLmZsb29yKGVuZEFuZ2xlIC8gMzYwKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRDbnQsIGVuZENudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlIC0gbWluICogMzYwLFxuICAgIGVuZEFuZ2xlOiBlbmRBbmdsZSAtIG1pbiAqIDM2MCxcbiAgfTtcbn07XG5cbmNvbnN0IHJldmVyc2VGb3JtYXRBbmdsZU9mU2V0b3IgPSAoYW5nbGU6IG51bWJlciwgeyBzdGFydEFuZ2xlLCBlbmRBbmdsZSB9OiBHZW9tZXRyeVNlY3RvcikgPT4ge1xuICBjb25zdCBzdGFydENudCA9IE1hdGguZmxvb3Ioc3RhcnRBbmdsZSAvIDM2MCk7XG4gIGNvbnN0IGVuZENudCA9IE1hdGguZmxvb3IoZW5kQW5nbGUgLyAzNjApO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydENudCwgZW5kQ250KTtcblxuICByZXR1cm4gYW5nbGUgKyBtaW4gKiAzNjA7XG59O1xuXG5leHBvcnQgY29uc3QgaW5SYW5nZU9mU2VjdG9yID0gKHsgeCwgeSB9OiBDb29yZGluYXRlLCBzZWN0b3I6IEdlb21ldHJ5U2VjdG9yKSA9PiB7XG4gIGNvbnN0IHsgcmFkaXVzLCBhbmdsZSB9ID0gZ2V0QW5nbGVPZlBvaW50KHsgeCwgeSB9LCBzZWN0b3IpO1xuICBjb25zdCB7IGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cyB9ID0gc2VjdG9yO1xuXG4gIGlmIChyYWRpdXMgPCBpbm5lclJhZGl1cyB8fCByYWRpdXMgPiBvdXRlclJhZGl1cykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChyYWRpdXMgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHsgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfSA9IGZvcm1hdEFuZ2xlT2ZTZWN0b3Ioc2VjdG9yKTtcbiAgbGV0IGZvcm1hdEFuZ2xlID0gYW5nbGU7XG4gIGxldCBpblJhbmdlO1xuXG4gIGlmIChzdGFydEFuZ2xlIDw9IGVuZEFuZ2xlKSB7XG4gICAgd2hpbGUgKGZvcm1hdEFuZ2xlID4gZW5kQW5nbGUpIHtcbiAgICAgIGZvcm1hdEFuZ2xlIC09IDM2MDtcbiAgICB9XG4gICAgd2hpbGUgKGZvcm1hdEFuZ2xlIDwgc3RhcnRBbmdsZSkge1xuICAgICAgZm9ybWF0QW5nbGUgKz0gMzYwO1xuICAgIH1cbiAgICBpblJhbmdlID0gZm9ybWF0QW5nbGUgPj0gc3RhcnRBbmdsZSAmJiBmb3JtYXRBbmdsZSA8PSBlbmRBbmdsZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoZm9ybWF0QW5nbGUgPiBzdGFydEFuZ2xlKSB7XG4gICAgICBmb3JtYXRBbmdsZSAtPSAzNjA7XG4gICAgfVxuICAgIHdoaWxlIChmb3JtYXRBbmdsZSA8IGVuZEFuZ2xlKSB7XG4gICAgICBmb3JtYXRBbmdsZSArPSAzNjA7XG4gICAgfVxuICAgIGluUmFuZ2UgPSBmb3JtYXRBbmdsZSA+PSBlbmRBbmdsZSAmJiBmb3JtYXRBbmdsZSA8PSBzdGFydEFuZ2xlO1xuICB9XG5cbiAgaWYgKGluUmFuZ2UpIHtcbiAgICByZXR1cm4geyAuLi5zZWN0b3IsIHJhZGl1cywgYW5nbGU6IHJldmVyc2VGb3JtYXRBbmdsZU9mU2V0b3IoZm9ybWF0QW5nbGUsIHNlY3RvcikgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBSZWFjdEVsZW1lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IExhYmVsLCBDb250ZW50VHlwZSwgUHJvcHMgYXMgTGFiZWxQcm9wcyB9IGZyb20gJy4vTGFiZWwnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgZmluZEFsbEJ5VHlwZSB9IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5pbXBvcnQgeyBnZXRWYWx1ZUJ5RGF0YUtleSB9IGZyb20gJy4uL3V0aWwvQ2hhcnRVdGlscyc7XG5pbXBvcnQgeyBmaWx0ZXJQcm9wcywgRGF0YUtleSwgVmlld0JveCB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5pbnRlcmZhY2UgRGF0YSB7XG4gIHZhbHVlPzogbnVtYmVyIHwgc3RyaW5nIHwgQXJyYXk8bnVtYmVyIHwgc3RyaW5nPjtcbiAgcGF5bG9hZD86IGFueTtcbiAgcGFyZW50Vmlld0JveD86IFZpZXdCb3g7XG59XG5cbmludGVyZmFjZSBMYWJlbExpc3RQcm9wczxUIGV4dGVuZHMgRGF0YT4ge1xuICBpZD86IHN0cmluZztcbiAgZGF0YT86IEFycmF5PFQ+O1xuICB2YWx1ZUFjY2Vzc29yPzogRnVuY3Rpb247XG4gIGNsb2NrV2lzZT86IGJvb2xlYW47XG4gIGRhdGFLZXk/OiBEYXRhS2V5PFQ+O1xuICBjb250ZW50PzogQ29udGVudFR5cGU7XG4gIHRleHRCcmVha0FsbD86IGJvb2xlYW47XG4gIHBvc2l0aW9uPzogTGFiZWxQcm9wc1sncG9zaXRpb24nXTtcbiAgYW5nbGU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzPFQ+ID0gU1ZHUHJvcHM8U1ZHRWxlbWVudD4gJiBMYWJlbExpc3RQcm9wczxUPjtcblxuZXhwb3J0IHR5cGUgSW1wbGljaXRMYWJlbExpc3RUeXBlPFQ+ID1cbiAgfCBib29sZWFuXG4gIHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+XG4gIHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pXG4gIHwgUHJvcHM8VD47XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWVBY2Nlc3NvcjogKGVudHJ5OiBEYXRhKSA9PiAoXy5pc0FycmF5KGVudHJ5LnZhbHVlKSA/IF8ubGFzdChlbnRyeS52YWx1ZSkgOiBlbnRyeS52YWx1ZSksXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTGFiZWxMaXN0PFQgZXh0ZW5kcyBEYXRhPihwcm9wczogUHJvcHM8VD4pIHtcbiAgY29uc3QgeyBkYXRhLCB2YWx1ZUFjY2Vzc29yLCBkYXRhS2V5LCBjbG9ja1dpc2UsIGlkLCB0ZXh0QnJlYWtBbGwsIC4uLm90aGVycyB9ID0gcHJvcHM7XG5cbiAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtbGFiZWwtbGlzdFwiPlxuICAgICAge2RhdGEubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBfLmlzTmlsKGRhdGFLZXkpXG4gICAgICAgICAgPyB2YWx1ZUFjY2Vzc29yKGVudHJ5LCBpbmRleClcbiAgICAgICAgICA6IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5ICYmIGVudHJ5LnBheWxvYWQsIGRhdGFLZXkpO1xuICAgICAgICBjb25zdCBpZFByb3BzID0gXy5pc05pbChpZCkgPyB7fSA6IHsgaWQ6IGAke2lkfS0ke2luZGV4fWAgfTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgey4uLihmaWx0ZXJQcm9wcyhlbnRyeSwgdHJ1ZSkgYXMgYW55KX1cbiAgICAgICAgICAgIHsuLi5vdGhlcnN9XG4gICAgICAgICAgICB7Li4uaWRQcm9wc31cbiAgICAgICAgICAgIHBhcmVudFZpZXdCb3g9e2VudHJ5LnBhcmVudFZpZXdCb3h9XG4gICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICB0ZXh0QnJlYWtBbGw9e3RleHRCcmVha0FsbH1cbiAgICAgICAgICAgIHZpZXdCb3g9e0xhYmVsLnBhcnNlVmlld0JveChfLmlzTmlsKGNsb2NrV2lzZSkgPyBlbnRyeSA6IHsgLi4uZW50cnksIGNsb2NrV2lzZSB9KX1cbiAgICAgICAgICAgIGtleT17YGxhYmVsLSR7aW5kZXh9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgPC9MYXllcj5cbiAgKTtcbn1cblxuTGFiZWxMaXN0LmRpc3BsYXlOYW1lID0gJ0xhYmVsTGlzdCc7XG5cbmZ1bmN0aW9uIHBhcnNlTGFiZWxMaXN0PFQgZXh0ZW5kcyBEYXRhPihsYWJlbDogYW55LCBkYXRhOiBBcnJheTxUPikge1xuICBpZiAoIWxhYmVsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAobGFiZWwgPT09IHRydWUpIHtcbiAgICByZXR1cm4gPExhYmVsTGlzdCBrZXk9XCJsYWJlbExpc3QtaW1wbGljaXRcIiBkYXRhPXtkYXRhfSAvPjtcbiAgfVxuXG4gIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChsYWJlbCkgfHwgXy5pc0Z1bmN0aW9uKGxhYmVsKSkge1xuICAgIHJldHVybiA8TGFiZWxMaXN0IGtleT1cImxhYmVsTGlzdC1pbXBsaWNpdFwiIGRhdGE9e2RhdGF9IGNvbnRlbnQ9e2xhYmVsfSAvPjtcbiAgfVxuXG4gIGlmIChfLmlzT2JqZWN0KGxhYmVsKSkge1xuICAgIHJldHVybiA8TGFiZWxMaXN0IGRhdGE9e2RhdGF9IHsuLi5sYWJlbH0ga2V5PVwibGFiZWxMaXN0LWltcGxpY2l0XCIgLz47XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2FsbEJ5UGFyZW50PFQgZXh0ZW5kcyBEYXRhPihwYXJlbnRQcm9wczogYW55LCBkYXRhOiBBcnJheTxUPiwgY2tlY2tQcm9wc0xhYmVsID0gdHJ1ZSkge1xuICBpZiAoIXBhcmVudFByb3BzIHx8ICghcGFyZW50UHJvcHMuY2hpbGRyZW4gJiYgY2tlY2tQcm9wc0xhYmVsICYmICFwYXJlbnRQcm9wcy5sYWJlbCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwYXJlbnRQcm9wcztcblxuICBjb25zdCBleHBsaWNpdENoaWxyZW4gPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBMYWJlbExpc3QuZGlzcGxheU5hbWUpLm1hcCgoY2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT5cbiAgICBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGRhdGEsXG4gICAgICBrZXk6IGBsYWJlbExpc3QtJHtpbmRleH1gLFxuICAgIH0pLFxuICApO1xuICBpZiAoIWNrZWNrUHJvcHNMYWJlbCkge1xuICAgIHJldHVybiBleHBsaWNpdENoaWxyZW47XG4gIH1cblxuICBjb25zdCBpbXBsaWNpdExhYmVsTGlzdCA9IHBhcnNlTGFiZWxMaXN0KHBhcmVudFByb3BzLmxhYmVsLCBkYXRhKTtcblxuICByZXR1cm4gW2ltcGxpY2l0TGFiZWxMaXN0LCAuLi5leHBsaWNpdENoaWxyZW5dO1xufVxuXG5MYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50ID0gcmVuZGVyQ2FsbEJ5UGFyZW50O1xuTGFiZWxMaXN0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBTdXJmYWNlIH0gZnJvbSAnLi4vY29udGFpbmVyL1N1cmZhY2UnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4uL2NvbXBvbmVudC9Ub29sdGlwJztcbmltcG9ydCB7IExlZ2VuZCB9IGZyb20gJy4uL2NvbXBvbmVudC9MZWdlbmQnO1xuaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9zaGFwZS9DdXJ2ZSc7XG5pbXBvcnQgeyBDcm9zcyB9IGZyb20gJy4uL3NoYXBlL0Nyb3NzJztcbmltcG9ydCB7IFNlY3RvciB9IGZyb20gJy4uL3NoYXBlL1NlY3Rvcic7XG5pbXBvcnQgeyBEb3QgfSBmcm9tICcuLi9zaGFwZS9Eb3QnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vc2hhcGUvUmVjdGFuZ2xlJztcblxuaW1wb3J0IHtcbiAgZmluZEFsbEJ5VHlwZSxcbiAgZmluZENoaWxkQnlUeXBlLFxuICBnZXREaXNwbGF5TmFtZSxcbiAgcGFyc2VDaGlsZEluZGV4LFxuICB2YWxpZGF0ZVdpZHRoSGVpZ2h0LFxuICBpc0NoaWxkcmVuRXF1YWwsXG4gIHJlbmRlckJ5T3JkZXIsXG4gIGdldFJlYWN0RXZlbnRCeVR5cGUsXG59IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5cbmltcG9ydCB7IENhcnRlc2lhbkF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vQ2FydGVzaWFuQXhpcyc7XG5pbXBvcnQgeyBCcnVzaCB9IGZyb20gJy4uL2NhcnRlc2lhbi9CcnVzaCc7XG5pbXBvcnQgeyBnZXRPZmZzZXQsIGNhbGN1bGF0ZUNoYXJ0Q29vcmRpbmF0ZSB9IGZyb20gJy4uL3V0aWwvRE9NVXRpbHMnO1xuaW1wb3J0IHsgZ2V0QW55RWxlbWVudE9mT2JqZWN0LCBoYXNEdXBsaWNhdGUsIHVuaXF1ZUlkLCBpc051bWJlciwgZmluZEVudHJ5SW5BcnJheSB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7XG4gIGNhbGN1bGF0ZUFjdGl2ZVRpY2tJbmRleCxcbiAgZ2V0TWFpbkNvbG9yT2ZHcmFwaGljSXRlbSxcbiAgZ2V0QmFyU2l6ZUxpc3QsXG4gIGdldEJhclBvc2l0aW9uLFxuICBhcHBlbmRPZmZzZXRPZkxlZ2VuZCxcbiAgZ2V0TGVnZW5kUHJvcHMsXG4gIGNvbWJpbmVFdmVudEhhbmRsZXJzLFxuICBnZXRUaWNrc09mQXhpcyxcbiAgZ2V0Q29vcmRpbmF0ZXNPZkdyaWQsXG4gIGdldFN0YWNrZWREYXRhT2ZJdGVtLFxuICBwYXJzZUVycm9yQmFyc09mQXhpcyxcbiAgZ2V0QmFuZFNpemVPZkF4aXMsXG4gIGdldFN0YWNrR3JvdXBzQnlBeGlzSWQsXG4gIGdldFZhbHVlQnlEYXRhS2V5LFxuICBpc0NhdGVnb3JpY2FsQXhpcyxcbiAgZ2V0RG9tYWluT2ZJdGVtc1dpdGhTYW1lQXhpcyxcbiAgZ2V0RG9tYWluT2ZTdGFja0dyb3VwcyxcbiAgZ2V0RG9tYWluT2ZEYXRhQnlLZXksXG4gIHBhcnNlU3BlY2lmaWVkRG9tYWluLFxuICBwYXJzZURvbWFpbk9mQ2F0ZWdvcnlBeGlzLFxufSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgZGV0ZWN0UmVmZXJlbmNlRWxlbWVudHNEb21haW4gfSBmcm9tICcuLi91dGlsL0RldGVjdFJlZmVyZW5jZUVsZW1lbnRzRG9tYWluJztcbmltcG9ydCB7IGluUmFuZ2VPZlNlY3RvciwgcG9sYXJUb0NhcnRlc2lhbiB9IGZyb20gJy4uL3V0aWwvUG9sYXJVdGlscyc7XG5pbXBvcnQgeyBzaGFsbG93RXF1YWwgfSBmcm9tICcuLi91dGlsL1NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgeyBldmVudENlbnRlciwgU1lOQ19FVkVOVCB9IGZyb20gJy4uL3V0aWwvRXZlbnRzJztcbmltcG9ydCB7XG4gIExheW91dFR5cGUsXG4gIFN0YWNrT2Zmc2V0VHlwZSxcbiAgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMsXG4gIE1hcmdpbixcbiAgQ2FydGVzaWFuVmlld0JveCxcbiAgQ2hhcnRPZmZzZXQsXG4gIEJhc2VBeGlzUHJvcHMsXG4gIENvb3JkaW5hdGUsXG4gIENoYXJ0Q29vcmRpbmF0ZSxcbiAgVGlja0l0ZW0sXG4gIGZpbHRlclByb3BzLFxuICBhZGFwdEV2ZW50SGFuZGxlcnMsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5jb25zdCBPUklFTlRfTUFQID0ge1xuICB4QXhpczogWydib3R0b20nLCAndG9wJ10sXG4gIHlBeGlzOiBbJ2xlZnQnLCAncmlnaHQnXSxcbn07XG5cbmNvbnN0IG9yaWdpbkNvb3JkaW5hdGU6IENvb3JkaW5hdGUgPSB7IHg6IDAsIHk6IDAgfTtcblxuLy8gdXNlIGxlZ2FjeSBpc0Zpbml0ZSBvbmx5IGlmIHRoZXJlIGlzIGEgcHJvYmxlbSAoYWthIElFKVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuY29uc3QgaXNGaW5pdCA9IE51bWJlci5pc0Zpbml0ZSA/IE51bWJlci5pc0Zpbml0ZSA6IGlzRmluaXRlO1xuXG5jb25zdCBjYWxjdWxhdGVUb29sdGlwUG9zID0gKHJhbmdlT2JqOiBhbnksIGxheW91dDogTGF5b3V0VHlwZSk6IGFueSA9PiB7XG4gIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgIHJldHVybiByYW5nZU9iai54O1xuICB9XG4gIGlmIChsYXlvdXQgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICByZXR1cm4gcmFuZ2VPYmoueTtcbiAgfVxuICBpZiAobGF5b3V0ID09PSAnY2VudHJpYycpIHtcbiAgICByZXR1cm4gcmFuZ2VPYmouYW5nbGU7XG4gIH1cblxuICByZXR1cm4gcmFuZ2VPYmoucmFkaXVzO1xufTtcblxuY29uc3QgZ2V0QWN0aXZlQ29vcmRpbmF0ZSA9IChcbiAgbGF5b3V0OiBMYXlvdXRUeXBlLFxuICB0b29sdGlwVGlja3M6IFRpY2tJdGVtW10sXG4gIGFjdGl2ZUluZGV4OiBhbnksXG4gIHJhbmdlT2JqOiBhbnksXG4pOiBDaGFydENvb3JkaW5hdGUgPT4ge1xuICBjb25zdCBlbnRyeSA9IHRvb2x0aXBUaWNrcy5maW5kKCh0aWNrOiBhbnkpID0+IHRpY2sgJiYgdGljay5pbmRleCA9PT0gYWN0aXZlSW5kZXgpO1xuXG4gIGlmIChlbnRyeSkge1xuICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIHsgeDogZW50cnkuY29vcmRpbmF0ZSwgeTogcmFuZ2VPYmoueSB9O1xuICAgIH1cbiAgICBpZiAobGF5b3V0ID09PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4geyB4OiByYW5nZU9iai54LCB5OiBlbnRyeS5jb29yZGluYXRlIH07XG4gICAgfVxuICAgIGlmIChsYXlvdXQgPT09ICdjZW50cmljJykge1xuICAgICAgY29uc3QgYW5nbGUgPSBlbnRyeS5jb29yZGluYXRlO1xuICAgICAgY29uc3QgeyByYWRpdXMgfSA9IHJhbmdlT2JqO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5yYW5nZU9iaixcbiAgICAgICAgLi4ucG9sYXJUb0NhcnRlc2lhbihyYW5nZU9iai5jeCwgcmFuZ2VPYmouY3ksIHJhZGl1cywgYW5nbGUpLFxuICAgICAgICBhbmdsZSxcbiAgICAgICAgcmFkaXVzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCByYWRpdXMgPSBlbnRyeS5jb29yZGluYXRlO1xuICAgIGNvbnN0IHsgYW5nbGUgfSA9IHJhbmdlT2JqO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJhbmdlT2JqLFxuICAgICAgLi4ucG9sYXJUb0NhcnRlc2lhbihyYW5nZU9iai5jeCwgcmFuZ2VPYmouY3ksIHJhZGl1cywgYW5nbGUpLFxuICAgICAgYW5nbGUsXG4gICAgICByYWRpdXMsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBvcmlnaW5Db29yZGluYXRlO1xufTtcblxuY29uc3QgZ2V0RGlzcGxheWVkRGF0YSA9IChkYXRhOiBhbnlbXSwgeyBncmFwaGljYWxJdGVtcywgZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCB9OiBhbnksIGl0ZW0/OiBhbnkpOiBhbnlbXSA9PiB7XG4gIGNvbnN0IGl0ZW1zRGF0YSA9IChncmFwaGljYWxJdGVtcyB8fCBbXSkucmVkdWNlKChyZXN1bHQ6IGFueSwgY2hpbGQ6IGFueSkgPT4ge1xuICAgIGNvbnN0IGl0ZW1EYXRhID0gY2hpbGQucHJvcHMuZGF0YTtcblxuICAgIGlmIChpdGVtRGF0YSAmJiBpdGVtRGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbLi4ucmVzdWx0LCAuLi5pdGVtRGF0YV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgW10pO1xuICBpZiAoaXRlbXNEYXRhICYmIGl0ZW1zRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGl0ZW1zRGF0YTtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ucHJvcHMgJiYgaXRlbS5wcm9wcy5kYXRhICYmIGl0ZW0ucHJvcHMuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGl0ZW0ucHJvcHMuZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoICYmIGlzTnVtYmVyKGRhdGFTdGFydEluZGV4KSAmJiBpc051bWJlcihkYXRhRW5kSW5kZXgpKSB7XG4gICAgcmV0dXJuIGRhdGEuc2xpY2UoZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCArIDEpO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNvbnRlbnQgdG8gYmUgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwXG4gKiBAcGFyYW0gIHtPYmplY3R9IHN0YXRlICAgICAgICAgIEN1cnJlbnQgc3RhdGVcbiAqIEBwYXJhbSAge0FycmF5fSAgY2hhcnREYXRhICAgICAgVGhlIGRhdGEgZGVmaW5lZCBpbiBjaGFydFxuICogQHBhcmFtICB7TnVtYmVyfSBhY3RpdmVJbmRleCAgICBBY3RpdmUgaW5kZXggb2YgZGF0YVxuICogQHBhcmFtICB7U3RyaW5nfSBhY3RpdmVMYWJlbCAgICBBY3RpdmUgbGFiZWwgb2YgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgICAgICBUaGUgY29udGVudCBvZiB0b29sdGlwXG4gKi9cbmNvbnN0IGdldFRvb2x0aXBDb250ZW50ID0gKFxuICBzdGF0ZTogQ2F0ZWdvcmljYWxDaGFydFN0YXRlLFxuICBjaGFydERhdGE6IGFueVtdLFxuICBhY3RpdmVJbmRleDogbnVtYmVyLFxuICBhY3RpdmVMYWJlbD86IHN0cmluZyxcbik6IGFueVtdID0+IHtcbiAgY29uc3QgeyBncmFwaGljYWxJdGVtcywgdG9vbHRpcEF4aXMgfSA9IHN0YXRlO1xuICBjb25zdCBkaXNwbGF5ZWREYXRhID0gZ2V0RGlzcGxheWVkRGF0YShjaGFydERhdGEsIHN0YXRlKTtcblxuICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8ICFncmFwaGljYWxJdGVtcyB8fCAhZ3JhcGhpY2FsSXRlbXMubGVuZ3RoIHx8IGFjdGl2ZUluZGV4ID49IGRpc3BsYXllZERhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gZ2V0IGRhdGEgYnkgYWN0aXZlSW5kZXggd2hlbiB0aGUgYXhpcyBkb24ndCBhbGxvdyBkdXBsaWNhdGVkIGNhdGVnb3J5XG4gIHJldHVybiBncmFwaGljYWxJdGVtcy5yZWR1Y2UoKHJlc3VsdDogYW55LCBjaGlsZDogYW55KSA9PiB7XG4gICAgY29uc3QgeyBoaWRlIH0gPSBjaGlsZC5wcm9wcztcblxuICAgIGlmIChoaWRlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YUtleSwgbmFtZSwgdW5pdCwgZm9ybWF0dGVyLCBkYXRhLCB0b29sdGlwVHlwZSB9ID0gY2hpbGQucHJvcHM7XG4gICAgbGV0IHBheWxvYWQ7XG5cbiAgICBpZiAodG9vbHRpcEF4aXMuZGF0YUtleSAmJiAhdG9vbHRpcEF4aXMuYWxsb3dEdXBsaWNhdGVkQ2F0ZWdvcnkpIHtcbiAgICAgIC8vIGdyYXBoaWMgY2hpbGQgaGFzIGRhdGEgcHJvcHNcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBkYXRhID09PSB1bmRlZmluZWQgPyBkaXNwbGF5ZWREYXRhIDogZGF0YTtcbiAgICAgIHBheWxvYWQgPSBmaW5kRW50cnlJbkFycmF5KGVudHJpZXMsIHRvb2x0aXBBeGlzLmRhdGFLZXksIGFjdGl2ZUxhYmVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF5bG9hZCA9IChkYXRhICYmIGRhdGFbYWN0aXZlSW5kZXhdKSB8fCBkaXNwbGF5ZWREYXRhW2FjdGl2ZUluZGV4XTtcbiAgICB9XG5cbiAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIHtcbiAgICAgICAgLi4uZmlsdGVyUHJvcHMoY2hpbGQpLFxuICAgICAgICBkYXRhS2V5LFxuICAgICAgICB1bml0LFxuICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgIG5hbWU6IG5hbWUgfHwgZGF0YUtleSxcbiAgICAgICAgY29sb3I6IGdldE1haW5Db2xvck9mR3JhcGhpY0l0ZW0oY2hpbGQpLFxuICAgICAgICB2YWx1ZTogZ2V0VmFsdWVCeURhdGFLZXkocGF5bG9hZCwgZGF0YUtleSksXG4gICAgICAgIHR5cGU6IHRvb2x0aXBUeXBlLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSxcbiAgICBdO1xuICB9LCBbXSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdG9vbHRpcCBkYXRhIGJhc2VkIG9uIGEgbW91c2UgcG9zaXRpb24gKGFzIGEgcGFyYW1ldGVyIG9yIGluIHN0YXRlKVxuICogQHBhcmFtICB7T2JqZWN0fSBzdGF0ZSAgICAgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtICB7QXJyYXl9ICBjaGFydERhdGEgdGhlIGRhdGEgZGVmaW5lZCBpbiBjaGFydFxuICogQHBhcmFtICB7U3RyaW5nfSBsYXlvdXQgICAgIFRoZSBsYXlvdXQgdHlwZSBvZiBjaGFydFxuICogQHBhcmFtICB7T2JqZWN0fSByYW5nZU9iaiAgeyB4LCB5IH0gY29vcmRpbmF0ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIFRvb2x0aXAgZGF0YSBkYXRhXG4gKi9cbmNvbnN0IGdldFRvb2x0aXBEYXRhID0gKHN0YXRlOiBDYXRlZ29yaWNhbENoYXJ0U3RhdGUsIGNoYXJ0RGF0YTogYW55W10sIGxheW91dDogTGF5b3V0VHlwZSwgcmFuZ2VPYmo/OiBhbnkpID0+IHtcbiAgY29uc3QgcmFuZ2VEYXRhID0gcmFuZ2VPYmogfHwgeyB4OiBzdGF0ZS5jaGFydFgsIHk6IHN0YXRlLmNoYXJ0WSB9O1xuXG4gIGNvbnN0IHBvcyA9IGNhbGN1bGF0ZVRvb2x0aXBQb3MocmFuZ2VEYXRhLCBsYXlvdXQpO1xuICBjb25zdCB7IG9yZGVyZWRUb29sdGlwVGlja3M6IHRpY2tzLCB0b29sdGlwQXhpczogYXhpcywgdG9vbHRpcFRpY2tzIH0gPSBzdGF0ZTtcblxuICBjb25zdCBhY3RpdmVJbmRleCA9IGNhbGN1bGF0ZUFjdGl2ZVRpY2tJbmRleChwb3MsIHRpY2tzLCB0b29sdGlwVGlja3MsIGF4aXMpO1xuXG4gIGlmIChhY3RpdmVJbmRleCA+PSAwICYmIHRvb2x0aXBUaWNrcykge1xuICAgIGNvbnN0IGFjdGl2ZUxhYmVsID0gdG9vbHRpcFRpY2tzW2FjdGl2ZUluZGV4XSAmJiB0b29sdGlwVGlja3NbYWN0aXZlSW5kZXhdLnZhbHVlO1xuICAgIGNvbnN0IGFjdGl2ZVBheWxvYWQgPSBnZXRUb29sdGlwQ29udGVudChzdGF0ZSwgY2hhcnREYXRhLCBhY3RpdmVJbmRleCwgYWN0aXZlTGFiZWwpO1xuICAgIGNvbnN0IGFjdGl2ZUNvb3JkaW5hdGUgPSBnZXRBY3RpdmVDb29yZGluYXRlKGxheW91dCwgdGlja3MsIGFjdGl2ZUluZGV4LCByYW5nZURhdGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVRvb2x0aXBJbmRleDogYWN0aXZlSW5kZXgsXG4gICAgICBhY3RpdmVMYWJlbCxcbiAgICAgIGFjdGl2ZVBheWxvYWQsXG4gICAgICBhY3RpdmVDb29yZGluYXRlLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjb25maWd1cmF0aW9uIG9mIGF4aXMgYnkgdGhlIG9wdGlvbnMgb2YgYXhpcyBpbnN0YW5jZVxuICogQHBhcmFtICB7T2JqZWN0fSBwcm9wcyAgICAgICAgIExhdGVzdCBwcm9wc1xuICogQHBhcmFtIHtBcnJheX0gIGF4ZXMgICAgICAgICAgIFRoZSBpbnN0YW5jZSBvZiBheGVzXG4gKiBAcGFyYW0gIHtBcnJheX0gZ3JhcGhpY2FsSXRlbXMgVGhlIGluc3RhbmNlcyBvZiBpdGVtXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGF4aXNUeXBlICAgICAgVGhlIHR5cGUgb2YgYXhpcywgeEF4aXMgLSB4LWF4aXMsIHlBeGlzIC0geS1heGlzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGF4aXNJZEtleSAgICAgVGhlIHVuaXF1ZSBpZCBvZiBhbiBheGlzXG4gKiBAcGFyYW0gIHtPYmplY3R9IHN0YWNrR3JvdXBzICAgVGhlIGl0ZW1zIGdyb3VwZWQgYnkgYXhpc0lkIGFuZCBzdGFja0lkXG4gKiBAcGFyYW0ge051bWJlcn0gZGF0YVN0YXJ0SW5kZXggVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBkYXRhIHNlcmllcyB3aGVuIGEgYnJ1c2ggaXMgYXBwbGllZFxuICogQHBhcmFtIHtOdW1iZXJ9IGRhdGFFbmRJbmRleCAgIFRoZSBlbmQgaW5kZXggb2YgdGhlIGRhdGEgc2VyaWVzIHdoZW4gYSBicnVzaCBpcyBhcHBsaWVkXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgQ29uZmlndXJhdGlvblxuICovXG5jb25zdCBnZXRBeGlzTWFwQnlBeGVzID0gKFxuICBwcm9wczogQ2F0ZWdvcmljYWxDaGFydFByb3BzLFxuICB7IGF4ZXMsIGdyYXBoaWNhbEl0ZW1zLCBheGlzVHlwZSwgYXhpc0lkS2V5LCBzdGFja0dyb3VwcywgZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCB9OiBhbnksXG4pID0+IHtcbiAgY29uc3QgeyBsYXlvdXQsIGNoaWxkcmVuLCBzdGFja09mZnNldCB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzQ2F0ZWdvcmljYWwgPSBpc0NhdGVnb3JpY2FsQXhpcyhsYXlvdXQsIGF4aXNUeXBlKTtcblxuICAvLyBFbGltaW5hdGUgZHVwbGljYXRlZCBheGVzXG4gIGNvbnN0IGF4aXNNYXAgPSBheGVzLnJlZHVjZSgocmVzdWx0OiBhbnksIGNoaWxkOiBhbnkpID0+IHtcbiAgICBjb25zdCB7IHR5cGUsIGRhdGFLZXksIGFsbG93RGF0YU92ZXJmbG93LCBhbGxvd0R1cGxpY2F0ZWRDYXRlZ29yeSwgc2NhbGUsIHRpY2tzIH0gPSBjaGlsZC5wcm9wcztcbiAgICBjb25zdCBheGlzSWQgPSBjaGlsZC5wcm9wc1theGlzSWRLZXldO1xuICAgIGNvbnN0IGRpc3BsYXllZERhdGEgPSBnZXREaXNwbGF5ZWREYXRhKHByb3BzLmRhdGEsIHtcbiAgICAgIGdyYXBoaWNhbEl0ZW1zOiBncmFwaGljYWxJdGVtcy5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS5wcm9wc1theGlzSWRLZXldID09PSBheGlzSWQpLFxuICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICBkYXRhRW5kSW5kZXgsXG4gICAgfSk7XG4gICAgY29uc3QgbGVuID0gZGlzcGxheWVkRGF0YS5sZW5ndGg7XG5cbiAgICBpZiAoIXJlc3VsdFtheGlzSWRdKSB7XG4gICAgICBsZXQgZG9tYWluLCBkdXBsaWNhdGVEb21haW4sIGNhdGVnb3JpY2FsRG9tYWluO1xuXG4gICAgICBpZiAoZGF0YUtleSkge1xuICAgICAgICAvLyBoYXMgZGF0YUtleSBpbiA8QXhpcyAvPlxuICAgICAgICBkb21haW4gPSBnZXREb21haW5PZkRhdGFCeUtleShkaXNwbGF5ZWREYXRhLCBkYXRhS2V5LCB0eXBlKTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NhdGVnb3J5JyAmJiBpc0NhdGVnb3JpY2FsKSB7XG4gICAgICAgICAgLy8gdGhlIGZpZWxkIHR5cGUgaXMgY2F0ZWdvcnkgZGF0YSBhbmQgdGhpcyBheGlzIGlzIGNhdHJnb3JpY2FsIGF4aXNcbiAgICAgICAgICBjb25zdCBkdXBsaWNhdGUgPSBoYXNEdXBsaWNhdGUoZG9tYWluKTtcblxuICAgICAgICAgIGlmIChhbGxvd0R1cGxpY2F0ZWRDYXRlZ29yeSAmJiBkdXBsaWNhdGUpIHtcbiAgICAgICAgICAgIGR1cGxpY2F0ZURvbWFpbiA9IGRvbWFpbjtcbiAgICAgICAgICAgIC8vIFdoZW4gY2F0ZWdvcnkgYXhpcyBoYXMgZHVwbGljYXRlZCB0ZXh0LCBzZXJpYWwgbnVtYmVycyBhcmUgdXNlZCB0byBnZW5lcmF0ZSBzY2FsZVxuICAgICAgICAgICAgZG9tYWluID0gXy5yYW5nZSgwLCBsZW4pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWFsbG93RHVwbGljYXRlZENhdGVnb3J5KSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZHVwbGljYXRlZCBjYXRlZ29yeVxuICAgICAgICAgICAgZG9tYWluID0gcGFyc2VEb21haW5PZkNhdGVnb3J5QXhpcyhjaGlsZC5wcm9wcy5kb21haW4sIGRvbWFpbiwgY2hpbGQpLnJlZHVjZShcbiAgICAgICAgICAgICAgKGZpbmFsRG9tYWluOiBhbnksIGVudHJ5OiBhbnkpID0+XG4gICAgICAgICAgICAgICAgZmluYWxEb21haW4uaW5kZXhPZihlbnRyeSkgPj0gMCA/IGZpbmFsRG9tYWluIDogWy4uLmZpbmFsRG9tYWluLCBlbnRyeV0sXG4gICAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NhdGVnb3J5Jykge1xuICAgICAgICAgIC8vIHRoZSBmaWVsZCB0eXBlIGlzIGNhdGVnb3J5IGRhdGEgYW5kIHRoaXMgYXhpcyBpcyBudW1lcmljYWwgYXhpc1xuICAgICAgICAgIGlmICghYWxsb3dEdXBsaWNhdGVkQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGRvbWFpbiA9IHBhcnNlRG9tYWluT2ZDYXRlZ29yeUF4aXMoY2hpbGQucHJvcHMuZG9tYWluLCBkb21haW4sIGNoaWxkKS5yZWR1Y2UoXG4gICAgICAgICAgICAgIChmaW5hbERvbWFpbjogYW55LCBlbnRyeTogYW55KSA9PlxuICAgICAgICAgICAgICAgIGZpbmFsRG9tYWluLmluZGV4T2YoZW50cnkpID49IDAgfHwgZW50cnkgPT09ICcnIHx8IF8uaXNOaWwoZW50cnkpXG4gICAgICAgICAgICAgICAgICA/IGZpbmFsRG9tYWluXG4gICAgICAgICAgICAgICAgICA6IFsuLi5maW5hbERvbWFpbiwgZW50cnldLFxuICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVsaW1pbmF0ZSB1bmRlZmluZWQgb3IgbnVsbCBvciBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgIGRvbWFpbiA9IGRvbWFpbi5maWx0ZXIoKGVudHJ5OiBhbnkpID0+IGVudHJ5ICE9PSAnJyAmJiAhXy5pc05pbChlbnRyeSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIHRoZSBmaWVsZCB0eXBlIGlzIG51bWVyaWNhbFxuICAgICAgICAgIGNvbnN0IGVycm9yQmFyc0RvbWFpbiA9IHBhcnNlRXJyb3JCYXJzT2ZBeGlzKFxuICAgICAgICAgICAgZGlzcGxheWVkRGF0YSxcbiAgICAgICAgICAgIGdyYXBoaWNhbEl0ZW1zLmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtLnByb3BzW2F4aXNJZEtleV0gPT09IGF4aXNJZCAmJiAhaXRlbS5wcm9wcy5oaWRlKSxcbiAgICAgICAgICAgIGRhdGFLZXksXG4gICAgICAgICAgICBheGlzVHlwZSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGVycm9yQmFyc0RvbWFpbikge1xuICAgICAgICAgICAgZG9tYWluID0gZXJyb3JCYXJzRG9tYWluO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0NhdGVnb3JpY2FsICYmICh0eXBlID09PSAnbnVtYmVyJyB8fCBzY2FsZSAhPT0gJ2F1dG8nKSkge1xuICAgICAgICAgIGNhdGVnb3JpY2FsRG9tYWluID0gZ2V0RG9tYWluT2ZEYXRhQnlLZXkoZGlzcGxheWVkRGF0YSwgZGF0YUtleSwgJ2NhdGVnb3J5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDYXRlZ29yaWNhbCkge1xuICAgICAgICAvLyB0aGUgYXhpcyBpcyBhIGNhdGVnb3JpY2FsIGF4aXNcbiAgICAgICAgZG9tYWluID0gXy5yYW5nZSgwLCBsZW4pO1xuICAgICAgfSBlbHNlIGlmIChzdGFja0dyb3VwcyAmJiBzdGFja0dyb3Vwc1theGlzSWRdICYmIHN0YWNrR3JvdXBzW2F4aXNJZF0uaGFzU3RhY2sgJiYgdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gd2hlbiBzdGFja09mZnNldCBpcyAnZXhwYW5kJywgdGhlIGRvbWFpbiBtYXkgYmUgY2FsY3VsYXRlZCBhcyBbMCwgMS4wMDAwMDAwMDAwMDJdXG4gICAgICAgIGRvbWFpbiA9XG4gICAgICAgICAgc3RhY2tPZmZzZXQgPT09ICdleHBhbmQnXG4gICAgICAgICAgICA/IFswLCAxXVxuICAgICAgICAgICAgOiBnZXREb21haW5PZlN0YWNrR3JvdXBzKHN0YWNrR3JvdXBzW2F4aXNJZF0uc3RhY2tHcm91cHMsIGRhdGFTdGFydEluZGV4LCBkYXRhRW5kSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tYWluID0gZ2V0RG9tYWluT2ZJdGVtc1dpdGhTYW1lQXhpcyhcbiAgICAgICAgICBkaXNwbGF5ZWREYXRhLFxuICAgICAgICAgIGdyYXBoaWNhbEl0ZW1zLmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtLnByb3BzW2F4aXNJZEtleV0gPT09IGF4aXNJZCAmJiAhaXRlbS5wcm9wcy5oaWRlKSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBUbyBkZXRlY3Qgd2V0aGVyIHRoZXJlIGlzIGFueSByZWZlcmVuY2UgbGluZXMgd2hvc2UgcHJvcHMgYWx3YXlzU2hvdyBpcyB0cnVlXG4gICAgICAgIGRvbWFpbiA9IGRldGVjdFJlZmVyZW5jZUVsZW1lbnRzRG9tYWluKGNoaWxkcmVuLCBkb21haW4sIGF4aXNJZCwgYXhpc1R5cGUsIHRpY2tzKTtcblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMuZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluID0gcGFyc2VTcGVjaWZpZWREb21haW4oY2hpbGQucHJvcHMuZG9tYWluLCBkb21haW4sIGFsbG93RGF0YU92ZXJmbG93KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY2F0ZWdvcnknICYmIGNoaWxkLnByb3BzLmRvbWFpbikge1xuICAgICAgICBjb25zdCBheGlzRG9tYWluID0gY2hpbGQucHJvcHMuZG9tYWluO1xuICAgICAgICBjb25zdCBpc0RvbWFpblZhbGlkYXRlID0gZG9tYWluLmV2ZXJ5KChlbnRyeTogc3RyaW5nIHwgbnVtYmVyKSA9PiBheGlzRG9tYWluLmluZGV4T2YoZW50cnkpID49IDApO1xuXG4gICAgICAgIGlmIChpc0RvbWFpblZhbGlkYXRlKSB7XG4gICAgICAgICAgZG9tYWluID0gYXhpc0RvbWFpbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgIFtheGlzSWRdOiB7XG4gICAgICAgICAgLi4uY2hpbGQucHJvcHMsXG4gICAgICAgICAgYXhpc1R5cGUsXG4gICAgICAgICAgZG9tYWluLFxuICAgICAgICAgIGNhdGVnb3JpY2FsRG9tYWluLFxuICAgICAgICAgIGR1cGxpY2F0ZURvbWFpbixcbiAgICAgICAgICBvcmlnaW5hbERvbWFpbjogY2hpbGQucHJvcHMuZG9tYWluLFxuICAgICAgICAgIGlzQ2F0ZWdvcmljYWwsXG4gICAgICAgICAgbGF5b3V0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG4gIHJldHVybiBheGlzTWFwO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYXhpcyBieSB0aGUgb3B0aW9ucyBvZiBpdGVtLFxuICogdGhpcyBraW5kIG9mIGF4aXMgZG9lcyBub3QgZGlzcGxheSBpbiBjaGFydFxuICogQHBhcmFtICB7T2JqZWN0fSBwcm9wcyAgICAgICAgIExhdGVzdCBwcm9wc1xuICogQHBhcmFtICB7QXJyYXl9IGdyYXBoaWNhbEl0ZW1zIFRoZSBpbnN0YW5jZXMgb2YgaXRlbVxuICogQHBhcmFtICB7UmVhY3RFbGVtZW50fSBBeGlzICAgIEF4aXMgQ29tcG9uZW50XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGF4aXNUeXBlICAgICAgVGhlIHR5cGUgb2YgYXhpcywgeEF4aXMgLSB4LWF4aXMsIHlBeGlzIC0geS1heGlzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGF4aXNJZEtleSAgICAgVGhlIHVuaXF1ZSBpZCBvZiBhbiBheGlzXG4gKiBAcGFyYW0gIHtPYmplY3R9IHN0YWNrR3JvdXBzICAgVGhlIGl0ZW1zIGdyb3VwZWQgYnkgYXhpc0lkIGFuZCBzdGFja0lkXG4gKiBAcGFyYW0ge051bWJlcn0gZGF0YVN0YXJ0SW5kZXggVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBkYXRhIHNlcmllcyB3aGVuIGEgYnJ1c2ggaXMgYXBwbGllZFxuICogQHBhcmFtIHtOdW1iZXJ9IGRhdGFFbmRJbmRleCAgIFRoZSBlbmQgaW5kZXggb2YgdGhlIGRhdGEgc2VyaWVzIHdoZW4gYSBicnVzaCBpcyBhcHBsaWVkXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgQ29uZmlndXJhdGlvblxuICovXG5jb25zdCBnZXRBeGlzTWFwQnlJdGVtcyA9IChcbiAgcHJvcHM6IENhdGVnb3JpY2FsQ2hhcnRQcm9wcyxcbiAgeyBncmFwaGljYWxJdGVtcywgQXhpcywgYXhpc1R5cGUsIGF4aXNJZEtleSwgc3RhY2tHcm91cHMsIGRhdGFTdGFydEluZGV4LCBkYXRhRW5kSW5kZXggfTogYW55LFxuKSA9PiB7XG4gIGNvbnN0IHsgbGF5b3V0LCBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IGRpc3BsYXllZERhdGEgPSBnZXREaXNwbGF5ZWREYXRhKHByb3BzLmRhdGEsIHtcbiAgICBncmFwaGljYWxJdGVtcyxcbiAgICBkYXRhU3RhcnRJbmRleCxcbiAgICBkYXRhRW5kSW5kZXgsXG4gIH0pO1xuICBjb25zdCBsZW4gPSBkaXNwbGF5ZWREYXRhLmxlbmd0aDtcbiAgY29uc3QgaXNDYXRlZ29yaWNhbCA9IGlzQ2F0ZWdvcmljYWxBeGlzKGxheW91dCwgYXhpc1R5cGUpO1xuICBsZXQgaW5kZXggPSAtMTtcblxuICAvLyBUaGUgZGVmYXVsdCB0eXBlIG9mIHgtYXhpcyBpcyBjYXRlZ29yeSBheGlzLFxuICAvLyBUaGUgZGVmYXVsdCBjb250ZW50cyBvZiB4LWF4aXMgaXMgdGhlIHNlcmlhbCBudW1iZXJzIG9mIGRhdGFcbiAgLy8gVGhlIGRlZmF1bHQgdHlwZSBvZiB5LWF4aXMgaXMgbnVtYmVyIGF4aXNcbiAgLy8gVGhlIGRlZmF1bHQgY29udGVudHMgb2YgeS1heGlzIGlzIHRoZSBkb21haW4gb2YgZGF0YVxuICBjb25zdCBheGlzTWFwID0gZ3JhcGhpY2FsSXRlbXMucmVkdWNlKChyZXN1bHQ6IGFueSwgY2hpbGQ6IGFueSkgPT4ge1xuICAgIGNvbnN0IGF4aXNJZCA9IGNoaWxkLnByb3BzW2F4aXNJZEtleV07XG5cbiAgICBpZiAoIXJlc3VsdFtheGlzSWRdKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgbGV0IGRvbWFpbjtcblxuICAgICAgaWYgKGlzQ2F0ZWdvcmljYWwpIHtcbiAgICAgICAgZG9tYWluID0gXy5yYW5nZSgwLCBsZW4pO1xuICAgICAgfSBlbHNlIGlmIChzdGFja0dyb3VwcyAmJiBzdGFja0dyb3Vwc1theGlzSWRdICYmIHN0YWNrR3JvdXBzW2F4aXNJZF0uaGFzU3RhY2spIHtcbiAgICAgICAgZG9tYWluID0gZ2V0RG9tYWluT2ZTdGFja0dyb3VwcyhzdGFja0dyb3Vwc1theGlzSWRdLnN0YWNrR3JvdXBzLCBkYXRhU3RhcnRJbmRleCwgZGF0YUVuZEluZGV4KTtcbiAgICAgICAgZG9tYWluID0gZGV0ZWN0UmVmZXJlbmNlRWxlbWVudHNEb21haW4oY2hpbGRyZW4sIGRvbWFpbiwgYXhpc0lkLCBheGlzVHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb21haW4gPSBwYXJzZVNwZWNpZmllZERvbWFpbihcbiAgICAgICAgICBBeGlzLmRlZmF1bHRQcm9wcy5kb21haW4sXG4gICAgICAgICAgZ2V0RG9tYWluT2ZJdGVtc1dpdGhTYW1lQXhpcyhcbiAgICAgICAgICAgIGRpc3BsYXllZERhdGEsXG4gICAgICAgICAgICBncmFwaGljYWxJdGVtcy5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS5wcm9wc1theGlzSWRLZXldID09PSBheGlzSWQgJiYgIWl0ZW0ucHJvcHMuaGlkZSksXG4gICAgICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgICApLFxuICAgICAgICAgIEF4aXMuZGVmYXVsdFByb3BzLmFsbG93RGF0YU92ZXJmbG93LFxuICAgICAgICApO1xuICAgICAgICBkb21haW4gPSBkZXRlY3RSZWZlcmVuY2VFbGVtZW50c0RvbWFpbihjaGlsZHJlbiwgZG9tYWluLCBheGlzSWQsIGF4aXNUeXBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICBbYXhpc0lkXToge1xuICAgICAgICAgIGF4aXNUeXBlLFxuICAgICAgICAgIC4uLkF4aXMuZGVmYXVsdFByb3BzLFxuICAgICAgICAgIGhpZGU6IHRydWUsXG4gICAgICAgICAgb3JpZW50YXRpb246IF8uZ2V0KE9SSUVOVF9NQVAsIGAke2F4aXNUeXBlfS4ke2luZGV4ICUgMn1gLCBudWxsKSxcbiAgICAgICAgICBkb21haW4sXG4gICAgICAgICAgb3JpZ2luYWxEb21haW46IEF4aXMuZGVmYXVsdFByb3BzLmRvbWFpbixcbiAgICAgICAgICBpc0NhdGVnb3JpY2FsLFxuICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAvLyBzcGVjaWZ5IHNjYWxlIHdoZW4gbm8gQXhpc1xuICAgICAgICAgIC8vIHNjYWxlOiBpc0NhdGVnb3JpY2FsID8gJ2JhbmQnIDogJ2xpbmVhcicsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gYXhpc01hcDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjb25maWd1cmF0aW9uIG9mIGFsbCB4LWF4aXMgb3IgeS1heGlzXG4gKiBAcGFyYW0gIHtPYmplY3R9IHByb3BzICAgICAgICAgIExhdGVzdCBwcm9wc1xuICogQHBhcmFtICB7U3RyaW5nfSBheGlzVHlwZSAgICAgICBUaGUgdHlwZSBvZiBheGlzXG4gKiBAcGFyYW0gIHtBcnJheX0gIGdyYXBoaWNhbEl0ZW1zIFRoZSBpbnN0YW5jZXMgb2YgaXRlbVxuICogQHBhcmFtICB7T2JqZWN0fSBzdGFja0dyb3VwcyAgICBUaGUgaXRlbXMgZ3JvdXBlZCBieSBheGlzSWQgYW5kIHN0YWNrSWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhU3RhcnRJbmRleCAgVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBkYXRhIHNlcmllcyB3aGVuIGEgYnJ1c2ggaXMgYXBwbGllZFxuICogQHBhcmFtIHtOdW1iZXJ9IGRhdGFFbmRJbmRleCAgICBUaGUgZW5kIGluZGV4IG9mIHRoZSBkYXRhIHNlcmllcyB3aGVuIGEgYnJ1c2ggaXMgYXBwbGllZFxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICBDb25maWd1cmF0aW9uXG4gKi9cbmNvbnN0IGdldEF4aXNNYXAgPSAoXG4gIHByb3BzOiBDYXRlZ29yaWNhbENoYXJ0UHJvcHMsXG4gIHsgYXhpc1R5cGUgPSAneEF4aXMnLCBBeGlzQ29tcCwgZ3JhcGhpY2FsSXRlbXMsIHN0YWNrR3JvdXBzLCBkYXRhU3RhcnRJbmRleCwgZGF0YUVuZEluZGV4IH06IGFueSxcbikgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgY29uc3QgYXhpc0lkS2V5ID0gYCR7YXhpc1R5cGV9SWRgO1xuICAvLyBHZXQgYWxsIHRoZSBpbnN0YW5jZSBvZiBBeGlzXG4gIGNvbnN0IGF4ZXMgPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBBeGlzQ29tcCk7XG5cbiAgbGV0IGF4aXNNYXAgPSB7fTtcblxuICBpZiAoYXhlcyAmJiBheGVzLmxlbmd0aCkge1xuICAgIGF4aXNNYXAgPSBnZXRBeGlzTWFwQnlBeGVzKHByb3BzLCB7XG4gICAgICBheGVzLFxuICAgICAgZ3JhcGhpY2FsSXRlbXMsXG4gICAgICBheGlzVHlwZSxcbiAgICAgIGF4aXNJZEtleSxcbiAgICAgIHN0YWNrR3JvdXBzLFxuICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICBkYXRhRW5kSW5kZXgsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoZ3JhcGhpY2FsSXRlbXMgJiYgZ3JhcGhpY2FsSXRlbXMubGVuZ3RoKSB7XG4gICAgYXhpc01hcCA9IGdldEF4aXNNYXBCeUl0ZW1zKHByb3BzLCB7XG4gICAgICBBeGlzOiBBeGlzQ29tcCxcbiAgICAgIGdyYXBoaWNhbEl0ZW1zLFxuICAgICAgYXhpc1R5cGUsXG4gICAgICBheGlzSWRLZXksXG4gICAgICBzdGFja0dyb3VwcyxcbiAgICAgIGRhdGFTdGFydEluZGV4LFxuICAgICAgZGF0YUVuZEluZGV4LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGF4aXNNYXA7XG59O1xuXG5jb25zdCB0b29sdGlwVGlja3NHZW5lcmF0b3IgPSAoYXhpc01hcDogYW55KSA9PiB7XG4gIGNvbnN0IGF4aXM6IEJhc2VBeGlzUHJvcHMgPSBnZXRBbnlFbGVtZW50T2ZPYmplY3QoYXhpc01hcCk7XG4gIGNvbnN0IHRvb2x0aXBUaWNrcyA9IGdldFRpY2tzT2ZBeGlzKGF4aXMsIGZhbHNlLCB0cnVlKTtcblxuICByZXR1cm4ge1xuICAgIHRvb2x0aXBUaWNrcyxcbiAgICBvcmRlcmVkVG9vbHRpcFRpY2tzOiBfLnNvcnRCeSh0b29sdGlwVGlja3MsIG8gPT4gby5jb29yZGluYXRlKSxcbiAgICB0b29sdGlwQXhpczogYXhpcyxcbiAgICB0b29sdGlwQXhpc0JhbmRTaXplOiBnZXRCYW5kU2l6ZU9mQXhpcyhheGlzKSxcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBkZWZhdWx0LCByZXNldCBzdGF0ZSBmb3IgdGhlIGNhdGVnb3JpY2FsIGNoYXJ0LlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BzIG9iamVjdCB0byB1c2Ugd2hlbiBjcmVhdGluZyB0aGUgZGVmYXVsdCBzdGF0ZVxuICogQHJldHVybiB7T2JqZWN0fSBXaG9sZSBuZXcgc3RhdGVcbiAqL1xuY29uc3QgY3JlYXRlRGVmYXVsdFN0YXRlID0gKHByb3BzOiBDYXRlZ29yaWNhbENoYXJ0UHJvcHMpOiBDYXRlZ29yaWNhbENoYXJ0U3RhdGUgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCBkZWZhdWx0U2hvd1Rvb2x0aXAgfSA9IHByb3BzO1xuICBjb25zdCBicnVzaEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIEJydXNoLmRpc3BsYXlOYW1lKTtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IChicnVzaEl0ZW0gJiYgYnJ1c2hJdGVtLnByb3BzICYmIGJydXNoSXRlbS5wcm9wcy5zdGFydEluZGV4KSB8fCAwO1xuICBjb25zdCBlbmRJbmRleCA9XG4gICAgKGJydXNoSXRlbSAmJiBicnVzaEl0ZW0ucHJvcHMgJiYgYnJ1c2hJdGVtLnByb3BzLmVuZEluZGV4KSB8fCAocHJvcHMuZGF0YSAmJiBwcm9wcy5kYXRhLmxlbmd0aCAtIDEpIHx8IDA7XG5cbiAgcmV0dXJuIHtcbiAgICBjaGFydFg6IDAsXG4gICAgY2hhcnRZOiAwLFxuICAgIGRhdGFTdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgIGRhdGFFbmRJbmRleDogZW5kSW5kZXgsXG4gICAgYWN0aXZlVG9vbHRpcEluZGV4OiAtMSxcbiAgICBpc1Rvb2x0aXBBY3RpdmU6ICFfLmlzTmlsKGRlZmF1bHRTaG93VG9vbHRpcCkgPyBkZWZhdWx0U2hvd1Rvb2x0aXAgOiBmYWxzZSxcbiAgfTtcbn07XG5cbmNvbnN0IGhhc0dyYXBoaWNhbEJhckl0ZW0gPSAoZ3JhcGhpY2FsSXRlbXM6IGFueVtdKTogYW55W10gfCBib29sZWFuID0+IHtcbiAgaWYgKCFncmFwaGljYWxJdGVtcyB8fCAhZ3JhcGhpY2FsSXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGdyYXBoaWNhbEl0ZW1zLnNvbWUoKGl0ZW06IGFueSkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBnZXREaXNwbGF5TmFtZShpdGVtICYmIGl0ZW0udHlwZSk7XG5cbiAgICByZXR1cm4gbmFtZSAmJiBuYW1lLmluZGV4T2YoJ0JhcicpID49IDA7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0QXhpc05hbWVCeUxheW91dCA9IChsYXlvdXQ6IExheW91dFR5cGUpID0+IHtcbiAgaWYgKGxheW91dCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgcmV0dXJuIHsgbnVtZXJpY0F4aXNOYW1lOiAneUF4aXMnLCBjYXRlQXhpc05hbWU6ICd4QXhpcycgfTtcbiAgfVxuICBpZiAobGF5b3V0ID09PSAndmVydGljYWwnKSB7XG4gICAgcmV0dXJuIHsgbnVtZXJpY0F4aXNOYW1lOiAneEF4aXMnLCBjYXRlQXhpc05hbWU6ICd5QXhpcycgfTtcbiAgfVxuICBpZiAobGF5b3V0ID09PSAnY2VudHJpYycpIHtcbiAgICByZXR1cm4geyBudW1lcmljQXhpc05hbWU6ICdyYWRpdXNBeGlzJywgY2F0ZUF4aXNOYW1lOiAnYW5nbGVBeGlzJyB9O1xuICB9XG5cbiAgcmV0dXJuIHsgbnVtZXJpY0F4aXNOYW1lOiAnYW5nbGVBeGlzJywgY2F0ZUF4aXNOYW1lOiAncmFkaXVzQXhpcycgfTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBvZmZzZXQgb2YgbWFpbiBwYXJ0IGluIHRoZSBzdmcgZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBwcm9wcyAgICAgICAgICBMYXRlc3QgcHJvcHNcbiAqIGdyYXBoaWNhbEl0ZW1zIFRoZSBpbnN0YW5jZXMgb2YgaXRlbVxuICogeEF4aXNNYXAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gb2YgeC1heGlzXG4gKiB5QXhpc01hcCAgICAgICBUaGUgY29uZmlndXJhdGlvbiBvZiB5LWF4aXNcbiAqIEBwYXJhbSAge09iamVjdH0gcHJldkxlZ2VuZEJCb3ggICAgICAgICAgdGhlIGJvdW5kYXJ5IGJveCBvZiBsZWdlbmRcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIG9mZnNldCBvZiBtYWluIHBhcnQgaW4gdGhlIHN2ZyBlbGVtZW50XG4gKi9cbmNvbnN0IGNhbGN1bGF0ZU9mZnNldCA9IChcbiAgeyBwcm9wcywgZ3JhcGhpY2FsSXRlbXMsIHhBeGlzTWFwID0ge30gYXMgQmFzZUF4aXNQcm9wcywgeUF4aXNNYXAgPSB7fSBhcyBCYXNlQXhpc1Byb3BzIH06IGFueSxcbiAgcHJldkxlZ2VuZEJCb3g/OiBhbnksXG4pID0+IHtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IG1hcmdpbiA9IHByb3BzLm1hcmdpbiB8fCB7fTtcbiAgY29uc3QgYnJ1c2hJdGVtID0gZmluZENoaWxkQnlUeXBlKGNoaWxkcmVuLCBCcnVzaC5kaXNwbGF5TmFtZSk7XG4gIGNvbnN0IGxlZ2VuZEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIExlZ2VuZC5kaXNwbGF5TmFtZSk7XG5cbiAgY29uc3Qgb2Zmc2V0SCA9IE9iamVjdC5rZXlzKHlBeGlzTWFwKS5yZWR1Y2UoXG4gICAgKHJlc3VsdDogYW55LCBpZDogYW55KSA9PiB7XG4gICAgICBjb25zdCBlbnRyeSA9IHlBeGlzTWFwW2lkXTtcbiAgICAgIGNvbnN0IHsgb3JpZW50YXRpb24gfSA9IGVudHJ5O1xuXG4gICAgICBpZiAoIWVudHJ5Lm1pcnJvciAmJiAhZW50cnkuaGlkZSkge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIFtvcmllbnRhdGlvbl06IHJlc3VsdFtvcmllbnRhdGlvbl0gKyBlbnRyeS53aWR0aCB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgeyBsZWZ0OiBtYXJnaW4ubGVmdCB8fCAwLCByaWdodDogbWFyZ2luLnJpZ2h0IHx8IDAgfSxcbiAgKTtcblxuICBjb25zdCBvZmZzZXRWID0gT2JqZWN0LmtleXMoeEF4aXNNYXApLnJlZHVjZShcbiAgICAocmVzdWx0LCBpZCkgPT4ge1xuICAgICAgY29uc3QgZW50cnkgPSB4QXhpc01hcFtpZF07XG4gICAgICBjb25zdCB7IG9yaWVudGF0aW9uIH0gPSBlbnRyeTtcblxuICAgICAgaWYgKCFlbnRyeS5taXJyb3IgJiYgIWVudHJ5LmhpZGUpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBbb3JpZW50YXRpb25dOiBfLmdldChyZXN1bHQsIGAke29yaWVudGF0aW9ufWApICsgZW50cnkuaGVpZ2h0IH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB7IHRvcDogbWFyZ2luLnRvcCB8fCAwLCBib3R0b206IG1hcmdpbi5ib3R0b20gfHwgMCB9LFxuICApO1xuXG4gIGxldCBvZmZzZXQgPSB7IC4uLm9mZnNldFYsIC4uLm9mZnNldEggfTtcblxuICBjb25zdCBicnVzaEJvdHRvbSA9IG9mZnNldC5ib3R0b207XG5cbiAgaWYgKGJydXNoSXRlbSkge1xuICAgIG9mZnNldC5ib3R0b20gKz0gYnJ1c2hJdGVtLnByb3BzLmhlaWdodCB8fCBCcnVzaC5kZWZhdWx0UHJvcHMuaGVpZ2h0O1xuICB9XG5cbiAgaWYgKGxlZ2VuZEl0ZW0gJiYgcHJldkxlZ2VuZEJCb3gpIHtcbiAgICBvZmZzZXQgPSBhcHBlbmRPZmZzZXRPZkxlZ2VuZChvZmZzZXQsIGdyYXBoaWNhbEl0ZW1zLCBwcm9wcywgcHJldkxlZ2VuZEJCb3gpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBicnVzaEJvdHRvbSxcbiAgICAuLi5vZmZzZXQsXG4gICAgd2lkdGg6IHdpZHRoIC0gb2Zmc2V0LmxlZnQgLSBvZmZzZXQucmlnaHQsXG4gICAgaGVpZ2h0OiBoZWlnaHQgLSBvZmZzZXQudG9wIC0gb2Zmc2V0LmJvdHRvbSxcbiAgfTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcmljYWxDaGFydFN0YXRlIHtcbiAgY2hhcnRYPzogbnVtYmVyO1xuXG4gIGNoYXJ0WT86IG51bWJlcjtcblxuICBkYXRhU3RhcnRJbmRleD86IG51bWJlcjtcblxuICBkYXRhRW5kSW5kZXg/OiBudW1iZXI7XG5cbiAgYWN0aXZlVG9vbHRpcEluZGV4PzogbnVtYmVyO1xuXG4gIGlzVG9vbHRpcEFjdGl2ZT86IGJvb2xlYW47XG5cbiAgdXBkYXRlSWQ/OiBudW1iZXI7XG5cbiAgeEF4aXNNYXA/OiB7XG4gICAgW2s6IHN0cmluZ106IEJhc2VBeGlzUHJvcHM7XG4gIH07XG5cbiAgeUF4aXNNYXA/OiB7XG4gICAgW2s6IHN0cmluZ106IEJhc2VBeGlzUHJvcHM7XG4gIH07XG5cbiAgb3JkZXJlZFRvb2x0aXBUaWNrcz86IGFueTtcblxuICB0b29sdGlwQXhpcz86IEJhc2VBeGlzUHJvcHM7XG5cbiAgdG9vbHRpcFRpY2tzPzogVGlja0l0ZW1bXTtcblxuICBncmFwaGljYWxJdGVtcz86IGFueTtcblxuICBhY3RpdmVDb29yZGluYXRlPzogQ2hhcnRDb29yZGluYXRlO1xuXG4gIG9mZnNldD86IENoYXJ0T2Zmc2V0O1xuXG4gIGFuZ2xlQXhpc01hcD86IGFueTtcblxuICByYWRpdXNBeGlzTWFwPzogYW55O1xuXG4gIGZvcm1hdGVkR3JhcGhpY2FsSXRlbXM/OiBhbnk7XG5cbiAgLyoqIGFjdGl2ZSB0b29sdGlwIHBheWxvYWQgKi9cbiAgYWN0aXZlUGF5bG9hZD86IGFueVtdO1xuXG4gIHRvb2x0aXBBeGlzQmFuZFNpemU/OiBudW1iZXI7XG5cbiAgLyoqIGFjdGl2ZSBpdGVtICovXG4gIGFjdGl2ZUl0ZW0/OiBhbnk7XG5cbiAgLyoqIEFjdGl2ZSBsYWJlbCBvZiBkYXRhICovXG4gIGFjdGl2ZUxhYmVsPzogc3RyaW5nO1xuXG4gIHhWYWx1ZT86IG51bWJlcjtcblxuICB5VmFsdWU/OiBudW1iZXI7XG5cbiAgbGVnZW5kQkJveD86IGFueTtcblxuICBwcmV2RGF0YT86IGFueVtdO1xuICBwcmV2V2lkdGg/OiBudW1iZXI7XG4gIHByZXZIZWlnaHQ/OiBudW1iZXI7XG4gIHByZXZMYXlvdXQ/OiBMYXlvdXRUeXBlO1xuICBwcmV2U3RhY2tPZmZzZXQ/OiBTdGFja09mZnNldFR5cGU7XG4gIHByZXZNYXJnaW4/OiBNYXJnaW47XG4gIHByZXZDaGlsZHJlbj86IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXRlZ29yaWNhbENoYXJ0UHJvcHMge1xuICBzeW5jSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGNvbXBhY3Q/OiBib29sZWFuO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBkYXRhPzogYW55W107XG4gIGxheW91dD86IExheW91dFR5cGU7XG4gIHN0YWNrT2Zmc2V0PzogU3RhY2tPZmZzZXRUeXBlO1xuICB0aHJvdHRsZURlbGF5PzogbnVtYmVyO1xuICBtYXJnaW4/OiBNYXJnaW47XG4gIGJhckNhdGVnb3J5R2FwPzogbnVtYmVyIHwgc3RyaW5nO1xuICBiYXJHYXA/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGJhclNpemU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIG1heEJhclNpemU/OiBudW1iZXI7XG4gIHN0eWxlPzogYW55O1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogYW55O1xuICBkZWZhdWx0U2hvd1Rvb2x0aXA/OiBib29sZWFuO1xuICBvbkNsaWNrPzogYW55O1xuICBvbk1vdXNlTGVhdmU/OiBhbnk7XG4gIG9uTW91c2VFbnRlcj86IGFueTtcbiAgb25Nb3VzZU1vdmU/OiBhbnk7XG4gIG9uTW91c2VEb3duPzogYW55O1xuICBvbk1vdXNlVXA/OiBhbnk7XG4gIHJldmVyc2VTdGFja09yZGVyPzogYm9vbGVhbjtcbiAgaWQ/OiBzdHJpbmc7XG5cbiAgc3RhcnRBbmdsZT86IG51bWJlcjtcbiAgZW5kQW5nbGU/OiBudW1iZXI7XG4gIGN4PzogbnVtYmVyIHwgc3RyaW5nO1xuICBjeT86IG51bWJlciB8IHN0cmluZztcbiAgaW5uZXJSYWRpdXM/OiBudW1iZXIgfCBzdHJpbmc7XG4gIG91dGVyUmFkaXVzPzogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0ID0gKHtcbiAgY2hhcnROYW1lLFxuICBHcmFwaGljYWxDaGlsZCxcbiAgZXZlbnRUeXBlID0gJ2F4aXMnLFxuICBheGlzQ29tcG9uZW50cyxcbiAgbGVnZW5kQ29udGVudCxcbiAgZm9ybWF0QXhpc01hcCxcbiAgZGVmYXVsdFByb3BzLFxufTogQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMpID0+IHtcbiAgY29uc3QgZ2V0Rm9ybWF0SXRlbXMgPSAocHJvcHM6IENhdGVnb3JpY2FsQ2hhcnRQcm9wcywgY3VycmVudFN0YXRlOiBhbnkpOiBhbnlbXSA9PiB7XG4gICAgY29uc3QgeyBncmFwaGljYWxJdGVtcywgc3RhY2tHcm91cHMsIG9mZnNldCwgdXBkYXRlSWQsIGRhdGFTdGFydEluZGV4LCBkYXRhRW5kSW5kZXggfSA9IGN1cnJlbnRTdGF0ZTtcbiAgICBjb25zdCB7IGJhclNpemUsIGxheW91dCwgYmFyR2FwLCBiYXJDYXRlZ29yeUdhcCwgbWF4QmFyU2l6ZTogZ2xvYmFsTWF4QmFyU2l6ZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBudW1lcmljQXhpc05hbWUsIGNhdGVBeGlzTmFtZSB9ID0gZ2V0QXhpc05hbWVCeUxheW91dChsYXlvdXQpO1xuICAgIGNvbnN0IGhhc0JhciA9IGhhc0dyYXBoaWNhbEJhckl0ZW0oZ3JhcGhpY2FsSXRlbXMpO1xuICAgIGNvbnN0IHNpemVMaXN0ID0gaGFzQmFyICYmIGdldEJhclNpemVMaXN0KHsgYmFyU2l6ZSwgc3RhY2tHcm91cHMgfSk7XG4gICAgY29uc3QgZm9ybWF0ZWRJdGVtcyA9IFtdIGFzIGFueVtdO1xuXG4gICAgZ3JhcGhpY2FsSXRlbXMuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBkaXNwbGF5ZWREYXRhID0gZ2V0RGlzcGxheWVkRGF0YShwcm9wcy5kYXRhLCB7IGRhdGFTdGFydEluZGV4LCBkYXRhRW5kSW5kZXggfSwgaXRlbSk7XG4gICAgICBjb25zdCB7IGRhdGFLZXksIG1heEJhclNpemU6IGNoaWxkTWF4QmFyU2l6ZSB9ID0gaXRlbS5wcm9wcztcbiAgICAgIGNvbnN0IG51bWVyaWNBeGlzSWQgPSBpdGVtLnByb3BzW2Ake251bWVyaWNBeGlzTmFtZX1JZGBdO1xuICAgICAgY29uc3QgY2F0ZUF4aXNJZCA9IGl0ZW0ucHJvcHNbYCR7Y2F0ZUF4aXNOYW1lfUlkYF07XG4gICAgICBjb25zdCBheGlzT2JqID0gYXhpc0NvbXBvbmVudHMucmVkdWNlKChyZXN1bHQ6IGFueSwgZW50cnk6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBheGlzTWFwID0gY3VycmVudFN0YXRlW2Ake2VudHJ5LmF4aXNUeXBlfU1hcGBdO1xuICAgICAgICBjb25zdCBpZCA9IGl0ZW0ucHJvcHNbYCR7ZW50cnkuYXhpc1R5cGV9SWRgXTtcbiAgICAgICAgY29uc3QgYXhpcyA9IGF4aXNNYXAgJiYgYXhpc01hcFtpZF07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgW2VudHJ5LmF4aXNUeXBlXTogYXhpcyxcbiAgICAgICAgICBbYCR7ZW50cnkuYXhpc1R5cGV9VGlja3NgXTogZ2V0VGlja3NPZkF4aXMoYXhpcyksXG4gICAgICAgIH07XG4gICAgICB9LCB7fSk7XG4gICAgICBjb25zdCBjYXRlQXhpcyA9IGF4aXNPYmpbY2F0ZUF4aXNOYW1lXTtcbiAgICAgIGNvbnN0IGNhdGVUaWNrcyA9IGF4aXNPYmpbYCR7Y2F0ZUF4aXNOYW1lfVRpY2tzYF07XG4gICAgICBjb25zdCBzdGFja2VkRGF0YSA9XG4gICAgICAgIHN0YWNrR3JvdXBzICYmXG4gICAgICAgIHN0YWNrR3JvdXBzW251bWVyaWNBeGlzSWRdICYmXG4gICAgICAgIHN0YWNrR3JvdXBzW251bWVyaWNBeGlzSWRdLmhhc1N0YWNrICYmXG4gICAgICAgIGdldFN0YWNrZWREYXRhT2ZJdGVtKGl0ZW0sIHN0YWNrR3JvdXBzW251bWVyaWNBeGlzSWRdLnN0YWNrR3JvdXBzKTtcbiAgICAgIGNvbnN0IGl0ZW1Jc0JhciA9IGdldERpc3BsYXlOYW1lKGl0ZW0udHlwZSkuaW5kZXhPZignQmFyJykgPj0gMDtcbiAgICAgIGNvbnN0IGJhbmRTaXplID0gZ2V0QmFuZFNpemVPZkF4aXMoY2F0ZUF4aXMsIGNhdGVUaWNrcyk7XG4gICAgICBsZXQgYmFyUG9zaXRpb24gPSBbXTtcblxuICAgICAgaWYgKGl0ZW1Jc0Jhcikge1xuICAgICAgICBjb25zdCBiYXJCYW5kU2l6ZSA9IGdldEJhbmRTaXplT2ZBeGlzKGNhdGVBeGlzLCBjYXRlVGlja3MsIHRydWUpO1xuICAgICAgICAvLyDlpoLmnpzmmK9iYXLvvIzorqHnrpdiYXLnmoTkvY3nva5cbiAgICAgICAgY29uc3QgbWF4QmFyU2l6ZSA9IF8uaXNOaWwoY2hpbGRNYXhCYXJTaXplKSA/IGdsb2JhbE1heEJhclNpemUgOiBjaGlsZE1heEJhclNpemU7XG4gICAgICAgIGJhclBvc2l0aW9uID0gZ2V0QmFyUG9zaXRpb24oe1xuICAgICAgICAgIGJhckdhcCxcbiAgICAgICAgICBiYXJDYXRlZ29yeUdhcCxcbiAgICAgICAgICBiYW5kU2l6ZTogYmFyQmFuZFNpemUgIT09IGJhbmRTaXplID8gYmFyQmFuZFNpemUgOiBiYW5kU2l6ZSxcbiAgICAgICAgICBzaXplTGlzdDogc2l6ZUxpc3RbY2F0ZUF4aXNJZF0sXG4gICAgICAgICAgbWF4QmFyU2l6ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGJhckJhbmRTaXplICE9PSBiYW5kU2l6ZSkge1xuICAgICAgICAgIGJhclBvc2l0aW9uID0gYmFyUG9zaXRpb24ubWFwKChwb3M6IHsgaXRlbTogYW55OyBwb3NpdGlvbjogeyBvZmZzZXQ6IG51bWJlcjsgc2l6ZTogbnVtYmVyIH0gfSkgPT4gKHtcbiAgICAgICAgICAgIC4uLnBvcyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IC4uLnBvcy5wb3NpdGlvbiwgb2Zmc2V0OiBwb3MucG9zaXRpb24ub2Zmc2V0IC0gYmFyQmFuZFNpemUgLyAyIH0sXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBjb21wb25zZWRGbiA9IGl0ZW0gJiYgaXRlbS50eXBlICYmIGl0ZW0udHlwZS5nZXRDb21wb3NlZERhdGE7XG5cbiAgICAgIGlmIChjb21wb25zZWRGbikge1xuICAgICAgICBmb3JtYXRlZEl0ZW1zLnB1c2goe1xuICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAuLi5jb21wb25zZWRGbih7XG4gICAgICAgICAgICAgIC4uLmF4aXNPYmosXG4gICAgICAgICAgICAgIGRpc3BsYXllZERhdGEsXG4gICAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgICBkYXRhS2V5LFxuICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICBiYW5kU2l6ZSxcbiAgICAgICAgICAgICAgYmFyUG9zaXRpb24sXG4gICAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgICAgc3RhY2tlZERhdGEsXG4gICAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgIGRhdGFFbmRJbmRleCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAga2V5OiBpdGVtLmtleSB8fCBgaXRlbS0ke2luZGV4fWAsXG4gICAgICAgICAgICBbbnVtZXJpY0F4aXNOYW1lXTogYXhpc09ialtudW1lcmljQXhpc05hbWVdLFxuICAgICAgICAgICAgW2NhdGVBeGlzTmFtZV06IGF4aXNPYmpbY2F0ZUF4aXNOYW1lXSxcbiAgICAgICAgICAgIGFuaW1hdGlvbklkOiB1cGRhdGVJZCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkSW5kZXg6IHBhcnNlQ2hpbGRJbmRleChpdGVtLCBwcm9wcy5jaGlsZHJlbiksXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm9ybWF0ZWRJdGVtcztcbiAgfTtcblxuICAvKipcbiAgICogVGhlIEF4aXNNYXBzIGFyZSBleHBlbnNpdmUgdG8gcmVuZGVyIG9uIGxhcmdlIGRhdGEgc2V0c1xuICAgKiBzbyBwcm92aWRlIHRoZSBhYmlsaXR5IHRvIHN0b3JlIHRoZW0gaW4gc3RhdGUgYW5kIG9ubHkgdXBkYXRlIHRoZW0gd2hlbiBuZWNlc3NhcnlcbiAgICogdGhleSBhcmUgZGVwZW5kZW50IHVwb24gdGhlIHN0YXJ0IGFuZCBlbmQgaW5kZXggb2ZcbiAgICogdGhlIGJydXNoIHNvIGl0J3MgaW1wb3J0YW50IHRoYXQgdGhpcyBtZXRob2QgaXMgY2FsbGVkIF9hZnRlcl9cbiAgICogdGhlIHN0YXRlIGlzIHVwZGF0ZWQgd2l0aCBhbnkgbmV3IHN0YXJ0L2VuZCBpbmRpY2VzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAgICAgICAgICBUaGUgcHJvcHMgb2JqZWN0IHRvIGJlIHVzZWQgZm9yIHVwZGF0aW5nIHRoZSBheGlzbWFwc1xuICAgKiBkYXRhU3RhcnRJbmRleDogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBkYXRhIHNlcmllcyB3aGVuIGEgYnJ1c2ggaXMgYXBwbGllZFxuICAgKiBkYXRhRW5kSW5kZXg6IFRoZSBlbmQgaW5kZXggb2YgdGhlIGRhdGEgc2VyaWVzIHdoZW4gYSBicnVzaCBpcyBhcHBsaWVkXG4gICAqIHVwZGF0ZUlkOiBUaGUgdXBkYXRlIGlkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2U3RhdGUgICAgICBQcmV2IHN0YXRlXG4gICAqIEByZXR1cm4ge09iamVjdH0gc3RhdGUgTmV3IHN0YXRlIHRvIHNldFxuICAgKi9cbiAgY29uc3QgdXBkYXRlU3RhdGVPZkF4aXNNYXBzT2Zmc2V0QW5kU3RhY2tHcm91cHMgPSAoXG4gICAgeyBwcm9wcywgZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCwgdXBkYXRlSWQgfTogYW55LFxuICAgIHByZXZTdGF0ZT86IENhdGVnb3JpY2FsQ2hhcnRTdGF0ZSxcbiAgKTogYW55ID0+IHtcbiAgICBpZiAoIXZhbGlkYXRlV2lkdGhIZWlnaHQoeyBwcm9wcyB9KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbGF5b3V0LCBzdGFja09mZnNldCwgZGF0YSwgcmV2ZXJzZVN0YWNrT3JkZXIgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgbnVtZXJpY0F4aXNOYW1lLCBjYXRlQXhpc05hbWUgfSA9IGdldEF4aXNOYW1lQnlMYXlvdXQobGF5b3V0KTtcbiAgICBjb25zdCBncmFwaGljYWxJdGVtcyA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIEdyYXBoaWNhbENoaWxkKTtcbiAgICBjb25zdCBzdGFja0dyb3VwcyA9IGdldFN0YWNrR3JvdXBzQnlBeGlzSWQoXG4gICAgICBkYXRhLFxuICAgICAgZ3JhcGhpY2FsSXRlbXMsXG4gICAgICBgJHtudW1lcmljQXhpc05hbWV9SWRgLFxuICAgICAgYCR7Y2F0ZUF4aXNOYW1lfUlkYCxcbiAgICAgIHN0YWNrT2Zmc2V0LFxuICAgICAgcmV2ZXJzZVN0YWNrT3JkZXIsXG4gICAgKTtcbiAgICBjb25zdCBheGlzT2JqID0gYXhpc0NvbXBvbmVudHMucmVkdWNlKChyZXN1bHQ6IGFueSwgZW50cnk6IGFueSkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IGAke2VudHJ5LmF4aXNUeXBlfU1hcGA7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgW25hbWVdOiBnZXRBeGlzTWFwKHByb3BzLCB7XG4gICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgZ3JhcGhpY2FsSXRlbXMsXG4gICAgICAgICAgc3RhY2tHcm91cHM6IGVudHJ5LmF4aXNUeXBlID09PSBudW1lcmljQXhpc05hbWUgJiYgc3RhY2tHcm91cHMsXG4gICAgICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICAgICAgZGF0YUVuZEluZGV4LFxuICAgICAgICB9KSxcbiAgICAgIH07XG4gICAgfSwge30pO1xuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY2FsY3VsYXRlT2Zmc2V0KHsgLi4uYXhpc09iaiwgcHJvcHMsIGdyYXBoaWNhbEl0ZW1zIH0sIHByZXZTdGF0ZT8ubGVnZW5kQkJveCk7XG5cbiAgICBPYmplY3Qua2V5cyhheGlzT2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBheGlzT2JqW2tleV0gPSBmb3JtYXRBeGlzTWFwKHByb3BzLCBheGlzT2JqW2tleV0sIG9mZnNldCwga2V5LnJlcGxhY2UoJ01hcCcsICcnKSwgY2hhcnROYW1lKTtcbiAgICB9KTtcbiAgICBjb25zdCBjYXRlQXhpc01hcCA9IGF4aXNPYmpbYCR7Y2F0ZUF4aXNOYW1lfU1hcGBdO1xuICAgIGNvbnN0IHRpY2tzT2JqID0gdG9vbHRpcFRpY2tzR2VuZXJhdG9yKGNhdGVBeGlzTWFwKTtcblxuICAgIGNvbnN0IGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMgPSBnZXRGb3JtYXRJdGVtcyhwcm9wcywge1xuICAgICAgLi4uYXhpc09iaixcbiAgICAgIGRhdGFTdGFydEluZGV4LFxuICAgICAgZGF0YUVuZEluZGV4LFxuICAgICAgdXBkYXRlSWQsXG4gICAgICBncmFwaGljYWxJdGVtcyxcbiAgICAgIHN0YWNrR3JvdXBzLFxuICAgICAgb2Zmc2V0LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMsXG4gICAgICBncmFwaGljYWxJdGVtcyxcbiAgICAgIG9mZnNldCxcbiAgICAgIHN0YWNrR3JvdXBzLFxuICAgICAgLi4udGlja3NPYmosXG4gICAgICAuLi5heGlzT2JqLFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGNsYXNzIENhdGVnb3JpY2FsQ2hhcnRXcmFwcGVyIGV4dGVuZHMgQ29tcG9uZW50PENhdGVnb3JpY2FsQ2hhcnRQcm9wcywgQ2F0ZWdvcmljYWxDaGFydFN0YXRlPiB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gY2hhcnROYW1lO1xuXG4gICAgdW5pcXVlQ2hhcnRJZDogYW55O1xuXG4gICAgY2xpcFBhdGhJZDogYW55O1xuXG4gICAgbGVnZW5kSW5zdGFuY2U6IGFueTtcblxuICAgIC8vIHRvZG8gam9pbiBzcGVjaWZpYyBjaGFydCBwcm9wVHlwZXNcbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzOiBDYXRlZ29yaWNhbENoYXJ0UHJvcHMgPSB7XG4gICAgICBsYXlvdXQ6ICdob3Jpem9udGFsJyxcbiAgICAgIHN0YWNrT2Zmc2V0OiAnbm9uZScsXG4gICAgICBiYXJDYXRlZ29yeUdhcDogJzEwJScsXG4gICAgICBiYXJHYXA6IDQsXG4gICAgICBtYXJnaW46IHsgdG9wOiA1LCByaWdodDogNSwgYm90dG9tOiA1LCBsZWZ0OiA1IH0gYXMgTWFyZ2luLFxuICAgICAgcmV2ZXJzZVN0YWNrT3JkZXI6IGZhbHNlLFxuICAgICAgLi4uZGVmYXVsdFByb3BzLFxuICAgIH07XG5cbiAgICBjb250YWluZXI/OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQ2F0ZWdvcmljYWxDaGFydFByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgIHRoaXMudW5pcXVlQ2hhcnRJZCA9IF8uaXNOaWwocHJvcHMuaWQpID8gdW5pcXVlSWQoJ3JlY2hhcnRzJykgOiBwcm9wcy5pZDtcbiAgICAgIHRoaXMuY2xpcFBhdGhJZCA9IGAke3RoaXMudW5pcXVlQ2hhcnRJZH0tY2xpcGA7XG5cbiAgICAgIGlmIChwcm9wcy50aHJvdHRsZURlbGF5KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcmVkQWZ0ZXJNb3VzZU1vdmUgPSBfLnRocm90dGxlKHRoaXMudHJpZ2dlcmVkQWZ0ZXJNb3VzZU1vdmUsIHByb3BzLnRocm90dGxlRGVsYXkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgIHJlYWN0L25vLWRpZC1tb3VudC1zZXQtc3RhdGUgKi9cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghXy5pc05pbCh0aGlzLnByb3BzLnN5bmNJZCkpIHtcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSAoXG4gICAgICBuZXh0UHJvcHM6IENhdGVnb3JpY2FsQ2hhcnRQcm9wcyxcbiAgICAgIHByZXZTdGF0ZTogQ2F0ZWdvcmljYWxDaGFydFN0YXRlLFxuICAgICk6IENhdGVnb3JpY2FsQ2hhcnRTdGF0ZSA9PiB7XG4gICAgICBjb25zdCB7IGRhdGEsIGNoaWxkcmVuLCB3aWR0aCwgaGVpZ2h0LCBsYXlvdXQsIHN0YWNrT2Zmc2V0LCBtYXJnaW4gfSA9IG5leHRQcm9wcztcblxuICAgICAgaWYgKF8uaXNOaWwocHJldlN0YXRlLnVwZGF0ZUlkKSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0U3RhdGUgPSBjcmVhdGVEZWZhdWx0U3RhdGUobmV4dFByb3BzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmRlZmF1bHRTdGF0ZSxcbiAgICAgICAgICB1cGRhdGVJZDogMCxcbiAgICAgICAgICAuLi51cGRhdGVTdGF0ZU9mQXhpc01hcHNPZmZzZXRBbmRTdGFja0dyb3VwcyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcHJvcHM6IG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgLi4uZGVmYXVsdFN0YXRlLFxuICAgICAgICAgICAgICB1cGRhdGVJZDogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2U3RhdGUsXG4gICAgICAgICAgKSxcblxuICAgICAgICAgIHByZXZEYXRhOiBkYXRhLFxuICAgICAgICAgIHByZXZXaWR0aDogd2lkdGgsXG4gICAgICAgICAgcHJldkhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHByZXZMYXlvdXQ6IGxheW91dCxcbiAgICAgICAgICBwcmV2U3RhY2tPZmZzZXQ6IHN0YWNrT2Zmc2V0LFxuICAgICAgICAgIHByZXZNYXJnaW46IG1hcmdpbixcbiAgICAgICAgICBwcmV2Q2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBkYXRhICE9PSBwcmV2U3RhdGUucHJldkRhdGEgfHxcbiAgICAgICAgd2lkdGggIT09IHByZXZTdGF0ZS5wcmV2V2lkdGggfHxcbiAgICAgICAgaGVpZ2h0ICE9PSBwcmV2U3RhdGUucHJldkhlaWdodCB8fFxuICAgICAgICBsYXlvdXQgIT09IHByZXZTdGF0ZS5wcmV2TGF5b3V0IHx8XG4gICAgICAgIHN0YWNrT2Zmc2V0ICE9PSBwcmV2U3RhdGUucHJldlN0YWNrT2Zmc2V0IHx8XG4gICAgICAgICFzaGFsbG93RXF1YWwobWFyZ2luLCBwcmV2U3RhdGUucHJldk1hcmdpbilcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkZWZhdWx0U3RhdGUgPSBjcmVhdGVEZWZhdWx0U3RhdGUobmV4dFByb3BzKTtcblxuICAgICAgICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcmVjaGFydHMvcmVjaGFydHMvaXNzdWVzLzIxNDNcbiAgICAgICAgY29uc3Qga2VlcEZyb21QcmV2U3RhdGUgPSB7XG4gICAgICAgICAgLy8gKGNoYXJ0WCwgY2hhcnRZKSBhcmUgKDAsMCkgaW4gZGVmYXVsdCBzdGF0ZSwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgbGFzdCBtb3VzZSBwb3NpdGlvbiB0byBhdm9pZFxuICAgICAgICAgIC8vIGFueSBmbGlja2VyaW5nXG4gICAgICAgICAgY2hhcnRYOiBwcmV2U3RhdGUuY2hhcnRYLFxuICAgICAgICAgIGNoYXJ0WTogcHJldlN0YXRlLmNoYXJ0WSxcblxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIHNob3VsZCBzdGF5IGFjdGl2ZSB3aGVuIGl0IHdhcyBhY3RpdmUgaW4gdGhlIHByZXZpb3VzIHJlbmRlci4gSWYgdGhpcyBpcyBub3RcbiAgICAgICAgICAvLyB0aGUgY2FzZSwgdGhlIHRvb2x0aXAgZGlzYXBwZWFycyBhbmQgaW1tZWRpYXRlbHkgcmUtYXBwZWFycywgY2F1c2luZyBhIGZsaWNrZXJpbmcgZWZmZWN0XG4gICAgICAgICAgaXNUb29sdGlwQWN0aXZlOiBwcmV2U3RhdGUuaXNUb29sdGlwQWN0aXZlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZXNUb1N0YXRlID0ge1xuICAgICAgICAgIC4uLmdldFRvb2x0aXBEYXRhKHByZXZTdGF0ZSwgZGF0YSwgbGF5b3V0KSwgLy8gVXBkYXRlIHRoZSBjdXJyZW50IHRvb2x0aXAgZGF0YSAoaW4gY2FzZSBpdCBjaGFuZ2VzIHdpdGhvdXQgbW91c2UgaW50ZXJhY3Rpb24pXG4gICAgICAgICAgdXBkYXRlSWQ6IHByZXZTdGF0ZS51cGRhdGVJZCArIDEsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgLi4uZGVmYXVsdFN0YXRlLFxuICAgICAgICAgIC4uLmtlZXBGcm9tUHJldlN0YXRlLFxuICAgICAgICAgIC4uLnVwZGF0ZXNUb1N0YXRlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ubmV3U3RhdGUsXG4gICAgICAgICAgLi4udXBkYXRlU3RhdGVPZkF4aXNNYXBzT2Zmc2V0QW5kU3RhY2tHcm91cHMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHByb3BzOiBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgIC4uLm5ld1N0YXRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZTdGF0ZSxcbiAgICAgICAgICApLFxuICAgICAgICAgIHByZXZEYXRhOiBkYXRhLFxuICAgICAgICAgIHByZXZXaWR0aDogd2lkdGgsXG4gICAgICAgICAgcHJldkhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHByZXZMYXlvdXQ6IGxheW91dCxcbiAgICAgICAgICBwcmV2U3RhY2tPZmZzZXQ6IHN0YWNrT2Zmc2V0LFxuICAgICAgICAgIHByZXZNYXJnaW46IG1hcmdpbixcbiAgICAgICAgICBwcmV2Q2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKCFpc0NoaWxkcmVuRXF1YWwoY2hpbGRyZW4sIHByZXZTdGF0ZS5wcmV2Q2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBjb25maWd1cmF0aW9uIGluIGNoaWxyZW5cbiAgICAgICAgY29uc3QgaGFzR2xvYmFsRGF0YSA9ICFfLmlzTmlsKGRhdGEpO1xuICAgICAgICBjb25zdCBuZXdVcGRhdGVJZCA9IGhhc0dsb2JhbERhdGEgPyBwcmV2U3RhdGUudXBkYXRlSWQgOiBwcmV2U3RhdGUudXBkYXRlSWQgKyAxO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdXBkYXRlSWQ6IG5ld1VwZGF0ZUlkLFxuICAgICAgICAgIC4uLnVwZGF0ZVN0YXRlT2ZBeGlzTWFwc09mZnNldEFuZFN0YWNrR3JvdXBzKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwcm9wczogbmV4dFByb3BzLFxuICAgICAgICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgICAgICAgIHVwZGF0ZUlkOiBuZXdVcGRhdGVJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2U3RhdGUsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBwcmV2Q2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogQ2F0ZWdvcmljYWxDaGFydFByb3BzKSB7XG4gICAgICAvLyBhZGQgc3luY0lkXG4gICAgICBpZiAoXy5pc05pbChwcmV2UHJvcHMuc3luY0lkKSAmJiAhXy5pc05pbCh0aGlzLnByb3BzLnN5bmNJZCkpIHtcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIHN5bmNJZFxuICAgICAgaWYgKCFfLmlzTmlsKHRoaXMucHJvcHMuc3luY0lkKSAmJiBfLmlzTmlsKHByZXZQcm9wcy5zeW5jSWQpKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICghXy5pc05pbCh0aGlzLnByb3BzLnN5bmNJZCkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYW5jZWxUaHJvdHRsZWRUcmlnZ2VyQWZ0ZXJNb3VzZU1vdmUoKTtcbiAgICB9XG5cbiAgICBjYW5jZWxUaHJvdHRsZWRUcmlnZ2VyQWZ0ZXJNb3VzZU1vdmUoKSB7XG4gICAgICBpZiAodHlwZW9mICh0aGlzLnRyaWdnZXJlZEFmdGVyTW91c2VNb3ZlIGFzIGFueSkuY2FuY2VsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICh0aGlzLnRyaWdnZXJlZEFmdGVyTW91c2VNb3ZlIGFzIGFueSkuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpbmZvcm1hdGlvbiBvZiBtb3VzZSBpbiBjaGFydCwgcmV0dXJuIG51bGwgd2hlbiB0aGUgbW91c2UgaXMgbm90IGluIHRoZSBjaGFydFxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZXZlbnQgICAgVGhlIGV2ZW50IG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgTW91c2UgZGF0YVxuICAgICAqL1xuICAgIGdldE1vdXNlSW5mbyhldmVudDogYW55KSB7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb250YWluZXJPZmZzZXQgPSBnZXRPZmZzZXQodGhpcy5jb250YWluZXIpO1xuICAgICAgY29uc3QgZSA9IGNhbGN1bGF0ZUNoYXJ0Q29vcmRpbmF0ZShldmVudCwgY29udGFpbmVyT2Zmc2V0KTtcbiAgICAgIGNvbnN0IHJhbmdlT2JqID0gdGhpcy5pblJhbmdlKGUuY2hhcnRYLCBlLmNoYXJ0WSk7XG4gICAgICBpZiAoIXJhbmdlT2JqKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHhBeGlzTWFwLCB5QXhpc01hcCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgaWYgKGV2ZW50VHlwZSAhPT0gJ2F4aXMnICYmIHhBeGlzTWFwICYmIHlBeGlzTWFwKSB7XG4gICAgICAgIGNvbnN0IHhTY2FsZSA9IGdldEFueUVsZW1lbnRPZk9iamVjdCh4QXhpc01hcCkuc2NhbGU7XG4gICAgICAgIGNvbnN0IHlTY2FsZSA9IGdldEFueUVsZW1lbnRPZk9iamVjdCh5QXhpc01hcCkuc2NhbGU7XG4gICAgICAgIGNvbnN0IHhWYWx1ZSA9IHhTY2FsZSAmJiB4U2NhbGUuaW52ZXJ0ID8geFNjYWxlLmludmVydChlLmNoYXJ0WCkgOiBudWxsO1xuICAgICAgICBjb25zdCB5VmFsdWUgPSB5U2NhbGUgJiYgeVNjYWxlLmludmVydCA/IHlTY2FsZS5pbnZlcnQoZS5jaGFydFkpIDogbnVsbDtcblxuICAgICAgICByZXR1cm4geyAuLi5lLCB4VmFsdWUsIHlWYWx1ZSB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0b29sVGlwRGF0YSA9IGdldFRvb2x0aXBEYXRhKHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuZGF0YSwgdGhpcy5wcm9wcy5sYXlvdXQsIHJhbmdlT2JqKTtcblxuICAgICAgaWYgKHRvb2xUaXBEYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZSxcbiAgICAgICAgICAuLi50b29sVGlwRGF0YSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0Q3Vyc29yUmVjdGFuZ2xlKCk6IGFueSB7XG4gICAgICBjb25zdCB7IGxheW91dCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHsgYWN0aXZlQ29vcmRpbmF0ZSwgb2Zmc2V0LCB0b29sdGlwQXhpc0JhbmRTaXplIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgaGFsZlNpemUgPSB0b29sdGlwQXhpc0JhbmRTaXplIC8gMjtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Ryb2tlOiAnbm9uZScsXG4gICAgICAgIGZpbGw6ICcjY2NjJyxcbiAgICAgICAgeDogbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgPyBhY3RpdmVDb29yZGluYXRlLnggLSBoYWxmU2l6ZSA6IG9mZnNldC5sZWZ0ICsgMC41LFxuICAgICAgICB5OiBsYXlvdXQgPT09ICdob3Jpem9udGFsJyA/IG9mZnNldC50b3AgKyAwLjUgOiBhY3RpdmVDb29yZGluYXRlLnkgLSBoYWxmU2l6ZSxcbiAgICAgICAgd2lkdGg6IGxheW91dCA9PT0gJ2hvcml6b250YWwnID8gdG9vbHRpcEF4aXNCYW5kU2l6ZSA6IG9mZnNldC53aWR0aCAtIDEsXG4gICAgICAgIGhlaWdodDogbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgPyBvZmZzZXQuaGVpZ2h0IC0gMSA6IHRvb2x0aXBBeGlzQmFuZFNpemUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGdldEN1cnNvclBvaW50cygpOiBhbnkge1xuICAgICAgY29uc3QgeyBsYXlvdXQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IGFjdGl2ZUNvb3JkaW5hdGUsIG9mZnNldCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGxldCB4MSwgeTEsIHgyLCB5MjtcblxuICAgICAgaWYgKGxheW91dCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHgxID0gYWN0aXZlQ29vcmRpbmF0ZS54O1xuICAgICAgICB4MiA9IHgxO1xuICAgICAgICB5MSA9IG9mZnNldC50b3A7XG4gICAgICAgIHkyID0gb2Zmc2V0LnRvcCArIG9mZnNldC5oZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICB5MSA9IGFjdGl2ZUNvb3JkaW5hdGUueTtcbiAgICAgICAgeTIgPSB5MTtcbiAgICAgICAgeDEgPSBvZmZzZXQubGVmdDtcbiAgICAgICAgeDIgPSBvZmZzZXQubGVmdCArIG9mZnNldC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoIV8uaXNOaWwoYWN0aXZlQ29vcmRpbmF0ZS5jeCkgfHwgIV8uaXNOaWwoYWN0aXZlQ29vcmRpbmF0ZS5jeSkpIHtcbiAgICAgICAgaWYgKGxheW91dCA9PT0gJ2NlbnRyaWMnKSB7XG4gICAgICAgICAgY29uc3QgeyBjeCwgY3ksIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgYW5nbGUgfSA9IGFjdGl2ZUNvb3JkaW5hdGU7XG4gICAgICAgICAgY29uc3QgaW5uZXJQb2ludCA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCBpbm5lclJhZGl1cywgYW5nbGUpO1xuICAgICAgICAgIGNvbnN0IG91dGVyUG9pbnQgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgb3V0ZXJSYWRpdXMsIGFuZ2xlKTtcbiAgICAgICAgICB4MSA9IGlubmVyUG9pbnQueDtcbiAgICAgICAgICB5MSA9IGlubmVyUG9pbnQueTtcbiAgICAgICAgICB4MiA9IG91dGVyUG9pbnQueDtcbiAgICAgICAgICB5MiA9IG91dGVyUG9pbnQueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IGN4LCBjeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSB9ID0gYWN0aXZlQ29vcmRpbmF0ZTtcbiAgICAgICAgICBjb25zdCBzdGFydFBvaW50ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgc3RhcnRBbmdsZSk7XG4gICAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgcmFkaXVzLCBlbmRBbmdsZSk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnRzOiBbc3RhcnRQb2ludCwgZW5kUG9pbnRdLFxuICAgICAgICAgICAgY3gsXG4gICAgICAgICAgICBjeSxcbiAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBlbmRBbmdsZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHsgeDogeDEsIHk6IHkxIH0sXG4gICAgICAgIHsgeDogeDIsIHk6IHkyIH0sXG4gICAgICBdO1xuICAgIH1cblxuICAgIGluUmFuZ2UoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBhbnkge1xuICAgICAgY29uc3QgeyBsYXlvdXQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IGlzSW5SYW5nZSA9XG4gICAgICAgICAgeCA+PSBvZmZzZXQubGVmdCAmJiB4IDw9IG9mZnNldC5sZWZ0ICsgb2Zmc2V0LndpZHRoICYmIHkgPj0gb2Zmc2V0LnRvcCAmJiB5IDw9IG9mZnNldC50b3AgKyBvZmZzZXQuaGVpZ2h0O1xuXG4gICAgICAgIHJldHVybiBpc0luUmFuZ2UgPyB7IHgsIHkgfSA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgYW5nbGVBeGlzTWFwLCByYWRpdXNBeGlzTWFwIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBpZiAoYW5nbGVBeGlzTWFwICYmIHJhZGl1c0F4aXNNYXApIHtcbiAgICAgICAgY29uc3QgYW5nbGVBeGlzID0gZ2V0QW55RWxlbWVudE9mT2JqZWN0KGFuZ2xlQXhpc01hcCk7XG5cbiAgICAgICAgcmV0dXJuIGluUmFuZ2VPZlNlY3Rvcih7IHgsIHkgfSwgYW5nbGVBeGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcGFyc2VFdmVudHNPZldyYXBwZXIoKSB7XG4gICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgdG9vbHRpcEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIFRvb2x0aXAuZGlzcGxheU5hbWUpO1xuICAgICAgbGV0IHRvb2x0aXBFdmVudHM6IGFueSA9IHt9O1xuXG4gICAgICBpZiAodG9vbHRpcEl0ZW0gJiYgZXZlbnRUeXBlID09PSAnYXhpcycpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtLnByb3BzLnRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICB0b29sdGlwRXZlbnRzID0ge1xuICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvb2x0aXBFdmVudHMgPSB7XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLmhhbmRsZU1vdXNlTW92ZSxcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgICAgb25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG91dGVyRXZlbnRzID0gYWRhcHRFdmVudEhhbmRsZXJzKHRoaXMucHJvcHMsIHRoaXMuaGFuZGxlT3V0ZXJFdmVudCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLm91dGVyRXZlbnRzLFxuICAgICAgICAuLi50b29sdGlwRXZlbnRzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbiAgICBhZGRMaXN0ZW5lcigpIHtcbiAgICAgIGV2ZW50Q2VudGVyLm9uKFNZTkNfRVZFTlQsIHRoaXMuaGFuZGxlUmVjZWl2ZVN5bmNFdmVudCk7XG5cbiAgICAgIGlmIChldmVudENlbnRlci5zZXRNYXhMaXN0ZW5lcnMgJiYgZXZlbnRDZW50ZXIuX21heExpc3RlbmVycykge1xuICAgICAgICBldmVudENlbnRlci5zZXRNYXhMaXN0ZW5lcnMoZXZlbnRDZW50ZXIuX21heExpc3RlbmVycyArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUxpc3RlbmVyKCkge1xuICAgICAgZXZlbnRDZW50ZXIucmVtb3ZlTGlzdGVuZXIoU1lOQ19FVkVOVCwgdGhpcy5oYW5kbGVSZWNlaXZlU3luY0V2ZW50KTtcblxuICAgICAgaWYgKGV2ZW50Q2VudGVyLnNldE1heExpc3RlbmVycyAmJiBldmVudENlbnRlci5fbWF4TGlzdGVuZXJzKSB7XG4gICAgICAgIGV2ZW50Q2VudGVyLnNldE1heExpc3RlbmVycyhldmVudENlbnRlci5fbWF4TGlzdGVuZXJzIC0gMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlTGVnZW5kQkJveFVwZGF0ZSA9IChib3g6IGFueSkgPT4ge1xuICAgICAgaWYgKGJveCAmJiB0aGlzLmxlZ2VuZEluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCwgdXBkYXRlSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbGVnZW5kQkJveDogYm94LFxuICAgICAgICAgIC4uLnVwZGF0ZVN0YXRlT2ZBeGlzTWFwc09mZnNldEFuZFN0YWNrR3JvdXBzKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwcm9wczogdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgIGRhdGFFbmRJbmRleCxcbiAgICAgICAgICAgICAgdXBkYXRlSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyAuLi50aGlzLnN0YXRlLCBsZWdlbmRCQm94OiBib3ggfSxcbiAgICAgICAgICApLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlUmVjZWl2ZVN5bmNFdmVudCA9IChjSWQ6IGFueSwgY2hhcnRJZDogYW55LCBkYXRhOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHsgc3luY0lkLCBsYXlvdXQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IHVwZGF0ZUlkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBpZiAoc3luY0lkID09PSBjSWQgJiYgY2hhcnRJZCAhPT0gdGhpcy51bmlxdWVDaGFydElkKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YVN0YXJ0SW5kZXgsIGRhdGFFbmRJbmRleCB9ID0gZGF0YTtcblxuICAgICAgICBpZiAoIV8uaXNOaWwoZGF0YS5kYXRhU3RhcnRJbmRleCkgfHwgIV8uaXNOaWwoZGF0YS5kYXRhRW5kSW5kZXgpKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkYXRhU3RhcnRJbmRleCxcbiAgICAgICAgICAgIGRhdGFFbmRJbmRleCxcbiAgICAgICAgICAgIC4uLnVwZGF0ZVN0YXRlT2ZBeGlzTWFwc09mZnNldEFuZFN0YWNrR3JvdXBzKFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgICAgZGF0YUVuZEluZGV4LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUlkLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICghXy5pc05pbChkYXRhLmFjdGl2ZVRvb2x0aXBJbmRleCkpIHtcbiAgICAgICAgICBjb25zdCB7IGNoYXJ0WCwgY2hhcnRZLCBhY3RpdmVUb29sdGlwSW5kZXggfSA9IGRhdGE7XG4gICAgICAgICAgY29uc3QgeyBvZmZzZXQsIHRvb2x0aXBUaWNrcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIW9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2aWV3Qm94OiBDYXJ0ZXNpYW5WaWV3Qm94ID0geyAuLi5vZmZzZXQsIHg6IG9mZnNldC5sZWZ0LCB5OiBvZmZzZXQudG9wIH07XG4gICAgICAgICAgLy8gV2hlbiBhIGNhdGVnb3RpY2FsIGNoYXJ0IGlzIGNvbWJpbmVkIHdpdGggYW5vdGhlciBjaGFydCwgdGhlIHZhbHVlIG9mIGNoYXJ0WFxuICAgICAgICAgIC8vIGFuZCBjaGFydFkgbWF5IGJleW9uZCB0aGUgYm91bmRhcmllcy5cbiAgICAgICAgICBjb25zdCB2YWxpZGF0ZUNoYXJ0WCA9IE1hdGgubWluKGNoYXJ0WCwgdmlld0JveC54ICsgdmlld0JveC53aWR0aCk7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdGVDaGFydFkgPSBNYXRoLm1pbihjaGFydFksIHZpZXdCb3gueSArIHZpZXdCb3guaGVpZ2h0KTtcbiAgICAgICAgICBjb25zdCBhY3RpdmVMYWJlbCA9IHRvb2x0aXBUaWNrc1thY3RpdmVUb29sdGlwSW5kZXhdICYmIHRvb2x0aXBUaWNrc1thY3RpdmVUb29sdGlwSW5kZXhdLnZhbHVlO1xuICAgICAgICAgIGNvbnN0IGFjdGl2ZVBheWxvYWQ6IGFueSA9IGdldFRvb2x0aXBDb250ZW50KHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuZGF0YSwgYWN0aXZlVG9vbHRpcEluZGV4KTtcbiAgICAgICAgICBjb25zdCBhY3RpdmVDb29yZGluYXRlID0gdG9vbHRpcFRpY2tzW2FjdGl2ZVRvb2x0aXBJbmRleF1cbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHg6IGxheW91dCA9PT0gJ2hvcml6b250YWwnID8gdG9vbHRpcFRpY2tzW2FjdGl2ZVRvb2x0aXBJbmRleF0uY29vcmRpbmF0ZSA6IHZhbGlkYXRlQ2hhcnRYLFxuICAgICAgICAgICAgICAgIHk6IGxheW91dCA9PT0gJ2hvcml6b250YWwnID8gdmFsaWRhdGVDaGFydFkgOiB0b29sdGlwVGlja3NbYWN0aXZlVG9vbHRpcEluZGV4XS5jb29yZGluYXRlLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG9yaWdpbkNvb3JkaW5hdGU7XG5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgLi4uZGF0YSwgYWN0aXZlTGFiZWwsIGFjdGl2ZUNvb3JkaW5hdGUsIGFjdGl2ZVBheWxvYWQgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVCcnVzaENoYW5nZSA9ICh7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH06IGFueSkgPT4ge1xuICAgICAgLy8gT25seSB0cmlnZ2VyIGNoYW5nZXMgaWYgdGhlIGV4dGVudHMgb2YgdGhlIGJydXNoIGhhdmUgYWN0dWFsbHkgY2hhbmdlZFxuICAgICAgaWYgKHN0YXJ0SW5kZXggIT09IHRoaXMuc3RhdGUuZGF0YVN0YXJ0SW5kZXggfHwgZW5kSW5kZXggIT09IHRoaXMuc3RhdGUuZGF0YUVuZEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgdXBkYXRlSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoe1xuICAgICAgICAgIGRhdGFTdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgICAgICAgIGRhdGFFbmRJbmRleDogZW5kSW5kZXgsXG4gICAgICAgICAgLi4udXBkYXRlU3RhdGVPZkF4aXNNYXBzT2Zmc2V0QW5kU3RhY2tHcm91cHMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHByb3BzOiB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICBkYXRhU3RhcnRJbmRleDogc3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgZGF0YUVuZEluZGV4OiBlbmRJbmRleCxcbiAgICAgICAgICAgICAgdXBkYXRlSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgICAgICApLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyU3luY0V2ZW50KHtcbiAgICAgICAgICBkYXRhU3RhcnRJbmRleDogc3RhcnRJbmRleCxcbiAgICAgICAgICBkYXRhRW5kSW5kZXg6IGVuZEluZGV4LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhhbmRsZXIgb2YgbW91c2UgZW50ZXJpbmcgY2hhcnRcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGUgICAgICAgICAgICAgIEV2ZW50IG9iamVjdFxuICAgICAqIEByZXR1cm4ge051bGx9ICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlRW50ZXIgPSAoZTogYW55KSA9PiB7XG4gICAgICBjb25zdCB7IG9uTW91c2VFbnRlciB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IG1vdXNlID0gdGhpcy5nZXRNb3VzZUluZm8oZSk7XG5cbiAgICAgIGlmIChtb3VzZSkge1xuICAgICAgICBjb25zdCBuZXh0U3RhdGU6IENhdGVnb3JpY2FsQ2hhcnRTdGF0ZSA9IHsgLi4ubW91c2UsIGlzVG9vbHRpcEFjdGl2ZTogdHJ1ZSB9O1xuICAgICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlclN5bmNFdmVudChuZXh0U3RhdGUpO1xuXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24ob25Nb3VzZUVudGVyKSkge1xuICAgICAgICAgIG9uTW91c2VFbnRlcihuZXh0U3RhdGUsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyaWdnZXJlZEFmdGVyTW91c2VNb3ZlID0gKGU6IGFueSk6IGFueSA9PiB7XG4gICAgICBjb25zdCB7IG9uTW91c2VNb3ZlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbW91c2UgPSB0aGlzLmdldE1vdXNlSW5mbyhlKTtcbiAgICAgIGNvbnN0IG5leHRTdGF0ZTogQ2F0ZWdvcmljYWxDaGFydFN0YXRlID0gbW91c2UgPyB7IC4uLm1vdXNlLCBpc1Rvb2x0aXBBY3RpdmU6IHRydWUgfSA6IHsgaXNUb29sdGlwQWN0aXZlOiBmYWxzZSB9O1xuXG4gICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgICB0aGlzLnRyaWdnZXJTeW5jRXZlbnQobmV4dFN0YXRlKTtcblxuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvbk1vdXNlTW92ZSkpIHtcbiAgICAgICAgb25Nb3VzZU1vdmUobmV4dFN0YXRlLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhhbmRsZXIgb2YgbW91c2UgZW50ZXJpbmcgYSBzY2F0dGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsICAgICBUaGUgYWN0aXZlIHNjYXR0ZXJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG5vIHJldHVyblxuICAgICAqL1xuICAgIGhhbmRsZUl0ZW1Nb3VzZUVudGVyID0gKGVsOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHtcbiAgICAgICAgaXNUb29sdGlwQWN0aXZlOiB0cnVlLFxuICAgICAgICBhY3RpdmVJdGVtOiBlbCxcbiAgICAgICAgYWN0aXZlUGF5bG9hZDogZWwudG9vbHRpcFBheWxvYWQsXG4gICAgICAgIGFjdGl2ZUNvb3JkaW5hdGU6IGVsLnRvb2x0aXBQb3NpdGlvbiB8fCB7IHg6IGVsLmN4LCB5OiBlbC5jeSB9LFxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGFuZGxlciBvZiBtb3VzZSBsZWF2aW5nIGEgc2NhdHRlclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gbm8gcmV0dXJuXG4gICAgICovXG4gICAgaGFuZGxlSXRlbU1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7XG4gICAgICAgIGlzVG9vbHRpcEFjdGl2ZTogZmFsc2UsXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoYW5kbGVyIG9mIG1vdXNlIG1vdmluZyBpbiBjaGFydFxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZSAgICAgICAgRXZlbnQgb2JqZWN0XG4gICAgICogQHJldHVybiB7TnVsbH0gbm8gcmV0dXJuXG4gICAgICovXG4gICAgaGFuZGxlTW91c2VNb3ZlID0gKGU6IGFueSkgPT4ge1xuICAgICAgaWYgKGUgJiYgXy5pc0Z1bmN0aW9uKGUucGVyc2lzdCkpIHtcbiAgICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXJlZEFmdGVyTW91c2VNb3ZlKGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGFuZGxlciBpZiBtb3VzZSBsZWF2aW5nIGNoYXJ0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGUgRXZlbnQgb2JqZWN0XG4gICAgICogQHJldHVybiB7TnVsbH0gbm8gcmV0dXJuXG4gICAgICovXG4gICAgaGFuZGxlTW91c2VMZWF2ZSA9IChlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHsgb25Nb3VzZUxlYXZlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbmV4dFN0YXRlID0geyBpc1Rvb2x0aXBBY3RpdmU6IGZhbHNlIH07XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICAgIHRoaXMudHJpZ2dlclN5bmNFdmVudChuZXh0U3RhdGUpO1xuXG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uTW91c2VMZWF2ZSkpIHtcbiAgICAgICAgb25Nb3VzZUxlYXZlKG5leHRTdGF0ZSwgZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FuY2VsVGhyb3R0bGVkVHJpZ2dlckFmdGVyTW91c2VNb3ZlKCk7XG4gICAgfTtcblxuICAgIGhhbmRsZU91dGVyRXZlbnQgPSAoZTogYW55KSA9PiB7XG4gICAgICBjb25zdCBldmVudE5hbWUgPSBnZXRSZWFjdEV2ZW50QnlUeXBlKGUpO1xuXG4gICAgICBjb25zdCBldmVudCA9IF8uZ2V0KHRoaXMucHJvcHMsIGAke2V2ZW50TmFtZX1gKTtcbiAgICAgIGlmIChldmVudE5hbWUgJiYgXy5pc0Z1bmN0aW9uKGV2ZW50KSkge1xuICAgICAgICBsZXQgbW91c2U7XG4gICAgICAgIGlmICgvLip0b3VjaC4qL2kudGVzdChldmVudE5hbWUpKSB7XG4gICAgICAgICAgbW91c2UgPSB0aGlzLmdldE1vdXNlSW5mbyhlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb3VzZSA9IHRoaXMuZ2V0TW91c2VJbmZvKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGV2ZW50O1xuXG4gICAgICAgIGhhbmRsZXIobW91c2UsIGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVDbGljayA9IChlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHsgb25DbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IG1vdXNlID0gdGhpcy5nZXRNb3VzZUluZm8oZSk7XG5cbiAgICAgIGlmIChtb3VzZSkge1xuICAgICAgICBjb25zdCBuZXh0U3RhdGU6IENhdGVnb3JpY2FsQ2hhcnRTdGF0ZSA9IHsgLi4ubW91c2UsIGlzVG9vbHRpcEFjdGl2ZTogdHJ1ZSB9O1xuICAgICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlclN5bmNFdmVudChuZXh0U3RhdGUpO1xuXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24ob25DbGljaykpIHtcbiAgICAgICAgICBvbkNsaWNrKG5leHRTdGF0ZSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGU6IGFueSkgPT4ge1xuICAgICAgY29uc3QgeyBvbk1vdXNlRG93biB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvbk1vdXNlRG93bikpIHtcbiAgICAgICAgY29uc3QgbW91c2UgPSB0aGlzLmdldE1vdXNlSW5mbyhlKTtcblxuICAgICAgICBvbk1vdXNlRG93bihtb3VzZSwgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZU1vdXNlVXAgPSAoZTogYW55KSA9PiB7XG4gICAgICBjb25zdCB7IG9uTW91c2VVcCB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvbk1vdXNlVXApKSB7XG4gICAgICAgIGNvbnN0IG1vdXNlID0gdGhpcy5nZXRNb3VzZUluZm8oZSk7XG5cbiAgICAgICAgb25Nb3VzZVVwKG1vdXNlLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlVG91Y2hNb3ZlID0gKGU6IGFueSkgPT4ge1xuICAgICAgaWYgKGUuY2hhbmdlZFRvdWNoZXMgIT0gbnVsbCAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZTogYW55KSA9PiB7XG4gICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAhPSBudWxsICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlRG93bihlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlVG91Y2hFbmQgPSAoZTogYW55KSA9PiB7XG4gICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAhPSBudWxsICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXAoZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyaWdnZXJTeW5jRXZlbnQoZGF0YTogYW55KSB7XG4gICAgICBjb25zdCB7IHN5bmNJZCB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKCFfLmlzTmlsKHN5bmNJZCkpIHtcbiAgICAgICAgZXZlbnRDZW50ZXIuZW1pdChTWU5DX0VWRU5ULCBzeW5jSWQsIHRoaXMudW5pcXVlQ2hhcnRJZCwgZGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmVydGljYWxDb29yZGluYXRlc0dlbmVyYXRvciA9ICh7IHhBeGlzLCB3aWR0aCwgaGVpZ2h0LCBvZmZzZXQgfTogQ2hhcnRDb29yZGluYXRlKSA9PlxuICAgICAgZ2V0Q29vcmRpbmF0ZXNPZkdyaWQoXG4gICAgICAgIENhcnRlc2lhbkF4aXMuZ2V0VGlja3Moe1xuICAgICAgICAgIC4uLkNhcnRlc2lhbkF4aXMuZGVmYXVsdFByb3BzLFxuICAgICAgICAgIC4uLnhBeGlzLFxuICAgICAgICAgIHRpY2tzOiBnZXRUaWNrc09mQXhpcyh4QXhpcywgdHJ1ZSksXG4gICAgICAgICAgdmlld0JveDogeyB4OiAwLCB5OiAwLCB3aWR0aCwgaGVpZ2h0IH0sXG4gICAgICAgIH0pLFxuICAgICAgICBvZmZzZXQubGVmdCxcbiAgICAgICAgb2Zmc2V0LmxlZnQgKyBvZmZzZXQud2lkdGgsXG4gICAgICApO1xuXG4gICAgaG9yaXpvbnRhbENvb3JkaW5hdGVzR2VuZXJhdG9yID0gKHsgeUF4aXMsIHdpZHRoLCBoZWlnaHQsIG9mZnNldCB9OiBDaGFydENvb3JkaW5hdGUpID0+XG4gICAgICBnZXRDb29yZGluYXRlc09mR3JpZChcbiAgICAgICAgQ2FydGVzaWFuQXhpcy5nZXRUaWNrcyh7XG4gICAgICAgICAgLi4uQ2FydGVzaWFuQXhpcy5kZWZhdWx0UHJvcHMsXG4gICAgICAgICAgLi4ueUF4aXMsXG4gICAgICAgICAgdGlja3M6IGdldFRpY2tzT2ZBeGlzKHlBeGlzLCB0cnVlKSxcbiAgICAgICAgICB2aWV3Qm94OiB7IHg6IDAsIHk6IDAsIHdpZHRoLCBoZWlnaHQgfSxcbiAgICAgICAgfSksXG4gICAgICAgIG9mZnNldC50b3AsXG4gICAgICAgIG9mZnNldC50b3AgKyBvZmZzZXQuaGVpZ2h0LFxuICAgICAgKTtcblxuICAgIGF4ZXNUaWNrc0dlbmVyYXRvciA9IChheGlzPzogYW55KSA9PiBnZXRUaWNrc09mQXhpcyhheGlzLCB0cnVlKTtcblxuICAgIGZpbHRlckZvcm1hdEl0ZW0oaXRlbTogYW55LCBkaXNwbGF5TmFtZTogYW55LCBjaGlsZEluZGV4OiBhbnkpIHtcbiAgICAgIGNvbnN0IHsgZm9ybWF0ZWRHcmFwaGljYWxJdGVtcyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBmb3JtYXRlZEdyYXBoaWNhbEl0ZW1zW2ldO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBlbnRyeS5pdGVtID09PSBpdGVtIHx8XG4gICAgICAgICAgZW50cnkucHJvcHMua2V5ID09PSBpdGVtLmtleSB8fFxuICAgICAgICAgIChkaXNwbGF5TmFtZSA9PT0gZ2V0RGlzcGxheU5hbWUoZW50cnkuaXRlbS50eXBlKSAmJiBjaGlsZEluZGV4ID09PSBlbnRyeS5jaGlsZEluZGV4KVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmVuZGVyQ3Vyc29yID0gKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgICAgY29uc3QgeyBpc1Rvb2x0aXBBY3RpdmUsIGFjdGl2ZUNvb3JkaW5hdGUsIGFjdGl2ZVBheWxvYWQsIG9mZnNldCwgYWN0aXZlVG9vbHRpcEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucHJvcHMuY3Vyc29yIHx8ICFpc1Rvb2x0aXBBY3RpdmUgfHwgIWFjdGl2ZUNvb3JkaW5hdGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGxheW91dCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGxldCByZXN0UHJvcHM7XG4gICAgICBsZXQgY3Vyc29yQ29tcDogYW55ID0gQ3VydmU7XG5cbiAgICAgIGlmIChjaGFydE5hbWUgPT09ICdTY2F0dGVyQ2hhcnQnKSB7XG4gICAgICAgIHJlc3RQcm9wcyA9IGFjdGl2ZUNvb3JkaW5hdGU7XG4gICAgICAgIGN1cnNvckNvbXAgPSBDcm9zcztcbiAgICAgIH0gZWxzZSBpZiAoY2hhcnROYW1lID09PSAnQmFyQ2hhcnQnKSB7XG4gICAgICAgIHJlc3RQcm9wcyA9IHRoaXMuZ2V0Q3Vyc29yUmVjdGFuZ2xlKCk7XG4gICAgICAgIGN1cnNvckNvbXAgPSBSZWN0YW5nbGU7XG4gICAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgY29uc3QgeyBjeCwgY3ksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfTogYW55ID0gdGhpcy5nZXRDdXJzb3JQb2ludHMoKTtcbiAgICAgICAgcmVzdFByb3BzID0ge1xuICAgICAgICAgIGN4LFxuICAgICAgICAgIGN5LFxuICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgICAgaW5uZXJSYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgICBvdXRlclJhZGl1czogcmFkaXVzLFxuICAgICAgICB9O1xuICAgICAgICBjdXJzb3JDb21wID0gU2VjdG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdFByb3BzID0geyBwb2ludHM6IHRoaXMuZ2V0Q3Vyc29yUG9pbnRzKCkgfTtcbiAgICAgICAgY3Vyc29yQ29tcCA9IEN1cnZlO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gZWxlbWVudC5rZXkgfHwgJ19yZWNoYXJ0cy1jdXJzb3InO1xuICAgICAgY29uc3QgY3Vyc29yUHJvcHMgPSB7XG4gICAgICAgIHN0cm9rZTogJyNjY2MnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgIC4uLm9mZnNldCxcbiAgICAgICAgLi4ucmVzdFByb3BzLFxuICAgICAgICAuLi5maWx0ZXJQcm9wcyhlbGVtZW50LnByb3BzLmN1cnNvciksXG4gICAgICAgIHBheWxvYWQ6IGFjdGl2ZVBheWxvYWQsXG4gICAgICAgIHBheWxvYWRJbmRleDogYWN0aXZlVG9vbHRpcEluZGV4LFxuICAgICAgICBrZXksXG4gICAgICAgIGNsYXNzTmFtZTogJ3JlY2hhcnRzLXRvb2x0aXAtY3Vyc29yJyxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBpc1ZhbGlkRWxlbWVudChlbGVtZW50LnByb3BzLmN1cnNvcilcbiAgICAgICAgPyBjbG9uZUVsZW1lbnQoZWxlbWVudC5wcm9wcy5jdXJzb3IsIGN1cnNvclByb3BzKVxuICAgICAgICA6IGNyZWF0ZUVsZW1lbnQoY3Vyc29yQ29tcCwgY3Vyc29yUHJvcHMpO1xuICAgIH07XG5cbiAgICByZW5kZXJQb2xhckF4aXMgPSAoZWxlbWVudDogYW55LCBkaXNwbGF5TmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBheGlzVHlwZSA9IF8uZ2V0KGVsZW1lbnQsICd0eXBlLmF4aXNUeXBlJyk7XG4gICAgICBjb25zdCBheGlzTWFwID0gXy5nZXQodGhpcy5zdGF0ZSwgYCR7YXhpc1R5cGV9TWFwYCk7XG4gICAgICBjb25zdCBheGlzT3B0aW9uID0gYXhpc01hcFtlbGVtZW50LnByb3BzW2Ake2F4aXNUeXBlfUlkYF1dO1xuXG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgLi4uYXhpc09wdGlvbixcbiAgICAgICAgY2xhc3NOYW1lOiBheGlzVHlwZSxcbiAgICAgICAga2V5OiBlbGVtZW50LmtleSB8fCBgJHtkaXNwbGF5TmFtZX0tJHtpbmRleH1gLFxuICAgICAgICB0aWNrczogZ2V0VGlja3NPZkF4aXMoYXhpc09wdGlvbiwgdHJ1ZSksXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyWEF4aXMgPSAoZWxlbWVudDogYW55LCBkaXNwbGF5TmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCB7IHhBeGlzTWFwIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgYXhpc09iaiA9IHhBeGlzTWFwW2VsZW1lbnQucHJvcHMueEF4aXNJZF07XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckF4aXMoYXhpc09iaiwgZWxlbWVudCwgZGlzcGxheU5hbWUsIGluZGV4KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyWUF4aXMgPSAoZWxlbWVudDogYW55LCBkaXNwbGF5TmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCB7IHlBeGlzTWFwIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgYXhpc09iaiA9IHlBeGlzTWFwW2VsZW1lbnQucHJvcHMueUF4aXNJZF07XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckF4aXMoYXhpc09iaiwgZWxlbWVudCwgZGlzcGxheU5hbWUsIGluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhdyBheGlzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGF4aXNPcHRpb25zIFRoZSBvcHRpb25zIG9mIGF4aXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAgICAgIFRoZSBheGlzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlzcGxheU5hbWUgIFRoZSBkaXNwbGF5IG5hbWUgb2YgYXhpc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAgICAgICAgVGhlIGluZGV4IG9mIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9ICAgICAgIFRoZSBpbnN0YW5jZSBvZiB4LWF4ZXNcbiAgICAgKi9cbiAgICByZW5kZXJBeGlzKGF4aXNPcHRpb25zOiBCYXNlQXhpc1Byb3BzLCBlbGVtZW50OiBhbnksIGRpc3BsYXlOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q2FydGVzaWFuQXhpc1xuICAgICAgICAgIHsuLi4oYXhpc09wdGlvbnMgYXMgYW55KX1cbiAgICAgICAgICBjbGFzc05hbWU9e2ByZWNoYXJ0cy0ke2F4aXNPcHRpb25zLmF4aXNUeXBlfSAke2F4aXNPcHRpb25zLmF4aXNUeXBlfWB9XG4gICAgICAgICAga2V5PXtlbGVtZW50LmtleSB8fCBgJHtkaXNwbGF5TmFtZX0tJHtpbmRleH1gfVxuICAgICAgICAgIHZpZXdCb3g9e3sgeDogMCwgeTogMCwgd2lkdGgsIGhlaWdodCB9IGFzIGFueX1cbiAgICAgICAgICB0aWNrc0dlbmVyYXRvcj17dGhpcy5heGVzVGlja3NHZW5lcmF0b3J9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXcgZ3JpZFxuICAgICAqIEBwYXJhbSAge1JlYWN0RWxlbWVudH0gZWxlbWVudCB0aGUgZ3JpZCBpdGVtXG4gICAgICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBUaGUgaW5zdGFuY2Ugb2YgZ3JpZFxuICAgICAqL1xuICAgIHJlbmRlckdyaWQgPSAoZWxlbWVudDogUmVhY3QuUmVhY3RFbGVtZW50KTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHsgeEF4aXNNYXAsIHlBeGlzTWFwLCBvZmZzZXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB4QXhpcyA9IGdldEFueUVsZW1lbnRPZk9iamVjdCh4QXhpc01hcCk7XG4gICAgICBjb25zdCB5QXhpc1dpdGhGaW5pdGVEb21haW4gPSBfLmZpbmQoeUF4aXNNYXAsIGF4aXMgPT4gXy5ldmVyeShheGlzLmRvbWFpbiwgaXNGaW5pdCkpO1xuICAgICAgY29uc3QgeUF4aXMgPSB5QXhpc1dpdGhGaW5pdGVEb21haW4gfHwgZ2V0QW55RWxlbWVudE9mT2JqZWN0KHlBeGlzTWFwKTtcbiAgICAgIGNvbnN0IHByb3BzID0gZWxlbWVudC5wcm9wcyB8fCB7fTtcblxuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGtleTogZWxlbWVudC5rZXkgfHwgJ2dyaWQnLFxuICAgICAgICB4OiBpc051bWJlcihwcm9wcy54KSA/IHByb3BzLnggOiBvZmZzZXQubGVmdCxcbiAgICAgICAgeTogaXNOdW1iZXIocHJvcHMueSkgPyBwcm9wcy55IDogb2Zmc2V0LnRvcCxcbiAgICAgICAgd2lkdGg6IGlzTnVtYmVyKHByb3BzLndpZHRoKSA/IHByb3BzLndpZHRoIDogb2Zmc2V0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGlzTnVtYmVyKHByb3BzLmhlaWdodCkgPyBwcm9wcy5oZWlnaHQgOiBvZmZzZXQuaGVpZ2h0LFxuICAgICAgICB4QXhpcyxcbiAgICAgICAgeUF4aXMsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgY2hhcnRXaWR0aDogd2lkdGgsXG4gICAgICAgIGNoYXJ0SGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHZlcnRpY2FsQ29vcmRpbmF0ZXNHZW5lcmF0b3I6IHByb3BzLnZlcnRpY2FsQ29vcmRpbmF0ZXNHZW5lcmF0b3IgfHwgdGhpcy52ZXJ0aWNhbENvb3JkaW5hdGVzR2VuZXJhdG9yLFxuICAgICAgICBob3Jpem9udGFsQ29vcmRpbmF0ZXNHZW5lcmF0b3I6IHByb3BzLmhvcml6b250YWxDb29yZGluYXRlc0dlbmVyYXRvciB8fCB0aGlzLmhvcml6b250YWxDb29yZGluYXRlc0dlbmVyYXRvcixcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXJQb2xhckdyaWQgPSAoZWxlbWVudDogUmVhY3QuUmVhY3RFbGVtZW50KTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHsgcmFkaWFsTGluZXMgfSA9IGVsZW1lbnQucHJvcHM7XG4gICAgICBjb25zdCB7IHJhZGl1c0F4aXNNYXAsIGFuZ2xlQXhpc01hcCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IHJhZGl1c0F4aXMgPSBnZXRBbnlFbGVtZW50T2ZPYmplY3QocmFkaXVzQXhpc01hcCk7XG4gICAgICBjb25zdCBhbmdsZUF4aXMgPSBnZXRBbnlFbGVtZW50T2ZPYmplY3QoYW5nbGVBeGlzTWFwKTtcbiAgICAgIGNvbnN0IHsgY3gsIGN5LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMgfSA9IGFuZ2xlQXhpcztcblxuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIHBvbGFyQW5nbGVzOiBnZXRUaWNrc09mQXhpcyhhbmdsZUF4aXMsIHRydWUpLm1hcCgoZW50cnk6IGFueSkgPT4gZW50cnkuY29vcmRpbmF0ZSksXG4gICAgICAgIHBvbGFyUmFkaXVzOiBnZXRUaWNrc09mQXhpcyhyYWRpdXNBeGlzLCB0cnVlKS5tYXAoKGVudHJ5OiBhbnkpID0+IGVudHJ5LmNvb3JkaW5hdGUpLFxuICAgICAgICBjeCxcbiAgICAgICAgY3ksXG4gICAgICAgIGlubmVyUmFkaXVzLFxuICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAga2V5OiBlbGVtZW50LmtleSB8fCAncG9sYXItZ3JpZCcsXG4gICAgICAgIHJhZGlhbExpbmVzLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXcgbGVnZW5kXG4gICAgICogQHJldHVybiB7UmVhY3RFbGVtZW50fSAgICAgICAgICAgIFRoZSBpbnN0YW5jZSBvZiBMZWdlbmRcbiAgICAgKi9cbiAgICByZW5kZXJMZWdlbmQgPSAoKTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHsgZm9ybWF0ZWRHcmFwaGljYWxJdGVtcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IHsgY2hpbGRyZW4sIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBtYXJnaW4gPSB0aGlzLnByb3BzLm1hcmdpbiB8fCB7fTtcbiAgICAgIGNvbnN0IGxlZ2VuZFdpZHRoOiBudW1iZXIgPSB3aWR0aCAtIChtYXJnaW4ubGVmdCB8fCAwKSAtIChtYXJnaW4ucmlnaHQgfHwgMCk7XG4gICAgICBjb25zdCBwcm9wcyA9IGdldExlZ2VuZFByb3BzKHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGZvcm1hdGVkR3JhcGhpY2FsSXRlbXMsXG4gICAgICAgIGxlZ2VuZFdpZHRoLFxuICAgICAgICBsZWdlbmRDb250ZW50LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgaXRlbSwgLi4ub3RoZXJQcm9wcyB9ID0gcHJvcHM7XG5cbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoaXRlbSwge1xuICAgICAgICAuLi5vdGhlclByb3BzLFxuICAgICAgICBjaGFydFdpZHRoOiB3aWR0aCxcbiAgICAgICAgY2hhcnRIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgbWFyZ2luLFxuICAgICAgICByZWY6IChsZWdlbmQ6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMubGVnZW5kSW5zdGFuY2UgPSBsZWdlbmQ7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQkJveFVwZGF0ZTogdGhpcy5oYW5kbGVMZWdlbmRCQm94VXBkYXRlLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXcgVG9vbHRpcFxuICAgICAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gIFRoZSBpbnN0YW5jZSBvZiBUb29sdGlwXG4gICAgICovXG4gICAgcmVuZGVyVG9vbHRpcCA9ICgpOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHRvb2x0aXBJdGVtID0gZmluZENoaWxkQnlUeXBlKGNoaWxkcmVuLCBUb29sdGlwLmRpc3BsYXlOYW1lKTtcblxuICAgICAgaWYgKCF0b29sdGlwSXRlbSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBpc1Rvb2x0aXBBY3RpdmUsIGFjdGl2ZUNvb3JkaW5hdGUsIGFjdGl2ZVBheWxvYWQsIGFjdGl2ZUxhYmVsLCBvZmZzZXQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQodG9vbHRpcEl0ZW0sIHtcbiAgICAgICAgdmlld0JveDogeyAuLi5vZmZzZXQsIHg6IG9mZnNldC5sZWZ0LCB5OiBvZmZzZXQudG9wIH0sXG4gICAgICAgIGFjdGl2ZTogaXNUb29sdGlwQWN0aXZlLFxuICAgICAgICBsYWJlbDogYWN0aXZlTGFiZWwsXG4gICAgICAgIHBheWxvYWQ6IGlzVG9vbHRpcEFjdGl2ZSA/IGFjdGl2ZVBheWxvYWQgOiBbXSxcbiAgICAgICAgY29vcmRpbmF0ZTogYWN0aXZlQ29vcmRpbmF0ZSxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXJCcnVzaCA9IChlbGVtZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgbWFyZ2luLCBkYXRhIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgeyBvZmZzZXQsIGRhdGFTdGFydEluZGV4LCBkYXRhRW5kSW5kZXgsIHVwZGF0ZUlkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICAvLyBUT0RPOiB1cGRhdGUgYnJ1c2ggd2hlbiBjaGlsZHJlbiB1cGRhdGVcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBrZXk6IGVsZW1lbnQua2V5IHx8ICdfcmVjaGFydHMtYnJ1c2gnLFxuICAgICAgICBvbkNoYW5nZTogY29tYmluZUV2ZW50SGFuZGxlcnModGhpcy5oYW5kbGVCcnVzaENoYW5nZSwgbnVsbCwgZWxlbWVudC5wcm9wcy5vbkNoYW5nZSksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHg6IGlzTnVtYmVyKGVsZW1lbnQucHJvcHMueCkgPyBlbGVtZW50LnByb3BzLnggOiBvZmZzZXQubGVmdCxcbiAgICAgICAgeTogaXNOdW1iZXIoZWxlbWVudC5wcm9wcy55KVxuICAgICAgICAgID8gZWxlbWVudC5wcm9wcy55XG4gICAgICAgICAgOiBvZmZzZXQudG9wICsgb2Zmc2V0LmhlaWdodCArIG9mZnNldC5icnVzaEJvdHRvbSAtIChtYXJnaW4uYm90dG9tIHx8IDApLFxuICAgICAgICB3aWR0aDogaXNOdW1iZXIoZWxlbWVudC5wcm9wcy53aWR0aCkgPyBlbGVtZW50LnByb3BzLndpZHRoIDogb2Zmc2V0LndpZHRoLFxuICAgICAgICBzdGFydEluZGV4OiBkYXRhU3RhcnRJbmRleCxcbiAgICAgICAgZW5kSW5kZXg6IGRhdGFFbmRJbmRleCxcbiAgICAgICAgdXBkYXRlSWQ6IGBicnVzaC0ke3VwZGF0ZUlkfWAsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyUmVmZXJlbmNlRWxlbWVudCA9IChlbGVtZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBjbGlwUGF0aElkIH0gPSB0aGlzO1xuICAgICAgY29uc3QgeyB4QXhpc01hcCwgeUF4aXNNYXAsIG9mZnNldCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IHsgeEF4aXNJZCwgeUF4aXNJZCB9ID0gZWxlbWVudC5wcm9wcztcblxuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGtleTogZWxlbWVudC5rZXkgfHwgYCR7ZGlzcGxheU5hbWV9LSR7aW5kZXh9YCxcbiAgICAgICAgeEF4aXM6IHhBeGlzTWFwW3hBeGlzSWRdLFxuICAgICAgICB5QXhpczogeUF4aXNNYXBbeUF4aXNJZF0sXG4gICAgICAgIHZpZXdCb3g6IHtcbiAgICAgICAgICB4OiBvZmZzZXQubGVmdCxcbiAgICAgICAgICB5OiBvZmZzZXQudG9wLFxuICAgICAgICAgIHdpZHRoOiBvZmZzZXQud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBvZmZzZXQuaGVpZ2h0LFxuICAgICAgICB9LFxuICAgICAgICBjbGlwUGF0aElkLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0YXRpYyByZW5kZXJBY3RpdmVEb3QgPSAob3B0aW9uOiBhbnksIHByb3BzOiBhbnkpOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuICAgICAgbGV0IGRvdDtcblxuICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KG9wdGlvbikpIHtcbiAgICAgICAgZG90ID0gY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICAgICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9uKSkge1xuICAgICAgICBkb3QgPSBvcHRpb24ocHJvcHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG90ID0gPERvdCB7Li4ucHJvcHN9IC8+O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtYWN0aXZlLWRvdFwiIGtleT17cHJvcHMua2V5fT5cbiAgICAgICAgICB7ZG90fVxuICAgICAgICA8L0xheWVyPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyQWN0aXZlUG9pbnRzID0gKHsgaXRlbSwgYWN0aXZlUG9pbnQsIGJhc2VQb2ludCwgY2hpbGRJbmRleCwgaXNSYW5nZSB9OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGl0ZW0ucHJvcHM7XG4gICAgICBjb25zdCB7IGFjdGl2ZURvdCwgZGF0YUtleSB9ID0gaXRlbS5pdGVtLnByb3BzO1xuICAgICAgY29uc3QgZG90UHJvcHMgPSB7XG4gICAgICAgIGluZGV4OiBjaGlsZEluZGV4LFxuICAgICAgICBkYXRhS2V5LFxuICAgICAgICBjeDogYWN0aXZlUG9pbnQueCxcbiAgICAgICAgY3k6IGFjdGl2ZVBvaW50LnksXG4gICAgICAgIHI6IDQsXG4gICAgICAgIGZpbGw6IGdldE1haW5Db2xvck9mR3JhcGhpY0l0ZW0oaXRlbS5pdGVtKSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgIHN0cm9rZTogJyNmZmYnLFxuICAgICAgICBwYXlsb2FkOiBhY3RpdmVQb2ludC5wYXlsb2FkLFxuICAgICAgICB2YWx1ZTogYWN0aXZlUG9pbnQudmFsdWUsXG4gICAgICAgIGtleTogYCR7a2V5fS1hY3RpdmVQb2ludC0ke2NoaWxkSW5kZXh9YCxcbiAgICAgICAgLi4uZmlsdGVyUHJvcHMoYWN0aXZlRG90KSxcbiAgICAgICAgLi4uYWRhcHRFdmVudEhhbmRsZXJzKGFjdGl2ZURvdCksXG4gICAgICB9O1xuXG4gICAgICByZXN1bHQucHVzaChDYXRlZ29yaWNhbENoYXJ0V3JhcHBlci5yZW5kZXJBY3RpdmVEb3QoYWN0aXZlRG90LCBkb3RQcm9wcykpO1xuXG4gICAgICBpZiAoYmFzZVBvaW50KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgIENhdGVnb3JpY2FsQ2hhcnRXcmFwcGVyLnJlbmRlckFjdGl2ZURvdChhY3RpdmVEb3QsIHtcbiAgICAgICAgICAgIC4uLmRvdFByb3BzLFxuICAgICAgICAgICAgY3g6IGJhc2VQb2ludC54LFxuICAgICAgICAgICAgY3k6IGJhc2VQb2ludC55LFxuICAgICAgICAgICAga2V5OiBgJHtrZXl9LWJhc2VQb2ludC0ke2NoaWxkSW5kZXh9YCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSYW5nZSkge1xuICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmVuZGVyR3JhcGhpY0NoaWxkID0gKGVsZW1lbnQ6IFJlYWN0LlJlYWN0RWxlbWVudCwgZGlzcGxheU5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGFueVtdID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmZpbHRlckZvcm1hdEl0ZW0oZWxlbWVudCwgZGlzcGxheU5hbWUsIGluZGV4KTtcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBpc1Rvb2x0aXBBY3RpdmUsIHRvb2x0aXBBeGlzLCBhY3RpdmVUb29sdGlwSW5kZXgsIGFjdGl2ZUxhYmVsIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHRvb2x0aXBJdGVtID0gZmluZENoaWxkQnlUeXBlKGNoaWxkcmVuLCBUb29sdGlwLmRpc3BsYXlOYW1lKTtcbiAgICAgIGNvbnN0IHsgcG9pbnRzLCBpc1JhbmdlLCBiYXNlTGluZSB9ID0gaXRlbS5wcm9wcztcbiAgICAgIGNvbnN0IHsgYWN0aXZlRG90LCBoaWRlIH0gPSBpdGVtLml0ZW0ucHJvcHM7XG4gICAgICBjb25zdCBoYXNBY3RpdmUgPSAhaGlkZSAmJiBpc1Rvb2x0aXBBY3RpdmUgJiYgdG9vbHRpcEl0ZW0gJiYgYWN0aXZlRG90ICYmIGFjdGl2ZVRvb2x0aXBJbmRleCA+PSAwO1xuXG4gICAgICBjb25zdCBpc1Rvb2x0aXBUcmlnZ2VyQnlDbGljayA9IHRvb2x0aXBJdGVtICYmIHRvb2x0aXBJdGVtLnByb3BzLnRyaWdnZXIgPT09ICdjbGljayc7XG4gICAgICBjb25zdCBpdGVtRXZlbnRzID0gaXNUb29sdGlwVHJpZ2dlckJ5Q2xpY2tcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBvbkNsaWNrOiBjb21iaW5lRXZlbnRIYW5kbGVycyh0aGlzLmhhbmRsZUl0ZW1Nb3VzZUVudGVyLCBudWxsLCBpdGVtLnByb3BzLm9uQ0xpY2spLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU6IGNvbWJpbmVFdmVudEhhbmRsZXJzKHRoaXMuaGFuZGxlSXRlbU1vdXNlTGVhdmUsIG51bGwsIGl0ZW0ucHJvcHMub25Nb3VzZUxlYXZlKSxcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcjogY29tYmluZUV2ZW50SGFuZGxlcnModGhpcy5oYW5kbGVJdGVtTW91c2VFbnRlciwgbnVsbCwgaXRlbS5wcm9wcy5vbk1vdXNlRW50ZXIpLFxuICAgICAgICAgIH07XG5cbiAgICAgIGNvbnN0IGdyYXBoaWNhbEl0ZW0gPSBjbG9uZUVsZW1lbnQoZWxlbWVudCwgeyAuLi5pdGVtLnByb3BzLCAuLi5pdGVtRXZlbnRzIH0pO1xuXG4gICAgICBmdW5jdGlvbiBmaW5kV2l0aFBheWxvYWQoZW50cnk6IGFueSkge1xuICAgICAgICAvLyBUT0RPIG5lZWRzIHRvIHZlcmlmeSBkYXRhS2V5IGlzIEZ1bmN0aW9uXG4gICAgICAgIHJldHVybiB0eXBlb2YgdG9vbHRpcEF4aXMuZGF0YUtleSA9PT0gJ2Z1bmN0aW9uJyA/IHRvb2x0aXBBeGlzLmRhdGFLZXkoZW50cnkucGF5bG9hZCkgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzQWN0aXZlKSB7XG4gICAgICAgIGxldCBhY3RpdmVQb2ludCwgYmFzZVBvaW50O1xuXG4gICAgICAgIGlmICh0b29sdGlwQXhpcy5kYXRhS2V5ICYmICF0b29sdGlwQXhpcy5hbGxvd0R1cGxpY2F0ZWRDYXRlZ29yeSkge1xuICAgICAgICAgIC8vIG51bWJlciB0cmFuc2Zvcm0gdG8gc3RyaW5nXG4gICAgICAgICAgY29uc3Qgc3BlY2lmaWVkS2V5ID1cbiAgICAgICAgICAgIHR5cGVvZiB0b29sdGlwQXhpcy5kYXRhS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgID8gZmluZFdpdGhQYXlsb2FkXG4gICAgICAgICAgICAgIDogJ3BheWxvYWQuJy5jb25jYXQodG9vbHRpcEF4aXMuZGF0YUtleS50b1N0cmluZygpKTtcbiAgICAgICAgICBhY3RpdmVQb2ludCA9IGZpbmRFbnRyeUluQXJyYXkocG9pbnRzLCBzcGVjaWZpZWRLZXksIGFjdGl2ZUxhYmVsKTtcbiAgICAgICAgICBiYXNlUG9pbnQgPSBpc1JhbmdlICYmIGJhc2VMaW5lICYmIGZpbmRFbnRyeUluQXJyYXkoYmFzZUxpbmUsIHNwZWNpZmllZEtleSwgYWN0aXZlTGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVBvaW50ID0gcG9pbnRzW2FjdGl2ZVRvb2x0aXBJbmRleF07XG4gICAgICAgICAgYmFzZVBvaW50ID0gaXNSYW5nZSAmJiBiYXNlTGluZSAmJiBiYXNlTGluZVthY3RpdmVUb29sdGlwSW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfLmlzTmlsKGFjdGl2ZVBvaW50KSkge1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBncmFwaGljYWxJdGVtLFxuICAgICAgICAgICAgLi4udGhpcy5yZW5kZXJBY3RpdmVQb2ludHMoe1xuICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICBhY3RpdmVQb2ludCxcbiAgICAgICAgICAgICAgYmFzZVBvaW50LFxuICAgICAgICAgICAgICBjaGlsZEluZGV4OiBhY3RpdmVUb29sdGlwSW5kZXgsXG4gICAgICAgICAgICAgIGlzUmFuZ2UsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1JhbmdlKSB7XG4gICAgICAgIHJldHVybiBbZ3JhcGhpY2FsSXRlbSwgbnVsbCwgbnVsbF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbZ3JhcGhpY2FsSXRlbSwgbnVsbF07XG4gICAgfTtcblxuICAgIHJlbmRlckN1c3RvbWl6ZWQgPSAoZWxlbWVudDogUmVhY3QuUmVhY3RFbGVtZW50KTogUmVhY3QuUmVhY3RFbGVtZW50ID0+XG4gICAgICBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgfSk7XG5cbiAgICByZW5kZXJDbGlwUGF0aCgpIHtcbiAgICAgIGNvbnN0IHsgY2xpcFBhdGhJZCB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb2Zmc2V0OiB7IGxlZnQsIHRvcCwgaGVpZ2h0LCB3aWR0aCB9LFxuICAgICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkZWZzPlxuICAgICAgICAgIDxjbGlwUGF0aCBpZD17Y2xpcFBhdGhJZH0+XG4gICAgICAgICAgICA8cmVjdCB4PXtsZWZ0fSB5PXt0b3B9IGhlaWdodD17aGVpZ2h0fSB3aWR0aD17d2lkdGh9IC8+XG4gICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgPC9kZWZzPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBpZiAoIXZhbGlkYXRlV2lkdGhIZWlnaHQodGhpcykpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgd2lkdGgsIGhlaWdodCwgc3R5bGUsIGNvbXBhY3QsIC4uLm90aGVycyB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IGF0dHJzID0gZmlsdGVyUHJvcHMob3RoZXJzKTtcbiAgICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICAgQ2FydGVzaWFuR3JpZDogeyBoYW5kbGVyOiB0aGlzLnJlbmRlckdyaWQsIG9uY2U6IHRydWUgfSxcbiAgICAgICAgUmVmZXJlbmNlQXJlYTogeyBoYW5kbGVyOiB0aGlzLnJlbmRlclJlZmVyZW5jZUVsZW1lbnQgfSxcbiAgICAgICAgUmVmZXJlbmNlTGluZTogeyBoYW5kbGVyOiB0aGlzLnJlbmRlclJlZmVyZW5jZUVsZW1lbnQgfSxcbiAgICAgICAgUmVmZXJlbmNlRG90OiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyUmVmZXJlbmNlRWxlbWVudCB9LFxuICAgICAgICBYQXhpczogeyBoYW5kbGVyOiB0aGlzLnJlbmRlclhBeGlzIH0sXG4gICAgICAgIFlBeGlzOiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyWUF4aXMgfSxcbiAgICAgICAgQnJ1c2g6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJCcnVzaCwgb25jZTogdHJ1ZSB9LFxuICAgICAgICBCYXI6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJHcmFwaGljQ2hpbGQgfSxcbiAgICAgICAgTGluZTogeyBoYW5kbGVyOiB0aGlzLnJlbmRlckdyYXBoaWNDaGlsZCB9LFxuICAgICAgICBBcmVhOiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyR3JhcGhpY0NoaWxkIH0sXG4gICAgICAgIFJhZGFyOiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyR3JhcGhpY0NoaWxkIH0sXG4gICAgICAgIFJhZGlhbEJhcjogeyBoYW5kbGVyOiB0aGlzLnJlbmRlckdyYXBoaWNDaGlsZCB9LFxuICAgICAgICBTY2F0dGVyOiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyR3JhcGhpY0NoaWxkIH0sXG4gICAgICAgIFBpZTogeyBoYW5kbGVyOiB0aGlzLnJlbmRlckdyYXBoaWNDaGlsZCB9LFxuICAgICAgICBGdW5uZWw6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJHcmFwaGljQ2hpbGQgfSxcbiAgICAgICAgVG9vbHRpcDogeyBoYW5kbGVyOiB0aGlzLnJlbmRlckN1cnNvciwgb25jZTogdHJ1ZSB9LFxuICAgICAgICBQb2xhckdyaWQ6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJQb2xhckdyaWQsIG9uY2U6IHRydWUgfSxcbiAgICAgICAgUG9sYXJBbmdsZUF4aXM6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJQb2xhckF4aXMgfSxcbiAgICAgICAgUG9sYXJSYWRpdXNBeGlzOiB7IGhhbmRsZXI6IHRoaXMucmVuZGVyUG9sYXJBeGlzIH0sXG4gICAgICAgIEN1c3RvbWl6ZWQ6IHsgaGFuZGxlcjogdGhpcy5yZW5kZXJDdXN0b21pemVkIH0sXG4gICAgICB9IGFzIGFueTtcblxuICAgICAgLy8gVGhlIFwiY29tcGFjdFwiIG1vZGUgaXMgbWFpbmx5IHVzZWQgYXMgdGhlIHBhbm9yYW1hIHdpdGhpbiBCcnVzaFxuICAgICAgaWYgKGNvbXBhY3QpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8U3VyZmFjZSB7Li4uYXR0cnN9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgICAgICAge3RoaXMucmVuZGVyQ2xpcFBhdGgoKX1cbiAgICAgICAgICAgIHtyZW5kZXJCeU9yZGVyKGNoaWxkcmVuLCBtYXApfVxuICAgICAgICAgIDwvU3VyZmFjZT5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5wYXJzZUV2ZW50c09mV3JhcHBlcigpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtd3JhcHBlcicsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIGN1cnNvcjogJ2RlZmF1bHQnLCB3aWR0aCwgaGVpZ2h0LCAuLi5zdHlsZSB9fVxuICAgICAgICAgIHsuLi5ldmVudHN9XG4gICAgICAgICAgcmVmPXtub2RlID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gbm9kZTtcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFN1cmZhY2Ugey4uLmF0dHJzfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlckNsaXBQYXRoKCl9XG4gICAgICAgICAgICB7cmVuZGVyQnlPcmRlcihjaGlsZHJlbiwgbWFwKX1cbiAgICAgICAgICA8L1N1cmZhY2U+XG4gICAgICAgICAge3RoaXMucmVuZGVyTGVnZW5kKCl9XG4gICAgICAgICAge3RoaXMucmVuZGVyVG9vbHRpcCgpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vZGUsIFJlYWN0RWxlbWVudCwgY3JlYXRlRWxlbWVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi9UZXh0JztcbmltcG9ydCB7IGZpbmRBbGxCeVR5cGUgfSBmcm9tICcuLi91dGlsL1JlYWN0VXRpbHMnO1xuaW1wb3J0IHsgaXNOdW1PclN0ciwgaXNOdW1iZXIsIGlzUGVyY2VudCwgZ2V0UGVyY2VudFZhbHVlLCB1bmlxdWVJZCwgbWF0aFNpZ24gfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBwb2xhclRvQ2FydGVzaWFuIH0gZnJvbSAnLi4vdXRpbC9Qb2xhclV0aWxzJztcbmltcG9ydCB7IGZpbHRlclByb3BzLCBWaWV3Qm94LCBQb2xhclZpZXdCb3gsIENhcnRlc2lhblZpZXdCb3ggfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgQ29udGVudFR5cGUgPSBSZWFjdEVsZW1lbnQgfCAoKHByb3BzOiBQcm9wcykgPT4gUmVhY3ROb2RlKTtcblxuaW50ZXJmYWNlIExhYmVsUHJvcHMge1xuICB2aWV3Qm94PzogVmlld0JveDtcbiAgcGFyZW50Vmlld0JveD86IFZpZXdCb3g7XG4gIGZvcm1hdHRlcj86IEZ1bmN0aW9uO1xuICB2YWx1ZT86IG51bWJlciB8IHN0cmluZztcbiAgb2Zmc2V0PzogbnVtYmVyO1xuICBwb3NpdGlvbj86XG4gICAgfCAndG9wJ1xuICAgIHwgJ2xlZnQnXG4gICAgfCAncmlnaHQnXG4gICAgfCAnYm90dG9tJ1xuICAgIHwgJ2luc2lkZSdcbiAgICB8ICdvdXRzaWRlJ1xuICAgIHwgJ2luc2lkZUxlZnQnXG4gICAgfCAnaW5zaWRlUmlnaHQnXG4gICAgfCAnaW5zaWRlVG9wJ1xuICAgIHwgJ2luc2lkZUJvdHRvbSdcbiAgICB8ICdpbnNpZGVUb3BMZWZ0J1xuICAgIHwgJ2luc2lkZUJvdHRvbUxlZnQnXG4gICAgfCAnaW5zaWRlVG9wUmlnaHQnXG4gICAgfCAnaW5zaWRlQm90dG9tUmlnaHQnXG4gICAgfCAnaW5zaWRlU3RhcnQnXG4gICAgfCAnaW5zaWRlRW5kJ1xuICAgIHwgJ2VuZCdcbiAgICB8ICdjZW50ZXInXG4gICAgfCAnY2VudGVyVG9wJ1xuICAgIHwgJ2NlbnRlckJvdHRvbSdcbiAgICB8ICdtaWRkbGUnXG4gICAgfCB7XG4gICAgICAgIHg/OiBudW1iZXI7XG4gICAgICAgIHk/OiBudW1iZXI7XG4gICAgICB9O1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb250ZW50PzogQ29udGVudFR5cGU7XG4gIHRleHRCcmVha0FsbD86IGJvb2xlYW47XG4gIGFuZ2xlPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IE9taXQ8U1ZHUHJvcHM8U1ZHVGV4dEVsZW1lbnQ+LCAndmlld0JveCc+ICYgTGFiZWxQcm9wcztcblxuZXhwb3J0IHR5cGUgSW1wbGljaXRMYWJlbFR5cGUgPVxuICB8IGJvb2xlYW5cbiAgfCBzdHJpbmdcbiAgfCBudW1iZXJcbiAgfCBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD5cbiAgfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PilcbiAgfCBQcm9wcztcblxuY29uc3QgZ2V0TGFiZWwgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgdmFsdWUsIGZvcm1hdHRlciB9ID0gcHJvcHM7XG4gIGNvbnN0IGxhYmVsID0gXy5pc05pbChwcm9wcy5jaGlsZHJlbikgPyB2YWx1ZSA6IHByb3BzLmNoaWxkcmVuO1xuXG4gIGlmIChfLmlzRnVuY3Rpb24oZm9ybWF0dGVyKSkge1xuICAgIHJldHVybiBmb3JtYXR0ZXIobGFiZWwpO1xuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufTtcblxuY29uc3QgZ2V0RGVsdGFBbmdsZSA9IChzdGFydEFuZ2xlOiBudW1iZXIsIGVuZEFuZ2xlOiBudW1iZXIpID0+IHtcbiAgY29uc3Qgc2lnbiA9IG1hdGhTaWduKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gIGNvbnN0IGRlbHRhQW5nbGUgPSBNYXRoLm1pbihNYXRoLmFicyhlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpLCAzNjApO1xuXG4gIHJldHVybiBzaWduICogZGVsdGFBbmdsZTtcbn07XG5cbmNvbnN0IHJlbmRlclJhZGlhbExhYmVsID0gKGxhYmVsUHJvcHM6IFByb3BzLCBsYWJlbDogUmVhY3ROb2RlLCBhdHRyczogU1ZHUHJvcHM8U1ZHVGV4dEVsZW1lbnQ+KSA9PiB7XG4gIGNvbnN0IHsgcG9zaXRpb24sIHZpZXdCb3gsIG9mZnNldCwgY2xhc3NOYW1lIH0gPSBsYWJlbFByb3BzO1xuICBjb25zdCB7IGN4LCBjeSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgY2xvY2tXaXNlIH0gPSB2aWV3Qm94IGFzIFBvbGFyVmlld0JveDtcbiAgY29uc3QgcmFkaXVzID0gKGlubmVyUmFkaXVzICsgb3V0ZXJSYWRpdXMpIC8gMjtcbiAgY29uc3QgZGVsdGFBbmdsZSA9IGdldERlbHRhQW5nbGUoc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICBjb25zdCBzaWduID0gZGVsdGFBbmdsZSA+PSAwID8gMSA6IC0xO1xuICBsZXQgbGFiZWxBbmdsZSwgZGlyZWN0aW9uO1xuXG4gIGlmIChwb3NpdGlvbiA9PT0gJ2luc2lkZVN0YXJ0Jykge1xuICAgIGxhYmVsQW5nbGUgPSBzdGFydEFuZ2xlICsgc2lnbiAqIG9mZnNldDtcbiAgICBkaXJlY3Rpb24gPSBjbG9ja1dpc2U7XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdpbnNpZGVFbmQnKSB7XG4gICAgbGFiZWxBbmdsZSA9IGVuZEFuZ2xlIC0gc2lnbiAqIG9mZnNldDtcbiAgICBkaXJlY3Rpb24gPSAhY2xvY2tXaXNlO1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnZW5kJykge1xuICAgIGxhYmVsQW5nbGUgPSBlbmRBbmdsZSArIHNpZ24gKiBvZmZzZXQ7XG4gICAgZGlyZWN0aW9uID0gY2xvY2tXaXNlO1xuICB9XG5cbiAgZGlyZWN0aW9uID0gZGVsdGFBbmdsZSA8PSAwID8gZGlyZWN0aW9uIDogIWRpcmVjdGlvbjtcblxuICBjb25zdCBzdGFydFBvaW50ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgbGFiZWxBbmdsZSk7XG4gIGNvbnN0IGVuZFBvaW50ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgbGFiZWxBbmdsZSArIChkaXJlY3Rpb24gPyAxIDogLTEpICogMzU5KTtcbiAgY29uc3QgcGF0aCA9IGBNJHtzdGFydFBvaW50Lnh9LCR7c3RhcnRQb2ludC55fVxuICAgIEEke3JhZGl1c30sJHtyYWRpdXN9LDAsMSwke2RpcmVjdGlvbiA/IDAgOiAxfSxcbiAgICAke2VuZFBvaW50Lnh9LCR7ZW5kUG9pbnQueX1gO1xuICBjb25zdCBpZCA9IF8uaXNOaWwobGFiZWxQcm9wcy5pZCkgPyB1bmlxdWVJZCgncmVjaGFydHMtcmFkaWFsLWxpbmUtJykgOiBsYWJlbFByb3BzLmlkO1xuXG4gIHJldHVybiAoXG4gICAgPHRleHQgey4uLmF0dHJzfSBkb21pbmFudEJhc2VsaW5lPVwiY2VudHJhbFwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtcmFkaWFsLWJhci1sYWJlbCcsIGNsYXNzTmFtZSl9PlxuICAgICAgPGRlZnM+XG4gICAgICAgIDxwYXRoIGlkPXtpZH0gZD17cGF0aH0gLz5cbiAgICAgIDwvZGVmcz5cbiAgICAgIDx0ZXh0UGF0aCB4bGlua0hyZWY9e2AjJHtpZH1gfT57bGFiZWx9PC90ZXh0UGF0aD5cbiAgICA8L3RleHQ+XG4gICk7XG59O1xuXG5jb25zdCBnZXRBdHRyc09mUG9sYXJMYWJlbCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyB2aWV3Qm94LCBvZmZzZXQsIHBvc2l0aW9uIH0gPSBwcm9wcztcbiAgY29uc3QgeyBjeCwgY3ksIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfSA9IHZpZXdCb3ggYXMgUG9sYXJWaWV3Qm94O1xuICBjb25zdCBtaWRBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcblxuICBpZiAocG9zaXRpb24gPT09ICdvdXRzaWRlJykge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIG91dGVyUmFkaXVzICsgb2Zmc2V0LCBtaWRBbmdsZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB0ZXh0QW5jaG9yOiB4ID49IGN4ID8gJ3N0YXJ0JyA6ICdlbmQnLFxuICAgICAgdmVydGljYWxBbmNob3I6ICdtaWRkbGUnLFxuICAgIH07XG4gIH1cblxuICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGN4LFxuICAgICAgeTogY3ksXG4gICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiAnbWlkZGxlJyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyVG9wJykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBjeCxcbiAgICAgIHk6IGN5LFxuICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogJ3N0YXJ0JyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyQm90dG9tJykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBjeCxcbiAgICAgIHk6IGN5LFxuICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogJ2VuZCcsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHIgPSAoaW5uZXJSYWRpdXMgKyBvdXRlclJhZGl1cykgLyAyO1xuICBjb25zdCB7IHgsIHkgfSA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCByLCBtaWRBbmdsZSk7XG5cbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHksXG4gICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG4gICAgdmVydGljYWxBbmNob3I6ICdtaWRkbGUnLFxuICB9O1xufTtcblxuY29uc3QgZ2V0QXR0cnNPZkNhcnRlc2lhbkxhYmVsID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHZpZXdCb3gsIHBhcmVudFZpZXdCb3gsIG9mZnNldCwgcG9zaXRpb24gfSA9IHByb3BzO1xuICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHZpZXdCb3ggYXMgQ2FydGVzaWFuVmlld0JveDtcblxuICAvLyBEZWZpbmUgdmVydGljYWwgb2Zmc2V0cyBhbmQgcG9zaXRpb24gaW52ZXJ0cyBiYXNlZCBvbiB0aGUgdmFsdWUgYmVpbmcgcG9zaXRpdmUgb3IgbmVnYXRpdmVcbiAgY29uc3QgdmVydGljYWxTaWduID0gaGVpZ2h0ID49IDAgPyAxIDogLTE7XG4gIGNvbnN0IHZlcnRpY2FsT2Zmc2V0ID0gdmVydGljYWxTaWduICogb2Zmc2V0O1xuICBjb25zdCB2ZXJ0aWNhbEVuZCA9IHZlcnRpY2FsU2lnbiA+IDAgPyAnZW5kJyA6ICdzdGFydCc7XG4gIGNvbnN0IHZlcnRpY2FsU3RhcnQgPSB2ZXJ0aWNhbFNpZ24gPiAwID8gJ3N0YXJ0JyA6ICdlbmQnO1xuXG4gIC8vIERlZmluZSBob3Jpem9udGFsIG9mZnNldHMgYW5kIHBvc2l0aW9uIGludmVydHMgYmFzZWQgb24gdGhlIHZhbHVlIGJlaW5nIHBvc2l0aXZlIG9yIG5lZ2F0aXZlXG4gIGNvbnN0IGhvcml6b250YWxTaWduID0gd2lkdGggPj0gMCA/IDEgOiAtMTtcbiAgY29uc3QgaG9yaXpvbnRhbE9mZnNldCA9IGhvcml6b250YWxTaWduICogb2Zmc2V0O1xuICBjb25zdCBob3Jpem9udGFsRW5kID0gaG9yaXpvbnRhbFNpZ24gPiAwID8gJ2VuZCcgOiAnc3RhcnQnO1xuICBjb25zdCBob3Jpem9udGFsU3RhcnQgPSBob3Jpem9udGFsU2lnbiA+IDAgPyAnc3RhcnQnIDogJ2VuZCc7XG5cbiAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgIGNvbnN0IGF0dHJzID0ge1xuICAgICAgeDogeCArIHdpZHRoIC8gMixcbiAgICAgIHk6IHkgLSB2ZXJ0aWNhbFNpZ24gKiBvZmZzZXQsXG4gICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiB2ZXJ0aWNhbEVuZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmF0dHJzLFxuICAgICAgLi4uKHBhcmVudFZpZXdCb3hcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KHkgLSAocGFyZW50Vmlld0JveCBhcyBDYXJ0ZXNpYW5WaWV3Qm94KS55LCAwKSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fSksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIHg6IHggKyB3aWR0aCAvIDIsXG4gICAgICB5OiB5ICsgaGVpZ2h0ICsgdmVydGljYWxPZmZzZXQsXG4gICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiB2ZXJ0aWNhbFN0YXJ0LFxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uYXR0cnMsXG4gICAgICAuLi4ocGFyZW50Vmlld0JveFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgoXG4gICAgICAgICAgICAgIChwYXJlbnRWaWV3Qm94IGFzIENhcnRlc2lhblZpZXdCb3gpLnkgKyAocGFyZW50Vmlld0JveCBhcyBDYXJ0ZXNpYW5WaWV3Qm94KS5oZWlnaHQgLSAoeSArIGhlaWdodCksXG4gICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIHg6IHggLSBob3Jpem9udGFsT2Zmc2V0LFxuICAgICAgeTogeSArIGhlaWdodCAvIDIsXG4gICAgICB0ZXh0QW5jaG9yOiBob3Jpem9udGFsRW5kLFxuICAgICAgdmVydGljYWxBbmNob3I6ICdtaWRkbGUnLFxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uYXR0cnMsXG4gICAgICAuLi4ocGFyZW50Vmlld0JveFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heChhdHRycy54IC0gKHBhcmVudFZpZXdCb3ggYXMgQ2FydGVzaWFuVmlld0JveCkueCwgMCksXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICB4OiB4ICsgd2lkdGggKyBob3Jpem9udGFsT2Zmc2V0LFxuICAgICAgeTogeSArIGhlaWdodCAvIDIsXG4gICAgICB0ZXh0QW5jaG9yOiBob3Jpem9udGFsU3RhcnQsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogJ21pZGRsZScsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYXR0cnMsXG4gICAgICAuLi4ocGFyZW50Vmlld0JveFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heChcbiAgICAgICAgICAgICAgKHBhcmVudFZpZXdCb3ggYXMgQ2FydGVzaWFuVmlld0JveCkueCArIChwYXJlbnRWaWV3Qm94IGFzIENhcnRlc2lhblZpZXdCb3gpLndpZHRoIC0gYXR0cnMueCxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgc2l6ZUF0dHJzID0gcGFyZW50Vmlld0JveCA/IHsgd2lkdGgsIGhlaWdodCB9IDoge307XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnaW5zaWRlTGVmdCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIGhvcml6b250YWxPZmZzZXQsXG4gICAgICB5OiB5ICsgaGVpZ2h0IC8gMixcbiAgICAgIHRleHRBbmNob3I6IGhvcml6b250YWxTdGFydCxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiAnbWlkZGxlJyxcbiAgICAgIC4uLnNpemVBdHRycyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnaW5zaWRlUmlnaHQnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggKyB3aWR0aCAtIGhvcml6b250YWxPZmZzZXQsXG4gICAgICB5OiB5ICsgaGVpZ2h0IC8gMixcbiAgICAgIHRleHRBbmNob3I6IGhvcml6b250YWxFbmQsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogJ21pZGRsZScsXG4gICAgICAuLi5zaXplQXR0cnMsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbiA9PT0gJ2luc2lkZVRvcCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIHdpZHRoIC8gMixcbiAgICAgIHk6IHkgKyB2ZXJ0aWNhbE9mZnNldCxcbiAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgICAgdmVydGljYWxBbmNob3I6IHZlcnRpY2FsU3RhcnQsXG4gICAgICAuLi5zaXplQXR0cnMsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbiA9PT0gJ2luc2lkZUJvdHRvbScpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIHdpZHRoIC8gMixcbiAgICAgIHk6IHkgKyBoZWlnaHQgLSB2ZXJ0aWNhbE9mZnNldCxcbiAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgICAgdmVydGljYWxBbmNob3I6IHZlcnRpY2FsRW5kLFxuICAgICAgLi4uc2l6ZUF0dHJzLFxuICAgIH07XG4gIH1cblxuICBpZiAocG9zaXRpb24gPT09ICdpbnNpZGVUb3BMZWZ0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgaG9yaXpvbnRhbE9mZnNldCxcbiAgICAgIHk6IHkgKyB2ZXJ0aWNhbE9mZnNldCxcbiAgICAgIHRleHRBbmNob3I6IGhvcml6b250YWxTdGFydCxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiB2ZXJ0aWNhbFN0YXJ0LFxuICAgICAgLi4uc2l6ZUF0dHJzLFxuICAgIH07XG4gIH1cblxuICBpZiAocG9zaXRpb24gPT09ICdpbnNpZGVUb3BSaWdodCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIHdpZHRoIC0gaG9yaXpvbnRhbE9mZnNldCxcbiAgICAgIHk6IHkgKyB2ZXJ0aWNhbE9mZnNldCxcbiAgICAgIHRleHRBbmNob3I6IGhvcml6b250YWxFbmQsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogdmVydGljYWxTdGFydCxcbiAgICAgIC4uLnNpemVBdHRycyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnaW5zaWRlQm90dG9tTGVmdCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIGhvcml6b250YWxPZmZzZXQsXG4gICAgICB5OiB5ICsgaGVpZ2h0IC0gdmVydGljYWxPZmZzZXQsXG4gICAgICB0ZXh0QW5jaG9yOiBob3Jpem9udGFsU3RhcnQsXG4gICAgICB2ZXJ0aWNhbEFuY2hvcjogdmVydGljYWxFbmQsXG4gICAgICAuLi5zaXplQXR0cnMsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbiA9PT0gJ2luc2lkZUJvdHRvbVJpZ2h0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgd2lkdGggLSBob3Jpem9udGFsT2Zmc2V0LFxuICAgICAgeTogeSArIGhlaWdodCAtIHZlcnRpY2FsT2Zmc2V0LFxuICAgICAgdGV4dEFuY2hvcjogaG9yaXpvbnRhbEVuZCxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiB2ZXJ0aWNhbEVuZCxcbiAgICAgIC4uLnNpemVBdHRycyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKFxuICAgIF8uaXNPYmplY3QocG9zaXRpb24pICYmXG4gICAgKGlzTnVtYmVyKHBvc2l0aW9uLngpIHx8IGlzUGVyY2VudChwb3NpdGlvbi54KSkgJiZcbiAgICAoaXNOdW1iZXIocG9zaXRpb24ueSkgfHwgaXNQZXJjZW50KHBvc2l0aW9uLnkpKVxuICApIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIGdldFBlcmNlbnRWYWx1ZShwb3NpdGlvbi54LCB3aWR0aCksXG4gICAgICB5OiB5ICsgZ2V0UGVyY2VudFZhbHVlKHBvc2l0aW9uLnksIGhlaWdodCksXG4gICAgICB0ZXh0QW5jaG9yOiAnZW5kJyxcbiAgICAgIHZlcnRpY2FsQW5jaG9yOiAnZW5kJyxcbiAgICAgIC4uLnNpemVBdHRycyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiB4ICsgd2lkdGggLyAyLFxuICAgIHk6IHkgKyBoZWlnaHQgLyAyLFxuICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuICAgIHZlcnRpY2FsQW5jaG9yOiAnbWlkZGxlJyxcbiAgICAuLi5zaXplQXR0cnMsXG4gIH07XG59O1xuXG5jb25zdCBpc1BvbGFyID0gKHZpZXdCb3g6IENhcnRlc2lhblZpZXdCb3ggfCBQb2xhclZpZXdCb3gpID0+IGlzTnVtYmVyKCh2aWV3Qm94IGFzIFBvbGFyVmlld0JveCkuY3gpO1xuXG5leHBvcnQgZnVuY3Rpb24gTGFiZWwocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHsgdmlld0JveCwgcG9zaXRpb24sIHZhbHVlLCBjaGlsZHJlbiwgY29udGVudCwgY2xhc3NOYW1lID0gJycsIHRleHRCcmVha0FsbCB9ID0gcHJvcHM7XG5cbiAgaWYgKCF2aWV3Qm94IHx8IChfLmlzTmlsKHZhbHVlKSAmJiBfLmlzTmlsKGNoaWxkcmVuKSAmJiAhaXNWYWxpZEVsZW1lbnQoY29udGVudCkgJiYgIV8uaXNGdW5jdGlvbihjb250ZW50KSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc1ZhbGlkRWxlbWVudChjb250ZW50KSkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY29udGVudCwgcHJvcHMpO1xuICB9XG5cbiAgbGV0IGxhYmVsOiBSZWFjdE5vZGU7XG4gIGlmIChfLmlzRnVuY3Rpb24oY29udGVudCkpIHtcbiAgICBsYWJlbCA9IGNyZWF0ZUVsZW1lbnQoY29udGVudCBhcyBhbnksIHByb3BzKTtcblxuICAgIGlmIChpc1ZhbGlkRWxlbWVudChsYWJlbCkpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGFiZWwgPSBnZXRMYWJlbChwcm9wcyk7XG4gIH1cblxuICBjb25zdCBpc1BvbGFyTGFiZWwgPSBpc1BvbGFyKHZpZXdCb3gpO1xuICBjb25zdCBhdHRycyA9IGZpbHRlclByb3BzKHByb3BzLCB0cnVlKTtcblxuICBpZiAoaXNQb2xhckxhYmVsICYmIChwb3NpdGlvbiA9PT0gJ2luc2lkZVN0YXJ0JyB8fCBwb3NpdGlvbiA9PT0gJ2luc2lkZUVuZCcgfHwgcG9zaXRpb24gPT09ICdlbmQnKSkge1xuICAgIHJldHVybiByZW5kZXJSYWRpYWxMYWJlbChwcm9wcywgbGFiZWwsIGF0dHJzKTtcbiAgfVxuXG4gIGNvbnN0IHBvc2l0aW9uQXR0cnMgPSBpc1BvbGFyTGFiZWwgPyBnZXRBdHRyc09mUG9sYXJMYWJlbChwcm9wcykgOiBnZXRBdHRyc09mQ2FydGVzaWFuTGFiZWwocHJvcHMpO1xuXG4gIHJldHVybiAoXG4gICAgPFRleHRcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtbGFiZWwnLCBjbGFzc05hbWUpfVxuICAgICAgey4uLmF0dHJzfVxuICAgICAgey4uLihwb3NpdGlvbkF0dHJzIGFzIGFueSl9XG4gICAgICBicmVha0FsbD17dGV4dEJyZWFrQWxsfVxuICAgID5cbiAgICAgIHtsYWJlbH1cbiAgICA8L1RleHQ+XG4gICk7XG59XG5cbkxhYmVsLmRpc3BsYXlOYW1lID0gJ0xhYmVsJztcbkxhYmVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgb2Zmc2V0OiA1LFxufTtcblxuY29uc3QgcGFyc2VWaWV3Qm94ID0gKHByb3BzOiBhbnkpID0+IHtcbiAgY29uc3Qge1xuICAgIGN4LFxuICAgIGN5LFxuICAgIGFuZ2xlLFxuICAgIHN0YXJ0QW5nbGUsXG4gICAgZW5kQW5nbGUsXG4gICAgcixcbiAgICByYWRpdXMsXG4gICAgaW5uZXJSYWRpdXMsXG4gICAgb3V0ZXJSYWRpdXMsXG4gICAgeCxcbiAgICB5LFxuICAgIHRvcCxcbiAgICBsZWZ0LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBjbG9ja1dpc2UsXG4gICAgbGFiZWxWaWV3Qm94LFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKGxhYmVsVmlld0JveCkge1xuICAgIHJldHVybiBsYWJlbFZpZXdCb3g7XG4gIH1cblxuICBpZiAoaXNOdW1iZXIod2lkdGgpICYmIGlzTnVtYmVyKGhlaWdodCkpIHtcbiAgICBpZiAoaXNOdW1iZXIoeCkgJiYgaXNOdW1iZXIoeSkpIHtcbiAgICAgIHJldHVybiB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKHRvcCkgJiYgaXNOdW1iZXIobGVmdCkpIHtcbiAgICAgIHJldHVybiB7IHg6IHRvcCwgeTogbGVmdCwgd2lkdGgsIGhlaWdodCB9O1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc051bWJlcih4KSAmJiBpc051bWJlcih5KSkge1xuICAgIHJldHVybiB7IHgsIHksIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgfVxuXG4gIGlmIChpc051bWJlcihjeCkgJiYgaXNOdW1iZXIoY3kpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN4LFxuICAgICAgY3ksXG4gICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlIHx8IGFuZ2xlIHx8IDAsXG4gICAgICBlbmRBbmdsZTogZW5kQW5nbGUgfHwgYW5nbGUgfHwgMCxcbiAgICAgIGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyB8fCAwLFxuICAgICAgb3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzIHx8IHJhZGl1cyB8fCByIHx8IDAsXG4gICAgICBjbG9ja1dpc2UsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9wcy52aWV3Qm94KSB7XG4gICAgcmV0dXJuIHByb3BzLnZpZXdCb3g7XG4gIH1cblxuICByZXR1cm4ge307XG59O1xuXG5jb25zdCBwYXJzZUxhYmVsID0gKGxhYmVsOiBhbnksIHZpZXdCb3g6IFZpZXdCb3gpID0+IHtcbiAgaWYgKCFsYWJlbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGxhYmVsID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIDxMYWJlbCBrZXk9XCJsYWJlbC1pbXBsaWNpdFwiIHZpZXdCb3g9e3ZpZXdCb3h9IC8+O1xuICB9XG5cbiAgaWYgKGlzTnVtT3JTdHIobGFiZWwpKSB7XG4gICAgcmV0dXJuIDxMYWJlbCBrZXk9XCJsYWJlbC1pbXBsaWNpdFwiIHZpZXdCb3g9e3ZpZXdCb3h9IHZhbHVlPXtsYWJlbH0gLz47XG4gIH1cblxuICBpZiAoaXNWYWxpZEVsZW1lbnQobGFiZWwpKSB7XG4gICAgaWYgKGxhYmVsLnR5cGUgPT09IExhYmVsKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGxhYmVsIGFzIGFueSwgeyBrZXk6ICdsYWJlbC1pbXBsaWNpdCcsIHZpZXdCb3ggfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxMYWJlbCBrZXk9XCJsYWJlbC1pbXBsaWNpdFwiIGNvbnRlbnQ9e2xhYmVsfSB2aWV3Qm94PXt2aWV3Qm94fSAvPjtcbiAgfVxuXG4gIGlmIChfLmlzRnVuY3Rpb24obGFiZWwpKSB7XG4gICAgcmV0dXJuIDxMYWJlbCBrZXk9XCJsYWJlbC1pbXBsaWNpdFwiIGNvbnRlbnQ9e2xhYmVsfSB2aWV3Qm94PXt2aWV3Qm94fSAvPjtcbiAgfVxuXG4gIGlmIChfLmlzT2JqZWN0KGxhYmVsKSkge1xuICAgIHJldHVybiA8TGFiZWwgdmlld0JveD17dmlld0JveH0gey4uLmxhYmVsfSBrZXk9XCJsYWJlbC1pbXBsaWNpdFwiIC8+O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCByZW5kZXJDYWxsQnlQYXJlbnQgPSAocGFyZW50UHJvcHM6IGFueSwgdmlld0JveD86IFZpZXdCb3gsIGNoZWNrUHJvcHNMYWJlbCA9IHRydWUpID0+IHtcbiAgaWYgKCFwYXJlbnRQcm9wcyB8fCAoIXBhcmVudFByb3BzLmNoaWxkcmVuICYmIGNoZWNrUHJvcHNMYWJlbCAmJiAhcGFyZW50UHJvcHMubGFiZWwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcGFyZW50UHJvcHM7XG4gIGNvbnN0IHBhcmVudFZpZXdCb3ggPSBwYXJzZVZpZXdCb3gocGFyZW50UHJvcHMpO1xuXG4gIGNvbnN0IGV4cGxpY2l0Q2hpbGRyZW4gPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBMYWJlbC5kaXNwbGF5TmFtZSkubWFwKChjaGlsZDogYW55LCBpbmRleDogbnVtYmVyKSA9PlxuICAgIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgdmlld0JveDogdmlld0JveCB8fCBwYXJlbnRWaWV3Qm94LFxuICAgICAga2V5OiBgbGFiZWwtJHtpbmRleH1gLFxuICAgIH0pLFxuICApO1xuXG4gIGlmICghY2hlY2tQcm9wc0xhYmVsKSB7XG4gICAgcmV0dXJuIGV4cGxpY2l0Q2hpbGRyZW47XG4gIH1cbiAgY29uc3QgaW1wbGljaXRMYWJlbCA9IHBhcnNlTGFiZWwocGFyZW50UHJvcHMubGFiZWwsIHZpZXdCb3ggfHwgcGFyZW50Vmlld0JveCk7XG5cbiAgcmV0dXJuIFtpbXBsaWNpdExhYmVsLCAuLi5leHBsaWNpdENoaWxkcmVuXTtcbn07XG5cbkxhYmVsLnBhcnNlVmlld0JveCA9IHBhcnNlVmlld0JveDtcbkxhYmVsLnJlbmRlckNhbGxCeVBhcmVudCA9IHJlbmRlckNhbGxCeVBhcmVudDtcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBnZXRUaWNrc09mU2NhbGUsIHBhcnNlU2NhbGUsIGNoZWNrRG9tYWluT2ZTY2FsZSwgZ2V0QmFuZFNpemVPZkF4aXMgfSBmcm9tICcuL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgQ29vcmRpbmF0ZSwgQXhpc1R5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHNjYWxlIGZ1bmN0aW9uLCBwb3NpdGlvbiwgd2lkdGgsIGhlaWdodCBvZiBheGVzXG4gKiBAcGFyYW0gIHtPYmplY3R9IHByb3BzICAgICBMYXRlc3QgcHJvcHNcbiAqIEBwYXJhbSAge09iamVjdH0gYXhpc01hcCAgIFRoZSBjb25maWd1cmF0aW9uIG9mIGF4ZXNcbiAqIEBwYXJhbSAge09iamVjdH0gb2Zmc2V0ICAgIFRoZSBvZmZzZXQgb2YgbWFpbiBwYXJ0IGluIHRoZSBzdmcgZWxlbWVudFxuICogQHBhcmFtICB7U3RyaW5nfSBheGlzVHlwZSAgVGhlIHR5cGUgb2YgYXhlcywgeC1heGlzIG9yIHktYXhpc1xuICogQHBhcmFtICB7U3RyaW5nfSBjaGFydE5hbWUgVGhlIG5hbWUgb2YgY2hhcnRcbiAqIEByZXR1cm4ge09iamVjdH0gQ29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0QXhpc01hcCA9IChwcm9wczogYW55LCBheGlzTWFwOiBhbnksIG9mZnNldDogYW55LCBheGlzVHlwZTogQXhpc1R5cGUsIGNoYXJ0TmFtZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbGF5b3V0IH0gPSBwcm9wcztcbiAgY29uc3QgaWRzID0gT2JqZWN0LmtleXMoYXhpc01hcCk7XG4gIGNvbnN0IHN0ZXBzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge1xuICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxuICAgIGxlZnRNaXJyb3I6IG9mZnNldC5sZWZ0LFxuICAgIHJpZ2h0OiB3aWR0aCAtIG9mZnNldC5yaWdodCxcbiAgICByaWdodE1pcnJvcjogd2lkdGggLSBvZmZzZXQucmlnaHQsXG4gICAgdG9wOiBvZmZzZXQudG9wLFxuICAgIHRvcE1pcnJvcjogb2Zmc2V0LnRvcCxcbiAgICBib3R0b206IGhlaWdodCAtIG9mZnNldC5ib3R0b20sXG4gICAgYm90dG9tTWlycm9yOiBoZWlnaHQgLSBvZmZzZXQuYm90dG9tLFxuICB9O1xuXG4gIHJldHVybiBpZHMucmVkdWNlKChyZXN1bHQsIGlkKSA9PiB7XG4gICAgY29uc3QgYXhpcyA9IGF4aXNNYXBbaWRdO1xuICAgIGNvbnN0IHsgb3JpZW50YXRpb24sIGRvbWFpbiwgcGFkZGluZyA9IHt9LCBtaXJyb3IsIHJldmVyc2VkIH0gPSBheGlzO1xuICAgIGNvbnN0IG9mZnNldEtleSA9IGAke29yaWVudGF0aW9ufSR7bWlycm9yID8gJ01pcnJvcicgOiAnJ31gO1xuXG4gICAgbGV0IHJhbmdlLCB4LCB5LCBuZWVkU3BhY2U7XG5cbiAgICBpZiAoYXhpc1R5cGUgPT09ICd4QXhpcycpIHtcbiAgICAgIHJhbmdlID0gW29mZnNldC5sZWZ0ICsgKHBhZGRpbmcubGVmdCB8fCAwKSwgb2Zmc2V0LmxlZnQgKyBvZmZzZXQud2lkdGggLSAocGFkZGluZy5yaWdodCB8fCAwKV07XG4gICAgfSBlbHNlIGlmIChheGlzVHlwZSA9PT0gJ3lBeGlzJykge1xuICAgICAgcmFuZ2UgPVxuICAgICAgICBsYXlvdXQgPT09ICdob3Jpem9udGFsJ1xuICAgICAgICAgID8gW29mZnNldC50b3AgKyBvZmZzZXQuaGVpZ2h0IC0gKHBhZGRpbmcuYm90dG9tIHx8IDApLCBvZmZzZXQudG9wICsgKHBhZGRpbmcudG9wIHx8IDApXVxuICAgICAgICAgIDogW29mZnNldC50b3AgKyAocGFkZGluZy50b3AgfHwgMCksIG9mZnNldC50b3AgKyBvZmZzZXQuaGVpZ2h0IC0gKHBhZGRpbmcuYm90dG9tIHx8IDApXTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHsgcmFuZ2UgfSA9IGF4aXMpO1xuICAgIH1cblxuICAgIGlmIChyZXZlcnNlZCkge1xuICAgICAgcmFuZ2UgPSBbcmFuZ2VbMV0sIHJhbmdlWzBdXTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHNjYWxlLCByZWFsU2NhbGVUeXBlIH0gPSBwYXJzZVNjYWxlKGF4aXMsIGNoYXJ0TmFtZSk7XG4gICAgc2NhbGUuZG9tYWluKGRvbWFpbikucmFuZ2UocmFuZ2UpO1xuICAgIGNoZWNrRG9tYWluT2ZTY2FsZShzY2FsZSk7XG4gICAgY29uc3QgdGlja3MgPSBnZXRUaWNrc09mU2NhbGUoc2NhbGUsIHsgLi4uYXhpcywgcmVhbFNjYWxlVHlwZSB9KTtcblxuICAgIGlmIChheGlzVHlwZSA9PT0gJ3hBeGlzJykge1xuICAgICAgbmVlZFNwYWNlID0gKG9yaWVudGF0aW9uID09PSAndG9wJyAmJiAhbWlycm9yKSB8fCAob3JpZW50YXRpb24gPT09ICdib3R0b20nICYmIG1pcnJvcik7XG4gICAgICB4ID0gb2Zmc2V0LmxlZnQ7XG4gICAgICB5ID0gc3RlcHNbb2Zmc2V0S2V5XSAtIG5lZWRTcGFjZSAqIGF4aXMuaGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoYXhpc1R5cGUgPT09ICd5QXhpcycpIHtcbiAgICAgIG5lZWRTcGFjZSA9IChvcmllbnRhdGlvbiA9PT0gJ2xlZnQnICYmICFtaXJyb3IpIHx8IChvcmllbnRhdGlvbiA9PT0gJ3JpZ2h0JyAmJiBtaXJyb3IpO1xuICAgICAgeCA9IHN0ZXBzW29mZnNldEtleV0gLSBuZWVkU3BhY2UgKiBheGlzLndpZHRoO1xuICAgICAgeSA9IG9mZnNldC50b3A7XG4gICAgfVxuXG4gICAgY29uc3QgZmluYWxBeGlzID0ge1xuICAgICAgLi4uYXhpcyxcbiAgICAgIC4uLnRpY2tzLFxuICAgICAgcmVhbFNjYWxlVHlwZSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgc2NhbGUsXG4gICAgICB3aWR0aDogYXhpc1R5cGUgPT09ICd4QXhpcycgPyBvZmZzZXQud2lkdGggOiBheGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBheGlzVHlwZSA9PT0gJ3lBeGlzJyA/IG9mZnNldC5oZWlnaHQgOiBheGlzLmhlaWdodCxcbiAgICB9O1xuXG4gICAgZmluYWxBeGlzLmJhbmRTaXplID0gZ2V0QmFuZFNpemVPZkF4aXMoZmluYWxBeGlzLCB0aWNrcyBhcyBhbnkpO1xuXG4gICAgaWYgKCFheGlzLmhpZGUgJiYgYXhpc1R5cGUgPT09ICd4QXhpcycpIHtcbiAgICAgIHN0ZXBzW29mZnNldEtleV0gKz0gKG5lZWRTcGFjZSA/IC0xIDogMSkgKiBmaW5hbEF4aXMuaGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoIWF4aXMuaGlkZSkge1xuICAgICAgc3RlcHNbb2Zmc2V0S2V5XSArPSAobmVlZFNwYWNlID8gLTEgOiAxKSAqIGZpbmFsQXhpcy53aWR0aDtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5yZXN1bHQsIFtpZF06IGZpbmFsQXhpcyB9O1xuICB9LCB7fSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVjdFdpdGhQb2ludHMgPSAoeyB4OiB4MSwgeTogeTEgfTogQ29vcmRpbmF0ZSwgeyB4OiB4MiwgeTogeTIgfTogQ29vcmRpbmF0ZSkgPT4gKHtcbiAgeDogTWF0aC5taW4oeDEsIHgyKSxcbiAgeTogTWF0aC5taW4oeTEsIHkyKSxcbiAgd2lkdGg6IE1hdGguYWJzKHgyIC0geDEpLFxuICBoZWlnaHQ6IE1hdGguYWJzKHkyIC0geTEpLFxufSk7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgeCwgeSwgd2lkdGgsIGFuZCBoZWlnaHQgb2YgYSBib3ggZnJvbSB0d28gcmVmZXJlbmNlIHBvaW50cy5cbiAqIEBwYXJhbSAge09iamVjdH0gY29vcmRzICAgICB4MSwgeDIsIHkxLCBhbmQgeTJcbiAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCByZWN0V2l0aENvb3JkcyA9ICh7IHgxLCB5MSwgeDIsIHkyIH06IHsgeDE6IG51bWJlcjsgeTE6IG51bWJlcjsgeDI6IG51bWJlcjsgeTI6IG51bWJlciB9KSA9PlxuICByZWN0V2l0aFBvaW50cyh7IHg6IHgxLCB5OiB5MSB9LCB7IHg6IHgyLCB5OiB5MiB9KTtcblxuZXhwb3J0IGNsYXNzIFNjYWxlSGVscGVyIHtcbiAgc3RhdGljIEVQUyA9IDFlLTQ7XG5cbiAgcHJpdmF0ZSBzY2FsZTogYW55O1xuXG4gIHN0YXRpYyBjcmVhdGUob2JqOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFNjYWxlSGVscGVyKG9iaik7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihzY2FsZTogYW55KSB7XG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICB9XG5cbiAgZ2V0IGRvbWFpbigpIHtcbiAgICByZXR1cm4gdGhpcy5zY2FsZS5kb21haW47XG4gIH1cblxuICBnZXQgcmFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NhbGUucmFuZ2U7XG4gIH1cblxuICBnZXQgcmFuZ2VNaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2UoKVswXTtcbiAgfVxuXG4gIGdldCByYW5nZU1heCgpIHtcbiAgICByZXR1cm4gdGhpcy5yYW5nZSgpWzFdO1xuICB9XG5cbiAgZ2V0IGJhbmR3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2FsZS5iYW5kd2lkdGg7XG4gIH1cblxuICBhcHBseSh2YWx1ZTogYW55LCB7IGJhbmRBd2FyZSwgcG9zaXRpb24gfTogeyBiYW5kQXdhcmU/OiBib29sZWFuOyBwb3NpdGlvbj86IGFueSB9ID0ge30pIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJ0Jzoge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdtaWRkbGUnOiB7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5iYW5kd2lkdGggPyB0aGlzLmJhbmR3aWR0aCgpIC8gMiA6IDA7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUodmFsdWUpICsgb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2VuZCc6IHtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmJhbmR3aWR0aCA/IHRoaXMuYmFuZHdpZHRoKCkgOiAwO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlKHZhbHVlKSArIG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiYW5kQXdhcmUpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuYmFuZHdpZHRoID8gdGhpcy5iYW5kd2lkdGgoKSAvIDIgOiAwO1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGUodmFsdWUpICsgb2Zmc2V0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zY2FsZSh2YWx1ZSk7XG4gIH1cblxuICBpc0luUmFuZ2UodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5yYW5nZSgpO1xuXG4gICAgY29uc3QgZmlyc3QgPSByYW5nZVswXTtcbiAgICBjb25zdCBsYXN0ID0gcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV07XG5cbiAgICByZXR1cm4gZmlyc3QgPD0gbGFzdCA/IHZhbHVlID49IGZpcnN0ICYmIHZhbHVlIDw9IGxhc3QgOiB2YWx1ZSA+PSBsYXN0ICYmIHZhbHVlIDw9IGZpcnN0O1xuICB9XG59XG5cbnR5cGUgU2NhbGVSZXN1bHQ8VD4gPSB7XG4gIFtQIGluIGtleW9mIFRdOiBudW1iZXI7XG59O1xudHlwZSBTY2FsZXM8VD4gPSB7XG4gIFtQIGluIGtleW9mIFRdOiBTY2FsZUhlbHBlcjtcbn07XG50eXBlIFNjYWxlc0FwcGx5PFQ+ID0gKGNvb3JkOiB7IFtQIGluIGtleW9mIFRdOiBhbnkgfSwgb3B0aW9uczogYW55KSA9PiBTY2FsZVJlc3VsdDxUPjtcbnR5cGUgU2NhbGVzSXNJblJhbmdlPFQ+ID0gKGNvb3JkOiB7IFtQIGluIGtleW9mIFRdOiBhbnkgfSkgPT4gYm9vbGVhbjtcbnR5cGUgTGFiZWxlZFNjYWxlczxUPiA9IFNjYWxlczxUPiAmIHsgYXBwbHk6IFNjYWxlc0FwcGx5PFQ+IH0gJiB7IGlzSW5SYW5nZTogU2NhbGVzSXNJblJhbmdlPFQ+IH07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVMYWJlbGVkU2NhbGVzID0gKG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBMYWJlbGVkU2NhbGVzPFJlY29yZDxzdHJpbmcsIGFueT4+ID0+IHtcbiAgY29uc3Qgc2NhbGVzOiBTY2FsZXM8UmVjb3JkPHN0cmluZywgYW55Pj4gPSBPYmplY3Qua2V5cyhvcHRpb25zKS5yZWR1Y2UoXG4gICAgKHJlcywga2V5OiBzdHJpbmcpID0+ICh7XG4gICAgICAuLi5yZXMsXG4gICAgICBba2V5XTogU2NhbGVIZWxwZXIuY3JlYXRlKG9wdGlvbnNba2V5XSksXG4gICAgfSksXG4gICAge30sXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zY2FsZXMsXG4gICAgYXBwbHkoY29vcmQ6IGFueSwgeyBiYW5kQXdhcmUgfTogYW55ID0ge30pIHtcbiAgICAgIHJldHVybiBfLm1hcFZhbHVlcyhjb29yZCwgKHZhbHVlLCBsYWJlbCkgPT4gc2NhbGVzW2xhYmVsXS5hcHBseSh2YWx1ZSwgeyBiYW5kQXdhcmUgfSkpO1xuICAgIH0sXG5cbiAgICBpc0luUmFuZ2UoY29vcmQ6IGFueSkge1xuICAgICAgcmV0dXJuIF8uZXZlcnkoY29vcmQsICh2YWx1ZSwgbGFiZWwpID0+IHNjYWxlc1tsYWJlbF0uaXNJblJhbmdlKHZhbHVlKSk7XG4gICAgfSxcbiAgfSBhcyBMYWJlbGVkU2NhbGVzPFJlY29yZDxzdHJpbmcsIGFueT4+O1xufTtcbiIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlZHVjZUNTU0NhbGMgZnJvbSAncmVkdWNlLWNzcy1jYWxjJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGlzTnVtYmVyLCBpc051bU9yU3RyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGdldFN0cmluZ1NpemUgfSBmcm9tICcuLi91dGlsL0RPTVV0aWxzJztcblxuY29uc3QgQlJFQUtJTkdfU1BBQ0VTID0gL1sgXFxmXFxuXFxyXFx0XFx2XFx1MjAyOFxcdTIwMjldKy87XG5cbmludGVyZmFjZSBXb3JkV2l0aENvbXB1dGVkV2lkdGgge1xuICB3b3JkOiBzdHJpbmc7XG4gIHdpZHRoOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBDYWxjdWxhdGVkV29yZFdpZHRocyB7XG4gIHdvcmRzV2l0aENvbXB1dGVkV2lkdGg6IEFycmF5PFdvcmRXaXRoQ29tcHV0ZWRXaWR0aD47XG4gIHNwYWNlV2lkdGg6IG51bWJlcjtcbn1cblxuY29uc3QgY2FsY3VsYXRlV29yZFdpZHRocyA9IChwcm9wczogUHJvcHMpOiBDYWxjdWxhdGVkV29yZFdpZHRocyA9PiB7XG4gIHRyeSB7XG4gICAgbGV0IHdvcmRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICghXy5pc05pbChwcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9wcy5icmVha0FsbCkge1xuICAgICAgICB3b3JkcyA9IHByb3BzLmNoaWxkcmVuLnRvU3RyaW5nKCkuc3BsaXQoJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd29yZHMgPSBwcm9wcy5jaGlsZHJlbi50b1N0cmluZygpLnNwbGl0KEJSRUFLSU5HX1NQQUNFUyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgd29yZHNXaXRoQ29tcHV0ZWRXaWR0aCA9IHdvcmRzLm1hcCh3b3JkID0+ICh7IHdvcmQsIHdpZHRoOiBnZXRTdHJpbmdTaXplKHdvcmQsIHByb3BzLnN0eWxlKS53aWR0aCB9KSk7XG5cbiAgICBjb25zdCBzcGFjZVdpZHRoID0gcHJvcHMuYnJlYWtBbGwgPyAwIDogZ2V0U3RyaW5nU2l6ZSgnXFx1MDBBMCcsIHByb3BzLnN0eWxlKS53aWR0aDtcblxuICAgIHJldHVybiB7IHdvcmRzV2l0aENvbXB1dGVkV2lkdGgsIHNwYWNlV2lkdGggfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5pbnRlcmZhY2UgVGV4dFByb3BzIHtcbiAgc2NhbGVUb0ZpdD86IGJvb2xlYW47XG4gIGFuZ2xlPzogbnVtYmVyO1xuICB0ZXh0QW5jaG9yPzogJ3N0YXJ0JyB8ICdtaWRkbGUnIHwgJ2VuZCcgfCAnaW5oZXJpdCc7XG4gIHZlcnRpY2FsQW5jaG9yPzogJ3N0YXJ0JyB8ICdtaWRkbGUnIHwgJ2VuZCc7XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgbGluZUhlaWdodD86IG51bWJlciB8IHN0cmluZztcbiAgYnJlYWtBbGw/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IHN0cmluZyB8IG51bWJlcjtcbiAgbWF4TGluZXM/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gT21pdDxTVkdQcm9wczxTVkdUZXh0RWxlbWVudD4sICd0ZXh0QW5jaG9yJyB8ICd2ZXJ0aWNhbEFuY2hvcic+ICYgVGV4dFByb3BzO1xuXG5pbnRlcmZhY2UgV29yZHMge1xuICB3b3JkczogQXJyYXk8c3RyaW5nPjtcbiAgd2lkdGg/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHdvcmRzQnlMaW5lcz86IEFycmF5PFdvcmRzPjtcbiAgcHJldldpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwcmV2U2NhbGVUb0ZpdD86IGJvb2xlYW47XG4gIHByZXZDaGlsZHJlbj86IHN0cmluZyB8IG51bWJlcjtcbiAgcHJldlN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgcHJldkJyZWFrQWxsPzogYm9vbGVhbjtcbn1cblxuY29uc3QgY2FsY3VsYXRlV29yZHNCeUxpbmVzID0gKFxuICBwcm9wczogUHJvcHMsXG4gIGluaXRpYWxXb3Jkc1dpdGhDb21wdXRlZFdpdGg6IEFycmF5PFdvcmRXaXRoQ29tcHV0ZWRXaWR0aD4sXG4gIHNwYWNlV2lkdGg6IG51bWJlcixcbiAgbGluZVdpZHRoOiBudW1iZXIgfCBzdHJpbmcsXG4gIHNjYWxlVG9GaXQ/OiBib29sZWFuLFxuKTogQXJyYXk8V29yZHM+ID0+IHtcbiAgY29uc3Qgc2hvdWxkTGltaXRMaW5lcyA9IGlzTnVtYmVyKHByb3BzLm1heExpbmVzKTtcbiAgY29uc3QgdGV4dCA9IHByb3BzLmNoaWxkcmVuIGFzIHN0cmluZztcblxuICBjb25zdCBjYWxjdWxhdGUgPSAod29yZHM6IEFycmF5PFdvcmRXaXRoQ29tcHV0ZWRXaWR0aD4gPSBbXSkgPT5cbiAgICB3b3Jkcy5yZWR1Y2UoKHJlc3VsdCwgeyB3b3JkLCB3aWR0aCB9KSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50TGluZSA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChjdXJyZW50TGluZSAmJiAobGluZVdpZHRoID09IG51bGwgfHwgc2NhbGVUb0ZpdCB8fCBjdXJyZW50TGluZS53aWR0aCArIHdpZHRoICsgc3BhY2VXaWR0aCA8IGxpbmVXaWR0aCkpIHtcbiAgICAgICAgLy8gV29yZCBjYW4gYmUgYWRkZWQgdG8gYW4gZXhpc3RpbmcgbGluZVxuICAgICAgICBjdXJyZW50TGluZS53b3Jkcy5wdXNoKHdvcmQpO1xuICAgICAgICBjdXJyZW50TGluZS53aWR0aCArPSB3aWR0aCArIHNwYWNlV2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZGQgZmlyc3Qgd29yZCB0byBsaW5lIG9yIHdvcmQgaXMgdG9vIGxvbmcgdG8gc2NhbGVUb0ZpdCBvbiBleGlzdGluZyBsaW5lXG4gICAgICAgIGNvbnN0IG5ld0xpbmUgPSB7IHdvcmRzOiBbd29yZF0sIHdpZHRoIH07XG4gICAgICAgIHJlc3VsdC5wdXNoKG5ld0xpbmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIFtdKTtcblxuICBjb25zdCBvcmlnaW5hbFJlc3VsdCA9IGNhbGN1bGF0ZShpbml0aWFsV29yZHNXaXRoQ29tcHV0ZWRXaXRoKTtcblxuICBjb25zdCBmaW5kTG9uZ2VzdExpbmUgPSAod29yZHM6IEFycmF5PFdvcmRzPik6IFdvcmRzID0+XG4gICAgd29yZHMucmVkdWNlKChhOiBXb3JkcywgYjogV29yZHMpID0+IChhLndpZHRoID4gYi53aWR0aCA/IGEgOiBiKSk7XG5cbiAgaWYgKCFzaG91bGRMaW1pdExpbmVzKSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsUmVzdWx0O1xuICB9XG5cbiAgY29uc3Qgc3VmZml4ID0gJ+KApic7XG5cbiAgY29uc3QgY2hlY2tPdmVyZmxvdyA9IChpbmRleDogbnVtYmVyKTogW2Jvb2xlYW4sIFdvcmRzW11dID0+IHtcbiAgICBjb25zdCB0ZW1wVGV4dCA9IHRleHQuc2xpY2UoMCwgaW5kZXgpO1xuXG4gICAgY29uc3Qgd29yZHMgPSBjYWxjdWxhdGVXb3JkV2lkdGhzKHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgY2hpbGRyZW46IHRlbXBUZXh0ICsgc3VmZml4LFxuICAgIH0pLndvcmRzV2l0aENvbXB1dGVkV2lkdGg7XG5cbiAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGUod29yZHMpO1xuXG4gICAgY29uc3QgZG9lc092ZXJmbG93ID0gcmVzdWx0Lmxlbmd0aCA+IHByb3BzLm1heExpbmVzIHx8IGZpbmRMb25nZXN0TGluZShyZXN1bHQpLndpZHRoID4gbGluZVdpZHRoO1xuXG4gICAgcmV0dXJuIFtkb2VzT3ZlcmZsb3csIHJlc3VsdF07XG4gIH07XG5cbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IHRleHQubGVuZ3RoIC0gMTtcblxuICBsZXQgaXRlcmF0aW9ucyA9IDA7XG4gIGxldCB0cmltbWVkUmVzdWx0O1xuXG4gIHdoaWxlIChzdGFydCA8PSBlbmQgJiYgaXRlcmF0aW9ucyA8PSB0ZXh0Lmxlbmd0aCAtIDEpIHtcbiAgICBjb25zdCBtaWRkbGUgPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcbiAgICBjb25zdCBwcmV2ID0gbWlkZGxlIC0gMTtcblxuICAgIGNvbnN0IFtkb2VzUHJldk92ZXJmbG93LCByZXN1bHRdID0gY2hlY2tPdmVyZmxvdyhwcmV2KTtcbiAgICBjb25zdCBbZG9lc01pZGRsZU92ZXJmbG93XSA9IGNoZWNrT3ZlcmZsb3cobWlkZGxlKTtcblxuICAgIGlmICghZG9lc1ByZXZPdmVyZmxvdyAmJiAhZG9lc01pZGRsZU92ZXJmbG93KSB7XG4gICAgICBzdGFydCA9IG1pZGRsZSArIDE7XG4gICAgfVxuXG4gICAgaWYgKGRvZXNQcmV2T3ZlcmZsb3cgJiYgZG9lc01pZGRsZU92ZXJmbG93KSB7XG4gICAgICBlbmQgPSBtaWRkbGUgLSAxO1xuICAgIH1cblxuICAgIGlmICghZG9lc1ByZXZPdmVyZmxvdyAmJiBkb2VzTWlkZGxlT3ZlcmZsb3cpIHtcbiAgICAgIHRyaW1tZWRSZXN1bHQgPSByZXN1bHQ7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpdGVyYXRpb25zKys7XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBvcmlnaW5hbFJlc3VsdCAocmVzdWx0IHdpdGhvdXQgdHJpbW1pbmcpIGlmIHdlIGNhbm5vdCBmaW5kIHRoZVxuICAvLyB3aGVyZSB0byB0cmltLiAgVGhpcyBzaG91bGQgbm90IGhhcHBlbiA6dG06XG4gIHJldHVybiB0cmltbWVkUmVzdWx0IHx8IG9yaWdpbmFsUmVzdWx0O1xufTtcblxuY29uc3QgZ2V0V29yZHNXaXRob3V0Q2FsY3VsYXRlID0gKGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUpOiBBcnJheTxXb3Jkcz4gPT4ge1xuICBjb25zdCB3b3JkcyA9ICFfLmlzTmlsKGNoaWxkcmVuKSA/IGNoaWxkcmVuLnRvU3RyaW5nKCkuc3BsaXQoQlJFQUtJTkdfU1BBQ0VTKSA6IFtdO1xuICByZXR1cm4gW3sgd29yZHMgfV07XG59O1xuXG5jb25zdCBnZXRXb3Jkc0J5TGluZXMgPSAocHJvcHM6IFByb3BzLCBuZWVkQ2FsY3VsYXRlOiBib29sZWFuKSA9PiB7XG4gIC8vIE9ubHkgcGVyZm9ybSBjYWxjdWxhdGlvbnMgaWYgdXNpbmcgZmVhdHVyZXMgdGhhdCByZXF1aXJlIHRoZW0gKG11bHRpbGluZSwgc2NhbGVUb0ZpdClcbiAgaWYgKChwcm9wcy53aWR0aCB8fCBwcm9wcy5zY2FsZVRvRml0KSAmJiAhR2xvYmFsLmlzU3NyKSB7XG4gICAgbGV0IHdvcmRzV2l0aENvbXB1dGVkV2lkdGg6IEFycmF5PFdvcmRXaXRoQ29tcHV0ZWRXaWR0aD4sIHNwYWNlV2lkdGg6IG51bWJlcjtcblxuICAgIGlmIChuZWVkQ2FsY3VsYXRlKSB7XG4gICAgICBjb25zdCB3b3JkV2lkdGhzID0gY2FsY3VsYXRlV29yZFdpZHRocyhwcm9wcyk7XG5cbiAgICAgIGlmICh3b3JkV2lkdGhzKSB7XG4gICAgICAgIGNvbnN0IHsgd29yZHNXaXRoQ29tcHV0ZWRXaWR0aDogd2N3LCBzcGFjZVdpZHRoOiBzdyB9ID0gd29yZFdpZHRocztcblxuICAgICAgICB3b3Jkc1dpdGhDb21wdXRlZFdpZHRoID0gd2N3O1xuICAgICAgICBzcGFjZVdpZHRoID0gc3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0V29yZHNXaXRob3V0Q2FsY3VsYXRlKHByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhbGN1bGF0ZVdvcmRzQnlMaW5lcyhwcm9wcywgd29yZHNXaXRoQ29tcHV0ZWRXaWR0aCwgc3BhY2VXaWR0aCwgcHJvcHMud2lkdGgsIHByb3BzLnNjYWxlVG9GaXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2V0V29yZHNXaXRob3V0Q2FsY3VsYXRlKHByb3BzLmNoaWxkcmVuKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBUZXh0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBsaW5lSGVpZ2h0OiAnMWVtJyxcbiAgICBjYXBIZWlnaHQ6ICcwLjcxZW0nLCAvLyBNYWdpYyBudW1iZXIgZnJvbSBkM1xuICAgIHNjYWxlVG9GaXQ6IGZhbHNlLFxuICAgIHRleHRBbmNob3I6ICdzdGFydCcsXG4gICAgdmVydGljYWxBbmNob3I6ICdlbmQnLCAvLyBNYWludGFpbiBjb21wYXQgd2l0aCBleGlzdGluZyBjaGFydHMgLyBkZWZhdWx0IFNWRyBiZWhhdmlvclxuICB9O1xuXG4gIHN0YXRlOiBTdGF0ZSA9IHt9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAoXG4gICAgICBuZXh0UHJvcHMud2lkdGggIT09IHByZXZTdGF0ZS5wcmV2V2lkdGggfHxcbiAgICAgIG5leHRQcm9wcy5zY2FsZVRvRml0ICE9PSBwcmV2U3RhdGUucHJldlNjYWxlVG9GaXQgfHxcbiAgICAgIG5leHRQcm9wcy5jaGlsZHJlbiAhPT0gcHJldlN0YXRlLnByZXZDaGlsZHJlbiB8fFxuICAgICAgbmV4dFByb3BzLnN0eWxlICE9PSBwcmV2U3RhdGUucHJldlN0eWxlIHx8XG4gICAgICBuZXh0UHJvcHMuYnJlYWtBbGwgIT09IHByZXZTdGF0ZS5wcmV2QnJlYWtBbGxcbiAgICApIHtcbiAgICAgIGNvbnN0IG5lZWRDYWxjdWxhdGUgPVxuICAgICAgICBuZXh0UHJvcHMuY2hpbGRyZW4gIT09IHByZXZTdGF0ZS5wcmV2Q2hpbGRyZW4gfHxcbiAgICAgICAgbmV4dFByb3BzLnN0eWxlICE9PSBwcmV2U3RhdGUucHJldlN0eWxlIHx8XG4gICAgICAgIG5leHRQcm9wcy5icmVha0FsbCAhPT0gcHJldlN0YXRlLnByZXZCcmVha0FsbDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldldpZHRoOiBuZXh0UHJvcHMud2lkdGgsXG4gICAgICAgIHByZXZTY2FsZVRvRml0OiBuZXh0UHJvcHMuc2NhbGVUb0ZpdCxcbiAgICAgICAgcHJldkNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByZXZTdHlsZTogbmV4dFByb3BzLnN0eWxlLFxuICAgICAgICB3b3Jkc0J5TGluZXM6IGdldFdvcmRzQnlMaW5lcyhuZXh0UHJvcHMsIG5lZWRDYWxjdWxhdGUpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBkeCxcbiAgICAgIGR5LFxuICAgICAgdGV4dEFuY2hvcixcbiAgICAgIHZlcnRpY2FsQW5jaG9yLFxuICAgICAgc2NhbGVUb0ZpdCxcbiAgICAgIGFuZ2xlLFxuICAgICAgbGluZUhlaWdodCxcbiAgICAgIGNhcEhlaWdodCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGJyZWFrQWxsLFxuICAgICAgLi4udGV4dFByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB3b3Jkc0J5TGluZXMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoIWlzTnVtT3JTdHIodGV4dFByb3BzLngpIHx8ICFpc051bU9yU3RyKHRleHRQcm9wcy55KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHggPSAodGV4dFByb3BzLnggYXMgbnVtYmVyKSArIChpc051bWJlcihkeCBhcyBudW1iZXIpID8gKGR4IGFzIG51bWJlcikgOiAwKTtcbiAgICBjb25zdCB5ID0gKHRleHRQcm9wcy55IGFzIG51bWJlcikgKyAoaXNOdW1iZXIoZHkgYXMgbnVtYmVyKSA/IChkeSBhcyBudW1iZXIpIDogMCk7XG5cbiAgICBsZXQgc3RhcnREeTogbnVtYmVyO1xuICAgIHN3aXRjaCAodmVydGljYWxBbmNob3IpIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgc3RhcnREeSA9IHJlZHVjZUNTU0NhbGMoYGNhbGMoJHtjYXBIZWlnaHR9KWApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgIHN0YXJ0RHkgPSByZWR1Y2VDU1NDYWxjKGBjYWxjKCR7KHdvcmRzQnlMaW5lcy5sZW5ndGggLSAxKSAvIDJ9ICogLSR7bGluZUhlaWdodH0gKyAoJHtjYXBIZWlnaHR9IC8gMikpYCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RhcnREeSA9IHJlZHVjZUNTU0NhbGMoYGNhbGMoJHt3b3Jkc0J5TGluZXMubGVuZ3RoIC0gMX0gKiAtJHtsaW5lSGVpZ2h0fSlgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNmb3JtcyA9IFtdO1xuICAgIGlmIChzY2FsZVRvRml0KSB7XG4gICAgICBjb25zdCBsaW5lV2lkdGggPSB3b3Jkc0J5TGluZXNbMF0ud2lkdGg7XG4gICAgICBjb25zdCB7IHdpZHRoIH0gPSB0aGlzLnByb3BzO1xuICAgICAgdHJhbnNmb3Jtcy5wdXNoKGBzY2FsZSgkeyhpc051bWJlcih3aWR0aCBhcyBudW1iZXIpID8gKHdpZHRoIGFzIG51bWJlcikgLyBsaW5lV2lkdGggOiAxKSAvIGxpbmVXaWR0aH0pYCk7XG4gICAgfVxuICAgIGlmIChhbmdsZSkge1xuICAgICAgdHJhbnNmb3Jtcy5wdXNoKGByb3RhdGUoJHthbmdsZX0sICR7eH0sICR7eX0pYCk7XG4gICAgfVxuICAgIGlmICh0cmFuc2Zvcm1zLmxlbmd0aCkge1xuICAgICAgdGV4dFByb3BzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybXMuam9pbignICcpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8dGV4dFxuICAgICAgICB7Li4uZmlsdGVyUHJvcHModGV4dFByb3BzLCB0cnVlKX1cbiAgICAgICAgeD17eH1cbiAgICAgICAgeT17eX1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy10ZXh0JywgY2xhc3NOYW1lKX1cbiAgICAgICAgdGV4dEFuY2hvcj17dGV4dEFuY2hvcn1cbiAgICAgID5cbiAgICAgICAge3dvcmRzQnlMaW5lcy5tYXAoKGxpbmUsIGluZGV4KSA9PiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIDx0c3BhbiB4PXt4fSBkeT17aW5kZXggPT09IDAgPyBzdGFydER5IDogbGluZUhlaWdodH0ga2V5PXtpbmRleH0+XG4gICAgICAgICAgICB7bGluZS53b3Jkcy5qb2luKGJyZWFrQWxsID8gJycgOiAnICcpfVxuICAgICAgICAgIDwvdHNwYW4+XG4gICAgICAgICkpfVxuICAgICAgPC90ZXh0PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBEb3RcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNXaXRoUHJvcHMsIGFkYXB0RXZlbnRIYW5kbGVycywgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW50ZXJmYWNlIERvdFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjeD86IG51bWJlcjtcbiAgY3k/OiBudW1iZXI7XG4gIHI/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gUHJlc2VudGF0aW9uQXR0cmlidXRlc1dpdGhQcm9wczxEb3RQcm9wcywgU1ZHQ2lyY2xlRWxlbWVudD4gJiBEb3RQcm9wcztcblxuZXhwb3J0IGNsYXNzIERvdCBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY3gsIGN5LCByLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgbGF5ZXJDbGFzcyA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLWRvdCcsIGNsYXNzTmFtZSk7XG5cbiAgICBpZiAoY3ggPT09ICtjeCAmJiBjeSA9PT0gK2N5ICYmIHIgPT09ICtyKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgey4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMpfVxuICAgICAgICAgIHsuLi5hZGFwdEV2ZW50SGFuZGxlcnModGhpcy5wcm9wcyl9XG4gICAgICAgICAgY2xhc3NOYW1lPXtsYXllckNsYXNzfVxuICAgICAgICAgIGN4PXtjeH1cbiAgICAgICAgICBjeT17Y3l9XG4gICAgICAgICAgcj17cn1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qIGVzbGludCBuby1jb25zb2xlOiAwICovXG5jb25zdCBpc0RldiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydCBjb25zdCB3YXJuID0gKGNvbmRpdGlvbjogYm9vbGVhbiwgZm9ybWF0OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gIGlmIChpc0RldiAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0xvZ1V0aWxzIHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGFyZ0luZGV4ID0gMDtcblxuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0LnJlcGxhY2UoLyVzL2csICgpID0+IGFyZ3NbYXJnSW5kZXgrK10pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgQ3Jvc3NcbiAqL1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHRWxlbWVudD47XG5cbmV4cG9ydCBjb25zdCBDZWxsOiBGdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHM6IFByb3BzKSA9PiBudWxsO1xuXG5DZWxsLmRpc3BsYXlOYW1lID0gJ0NlbGwnO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IEN1cnZlXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgbGluZSBhcyBzaGFwZUxpbmUsXG4gIGFyZWEgYXMgc2hhcGVBcmVhLFxuICBDdXJ2ZUZhY3RvcnksXG4gIGN1cnZlQmFzaXNDbG9zZWQsXG4gIGN1cnZlQmFzaXNPcGVuLFxuICBjdXJ2ZUJhc2lzLFxuICBjdXJ2ZUxpbmVhckNsb3NlZCxcbiAgY3VydmVMaW5lYXIsXG4gIGN1cnZlTW9ub3RvbmVYLFxuICBjdXJ2ZU1vbm90b25lWSxcbiAgY3VydmVOYXR1cmFsLFxuICBjdXJ2ZVN0ZXAsXG4gIGN1cnZlU3RlcEFmdGVyLFxuICBjdXJ2ZVN0ZXBCZWZvcmUsXG59IGZyb20gJ2QzLXNoYXBlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IExheW91dFR5cGUsIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNXaXRoUHJvcHMsIGFkYXB0RXZlbnRIYW5kbGVycywgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuXG5pbnRlcmZhY2UgQ3VydmVGYWN0b3JpZXMge1xuICBbaW5kZXg6IHN0cmluZ106IEN1cnZlRmFjdG9yeTtcbn1cblxuY29uc3QgQ1VSVkVfRkFDVE9SSUVTOiBDdXJ2ZUZhY3RvcmllcyA9IHtcbiAgY3VydmVCYXNpc0Nsb3NlZCxcbiAgY3VydmVCYXNpc09wZW4sXG4gIGN1cnZlQmFzaXMsXG4gIGN1cnZlTGluZWFyQ2xvc2VkLFxuICBjdXJ2ZUxpbmVhcixcbiAgY3VydmVNb25vdG9uZVgsXG4gIGN1cnZlTW9ub3RvbmVZLFxuICBjdXJ2ZU5hdHVyYWwsXG4gIGN1cnZlU3RlcCxcbiAgY3VydmVTdGVwQWZ0ZXIsXG4gIGN1cnZlU3RlcEJlZm9yZSxcbn07XG5cbmV4cG9ydCB0eXBlIEN1cnZlVHlwZSA9XG4gIHwgJ2Jhc2lzJ1xuICB8ICdiYXNpc0Nsb3NlZCdcbiAgfCAnYmFzaXNPcGVuJ1xuICB8ICdsaW5lYXInXG4gIHwgJ2xpbmVhckNsb3NlZCdcbiAgfCAnbmF0dXJhbCdcbiAgfCAnbW9ub3RvbmVYJ1xuICB8ICdtb25vdG9uZVknXG4gIHwgJ21vbm90b25lJ1xuICB8ICdzdGVwJ1xuICB8ICdzdGVwQmVmb3JlJ1xuICB8ICdzdGVwQWZ0ZXInXG4gIHwgQ3VydmVGYWN0b3J5O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5cbmNvbnN0IGRlZmluZWQgPSAocDogUG9pbnQpID0+IHAueCA9PT0gK3AueCAmJiBwLnkgPT09ICtwLnk7XG5jb25zdCBnZXRYID0gKHA6IFBvaW50KSA9PiBwLng7XG5jb25zdCBnZXRZID0gKHA6IFBvaW50KSA9PiBwLnk7XG5cbmNvbnN0IGdldEN1cnZlRmFjdG9yeSA9ICh0eXBlOiBDdXJ2ZVR5cGUsIGxheW91dDogTGF5b3V0VHlwZSkgPT4ge1xuICBpZiAoXy5pc0Z1bmN0aW9uKHR5cGUpKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBjb25zdCBuYW1lID0gYGN1cnZlJHtfLnVwcGVyRmlyc3QodHlwZSl9YDtcblxuICBpZiAobmFtZSA9PT0gJ2N1cnZlTW9ub3RvbmUnICYmIGxheW91dCkge1xuICAgIHJldHVybiBDVVJWRV9GQUNUT1JJRVNbYCR7bmFtZX0ke2xheW91dCA9PT0gJ3ZlcnRpY2FsJyA/ICdZJyA6ICdYJ31gXTtcbiAgfVxuICByZXR1cm4gQ1VSVkVfRkFDVE9SSUVTW25hbWVdIHx8IGN1cnZlTGluZWFyO1xufTtcblxuaW50ZXJmYWNlIEN1cnZlUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHR5cGU/OiBDdXJ2ZVR5cGU7XG4gIGxheW91dD86IExheW91dFR5cGU7XG4gIGJhc2VMaW5lPzogbnVtYmVyIHwgQXJyYXk8UG9pbnQ+O1xuICBwb2ludHM/OiBBcnJheTxQb2ludD47XG4gIGNvbm5lY3ROdWxscz86IGJvb2xlYW47XG4gIHBhdGg/OiBzdHJpbmc7XG4gIHBhdGhSZWY/OiAocmVmOiBTVkdQYXRoRWxlbWVudCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBPbWl0PFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNXaXRoUHJvcHM8Q3VydmVQcm9wcywgU1ZHUGF0aEVsZW1lbnQ+LCAndHlwZScgfCAncG9pbnRzJz4gJiBDdXJ2ZVByb3BzO1xuXG5leHBvcnQgY2xhc3MgQ3VydmUgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdHlwZTogJ2xpbmVhcicsXG4gICAgcG9pbnRzOiBbXSBhcyBhbnlbXSxcbiAgICBjb25uZWN0TnVsbHM6IGZhbHNlLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHBhdGggb2YgY3VydmVcbiAgICogQHJldHVybiB7U3RyaW5nfSBwYXRoXG4gICAqL1xuICBnZXRQYXRoKCkge1xuICAgIGNvbnN0IHsgdHlwZSwgcG9pbnRzLCBiYXNlTGluZSwgbGF5b3V0LCBjb25uZWN0TnVsbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY3VydmVGYWN0b3J5ID0gZ2V0Q3VydmVGYWN0b3J5KHR5cGUsIGxheW91dCk7XG4gICAgY29uc3QgZm9ybWF0UG9pbnRzID0gY29ubmVjdE51bGxzID8gcG9pbnRzLmZpbHRlcihlbnRyeSA9PiBkZWZpbmVkKGVudHJ5KSkgOiBwb2ludHM7XG4gICAgbGV0IGxpbmVGdW5jdGlvbjtcblxuICAgIGlmIChfLmlzQXJyYXkoYmFzZUxpbmUpKSB7XG4gICAgICBjb25zdCBmb3JtYXRCYXNlTGluZSA9IGNvbm5lY3ROdWxscyA/IGJhc2VMaW5lLmZpbHRlcihiYXNlID0+IGRlZmluZWQoYmFzZSkpIDogYmFzZUxpbmU7XG4gICAgICBjb25zdCBhcmVhUG9pbnRzID0gZm9ybWF0UG9pbnRzLm1hcCgoZW50cnksIGluZGV4KSA9PiAoeyAuLi5lbnRyeSwgYmFzZTogZm9ybWF0QmFzZUxpbmVbaW5kZXhdIH0pKTtcbiAgICAgIGlmIChsYXlvdXQgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgbGluZUZ1bmN0aW9uID0gc2hhcGVBcmVhPFBvaW50ICYgeyBiYXNlOiBQb2ludCB9PigpXG4gICAgICAgICAgLnkoZ2V0WSlcbiAgICAgICAgICAueDEoZ2V0WClcbiAgICAgICAgICAueDAoZCA9PiBkLmJhc2UueCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lRnVuY3Rpb24gPSBzaGFwZUFyZWE8UG9pbnQgJiB7IGJhc2U6IFBvaW50IH0+KClcbiAgICAgICAgICAueChnZXRYKVxuICAgICAgICAgIC55MShnZXRZKVxuICAgICAgICAgIC55MChkID0+IGQuYmFzZS55KTtcbiAgICAgIH1cbiAgICAgIGxpbmVGdW5jdGlvbi5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlRmFjdG9yeSk7XG5cbiAgICAgIHJldHVybiBsaW5lRnVuY3Rpb24oYXJlYVBvaW50cyk7XG4gICAgfVxuICAgIGlmIChsYXlvdXQgPT09ICd2ZXJ0aWNhbCcgJiYgaXNOdW1iZXIoYmFzZUxpbmUpKSB7XG4gICAgICBsaW5lRnVuY3Rpb24gPSBzaGFwZUFyZWE8UG9pbnQ+KCkueShnZXRZKS54MShnZXRYKS54MChiYXNlTGluZSk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihiYXNlTGluZSkpIHtcbiAgICAgIGxpbmVGdW5jdGlvbiA9IHNoYXBlQXJlYTxQb2ludD4oKS54KGdldFgpLnkxKGdldFkpLnkwKGJhc2VMaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZUZ1bmN0aW9uID0gc2hhcGVMaW5lPFBvaW50PigpLngoZ2V0WCkueShnZXRZKTtcbiAgICB9XG5cbiAgICBsaW5lRnVuY3Rpb24uZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZUZhY3RvcnkpO1xuXG4gICAgcmV0dXJuIGxpbmVGdW5jdGlvbihmb3JtYXRQb2ludHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBwb2ludHMsIHBhdGgsIHBhdGhSZWYgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoKCFwb2ludHMgfHwgIXBvaW50cy5sZW5ndGgpICYmICFwYXRoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZWFsUGF0aCA9IHBvaW50cyAmJiBwb2ludHMubGVuZ3RoID8gdGhpcy5nZXRQYXRoKCkgOiBwYXRoO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxwYXRoXG4gICAgICAgIHsuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzKX1cbiAgICAgICAgey4uLmFkYXB0RXZlbnRIYW5kbGVycyh0aGlzLnByb3BzKX1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy1jdXJ2ZScsIGNsYXNzTmFtZSl9XG4gICAgICAgIGQ9e3JlYWxQYXRofVxuICAgICAgICByZWY9e3BhdGhSZWZ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBSZWN0YW5nbGVcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyZWFjdC1zbW9vdGgnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVGltaW5nLCBmaWx0ZXJQcm9wcyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG50eXBlIFJlY3RSYWRpdXMgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuY29uc3QgZ2V0UmVjdGFuZ2xlUGF0aCA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJhZGl1czogbnVtYmVyIHwgUmVjdFJhZGl1cykgPT4ge1xuICBjb25zdCBtYXhSYWRpdXMgPSBNYXRoLm1pbihNYXRoLmFicyh3aWR0aCkgLyAyLCBNYXRoLmFicyhoZWlnaHQpIC8gMik7XG4gIGNvbnN0IHlTaWduID0gaGVpZ2h0ID49IDAgPyAxIDogLTE7XG4gIGNvbnN0IHhTaWduID0gd2lkdGggPj0gMCA/IDEgOiAtMTtcbiAgY29uc3QgY2xvY2tXaXNlID0gKGhlaWdodCA+PSAwICYmIHdpZHRoID49IDApIHx8IChoZWlnaHQgPCAwICYmIHdpZHRoIDwgMCkgPyAxIDogMDtcbiAgbGV0IHBhdGg7XG5cbiAgaWYgKG1heFJhZGl1cyA+IDAgJiYgcmFkaXVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCBuZXdSYWRpdXM6IFJlY3RSYWRpdXMgPSBbMCwgMCwgMCwgMF07XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IDQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgbmV3UmFkaXVzW2ldID0gcmFkaXVzW2ldID4gbWF4UmFkaXVzID8gbWF4UmFkaXVzIDogcmFkaXVzW2ldO1xuICAgIH1cblxuICAgIHBhdGggPSBgTSR7eH0sJHt5ICsgeVNpZ24gKiBuZXdSYWRpdXNbMF19YDtcblxuICAgIGlmIChuZXdSYWRpdXNbMF0gPiAwKSB7XG4gICAgICBwYXRoICs9IGBBICR7bmV3UmFkaXVzWzBdfSwke25ld1JhZGl1c1swXX0sMCwwLCR7Y2xvY2tXaXNlfSwke3ggKyB4U2lnbiAqIG5ld1JhZGl1c1swXX0sJHt5fWA7XG4gICAgfVxuXG4gICAgcGF0aCArPSBgTCAke3ggKyB3aWR0aCAtIHhTaWduICogbmV3UmFkaXVzWzFdfSwke3l9YDtcblxuICAgIGlmIChuZXdSYWRpdXNbMV0gPiAwKSB7XG4gICAgICBwYXRoICs9IGBBICR7bmV3UmFkaXVzWzFdfSwke25ld1JhZGl1c1sxXX0sMCwwLCR7Y2xvY2tXaXNlfSxcbiAgICAgICAgJHt4ICsgd2lkdGh9LCR7eSArIHlTaWduICogbmV3UmFkaXVzWzFdfWA7XG4gICAgfVxuICAgIHBhdGggKz0gYEwgJHt4ICsgd2lkdGh9LCR7eSArIGhlaWdodCAtIHlTaWduICogbmV3UmFkaXVzWzJdfWA7XG5cbiAgICBpZiAobmV3UmFkaXVzWzJdID4gMCkge1xuICAgICAgcGF0aCArPSBgQSAke25ld1JhZGl1c1syXX0sJHtuZXdSYWRpdXNbMl19LDAsMCwke2Nsb2NrV2lzZX0sXG4gICAgICAgICR7eCArIHdpZHRoIC0geFNpZ24gKiBuZXdSYWRpdXNbMl19LCR7eSArIGhlaWdodH1gO1xuICAgIH1cbiAgICBwYXRoICs9IGBMICR7eCArIHhTaWduICogbmV3UmFkaXVzWzNdfSwke3kgKyBoZWlnaHR9YDtcblxuICAgIGlmIChuZXdSYWRpdXNbM10gPiAwKSB7XG4gICAgICBwYXRoICs9IGBBICR7bmV3UmFkaXVzWzNdfSwke25ld1JhZGl1c1szXX0sMCwwLCR7Y2xvY2tXaXNlfSxcbiAgICAgICAgJHt4fSwke3kgKyBoZWlnaHQgLSB5U2lnbiAqIG5ld1JhZGl1c1szXX1gO1xuICAgIH1cbiAgICBwYXRoICs9ICdaJztcbiAgfSBlbHNlIGlmIChtYXhSYWRpdXMgPiAwICYmIHJhZGl1cyA9PT0gK3JhZGl1cyAmJiByYWRpdXMgPiAwKSB7XG4gICAgY29uc3QgbmV3UmFkaXVzID0gTWF0aC5taW4obWF4UmFkaXVzLCByYWRpdXMpO1xuXG4gICAgcGF0aCA9IGBNICR7eH0sJHt5ICsgeVNpZ24gKiBuZXdSYWRpdXN9XG4gICAgICAgICAgICBBICR7bmV3UmFkaXVzfSwke25ld1JhZGl1c30sMCwwLCR7Y2xvY2tXaXNlfSwke3ggKyB4U2lnbiAqIG5ld1JhZGl1c30sJHt5fVxuICAgICAgICAgICAgTCAke3ggKyB3aWR0aCAtIHhTaWduICogbmV3UmFkaXVzfSwke3l9XG4gICAgICAgICAgICBBICR7bmV3UmFkaXVzfSwke25ld1JhZGl1c30sMCwwLCR7Y2xvY2tXaXNlfSwke3ggKyB3aWR0aH0sJHt5ICsgeVNpZ24gKiBuZXdSYWRpdXN9XG4gICAgICAgICAgICBMICR7eCArIHdpZHRofSwke3kgKyBoZWlnaHQgLSB5U2lnbiAqIG5ld1JhZGl1c31cbiAgICAgICAgICAgIEEgJHtuZXdSYWRpdXN9LCR7bmV3UmFkaXVzfSwwLDAsJHtjbG9ja1dpc2V9LCR7eCArIHdpZHRoIC0geFNpZ24gKiBuZXdSYWRpdXN9LCR7eSArIGhlaWdodH1cbiAgICAgICAgICAgIEwgJHt4ICsgeFNpZ24gKiBuZXdSYWRpdXN9LCR7eSArIGhlaWdodH1cbiAgICAgICAgICAgIEEgJHtuZXdSYWRpdXN9LCR7bmV3UmFkaXVzfSwwLDAsJHtjbG9ja1dpc2V9LCR7eH0sJHt5ICsgaGVpZ2h0IC0geVNpZ24gKiBuZXdSYWRpdXN9IFpgO1xuICB9IGVsc2Uge1xuICAgIHBhdGggPSBgTSAke3h9LCR7eX0gaCAke3dpZHRofSB2ICR7aGVpZ2h0fSBoICR7LXdpZHRofSBaYDtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufTtcblxuaW50ZXJmYWNlIFJlY3RhbmdsZVByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICByYWRpdXM/OiBudW1iZXIgfCBSZWN0UmFkaXVzO1xuICBpc0FuaW1hdGlvbkFjdGl2ZT86IGJvb2xlYW47XG4gIGlzVXBkYXRlQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgYW5pbWF0aW9uQmVnaW4/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuICBhbmltYXRpb25FYXNpbmc/OiBBbmltYXRpb25UaW1pbmc7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gT21pdDxTVkdQcm9wczxTVkdQYXRoRWxlbWVudD4sICdyYWRpdXMnPiAmIFJlY3RhbmdsZVByb3BzO1xuXG5leHBvcnQgY2xhc3MgUmVjdGFuZ2xlIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgLy8gVGhlIHJhZGl1cyBvZiBib3JkZXJcbiAgICAvLyBUaGUgcmFkaXVzIG9mIGZvdXIgY29ybmVycyB3aGVuIHJhZGl1cyBpcyBhIG51bWJlclxuICAgIC8vIFRoZSByYWRpdXMgb2YgbGVmdC10b3AsIHJpZ2h0LXRvcCwgcmlnaHQtYm90dG9tLCBsZWZ0LWJvdHRvbSB3aGVuIHJhZGl1cyBpcyBhbiBhcnJheVxuICAgIHJhZGl1czogMCxcbiAgICBpc0FuaW1hdGlvbkFjdGl2ZTogZmFsc2UsXG4gICAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmU6IGZhbHNlLFxuICAgIGFuaW1hdGlvbkJlZ2luOiAwLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAxNTAwLFxuICAgIGFuaW1hdGlvbkVhc2luZzogJ2Vhc2UnLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHRvdGFsTGVuZ3RoOiAtMSxcbiAgfTtcblxuICBwcml2YXRlIG5vZGU6IFNWR1BhdGhFbGVtZW50O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlICovXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLm5vZGUgJiYgdGhpcy5ub2RlLmdldFRvdGFsTGVuZ3RoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0b3RhbExlbmd0aCA9IHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aCgpO1xuXG4gICAgICAgIGlmICh0b3RhbExlbmd0aCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdG90YWxMZW5ndGgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBjYWxjdWxhdGUgdG90YWwgbGVuZ3RoIGVycm9yXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0b3RhbExlbmd0aCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBhbmltYXRpb25FYXNpbmcsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbixcbiAgICAgIGFuaW1hdGlvbkJlZ2luLFxuICAgICAgaXNBbmltYXRpb25BY3RpdmUsXG4gICAgICBpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh4ICE9PSAreCB8fCB5ICE9PSAreSB8fCB3aWR0aCAhPT0gK3dpZHRoIHx8IGhlaWdodCAhPT0gK2hlaWdodCB8fCB3aWR0aCA9PT0gMCB8fCBoZWlnaHQgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGxheWVyQ2xhc3MgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy1yZWN0YW5nbGUnLCBjbGFzc05hbWUpO1xuICAgIGlmICghaXNVcGRhdGVBbmltYXRpb25BY3RpdmUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgey4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMsIHRydWUpfVxuICAgICAgICAgIGNsYXNzTmFtZT17bGF5ZXJDbGFzc31cbiAgICAgICAgICBkPXtnZXRSZWN0YW5nbGVQYXRoKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cyl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZVxuICAgICAgICBjYW5CZWdpbj17dG90YWxMZW5ndGggPiAwfVxuICAgICAgICBmcm9tPXt7IHdpZHRoLCBoZWlnaHQsIHgsIHkgfX1cbiAgICAgICAgdG89e3sgd2lkdGgsIGhlaWdodCwgeCwgeSB9fVxuICAgICAgICBkdXJhdGlvbj17YW5pbWF0aW9uRHVyYXRpb259XG4gICAgICAgIGFuaW1hdGlvbkVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICBpc0FjdGl2ZT17aXNVcGRhdGVBbmltYXRpb25BY3RpdmV9XG4gICAgICA+XG4gICAgICAgIHsoeyB3aWR0aDogY3VycldpZHRoLCBoZWlnaHQ6IGN1cnJIZWlnaHQsIHg6IGN1cnJYLCB5OiBjdXJyWSB9OiBhbnkpID0+IChcbiAgICAgICAgICA8QW5pbWF0ZVxuICAgICAgICAgICAgY2FuQmVnaW49e3RvdGFsTGVuZ3RoID4gMH1cbiAgICAgICAgICAgIGZyb209e2AwcHggJHt0b3RhbExlbmd0aCA9PT0gLTEgPyAxIDogdG90YWxMZW5ndGh9cHhgfVxuICAgICAgICAgICAgdG89e2Ake3RvdGFsTGVuZ3RofXB4IDBweGB9XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lPVwic3Ryb2tlRGFzaGFycmF5XCJcbiAgICAgICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgICAgIGR1cmF0aW9uPXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgICAgIGlzQWN0aXZlPXtpc0FuaW1hdGlvbkFjdGl2ZX1cbiAgICAgICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIHsuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzLCB0cnVlKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtsYXllckNsYXNzfVxuICAgICAgICAgICAgICBkPXtnZXRSZWN0YW5nbGVQYXRoKGN1cnJYLCBjdXJyWSwgY3VycldpZHRoLCBjdXJySGVpZ2h0LCByYWRpdXMpfVxuICAgICAgICAgICAgICByZWY9e25vZGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQW5pbWF0ZT5cbiAgICAgICAgKX1cbiAgICAgIDwvQW5pbWF0ZT5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgWCBBeGlzXG4gKi9cbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQmFzZUF4aXNQcm9wcywgQXhpc0ludGVydmFsIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbi8qKiBEZWZpbmUgb2YgWEF4aXMgcHJvcHMgKi9cbmludGVyZmFjZSBYQXhpc1Byb3BzIGV4dGVuZHMgQmFzZUF4aXNQcm9wcyB7XG4gIC8qKiBUaGUgdW5pcXVlIGlkIG9mIHgtYXhpcyAqL1xuICB4QXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICAvKiogVGhlIHdpZHRoIG9mIGF4aXMgd2hpY2ggaXMgdXN1YWxseSBjYWxjdWxhdGVkIGludGVybmFsbHkgKi9cbiAgd2lkdGg/OiBudW1iZXI7XG4gIC8qKiBUaGUgaGVpZ2h0IG9mIGF4aXMsIHdoaWNoIG5lZWQgdG8gYmUgc2V0dGVkIGJ5IHVzZXIgKi9cbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBtaXJyb3I/OiBib29sZWFuO1xuICAvLyBUaGUgb3JpZW50YXRpb24gb2YgYXhpc1xuICBvcmllbnRhdGlvbj86ICd0b3AnIHwgJ2JvdHRvbSc7XG4gIC8qKlxuICAgKiBUaWNrcyBjYW4gYmUgYW55IHR5cGUgd2hlbiB0aGUgYXhpcyBpcyB0aGUgdHlwZSBvZiBjYXRlZ29yeVxuICAgKiBUaWNrcyBtdXN0IGJlIG51bWJlcnMgd2hlbiB0aGUgYXhpcyBpcyB0aGUgdHlwZSBvZiBudW1iZXJcbiAgICovXG4gIHRpY2tzPzogKHN0cmluZyB8IG51bWJlcilbXTtcbiAgcGFkZGluZz86IHsgbGVmdD86IG51bWJlcjsgcmlnaHQ/OiBudW1iZXIgfTtcbiAgbWluVGlja0dhcD86IG51bWJlcjtcbiAgaW50ZXJ2YWw/OiBBeGlzSW50ZXJ2YWw7XG4gIHJldmVyc2VkPzogYm9vbGVhbjtcbiAgLyoqIHRoZSByb3RhdGUgYW5nbGUgb2YgdGljayAqL1xuICBhbmdsZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBTVkdQcm9wczxTVkdFbGVtZW50PiAmIFhBeGlzUHJvcHM7XG5cbmV4cG9ydCBjb25zdCBYQXhpczogRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKCkgPT4gbnVsbDtcblxuWEF4aXMuZGlzcGxheU5hbWUgPSAnWEF4aXMnO1xuWEF4aXMuZGVmYXVsdFByb3BzID0ge1xuICBhbGxvd0RlY2ltYWxzOiB0cnVlLFxuICBoaWRlOiBmYWxzZSxcbiAgb3JpZW50YXRpb246ICdib3R0b20nLFxuICB3aWR0aDogMCxcbiAgaGVpZ2h0OiAzMCxcbiAgbWlycm9yOiBmYWxzZSxcbiAgeEF4aXNJZDogMCxcbiAgdGlja0NvdW50OiA1LFxuICB0eXBlOiAnY2F0ZWdvcnknLFxuICBkb21haW46IFswLCAnYXV0byddLFxuICBwYWRkaW5nOiB7IGxlZnQ6IDAsIHJpZ2h0OiAwIH0sXG4gIGFsbG93RGF0YU92ZXJmbG93OiBmYWxzZSxcbiAgc2NhbGU6ICdhdXRvJyxcbiAgcmV2ZXJzZWQ6IGZhbHNlLFxuICBhbGxvd0R1cGxpY2F0ZWRDYXRlZ29yeTogdHJ1ZSxcbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgWSBBeGlzXG4gKi9cbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQmFzZUF4aXNQcm9wcywgQXhpc0ludGVydmFsIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmludGVyZmFjZSBZQXhpc1Byb3BzIGV4dGVuZHMgQmFzZUF4aXNQcm9wcyB7XG4gIC8qKiBUaGUgdW5pcXVlIGlkIG9mIHktYXhpcyAqL1xuICB5QXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICAvKipcbiAgICogVGlja3MgY2FuIGJlIGFueSB0eXBlIHdoZW4gdGhlIGF4aXMgaXMgdGhlIHR5cGUgb2YgY2F0ZWdvcnlcbiAgICogVGlja3MgbXVzdCBiZSBudW1iZXJzIHdoZW4gdGhlIGF4aXMgaXMgdGhlIHR5cGUgb2YgbnVtYmVyXG4gICAqL1xuICB0aWNrcz86IChzdHJpbmcgfCBudW1iZXIpW107XG4gIC8qKiBUaGUgd2lkdGggb2YgYXhpcywgd2hpY2ggbmVlZCB0byBiZSBzZXR0ZWQgYnkgdXNlciAqL1xuICB3aWR0aD86IG51bWJlcjtcbiAgLyoqIFRoZSBoZWlnaHQgb2YgYXhpcyB3aGljaCBpcyB1c3VhbGx5IGNhbGN1bGF0ZWQgaW4gQ2hhcnQgKi9cbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBtaXJyb3I/OiBib29sZWFuO1xuICAvKiogVGhlIG9yaWVudGF0aW9uIG9mIGF4aXMgKi9cbiAgb3JpZW50YXRpb24/OiAnbGVmdCcgfCAncmlnaHQnO1xuICBwYWRkaW5nPzoge1xuICAgIHRvcD86IG51bWJlcjtcbiAgICBib3R0b20/OiBudW1iZXI7XG4gIH07XG4gIG1pblRpY2tHYXA/OiBudW1iZXI7XG4gIGludGVydmFsPzogQXhpc0ludGVydmFsO1xuICByZXZlcnNlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gT21pdDxTVkdQcm9wczxTVkdFbGVtZW50PiwgJ3NjYWxlJz4gJiBZQXhpc1Byb3BzO1xuXG5leHBvcnQgY29uc3QgWUF4aXM6IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICgpID0+IG51bGw7XG5cbllBeGlzLmRpc3BsYXlOYW1lID0gJ1lBeGlzJztcbllBeGlzLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWxsb3dEdXBsaWNhdGVkQ2F0ZWdvcnk6IHRydWUsXG4gIGFsbG93RGVjaW1hbHM6IHRydWUsXG4gIGhpZGU6IGZhbHNlLFxuICBvcmllbnRhdGlvbjogJ2xlZnQnLFxuICB3aWR0aDogNjAsXG4gIGhlaWdodDogMCxcbiAgbWlycm9yOiBmYWxzZSxcbiAgeUF4aXNJZDogMCxcbiAgdGlja0NvdW50OiA1LFxuICB0eXBlOiAnbnVtYmVyJyxcbiAgZG9tYWluOiBbMCwgJ2F1dG8nXSxcbiAgcGFkZGluZzogeyB0b3A6IDAsIGJvdHRvbTogMCB9LFxuICBhbGxvd0RhdGFPdmVyZmxvdzogZmFsc2UsXG4gIHNjYWxlOiAnYXV0bycsXG4gIHJldmVyc2VkOiBmYWxzZSxcbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgU3VyZmFjZVxuICovXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCBDU1NQcm9wZXJ0aWVzLCBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW50ZXJmYWNlIFN1cmZhY2VQcm9wcyB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICB2aWV3Qm94Pzoge1xuICAgIHg/OiBudW1iZXI7XG4gICAgeT86IG51bWJlcjtcbiAgICB3aWR0aD86IG51bWJlcjtcbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gIH07XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBPbWl0PFNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+LCAndmlld0JveCc+ICYgU3VyZmFjZVByb3BzO1xuXG5leHBvcnQgZnVuY3Rpb24gU3VyZmFjZShwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgd2lkdGgsIGhlaWdodCwgdmlld0JveCwgY2xhc3NOYW1lLCBzdHlsZSwgLi4ub3RoZXJzIH0gPSBwcm9wcztcbiAgY29uc3Qgc3ZnVmlldyA9IHZpZXdCb3ggfHwgeyB3aWR0aCwgaGVpZ2h0LCB4OiAwLCB5OiAwIH07XG4gIGNvbnN0IGxheWVyQ2xhc3MgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy1zdXJmYWNlJywgY2xhc3NOYW1lKTtcblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHsuLi5maWx0ZXJQcm9wcyhvdGhlcnMsIHRydWUsIHRydWUpfVxuICAgICAgY2xhc3NOYW1lPXtsYXllckNsYXNzfVxuICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICB2aWV3Qm94PXtgJHtzdmdWaWV3Lnh9ICR7c3ZnVmlldy55fSAke3N2Z1ZpZXcud2lkdGh9ICR7c3ZnVmlldy5oZWlnaHR9YH1cbiAgICAgIHZlcnNpb249XCIxLjFcIlxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBUb29sdGlwXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUsIFJlYWN0RWxlbWVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0cmFuc2xhdGVTdHlsZSB9IGZyb20gJ3JlYWN0LXNtb290aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBEZWZhdWx0VG9vbHRpcENvbnRlbnQsIFZhbHVlVHlwZSwgTmFtZVR5cGUsIFBheWxvYWQsIFByb3BzIGFzIERlZmF1bHRQcm9wcyB9IGZyb20gJy4vRGVmYXVsdFRvb2x0aXBDb250ZW50JztcblxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBBbmltYXRpb25UaW1pbmcgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuY29uc3QgQ0xTX1BSRUZJWCA9ICdyZWNoYXJ0cy10b29sdGlwLXdyYXBwZXInO1xuXG5jb25zdCBFUFMgPSAxO1xuZXhwb3J0IHR5cGUgQ29udGVudFR5cGU8VFZhbHVlIGV4dGVuZHMgVmFsdWVUeXBlLCBUTmFtZSBleHRlbmRzIE5hbWVUeXBlPiA9XG4gIHwgUmVhY3RFbGVtZW50XG4gIHwgKChwcm9wczogVG9vbHRpcFByb3BzPFRWYWx1ZSwgVE5hbWU+KSA9PiBSZWFjdE5vZGUpO1xuXG50eXBlIFVuaXF1ZUZ1bmM8VFZhbHVlIGV4dGVuZHMgVmFsdWVUeXBlLCBUTmFtZSBleHRlbmRzIE5hbWVUeXBlPiA9IChlbnRyeTogUGF5bG9hZDxUVmFsdWUsIFROYW1lPikgPT4gdW5rbm93bjtcbnR5cGUgVW5pcXVlT3B0aW9uPFRWYWx1ZSBleHRlbmRzIFZhbHVlVHlwZSwgVE5hbWUgZXh0ZW5kcyBOYW1lVHlwZT4gPSBib29sZWFuIHwgVW5pcXVlRnVuYzxUVmFsdWUsIFROYW1lPjtcbmZ1bmN0aW9uIGRlZmF1bHRVbmlxQnk8VFZhbHVlIGV4dGVuZHMgVmFsdWVUeXBlLCBUTmFtZSBleHRlbmRzIE5hbWVUeXBlPihlbnRyeTogUGF5bG9hZDxUVmFsdWUsIFROYW1lPikge1xuICByZXR1cm4gZW50cnkuZGF0YUtleTtcbn1cbmZ1bmN0aW9uIGdldFVuaXFQYXlsb2FkPFRWYWx1ZSBleHRlbmRzIFZhbHVlVHlwZSwgVE5hbWUgZXh0ZW5kcyBOYW1lVHlwZT4oXG4gIG9wdGlvbjogVW5pcXVlT3B0aW9uPFRWYWx1ZSwgVE5hbWU+LFxuICBwYXlsb2FkOiBBcnJheTxQYXlsb2FkPFRWYWx1ZSwgVE5hbWU+Pixcbikge1xuICBpZiAob3B0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIF8udW5pcUJ5KHBheWxvYWQsIGRlZmF1bHRVbmlxQnkpO1xuICB9XG5cbiAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgcmV0dXJuIF8udW5pcUJ5KHBheWxvYWQsIG9wdGlvbik7XG4gIH1cblxuICByZXR1cm4gcGF5bG9hZDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29udGVudDxUVmFsdWUgZXh0ZW5kcyBWYWx1ZVR5cGUsIFROYW1lIGV4dGVuZHMgTmFtZVR5cGU+KFxuICBjb250ZW50OiBDb250ZW50VHlwZTxUVmFsdWUsIFROYW1lPixcbiAgcHJvcHM6IFRvb2x0aXBQcm9wczxUVmFsdWUsIFROYW1lPixcbikge1xuICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY29udGVudCkpIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNvbnRlbnQsIHByb3BzKTtcbiAgfVxuICBpZiAoXy5pc0Z1bmN0aW9uKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGVudCBhcyBhbnksIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiA8RGVmYXVsdFRvb2x0aXBDb250ZW50IHsuLi5wcm9wc30gLz47XG59XG5cbmV4cG9ydCB0eXBlIFRvb2x0aXBQcm9wczxUVmFsdWUgZXh0ZW5kcyBWYWx1ZVR5cGUsIFROYW1lIGV4dGVuZHMgTmFtZVR5cGU+ID0gRGVmYXVsdFByb3BzPFRWYWx1ZSwgVE5hbWU+ICYge1xuICBhbGxvd0VzY2FwZVZpZXdCb3g/OiB7XG4gICAgeD86IGJvb2xlYW47XG4gICAgeT86IGJvb2xlYW47XG4gIH07XG4gIGNvbnRlbnQ/OiBDb250ZW50VHlwZTxUVmFsdWUsIFROYW1lPjtcbiAgdmlld0JveD86IHtcbiAgICB4PzogbnVtYmVyO1xuICAgIHk/OiBudW1iZXI7XG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICB9O1xuICBhY3RpdmU/OiBib29sZWFuO1xuICBvZmZzZXQ/OiBudW1iZXI7XG4gIHdyYXBwZXJTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGN1cnNvcj86IGJvb2xlYW4gfCBSZWFjdEVsZW1lbnQgfCBTVkdQcm9wczxTVkdFbGVtZW50PjtcbiAgY29vcmRpbmF0ZT86IHtcbiAgICB4PzogbnVtYmVyO1xuICAgIHk/OiBudW1iZXI7XG4gIH07XG4gIHBvc2l0aW9uPzoge1xuICAgIHg/OiBudW1iZXI7XG4gICAgeT86IG51bWJlcjtcbiAgfTtcbiAgdHJpZ2dlcj86ICdob3ZlcicgfCAnY2xpY2snO1xuICBwYXlsb2FkVW5pcUJ5PzogVW5pcXVlT3B0aW9uPFRWYWx1ZSwgVE5hbWU+O1xuICBpc0FuaW1hdGlvbkFjdGl2ZT86IGJvb2xlYW47XG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuICBhbmltYXRpb25FYXNpbmc/OiBBbmltYXRpb25UaW1pbmc7XG4gIGZpbHRlck51bGw/OiBib29sZWFuO1xuICB1c2VUcmFuc2xhdGUzZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY2xhc3MgVG9vbHRpcDxUVmFsdWUgZXh0ZW5kcyBWYWx1ZVR5cGUsIFROYW1lIGV4dGVuZHMgTmFtZVR5cGU+IGV4dGVuZHMgUHVyZUNvbXBvbmVudDxcbiAgVG9vbHRpcFByb3BzPFRWYWx1ZSwgVE5hbWU+XG4+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1Rvb2x0aXAnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBhbGxvd0VzY2FwZVZpZXdCb3g6IHsgeDogZmFsc2UsIHk6IGZhbHNlIH0sXG4gICAgb2Zmc2V0OiAxMCxcbiAgICB2aWV3Qm94OiB7IHgxOiAwLCB4MjogMCwgeTE6IDAsIHkyOiAwIH0sXG4gICAgY29vcmRpbmF0ZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgY3Vyc29yU3R5bGU6IHt9LFxuICAgIHNlcGFyYXRvcjogJyA6ICcsXG4gICAgd3JhcHBlclN0eWxlOiB7fSxcbiAgICBjb250ZW50U3R5bGU6IHt9LFxuICAgIGl0ZW1TdHlsZToge30sXG4gICAgbGFiZWxTdHlsZToge30sXG4gICAgY3Vyc29yOiB0cnVlLFxuICAgIHRyaWdnZXI6ICdob3ZlcicsXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZScsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcbiAgICBmaWx0ZXJOdWxsOiB0cnVlLFxuICAgIHVzZVRyYW5zbGF0ZTNkOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBib3hXaWR0aDogLTEsXG4gICAgYm94SGVpZ2h0OiAtMSxcbiAgfTtcblxuICBwcml2YXRlIHdyYXBwZXJOb2RlOiBIVE1MRGl2RWxlbWVudDtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZUJCb3goKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZUJCb3goKTtcbiAgfVxuXG4gIHVwZGF0ZUJCb3goKSB7XG4gICAgY29uc3QgeyBib3hXaWR0aCwgYm94SGVpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKHRoaXMud3JhcHBlck5vZGUgJiYgdGhpcy53cmFwcGVyTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIGNvbnN0IGJveCA9IHRoaXMud3JhcHBlck5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChNYXRoLmFicyhib3gud2lkdGggLSBib3hXaWR0aCkgPiBFUFMgfHwgTWF0aC5hYnMoYm94LmhlaWdodCAtIGJveEhlaWdodCkgPiBFUFMpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYm94V2lkdGg6IGJveC53aWR0aCxcbiAgICAgICAgICBib3hIZWlnaHQ6IGJveC5oZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm94V2lkdGggIT09IC0xIHx8IGJveEhlaWdodCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBib3hXaWR0aDogLTEsXG4gICAgICAgIGJveEhlaWdodDogLTEsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRUcmFuc2xhdGUgPSAoe1xuICAgIGtleSxcbiAgICB0b29sdGlwRGltZW5zaW9uLFxuICAgIHZpZXdCb3hEaW1lbnNpb24sXG4gIH06IHtcbiAgICBrZXk6ICd4JyB8ICd5JztcbiAgICB0b29sdGlwRGltZW5zaW9uOiBudW1iZXI7XG4gICAgdmlld0JveERpbWVuc2lvbjogbnVtYmVyO1xuICB9KSA9PiB7XG4gICAgY29uc3QgeyBhbGxvd0VzY2FwZVZpZXdCb3gsIGNvb3JkaW5hdGUsIG9mZnNldCwgcG9zaXRpb24sIHZpZXdCb3ggfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAocG9zaXRpb24gJiYgaXNOdW1iZXIocG9zaXRpb25ba2V5XSkpIHtcbiAgICAgIHJldHVybiBwb3NpdGlvbltrZXldO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3RyaWN0ZWQgPSBjb29yZGluYXRlW2tleV0gLSB0b29sdGlwRGltZW5zaW9uIC0gb2Zmc2V0O1xuICAgIGNvbnN0IHVucmVzdHJpY3RlZCA9IGNvb3JkaW5hdGVba2V5XSArIG9mZnNldDtcbiAgICBpZiAoYWxsb3dFc2NhcGVWaWV3Qm94W2tleV0pIHtcbiAgICAgIHJldHVybiB1bnJlc3RyaWN0ZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgdG9vbHRpcEJvdW5kYXJ5ID0gY29vcmRpbmF0ZVtrZXldICsgdG9vbHRpcERpbWVuc2lvbiArIG9mZnNldDtcbiAgICBjb25zdCB2aWV3Qm94Qm91bmRhcnkgPSB2aWV3Qm94W2tleV0gKyB2aWV3Qm94RGltZW5zaW9uO1xuICAgIGlmICh0b29sdGlwQm91bmRhcnkgPiB2aWV3Qm94Qm91bmRhcnkpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heChyZXN0cmljdGVkLCB2aWV3Qm94W2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgodW5yZXN0cmljdGVkLCB2aWV3Qm94W2tleV0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIGlzQW5pbWF0aW9uQWN0aXZlLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uRWFzaW5nLCBmaWx0ZXJOdWxsLCBwYXlsb2FkVW5pcUJ5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZpbmFsUGF5bG9hZCA9IGdldFVuaXFQYXlsb2FkKFxuICAgICAgcGF5bG9hZFVuaXFCeSxcbiAgICAgIGZpbHRlck51bGwgJiYgcGF5bG9hZCAmJiBwYXlsb2FkLmxlbmd0aCA/IHBheWxvYWQuZmlsdGVyKGVudHJ5ID0+ICFfLmlzTmlsKGVudHJ5LnZhbHVlKSkgOiBwYXlsb2FkLFxuICAgICk7XG4gICAgY29uc3QgaGFzUGF5bG9hZCA9IGZpbmFsUGF5bG9hZCAmJiBmaW5hbFBheWxvYWQubGVuZ3RoO1xuICAgIGNvbnN0IHsgY29udGVudCwgdmlld0JveCwgY29vcmRpbmF0ZSwgcG9zaXRpb24sIGFjdGl2ZSwgd3JhcHBlclN0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBvdXRlclN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgdmlzaWJpbGl0eTogYWN0aXZlICYmIGhhc1BheWxvYWQgPyAndmlzaWJsZScgOiAnaGlkZGVuJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIC4uLndyYXBwZXJTdHlsZSxcbiAgICB9O1xuICAgIGxldCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZO1xuXG4gICAgaWYgKHBvc2l0aW9uICYmIGlzTnVtYmVyKHBvc2l0aW9uLngpICYmIGlzTnVtYmVyKHBvc2l0aW9uLnkpKSB7XG4gICAgICB0cmFuc2xhdGVYID0gcG9zaXRpb24ueDtcbiAgICAgIHRyYW5zbGF0ZVkgPSBwb3NpdGlvbi55O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGJveFdpZHRoLCBib3hIZWlnaHQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIGlmIChib3hXaWR0aCA+IDAgJiYgYm94SGVpZ2h0ID4gMCAmJiBjb29yZGluYXRlKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0aGlzLmdldFRyYW5zbGF0ZSh7XG4gICAgICAgICAga2V5OiAneCcsXG4gICAgICAgICAgdG9vbHRpcERpbWVuc2lvbjogYm94V2lkdGgsXG4gICAgICAgICAgdmlld0JveERpbWVuc2lvbjogdmlld0JveC53aWR0aCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJhbnNsYXRlWSA9IHRoaXMuZ2V0VHJhbnNsYXRlKHtcbiAgICAgICAgICBrZXk6ICd5JyxcbiAgICAgICAgICB0b29sdGlwRGltZW5zaW9uOiBib3hIZWlnaHQsXG4gICAgICAgICAgdmlld0JveERpbWVuc2lvbjogdmlld0JveC5oZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ZXJTdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3V0ZXJTdHlsZSA9IHtcbiAgICAgIC4uLnRyYW5zbGF0ZVN0eWxlKHtcbiAgICAgICAgdHJhbnNmb3JtOiB0aGlzLnByb3BzLnVzZVRyYW5zbGF0ZTNkXG4gICAgICAgICAgPyBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgsIDApYFxuICAgICAgICAgIDogYHRyYW5zbGF0ZSgke3RyYW5zbGF0ZVh9cHgsICR7dHJhbnNsYXRlWX1weClgLFxuICAgICAgfSksXG4gICAgICAuLi5vdXRlclN0eWxlLFxuICAgIH07XG5cbiAgICBpZiAoaXNBbmltYXRpb25BY3RpdmUgJiYgYWN0aXZlKSB7XG4gICAgICBvdXRlclN0eWxlID0ge1xuICAgICAgICAuLi50cmFuc2xhdGVTdHlsZSh7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke2FuaW1hdGlvbkR1cmF0aW9ufW1zICR7YW5pbWF0aW9uRWFzaW5nfWAsXG4gICAgICAgIH0pLFxuICAgICAgICAuLi5vdXRlclN0eWxlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBjbHMgPSBjbGFzc05hbWVzKENMU19QUkVGSVgsIHtcbiAgICAgIFtgJHtDTFNfUFJFRklYfS1yaWdodGBdOlxuICAgICAgICBpc051bWJlcih0cmFuc2xhdGVYKSAmJiBjb29yZGluYXRlICYmIGlzTnVtYmVyKGNvb3JkaW5hdGUueCkgJiYgdHJhbnNsYXRlWCA+PSBjb29yZGluYXRlLngsXG4gICAgICBbYCR7Q0xTX1BSRUZJWH0tbGVmdGBdOiBpc051bWJlcih0cmFuc2xhdGVYKSAmJiBjb29yZGluYXRlICYmIGlzTnVtYmVyKGNvb3JkaW5hdGUueCkgJiYgdHJhbnNsYXRlWCA8IGNvb3JkaW5hdGUueCxcbiAgICAgIFtgJHtDTFNfUFJFRklYfS1ib3R0b21gXTpcbiAgICAgICAgaXNOdW1iZXIodHJhbnNsYXRlWSkgJiYgY29vcmRpbmF0ZSAmJiBpc051bWJlcihjb29yZGluYXRlLnkpICYmIHRyYW5zbGF0ZVkgPj0gY29vcmRpbmF0ZS55LFxuICAgICAgW2Ake0NMU19QUkVGSVh9LXRvcGBdOiBpc051bWJlcih0cmFuc2xhdGVZKSAmJiBjb29yZGluYXRlICYmIGlzTnVtYmVyKGNvb3JkaW5hdGUueSkgJiYgdHJhbnNsYXRlWSA8IGNvb3JkaW5hdGUueSxcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzfVxuICAgICAgICBzdHlsZT17b3V0ZXJTdHlsZX1cbiAgICAgICAgcmVmPXtub2RlID0+IHtcbiAgICAgICAgICB0aGlzLndyYXBwZXJOb2RlID0gbm9kZTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3JlbmRlckNvbnRlbnQoY29udGVudCwgeyAuLi50aGlzLnByb3BzLCBwYXlsb2FkOiBmaW5hbFBheWxvYWQgfSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCJpbXBvcnQgeyBDU1NQcm9wZXJ0aWVzLCBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xuXG5pbnRlcmZhY2UgU3RyaW5nQ2FjaGUge1xuICB3aWR0aENhY2hlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBjYWNoZUNvdW50OiBudW1iZXI7XG59XG5cbmNvbnN0IHN0cmluZ0NhY2hlOiBTdHJpbmdDYWNoZSA9IHtcbiAgd2lkdGhDYWNoZToge30sXG4gIGNhY2hlQ291bnQ6IDAsXG59O1xuY29uc3QgTUFYX0NBQ0hFX05VTSA9IDIwMDA7XG5jb25zdCBTUEFOX1NUWUxFID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnLTIwMDAwcHgnLFxuICBsZWZ0OiAwLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDAsXG4gIGJvcmRlcjogJ25vbmUnLFxuICB3aGl0ZVNwYWNlOiAncHJlJyxcbn07XG5jb25zdCBTVFlMRV9MSVNUID0gW1xuICAnbWluV2lkdGgnLFxuICAnbWF4V2lkdGgnLFxuICAnd2lkdGgnLFxuICAnbWluSGVpZ2h0JyxcbiAgJ21heEhlaWdodCcsXG4gICdoZWlnaHQnLFxuICAndG9wJyxcbiAgJ2xlZnQnLFxuICAnZm9udFNpemUnLFxuICAnbGluZUhlaWdodCcsXG4gICdwYWRkaW5nJyxcbiAgJ21hcmdpbicsXG4gICdwYWRkaW5nTGVmdCcsXG4gICdwYWRkaW5nUmlnaHQnLFxuICAncGFkZGluZ1RvcCcsXG4gICdwYWRkaW5nQm90dG9tJyxcbiAgJ21hcmdpbkxlZnQnLFxuICAnbWFyZ2luUmlnaHQnLFxuICAnbWFyZ2luVG9wJyxcbiAgJ21hcmdpbkJvdHRvbScsXG5dO1xuY29uc3QgTUVBU1VSRU1FTlRfU1BBTl9JRCA9ICdyZWNoYXJ0c19tZWFzdXJlbWVudF9zcGFuJztcblxuZnVuY3Rpb24gYXV0b0NvbXBsZXRlU3R5bGUobmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XG4gIGlmIChTVFlMRV9MSVNULmluZGV4T2YobmFtZSkgPj0gMCAmJiB2YWx1ZSA9PT0gK3ZhbHVlKSB7XG4gICAgcmV0dXJuIGAke3ZhbHVlfXB4YDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2FtZWxUb01pZGRsZUxpbmUodGV4dDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0cnMgPSB0ZXh0LnNwbGl0KCcnKTtcblxuICBjb25zdCBmb3JtYXRTdHJzID0gc3Rycy5yZWR1Y2UoKHJlc3VsdCwgZW50cnkpID0+IHtcbiAgICBpZiAoZW50cnkgPT09IGVudHJ5LnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBbLi4ucmVzdWx0LCAnLScsIGVudHJ5LnRvTG93ZXJDYXNlKCldO1xuICAgIH1cblxuICAgIHJldHVybiBbLi4ucmVzdWx0LCBlbnRyeV07XG4gIH0sIFtdKTtcblxuICByZXR1cm4gZm9ybWF0U3Rycy5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN0eWxlU3RyaW5nID0gKHN0eWxlOiBDU1NQcm9wZXJ0aWVzKSA9PlxuICBPYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKFxuICAgIChyZXN1bHQsIHMpID0+IGAke3Jlc3VsdH0ke2NhbWVsVG9NaWRkbGVMaW5lKHMpfToke2F1dG9Db21wbGV0ZVN0eWxlKHMsIChzdHlsZSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVtzXSl9O2AsXG4gICAgJycsXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRTdHJpbmdTaXplID0gKHRleHQ6IHN0cmluZyB8IG51bWJlciwgc3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7fSkgPT4ge1xuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkIHx8IHRleHQgPT09IG51bGwgfHwgR2xvYmFsLmlzU3NyKSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICB9XG5cbiAgY29uc3Qgc3RyID0gYCR7dGV4dH1gO1xuICBjb25zdCBzdHlsZVN0cmluZyA9IGdldFN0eWxlU3RyaW5nKHN0eWxlKTtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdHJ9LSR7c3R5bGVTdHJpbmd9YDtcblxuICBpZiAoc3RyaW5nQ2FjaGUud2lkdGhDYWNoZVtjYWNoZUtleV0pIHtcbiAgICByZXR1cm4gc3RyaW5nQ2FjaGUud2lkdGhDYWNoZVtjYWNoZUtleV07XG4gIH1cblxuICB0cnkge1xuICAgIGxldCBtZWFzdXJlbWVudFNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChNRUFTVVJFTUVOVF9TUEFOX0lEKTtcbiAgICBpZiAoIW1lYXN1cmVtZW50U3Bhbikge1xuICAgICAgbWVhc3VyZW1lbnRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgbWVhc3VyZW1lbnRTcGFuLnNldEF0dHJpYnV0ZSgnaWQnLCBNRUFTVVJFTUVOVF9TUEFOX0lEKTtcbiAgICAgIG1lYXN1cmVtZW50U3Bhbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWVhc3VyZW1lbnRTcGFuKTtcbiAgICB9XG4gICAgLy8gTmVlZCB0byB1c2UgQ1NTIE9iamVjdCBNb2RlbCAoQ1NTT00pIHRvIGJlIGFibGUgdG8gY29tcGx5IHdpdGggQ29udGVudCBTZWN1cml0eSBQb2xpY3kgKENTUClcbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250ZW50X1NlY3VyaXR5X1BvbGljeVxuICAgIGNvbnN0IG1lYXN1cmVtZW50U3BhblN0eWxlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0geyAuLi5TUEFOX1NUWUxFLCAuLi5zdHlsZSB9O1xuICAgIE9iamVjdC5rZXlzKG1lYXN1cmVtZW50U3BhblN0eWxlKS5tYXAoc3R5bGVLZXkgPT4ge1xuICAgICAgKG1lYXN1cmVtZW50U3Bhbi5zdHlsZSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVtzdHlsZUtleV0gPSBtZWFzdXJlbWVudFNwYW5TdHlsZVtzdHlsZUtleV07XG4gICAgICByZXR1cm4gc3R5bGVLZXk7XG4gICAgfSk7XG5cbiAgICBtZWFzdXJlbWVudFNwYW4udGV4dENvbnRlbnQgPSBzdHI7XG5cbiAgICBjb25zdCByZWN0ID0gbWVhc3VyZW1lbnRTcGFuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgd2lkdGg6IHJlY3Qud2lkdGgsIGhlaWdodDogcmVjdC5oZWlnaHQgfTtcblxuICAgIHN0cmluZ0NhY2hlLndpZHRoQ2FjaGVbY2FjaGVLZXldID0gcmVzdWx0O1xuXG4gICAgaWYgKCsrc3RyaW5nQ2FjaGUuY2FjaGVDb3VudCA+IE1BWF9DQUNIRV9OVU0pIHtcbiAgICAgIHN0cmluZ0NhY2hlLmNhY2hlQ291bnQgPSAwO1xuICAgICAgc3RyaW5nQ2FjaGUud2lkdGhDYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gIH1cbn07XG5cbmludGVyZmFjZSBDb250YWluZXJPZmZzZXQge1xuICB0b3A6IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0T2Zmc2V0ID0gKGVsOiBIVE1MRWxlbWVudCk6IENvbnRhaW5lck9mZnNldCA9PiB7XG4gIGNvbnN0IGh0bWwgPSBlbC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgbGV0IGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cbiAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3JcbiAgLy8gQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuICBpZiAodHlwZW9mIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gaHRtbC5jbGllbnRUb3AsXG4gICAgbGVmdDogYm94LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQgLSBodG1sLmNsaWVudExlZnQsXG4gIH07XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSBjb29yZGluYXRlIG9mIGN1cnNvciBpbiBjaGFydFxuICogQHBhcmFtICB7T2JqZWN0fSBldmVudCAgRXZlbnQgb2JqZWN0XG4gKiBAcGFyYW0gIHtPYmplY3R9IG9mZnNldCBUaGUgb2Zmc2V0IG9mIG1haW4gcGFydCBpbiB0aGUgc3ZnIGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIHtjaGFydFgsIGNoYXJ0WX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUNoYXJ0Q29vcmRpbmF0ZSA9IChldmVudDogTW91c2VFdmVudCwgb2Zmc2V0OiBDb250YWluZXJPZmZzZXQpID0+ICh7XG4gIGNoYXJ0WDogTWF0aC5yb3VuZChldmVudC5wYWdlWCAtIG9mZnNldC5sZWZ0KSxcbiAgY2hhcnRZOiBNYXRoLnJvdW5kKGV2ZW50LnBhZ2VZIC0gb2Zmc2V0LnRvcCksXG59KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBzaGFsbG93RXF1YWwoYTogYW55LCBiOiBhbnkpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbiAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSkgJiYgKCF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleSkgfHwgYVtrZXldICE9PSBiW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGIpIHtcbiAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXkpICYmICF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgU2VjdG9yXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMsIEdlb21ldHJ5U2VjdG9yIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBwb2xhclRvQ2FydGVzaWFuLCBSQURJQU4gfSBmcm9tICcuLi91dGlsL1BvbGFyVXRpbHMnO1xuaW1wb3J0IHsgZ2V0UGVyY2VudFZhbHVlLCBtYXRoU2lnbiB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcblxuY29uc3QgZ2V0RGVsdGFBbmdsZSA9IChzdGFydEFuZ2xlOiBudW1iZXIsIGVuZEFuZ2xlOiBudW1iZXIpID0+IHtcbiAgY29uc3Qgc2lnbiA9IG1hdGhTaWduKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gIGNvbnN0IGRlbHRhQW5nbGUgPSBNYXRoLm1pbihNYXRoLmFicyhlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpLCAzNTkuOTk5KTtcblxuICByZXR1cm4gc2lnbiAqIGRlbHRhQW5nbGU7XG59O1xuXG5pbnRlcmZhY2UgVGFuZ2VudENpcmNsZURlZiB7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgcmFkaXVzPzogbnVtYmVyO1xuICBhbmdsZT86IG51bWJlcjtcbiAgc2lnbj86IG51bWJlcjtcbiAgaXNFeHRlcm5hbD86IGJvb2xlYW47XG4gIGNvcm5lclJhZGl1cz86IG51bWJlcjtcbiAgY29ybmVySXNFeHRlcm5hbD86IGJvb2xlYW47XG59XG5cbmNvbnN0IGdldFRhbmdlbnRDaXJjbGUgPSAoe1xuICBjeCxcbiAgY3ksXG4gIHJhZGl1cyxcbiAgYW5nbGUsXG4gIHNpZ24sXG4gIGlzRXh0ZXJuYWwsXG4gIGNvcm5lclJhZGl1cyxcbiAgY29ybmVySXNFeHRlcm5hbCxcbn06IFRhbmdlbnRDaXJjbGVEZWYpID0+IHtcbiAgY29uc3QgY2VudGVyUmFkaXVzID0gY29ybmVyUmFkaXVzICogKGlzRXh0ZXJuYWwgPyAxIDogLTEpICsgcmFkaXVzO1xuICBjb25zdCB0aGV0YSA9IE1hdGguYXNpbihjb3JuZXJSYWRpdXMgLyBjZW50ZXJSYWRpdXMpIC8gUkFESUFOO1xuICBjb25zdCBjZW50ZXJBbmdsZSA9IGNvcm5lcklzRXh0ZXJuYWwgPyBhbmdsZSA6IGFuZ2xlICsgc2lnbiAqIHRoZXRhO1xuICBjb25zdCBjZW50ZXIgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgY2VudGVyUmFkaXVzLCBjZW50ZXJBbmdsZSk7XG4gIC8vIFRoZSBjb29yZGluYXRlIG9mIHBvaW50IHdoaWNoIGlzIHRhbmdlbnQgdG8gdGhlIGNpcmNsZVxuICBjb25zdCBjaXJjbGVUYW5nZW5jeSA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCByYWRpdXMsIGNlbnRlckFuZ2xlKTtcbiAgLy8gVGhlIGNvb3JkaW5hdGUgb2YgcG9pbnQgd2hpY2ggaXMgdGFuZ2VudCB0byB0aGUgcmFkaXVzIGxpbmVcbiAgY29uc3QgbGluZVRhbmdlbmN5QW5nbGUgPSBjb3JuZXJJc0V4dGVybmFsID8gYW5nbGUgLSBzaWduICogdGhldGEgOiBhbmdsZTtcbiAgY29uc3QgbGluZVRhbmdlbmN5ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIGNlbnRlclJhZGl1cyAqIE1hdGguY29zKHRoZXRhICogUkFESUFOKSwgbGluZVRhbmdlbmN5QW5nbGUpO1xuICByZXR1cm4geyBjZW50ZXIsIGNpcmNsZVRhbmdlbmN5LCBsaW5lVGFuZ2VuY3ksIHRoZXRhIH07XG59O1xuXG5jb25zdCBnZXRTZWN0b3JQYXRoID0gKHsgY3gsIGN5LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlIH06IEdlb21ldHJ5U2VjdG9yKSA9PiB7XG4gIGNvbnN0IGFuZ2xlID0gZ2V0RGVsdGFBbmdsZShzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG5cbiAgLy8gV2hlbiB0aGUgYW5nbGUgb2Ygc2VjdG9yIGVxdWFscyB0byAzNjAsIHN0YXIgcG9pbnQgYW5kIGVuZCBwb2ludCBjb2luY2lkZVxuICBjb25zdCB0ZW1wRW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgYW5nbGU7XG4gIGNvbnN0IG91dGVyU3RhcnRQb2ludCA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSk7XG4gIGNvbnN0IG91dGVyRW5kUG9pbnQgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgb3V0ZXJSYWRpdXMsIHRlbXBFbmRBbmdsZSk7XG5cbiAgbGV0IHBhdGggPSBgTSAke291dGVyU3RhcnRQb2ludC54fSwke291dGVyU3RhcnRQb2ludC55fVxuICAgIEEgJHtvdXRlclJhZGl1c30sJHtvdXRlclJhZGl1c30sMCxcbiAgICAkeysoTWF0aC5hYnMoYW5nbGUpID4gMTgwKX0sJHsrKHN0YXJ0QW5nbGUgPiB0ZW1wRW5kQW5nbGUpfSxcbiAgICAke291dGVyRW5kUG9pbnQueH0sJHtvdXRlckVuZFBvaW50Lnl9XG4gIGA7XG5cbiAgaWYgKGlubmVyUmFkaXVzID4gMCkge1xuICAgIGNvbnN0IGlubmVyU3RhcnRQb2ludCA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCBpbm5lclJhZGl1cywgc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgaW5uZXJFbmRQb2ludCA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCBpbm5lclJhZGl1cywgdGVtcEVuZEFuZ2xlKTtcbiAgICBwYXRoICs9IGBMICR7aW5uZXJFbmRQb2ludC54fSwke2lubmVyRW5kUG9pbnQueX1cbiAgICAgICAgICAgIEEgJHtpbm5lclJhZGl1c30sJHtpbm5lclJhZGl1c30sMCxcbiAgICAgICAgICAgICR7KyhNYXRoLmFicyhhbmdsZSkgPiAxODApfSwkeysoc3RhcnRBbmdsZSA8PSB0ZW1wRW5kQW5nbGUpfSxcbiAgICAgICAgICAgICR7aW5uZXJTdGFydFBvaW50Lnh9LCR7aW5uZXJTdGFydFBvaW50Lnl9IFpgO1xuICB9IGVsc2Uge1xuICAgIHBhdGggKz0gYEwgJHtjeH0sJHtjeX0gWmA7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbmNvbnN0IGdldFNlY3RvcldpdGhDb3JuZXIgPSAoe1xuICBjeCxcbiAgY3ksXG4gIGlubmVyUmFkaXVzLFxuICBvdXRlclJhZGl1cyxcbiAgY29ybmVyUmFkaXVzLFxuICBmb3JjZUNvcm5lclJhZGl1cyxcbiAgY29ybmVySXNFeHRlcm5hbCxcbiAgc3RhcnRBbmdsZSxcbiAgZW5kQW5nbGUsXG59OiBHZW9tZXRyeVNlY3RvcikgPT4ge1xuICBjb25zdCBzaWduID0gbWF0aFNpZ24oZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgY29uc3QgeyBjaXJjbGVUYW5nZW5jeTogc29jdCwgbGluZVRhbmdlbmN5OiBzb2x0LCB0aGV0YTogc290IH0gPSBnZXRUYW5nZW50Q2lyY2xlKHtcbiAgICBjeCxcbiAgICBjeSxcbiAgICByYWRpdXM6IG91dGVyUmFkaXVzLFxuICAgIGFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgIHNpZ24sXG4gICAgY29ybmVyUmFkaXVzLFxuICAgIGNvcm5lcklzRXh0ZXJuYWwsXG4gIH0pO1xuICBjb25zdCB7IGNpcmNsZVRhbmdlbmN5OiBlb2N0LCBsaW5lVGFuZ2VuY3k6IGVvbHQsIHRoZXRhOiBlb3QgfSA9IGdldFRhbmdlbnRDaXJjbGUoe1xuICAgIGN4LFxuICAgIGN5LFxuICAgIHJhZGl1czogb3V0ZXJSYWRpdXMsXG4gICAgYW5nbGU6IGVuZEFuZ2xlLFxuICAgIHNpZ246IC1zaWduLFxuICAgIGNvcm5lclJhZGl1cyxcbiAgICBjb3JuZXJJc0V4dGVybmFsLFxuICB9KTtcbiAgY29uc3Qgb3V0ZXJBcmNBbmdsZSA9IGNvcm5lcklzRXh0ZXJuYWxcbiAgICA/IE1hdGguYWJzKHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSlcbiAgICA6IE1hdGguYWJzKHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSkgLSBzb3QgLSBlb3Q7XG5cbiAgaWYgKG91dGVyQXJjQW5nbGUgPCAwKSB7XG4gICAgaWYgKGZvcmNlQ29ybmVyUmFkaXVzKSB7XG4gICAgICByZXR1cm4gYE0gJHtzb2x0Lnh9LCR7c29sdC55fVxuICAgICAgICBhJHtjb3JuZXJSYWRpdXN9LCR7Y29ybmVyUmFkaXVzfSwwLDAsMSwke2Nvcm5lclJhZGl1cyAqIDJ9LDBcbiAgICAgICAgYSR7Y29ybmVyUmFkaXVzfSwke2Nvcm5lclJhZGl1c30sMCwwLDEsJHstY29ybmVyUmFkaXVzICogMn0sMFxuICAgICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIGdldFNlY3RvclBhdGgoe1xuICAgICAgY3gsXG4gICAgICBjeSxcbiAgICAgIGlubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICBzdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUsXG4gICAgfSk7XG4gIH1cblxuICBsZXQgcGF0aCA9IGBNICR7c29sdC54fSwke3NvbHQueX1cbiAgICBBJHtjb3JuZXJSYWRpdXN9LCR7Y29ybmVyUmFkaXVzfSwwLDAsJHsrKHNpZ24gPCAwKX0sJHtzb2N0Lnh9LCR7c29jdC55fVxuICAgIEEke291dGVyUmFkaXVzfSwke291dGVyUmFkaXVzfSwwLCR7KyhvdXRlckFyY0FuZ2xlID4gMTgwKX0sJHsrKHNpZ24gPCAwKX0sJHtlb2N0Lnh9LCR7ZW9jdC55fVxuICAgIEEke2Nvcm5lclJhZGl1c30sJHtjb3JuZXJSYWRpdXN9LDAsMCwkeysoc2lnbiA8IDApfSwke2VvbHQueH0sJHtlb2x0Lnl9XG4gIGA7XG5cbiAgaWYgKGlubmVyUmFkaXVzID4gMCkge1xuICAgIGNvbnN0IHsgY2lyY2xlVGFuZ2VuY3k6IHNpY3QsIGxpbmVUYW5nZW5jeTogc2lsdCwgdGhldGE6IHNpdCB9ID0gZ2V0VGFuZ2VudENpcmNsZSh7XG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgcmFkaXVzOiBpbm5lclJhZGl1cyxcbiAgICAgIGFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgc2lnbixcbiAgICAgIGlzRXh0ZXJuYWw6IHRydWUsXG4gICAgICBjb3JuZXJSYWRpdXMsXG4gICAgICBjb3JuZXJJc0V4dGVybmFsLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgY2lyY2xlVGFuZ2VuY3k6IGVpY3QsIGxpbmVUYW5nZW5jeTogZWlsdCwgdGhldGE6IGVpdCB9ID0gZ2V0VGFuZ2VudENpcmNsZSh7XG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgcmFkaXVzOiBpbm5lclJhZGl1cyxcbiAgICAgIGFuZ2xlOiBlbmRBbmdsZSxcbiAgICAgIHNpZ246IC1zaWduLFxuICAgICAgaXNFeHRlcm5hbDogdHJ1ZSxcbiAgICAgIGNvcm5lclJhZGl1cyxcbiAgICAgIGNvcm5lcklzRXh0ZXJuYWwsXG4gICAgfSk7XG4gICAgY29uc3QgaW5uZXJBcmNBbmdsZSA9IGNvcm5lcklzRXh0ZXJuYWxcbiAgICAgID8gTWF0aC5hYnMoc3RhcnRBbmdsZSAtIGVuZEFuZ2xlKVxuICAgICAgOiBNYXRoLmFicyhzdGFydEFuZ2xlIC0gZW5kQW5nbGUpIC0gc2l0IC0gZWl0O1xuXG4gICAgaWYgKGlubmVyQXJjQW5nbGUgPCAwICYmIGNvcm5lclJhZGl1cyA9PT0gMCkge1xuICAgICAgcmV0dXJuIGAke3BhdGh9TCR7Y3h9LCR7Y3l9WmA7XG4gICAgfVxuXG4gICAgcGF0aCArPSBgTCR7ZWlsdC54fSwke2VpbHQueX1cbiAgICAgIEEke2Nvcm5lclJhZGl1c30sJHtjb3JuZXJSYWRpdXN9LDAsMCwkeysoc2lnbiA8IDApfSwke2VpY3QueH0sJHtlaWN0Lnl9XG4gICAgICBBJHtpbm5lclJhZGl1c30sJHtpbm5lclJhZGl1c30sMCwkeysoaW5uZXJBcmNBbmdsZSA+IDE4MCl9LCR7KyhzaWduID4gMCl9LCR7c2ljdC54fSwke3NpY3QueX1cbiAgICAgIEEke2Nvcm5lclJhZGl1c30sJHtjb3JuZXJSYWRpdXN9LDAsMCwkeysoc2lnbiA8IDApfSwke3NpbHQueH0sJHtzaWx0Lnl9WmA7XG4gIH0gZWxzZSB7XG4gICAgcGF0aCArPSBgTCR7Y3h9LCR7Y3l9WmA7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbmludGVyZmFjZSBTZWN0b3JQcm9wcyBleHRlbmRzIEdlb21ldHJ5U2VjdG9yIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFNWR1Byb3BzPFNWR1BhdGhFbGVtZW50PiAmIFNlY3RvclByb3BzO1xuXG5leHBvcnQgY2xhc3MgU2VjdG9yIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIGlubmVyUmFkaXVzOiAwLFxuICAgIG91dGVyUmFkaXVzOiAwLFxuICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgZW5kQW5nbGU6IDAsXG4gICAgY29ybmVyUmFkaXVzOiAwLFxuICAgIGZvcmNlQ29ybmVyUmFkaXVzOiBmYWxzZSxcbiAgICBjb3JuZXJJc0V4dGVybmFsOiBmYWxzZSxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY3gsXG4gICAgICBjeSxcbiAgICAgIGlubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICBjb3JuZXJSYWRpdXMsXG4gICAgICBmb3JjZUNvcm5lclJhZGl1cyxcbiAgICAgIGNvcm5lcklzRXh0ZXJuYWwsXG4gICAgICBzdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUsXG4gICAgICBjbGFzc05hbWUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAob3V0ZXJSYWRpdXMgPCBpbm5lclJhZGl1cyB8fCBzdGFydEFuZ2xlID09PSBlbmRBbmdsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbGF5ZXJDbGFzcyA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLXNlY3RvcicsIGNsYXNzTmFtZSk7XG4gICAgY29uc3QgZGVsdGFSYWRpdXMgPSBvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzO1xuICAgIGNvbnN0IGNyID0gZ2V0UGVyY2VudFZhbHVlKGNvcm5lclJhZGl1cywgZGVsdGFSYWRpdXMsIDAsIHRydWUpO1xuICAgIGxldCBwYXRoO1xuXG4gICAgaWYgKGNyID4gMCAmJiBNYXRoLmFicyhzdGFydEFuZ2xlIC0gZW5kQW5nbGUpIDwgMzYwKSB7XG4gICAgICBwYXRoID0gZ2V0U2VjdG9yV2l0aENvcm5lcih7XG4gICAgICAgIGN4LFxuICAgICAgICBjeSxcbiAgICAgICAgaW5uZXJSYWRpdXMsXG4gICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICBjb3JuZXJSYWRpdXM6IE1hdGgubWluKGNyLCBkZWx0YVJhZGl1cyAvIDIpLFxuICAgICAgICBmb3JjZUNvcm5lclJhZGl1cyxcbiAgICAgICAgY29ybmVySXNFeHRlcm5hbCxcbiAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IGdldFNlY3RvclBhdGgoeyBjeCwgY3ksIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxwYXRoIHsuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzLCB0cnVlKX0gY2xhc3NOYW1lPXtsYXllckNsYXNzfSBkPXtwYXRofSAvPjtcbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFBvbHlnb25cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBmaWx0ZXJQcm9wcywgQ29vcmRpbmF0ZSB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5jb25zdCBpc1ZhbGlkYXRlUG9pbnQgPSAocG9pbnQ6IENvb3JkaW5hdGUpID0+IHtcbiAgcmV0dXJuIHBvaW50ICYmIHBvaW50LnggPT09ICtwb2ludC54ICYmIHBvaW50LnkgPT09ICtwb2ludC55O1xufTtcblxuY29uc3QgZ2V0UGFyc2VkUG9pbnRzID0gKHBvaW50czogQ29vcmRpbmF0ZVtdID0gW10pID0+IHtcbiAgbGV0IHNlZ21lbnRQb2ludHM6IENvb3JkaW5hdGVbXVtdID0gW1tdXTtcblxuICBwb2ludHMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgaWYgKGlzVmFsaWRhdGVQb2ludChlbnRyeSkpIHtcbiAgICAgIHNlZ21lbnRQb2ludHNbc2VnbWVudFBvaW50cy5sZW5ndGggLSAxXS5wdXNoKGVudHJ5KTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnRQb2ludHNbc2VnbWVudFBvaW50cy5sZW5ndGggLSAxXS5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBhZGQgYW5vdGhlciBwYXRoXG4gICAgICBzZWdtZW50UG9pbnRzLnB1c2goW10pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlzVmFsaWRhdGVQb2ludChwb2ludHNbMF0pKSB7XG4gICAgc2VnbWVudFBvaW50c1tzZWdtZW50UG9pbnRzLmxlbmd0aCAtIDFdLnB1c2gocG9pbnRzWzBdKTtcbiAgfVxuXG4gIGlmIChzZWdtZW50UG9pbnRzW3NlZ21lbnRQb2ludHMubGVuZ3RoIC0gMV0ubGVuZ3RoIDw9IDApIHtcbiAgICBzZWdtZW50UG9pbnRzID0gc2VnbWVudFBvaW50cy5zbGljZSgwLCAtMSk7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudFBvaW50cztcbn07XG5cbmNvbnN0IGdldFNpbmdsZVBvbHlnb25QYXRoID0gKHBvaW50czogQ29vcmRpbmF0ZVtdLCBjb25uZWN0TnVsbHM/OiBib29sZWFuKSA9PiB7XG4gIGxldCBzZWdtZW50UG9pbnRzID0gZ2V0UGFyc2VkUG9pbnRzKHBvaW50cyk7XG5cbiAgaWYgKGNvbm5lY3ROdWxscykge1xuICAgIHNlZ21lbnRQb2ludHMgPSBbXG4gICAgICBzZWdtZW50UG9pbnRzLnJlZHVjZSgocmVzOiBDb29yZGluYXRlW10sIHNlZ1BvaW50czogQ29vcmRpbmF0ZVtdKSA9PiB7XG4gICAgICAgIHJldHVybiBbLi4ucmVzLCAuLi5zZWdQb2ludHNdO1xuICAgICAgfSwgW10pLFxuICAgIF07XG4gIH1cblxuICBjb25zdCBwb2x5Z29uUGF0aCA9IHNlZ21lbnRQb2ludHNcbiAgICAubWFwKHNlZ1BvaW50cyA9PiB7XG4gICAgICByZXR1cm4gc2VnUG9pbnRzLnJlZHVjZSgocGF0aDogc3RyaW5nLCBwb2ludDogQ29vcmRpbmF0ZSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gYCR7cGF0aH0ke2luZGV4ID09PSAwID8gJ00nIDogJ0wnfSR7cG9pbnQueH0sJHtwb2ludC55fWA7XG4gICAgICB9LCAnJyk7XG4gICAgfSlcbiAgICAuam9pbignJyk7XG5cbiAgcmV0dXJuIHNlZ21lbnRQb2ludHMubGVuZ3RoID09PSAxID8gYCR7cG9seWdvblBhdGh9WmAgOiBwb2x5Z29uUGF0aDtcbn07XG5cbmNvbnN0IGdldFJhbmdsZVBhdGggPSAocG9pbnRzOiBDb29yZGluYXRlW10sIGJhc2VMaW5lUG9pbnRzOiBDb29yZGluYXRlW10sIGNvbm5lY3ROdWxscz86IGJvb2xlYW4pID0+IHtcbiAgY29uc3Qgb3V0ZXJQYXRoID0gZ2V0U2luZ2xlUG9seWdvblBhdGgocG9pbnRzLCBjb25uZWN0TnVsbHMpO1xuXG4gIHJldHVybiBgJHtvdXRlclBhdGguc2xpY2UoLTEpID09PSAnWicgPyBvdXRlclBhdGguc2xpY2UoMCwgLTEpIDogb3V0ZXJQYXRofUwke2dldFNpbmdsZVBvbHlnb25QYXRoKFxuICAgIGJhc2VMaW5lUG9pbnRzLnJldmVyc2UoKSxcbiAgICBjb25uZWN0TnVsbHMsXG4gICkuc2xpY2UoMSl9YDtcbn07XG5cbmludGVyZmFjZSBQb2x5Z29uUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHBvaW50cz86IENvb3JkaW5hdGVbXTtcbiAgYmFzZUxpbmVQb2ludHM/OiBDb29yZGluYXRlW107XG4gIGNvbm5lY3ROdWxscz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gT21pdDxTVkdQcm9wczxTVkdQb2x5Z29uRWxlbWVudD4sICdwb2ludHMnPiAmIFBvbHlnb25Qcm9wcztcblxuZXhwb3J0IGNsYXNzIFBvbHlnb24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBvaW50cywgY2xhc3NOYW1lLCBiYXNlTGluZVBvaW50cywgY29ubmVjdE51bGxzLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIXBvaW50cyB8fCAhcG9pbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbGF5ZXJDbGFzcyA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLXBvbHlnb24nLCBjbGFzc05hbWUpO1xuXG4gICAgaWYgKGJhc2VMaW5lUG9pbnRzICYmIGJhc2VMaW5lUG9pbnRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgaGFzU3Ryb2tlID0gb3RoZXJzLnN0cm9rZSAmJiBvdGhlcnMuc3Ryb2tlICE9PSAnbm9uZSc7XG4gICAgICBjb25zdCByYW5nZVBhdGggPSBnZXRSYW5nbGVQYXRoKHBvaW50cywgYmFzZUxpbmVQb2ludHMsIGNvbm5lY3ROdWxscyk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxnIGNsYXNzTmFtZT17bGF5ZXJDbGFzc30+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIHsuLi5maWx0ZXJQcm9wcyhvdGhlcnMsIHRydWUpfVxuICAgICAgICAgICAgZmlsbD17cmFuZ2VQYXRoLnNsaWNlKC0xKSA9PT0gJ1onID8gb3RoZXJzLmZpbGwgOiAnbm9uZSd9XG4gICAgICAgICAgICBzdHJva2U9XCJub25lXCJcbiAgICAgICAgICAgIGQ9e3JhbmdlUGF0aH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtoYXNTdHJva2UgPyAoXG4gICAgICAgICAgICA8cGF0aCB7Li4uZmlsdGVyUHJvcHMob3RoZXJzLCB0cnVlKX0gZmlsbD1cIm5vbmVcIiBkPXtnZXRTaW5nbGVQb2x5Z29uUGF0aChwb2ludHMsIGNvbm5lY3ROdWxscyl9IC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAge2hhc1N0cm9rZSA/IChcbiAgICAgICAgICAgIDxwYXRoIHsuLi5maWx0ZXJQcm9wcyhvdGhlcnMsIHRydWUpfSBmaWxsPVwibm9uZVwiIGQ9e2dldFNpbmdsZVBvbHlnb25QYXRoKGJhc2VMaW5lUG9pbnRzLCBjb25uZWN0TnVsbHMpfSAvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2c+XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHNpbmdsZVBhdGggPSBnZXRTaW5nbGVQb2x5Z29uUGF0aChwb2ludHMsIGNvbm5lY3ROdWxscyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHBhdGhcbiAgICAgICAgey4uLmZpbHRlclByb3BzKG90aGVycywgdHJ1ZSl9XG4gICAgICAgIGZpbGw9e3NpbmdsZVBhdGguc2xpY2UoLTEpID09PSAnWicgPyBvdGhlcnMuZmlsbCA6ICdub25lJ31cbiAgICAgICAgY2xhc3NOYW1lPXtsYXllckNsYXNzfVxuICAgICAgICBkPXtzaW5nbGVQYXRofVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgVGhlIGF4aXMgb2YgcG9sYXIgY29vcmRpbmF0ZSBzeXN0ZW1cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudC9UZXh0JztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IHBvbGFyVG9DYXJ0ZXNpYW4gfSBmcm9tICcuLi91dGlsL1BvbGFyVXRpbHMnO1xuaW1wb3J0IHtcbiAgZmlsdGVyUHJvcHMsXG4gIEJhc2VBeGlzUHJvcHMsXG4gIFRpY2tJdGVtLFxuICBhZGFwdEV2ZW50c09mQ2hpbGQsXG4gIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvbGFyUmFkaXVzQXhpc1Byb3BzIGV4dGVuZHMgQmFzZUF4aXNQcm9wcyB7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgcmFkaXVzQXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICBhbmdsZT86IG51bWJlcjtcbiAgb3JpZW50YXRpb24/OiAnbGVmdCcgfCAncmlnaHQnIHwgJ21pZGRsZSc7XG4gIHRpY2tzPzogVGlja0l0ZW1bXTtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBQcmVzZW50YXRpb25BdHRyaWJ1dGVzQWRhcHRDaGlsZEV2ZW50PGFueSwgU1ZHRWxlbWVudD4gJiBQb2xhclJhZGl1c0F4aXNQcm9wcztcblxuZXhwb3J0IGNsYXNzIFBvbGFyUmFkaXVzQXhpcyBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1BvbGFyUmFkaXVzQXhpcyc7XG5cbiAgc3RhdGljIGF4aXNUeXBlID0gJ3JhZGl1c0F4aXMnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgcmFkaXVzQXhpc0lkOiAwLFxuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIGFuZ2xlOiAwLFxuICAgIG9yaWVudGF0aW9uOiAncmlnaHQnLFxuICAgIHN0cm9rZTogJyNjY2MnLFxuICAgIGF4aXNMaW5lOiB0cnVlLFxuICAgIHRpY2s6IHRydWUsXG4gICAgdGlja0NvdW50OiA1LFxuICAgIGRvbWFpbjogWzAsICdhdXRvJ10sXG4gICAgYWxsb3dEYXRhT3ZlcmZsb3c6IGZhbHNlLFxuICAgIHNjYWxlOiAnYXV0bycsXG4gICAgYWxsb3dEdXBsaWNhdGVkQ2F0ZWdvcnk6IHRydWUsXG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29vcmRpbmF0ZSBvZiB0aWNrXG4gICAqIEBwYXJhbSAge051bWJlcn0gY29vcmRpbmF0ZSBUaGUgcmFkaXVzIG9mIHRpY2tcbiAgICogQHJldHVybiB7T2JqZWN0fSAoeCwgeSlcbiAgICovXG4gIGdldFRpY2tWYWx1ZUNvb3JkKHsgY29vcmRpbmF0ZSB9OiBUaWNrSXRlbSkge1xuICAgIGNvbnN0IHsgYW5nbGUsIGN4LCBjeSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgY29vcmRpbmF0ZSwgYW5nbGUpO1xuICB9XG5cbiAgZ2V0VGlja1RleHRBbmNob3IoKSB7XG4gICAgY29uc3QgeyBvcmllbnRhdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgdGV4dEFuY2hvcjtcblxuICAgIHN3aXRjaCAob3JpZW50YXRpb24pIHtcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICB0ZXh0QW5jaG9yID0gJ2VuZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB0ZXh0QW5jaG9yID0gJ3N0YXJ0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0ZXh0QW5jaG9yID0gJ21pZGRsZSc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0QW5jaG9yO1xuICB9XG5cbiAgZ2V0Vmlld0JveCgpIHtcbiAgICBjb25zdCB7IGN4LCBjeSwgYW5nbGUsIHRpY2tzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG1heFJhZGl1c1RpY2sgPSBfLm1heEJ5KHRpY2tzLCAoZW50cnk6IFRpY2tJdGVtKSA9PiBlbnRyeS5jb29yZGluYXRlIHx8IDApO1xuICAgIGNvbnN0IG1pblJhZGl1c1RpY2sgPSBfLm1pbkJ5KHRpY2tzLCAoZW50cnk6IFRpY2tJdGVtKSA9PiBlbnRyeS5jb29yZGluYXRlIHx8IDApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGN4LFxuICAgICAgY3ksXG4gICAgICBzdGFydEFuZ2xlOiBhbmdsZSxcbiAgICAgIGVuZEFuZ2xlOiBhbmdsZSxcbiAgICAgIGlubmVyUmFkaXVzOiBtaW5SYWRpdXNUaWNrLmNvb3JkaW5hdGUgfHwgMCxcbiAgICAgIG91dGVyUmFkaXVzOiBtYXhSYWRpdXNUaWNrLmNvb3JkaW5hdGUgfHwgMCxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyQXhpc0xpbmUoKSB7XG4gICAgY29uc3QgeyBjeCwgY3ksIGFuZ2xlLCB0aWNrcywgYXhpc0xpbmUsIC4uLm90aGVycyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBleHRlbnQgPSB0aWNrcy5yZWR1Y2UoXG4gICAgICAocmVzdWx0LCBlbnRyeSkgPT4gW01hdGgubWluKHJlc3VsdFswXSwgZW50cnkuY29vcmRpbmF0ZSksIE1hdGgubWF4KHJlc3VsdFsxXSwgZW50cnkuY29vcmRpbmF0ZSldLFxuICAgICAgW0luZmluaXR5LCAtSW5maW5pdHldLFxuICAgICk7XG4gICAgY29uc3QgcG9pbnQwID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIGV4dGVudFswXSwgYW5nbGUpO1xuICAgIGNvbnN0IHBvaW50MSA9IHBvbGFyVG9DYXJ0ZXNpYW4oY3gsIGN5LCBleHRlbnRbMV0sIGFuZ2xlKTtcblxuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgLi4uZmlsdGVyUHJvcHMob3RoZXJzKSxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIC4uLmZpbHRlclByb3BzKGF4aXNMaW5lKSxcbiAgICAgIHgxOiBwb2ludDAueCxcbiAgICAgIHkxOiBwb2ludDAueSxcbiAgICAgIHgyOiBwb2ludDEueCxcbiAgICAgIHkyOiBwb2ludDEueSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxsaW5lIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLXJhZGl1cy1heGlzLWxpbmVcIiB7Li4ucHJvcHN9IC8+O1xuICB9XG5cbiAgc3RhdGljIHJlbmRlclRpY2tJdGVtKG9wdGlvbjogUHJvcHNbJ3RpY2snXSwgcHJvcHM6IGFueSwgdmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xuICAgIGxldCB0aWNrSXRlbTtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgICB0aWNrSXRlbSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICB0aWNrSXRlbSA9IG9wdGlvbihwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpY2tJdGVtID0gKFxuICAgICAgICA8VGV4dCB7Li4ucHJvcHN9IGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLXJhZGl1cy1heGlzLXRpY2stdmFsdWVcIj5cbiAgICAgICAgICB7dmFsdWV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpY2tJdGVtO1xuICB9XG5cbiAgcmVuZGVyVGlja3MoKSB7XG4gICAgY29uc3QgeyB0aWNrcywgdGljaywgYW5nbGUsIHRpY2tGb3JtYXR0ZXIsIHN0cm9rZSwgLi4ub3RoZXJzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRleHRBbmNob3IgPSB0aGlzLmdldFRpY2tUZXh0QW5jaG9yKCk7XG4gICAgY29uc3QgYXhpc1Byb3BzID0gZmlsdGVyUHJvcHMob3RoZXJzKTtcbiAgICBjb25zdCBjdXN0b21UaWNrUHJvcHMgPSBmaWx0ZXJQcm9wcyh0aWNrKTtcblxuICAgIGNvbnN0IGl0ZW1zID0gdGlja3MubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgY29uc3QgY29vcmQgPSB0aGlzLmdldFRpY2tWYWx1ZUNvb3JkKGVudHJ5KTtcbiAgICAgIGNvbnN0IHRpY2tQcm9wcyA9IHtcbiAgICAgICAgdGV4dEFuY2hvcixcbiAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7OTAgLSBhbmdsZX0sICR7Y29vcmQueH0sICR7Y29vcmQueX0pYCxcbiAgICAgICAgLi4uYXhpc1Byb3BzLFxuICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgZmlsbDogc3Ryb2tlLFxuICAgICAgICAuLi5jdXN0b21UaWNrUHJvcHMsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICAuLi5jb29yZCxcbiAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGF5ZXJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1wb2xhci1yYWRpdXMtYXhpcy10aWNrXCJcbiAgICAgICAgICBrZXk9e2B0aWNrLSR7aX1gfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIHsuLi5hZGFwdEV2ZW50c09mQ2hpbGQodGhpcy5wcm9wcywgZW50cnksIGkpfVxuICAgICAgICA+XG4gICAgICAgICAge1BvbGFyUmFkaXVzQXhpcy5yZW5kZXJUaWNrSXRlbSh0aWNrLCB0aWNrUHJvcHMsIHRpY2tGb3JtYXR0ZXIgPyB0aWNrRm9ybWF0dGVyKGVudHJ5LnZhbHVlLCBpKSA6IGVudHJ5LnZhbHVlKX1cbiAgICAgICAgPC9MYXllcj5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLXJhZGl1cy1heGlzLXRpY2tzXCI+e2l0ZW1zfTwvTGF5ZXI+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGlja3MsIGF4aXNMaW5lLCB0aWNrIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCF0aWNrcyB8fCAhdGlja3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLXJhZGl1cy1heGlzXCI+XG4gICAgICAgIHtheGlzTGluZSAmJiB0aGlzLnJlbmRlckF4aXNMaW5lKCl9XG4gICAgICAgIHt0aWNrICYmIHRoaXMucmVuZGVyVGlja3MoKX1cbiAgICAgICAge0xhYmVsLnJlbmRlckNhbGxCeVBhcmVudCh0aGlzLnByb3BzLCB0aGlzLmdldFZpZXdCb3goKSl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBBeGlzIG9mIHJhZGlhbCBkaXJlY3Rpb25cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgRG90IH0gZnJvbSAnLi4vc2hhcGUvRG90JztcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tICcuLi9zaGFwZS9Qb2x5Z29uJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi9jb21wb25lbnQvVGV4dCc7XG5pbXBvcnQge1xuICBCYXNlQXhpc1Byb3BzLFxuICBmaWx0ZXJQcm9wcyxcbiAgVGlja0l0ZW0sXG4gIGFkYXB0RXZlbnRzT2ZDaGlsZCxcbiAgUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudCxcbn0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBwb2xhclRvQ2FydGVzaWFuIH0gZnJvbSAnLi4vdXRpbC9Qb2xhclV0aWxzJztcblxuY29uc3QgUkFESUFOID0gTWF0aC5QSSAvIDE4MDtcbmNvbnN0IGVwcyA9IDFlLTU7XG5leHBvcnQgaW50ZXJmYWNlIFBvbGFyQW5nbGVBeGlzUHJvcHMgZXh0ZW5kcyBCYXNlQXhpc1Byb3BzIHtcbiAgYW5nbGVBeGlzSWQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgcmFkaXVzPzogbnVtYmVyO1xuXG4gIGF4aXNMaW5lVHlwZT86ICdwb2x5Z29uJyB8ICdjaXJjbGUnO1xuICB0aWNrcz86IFRpY2tJdGVtW107XG4gIG9yaWVudGF0aW9uPzogJ2lubmVyJyB8ICdvdXRlcic7XG59XG5leHBvcnQgdHlwZSBQcm9wcyA9IFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQ8YW55LCBTVkdUZXh0RWxlbWVudD4gJiBQb2xhckFuZ2xlQXhpc1Byb3BzO1xuXG5leHBvcnQgY2xhc3MgUG9sYXJBbmdsZUF4aXMgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdQb2xhckFuZ2xlQXhpcyc7XG5cbiAgc3RhdGljIGF4aXNUeXBlID0gJ2FuZ2xlQXhpcyc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgIGFuZ2xlQXhpc0lkOiAwLFxuICAgIHNjYWxlOiAnYXV0bycsXG4gICAgY3g6IDAsXG4gICAgY3k6IDAsXG4gICAgZG9tYWluOiBbMCwgJ2F1dG8nXSxcbiAgICBvcmllbnRhdGlvbjogJ291dGVyJyxcbiAgICBheGlzTGluZTogdHJ1ZSxcbiAgICB0aWNrTGluZTogdHJ1ZSxcbiAgICB0aWNrU2l6ZTogOCxcbiAgICB0aWNrOiB0cnVlLFxuICAgIGhpZGU6IGZhbHNlLFxuICAgIGFsbG93RHVwbGljYXRlZENhdGVnb3J5OiB0cnVlLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvb3JkaW5hdGUgb2YgbGluZSBlbmRwb2ludFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgVGhlIERhdGEgaWYgdGlja3NcbiAgICogQHJldHVybiB7T2JqZWN0fSAoeDAsIHkwKTogVGhlIHN0YXJ0IHBvaW50IG9mIHRleHQsXG4gICAqICAgICAgICAgICAgICAgICAgKHgxLCB5MSk6IFRoZSBlbmQgcG9pbnQgY2xvc2UgdG8gdGV4dCxcbiAgICogICAgICAgICAgICAgICAgICAoeDIsIHkyKTogVGhlIGVuZCBwb2ludCBjbG9zZSB0byBheGlzXG4gICAqL1xuICBnZXRUaWNrTGluZUNvb3JkKGRhdGE6IFRpY2tJdGVtKSB7XG4gICAgY29uc3QgeyBjeCwgY3ksIHJhZGl1cywgb3JpZW50YXRpb24sIHRpY2tTaXplIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRpY2tMaW5lU2l6ZSA9IHRpY2tTaXplIHx8IDg7XG4gICAgY29uc3QgcDEgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgcmFkaXVzLCBkYXRhLmNvb3JkaW5hdGUpO1xuICAgIGNvbnN0IHAyID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cyArIChvcmllbnRhdGlvbiA9PT0gJ2lubmVyJyA/IC0xIDogMSkgKiB0aWNrTGluZVNpemUsIGRhdGEuY29vcmRpbmF0ZSk7XG5cbiAgICByZXR1cm4geyB4MTogcDEueCwgeTE6IHAxLnksIHgyOiBwMi54LCB5MjogcDIueSB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGV4dC1hbmNob3Igb2YgZWFjaCB0aWNrXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBEYXRhIG9mIHRpY2tzXG4gICAqIEByZXR1cm4ge1N0cmluZ30gdGV4dC1hbmNob3JcbiAgICovXG4gIGdldFRpY2tUZXh0QW5jaG9yKGRhdGE6IFRpY2tJdGVtKSB7XG4gICAgY29uc3QgeyBvcmllbnRhdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjb3MgPSBNYXRoLmNvcygtZGF0YS5jb29yZGluYXRlICogUkFESUFOKTtcbiAgICBsZXQgdGV4dEFuY2hvcjtcblxuICAgIGlmIChjb3MgPiBlcHMpIHtcbiAgICAgIHRleHRBbmNob3IgPSBvcmllbnRhdGlvbiA9PT0gJ291dGVyJyA/ICdzdGFydCcgOiAnZW5kJztcbiAgICB9IGVsc2UgaWYgKGNvcyA8IC1lcHMpIHtcbiAgICAgIHRleHRBbmNob3IgPSBvcmllbnRhdGlvbiA9PT0gJ291dGVyJyA/ICdlbmQnIDogJ3N0YXJ0JztcbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dEFuY2hvciA9ICdtaWRkbGUnO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0QW5jaG9yO1xuICB9XG5cbiAgcmVuZGVyQXhpc0xpbmUoKSB7XG4gICAgY29uc3QgeyBjeCwgY3ksIHJhZGl1cywgYXhpc0xpbmUsIGF4aXNMaW5lVHlwZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIC4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMpLFxuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgLi4uZmlsdGVyUHJvcHMoYXhpc0xpbmUpLFxuICAgIH07XG5cbiAgICBpZiAoYXhpc0xpbmVUeXBlID09PSAnY2lyY2xlJykge1xuICAgICAgcmV0dXJuIDxEb3QgY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItYW5nbGUtYXhpcy1saW5lXCIgey4uLnByb3BzfSBjeD17Y3h9IGN5PXtjeX0gcj17cmFkaXVzfSAvPjtcbiAgICB9XG4gICAgY29uc3QgeyB0aWNrcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBwb2ludHMgPSB0aWNrcy5tYXAoZW50cnkgPT4gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgZW50cnkuY29vcmRpbmF0ZSkpO1xuXG4gICAgcmV0dXJuIDxQb2x5Z29uIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLWFuZ2xlLWF4aXMtbGluZVwiIHsuLi5wcm9wc30gcG9pbnRzPXtwb2ludHN9IC8+O1xuICB9XG5cbiAgc3RhdGljIHJlbmRlclRpY2tJdGVtKG9wdGlvbjogUG9sYXJBbmdsZUF4aXNQcm9wc1sndGljayddLCBwcm9wczogYW55LCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgbGV0IHRpY2tJdGVtO1xuXG4gICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KG9wdGlvbikpIHtcbiAgICAgIHRpY2tJdGVtID0gUmVhY3QuY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbikpIHtcbiAgICAgIHRpY2tJdGVtID0gb3B0aW9uKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlja0l0ZW0gPSAoXG4gICAgICAgIDxUZXh0IHsuLi5wcm9wc30gY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItYW5nbGUtYXhpcy10aWNrLXZhbHVlXCI+XG4gICAgICAgICAge3ZhbHVlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aWNrSXRlbTtcbiAgfVxuXG4gIHJlbmRlclRpY2tzKCkge1xuICAgIGNvbnN0IHsgdGlja3MsIHRpY2ssIHRpY2tMaW5lLCB0aWNrRm9ybWF0dGVyLCBzdHJva2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYXhpc1Byb3BzID0gZmlsdGVyUHJvcHModGhpcy5wcm9wcyk7XG4gICAgY29uc3QgY3VzdG9tVGlja1Byb3BzID0gZmlsdGVyUHJvcHModGljayk7XG4gICAgY29uc3QgdGlja0xpbmVQcm9wcyA9IHtcbiAgICAgIC4uLmF4aXNQcm9wcyxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIC4uLmZpbHRlclByb3BzKHRpY2tMaW5lKSxcbiAgICB9O1xuXG4gICAgY29uc3QgaXRlbXMgPSB0aWNrcy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBsaW5lQ29vcmQgPSB0aGlzLmdldFRpY2tMaW5lQ29vcmQoZW50cnkpO1xuICAgICAgY29uc3QgdGV4dEFuY2hvciA9IHRoaXMuZ2V0VGlja1RleHRBbmNob3IoZW50cnkpO1xuICAgICAgY29uc3QgdGlja1Byb3BzID0ge1xuICAgICAgICB0ZXh0QW5jaG9yLFxuICAgICAgICAuLi5heGlzUHJvcHMsXG4gICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICBmaWxsOiBzdHJva2UsXG4gICAgICAgIC4uLmN1c3RvbVRpY2tQcm9wcyxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICB4OiBsaW5lQ29vcmQueDIsXG4gICAgICAgIHk6IGxpbmVDb29yZC55MixcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMYXllclxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLWFuZ2xlLWF4aXMtdGlja1wiXG4gICAgICAgICAga2V5PXtgdGljay0ke2l9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICB7Li4uYWRhcHRFdmVudHNPZkNoaWxkKHRoaXMucHJvcHMsIGVudHJ5LCBpKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aWNrTGluZSAmJiA8bGluZSBjbGFzc05hbWU9XCJyZWNoYXJ0cy1wb2xhci1hbmdsZS1heGlzLXRpY2stbGluZVwiIHsuLi50aWNrTGluZVByb3BzfSB7Li4ubGluZUNvb3JkfSAvPn1cbiAgICAgICAgICB7dGljayAmJlxuICAgICAgICAgICAgUG9sYXJBbmdsZUF4aXMucmVuZGVyVGlja0l0ZW0odGljaywgdGlja1Byb3BzLCB0aWNrRm9ybWF0dGVyID8gdGlja0Zvcm1hdHRlcihlbnRyeS52YWx1ZSwgaSkgOiBlbnRyeS52YWx1ZSl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxMYXllciBjbGFzc05hbWU9XCJyZWNoYXJ0cy1wb2xhci1hbmdsZS1heGlzLXRpY2tzXCI+e2l0ZW1zfTwvTGF5ZXI+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGlja3MsIHJhZGl1cywgYXhpc0xpbmUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAocmFkaXVzIDw9IDAgfHwgIXRpY2tzIHx8ICF0aWNrcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItYW5nbGUtYXhpc1wiPlxuICAgICAgICB7YXhpc0xpbmUgJiYgdGhpcy5yZW5kZXJBeGlzTGluZSgpfVxuICAgICAgICB7dGhpcy5yZW5kZXJUaWNrcygpfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgaWZPdmVyZmxvd01hdGNoZXMgPSAocHJvcHM6IGFueSwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGFsd2F5c1Nob3cgfSA9IHByb3BzO1xuICBsZXQgeyBpZk92ZXJmbG93IH0gPSBwcm9wcztcblxuICBpZiAoYWx3YXlzU2hvdykge1xuICAgIGlmT3ZlcmZsb3cgPSAnZXh0ZW5kRG9tYWluJztcbiAgfVxuXG4gIHJldHVybiBpZk92ZXJmbG93ID09PSB2YWx1ZTtcbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUmVuZGVyIGEgZ3JvdXAgb2YgZXJyb3IgYmFyXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IFByb3BzIGFzIFhBeGlzUHJvcHMgfSBmcm9tICcuL1hBeGlzJztcbmltcG9ydCB7IFByb3BzIGFzIFlBeGlzUHJvcHMgfSBmcm9tICcuL1lBeGlzJztcbmltcG9ydCB7IGZpbHRlclByb3BzLCBEM1NjYWxlLCBEYXRhS2V5IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmludGVyZmFjZSBFcnJvckJhckRhdGFJdGVtIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHZhbHVlOiBudW1iZXI7XG4gIGVycm9yVmFsPzogbnVtYmVyW10gfCBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJbnRlcm5hbEVycm9yQmFyUHJvcHMge1xuICB4QXhpcz86IE9taXQ8WEF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgeUF4aXM/OiBPbWl0PFlBeGlzUHJvcHMsICdzY2FsZSc+ICYgeyBzY2FsZTogRDNTY2FsZTxzdHJpbmcgfCBudW1iZXI+IH07XG4gIGRhdGE/OiBhbnlbXTtcbiAgbGF5b3V0PzogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcbiAgZGF0YVBvaW50Rm9ybWF0dGVyPzogKGVudHJ5OiBhbnksIGRhdGFLZXk6IERhdGFLZXk8YW55PikgPT4gRXJyb3JCYXJEYXRhSXRlbTtcbiAgLyoqIFRoZSBvZmZzZXQgYmV0d2VlbiBjZW50cmFsIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZSwgb2Z0ZW4gc2V0IGJ5IDxCYXIvPiAqL1xuICBvZmZzZXQ/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBFcnJvckJhclByb3BzIGV4dGVuZHMgSW50ZXJuYWxFcnJvckJhclByb3BzIHtcbiAgZGF0YUtleTogRGF0YUtleTxhbnk+O1xuICAvKiogdGhlIHdpZHRoIG9mIHRoZSBlcnJvciBiYXIgZW5kcyAqL1xuICB3aWR0aD86IG51bWJlcjtcbiAgLyoqXG4gICAqIE9ubHkgdXNlZCBmb3IgU2NhdHRlckNoYXJ0IHdpdGggZXJyb3IgYmFycyBpbiB0d28gZGlyZWN0aW9ucy5cbiAgICogT25seSBhY2NlcHRzIGEgdmFsdWUgb2YgXCJ4XCIgb3IgXCJ5XCIgYW5kIG1ha2VzIHRoZSBlcnJvciBiYXJzIGxpZSBpbiB0aGF0IGRpcmVjdGlvbi5cbiAgICovXG4gIGRpcmVjdGlvbj86ICd4JyB8ICd5Jztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBTVkdQcm9wczxTVkdMaW5lRWxlbWVudD4gJiBFcnJvckJhclByb3BzO1xuXG5leHBvcnQgZnVuY3Rpb24gRXJyb3JCYXIocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHsgb2Zmc2V0LCBsYXlvdXQsIHdpZHRoLCBkYXRhS2V5LCBkYXRhLCBkYXRhUG9pbnRGb3JtYXR0ZXIsIHhBeGlzLCB5QXhpcywgLi4ub3RoZXJzIH0gPSBwcm9wcztcbiAgY29uc3Qgc3ZnUHJvcHMgPSBmaWx0ZXJQcm9wcyhvdGhlcnMpO1xuICBjb25zdCBlcnJvckJhcnMgPSBkYXRhLm1hcCgoZW50cnk6IGFueSwgaTogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgeyB4LCB5LCB2YWx1ZSwgZXJyb3JWYWwgfSA9IGRhdGFQb2ludEZvcm1hdHRlcihlbnRyeSwgZGF0YUtleSk7XG5cbiAgICBpZiAoIWVycm9yVmFsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBsaW5lQ29vcmRpbmF0ZXMgPSBbXTtcbiAgICBsZXQgbG93Qm91bmQsIGhpZ2hCb3VuZDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGVycm9yVmFsKSkge1xuICAgICAgW2xvd0JvdW5kLCBoaWdoQm91bmRdID0gZXJyb3JWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvd0JvdW5kID0gaGlnaEJvdW5kID0gZXJyb3JWYWw7XG4gICAgfVxuXG4gICAgaWYgKGxheW91dCA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgLy8gZXJyb3IgYmFyIGZvciBob3Jpem9udGFsIGNoYXJ0cywgdGhlIHkgaXMgZml4ZWQsIHggaXMgYSByYW5nZSB2YWx1ZVxuICAgICAgY29uc3QgeyBzY2FsZSB9ID0geEF4aXM7XG5cbiAgICAgIGNvbnN0IHlNaWQgPSB5ICsgb2Zmc2V0O1xuICAgICAgY29uc3QgeU1pbiA9IHlNaWQgKyB3aWR0aDtcbiAgICAgIGNvbnN0IHlNYXggPSB5TWlkIC0gd2lkdGg7XG5cbiAgICAgIGNvbnN0IHhNaW4gPSBzY2FsZSh2YWx1ZSAtIGxvd0JvdW5kKTtcbiAgICAgIGNvbnN0IHhNYXggPSBzY2FsZSh2YWx1ZSArIGhpZ2hCb3VuZCk7XG5cbiAgICAgIC8vIHRoZSByaWdodCBsaW5lIG9mIHwtLXxcbiAgICAgIGxpbmVDb29yZGluYXRlcy5wdXNoKHsgeDE6IHhNYXgsIHkxOiB5TWluLCB4MjogeE1heCwgeTI6IHlNYXggfSk7XG4gICAgICAvLyB0aGUgbWlkZGxlIGxpbmUgb2YgfC0tfFxuICAgICAgbGluZUNvb3JkaW5hdGVzLnB1c2goeyB4MTogeE1pbiwgeTE6IHlNaWQsIHgyOiB4TWF4LCB5MjogeU1pZCB9KTtcbiAgICAgIC8vIHRoZSBsZWZ0IGxpbmUgb2YgfC0tfFxuICAgICAgbGluZUNvb3JkaW5hdGVzLnB1c2goeyB4MTogeE1pbiwgeTE6IHlNaW4sIHgyOiB4TWluLCB5MjogeU1heCB9KTtcbiAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAvLyBlcnJvciBiYXIgZm9yIGhvcml6b250YWwgY2hhcnRzLCB0aGUgeCBpcyBmaXhlZCwgeSBpcyBhIHJhbmdlIHZhbHVlXG4gICAgICBjb25zdCB7IHNjYWxlIH0gPSB5QXhpcztcblxuICAgICAgY29uc3QgeE1pZCA9IHggKyBvZmZzZXQ7XG4gICAgICBjb25zdCB4TWluID0geE1pZCAtIHdpZHRoO1xuICAgICAgY29uc3QgeE1heCA9IHhNaWQgKyB3aWR0aDtcblxuICAgICAgY29uc3QgeU1pbiA9IHNjYWxlKHZhbHVlIC0gbG93Qm91bmQpO1xuICAgICAgY29uc3QgeU1heCA9IHNjYWxlKHZhbHVlICsgaGlnaEJvdW5kKTtcblxuICAgICAgLy8gdGhlIHRvcCBsaW5lXG4gICAgICBsaW5lQ29vcmRpbmF0ZXMucHVzaCh7IHgxOiB4TWluLCB5MTogeU1heCwgeDI6IHhNYXgsIHkyOiB5TWF4IH0pO1xuICAgICAgLy8gdGhlIG1pZGRsZSBsaW5lXG4gICAgICBsaW5lQ29vcmRpbmF0ZXMucHVzaCh7IHgxOiB4TWlkLCB5MTogeU1pbiwgeDI6IHhNaWQsIHkyOiB5TWF4IH0pO1xuICAgICAgLy8gdGhlIGJvdHRvbSBsaW5lXG4gICAgICBsaW5lQ29vcmRpbmF0ZXMucHVzaCh7IHgxOiB4TWluLCB5MTogeU1pbiwgeDI6IHhNYXgsIHkyOiB5TWluIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtZXJyb3JCYXJcIiBrZXk9e2BiYXItJHtpfWB9IHsuLi5zdmdQcm9wc30+XG4gICAgICAgIHtsaW5lQ29vcmRpbmF0ZXMubWFwKChjb29yZGluYXRlcywgaW5kZXgpID0+IChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgPGxpbmUgey4uLmNvb3JkaW5hdGVzfSBrZXk9e2BsaW5lLSR7aW5kZXh9YH0gLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH0pO1xuXG4gIHJldHVybiA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtZXJyb3JCYXJzXCI+e2Vycm9yQmFyc308L0xheWVyPjtcbn1cblxuRXJyb3JCYXIuZGVmYXVsdFByb3BzID0ge1xuICBzdHJva2U6ICdibGFjaycsXG4gIHN0cm9rZVdpZHRoOiAxLjUsXG4gIHdpZHRoOiA1LFxuICBvZmZzZXQ6IDAsXG4gIGxheW91dDogJ2hvcml6b250YWwnLFxufTtcbkVycm9yQmFyLmRpc3BsYXlOYW1lID0gJ0Vycm9yQmFyJztcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBaIEF4aXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjYWxlVHlwZSwgRGF0YUtleSwgQXhpc0RvbWFpbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgdHlwZT86ICdudW1iZXInIHwgJ2NhdGVnb3J5JztcbiAgLyoqIFRoZSBuYW1lIG9mIGRhdGEgZGlzcGxheWVkIGluIHRoZSBheGlzICovXG4gIG5hbWU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIC8qKiBUaGUgdW5pdCBvZiBkYXRhIGRpc3BsYXllZCBpbiB0aGUgYXhpcyAqL1xuICB1bml0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICAvKiogVGhlIHVuaXF1ZSBpZCBvZiB6LWF4aXMgKi9cbiAgekF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgLyoqIFRoZSBrZXkgb2YgZGF0YSBkaXNwbGF5ZWQgaW4gdGhlIGF4aXMgKi9cbiAgZGF0YUtleT86IERhdGFLZXk8YW55PjtcbiAgLyoqIFRoZSByYW5nZSBvZiBheGlzICovXG4gIHJhbmdlPzogbnVtYmVyW107XG4gIHNjYWxlPzogU2NhbGVUeXBlIHwgRnVuY3Rpb247XG4gIC8qKiBUaGUgZG9tYWluIG9mIHNjYWxlIGluIHRoaXMgYXhpcyAqL1xuICBkb21haW4/OiBBeGlzRG9tYWluO1xufVxuXG5leHBvcnQgY29uc3QgWkF4aXM6IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICgpID0+IG51bGw7XG5cblpBeGlzLmRpc3BsYXlOYW1lID0gJ1pBeGlzJztcblpBeGlzLmRlZmF1bHRQcm9wcyA9IHtcbiAgekF4aXNJZDogMCxcbiAgcmFuZ2U6IFs2NCwgNjRdLFxuICBzY2FsZTogJ2F1dG8nLFxuICB0eXBlOiAnbnVtYmVyJyxcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzUyX187IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfQ1NTVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ1NTVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfUmVwbGFjZVRyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JlcGxhY2VUcmFuc2l0aW9uXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHJhbnNpdGlvblwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUcmFuc2l0aW9uOiBfVHJhbnNpdGlvbi5kZWZhdWx0LFxuICBUcmFuc2l0aW9uR3JvdXA6IF9UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdCxcbiAgUmVwbGFjZVRyYW5zaXRpb246IF9SZXBsYWNlVHJhbnNpdGlvbi5kZWZhdWx0LFxuICBDU1NUcmFuc2l0aW9uOiBfQ1NTVHJhbnNpdGlvbi5kZWZhdWx0XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBMZWdlbmRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgRGVmYXVsdExlZ2VuZENvbnRlbnQsIFBheWxvYWQsIFByb3BzIGFzIERlZmF1bHRQcm9wcywgQ29udGVudFR5cGUgfSBmcm9tICcuL0RlZmF1bHRMZWdlbmRDb250ZW50JztcblxuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5cbnR5cGUgVW5pcXVlT3B0aW9uID0gYm9vbGVhbiB8ICgoZW50cnk6IFBheWxvYWQpID0+IFBheWxvYWQpO1xuZnVuY3Rpb24gZGVmYXVsdFVuaXFCeShlbnRyeTogUGF5bG9hZCkge1xuICByZXR1cm4gZW50cnkudmFsdWU7XG59XG5mdW5jdGlvbiBnZXRVbmlxUGF5bG9hZChvcHRpb246IFVuaXF1ZU9wdGlvbiwgcGF5bG9hZDogQXJyYXk8UGF5bG9hZD4pIHtcbiAgaWYgKG9wdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBfLnVuaXFCeShwYXlsb2FkLCBkZWZhdWx0VW5pcUJ5KTtcbiAgfVxuXG4gIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9uKSkge1xuICAgIHJldHVybiBfLnVuaXFCeShwYXlsb2FkLCBvcHRpb24pO1xuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQ7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNvbnRlbnQoY29udGVudDogQ29udGVudFR5cGUsIHByb3BzOiBQcm9wcykge1xuICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY29udGVudCkpIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNvbnRlbnQsIHByb3BzKTtcbiAgfVxuICBpZiAoXy5pc0Z1bmN0aW9uKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGVudCBhcyBhbnksIHByb3BzKTtcbiAgfVxuXG4gIGNvbnN0IHsgcmVmLCAuLi5vdGhlclByb3BzIH0gPSBwcm9wcztcblxuICByZXR1cm4gPERlZmF1bHRMZWdlbmRDb250ZW50IHsuLi5vdGhlclByb3BzfSAvPjtcbn1cblxuY29uc3QgRVBTID0gMTtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBEZWZhdWx0UHJvcHMgJiB7XG4gIHdyYXBwZXJTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGNoYXJ0V2lkdGg/OiBudW1iZXI7XG4gIGNoYXJ0SGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBtYXJnaW4/OiB7XG4gICAgdG9wPzogbnVtYmVyO1xuICAgIGxlZnQ/OiBudW1iZXI7XG4gICAgYm90dG9tPzogbnVtYmVyO1xuICAgIHJpZ2h0PzogbnVtYmVyO1xuICB9O1xuICBwYXlsb2FkVW5pcUJ5PzogVW5pcXVlT3B0aW9uO1xuICBvbkJCb3hVcGRhdGU/OiAoYm94OiBET01SZWN0IHwgbnVsbCkgPT4gdm9pZDtcbn07XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGJveFdpZHRoOiBudW1iZXI7XG4gIGJveEhlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTGVnZW5kIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0xlZ2VuZCc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpY29uU2l6ZTogMTQsXG4gICAgbGF5b3V0OiAnaG9yaXpvbnRhbCcsXG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nLFxuICB9O1xuXG4gIHByaXZhdGUgd3JhcHBlck5vZGU6IEhUTUxEaXZFbGVtZW50O1xuXG4gIHN0YXRpYyBnZXRXaXRoSGVpZ2h0KGl0ZW06IGFueSwgY2hhcnRXaWR0aDogbnVtYmVyKSB7XG4gICAgY29uc3QgeyBsYXlvdXQgfSA9IGl0ZW0ucHJvcHM7XG5cbiAgICBpZiAobGF5b3V0ID09PSAndmVydGljYWwnICYmIGlzTnVtYmVyKGl0ZW0ucHJvcHMuaGVpZ2h0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBpdGVtLnByb3BzLmhlaWdodCxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IGl0ZW0ucHJvcHMud2lkdGggfHwgY2hhcnRXaWR0aCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0ZSA9IHtcbiAgICBib3hXaWR0aDogLTEsXG4gICAgYm94SGVpZ2h0OiAtMSxcbiAgfTtcblxuICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVCQm94KCk7XG4gIH1cblxuICBwdWJsaWMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMudXBkYXRlQkJveCgpO1xuICB9XG5cbiAgcHVibGljIGdldEJCb3goKSB7XG4gICAgaWYgKHRoaXMud3JhcHBlck5vZGUgJiYgdGhpcy53cmFwcGVyTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLndyYXBwZXJOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRCQm94U25hcHNob3QoKSB7XG4gICAgY29uc3QgeyBib3hXaWR0aCwgYm94SGVpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGJveFdpZHRoID49IDAgJiYgYm94SGVpZ2h0ID49IDApIHtcbiAgICAgIHJldHVybiB7IHdpZHRoOiBib3hXaWR0aCwgaGVpZ2h0OiBib3hIZWlnaHQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdFBvc2l0aW9uKHN0eWxlOiBDU1NQcm9wZXJ0aWVzKSB7XG4gICAgY29uc3QgeyBsYXlvdXQsIGFsaWduLCB2ZXJ0aWNhbEFsaWduLCBtYXJnaW4sIGNoYXJ0V2lkdGgsIGNoYXJ0SGVpZ2h0IH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBoUG9zLCB2UG9zO1xuXG4gICAgaWYgKFxuICAgICAgIXN0eWxlIHx8XG4gICAgICAoKHN0eWxlLmxlZnQgPT09IHVuZGVmaW5lZCB8fCBzdHlsZS5sZWZ0ID09PSBudWxsKSAmJiAoc3R5bGUucmlnaHQgPT09IHVuZGVmaW5lZCB8fCBzdHlsZS5yaWdodCA9PT0gbnVsbCkpXG4gICAgKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInICYmIGxheW91dCA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLmdldEJCb3hTbmFwc2hvdCgpIHx8IHsgd2lkdGg6IDAgfTtcbiAgICAgICAgaFBvcyA9IHsgbGVmdDogKChjaGFydFdpZHRoIHx8IDApIC0gYm94LndpZHRoKSAvIDIgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhQb3MgPSBhbGlnbiA9PT0gJ3JpZ2h0JyA/IHsgcmlnaHQ6IChtYXJnaW4gJiYgbWFyZ2luLnJpZ2h0KSB8fCAwIH0gOiB7IGxlZnQ6IChtYXJnaW4gJiYgbWFyZ2luLmxlZnQpIHx8IDAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhc3R5bGUgfHxcbiAgICAgICgoc3R5bGUudG9wID09PSB1bmRlZmluZWQgfHwgc3R5bGUudG9wID09PSBudWxsKSAmJiAoc3R5bGUuYm90dG9tID09PSB1bmRlZmluZWQgfHwgc3R5bGUuYm90dG9tID09PSBudWxsKSlcbiAgICApIHtcbiAgICAgIGlmICh2ZXJ0aWNhbEFsaWduID09PSAnbWlkZGxlJykge1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLmdldEJCb3hTbmFwc2hvdCgpIHx8IHsgaGVpZ2h0OiAwIH07XG4gICAgICAgIHZQb3MgPSB7IHRvcDogKChjaGFydEhlaWdodCB8fCAwKSAtIGJveC5oZWlnaHQpIC8gMiB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdlBvcyA9XG4gICAgICAgICAgdmVydGljYWxBbGlnbiA9PT0gJ2JvdHRvbSdcbiAgICAgICAgICAgID8geyBib3R0b206IChtYXJnaW4gJiYgbWFyZ2luLmJvdHRvbSkgfHwgMCB9XG4gICAgICAgICAgICA6IHsgdG9wOiAobWFyZ2luICYmIG1hcmdpbi50b3ApIHx8IDAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5oUG9zLCAuLi52UG9zIH07XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUJCb3goKSB7XG4gICAgY29uc3QgeyBib3hXaWR0aCwgYm94SGVpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgb25CQm94VXBkYXRlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKHRoaXMud3JhcHBlck5vZGUgJiYgdGhpcy53cmFwcGVyTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIGNvbnN0IGJveCA9IHRoaXMud3JhcHBlck5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChNYXRoLmFicyhib3gud2lkdGggLSBib3hXaWR0aCkgPiBFUFMgfHwgTWF0aC5hYnMoYm94LmhlaWdodCAtIGJveEhlaWdodCkgPiBFUFMpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBib3hXaWR0aDogYm94LndpZHRoLFxuICAgICAgICAgICAgYm94SGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uQkJveFVwZGF0ZSkge1xuICAgICAgICAgICAgICBvbkJCb3hVcGRhdGUoYm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm94V2lkdGggIT09IC0xIHx8IGJveEhlaWdodCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBib3hXaWR0aDogLTEsXG4gICAgICAgICAgYm94SGVpZ2h0OiAtMSxcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGlmIChvbkJCb3hVcGRhdGUpIHtcbiAgICAgICAgICAgIG9uQkJveFVwZGF0ZShudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb250ZW50LCB3aWR0aCwgaGVpZ2h0LCB3cmFwcGVyU3R5bGUsIHBheWxvYWRVbmlxQnksIHBheWxvYWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgb3V0ZXJTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6IHdpZHRoIHx8ICdhdXRvJyxcbiAgICAgIGhlaWdodDogaGVpZ2h0IHx8ICdhdXRvJyxcbiAgICAgIC4uLnRoaXMuZ2V0RGVmYXVsdFBvc2l0aW9uKHdyYXBwZXJTdHlsZSksXG4gICAgICAuLi53cmFwcGVyU3R5bGUsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLWxlZ2VuZC13cmFwcGVyXCJcbiAgICAgICAgc3R5bGU9e291dGVyU3R5bGV9XG4gICAgICAgIHJlZj17bm9kZSA9PiB7XG4gICAgICAgICAgdGhpcy53cmFwcGVyTm9kZSA9IG5vZGU7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJDb250ZW50KGNvbnRlbnQsIHsgLi4udGhpcy5wcm9wcywgcGF5bG9hZDogZ2V0VW5pcVBheWxvYWQocGF5bG9hZFVuaXFCeSwgcGF5bG9hZCkgfSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgQ3VydmVcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gIHN5bWJvbCBhcyBzaGFwZVN5bWJvbCxcbiAgc3ltYm9sQ2lyY2xlLFxuICBzeW1ib2xDcm9zcyxcbiAgc3ltYm9sRGlhbW9uZCxcbiAgc3ltYm9sU3F1YXJlLFxuICBzeW1ib2xTdGFyLFxuICBzeW1ib2xUcmlhbmdsZSxcbiAgc3ltYm9sV3llLFxuICBTeW1ib2xUeXBlIGFzIEQzU3ltYm9sVHlwZSxcbn0gZnJvbSAnZDMtc2hhcGUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBTeW1ib2xUeXBlLCBmaWx0ZXJQcm9wcyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG50eXBlIFNpemVUeXBlID0gJ2FyZWEnIHwgJ2RpYW1ldGVyJztcblxuaW50ZXJmYWNlIFN5bWJvbEZhY3Rvcnkge1xuICBbdHlwZTogc3RyaW5nXTogRDNTeW1ib2xUeXBlO1xufVxuXG5jb25zdCBzeW1ib2xGYWN0b3JpZXM6IFN5bWJvbEZhY3RvcnkgPSB7XG4gIHN5bWJvbENpcmNsZSxcbiAgc3ltYm9sQ3Jvc3MsXG4gIHN5bWJvbERpYW1vbmQsXG4gIHN5bWJvbFNxdWFyZSxcbiAgc3ltYm9sU3RhcixcbiAgc3ltYm9sVHJpYW5nbGUsXG4gIHN5bWJvbFd5ZSxcbn07XG5jb25zdCBSQURJQU4gPSBNYXRoLlBJIC8gMTgwO1xuXG5jb25zdCBnZXRTeW1ib2xGYWN0b3J5ID0gKHR5cGU6IFN5bWJvbFR5cGUpID0+IHtcbiAgY29uc3QgbmFtZSA9IGBzeW1ib2wke18udXBwZXJGaXJzdCh0eXBlKX1gO1xuXG4gIHJldHVybiBzeW1ib2xGYWN0b3JpZXNbbmFtZV0gfHwgc3ltYm9sQ2lyY2xlO1xufTtcblxuY29uc3QgY2FsY3VsYXRlQXJlYVNpemUgPSAoc2l6ZTogbnVtYmVyLCBzaXplVHlwZTogU2l6ZVR5cGUsIHR5cGU6IFN5bWJvbFR5cGUpID0+IHtcbiAgaWYgKHNpemVUeXBlID09PSAnYXJlYScpIHtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Nyb3NzJzpcbiAgICAgIHJldHVybiAoNSAqIHNpemUgKiBzaXplKSAvIDk7XG4gICAgY2FzZSAnZGlhbW9uZCc6XG4gICAgICByZXR1cm4gKDAuNSAqIHNpemUgKiBzaXplKSAvIE1hdGguc3FydCgzKTtcbiAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgcmV0dXJuIHNpemUgKiBzaXplO1xuICAgIGNhc2UgJ3N0YXInOiB7XG4gICAgICBjb25zdCBhbmdsZSA9IDE4ICogUkFESUFOO1xuXG4gICAgICByZXR1cm4gMS4yNSAqIHNpemUgKiBzaXplICogKE1hdGgudGFuKGFuZ2xlKSAtIE1hdGgudGFuKGFuZ2xlICogMikgKiBNYXRoLnRhbihhbmdsZSkgKiogMik7XG4gICAgfVxuICAgIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICAgIHJldHVybiAoTWF0aC5zcXJ0KDMpICogc2l6ZSAqIHNpemUpIC8gNDtcbiAgICBjYXNlICd3eWUnOlxuICAgICAgcmV0dXJuICgoMjEgLSAxMCAqIE1hdGguc3FydCgzKSkgKiBzaXplICogc2l6ZSkgLyA4O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gKE1hdGguUEkgKiBzaXplICogc2l6ZSkgLyA0O1xuICB9XG59O1xuXG5pbnRlcmZhY2UgU3ltYm9sc1Byb3Age1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHR5cGU6IFN5bWJvbFR5cGU7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgc2l6ZT86IG51bWJlcjtcbiAgc2l6ZVR5cGU/OiBTaXplVHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBTVkdQcm9wczxTVkdQYXRoRWxlbWVudD4gJiBTeW1ib2xzUHJvcDtcblxuZXhwb3J0IGNsYXNzIFN5bWJvbHMgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdHlwZTogJ2NpcmNsZScsXG4gICAgc2l6ZTogNjQsXG4gICAgc2l6ZVR5cGU6ICdhcmVhJyxcbiAgfTtcblxuICBzdGF0aWMgcmVnaXN0ZXJTeW1ib2wgPSAoa2V5OiBzdHJpbmcsIGZhY3Rvcnk6IEQzU3ltYm9sVHlwZSkgPT4ge1xuICAgIHN5bWJvbEZhY3Rvcmllc1tgc3ltYm9sJHtfLnVwcGVyRmlyc3Qoa2V5KX1gXSA9IGZhY3Rvcnk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgcGF0aCBvZiBjdXJ2ZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IHBhdGhcbiAgICovXG4gIGdldFBhdGgoKSB7XG4gICAgY29uc3QgeyBzaXplLCBzaXplVHlwZSwgdHlwZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzeW1ib2xGYWN0b3J5ID0gZ2V0U3ltYm9sRmFjdG9yeSh0eXBlKTtcbiAgICBjb25zdCBzeW1ib2wgPSBzaGFwZVN5bWJvbCgpLnR5cGUoc3ltYm9sRmFjdG9yeSkuc2l6ZShjYWxjdWxhdGVBcmVhU2l6ZShzaXplLCBzaXplVHlwZSwgdHlwZSkpO1xuXG4gICAgcmV0dXJuIHN5bWJvbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBjeCwgY3ksIHNpemUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY3ggPT09ICtjeCAmJiBjeSA9PT0gK2N5ICYmIHNpemUgPT09ICtzaXplKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8cGF0aFxuICAgICAgICAgIHsuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzLCB0cnVlKX1cbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3JlY2hhcnRzLXN5bWJvbHMnLCBjbGFzc05hbWUpfVxuICAgICAgICAgIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke2N4fSwgJHtjeX0pYH1cbiAgICAgICAgICBkPXt0aGlzLmdldFBhdGgoKX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBMaW5lXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyZWFjdC1zbW9vdGgnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQ3VydmUsIEN1cnZlVHlwZSwgUHJvcHMgYXMgQ3VydmVQcm9wcywgUG9pbnQgYXMgQ3VydmVQb2ludCB9IGZyb20gJy4uL3NoYXBlL0N1cnZlJztcbmltcG9ydCB7IERvdCwgUHJvcHMgYXMgRG90UHJvcHMgfSBmcm9tICcuLi9zaGFwZS9Eb3QnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgTGFiZWxMaXN0IH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsTGlzdCc7XG5pbXBvcnQgeyBFcnJvckJhciwgUHJvcHMgYXMgRXJyb3JCYXJQcm9wcyB9IGZyb20gJy4vRXJyb3JCYXInO1xuaW1wb3J0IHsgdW5pcXVlSWQsIGludGVycG9sYXRlTnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgZmluZEFsbEJ5VHlwZSB9IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuLi91dGlsL0dsb2JhbCc7XG5pbXBvcnQgeyBnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSwgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWEF4aXNQcm9wcyB9IGZyb20gJy4vWEF4aXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vWUF4aXMnO1xuaW1wb3J0IHtcbiAgRDNTY2FsZSxcbiAgTGVnZW5kVHlwZSxcbiAgVG9vbHRpcFR5cGUsXG4gIEFuaW1hdGlvblRpbWluZyxcbiAgZmlsdGVyUHJvcHMsXG4gIENoYXJ0T2Zmc2V0LFxuICBEYXRhS2V5LFxuICBUaWNrSXRlbSxcbn0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbnR5cGUgTGluZURvdCA9IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PiB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KSB8IERvdFByb3BzIHwgYm9vbGVhbjtcblxuaW50ZXJmYWNlIExpbmVQb2ludEl0ZW0gZXh0ZW5kcyBDdXJ2ZVBvaW50IHtcbiAgdmFsdWU/OiBudW1iZXI7XG4gIHBheWxvYWQ/OiBhbnk7XG59XG5cbmludGVyZmFjZSBJbnRlcm5hbExpbmVQcm9wcyB7XG4gIHRvcD86IG51bWJlcjtcbiAgbGVmdD86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG4gIGhlaWdodD86IG51bWJlcjtcbiAgcG9pbnRzPzogTGluZVBvaW50SXRlbVtdO1xuICB4QXhpcz86IE9taXQ8WEF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgeUF4aXM/OiBPbWl0PFlBeGlzUHJvcHMsICdzY2FsZSc+ICYgeyBzY2FsZTogRDNTY2FsZTxzdHJpbmcgfCBudW1iZXI+IH07XG59XG5cbmludGVyZmFjZSBMaW5lUHJvcHMgZXh0ZW5kcyBJbnRlcm5hbExpbmVQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgZGF0YT86IGFueTtcbiAgdHlwZT86IEN1cnZlVHlwZTtcbiAgdW5pdD86IHN0cmluZyB8IG51bWJlcjtcbiAgbmFtZT86IHN0cmluZyB8IG51bWJlcjtcbiAgeUF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgeEF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgZGF0YUtleT86IERhdGFLZXk8YW55PjtcbiAgbGVnZW5kVHlwZT86IExlZ2VuZFR5cGU7XG4gIHRvb2x0aXBUeXBlPzogVG9vbHRpcFR5cGU7XG4gIGxheW91dD86ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCc7XG4gIGNvbm5lY3ROdWxscz86IGJvb2xlYW47XG4gIGhpZGU/OiBib29sZWFuO1xuXG4gIC8vIHdoZXRoZXIgaGF2ZSBkb3QgaW4gbGluZVxuICBhY3RpdmVEb3Q/OiBMaW5lRG90O1xuICBkb3Q/OiBMaW5lRG90O1xuXG4gIG9uQW5pbWF0aW9uU3RhcnQ/OiAoKSA9PiB2b2lkO1xuICBvbkFuaW1hdGlvbkVuZD86ICgpID0+IHZvaWQ7XG5cbiAgaXNBbmltYXRpb25BY3RpdmU/OiBib29sZWFuO1xuICBhbmltYXRlTmV3VmFsdWVzPzogYm9vbGVhbjtcbiAgYW5pbWF0aW9uQmVnaW4/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuICBhbmltYXRpb25FYXNpbmc/OiBBbmltYXRpb25UaW1pbmc7XG4gIGFuaW1hdGlvbklkPzogbnVtYmVyO1xuICBpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBPbWl0PEN1cnZlUHJvcHMsICdwb2ludHMnIHwgJ3BhdGhSZWYnPiAmIExpbmVQcm9wcztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgaXNBbmltYXRpb25GaW5pc2hlZD86IGJvb2xlYW47XG4gIHRvdGFsTGVuZ3RoPzogbnVtYmVyO1xuICBwcmV2UG9pbnRzPzogTGluZVBvaW50SXRlbVtdO1xuICBjdXJQb2ludHM/OiBMaW5lUG9pbnRJdGVtW107XG4gIHByZXZBbmltYXRpb25JZD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIExpbmUgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnTGluZSc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB4QXhpc0lkOiAwLFxuICAgIHlBeGlzSWQ6IDAsXG4gICAgY29ubmVjdE51bGxzOiBmYWxzZSxcbiAgICBhY3RpdmVEb3Q6IHRydWUsXG4gICAgZG90OiB0cnVlLFxuICAgIGxlZ2VuZFR5cGU6ICdsaW5lJyxcbiAgICBzdHJva2U6ICcjMzE4MmJkJyxcbiAgICBzdHJva2VXaWR0aDogMSxcbiAgICBmaWxsOiAnI2ZmZicsXG4gICAgcG9pbnRzOiBbXSBhcyBMaW5lUG9pbnRJdGVtW10sXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0ZU5ld1ZhbHVlczogdHJ1ZSxcbiAgICBhbmltYXRpb25CZWdpbjogMCxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMTUwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlJyxcbiAgICBoaWRlOiBmYWxzZSxcbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSB0aGUgZGF0YSBvZiBlYWNoIGdyb3VwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBUaGUgcHJvcHMgZnJvbSB0aGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge09iamVjdH0geEF4aXMgICBUaGUgY29uZmlndXJhdGlvbiBvZiB4LWF4aXNcbiAgICogQHBhcmFtICB7T2JqZWN0fSB5QXhpcyAgIFRoZSBjb25maWd1cmF0aW9uIG9mIHktYXhpc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFLZXkgVGhlIHVuaXF1ZSBrZXkgb2YgYSBncm91cFxuICAgKiBAcmV0dXJuIHtBcnJheX0gIENvbXBvc2VkIGRhdGFcbiAgICovXG4gIHN0YXRpYyBnZXRDb21wb3NlZERhdGEgPSAoe1xuICAgIHByb3BzLFxuICAgIHhBeGlzLFxuICAgIHlBeGlzLFxuICAgIHhBeGlzVGlja3MsXG4gICAgeUF4aXNUaWNrcyxcbiAgICBkYXRhS2V5LFxuICAgIGJhbmRTaXplLFxuICAgIGRpc3BsYXllZERhdGEsXG4gICAgb2Zmc2V0LFxuICB9OiB7XG4gICAgcHJvcHM6IFByb3BzO1xuICAgIHhBeGlzOiBQcm9wc1sneEF4aXMnXTtcbiAgICB5QXhpczogUHJvcHNbJ3lBeGlzJ107XG4gICAgeEF4aXNUaWNrczogVGlja0l0ZW1bXTtcbiAgICB5QXhpc1RpY2tzOiBUaWNrSXRlbVtdO1xuICAgIGRhdGFLZXk6IFByb3BzWydkYXRhS2V5J107XG4gICAgYmFuZFNpemU6IG51bWJlcjtcbiAgICBkaXNwbGF5ZWREYXRhOiBhbnlbXTtcbiAgICBvZmZzZXQ6IENoYXJ0T2Zmc2V0O1xuICB9KSA9PiB7XG4gICAgY29uc3QgeyBsYXlvdXQgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgcG9pbnRzID0gZGlzcGxheWVkRGF0YS5tYXAoKGVudHJ5LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgZGF0YUtleSk7XG5cbiAgICAgIGlmIChsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IGdldENhdGVDb29yZGluYXRlT2ZMaW5lKHsgYXhpczogeEF4aXMsIHRpY2tzOiB4QXhpc1RpY2tzLCBiYW5kU2l6ZSwgZW50cnksIGluZGV4IH0pLFxuICAgICAgICAgIHk6IF8uaXNOaWwodmFsdWUpID8gbnVsbCA6IHlBeGlzLnNjYWxlKHZhbHVlKSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBwYXlsb2FkOiBlbnRyeSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogXy5pc05pbCh2YWx1ZSkgPyBudWxsIDogeEF4aXMuc2NhbGUodmFsdWUpLFxuICAgICAgICB5OiBnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSh7IGF4aXM6IHlBeGlzLCB0aWNrczogeUF4aXNUaWNrcywgYmFuZFNpemUsIGVudHJ5LCBpbmRleCB9KSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IHBvaW50cywgbGF5b3V0LCAuLi5vZmZzZXQgfTtcbiAgfTtcblxuICBtYWluQ3VydmU/OiBTVkdQYXRoRWxlbWVudDtcblxuICBzdGF0ZTogU3RhdGUgPSB7XG4gICAgaXNBbmltYXRpb25GaW5pc2hlZDogdHJ1ZSxcbiAgICB0b3RhbExlbmd0aDogMCxcbiAgfTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSAgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZSAqL1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuaXNBbmltYXRpb25BY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0b3RhbExlbmd0aCA9IHRoaXMuZ2V0VG90YWxMZW5ndGgoKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdG90YWxMZW5ndGggfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XG4gICAgaWYgKG5leHRQcm9wcy5hbmltYXRpb25JZCAhPT0gcHJldlN0YXRlLnByZXZBbmltYXRpb25JZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldkFuaW1hdGlvbklkOiBuZXh0UHJvcHMuYW5pbWF0aW9uSWQsXG4gICAgICAgIGN1clBvaW50czogbmV4dFByb3BzLnBvaW50cyxcbiAgICAgICAgcHJldlBvaW50czogcHJldlN0YXRlLmN1clBvaW50cyxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMucG9pbnRzICE9PSBwcmV2U3RhdGUuY3VyUG9pbnRzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJQb2ludHM6IG5leHRQcm9wcy5wb2ludHMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0VG90YWxMZW5ndGgoKSB7XG4gICAgY29uc3QgY3VydmVEb20gPSB0aGlzLm1haW5DdXJ2ZTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGN1cnZlRG9tICYmIGN1cnZlRG9tLmdldFRvdGFsTGVuZ3RoICYmIGN1cnZlRG9tLmdldFRvdGFsTGVuZ3RoKCkpIHx8IDA7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICBnZXRTdHJva2VEYXNoYXJyYXkgPSAobGVuZ3RoOiBudW1iZXIsIHRvdGFsTGVuZ3RoOiBudW1iZXIsIGxpbmVzOiBudW1iZXJbXSkgPT4ge1xuICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lcy5yZWR1Y2UoKHByZSwgbmV4dCkgPT4gcHJlICsgbmV4dCk7XG5cbiAgICBjb25zdCBjb3VudCA9IE1hdGguZmxvb3IobGVuZ3RoIC8gbGluZUxlbmd0aCk7XG4gICAgY29uc3QgcmVtYWluTGVuZ3RoID0gbGVuZ3RoICUgbGluZUxlbmd0aDtcbiAgICBjb25zdCByZXN0TGVuZ3RoID0gdG90YWxMZW5ndGggLSBsZW5ndGg7XG5cbiAgICBsZXQgcmVtYWluTGluZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgc3VtID0gMDsgOyBzdW0gKz0gbGluZXNbaV0sICsraSkge1xuICAgICAgaWYgKHN1bSArIGxpbmVzW2ldID4gcmVtYWluTGVuZ3RoKSB7XG4gICAgICAgIHJlbWFpbkxpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIGkpLCByZW1haW5MZW5ndGggLSBzdW1dO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBlbXB0eUxpbmVzID0gcmVtYWluTGluZXMubGVuZ3RoICUgMiA9PT0gMCA/IFswLCByZXN0TGVuZ3RoXSA6IFtyZXN0TGVuZ3RoXTtcblxuICAgIHJldHVybiBbLi4uTGluZS5yZXBlYXQobGluZXMsIGNvdW50KSwgLi4ucmVtYWluTGluZXMsIC4uLmVtcHR5TGluZXNdLm1hcChsaW5lID0+IGAke2xpbmV9cHhgKS5qb2luKCcsICcpO1xuICB9O1xuXG4gIGlkID0gdW5pcXVlSWQoJ3JlY2hhcnRzLWxpbmUtJyk7XG5cbiAgcGF0aFJlZiA9IChub2RlOiBTVkdQYXRoRWxlbWVudCk6IHZvaWQgPT4ge1xuICAgIHRoaXMubWFpbkN1cnZlID0gbm9kZTtcbiAgfTtcblxuICBzdGF0aWMgcmVwZWF0KGxpbmVzOiBudW1iZXJbXSwgY291bnQ6IG51bWJlcikge1xuICAgIGNvbnN0IGxpbmVzVW5pdCA9IGxpbmVzLmxlbmd0aCAlIDIgIT09IDAgPyBbLi4ubGluZXMsIDBdIDogbGluZXM7XG4gICAgbGV0IHJlc3VsdDogbnVtYmVyW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgcmVzdWx0ID0gWy4uLnJlc3VsdCwgLi4ubGluZXNVbml0XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaGFuZGxlQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0FuaW1hdGlvbkZpbmlzaGVkOiB0cnVlIH0pO1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25BbmltYXRpb25FbmQpIHtcbiAgICAgIHRoaXMucHJvcHMub25BbmltYXRpb25FbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IGZhbHNlIH0pO1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25BbmltYXRpb25TdGFydCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkFuaW1hdGlvblN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlckVycm9yQmFyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzQW5pbWF0aW9uQWN0aXZlICYmICF0aGlzLnN0YXRlLmlzQW5pbWF0aW9uRmluaXNoZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcG9pbnRzLCB4QXhpcywgeUF4aXMsIGxheW91dCwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZXJyb3JCYXJJdGVtcyA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIEVycm9yQmFyLmRpc3BsYXlOYW1lKTtcblxuICAgIGlmICghZXJyb3JCYXJJdGVtcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF0YVBvaW50Rm9ybWF0dGVyKGRhdGFQb2ludDogTGluZVBvaW50SXRlbSwgZGF0YUtleTogUHJvcHNbJ2RhdGFLZXknXSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogZGF0YVBvaW50LngsXG4gICAgICAgIHk6IGRhdGFQb2ludC55LFxuICAgICAgICB2YWx1ZTogZGF0YVBvaW50LnZhbHVlLFxuICAgICAgICBlcnJvclZhbDogZ2V0VmFsdWVCeURhdGFLZXkoZGF0YVBvaW50LnBheWxvYWQsIGRhdGFLZXkpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3JCYXJJdGVtcy5tYXAoKGl0ZW06IFJlYWN0RWxlbWVudDxFcnJvckJhclByb3BzPiwgaTogbnVtYmVyKSA9PlxuICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KGl0ZW0sIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICBrZXk6IGBiYXItJHtpfWAsXG4gICAgICAgIGRhdGE6IHBvaW50cyxcbiAgICAgICAgeEF4aXMsXG4gICAgICAgIHlBeGlzLFxuICAgICAgICBsYXlvdXQsXG4gICAgICAgIGRhdGFQb2ludEZvcm1hdHRlcixcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyRG90SXRlbShvcHRpb246IExpbmVEb3QsIHByb3BzOiBhbnkpIHtcbiAgICBsZXQgZG90SXRlbTtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgICBkb3RJdGVtID0gUmVhY3QuY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbikpIHtcbiAgICAgIGRvdEl0ZW0gPSBvcHRpb24ocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy1saW5lLWRvdCcsIG9wdGlvbiA/IChvcHRpb24gYXMgRG90UHJvcHMpLmNsYXNzTmFtZSA6ICcnKTtcbiAgICAgIGRvdEl0ZW0gPSA8RG90IHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8+O1xuICAgIH1cblxuICAgIHJldHVybiBkb3RJdGVtO1xuICB9XG5cbiAgcmVuZGVyRG90cyhuZWVkQ2xpcDogYm9vbGVhbiwgY2xpcFBhdGhJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChpc0FuaW1hdGlvbkFjdGl2ZSAmJiAhdGhpcy5zdGF0ZS5pc0FuaW1hdGlvbkZpbmlzaGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBkb3QsIHBvaW50cywgZGF0YUtleSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBsaW5lUHJvcHMgPSBmaWx0ZXJQcm9wcyh0aGlzLnByb3BzKTtcbiAgICBjb25zdCBjdXN0b21Eb3RQcm9wcyA9IGZpbHRlclByb3BzKGRvdCwgdHJ1ZSk7XG4gICAgY29uc3QgZG90cyA9IHBvaW50cy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBkb3RQcm9wcyA9IHtcbiAgICAgICAga2V5OiBgZG90LSR7aX1gLFxuICAgICAgICByOiAzLFxuICAgICAgICAuLi5saW5lUHJvcHMsXG4gICAgICAgIC4uLmN1c3RvbURvdFByb3BzLFxuICAgICAgICB2YWx1ZTogZW50cnkudmFsdWUsXG4gICAgICAgIGRhdGFLZXksXG4gICAgICAgIGN4OiBlbnRyeS54LFxuICAgICAgICBjeTogZW50cnkueSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LnBheWxvYWQsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gTGluZS5yZW5kZXJEb3RJdGVtKGRvdCwgZG90UHJvcHMpO1xuICAgIH0pO1xuICAgIGNvbnN0IGRvdHNQcm9wcyA9IHtcbiAgICAgIGNsaXBQYXRoOiBuZWVkQ2xpcCA/IGB1cmwoI2NsaXBQYXRoLSR7Y2xpcFBhdGhJZH0pYCA6IG51bGwsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtbGluZS1kb3RzXCIga2V5PVwiZG90c1wiIHsuLi5kb3RzUHJvcHN9PlxuICAgICAgICB7ZG90c31cbiAgICAgIDwvTGF5ZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckN1cnZlU3RhdGljYWxseShcbiAgICBwb2ludHM6IExpbmVQb2ludEl0ZW1bXSxcbiAgICBuZWVkQ2xpcDogYm9vbGVhbixcbiAgICBjbGlwUGF0aElkOiBzdHJpbmcsXG4gICAgcHJvcHM/OiB7IHN0cm9rZURhc2hhcnJheTogc3RyaW5nIH0sXG4gICkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCB7IHR5cGUsIGxheW91dCwgY29ubmVjdE51bGxzLCByZWYsIC4uLm90aGVycyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjdXJ2ZVByb3BzID0ge1xuICAgICAgLi4uZmlsdGVyUHJvcHMob3RoZXJzLCB0cnVlKSxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIGNsYXNzTmFtZTogJ3JlY2hhcnRzLWxpbmUtY3VydmUnLFxuICAgICAgY2xpcFBhdGg6IG5lZWRDbGlwID8gYHVybCgjY2xpcFBhdGgtJHtjbGlwUGF0aElkfSlgIDogbnVsbCxcbiAgICAgIHBvaW50cyxcbiAgICAgIC4uLnByb3BzLFxuICAgICAgdHlwZSxcbiAgICAgIGxheW91dCxcbiAgICAgIGNvbm5lY3ROdWxscyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxDdXJ2ZSB7Li4uY3VydmVQcm9wc30gcGF0aFJlZj17dGhpcy5wYXRoUmVmfSAvPjtcbiAgfVxuXG4gIHJlbmRlckN1cnZlV2l0aEFuaW1hdGlvbihuZWVkQ2xpcDogYm9vbGVhbiwgY2xpcFBhdGhJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnRzLFxuICAgICAgc3Ryb2tlRGFzaGFycmF5LFxuICAgICAgaXNBbmltYXRpb25BY3RpdmUsXG4gICAgICBhbmltYXRpb25CZWdpbixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgYW5pbWF0aW9uRWFzaW5nLFxuICAgICAgYW5pbWF0aW9uSWQsXG4gICAgICBhbmltYXRlTmV3VmFsdWVzLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBwcmV2UG9pbnRzLCB0b3RhbExlbmd0aCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZVxuICAgICAgICBiZWdpbj17YW5pbWF0aW9uQmVnaW59XG4gICAgICAgIGR1cmF0aW9uPXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgaXNBY3RpdmU9e2lzQW5pbWF0aW9uQWN0aXZlfVxuICAgICAgICBlYXNpbmc9e2FuaW1hdGlvbkVhc2luZ31cbiAgICAgICAgZnJvbT17eyB0OiAwIH19XG4gICAgICAgIHRvPXt7IHQ6IDEgfX1cbiAgICAgICAga2V5PXtgbGluZS0ke2FuaW1hdGlvbklkfWB9XG4gICAgICAgIG9uQW5pbWF0aW9uRW5kPXt0aGlzLmhhbmRsZUFuaW1hdGlvbkVuZH1cbiAgICAgICAgb25BbmltYXRpb25TdGFydD17dGhpcy5oYW5kbGVBbmltYXRpb25TdGFydH1cbiAgICAgID5cbiAgICAgICAgeyh7IHQgfTogeyB0OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICAgIGlmIChwcmV2UG9pbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2UG9pbnRzRGlmZkZhY3RvciA9IHByZXZQb2ludHMubGVuZ3RoIC8gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXBEYXRhID0gcG9pbnRzLm1hcCgoZW50cnksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHByZXZQb2ludEluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAqIHByZXZQb2ludHNEaWZmRmFjdG9yKTtcbiAgICAgICAgICAgICAgaWYgKHByZXZQb2ludHNbcHJldlBvaW50SW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHByZXZQb2ludHNbcHJldlBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclggPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LngsIGVudHJ5LngpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclkgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnksIGVudHJ5LnkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uZW50cnksIHg6IGludGVycG9sYXRvclgodCksIHk6IGludGVycG9sYXRvclkodCkgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIG1hZ2ljIG51bWJlciBvZiBmYWtpbmcgcHJldmlvdXMgeCBhbmQgeSBsb2NhdGlvblxuICAgICAgICAgICAgICBpZiAoYW5pbWF0ZU5ld1ZhbHVlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclggPSBpbnRlcnBvbGF0ZU51bWJlcih3aWR0aCAqIDIsIGVudHJ5LngpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclkgPSBpbnRlcnBvbGF0ZU51bWJlcihoZWlnaHQgLyAyLCBlbnRyeS55KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5lbnRyeSwgeDogaW50ZXJwb2xhdG9yWCh0KSwgeTogaW50ZXJwb2xhdG9yWSh0KSB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLmVudHJ5LCB4OiBlbnRyeS54LCB5OiBlbnRyeS55IH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckN1cnZlU3RhdGljYWxseShzdGVwRGF0YSwgbmVlZENsaXAsIGNsaXBQYXRoSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZU51bWJlcigwLCB0b3RhbExlbmd0aCk7XG4gICAgICAgICAgY29uc3QgY3VyTGVuZ3RoID0gaW50ZXJwb2xhdG9yKHQpO1xuICAgICAgICAgIGxldCBjdXJyZW50U3Ryb2tlRGFzaGFycmF5O1xuXG4gICAgICAgICAgaWYgKHN0cm9rZURhc2hhcnJheSkge1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBgJHtzdHJva2VEYXNoYXJyYXl9YC5zcGxpdCgvWyxcXHNdKy9naW0pLm1hcChudW0gPT4gcGFyc2VGbG9hdChudW0pKTtcbiAgICAgICAgICAgIGN1cnJlbnRTdHJva2VEYXNoYXJyYXkgPSB0aGlzLmdldFN0cm9rZURhc2hhcnJheShjdXJMZW5ndGgsIHRvdGFsTGVuZ3RoLCBsaW5lcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRTdHJva2VEYXNoYXJyYXkgPSBgJHtjdXJMZW5ndGh9cHggJHt0b3RhbExlbmd0aCAtIGN1ckxlbmd0aH1weGA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ3VydmVTdGF0aWNhbGx5KHBvaW50cywgbmVlZENsaXAsIGNsaXBQYXRoSWQsIHtcbiAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheTogY3VycmVudFN0cm9rZURhc2hhcnJheSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgIDwvQW5pbWF0ZT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQ3VydmUobmVlZENsaXA6IGJvb2xlYW4sIGNsaXBQYXRoSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHsgcG9pbnRzLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZQb2ludHMsIHRvdGFsTGVuZ3RoIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKFxuICAgICAgaXNBbmltYXRpb25BY3RpdmUgJiZcbiAgICAgIHBvaW50cyAmJlxuICAgICAgcG9pbnRzLmxlbmd0aCAmJlxuICAgICAgKCghcHJldlBvaW50cyAmJiB0b3RhbExlbmd0aCA+IDApIHx8ICFfLmlzRXF1YWwocHJldlBvaW50cywgcG9pbnRzKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckN1cnZlV2l0aEFuaW1hdGlvbihuZWVkQ2xpcCwgY2xpcFBhdGhJZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQ3VydmVTdGF0aWNhbGx5KHBvaW50cywgbmVlZENsaXAsIGNsaXBQYXRoSWQpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGlkZSwgZG90LCBwb2ludHMsIGNsYXNzTmFtZSwgeEF4aXMsIHlBeGlzLCB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIGlzQW5pbWF0aW9uQWN0aXZlLCBpZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChoaWRlIHx8ICFwb2ludHMgfHwgIXBvaW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaXNBbmltYXRpb25GaW5pc2hlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBoYXNTaW5nbGVQb2ludCA9IHBvaW50cy5sZW5ndGggPT09IDE7XG4gICAgY29uc3QgbGF5ZXJDbGFzcyA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLWxpbmUnLCBjbGFzc05hbWUpO1xuICAgIGNvbnN0IG5lZWRDbGlwID0gKHhBeGlzICYmIHhBeGlzLmFsbG93RGF0YU92ZXJmbG93KSB8fCAoeUF4aXMgJiYgeUF4aXMuYWxsb3dEYXRhT3ZlcmZsb3cpO1xuICAgIGNvbnN0IGNsaXBQYXRoSWQgPSBfLmlzTmlsKGlkKSA/IHRoaXMuaWQgOiBpZDtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPXtsYXllckNsYXNzfT5cbiAgICAgICAge25lZWRDbGlwID8gKFxuICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgPGNsaXBQYXRoIGlkPXtgY2xpcFBhdGgtJHtjbGlwUGF0aElkfWB9PlxuICAgICAgICAgICAgICA8cmVjdCB4PXtsZWZ0fSB5PXt0b3B9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IC8+XG4gICAgICAgICAgICA8L2NsaXBQYXRoPlxuICAgICAgICAgIDwvZGVmcz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIHshaGFzU2luZ2xlUG9pbnQgJiYgdGhpcy5yZW5kZXJDdXJ2ZShuZWVkQ2xpcCwgY2xpcFBhdGhJZCl9XG4gICAgICAgIHt0aGlzLnJlbmRlckVycm9yQmFyKCl9XG4gICAgICAgIHsoaGFzU2luZ2xlUG9pbnQgfHwgZG90KSAmJiB0aGlzLnJlbmRlckRvdHMobmVlZENsaXAsIGNsaXBQYXRoSWQpfVxuICAgICAgICB7KCFpc0FuaW1hdGlvbkFjdGl2ZSB8fCBpc0FuaW1hdGlvbkZpbmlzaGVkKSAmJiBMYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50KHRoaXMucHJvcHMsIHBvaW50cyl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBBcmVhXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyZWFjdC1zbW9vdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEN1cnZlLCBDdXJ2ZVR5cGUsIFBvaW50IGFzIEN1cnZlUG9pbnQgfSBmcm9tICcuLi9zaGFwZS9DdXJ2ZSc7XG5pbXBvcnQgeyBEb3QsIFByb3BzIGFzIERvdFByb3BzIH0gZnJvbSAnLi4vc2hhcGUvRG90JztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IExhYmVsTGlzdCB9IGZyb20gJy4uL2NvbXBvbmVudC9MYWJlbExpc3QnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHsgaXNOdW1iZXIsIHVuaXF1ZUlkLCBpbnRlcnBvbGF0ZU51bWJlciB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IGdldENhdGVDb29yZGluYXRlT2ZMaW5lLCBnZXRWYWx1ZUJ5RGF0YUtleSB9IGZyb20gJy4uL3V0aWwvQ2hhcnRVdGlscyc7XG5pbXBvcnQgeyBQcm9wcyBhcyBYQXhpc1Byb3BzIH0gZnJvbSAnLi9YQXhpcyc7XG5pbXBvcnQgeyBQcm9wcyBhcyBZQXhpc1Byb3BzIH0gZnJvbSAnLi9ZQXhpcyc7XG5pbXBvcnQge1xuICBEM1NjYWxlLFxuICBMZWdlbmRUeXBlLFxuICBUb29sdGlwVHlwZSxcbiAgQW5pbWF0aW9uVGltaW5nLFxuICBmaWx0ZXJQcm9wcyxcbiAgQ2hhcnRPZmZzZXQsXG4gIENvb3JkaW5hdGUsXG4gIERhdGFLZXksXG4gIFRpY2tJdGVtLFxufSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxudHlwZSBBcmVhRG90ID1cbiAgfCBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD5cbiAgfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PilcbiAgfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PilcbiAgfCBEb3RQcm9wc1xuICB8IGJvb2xlYW47XG5pbnRlcmZhY2UgQXJlYVBvaW50SXRlbSBleHRlbmRzIEN1cnZlUG9pbnQge1xuICB2YWx1ZT86IG51bWJlciB8IG51bWJlcltdO1xuICBwYXlsb2FkPzogYW55O1xufVxuXG5pbnRlcmZhY2UgSW50ZXJuYWxBcmVhUHJvcHMge1xuICB4QXhpcz86IE9taXQ8WEF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgeUF4aXM/OiBPbWl0PFlBeGlzUHJvcHMsICdzY2FsZSc+ICYgeyBzY2FsZTogRDNTY2FsZTxzdHJpbmcgfCBudW1iZXI+IH07XG4gIHRvcD86IG51bWJlcjtcbiAgbGVmdD86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG4gIGhlaWdodD86IG51bWJlcjtcbiAgcG9pbnRzPzogQXJlYVBvaW50SXRlbVtdO1xuICBiYXNlTGluZT86IG51bWJlciB8IENvb3JkaW5hdGVbXTtcbn1cblxuaW50ZXJmYWNlIEFyZWFQcm9wcyBleHRlbmRzIEludGVybmFsQXJlYVByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBkYXRhS2V5OiBEYXRhS2V5PGFueT47XG4gIHR5cGU/OiBDdXJ2ZVR5cGU7XG4gIHVuaXQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIG5hbWU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHhBeGlzSWQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIHlBeGlzSWQ/OiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgc3RhY2tJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgbGVnZW5kVHlwZT86IExlZ2VuZFR5cGU7XG4gIHRvb2x0aXBUeXBlPzogVG9vbHRpcFR5cGU7XG4gIGNvbm5lY3ROdWxscz86IGJvb2xlYW47XG4gIC8vIHdoZXRoZXIgaGF2ZSBkb3QgaW4gbGluZVxuICBhY3RpdmVEb3Q/OiBBcmVhRG90O1xuICBkb3Q/OiBBcmVhRG90O1xuXG4gIGxhYmVsPzogYW55O1xuICBsYXlvdXQ/OiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xuICBoaWRlPzogYm9vbGVhbjtcbiAgYmFzZVZhbHVlPzogbnVtYmVyIHwgJ2RhdGFNaW4nIHwgJ2RhdGFNYXgnO1xuICBpc1JhbmdlPzogYm9vbGVhbjtcblxuICBvbkFuaW1hdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcbiAgb25BbmltYXRpb25FbmQ/OiAoKSA9PiB2b2lkO1xuXG4gIGlzQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgYW5pbWF0ZU5ld1ZhbHVlcz86IGJvb2xlYW47XG4gIGFuaW1hdGlvbkJlZ2luPzogbnVtYmVyO1xuICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgYW5pbWF0aW9uRWFzaW5nPzogQW5pbWF0aW9uVGltaW5nO1xuICBhbmltYXRpb25JZD86IG51bWJlcjtcbiAgaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHRWxlbWVudD4gJiBBcmVhUHJvcHM7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHByZXZBbmltYXRpb25JZD86IG51bWJlcjtcbiAgcHJldlBvaW50cz86IEFyZWFQb2ludEl0ZW1bXTtcbiAgcHJldkJhc2VMaW5lPzogbnVtYmVyIHwgQ29vcmRpbmF0ZVtdO1xuICBjdXJQb2ludHM/OiBBcmVhUG9pbnRJdGVtW107XG4gIGN1ckJhc2VMaW5lPzogbnVtYmVyIHwgQ29vcmRpbmF0ZVtdO1xuICBpc0FuaW1hdGlvbkZpbmlzaGVkPzogYm9vbGVhbjtcbiAgdG90YWxMZW5ndGg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBBcmVhIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0FyZWEnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc3Ryb2tlOiAnIzMxODJiZCcsXG4gICAgZmlsbDogJyMzMTgyYmQnLFxuICAgIGZpbGxPcGFjaXR5OiAwLjYsXG4gICAgeEF4aXNJZDogMCxcbiAgICB5QXhpc0lkOiAwLFxuICAgIGxlZ2VuZFR5cGU6ICdsaW5lJyxcbiAgICBjb25uZWN0TnVsbHM6IGZhbHNlLFxuICAgIC8vIHBvaW50cyBvZiBhcmVhXG4gICAgcG9pbnRzOiBbXSBhcyBBcmVhUG9pbnRJdGVtW10sXG4gICAgZG90OiBmYWxzZSxcbiAgICBhY3RpdmVEb3Q6IHRydWUsXG4gICAgaGlkZTogZmFsc2UsXG5cbiAgICBpc0FuaW1hdGlvbkFjdGl2ZTogIUdsb2JhbC5pc1NzcixcbiAgICBhbmltYXRpb25CZWdpbjogMCxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMTUwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0QmFzZVZhbHVlID0gKHByb3BzOiBQcm9wcywgeEF4aXM6IFByb3BzWyd4QXhpcyddLCB5QXhpczogUHJvcHNbJ3lBeGlzJ10pOiBudW1iZXIgPT4ge1xuICAgIGNvbnN0IHsgbGF5b3V0LCBiYXNlVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKGlzTnVtYmVyKGJhc2VWYWx1ZSkgJiYgdHlwZW9mIGJhc2VWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBiYXNlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbnVtZXJpY0F4aXMgPSBsYXlvdXQgPT09ICdob3Jpem9udGFsJyA/IHlBeGlzIDogeEF4aXM7XG4gICAgY29uc3QgZG9tYWluID0gbnVtZXJpY0F4aXMuc2NhbGUuZG9tYWluKCk7XG5cbiAgICBpZiAobnVtZXJpY0F4aXMudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KGRvbWFpblswXSwgZG9tYWluWzFdKTtcbiAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKGRvbWFpblswXSwgZG9tYWluWzFdKTtcblxuICAgICAgaWYgKGJhc2VWYWx1ZSA9PT0gJ2RhdGFNaW4nKSB7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgICB9XG4gICAgICBpZiAoYmFzZVZhbHVlID09PSAnZGF0YU1heCcpIHtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1heCA8IDAgPyBtYXggOiBNYXRoLm1heChNYXRoLm1pbihkb21haW5bMF0sIGRvbWFpblsxXSksIDApO1xuICAgIH1cblxuICAgIGlmIChiYXNlVmFsdWUgPT09ICdkYXRhTWluJykge1xuICAgICAgcmV0dXJuIGRvbWFpblswXTtcbiAgICB9XG4gICAgaWYgKGJhc2VWYWx1ZSA9PT0gJ2RhdGFNYXgnKSB7XG4gICAgICByZXR1cm4gZG9tYWluWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBkb21haW5bMF07XG4gIH07XG5cbiAgc3RhdGljIGdldENvbXBvc2VkRGF0YSA9ICh7XG4gICAgcHJvcHMsXG4gICAgeEF4aXMsXG4gICAgeUF4aXMsXG4gICAgeEF4aXNUaWNrcyxcbiAgICB5QXhpc1RpY2tzLFxuICAgIGJhbmRTaXplLFxuICAgIGRhdGFLZXksXG4gICAgc3RhY2tlZERhdGEsXG4gICAgZGF0YVN0YXJ0SW5kZXgsXG4gICAgZGlzcGxheWVkRGF0YSxcbiAgICBvZmZzZXQsXG4gIH06IHtcbiAgICBwcm9wczogUHJvcHM7XG4gICAgaXRlbTogQXJlYTtcbiAgICBiYW5kU2l6ZTogbnVtYmVyO1xuICAgIHhBeGlzOiBJbnRlcm5hbEFyZWFQcm9wc1sneEF4aXMnXTtcbiAgICB5QXhpczogSW50ZXJuYWxBcmVhUHJvcHNbJ3lBeGlzJ107XG4gICAgeEF4aXNUaWNrczogVGlja0l0ZW1bXTtcbiAgICB5QXhpc1RpY2tzOiBUaWNrSXRlbVtdO1xuICAgIHN0YWNrZWREYXRhOiBudW1iZXJbXVtdO1xuICAgIGRhdGFTdGFydEluZGV4OiBudW1iZXI7XG4gICAgb2Zmc2V0OiBDaGFydE9mZnNldDtcbiAgICBkaXNwbGF5ZWREYXRhOiBhbnlbXTtcbiAgICBkYXRhS2V5OiBQcm9wc1snZGF0YUtleSddO1xuICB9KSA9PiB7XG4gICAgY29uc3QgeyBsYXlvdXQgfSA9IHByb3BzO1xuICAgIGNvbnN0IGhhc1N0YWNrID0gc3RhY2tlZERhdGEgJiYgc3RhY2tlZERhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGJhc2VWYWx1ZSA9IEFyZWEuZ2V0QmFzZVZhbHVlKHByb3BzLCB4QXhpcywgeUF4aXMpO1xuICAgIGxldCBpc1JhbmdlID0gZmFsc2U7XG5cbiAgICBjb25zdCBwb2ludHMgPSBkaXNwbGF5ZWREYXRhLm1hcCgoZW50cnksIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbFZhbHVlID0gZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksIGRhdGFLZXkpO1xuICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICBpZiAoaGFzU3RhY2spIHtcbiAgICAgICAgdmFsdWUgPSBzdGFja2VkRGF0YVtkYXRhU3RhcnRJbmRleCArIGluZGV4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gb3JpZ2luYWxWYWx1ZTtcblxuICAgICAgICBpZiAoIV8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IFtiYXNlVmFsdWUsIHZhbHVlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1JhbmdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0JyZWFrUG9pbnQgPSBfLmlzTmlsKHZhbHVlWzFdKSB8fCAoaGFzU3RhY2sgJiYgXy5pc05pbChvcmlnaW5hbFZhbHVlKSk7XG4gICAgICBpZiAobGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSh7IGF4aXM6IHhBeGlzLCB0aWNrczogeEF4aXNUaWNrcywgYmFuZFNpemUsIGVudHJ5LCBpbmRleCB9KSxcbiAgICAgICAgICB5OiBpc0JyZWFrUG9pbnQgPyBudWxsIDogeUF4aXMuc2NhbGUodmFsdWVbMV0pLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBpc0JyZWFrUG9pbnQgPyBudWxsIDogeEF4aXMuc2NhbGUodmFsdWVbMV0pLFxuICAgICAgICB5OiBnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSh7IGF4aXM6IHlBeGlzLCB0aWNrczogeUF4aXNUaWNrcywgYmFuZFNpemUsIGVudHJ5LCBpbmRleCB9KSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGxldCBiYXNlTGluZTtcbiAgICBpZiAoaGFzU3RhY2sgfHwgaXNSYW5nZSkge1xuICAgICAgYmFzZUxpbmUgPSBwb2ludHMubWFwKChlbnRyeTogQXJlYVBvaW50SXRlbSkgPT4ge1xuICAgICAgICBpZiAobGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogZW50cnkueCxcbiAgICAgICAgICAgIHk6XG4gICAgICAgICAgICAgICFfLmlzTmlsKF8uZ2V0KGVudHJ5LCAndmFsdWVbMF0nKSkgJiYgIV8uaXNOaWwoXy5nZXQoZW50cnksICd5JykpXG4gICAgICAgICAgICAgICAgPyB5QXhpcy5zY2FsZShfLmdldChlbnRyeSwgJ3ZhbHVlWzBdJykpXG4gICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiAhXy5pc05pbChfLmdldChlbnRyeSwgJ3ZhbHVlWzBdJykpID8geEF4aXMuc2NhbGUoXy5nZXQoZW50cnksICd2YWx1ZVswXScpKSA6IG51bGwsXG4gICAgICAgICAgeTogZW50cnkueSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIGJhc2VMaW5lID0geUF4aXMuc2NhbGUoYmFzZVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZUxpbmUgPSB4QXhpcy5zY2FsZShiYXNlVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHBvaW50cywgYmFzZUxpbmUsIGxheW91dCwgaXNSYW5nZSwgLi4ub2Zmc2V0IH07XG4gIH07XG5cbiAgc3RhdGljIHJlbmRlckRvdEl0ZW0gPSAob3B0aW9uOiBBcmVhRG90LCBwcm9wczogYW55KSA9PiB7XG4gICAgbGV0IGRvdEl0ZW07XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgZG90SXRlbSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICBkb3RJdGVtID0gb3B0aW9uKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG90SXRlbSA9IDxEb3Qgey4uLnByb3BzfSBjbGFzc05hbWU9XCJyZWNoYXJ0cy1hcmVhLWRvdFwiIC8+O1xuICAgIH1cblxuICAgIHJldHVybiBkb3RJdGVtO1xuICB9O1xuXG4gIHN0YXRlOiBTdGF0ZSA9IHtcbiAgICBpc0FuaW1hdGlvbkZpbmlzaGVkOiB0cnVlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAobmV4dFByb3BzLmFuaW1hdGlvbklkICE9PSBwcmV2U3RhdGUucHJldkFuaW1hdGlvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2QW5pbWF0aW9uSWQ6IG5leHRQcm9wcy5hbmltYXRpb25JZCxcbiAgICAgICAgY3VyUG9pbnRzOiBuZXh0UHJvcHMucG9pbnRzLFxuICAgICAgICBjdXJCYXNlTGluZTogbmV4dFByb3BzLmJhc2VMaW5lLFxuICAgICAgICBwcmV2UG9pbnRzOiBwcmV2U3RhdGUuY3VyUG9pbnRzLFxuICAgICAgICBwcmV2QmFzZUxpbmU6IHByZXZTdGF0ZS5jdXJCYXNlTGluZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMucG9pbnRzICE9PSBwcmV2U3RhdGUuY3VyUG9pbnRzIHx8IG5leHRQcm9wcy5iYXNlTGluZSAhPT0gcHJldlN0YXRlLmN1ckJhc2VMaW5lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJQb2ludHM6IG5leHRQcm9wcy5wb2ludHMsXG4gICAgICAgIGN1ckJhc2VMaW5lOiBuZXh0UHJvcHMuYmFzZUxpbmUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWQgPSB1bmlxdWVJZCgncmVjaGFydHMtYXJlYS0nKTtcblxuICBoYW5kbGVBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvbkVuZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0FuaW1hdGlvbkZpbmlzaGVkOiB0cnVlIH0pO1xuXG4gICAgaWYgKF8uaXNGdW5jdGlvbihvbkFuaW1hdGlvbkVuZCkpIHtcbiAgICAgIG9uQW5pbWF0aW9uRW5kKCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUFuaW1hdGlvblN0YXJ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25BbmltYXRpb25TdGFydCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogZmFsc2UgfSk7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uQW5pbWF0aW9uU3RhcnQpKSB7XG4gICAgICBvbkFuaW1hdGlvblN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlckRvdHMobmVlZENsaXA6IGJvb2xlYW4sIGNsaXBQYXRoSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHsgaXNBbmltYXRpb25BY3RpdmUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0FuaW1hdGlvbkZpbmlzaGVkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGlzQW5pbWF0aW9uQWN0aXZlICYmICFpc0FuaW1hdGlvbkZpbmlzaGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRvdCwgcG9pbnRzLCBkYXRhS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGFyZWFQcm9wcyA9IGZpbHRlclByb3BzKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IGN1c3RvbURvdFByb3BzID0gZmlsdGVyUHJvcHMoZG90LCB0cnVlKTtcblxuICAgIGNvbnN0IGRvdHMgPSBwb2ludHMubWFwKChlbnRyeTogQXJlYVBvaW50SXRlbSwgaTogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBkb3RQcm9wcyA9IHtcbiAgICAgICAga2V5OiBgZG90LSR7aX1gLFxuICAgICAgICByOiAzLFxuICAgICAgICAuLi5hcmVhUHJvcHMsXG4gICAgICAgIC4uLmN1c3RvbURvdFByb3BzLFxuICAgICAgICBkYXRhS2V5LFxuICAgICAgICBjeDogZW50cnkueCxcbiAgICAgICAgY3k6IGVudHJ5LnksXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICB2YWx1ZTogZW50cnkudmFsdWUsXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LnBheWxvYWQsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQXJlYS5yZW5kZXJEb3RJdGVtKGRvdCwgZG90UHJvcHMpO1xuICAgIH0pO1xuICAgIGNvbnN0IGRvdHNQcm9wcyA9IHtcbiAgICAgIGNsaXBQYXRoOiBuZWVkQ2xpcCA/IGB1cmwoI2NsaXBQYXRoLSR7Y2xpcFBhdGhJZH0pYCA6IG51bGwsXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLWFyZWEtZG90c1wiIHsuLi5kb3RzUHJvcHN9PlxuICAgICAgICB7ZG90c31cbiAgICAgIDwvTGF5ZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckhvcml6b250YWxSZWN0KGFscGhhOiBudW1iZXIpIHtcbiAgICBjb25zdCB7IGJhc2VMaW5lLCBwb2ludHMsIHN0cm9rZVdpZHRoIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHN0YXJ0WCA9IHBvaW50c1swXS54O1xuICAgIGNvbnN0IGVuZFggPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdLng7XG4gICAgY29uc3Qgd2lkdGggPSBhbHBoYSAqIE1hdGguYWJzKHN0YXJ0WCAtIGVuZFgpO1xuICAgIGxldCBtYXhZID0gXy5tYXgocG9pbnRzLm1hcChlbnRyeSA9PiBlbnRyeS55IHx8IDApKTtcblxuICAgIGlmIChpc051bWJlcihiYXNlTGluZSkgJiYgdHlwZW9mIGJhc2VMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgbWF4WSA9IE1hdGgubWF4KGJhc2VMaW5lLCBtYXhZKTtcbiAgICB9IGVsc2UgaWYgKGJhc2VMaW5lICYmIF8uaXNBcnJheShiYXNlTGluZSkgJiYgYmFzZUxpbmUubGVuZ3RoKSB7XG4gICAgICBtYXhZID0gTWF0aC5tYXgoXy5tYXgoYmFzZUxpbmUubWFwKGVudHJ5ID0+IGVudHJ5LnkgfHwgMCkpLCBtYXhZKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIobWF4WSkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxyZWN0XG4gICAgICAgICAgeD17c3RhcnRYIDwgZW5kWCA/IHN0YXJ0WCA6IHN0YXJ0WCAtIHdpZHRofVxuICAgICAgICAgIHk9ezB9XG4gICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgIGhlaWdodD17TWF0aC5mbG9vcihtYXhZICsgKHN0cm9rZVdpZHRoID8gcGFyc2VJbnQoYCR7c3Ryb2tlV2lkdGh9YCwgMTApIDogMSkpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlbmRlclZlcnRpY2FsUmVjdChhbHBoYTogbnVtYmVyKSB7XG4gICAgY29uc3QgeyBiYXNlTGluZSwgcG9pbnRzLCBzdHJva2VXaWR0aCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdGFydFkgPSBwb2ludHNbMF0ueTtcbiAgICBjb25zdCBlbmRZID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS55O1xuICAgIGNvbnN0IGhlaWdodCA9IGFscGhhICogTWF0aC5hYnMoc3RhcnRZIC0gZW5kWSk7XG4gICAgbGV0IG1heFggPSBfLm1heChwb2ludHMubWFwKGVudHJ5ID0+IGVudHJ5LnggfHwgMCkpO1xuXG4gICAgaWYgKGlzTnVtYmVyKGJhc2VMaW5lKSAmJiB0eXBlb2YgYmFzZUxpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICBtYXhYID0gTWF0aC5tYXgoYmFzZUxpbmUsIG1heFgpO1xuICAgIH0gZWxzZSBpZiAoYmFzZUxpbmUgJiYgXy5pc0FycmF5KGJhc2VMaW5lKSAmJiBiYXNlTGluZS5sZW5ndGgpIHtcbiAgICAgIG1heFggPSBNYXRoLm1heChfLm1heChiYXNlTGluZS5tYXAoZW50cnkgPT4gZW50cnkueCB8fCAwKSksIG1heFgpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihtYXhYKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHJlY3RcbiAgICAgICAgICB4PXswfVxuICAgICAgICAgIHk9e3N0YXJ0WSA8IGVuZFkgPyBzdGFydFkgOiBzdGFydFkgLSBoZWlnaHR9XG4gICAgICAgICAgd2lkdGg9e21heFggKyAoc3Ryb2tlV2lkdGggPyBwYXJzZUludChgJHtzdHJva2VXaWR0aH1gLCAxMCkgOiAxKX1cbiAgICAgICAgICBoZWlnaHQ9e01hdGguZmxvb3IoaGVpZ2h0KX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXJDbGlwUmVjdChhbHBoYTogbnVtYmVyKSB7XG4gICAgY29uc3QgeyBsYXlvdXQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAobGF5b3V0ID09PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJWZXJ0aWNhbFJlY3QoYWxwaGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlckhvcml6b250YWxSZWN0KGFscGhhKTtcbiAgfVxuXG4gIHJlbmRlckFyZWFTdGF0aWNhbGx5KHBvaW50czogQXJlYVBvaW50SXRlbVtdLCBiYXNlTGluZTogUHJvcHNbJ2Jhc2VMaW5lJ10sIG5lZWRDbGlwOiBib29sZWFuLCBjbGlwUGF0aElkOiBzdHJpbmcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgY29uc3QgeyBsYXlvdXQsIHR5cGUsIHN0cm9rZSwgY29ubmVjdE51bGxzLCBpc1JhbmdlLCByZWYsIC4uLm90aGVycyB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xpcFBhdGg9e25lZWRDbGlwID8gYHVybCgjY2xpcFBhdGgtJHtjbGlwUGF0aElkfSlgIDogbnVsbH0+XG4gICAgICAgIDxDdXJ2ZVxuICAgICAgICAgIHsuLi5maWx0ZXJQcm9wcyhvdGhlcnMsIHRydWUpfVxuICAgICAgICAgIHBvaW50cz17cG9pbnRzfVxuICAgICAgICAgIGNvbm5lY3ROdWxscz17Y29ubmVjdE51bGxzfVxuICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgYmFzZUxpbmU9e2Jhc2VMaW5lfVxuICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLWFyZWEtYXJlYVwiXG4gICAgICAgIC8+XG4gICAgICAgIHtzdHJva2UgIT09ICdub25lJyAmJiAoXG4gICAgICAgICAgPEN1cnZlXG4gICAgICAgICAgICB7Li4uZmlsdGVyUHJvcHModGhpcy5wcm9wcyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1hcmVhLWN1cnZlXCJcbiAgICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAgICAgdHlwZT17dHlwZX1cbiAgICAgICAgICAgIGNvbm5lY3ROdWxscz17Y29ubmVjdE51bGxzfVxuICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgICAgcG9pbnRzPXtwb2ludHN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3N0cm9rZSAhPT0gJ25vbmUnICYmIGlzUmFuZ2UgJiYgKFxuICAgICAgICAgIDxDdXJ2ZVxuICAgICAgICAgICAgey4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVjaGFydHMtYXJlYS1jdXJ2ZVwiXG4gICAgICAgICAgICBsYXlvdXQ9e2xheW91dH1cbiAgICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgICBjb25uZWN0TnVsbHM9e2Nvbm5lY3ROdWxsc31cbiAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIHBvaW50cz17YmFzZUxpbmUgYXMgQ3VydmVQb2ludFtdfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBcmVhV2l0aEFuaW1hdGlvbihuZWVkQ2xpcDogYm9vbGVhbiwgY2xpcFBhdGhJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnRzLFxuICAgICAgYmFzZUxpbmUsXG4gICAgICBpc0FuaW1hdGlvbkFjdGl2ZSxcbiAgICAgIGFuaW1hdGlvbkJlZ2luLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBhbmltYXRpb25FYXNpbmcsXG4gICAgICBhbmltYXRpb25JZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZQb2ludHMsIHByZXZCYXNlTGluZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvLyBjb25zdCBjbGlwUGF0aElkID0gXy5pc05pbChpZCkgPyB0aGlzLmlkIDogaWQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVcbiAgICAgICAgYmVnaW49e2FuaW1hdGlvbkJlZ2lufVxuICAgICAgICBkdXJhdGlvbj17YW5pbWF0aW9uRHVyYXRpb259XG4gICAgICAgIGlzQWN0aXZlPXtpc0FuaW1hdGlvbkFjdGl2ZX1cbiAgICAgICAgZWFzaW5nPXthbmltYXRpb25FYXNpbmd9XG4gICAgICAgIGZyb209e3sgdDogMCB9fVxuICAgICAgICB0bz17eyB0OiAxIH19XG4gICAgICAgIGtleT17YGFyZWEtJHthbmltYXRpb25JZH1gfVxuICAgICAgICBvbkFuaW1hdGlvbkVuZD17dGhpcy5oYW5kbGVBbmltYXRpb25FbmR9XG4gICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uU3RhcnR9XG4gICAgICA+XG4gICAgICAgIHsoeyB0IH06IHsgdDogbnVtYmVyIH0pID0+IHtcbiAgICAgICAgICBpZiAocHJldlBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgcHJldlBvaW50c0RpZmZGYWN0b3IgPSBwcmV2UG9pbnRzLmxlbmd0aCAvIHBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICAvLyB1cGRhdGUgYW5pbXRhaW9uXG4gICAgICAgICAgICBjb25zdCBzdGVwUG9pbnRzID0gcG9pbnRzLm1hcCgoZW50cnksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHByZXZQb2ludEluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAqIHByZXZQb2ludHNEaWZmRmFjdG9yKTtcbiAgICAgICAgICAgICAgaWYgKHByZXZQb2ludHNbcHJldlBvaW50SW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHByZXZQb2ludHNbcHJldlBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclggPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LngsIGVudHJ5LngpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclkgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnksIGVudHJ5LnkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uZW50cnksIHg6IGludGVycG9sYXRvclgodCksIHk6IGludGVycG9sYXRvclkodCkgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHN0ZXBCYXNlTGluZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGJhc2VMaW5lKSAmJiB0eXBlb2YgYmFzZUxpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvciA9IGludGVycG9sYXRlTnVtYmVyKHByZXZCYXNlTGluZSBhcyBudW1iZXIsIGJhc2VMaW5lKTtcbiAgICAgICAgICAgICAgc3RlcEJhc2VMaW5lID0gaW50ZXJwb2xhdG9yKHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmlzTmlsKGJhc2VMaW5lKSB8fCBfLmlzTmFOKGJhc2VMaW5lKSkge1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2QmFzZUxpbmUgYXMgbnVtYmVyLCAwKTtcbiAgICAgICAgICAgICAgc3RlcEJhc2VMaW5lID0gaW50ZXJwb2xhdG9yKHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RlcEJhc2VMaW5lID0gKGJhc2VMaW5lIGFzIENvb3JkaW5hdGVbXSkubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2UG9pbnRJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggKiBwcmV2UG9pbnRzRGlmZkZhY3Rvcik7XG4gICAgICAgICAgICAgICAgaWYgKChwcmV2QmFzZUxpbmUgYXMgQ29vcmRpbmF0ZVtdKVtwcmV2UG9pbnRJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSAocHJldkJhc2VMaW5lIGFzIENvb3JkaW5hdGVbXSlbcHJldlBvaW50SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yWCA9IGludGVycG9sYXRlTnVtYmVyKHByZXYueCwgZW50cnkueCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JZID0gaW50ZXJwb2xhdGVOdW1iZXIocHJldi55LCBlbnRyeS55KTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uZW50cnksIHg6IGludGVycG9sYXRvclgodCksIHk6IGludGVycG9sYXRvclkodCkgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJBcmVhU3RhdGljYWxseShzdGVwUG9pbnRzLCBzdGVwQmFzZUxpbmUsIG5lZWRDbGlwLCBjbGlwUGF0aElkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPExheWVyPlxuICAgICAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9e2BhbmltYXRpb25DbGlwUGF0aC0ke2NsaXBQYXRoSWR9YH0+e3RoaXMucmVuZGVyQ2xpcFJlY3QodCl9PC9jbGlwUGF0aD5cbiAgICAgICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgICAgICA8TGF5ZXIgY2xpcFBhdGg9e2B1cmwoI2FuaW1hdGlvbkNsaXBQYXRoLSR7Y2xpcFBhdGhJZH0pYH0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQXJlYVN0YXRpY2FsbHkocG9pbnRzLCBiYXNlTGluZSwgbmVlZENsaXAsIGNsaXBQYXRoSWQpfVxuICAgICAgICAgICAgICA8L0xheWVyPlxuICAgICAgICAgICAgPC9MYXllcj5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBcmVhKG5lZWRDbGlwOiBib29sZWFuLCBjbGlwUGF0aElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IHBvaW50cywgYmFzZUxpbmUsIGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJldlBvaW50cywgcHJldkJhc2VMaW5lLCB0b3RhbExlbmd0aCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChcbiAgICAgIGlzQW5pbWF0aW9uQWN0aXZlICYmXG4gICAgICBwb2ludHMgJiZcbiAgICAgIHBvaW50cy5sZW5ndGggJiZcbiAgICAgICgoIXByZXZQb2ludHMgJiYgdG90YWxMZW5ndGggPiAwKSB8fCAhXy5pc0VxdWFsKHByZXZQb2ludHMsIHBvaW50cykgfHwgIV8uaXNFcXVhbChwcmV2QmFzZUxpbmUsIGJhc2VMaW5lKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckFyZWFXaXRoQW5pbWF0aW9uKG5lZWRDbGlwLCBjbGlwUGF0aElkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJBcmVhU3RhdGljYWxseShwb2ludHMsIGJhc2VMaW5lLCBuZWVkQ2xpcCwgY2xpcFBhdGhJZCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoaWRlLCBkb3QsIHBvaW50cywgY2xhc3NOYW1lLCB0b3AsIGxlZnQsIHhBeGlzLCB5QXhpcywgd2lkdGgsIGhlaWdodCwgaXNBbmltYXRpb25BY3RpdmUsIGlkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGhpZGUgfHwgIXBvaW50cyB8fCAhcG9pbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBpc0FuaW1hdGlvbkZpbmlzaGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGhhc1NpbmdsZVBvaW50ID0gcG9pbnRzLmxlbmd0aCA9PT0gMTtcbiAgICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtYXJlYScsIGNsYXNzTmFtZSk7XG4gICAgY29uc3QgbmVlZENsaXAgPSAoeEF4aXMgJiYgeEF4aXMuYWxsb3dEYXRhT3ZlcmZsb3cpIHx8ICh5QXhpcyAmJiB5QXhpcy5hbGxvd0RhdGFPdmVyZmxvdyk7XG4gICAgY29uc3QgY2xpcFBhdGhJZCA9IF8uaXNOaWwoaWQpID8gdGhpcy5pZCA6IGlkO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMYXllciBjbGFzc05hbWU9e2xheWVyQ2xhc3N9PlxuICAgICAgICB7bmVlZENsaXAgPyAoXG4gICAgICAgICAgPGRlZnM+XG4gICAgICAgICAgICA8Y2xpcFBhdGggaWQ9e2BjbGlwUGF0aC0ke2NsaXBQYXRoSWR9YH0+XG4gICAgICAgICAgICAgIDxyZWN0IHg9e2xlZnR9IHk9e3RvcH0gd2lkdGg9e3dpZHRofSBoZWlnaHQ9e01hdGguZmxvb3IoaGVpZ2h0KX0gLz5cbiAgICAgICAgICAgIDwvY2xpcFBhdGg+XG4gICAgICAgICAgPC9kZWZzPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAgeyFoYXNTaW5nbGVQb2ludCA/IHRoaXMucmVuZGVyQXJlYShuZWVkQ2xpcCwgY2xpcFBhdGhJZCkgOiBudWxsfVxuICAgICAgICB7KGRvdCB8fCBoYXNTaW5nbGVQb2ludCkgJiYgdGhpcy5yZW5kZXJEb3RzKG5lZWRDbGlwLCBjbGlwUGF0aElkKX1cbiAgICAgICAgeyghaXNBbmltYXRpb25BY3RpdmUgfHwgaXNBbmltYXRpb25GaW5pc2hlZCkgJiYgTGFiZWxMaXN0LnJlbmRlckNhbGxCeVBhcmVudCh0aGlzLnByb3BzLCBwb2ludHMpfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUmVuZGVyIGEgZ3JvdXAgb2YgYmFyXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBBbmltYXRlIGZyb20gJ3JlYWN0LXNtb290aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlLCBQcm9wcyBhcyBSZWN0YW5nbGVQcm9wcyB9IGZyb20gJy4uL3NoYXBlL1JlY3RhbmdsZSc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uL2NvbnRhaW5lci9MYXllcic7XG5pbXBvcnQgeyBFcnJvckJhciwgUHJvcHMgYXMgRXJyb3JCYXJQcm9wcyB9IGZyb20gJy4vRXJyb3JCYXInO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4uL2NvbXBvbmVudC9DZWxsJztcbmltcG9ydCB7IExhYmVsTGlzdCB9IGZyb20gJy4uL2NvbXBvbmVudC9MYWJlbExpc3QnO1xuaW1wb3J0IHsgdW5pcXVlSWQsIG1hdGhTaWduLCBpbnRlcnBvbGF0ZU51bWJlciB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IGZpbmRBbGxCeVR5cGUgfSBmcm9tICcuLi91dGlsL1JlYWN0VXRpbHMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHtcbiAgZ2V0Q2F0ZUNvb3JkaW5hdGVPZkJhcixcbiAgZ2V0VmFsdWVCeURhdGFLZXksXG4gIHRydW5jYXRlQnlEb21haW4sXG4gIGdldEJhc2VWYWx1ZU9mQmFyLFxuICBmaW5kUG9zaXRpb25PZkJhcixcbn0gZnJvbSAnLi4vdXRpbC9DaGFydFV0aWxzJztcbmltcG9ydCB7IFByb3BzIGFzIFhBeGlzUHJvcHMgfSBmcm9tICcuL1hBeGlzJztcbmltcG9ydCB7IFByb3BzIGFzIFlBeGlzUHJvcHMgfSBmcm9tICcuL1lBeGlzJztcbmltcG9ydCB7XG4gIEQzU2NhbGUsXG4gIFRvb2x0aXBUeXBlLFxuICBMZWdlbmRUeXBlLFxuICBBbmltYXRpb25UaW1pbmcsXG4gIGZpbHRlclByb3BzLFxuICBDaGFydE9mZnNldCxcbiAgRGF0YUtleSxcbiAgVGlja0l0ZW0sXG4gIGFkYXB0RXZlbnRzT2ZDaGlsZCxcbiAgUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudCxcbn0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBDb250ZW50VHlwZSB9IGZyb20gJy4uL2NvbXBvbmVudC9MYWJlbCc7XG5cbmludGVyZmFjZSBCYXJSZWN0YW5nbGVJdGVtIGV4dGVuZHMgUmVjdGFuZ2xlUHJvcHMge1xuICB2YWx1ZT86IG51bWJlcjtcbiAgLyoqIHRoZSBjb29yZGluYXRlIG9mIGJhY2tncm91bmQgcmVjdGFuZ2xlICovXG4gIGJhY2tncm91bmQ/OiB7XG4gICAgeD86IG51bWJlcjtcbiAgICB5PzogbnVtYmVyO1xuICAgIHdpZHRoPzogbnVtYmVyO1xuICAgIGhlaWdodD86IG51bWJlcjtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEludGVybmFsQmFyUHJvcHMge1xuICB4QXhpcz86IE9taXQ8WEF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj47IHg/OiBudW1iZXI7IHdpZHRoPzogbnVtYmVyIH07XG4gIHlBeGlzPzogT21pdDxZQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPjsgeT86IG51bWJlcjsgaGVpZ2h0PzogbnVtYmVyIH07XG4gIGRhdGE/OiBCYXJSZWN0YW5nbGVJdGVtW107XG4gIHRvcD86IG51bWJlcjtcbiAgbGVmdD86IG51bWJlcjtcbn1cblxudHlwZSBSZWN0YW5nbGVTaGFwZVR5cGUgPVxuICB8IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PlxuICB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KVxuICB8IFJlY3RhbmdsZVByb3BzXG4gIHwgYm9vbGVhbjtcblxuaW50ZXJmYWNlIEJhclByb3BzIGV4dGVuZHMgSW50ZXJuYWxCYXJQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgbGF5b3V0PzogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcbiAgeEF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgeUF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgc3RhY2tJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgYmFyU2l6ZT86IG51bWJlcjtcbiAgdW5pdD86IHN0cmluZyB8IG51bWJlcjtcbiAgbmFtZT86IHN0cmluZyB8IG51bWJlcjtcbiAgZGF0YUtleTogRGF0YUtleTxhbnk+O1xuICB0b29sdGlwVHlwZT86IFRvb2x0aXBUeXBlO1xuICBsZWdlbmRUeXBlPzogTGVnZW5kVHlwZTtcbiAgbWluUG9pbnRTaXplPzogbnVtYmVyO1xuICBtYXhCYXJTaXplPzogbnVtYmVyO1xuICBoaWRlPzogYm9vbGVhbjtcbiAgc2hhcGU/OiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50Pik7XG4gIGJhY2tncm91bmQ/OiBSZWN0YW5nbGVTaGFwZVR5cGU7XG4gIHJhZGl1cz86IG51bWJlciB8IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG4gIG9uQW5pbWF0aW9uU3RhcnQ/OiAoKSA9PiB2b2lkO1xuICBvbkFuaW1hdGlvbkVuZD86ICgpID0+IHZvaWQ7XG5cbiAgaXNBbmltYXRpb25BY3RpdmU/OiBib29sZWFuO1xuICBhbmltYXRpb25CZWdpbj86IG51bWJlcjtcbiAgYW5pbWF0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkVhc2luZz86IEFuaW1hdGlvblRpbWluZztcbiAgYW5pbWF0aW9uSWQ/OiBudW1iZXI7XG4gIGlkPzogc3RyaW5nO1xuICBsYWJlbD86XG4gICAgfCBib29sZWFuXG4gICAgfCBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD5cbiAgICB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KVxuICAgIHwge1xuICAgICAgICBpZD86IHN0cmluZztcbiAgICAgICAgdmFsdWVBY2Nlc3Nvcj86IEZ1bmN0aW9uO1xuICAgICAgICBkYXRhS2V5PzogRGF0YUtleTxhbnk+O1xuICAgICAgICBjb250ZW50PzogQ29udGVudFR5cGU7XG4gICAgICB9O1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IE9taXQ8UHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudDxhbnksIFNWR1BhdGhFbGVtZW50PiwgJ3JhZGl1cyc+ICYgQmFyUHJvcHM7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHJlYWRvbmx5IGlzQW5pbWF0aW9uRmluaXNoZWQ/OiBib29sZWFuO1xuICByZWFkb25seSBwcmV2RGF0YT86IEJhclJlY3RhbmdsZUl0ZW1bXTtcbiAgcmVhZG9ubHkgY3VyRGF0YT86IEJhclJlY3RhbmdsZUl0ZW1bXTtcbiAgcmVhZG9ubHkgcHJldkFuaW1hdGlvbklkPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQmFyIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0Jhcic7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB4QXhpc0lkOiAwLFxuICAgIHlBeGlzSWQ6IDAsXG4gICAgbGVnZW5kVHlwZTogJ3JlY3QnLFxuICAgIG1pblBvaW50U2l6ZTogMCxcbiAgICBoaWRlOiBmYWxzZSxcbiAgICAvLyBkYXRhIG9mIGJhclxuICAgIGRhdGE6IFtdIGFzIEJhclJlY3RhbmdsZUl0ZW1bXSxcbiAgICBsYXlvdXQ6ICd2ZXJ0aWNhbCcsXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uQmVnaW46IDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlJyxcbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSB0aGUgZGF0YSBvZiBlYWNoIGdyb3VwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wcyBmb3IgdGhlIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbSAgICAgICAgQW4gaW5zdGFuY2Ugb2YgQmFyXG4gICAqIEBwYXJhbSB7QXJyYXl9IGJhclBvc2l0aW9uICBUaGUgb2Zmc2V0IGFuZCBzaXplIG9mIGVhY2ggYmFyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB4QXhpcyAgICAgICBUaGUgY29uZmlndXJhdGlvbiBvZiB4LWF4aXNcbiAgICogQHBhcmFtIHtPYmplY3R9IHlBeGlzICAgICAgIFRoZSBjb25maWd1cmF0aW9uIG9mIHktYXhpc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFja2VkRGF0YSAgVGhlIHN0YWNrZWQgZGF0YSBvZiBhIGJhciBpdGVtXG4gICAqIEByZXR1cm57QXJyYXl9IENvbXBvc2VkIGRhdGFcbiAgICovXG4gIHN0YXRpYyBnZXRDb21wb3NlZERhdGEgPSAoe1xuICAgIHByb3BzLFxuICAgIGl0ZW0sXG4gICAgYmFyUG9zaXRpb24sXG4gICAgYmFuZFNpemUsXG4gICAgeEF4aXMsXG4gICAgeUF4aXMsXG4gICAgeEF4aXNUaWNrcyxcbiAgICB5QXhpc1RpY2tzLFxuICAgIHN0YWNrZWREYXRhLFxuICAgIGRhdGFTdGFydEluZGV4LFxuICAgIGRpc3BsYXllZERhdGEsXG4gICAgb2Zmc2V0LFxuICB9OiB7XG4gICAgcHJvcHM6IFByb3BzO1xuICAgIGl0ZW06IEJhcjtcbiAgICBiYXJQb3NpdGlvbjogYW55O1xuICAgIGJhbmRTaXplOiBudW1iZXI7XG4gICAgeEF4aXM6IEludGVybmFsQmFyUHJvcHNbJ3hBeGlzJ107XG4gICAgeUF4aXM6IEludGVybmFsQmFyUHJvcHNbJ3lBeGlzJ107XG4gICAgeEF4aXNUaWNrczogVGlja0l0ZW1bXTtcbiAgICB5QXhpc1RpY2tzOiBUaWNrSXRlbVtdO1xuICAgIHN0YWNrZWREYXRhOiBudW1iZXJbXVtdO1xuICAgIGRhdGFTdGFydEluZGV4OiBudW1iZXI7XG4gICAgb2Zmc2V0OiBDaGFydE9mZnNldDtcbiAgICBkaXNwbGF5ZWREYXRhOiBhbnlbXTtcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbk9mQmFyKGJhclBvc2l0aW9uLCBpdGVtKTtcbiAgICBpZiAoIXBvcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBsYXlvdXQgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgZGF0YUtleSwgY2hpbGRyZW4sIG1pblBvaW50U2l6ZSB9ID0gaXRlbS5wcm9wcztcbiAgICBjb25zdCBudW1lcmljQXhpcyA9IGxheW91dCA9PT0gJ2hvcml6b250YWwnID8geUF4aXMgOiB4QXhpcztcbiAgICBjb25zdCBzdGFja2VkRG9tYWluID0gc3RhY2tlZERhdGEgPyBudW1lcmljQXhpcy5zY2FsZS5kb21haW4oKSA6IG51bGw7XG4gICAgY29uc3QgYmFzZVZhbHVlID0gZ2V0QmFzZVZhbHVlT2ZCYXIoeyBudW1lcmljQXhpcyB9KTtcbiAgICBjb25zdCBjZWxscyA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIENlbGwuZGlzcGxheU5hbWUpO1xuXG4gICAgY29uc3QgcmVjdHMgPSBkaXNwbGF5ZWREYXRhLm1hcCgoZW50cnksIGluZGV4KSA9PiB7XG4gICAgICBsZXQgdmFsdWUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJhY2tncm91bmQ7XG5cbiAgICAgIGlmIChzdGFja2VkRGF0YSkge1xuICAgICAgICB2YWx1ZSA9IHRydW5jYXRlQnlEb21haW4oc3RhY2tlZERhdGFbZGF0YVN0YXJ0SW5kZXggKyBpbmRleF0sIHN0YWNrZWREb21haW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgZGF0YUtleSk7XG5cbiAgICAgICAgaWYgKCFfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBbYmFzZVZhbHVlLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxheW91dCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHggPSBnZXRDYXRlQ29vcmRpbmF0ZU9mQmFyKHtcbiAgICAgICAgICBheGlzOiB4QXhpcyxcbiAgICAgICAgICB0aWNrczogeEF4aXNUaWNrcyxcbiAgICAgICAgICBiYW5kU2l6ZSxcbiAgICAgICAgICBvZmZzZXQ6IHBvcy5vZmZzZXQsXG4gICAgICAgICAgZW50cnksXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgIH0pO1xuICAgICAgICB5ID0geUF4aXMuc2NhbGUodmFsdWVbMV0pO1xuICAgICAgICB3aWR0aCA9IHBvcy5zaXplO1xuICAgICAgICBoZWlnaHQgPSB5QXhpcy5zY2FsZSh2YWx1ZVswXSkgLSB5QXhpcy5zY2FsZSh2YWx1ZVsxXSk7XG4gICAgICAgIGJhY2tncm91bmQgPSB7IHgsIHk6IHlBeGlzLnksIHdpZHRoLCBoZWlnaHQ6IHlBeGlzLmhlaWdodCB9O1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhtaW5Qb2ludFNpemUpID4gMCAmJiBNYXRoLmFicyhoZWlnaHQpIDwgTWF0aC5hYnMobWluUG9pbnRTaXplKSkge1xuICAgICAgICAgIGNvbnN0IGRlbHRhID0gbWF0aFNpZ24oaGVpZ2h0IHx8IG1pblBvaW50U2l6ZSkgKiAoTWF0aC5hYnMobWluUG9pbnRTaXplKSAtIE1hdGguYWJzKGhlaWdodCkpO1xuXG4gICAgICAgICAgeSAtPSBkZWx0YTtcbiAgICAgICAgICBoZWlnaHQgKz0gZGVsdGE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB4QXhpcy5zY2FsZSh2YWx1ZVswXSk7XG4gICAgICAgIHkgPSBnZXRDYXRlQ29vcmRpbmF0ZU9mQmFyKHtcbiAgICAgICAgICBheGlzOiB5QXhpcyxcbiAgICAgICAgICB0aWNrczogeUF4aXNUaWNrcyxcbiAgICAgICAgICBiYW5kU2l6ZSxcbiAgICAgICAgICBvZmZzZXQ6IHBvcy5vZmZzZXQsXG4gICAgICAgICAgZW50cnksXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgIH0pO1xuICAgICAgICB3aWR0aCA9IHhBeGlzLnNjYWxlKHZhbHVlWzFdKSAtIHhBeGlzLnNjYWxlKHZhbHVlWzBdKTtcbiAgICAgICAgaGVpZ2h0ID0gcG9zLnNpemU7XG4gICAgICAgIGJhY2tncm91bmQgPSB7IHg6IHhBeGlzLngsIHksIHdpZHRoOiB4QXhpcy53aWR0aCwgaGVpZ2h0IH07XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKG1pblBvaW50U2l6ZSkgPiAwICYmIE1hdGguYWJzKHdpZHRoKSA8IE1hdGguYWJzKG1pblBvaW50U2l6ZSkpIHtcbiAgICAgICAgICBjb25zdCBkZWx0YSA9IG1hdGhTaWduKHdpZHRoIHx8IG1pblBvaW50U2l6ZSkgKiAoTWF0aC5hYnMobWluUG9pbnRTaXplKSAtIE1hdGguYWJzKHdpZHRoKSk7XG4gICAgICAgICAgd2lkdGggKz0gZGVsdGE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZW50cnksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHZhbHVlOiBzdGFja2VkRGF0YSA/IHZhbHVlIDogdmFsdWVbMV0sXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICBiYWNrZ3JvdW5kLFxuICAgICAgICAuLi4oY2VsbHMgJiYgY2VsbHNbaW5kZXhdICYmIGNlbGxzW2luZGV4XS5wcm9wcyksXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgZGF0YTogcmVjdHMsIGxheW91dCwgLi4ub2Zmc2V0IH07XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlID0geyBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAobmV4dFByb3BzLmFuaW1hdGlvbklkICE9PSBwcmV2U3RhdGUucHJldkFuaW1hdGlvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2QW5pbWF0aW9uSWQ6IG5leHRQcm9wcy5hbmltYXRpb25JZCxcbiAgICAgICAgY3VyRGF0YTogbmV4dFByb3BzLmRhdGEsXG4gICAgICAgIHByZXZEYXRhOiBwcmV2U3RhdGUuY3VyRGF0YSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMuZGF0YSAhPT0gcHJldlN0YXRlLmN1ckRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1ckRhdGE6IG5leHRQcm9wcy5kYXRhLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlkID0gdW5pcXVlSWQoJ3JlY2hhcnRzLWJhci0nKTtcblxuICBoYW5kbGVBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvbkVuZCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogdHJ1ZSB9KTtcblxuICAgIGlmIChvbkFuaW1hdGlvbkVuZCkge1xuICAgICAgb25BbmltYXRpb25FbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvblN0YXJ0IH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSB9KTtcblxuICAgIGlmIChvbkFuaW1hdGlvblN0YXJ0KSB7XG4gICAgICBvbkFuaW1hdGlvblN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIHN0YXRpYyByZW5kZXJSZWN0YW5nbGUob3B0aW9uOiBSZWN0YW5nbGVTaGFwZVR5cGUsIHByb3BzOiBhbnkpIHtcbiAgICBsZXQgcmVjdGFuZ2xlO1xuXG4gICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KG9wdGlvbikpIHtcbiAgICAgIHJlY3RhbmdsZSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICByZWN0YW5nbGUgPSBvcHRpb24ocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0YW5nbGUgPSA8UmVjdGFuZ2xlIHsuLi5wcm9wc30gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY3RhbmdsZTtcbiAgfVxuXG4gIHJlbmRlclJlY3RhbmdsZXNTdGF0aWNhbGx5KGRhdGE6IEJhclJlY3RhbmdsZUl0ZW1bXSkge1xuICAgIGNvbnN0IHsgc2hhcGUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYmFzZVByb3BzID0gZmlsdGVyUHJvcHModGhpcy5wcm9wcyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgZGF0YSAmJlxuICAgICAgZGF0YS5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BzID0geyAuLi5iYXNlUHJvcHMsIC4uLmVudHJ5LCBpbmRleDogaSB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPExheWVyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1iYXItcmVjdGFuZ2xlXCJcbiAgICAgICAgICAgIHsuLi5hZGFwdEV2ZW50c09mQ2hpbGQodGhpcy5wcm9wcywgZW50cnksIGkpfVxuICAgICAgICAgICAga2V5PXtgcmVjdGFuZ2xlLSR7aX1gfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtCYXIucmVuZGVyUmVjdGFuZ2xlKHNoYXBlLCBwcm9wcyl9XG4gICAgICAgICAgPC9MYXllcj5cbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclJlY3RhbmdsZXNXaXRoQW5pbWF0aW9uKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBsYXlvdXQsXG4gICAgICBpc0FuaW1hdGlvbkFjdGl2ZSxcbiAgICAgIGFuaW1hdGlvbkJlZ2luLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBhbmltYXRpb25FYXNpbmcsXG4gICAgICBhbmltYXRpb25JZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZEYXRhIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRlXG4gICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgZHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICBpc0FjdGl2ZT17aXNBbmltYXRpb25BY3RpdmV9XG4gICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICBmcm9tPXt7IHQ6IDAgfX1cbiAgICAgICAgdG89e3sgdDogMSB9fVxuICAgICAgICBrZXk9e2BiYXItJHthbmltYXRpb25JZH1gfVxuICAgICAgICBvbkFuaW1hdGlvbkVuZD17dGhpcy5oYW5kbGVBbmltYXRpb25FbmR9XG4gICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uU3RhcnR9XG4gICAgICA+XG4gICAgICAgIHsoeyB0IH06IHsgdDogbnVtYmVyIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBzdGVwRGF0YSA9IGRhdGEubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBwcmV2RGF0YSAmJiBwcmV2RGF0YVtpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclggPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LngsIGVudHJ5LngpO1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JZID0gaW50ZXJwb2xhdGVOdW1iZXIocHJldi55LCBlbnRyeS55KTtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yV2lkdGggPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LndpZHRoLCBlbnRyeS53aWR0aCk7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvckhlaWdodCA9IGludGVycG9sYXRlTnVtYmVyKHByZXYuaGVpZ2h0LCBlbnRyeS5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgeDogaW50ZXJwb2xhdG9yWCh0KSxcbiAgICAgICAgICAgICAgICB5OiBpbnRlcnBvbGF0b3JZKHQpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBpbnRlcnBvbGF0b3JXaWR0aCh0KSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGludGVycG9sYXRvckhlaWdodCh0KSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxheW91dCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvckhlaWdodCA9IGludGVycG9sYXRlTnVtYmVyKDAsIGVudHJ5LmhlaWdodCk7XG4gICAgICAgICAgICAgIGNvbnN0IGggPSBpbnRlcnBvbGF0b3JIZWlnaHQodCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICB5OiBlbnRyeS55ICsgZW50cnkuaGVpZ2h0IC0gaCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGgsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvciA9IGludGVycG9sYXRlTnVtYmVyKDAsIGVudHJ5LndpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IHcgPSBpbnRlcnBvbGF0b3IodCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7IC4uLmVudHJ5LCB3aWR0aDogdyB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIDxMYXllcj57dGhpcy5yZW5kZXJSZWN0YW5nbGVzU3RhdGljYWxseShzdGVwRGF0YSl9PC9MYXllcj47XG4gICAgICAgIH19XG4gICAgICA8L0FuaW1hdGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclJlY3RhbmdsZXMoKSB7XG4gICAgY29uc3QgeyBkYXRhLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZEYXRhIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGlzQW5pbWF0aW9uQWN0aXZlICYmIGRhdGEgJiYgZGF0YS5sZW5ndGggJiYgKCFwcmV2RGF0YSB8fCAhXy5pc0VxdWFsKHByZXZEYXRhLCBkYXRhKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclJlY3RhbmdsZXNXaXRoQW5pbWF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyUmVjdGFuZ2xlc1N0YXRpY2FsbHkoZGF0YSk7XG4gIH1cblxuICByZW5kZXJCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYWNrZ3JvdW5kUHJvcHMgPSBmaWx0ZXJQcm9wcyh0aGlzLnByb3BzLmJhY2tncm91bmQpO1xuXG4gICAgcmV0dXJuIGRhdGEubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgY29uc3QgeyB2YWx1ZSwgYmFja2dyb3VuZCwgLi4ucmVzdCB9ID0gZW50cnk7XG5cbiAgICAgIGlmICghYmFja2dyb3VuZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIGZpbGw6ICcjZWVlJyxcbiAgICAgICAgLi4uYmFja2dyb3VuZCxcbiAgICAgICAgLi4uYmFja2dyb3VuZFByb3BzLFxuICAgICAgICAuLi5hZGFwdEV2ZW50c09mQ2hpbGQodGhpcy5wcm9wcywgZW50cnksIGkpLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAga2V5OiBgYmFja2dyb3VuZC1iYXItJHtpfWAsXG4gICAgICAgIGNsYXNzTmFtZTogJ3JlY2hhcnRzLWJhci1iYWNrZ3JvdW5kLXJlY3RhbmdsZScsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQmFyLnJlbmRlclJlY3RhbmdsZSh0aGlzLnByb3BzLmJhY2tncm91bmQsIHByb3BzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlckVycm9yQmFyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzQW5pbWF0aW9uQWN0aXZlICYmICF0aGlzLnN0YXRlLmlzQW5pbWF0aW9uRmluaXNoZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YSwgeEF4aXMsIHlBeGlzLCBsYXlvdXQsIGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGVycm9yQmFySXRlbXMgPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBFcnJvckJhci5kaXNwbGF5TmFtZSk7XG5cbiAgICBpZiAoIWVycm9yQmFySXRlbXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldCA9IGxheW91dCA9PT0gJ3ZlcnRpY2FsJyA/IGRhdGFbMF0uaGVpZ2h0IC8gMiA6IGRhdGFbMF0ud2lkdGggLyAyO1xuXG4gICAgZnVuY3Rpb24gZGF0YVBvaW50Rm9ybWF0dGVyKGRhdGFQb2ludDogQmFyUmVjdGFuZ2xlSXRlbSwgZGF0YUtleTogUHJvcHNbJ2RhdGFLZXknXSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogZGF0YVBvaW50LngsXG4gICAgICAgIHk6IGRhdGFQb2ludC55LFxuICAgICAgICB2YWx1ZTogZGF0YVBvaW50LnZhbHVlLFxuICAgICAgICBlcnJvclZhbDogZ2V0VmFsdWVCeURhdGFLZXkoZGF0YVBvaW50LCBkYXRhS2V5KSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9yQmFySXRlbXMubWFwKChpdGVtOiBSZWFjdEVsZW1lbnQ8RXJyb3JCYXJQcm9wcz4sIGk6IG51bWJlcikgPT5cbiAgICAgIFJlYWN0LmNsb25lRWxlbWVudChpdGVtLCB7XG4gICAgICAgIGtleTogYGVycm9yLWJhci0ke2l9YCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgZGF0YSxcbiAgICAgICAgeEF4aXMsXG4gICAgICAgIHlBeGlzLFxuICAgICAgICBsYXlvdXQsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZGF0YVBvaW50Rm9ybWF0dGVyLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBoaWRlLFxuICAgICAgZGF0YSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHhBeGlzLFxuICAgICAgeUF4aXMsXG4gICAgICBsZWZ0LFxuICAgICAgdG9wLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBpc0FuaW1hdGlvbkFjdGl2ZSxcbiAgICAgIGJhY2tncm91bmQsXG4gICAgICBpZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaGlkZSB8fCAhZGF0YSB8fCAhZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaXNBbmltYXRpb25GaW5pc2hlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtYmFyJywgY2xhc3NOYW1lKTtcbiAgICBjb25zdCBuZWVkQ2xpcCA9ICh4QXhpcyAmJiB4QXhpcy5hbGxvd0RhdGFPdmVyZmxvdykgfHwgKHlBeGlzICYmIHlBeGlzLmFsbG93RGF0YU92ZXJmbG93KTtcbiAgICBjb25zdCBjbGlwUGF0aElkID0gXy5pc05pbChpZCkgPyB0aGlzLmlkIDogaWQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT17bGF5ZXJDbGFzc30+XG4gICAgICAgIHtuZWVkQ2xpcCA/IChcbiAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgIDxjbGlwUGF0aCBpZD17YGNsaXBQYXRoLSR7Y2xpcFBhdGhJZH1gfT5cbiAgICAgICAgICAgICAgPHJlY3QgeD17bGVmdH0geT17dG9wfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuICAgICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgICA8L2RlZnM+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtYmFyLXJlY3RhbmdsZXNcIiBjbGlwUGF0aD17bmVlZENsaXAgPyBgdXJsKCNjbGlwUGF0aC0ke2NsaXBQYXRoSWR9KWAgOiBudWxsfT5cbiAgICAgICAgICB7YmFja2dyb3VuZCA/IHRoaXMucmVuZGVyQmFja2dyb3VuZCgpIDogbnVsbH1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJSZWN0YW5nbGVzKCl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICAgIHt0aGlzLnJlbmRlckVycm9yQmFyKCl9XG4gICAgICAgIHsoIWlzQW5pbWF0aW9uQWN0aXZlIHx8IGlzQW5pbWF0aW9uRmluaXNoZWQpICYmIExhYmVsTGlzdC5yZW5kZXJDYWxsQnlQYXJlbnQodGhpcy5wcm9wcywgZGF0YSl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBSZW5kZXIgYSBncm91cCBvZiBzY2F0dGVyc1xuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IEltcGxpY2l0TGFiZWxMaXN0VHlwZSwgTGFiZWxMaXN0IH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsTGlzdCc7XG5pbXBvcnQgeyBmaW5kQWxsQnlUeXBlIH0gZnJvbSAnLi4vdXRpbC9SZWFjdFV0aWxzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4uL3V0aWwvR2xvYmFsJztcbmltcG9ydCB7IFpBeGlzLCBQcm9wcyBhcyBaQXhpc1Byb3BzIH0gZnJvbSAnLi9aQXhpcyc7XG5pbXBvcnQgeyBDdXJ2ZSwgUHJvcHMgYXMgQ3VydmVQcm9wcywgQ3VydmVUeXBlIH0gZnJvbSAnLi4vc2hhcGUvQ3VydmUnO1xuaW1wb3J0IHsgU3ltYm9scywgUHJvcHMgYXMgU3ltYm9sc1Byb3BzIH0gZnJvbSAnLi4vc2hhcGUvU3ltYm9scyc7XG5pbXBvcnQgeyBFcnJvckJhciwgUHJvcHMgYXMgRXJyb3JCYXJQcm9wcyB9IGZyb20gJy4vRXJyb3JCYXInO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4uL2NvbXBvbmVudC9DZWxsJztcbmltcG9ydCB7IHVuaXF1ZUlkLCBpbnRlcnBvbGF0ZU51bWJlciwgZ2V0TGluZWFyUmVncmVzc2lvbiB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IGdldFZhbHVlQnlEYXRhS2V5LCBnZXRDYXRlQ29vcmRpbmF0ZU9mTGluZSB9IGZyb20gJy4uL3V0aWwvQ2hhcnRVdGlscyc7XG5pbXBvcnQge1xuICBMZWdlbmRUeXBlLFxuICBTeW1ib2xUeXBlLFxuICBBbmltYXRpb25UaW1pbmcsXG4gIGZpbHRlclByb3BzLFxuICBEM1NjYWxlLFxuICBDaGFydE9mZnNldCxcbiAgRGF0YUtleSxcbiAgVGlja0l0ZW0sXG4gIGFkYXB0RXZlbnRzT2ZDaGlsZCxcbiAgUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudCxcbn0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBUb29sdGlwVHlwZSB9IGZyb20gJy4uL2NvbXBvbmVudC9EZWZhdWx0VG9vbHRpcENvbnRlbnQnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWEF4aXNQcm9wcyB9IGZyb20gJy4vWEF4aXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vWUF4aXMnO1xuXG5pbnRlcmZhY2UgU2NhdHR0ZXJQb2ludE5vZGUge1xuICB4PzogbnVtYmVyIHwgc3RyaW5nO1xuICB5PzogbnVtYmVyIHwgc3RyaW5nO1xuICB6PzogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU2NhdHRlclBvaW50SXRlbSB7XG4gIGN4PzogbnVtYmVyO1xuICBjeT86IG51bWJlcjtcbiAgc2l6ZT86IG51bWJlcjtcbiAgbm9kZT86IFNjYXR0dGVyUG9pbnROb2RlO1xuICBwYXlsb2FkPzogYW55O1xufVxuXG5pbnRlcmZhY2UgU2NhdHRlclByb3BzIHtcbiAgZGF0YT86IGFueVtdO1xuICB4QXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICB5QXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICB6QXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuXG4gIGxlZnQ/OiBudW1iZXI7XG4gIHRvcD86IG51bWJlcjtcblxuICB4QXhpcz86IE9taXQ8WEF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgeUF4aXM/OiBPbWl0PFlBeGlzUHJvcHMsICdzY2FsZSc+ICYgeyBzY2FsZTogRDNTY2FsZTxzdHJpbmcgfCBudW1iZXI+IH07XG4gIHpBeGlzPzogT21pdDxaQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPiB9O1xuXG4gIGRhdGFLZXk/OiBEYXRhS2V5PGFueT47XG5cbiAgbGluZT86IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PiB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KSB8IEN1cnZlUHJvcHMgfCBib29sZWFuO1xuICBsaW5lVHlwZT86ICdmaXR0aW5nJyB8ICdqb2ludCc7XG4gIGxpbmVKb2ludFR5cGU/OiBDdXJ2ZVR5cGU7XG4gIGxlZ2VuZFR5cGU/OiBMZWdlbmRUeXBlO1xuICB0b29sdGlwVHlwZT86IFRvb2x0aXBUeXBlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgYWN0aXZlSW5kZXg/OiBudW1iZXI7XG4gIGFjdGl2ZVNoYXBlPzogUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+IHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pIHwgU3ltYm9sc1Byb3BzO1xuICBzaGFwZT86IFN5bWJvbFR5cGUgfCBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50Pik7XG4gIHBvaW50cz86IFNjYXR0ZXJQb2ludEl0ZW1bXTtcbiAgaGlkZT86IGJvb2xlYW47XG4gIGxhYmVsPzogSW1wbGljaXRMYWJlbExpc3RUeXBlPGFueT47XG5cbiAgaXNBbmltYXRpb25BY3RpdmU/OiBib29sZWFuO1xuICBhbmltYXRpb25JZD86IG51bWJlcjtcbiAgYW5pbWF0aW9uQmVnaW4/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuICBhbmltYXRpb25FYXNpbmc/OiBBbmltYXRpb25UaW1pbmc7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudDxhbnksIFNWR0VsZW1lbnQ+ICYgU2NhdHRlclByb3BzO1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBpc0FuaW1hdGlvbkZpbmlzaGVkPzogYm9vbGVhbjtcbiAgcHJldlBvaW50cz86IFNjYXR0ZXJQb2ludEl0ZW1bXTtcbiAgY3VyUG9pbnRzPzogU2NhdHRlclBvaW50SXRlbVtdO1xuICBwcmV2QW5pbWF0aW9uSWQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBTY2F0dGVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1NjYXR0ZXInO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeEF4aXNJZDogMCxcbiAgICB5QXhpc0lkOiAwLFxuICAgIHpBeGlzSWQ6IDAsXG4gICAgbGVnZW5kVHlwZTogJ2NpcmNsZScsXG4gICAgbGluZVR5cGU6ICdqb2ludCcsXG4gICAgbGluZUpvaW50VHlwZTogJ2xpbmVhcicsXG4gICAgZGF0YTogW10gYXMgYW55W10sXG4gICAgc2hhcGU6ICdjaXJjbGUnLFxuICAgIGhpZGU6IGZhbHNlLFxuXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uQmVnaW46IDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHRoZSBkYXRhIG9mIGVhY2ggZ3JvdXBcbiAgICogQHBhcmFtICB7T2JqZWN0fSB4QXhpcyAgIFRoZSBjb25maWd1cmF0aW9uIG9mIHgtYXhpc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IHlBeGlzICAgVGhlIGNvbmZpZ3VyYXRpb24gb2YgeS1heGlzXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZGF0YUtleSBUaGUgdW5pcXVlIGtleSBvZiBhIGdyb3VwXG4gICAqIEByZXR1cm4ge0FycmF5fSAgQ29tcG9zZWQgZGF0YVxuICAgKi9cbiAgc3RhdGljIGdldENvbXBvc2VkRGF0YSA9ICh7XG4gICAgeEF4aXMsXG4gICAgeUF4aXMsXG4gICAgekF4aXMsXG4gICAgaXRlbSxcbiAgICBkaXNwbGF5ZWREYXRhLFxuICAgIHhBeGlzVGlja3MsXG4gICAgeUF4aXNUaWNrcyxcbiAgICBvZmZzZXQsXG4gIH06IHtcbiAgICBwcm9wczogUHJvcHM7XG4gICAgeEF4aXM6IFByb3BzWyd4QXhpcyddO1xuICAgIHlBeGlzOiBQcm9wc1sneUF4aXMnXTtcbiAgICB6QXhpczogUHJvcHNbJ3pBeGlzJ107XG4gICAgeEF4aXNUaWNrczogVGlja0l0ZW1bXTtcbiAgICB5QXhpc1RpY2tzOiBUaWNrSXRlbVtdO1xuICAgIGl0ZW06IFNjYXR0ZXI7XG4gICAgYmFuZFNpemU6IG51bWJlcjtcbiAgICBkaXNwbGF5ZWREYXRhOiBhbnlbXTtcbiAgICBvZmZzZXQ6IENoYXJ0T2Zmc2V0O1xuICB9KSA9PiB7XG4gICAgY29uc3QgeyB0b29sdGlwVHlwZSB9ID0gaXRlbS5wcm9wcztcbiAgICBjb25zdCBjZWxscyA9IGZpbmRBbGxCeVR5cGUoaXRlbS5wcm9wcy5jaGlsZHJlbiwgQ2VsbC5kaXNwbGF5TmFtZSk7XG4gICAgY29uc3QgeEF4aXNEYXRhS2V5ID0gXy5pc05pbCh4QXhpcy5kYXRhS2V5KSA/IGl0ZW0ucHJvcHMuZGF0YUtleSA6IHhBeGlzLmRhdGFLZXk7XG4gICAgY29uc3QgeUF4aXNEYXRhS2V5ID0gXy5pc05pbCh5QXhpcy5kYXRhS2V5KSA/IGl0ZW0ucHJvcHMuZGF0YUtleSA6IHlBeGlzLmRhdGFLZXk7XG4gICAgY29uc3QgekF4aXNEYXRhS2V5ID0gekF4aXMgJiYgekF4aXMuZGF0YUtleTtcbiAgICBjb25zdCBkZWZhdWx0UmFuZ2VaID0gekF4aXMgPyB6QXhpcy5yYW5nZSA6IFpBeGlzLmRlZmF1bHRQcm9wcy5yYW5nZTtcbiAgICBjb25zdCBkZWZhdWx0WiA9IGRlZmF1bHRSYW5nZVogJiYgZGVmYXVsdFJhbmdlWlswXTtcbiAgICBjb25zdCB4QmFuZFNpemUgPSAoeEF4aXMuc2NhbGUgYXMgYW55KS5iYW5kd2lkdGggPyAoeEF4aXMuc2NhbGUgYXMgYW55KS5iYW5kd2lkdGgoKSA6IDA7XG4gICAgY29uc3QgeUJhbmRTaXplID0gKHlBeGlzLnNjYWxlIGFzIGFueSkuYmFuZHdpZHRoID8gKHlBeGlzLnNjYWxlIGFzIGFueSkuYmFuZHdpZHRoKCkgOiAwO1xuICAgIGNvbnN0IHBvaW50cyA9IGRpc3BsYXllZERhdGEubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHggPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgeEF4aXNEYXRhS2V5KTtcbiAgICAgIGNvbnN0IHkgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgeUF4aXNEYXRhS2V5KTtcbiAgICAgIGNvbnN0IHogPSAoIV8uaXNOaWwoekF4aXNEYXRhS2V5KSAmJiBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgekF4aXNEYXRhS2V5KSkgfHwgJy0nO1xuICAgICAgY29uc3QgdG9vbHRpcFBheWxvYWQgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBfLmlzTmlsKHhBeGlzLmRhdGFLZXkpID8gaXRlbS5wcm9wcy5uYW1lIDogeEF4aXMubmFtZSB8fCB4QXhpcy5kYXRhS2V5LFxuICAgICAgICAgIHVuaXQ6IHhBeGlzLnVuaXQgfHwgJycsXG4gICAgICAgICAgdmFsdWU6IHgsXG4gICAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICAgICAgZGF0YUtleTogeEF4aXNEYXRhS2V5LFxuICAgICAgICAgIHR5cGU6IHRvb2x0aXBUeXBlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXy5pc05pbCh5QXhpcy5kYXRhS2V5KSA/IGl0ZW0ucHJvcHMubmFtZSA6IHlBeGlzLm5hbWUgfHwgeUF4aXMuZGF0YUtleSxcbiAgICAgICAgICB1bml0OiB5QXhpcy51bml0IHx8ICcnLFxuICAgICAgICAgIHZhbHVlOiB5LFxuICAgICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICAgIGRhdGFLZXk6IHlBeGlzRGF0YUtleSxcbiAgICAgICAgICB0eXBlOiB0b29sdGlwVHlwZSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGlmICh6ICE9PSAnLScpIHtcbiAgICAgICAgdG9vbHRpcFBheWxvYWQucHVzaCh7XG4gICAgICAgICAgbmFtZTogekF4aXMubmFtZSB8fCB6QXhpcy5kYXRhS2V5LFxuICAgICAgICAgIHVuaXQ6IHpBeGlzLnVuaXQgfHwgJycsXG4gICAgICAgICAgdmFsdWU6IHosXG4gICAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICAgICAgZGF0YUtleTogekF4aXNEYXRhS2V5LFxuICAgICAgICAgIHR5cGU6IHRvb2x0aXBUeXBlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN4ID0gZ2V0Q2F0ZUNvb3JkaW5hdGVPZkxpbmUoe1xuICAgICAgICBheGlzOiB4QXhpcyxcbiAgICAgICAgdGlja3M6IHhBeGlzVGlja3MsXG4gICAgICAgIGJhbmRTaXplOiB4QmFuZFNpemUsXG4gICAgICAgIGVudHJ5LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgZGF0YUtleTogeEF4aXNEYXRhS2V5LFxuICAgICAgfSk7XG4gICAgICBjb25zdCBjeSA9IGdldENhdGVDb29yZGluYXRlT2ZMaW5lKHtcbiAgICAgICAgYXhpczogeUF4aXMsXG4gICAgICAgIHRpY2tzOiB5QXhpc1RpY2tzLFxuICAgICAgICBiYW5kU2l6ZTogeUJhbmRTaXplLFxuICAgICAgICBlbnRyeSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGRhdGFLZXk6IHlBeGlzRGF0YUtleSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc2l6ZSA9IHogIT09ICctJyA/IHpBeGlzLnNjYWxlKHopIDogZGVmYXVsdFo7XG4gICAgICBjb25zdCByYWRpdXMgPSBNYXRoLnNxcnQoTWF0aC5tYXgoc2l6ZSwgMCkgLyBNYXRoLlBJKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZW50cnksXG4gICAgICAgIGN4LFxuICAgICAgICBjeSxcbiAgICAgICAgeDogY3ggLSByYWRpdXMsXG4gICAgICAgIHk6IGN5IC0gcmFkaXVzLFxuICAgICAgICB4QXhpcyxcbiAgICAgICAgeUF4aXMsXG4gICAgICAgIHpBeGlzLFxuICAgICAgICB3aWR0aDogMiAqIHJhZGl1cyxcbiAgICAgICAgaGVpZ2h0OiAyICogcmFkaXVzLFxuICAgICAgICBzaXplLFxuICAgICAgICBub2RlOiB7IHgsIHksIHogfSxcbiAgICAgICAgdG9vbHRpcFBheWxvYWQsXG4gICAgICAgIHRvb2x0aXBQb3NpdGlvbjogeyB4OiBjeCwgeTogY3kgfSxcbiAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICAgIC4uLihjZWxscyAmJiBjZWxsc1tpbmRleF0gJiYgY2VsbHNbaW5kZXhdLnByb3BzKSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnRzLFxuICAgICAgLi4ub2Zmc2V0LFxuICAgIH07XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlID0geyBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAobmV4dFByb3BzLmFuaW1hdGlvbklkICE9PSBwcmV2U3RhdGUucHJldkFuaW1hdGlvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2QW5pbWF0aW9uSWQ6IG5leHRQcm9wcy5hbmltYXRpb25JZCxcbiAgICAgICAgY3VyUG9pbnRzOiBuZXh0UHJvcHMucG9pbnRzLFxuICAgICAgICBwcmV2UG9pbnRzOiBwcmV2U3RhdGUuY3VyUG9pbnRzLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy5wb2ludHMgIT09IHByZXZTdGF0ZS5jdXJQb2ludHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1clBvaW50czogbmV4dFByb3BzLnBvaW50cyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBoYW5kbGVBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGlkID0gdW5pcXVlSWQoJ3JlY2hhcnRzLXNjYXR0ZXItJyk7XG5cbiAgc3RhdGljIHJlbmRlclN5bWJvbEl0ZW0ob3B0aW9uOiBQcm9wc1snYWN0aXZlU2hhcGUnXSB8IFByb3BzWydzaGFwZSddLCBwcm9wczogYW55KSB7XG4gICAgbGV0IHN5bWJvbDtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgICBzeW1ib2wgPSBSZWFjdC5jbG9uZUVsZW1lbnQob3B0aW9uLCBwcm9wcyk7XG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9uKSkge1xuICAgICAgc3ltYm9sID0gb3B0aW9uKHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBzeW1ib2wgPSA8U3ltYm9scyB7Li4ucHJvcHN9IHR5cGU9e29wdGlvbn0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfVxuXG4gIHJlbmRlclN5bWJvbHNTdGF0aWNhbGx5KHBvaW50czogU2NhdHRlclBvaW50SXRlbVtdKSB7XG4gICAgY29uc3QgeyBzaGFwZSwgYWN0aXZlU2hhcGUsIGFjdGl2ZUluZGV4IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGJhc2VQcm9wcyA9IGZpbHRlclByb3BzKHRoaXMucHJvcHMpO1xuXG4gICAgcmV0dXJuIHBvaW50cy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBwcm9wcyA9IHsga2V5OiBgc3ltYm9sLSR7aX1gLCAuLi5iYXNlUHJvcHMsIC4uLmVudHJ5IH07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMYXllclxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLXNjYXR0ZXItc3ltYm9sXCJcbiAgICAgICAgICB7Li4uYWRhcHRFdmVudHNPZkNoaWxkKHRoaXMucHJvcHMsIGVudHJ5LCBpKX1cbiAgICAgICAgICBrZXk9e2BzeW1ib2wtJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgID5cbiAgICAgICAgICB7U2NhdHRlci5yZW5kZXJTeW1ib2xJdGVtKGFjdGl2ZUluZGV4ID09PSBpID8gYWN0aXZlU2hhcGUgOiBzaGFwZSwgcHJvcHMpfVxuICAgICAgICA8L0xheWVyPlxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclN5bWJvbHNXaXRoQW5pbWF0aW9uKCkge1xuICAgIGNvbnN0IHsgcG9pbnRzLCBpc0FuaW1hdGlvbkFjdGl2ZSwgYW5pbWF0aW9uQmVnaW4sIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25FYXNpbmcsIGFuaW1hdGlvbklkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJldlBvaW50cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZVxuICAgICAgICBiZWdpbj17YW5pbWF0aW9uQmVnaW59XG4gICAgICAgIGR1cmF0aW9uPXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgaXNBY3RpdmU9e2lzQW5pbWF0aW9uQWN0aXZlfVxuICAgICAgICBlYXNpbmc9e2FuaW1hdGlvbkVhc2luZ31cbiAgICAgICAgZnJvbT17eyB0OiAwIH19XG4gICAgICAgIHRvPXt7IHQ6IDEgfX1cbiAgICAgICAga2V5PXtgcGllLSR7YW5pbWF0aW9uSWR9YH1cbiAgICAgICAgb25BbmltYXRpb25FbmQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uRW5kfVxuICAgICAgICBvbkFuaW1hdGlvblN0YXJ0PXt0aGlzLmhhbmRsZUFuaW1hdGlvblN0YXJ0fVxuICAgICAgPlxuICAgICAgICB7KHsgdCB9OiB7IHQ6IG51bWJlciB9KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RlcERhdGEgPSBwb2ludHMubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBwcmV2UG9pbnRzICYmIHByZXZQb2ludHNbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JDeCA9IGludGVycG9sYXRlTnVtYmVyKHByZXYuY3gsIGVudHJ5LmN4KTtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yQ3kgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LmN5LCBlbnRyeS5jeSk7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclNpemUgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnNpemUsIGVudHJ5LnNpemUpO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgY3g6IGludGVycG9sYXRvckN4KHQpLFxuICAgICAgICAgICAgICAgIGN5OiBpbnRlcnBvbGF0b3JDeSh0KSxcbiAgICAgICAgICAgICAgICBzaXplOiBpbnRlcnBvbGF0b3JTaXplKHQpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZU51bWJlcigwLCBlbnRyeS5zaXplKTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uZW50cnksIHNpemU6IGludGVycG9sYXRvcih0KSB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIDxMYXllcj57dGhpcy5yZW5kZXJTeW1ib2xzU3RhdGljYWxseShzdGVwRGF0YSl9PC9MYXllcj47XG4gICAgICAgIH19XG4gICAgICA8L0FuaW1hdGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclN5bWJvbHMoKSB7XG4gICAgY29uc3QgeyBwb2ludHMsIGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJldlBvaW50cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChpc0FuaW1hdGlvbkFjdGl2ZSAmJiBwb2ludHMgJiYgcG9pbnRzLmxlbmd0aCAmJiAoIXByZXZQb2ludHMgfHwgIV8uaXNFcXVhbChwcmV2UG9pbnRzLCBwb2ludHMpKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU3ltYm9sc1dpdGhBbmltYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJTeW1ib2xzU3RhdGljYWxseShwb2ludHMpO1xuICB9XG5cbiAgcmVuZGVyRXJyb3JCYXIoKSB7XG4gICAgY29uc3QgeyBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNBbmltYXRpb25BY3RpdmUgJiYgIXRoaXMuc3RhdGUuaXNBbmltYXRpb25GaW5pc2hlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBwb2ludHMsIHhBeGlzLCB5QXhpcywgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZXJyb3JCYXJJdGVtcyA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIEVycm9yQmFyLmRpc3BsYXlOYW1lKTtcblxuICAgIGlmICghZXJyb3JCYXJJdGVtcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF0YVBvaW50Rm9ybWF0dGVyWShkYXRhUG9pbnQ6IFNjYXR0ZXJQb2ludEl0ZW0sIGRhdGFLZXk6IFByb3BzWydkYXRhS2V5J10pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IGRhdGFQb2ludC5jeCxcbiAgICAgICAgeTogZGF0YVBvaW50LmN5LFxuICAgICAgICB2YWx1ZTogK2RhdGFQb2ludC5ub2RlLnksXG4gICAgICAgIGVycm9yVmFsOiBnZXRWYWx1ZUJ5RGF0YUtleShkYXRhUG9pbnQsIGRhdGFLZXkpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXRhUG9pbnRGb3JtYXR0ZXJYKGRhdGFQb2ludDogU2NhdHRlclBvaW50SXRlbSwgZGF0YUtleTogUHJvcHNbJ2RhdGFLZXknXSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogZGF0YVBvaW50LmN4LFxuICAgICAgICB5OiBkYXRhUG9pbnQuY3ksXG4gICAgICAgIHZhbHVlOiArZGF0YVBvaW50Lm5vZGUueCxcbiAgICAgICAgZXJyb3JWYWw6IGdldFZhbHVlQnlEYXRhS2V5KGRhdGFQb2ludCwgZGF0YUtleSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBlcnJvckJhckl0ZW1zLm1hcCgoaXRlbTogUmVhY3RFbGVtZW50PEVycm9yQmFyUHJvcHM+LCBpOiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHsgZGlyZWN0aW9uIH0gPSBpdGVtLnByb3BzO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGl0ZW0sIHtcbiAgICAgICAga2V5OiBpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICBkYXRhOiBwb2ludHMsXG4gICAgICAgIHhBeGlzLFxuICAgICAgICB5QXhpcyxcbiAgICAgICAgbGF5b3V0OiBkaXJlY3Rpb24gPT09ICd4JyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIGRhdGFQb2ludEZvcm1hdHRlcjogZGlyZWN0aW9uID09PSAneCcgPyBkYXRhUG9pbnRGb3JtYXR0ZXJYIDogZGF0YVBvaW50Rm9ybWF0dGVyWSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyTGluZSgpIHtcbiAgICBjb25zdCB7IHBvaW50cywgbGluZSwgbGluZVR5cGUsIGxpbmVKb2ludFR5cGUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc2NhdHRlclByb3BzID0gZmlsdGVyUHJvcHModGhpcy5wcm9wcyk7XG4gICAgY29uc3QgY3VzdG9tTGluZVByb3BzID0gZmlsdGVyUHJvcHMobGluZSk7XG4gICAgbGV0IGxpbmVQb2ludHMsIGxpbmVJdGVtO1xuXG4gICAgaWYgKGxpbmVUeXBlID09PSAnam9pbnQnKSB7XG4gICAgICBsaW5lUG9pbnRzID0gcG9pbnRzLm1hcChlbnRyeSA9PiAoeyB4OiBlbnRyeS5jeCwgeTogZW50cnkuY3kgfSkpO1xuICAgIH0gZWxzZSBpZiAobGluZVR5cGUgPT09ICdmaXR0aW5nJykge1xuICAgICAgY29uc3QgeyB4bWluLCB4bWF4LCBhLCBiIH0gPSBnZXRMaW5lYXJSZWdyZXNzaW9uKHBvaW50cyk7XG4gICAgICBjb25zdCBsaW5lYXJFeHAgPSAoeDogbnVtYmVyKSA9PiBhICogeCArIGI7XG4gICAgICBsaW5lUG9pbnRzID0gW1xuICAgICAgICB7IHg6IHhtaW4sIHk6IGxpbmVhckV4cCh4bWluKSB9LFxuICAgICAgICB7IHg6IHhtYXgsIHk6IGxpbmVhckV4cCh4bWF4KSB9LFxuICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgbGluZVByb3BzID0ge1xuICAgICAgLi4uc2NhdHRlclByb3BzLFxuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgc3Ryb2tlOiBzY2F0dGVyUHJvcHMgJiYgc2NhdHRlclByb3BzLmZpbGwsXG4gICAgICAuLi5jdXN0b21MaW5lUHJvcHMsXG4gICAgICBwb2ludHM6IGxpbmVQb2ludHMsXG4gICAgfTtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChsaW5lKSkge1xuICAgICAgbGluZUl0ZW0gPSBSZWFjdC5jbG9uZUVsZW1lbnQobGluZSBhcyBhbnksIGxpbmVQcm9wcyk7XG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24obGluZSkpIHtcbiAgICAgIGxpbmVJdGVtID0gbGluZShsaW5lUHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lSXRlbSA9IDxDdXJ2ZSB7Li4ubGluZVByb3BzfSB0eXBlPXtsaW5lSm9pbnRUeXBlfSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLXNjYXR0ZXItbGluZVwiIGtleT1cInJlY2hhcnRzLXNjYXR0ZXItbGluZVwiPlxuICAgICAgICB7bGluZUl0ZW19XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoaWRlLCBwb2ludHMsIGxpbmUsIGNsYXNzTmFtZSwgeEF4aXMsIHlBeGlzLCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIGlkLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaGlkZSB8fCAhcG9pbnRzIHx8ICFwb2ludHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBpc0FuaW1hdGlvbkZpbmlzaGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGxheWVyQ2xhc3MgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy1zY2F0dGVyJywgY2xhc3NOYW1lKTtcbiAgICBjb25zdCBuZWVkQ2xpcCA9ICh4QXhpcyAmJiB4QXhpcy5hbGxvd0RhdGFPdmVyZmxvdykgfHwgKHlBeGlzICYmIHlBeGlzLmFsbG93RGF0YU92ZXJmbG93KTtcbiAgICBjb25zdCBjbGlwUGF0aElkID0gXy5pc05pbChpZCkgPyB0aGlzLmlkIDogaWQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT17bGF5ZXJDbGFzc30gY2xpcFBhdGg9e25lZWRDbGlwID8gYHVybCgjY2xpcFBhdGgtJHtjbGlwUGF0aElkfSlgIDogbnVsbH0+XG4gICAgICAgIHtuZWVkQ2xpcCA/IChcbiAgICAgICAgICA8ZGVmcz5cbiAgICAgICAgICAgIDxjbGlwUGF0aCBpZD17YGNsaXBQYXRoLSR7Y2xpcFBhdGhJZH1gfT5cbiAgICAgICAgICAgICAgPHJlY3QgeD17bGVmdH0geT17dG9wfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuICAgICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgICA8L2RlZnM+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7bGluZSAmJiB0aGlzLnJlbmRlckxpbmUoKX1cbiAgICAgICAge3RoaXMucmVuZGVyRXJyb3JCYXIoKX1cbiAgICAgICAgPExheWVyIGtleT1cInJlY2hhcnRzLXNjYXR0ZXItc3ltYm9sc1wiPnt0aGlzLnJlbmRlclN5bWJvbHMoKX08L0xheWVyPlxuICAgICAgICB7KCFpc0FuaW1hdGlvbkFjdGl2ZSB8fCBpc0FuaW1hdGlvbkZpbmlzaGVkKSAmJiBMYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50KHRoaXMucHJvcHMsIHBvaW50cyl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsImNvbnN0IHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHthYnMsIGFjb3MsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgbWF4LCBtaW4sIHBpLCBzaW4sIHNxcnQsIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLmlubmVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLm91dGVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgIHgzMiA9IHgzIC0geDIsIHkzMiA9IHkzIC0geTIsXG4gICAgICB0ID0geTMyICogeDEwIC0geDMyICogeTEwO1xuICBpZiAodCAqIHQgPCBlcHNpbG9uKSByZXR1cm47XG4gIHQgPSAoeDMyICogKHkwIC0geTIpIC0geTMyICogKHgwIC0geDIpKSAvIHQ7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgIG94ID0gbG8gKiB5MDEsXG4gICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICB5MTEgPSB5MCArIG95LFxuICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXG4gICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgIGR5ID0geTEwIC0geTExLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcbiAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIHNxcnQobWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQoMCksXG4gICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGFyY0VuZEFuZ2xlLFxuICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICByLFxuICAgICAgICByMCA9ICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBkYSA9IGFicyhhMSAtIGEwKSxcbiAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAvLyBJcyBpdCBhIHBvaW50P1xuICAgIGlmICghKHIxID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSAtIGVwc2lsb24pIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIxICogY29zKGEwKSwgcjEgKiBzaW4oYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogY29zKGExKSwgcjAgKiBzaW4oYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24pICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4oYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICB0MCxcbiAgICAgICAgICB0MTtcblxuICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICBpZiAocnAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIHNpbihhcCkpLFxuICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBzaW4oYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24pIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIGlmICgoZGExIC09IHAxICogMikgPiBlcHNpbG9uKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbihhMDEpLFxuICAgICAgICAgIHgxMCA9IHIwICogY29zKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4oYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgeDExID0gcjEgKiBjb3MoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyhhMDApLFxuICAgICAgICAgICAgeTAwID0gcjAgKiBzaW4oYTAwKSxcbiAgICAgICAgICAgIG9jO1xuXG4gICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLlxuICAgICAgICBpZiAoZGEgPCBwaSAmJiAob2MgPSBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApKSkge1xuICAgICAgICAgIHZhciBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBrYyA9IDEgLyBzaW4oYWNvcygoYXggKiBieCArIGF5ICogYnkpIC8gKHNxcnQoYXggKiBheCArIGF5ICogYXkpICogc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgICAgICBsYyA9IHNxcnQob2NbMF0gKiBvY1swXSArIG9jWzFdICogb2NbMV0pO1xuICAgICAgICAgIHJjMCA9IG1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IG1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoZSBzZWN0b3IgY29sbGFwc2VkIHRvIGEgbGluZT9cbiAgICAgIGlmICghKGRhMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgb3V0ZXIgcmluZyBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMSA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgb3V0ZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSksIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMDEsIGExMSwgIWN3KTtcblxuICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cbiAgICAgIC8vIE9yIHBlcmhhcHMgaXTigJlzIGFuIGFubnVsYXIgc2VjdG9yIGNvbGxhcHNlZCBkdWUgdG8gcGFkZGluZz9cbiAgICAgIGlmICghKHIwID4gZXBzaWxvbikgfHwgIShkYTAgPiBlcHNpbG9uKSkgY29udGV4dC5saW5lVG8oeDEwLCB5MTApO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MTAsIHkxMCwgeDExLCB5MTEsIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubGluZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksIGN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMCwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIGlubmVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExMCwgYTAwLCBjdyk7XG4gICAgfVxuXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgYXJjLmNlbnRyb2lkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIgPSAoK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyLFxuICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkgLyAyO1xuICAgIHJldHVybiBbY29zKGEpICogciwgc2luKGEpICogcl07XG4gIH07XG5cbiAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlubmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBpbm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3V0ZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBjb3JuZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRSYWRpdXMgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgYXJjLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIGFyYykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmM7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgeCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogKHggPT09IHVuZGVmaW5lZCkgPyBwb2ludFggOiBjb25zdGFudCh4KTtcbiAgeSA9IHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5IDogKHkgPT09IHVuZGVmaW5lZCkgPyBwb2ludFkgOiBjb25zdGFudCh5KTtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IChkYXRhID0gYXJyYXkoZGF0YSkpLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmUuanNcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4MCwgeTAsIHkxKSB7XG4gIHZhciB4MSA9IG51bGwsXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIHgwID0gdHlwZW9mIHgwID09PSBcImZ1bmN0aW9uXCIgPyB4MCA6ICh4MCA9PT0gdW5kZWZpbmVkKSA/IHBvaW50WCA6IGNvbnN0YW50KCt4MCk7XG4gIHkwID0gdHlwZW9mIHkwID09PSBcImZ1bmN0aW9uXCIgPyB5MCA6ICh5MCA9PT0gdW5kZWZpbmVkKSA/IGNvbnN0YW50KDApIDogY29uc3RhbnQoK3kwKTtcbiAgeTEgPSB0eXBlb2YgeTEgPT09IFwiZnVuY3Rpb25cIiA/IHkxIDogKHkxID09PSB1bmRlZmluZWQpID8gcG9pbnRZIDogY29uc3RhbnQoK3kxKTtcblxuICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbiA9IChkYXRhID0gYXJyYXkoZGF0YSkpLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICByZXR1cm4gZDtcbn1cbiIsImltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSAoZGF0YSA9IGFycmF5KGRhdGEpKS5sZW5ndGgsXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIHN1bSA9IDAsXG4gICAgICAgIGluZGV4ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhcmNzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhMCA9ICtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGRhID0gTWF0aC5taW4odGF1LCBNYXRoLm1heCgtdGF1LCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcbiAgICAgICAgYTEsXG4gICAgICAgIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXG4gICAgICAgIHY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHYgPSBhcmNzW2luZGV4W2ldID0gaV0gPSArdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSkpID4gMCkge1xuICAgICAgICBzdW0gKz0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnRWYWx1ZXMoYXJjc1tpXSwgYXJjc1tqXSk7IH0pO1xuICAgIGVsc2UgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pOyB9KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgIGZvciAoaSA9IDAsIGsgPSBzdW0gPyAoZGEgLSBuICogcGEpIC8gc3VtIDogMDsgaSA8IG47ICsraSwgYTAgPSBhMSkge1xuICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcbiAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJjcztcbiAgfVxuXG4gIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogdmFsdWU7XG4gIH07XG5cbiAgcGllLnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgfTtcblxuICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0ID0gXywgc29ydFZhbHVlcyA9IG51bGwsIHBpZSkgOiBzb3J0O1xuICB9O1xuXG4gIHBpZS5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIHJldHVybiBwaWU7XG59XG4iLCJpbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vbGluZWFyLmpzXCI7XG5cbmV4cG9ydCB2YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbmZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xufVxuXG5SYWRpYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKGEsIHIpIHtcbiAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSYWRpYWwoY3VydmUoY29udGV4dCkpO1xuICB9XG5cbiAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gIHJldHVybiByYWRpYWw7XG59XG4iLCJpbXBvcnQgY3VydmVSYWRpYWwsIHtjdXJ2ZVJhZGlhbExpbmVhcn0gZnJvbSBcIi4vY3VydmUvcmFkaWFsLmpzXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lUmFkaWFsKGwpIHtcbiAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuXG4gIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbGluZVJhZGlhbChsaW5lKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpKTtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWwuanNcIjtcbmltcG9ydCBhcmVhIGZyb20gXCIuL2FyZWEuanNcIjtcbmltcG9ydCB7bGluZVJhZGlhbH0gZnJvbSBcIi4vbGluZVJhZGlhbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBhcmVhKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxuICAgICAgYyA9IGEuY3VydmUsXG4gICAgICB4MCA9IGEubGluZVgwLFxuICAgICAgeDEgPSBhLmxpbmVYMSxcbiAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICB5MSA9IGEubGluZVkxO1xuXG4gIGEuYW5nbGUgPSBhLngsIGRlbGV0ZSBhLng7XG4gIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICBhLmVuZEFuZ2xlID0gYS54MSwgZGVsZXRlIGEueDE7XG4gIGEucmFkaXVzID0gYS55LCBkZWxldGUgYS55O1xuICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gIGEub3V0ZXJSYWRpdXMgPSBhLnkxLCBkZWxldGUgYS55MTtcbiAgYS5saW5lU3RhcnRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MCgpKTsgfSwgZGVsZXRlIGEubGluZVgwO1xuICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICBhLmxpbmVJbm5lclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MCgpKTsgfSwgZGVsZXRlIGEubGluZVkwO1xuICBhLmxpbmVPdXRlclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MSgpKTsgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbKHkgPSAreSkgKiBNYXRoLmNvcyh4IC09IE1hdGguUEkgLyAyKSwgeSAqIE1hdGguc2luKHgpXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuLi9wb2ludC5qc1wiO1xuaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0hvcml6b250YWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlVmVydGljYWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyksXG4gICAgdGFuMzBfMiA9IHRhbjMwICogMjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGguanNcIjtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgIHkgPSBreSAqIHI7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICB2YXIgYSA9IHRhdSAqIGkgLyA1LFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHcgPSBNYXRoLnNxcnQoc2l6ZSksXG4gICAgICAgIHggPSAtdyAvIDI7XG4gICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICB9XG59O1xuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY2lyY2xlIGZyb20gXCIuL3N5bWJvbC9jaXJjbGUuanNcIjtcbmltcG9ydCBjcm9zcyBmcm9tIFwiLi9zeW1ib2wvY3Jvc3MuanNcIjtcbmltcG9ydCBkaWFtb25kIGZyb20gXCIuL3N5bWJvbC9kaWFtb25kLmpzXCI7XG5pbXBvcnQgc3RhciBmcm9tIFwiLi9zeW1ib2wvc3Rhci5qc1wiO1xuaW1wb3J0IHNxdWFyZSBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlLmpzXCI7XG5pbXBvcnQgdHJpYW5nbGUgZnJvbSBcIi4vc3ltYm9sL3RyaWFuZ2xlLmpzXCI7XG5pbXBvcnQgd3llIGZyb20gXCIuL3N5bWJvbC93eWUuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5leHBvcnQgdmFyIHN5bWJvbHMgPSBbXG4gIGNpcmNsZSxcbiAgY3Jvc3MsXG4gIGRpYW1vbmQsXG4gIHNxdWFyZSxcbiAgc3RhcixcbiAgdHJpYW5nbGUsXG4gIHd5ZVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgc2l6ZSkge1xuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gXCJmdW5jdGlvblwiID8gdHlwZSA6IGNvbnN0YW50KHR5cGUgfHwgY2lyY2xlKTtcbiAgc2l6ZSA9IHR5cGVvZiBzaXplID09PSBcImZ1bmN0aW9uXCIgPyBzaXplIDogY29uc3RhbnQoc2l6ZSA9PT0gdW5kZWZpbmVkID8gNjQgOiArc2l6ZSk7XG5cbiAgZnVuY3Rpb24gc3ltYm9sKCkge1xuICAgIHZhciBidWZmZXI7XG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuICAgIHR5cGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5kcmF3KGNvbnRleHQsICtzaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgc3ltYm9sLnR5cGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHlwZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIHN5bWJvbCkgOiB0eXBlO1xuICB9O1xuXG4gIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNpemUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3ltYm9sKSA6IHNpemU7XG4gIH07XG5cbiAgc3ltYm9sLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfLCBzeW1ib2wpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gc3ltYm9sO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7fVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICgyICogdGhhdC5feDAgKyB0aGF0Ll94MSkgLyAzLFxuICAgICgyICogdGhhdC5feTAgKyB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDIgKiB0aGF0Ll94MSkgLyAzLFxuICAgICh0aGF0Ll95MCArIDIgKiB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDQgKiB0aGF0Ll94MSArIHgpIC8gNixcbiAgICAodGhhdC5feTAgKyA0ICogdGhhdC5feTEgKyB5KSAvIDZcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJhc2lzKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyAvLyBwcm9jZWVkXG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fY29udGV4dC5saW5lVG8oKDUgKiB0aGlzLl94MCArIHRoaXMuX3gxKSAvIDYsICg1ICogdGhpcy5feTAgKyB0aGlzLl95MSkgLyA2KTsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXMoY29udGV4dCk7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZnVuY3Rpb24gQmFzaXNDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbygodGhpcy5feDMgKyAyICogdGhpcy5feDIpIC8gMywgKHRoaXMuX3kzICsgMiAqIHRoaXMuX3kyKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gyID0geCwgdGhpcy5feTIgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc0Nsb3NlZChjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmZ1bmN0aW9uIEJhc2lzT3Blbihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc09wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzT3Blbihjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7QmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmZ1bmN0aW9uIEJ1bmRsZShjb250ZXh0LCBiZXRhKSB7XG4gIHRoaXMuX2Jhc2lzID0gbmV3IEJhc2lzKGNvbnRleHQpO1xuICB0aGlzLl9iZXRhID0gYmV0YTtcbn1cblxuQnVuZGxlLnByb3RvdHlwZSA9IHtcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBqID0geC5sZW5ndGggLSAxO1xuXG4gICAgaWYgKGogPiAwKSB7XG4gICAgICB2YXIgeDAgPSB4WzBdLFxuICAgICAgICAgIHkwID0geVswXSxcbiAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICBkeSA9IHlbal0gLSB5MCxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgdDtcblxuICAgICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICAgIHQgPSBpIC8gajtcbiAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQoXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHhbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHgwICsgdCAqIGR4KSxcbiAgICAgICAgICB0aGlzLl9iZXRhICogeVtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeTAgKyB0ICogZHkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYmV0YSkge1xuXG4gIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGJldGEgPT09IDEgPyBuZXcgQmFzaXMoY29udGV4dCkgOiBuZXcgQnVuZGxlKGNvbnRleHQsIGJldGEpO1xuICB9XG5cbiAgYnVuZGxlLmJldGEgPSBmdW5jdGlvbihiZXRhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gIH07XG5cbiAgcmV0dXJuIGJ1bmRsZTtcbn0pKDAuODUpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICB0aGF0Ll95MSArIHRoYXQuX2sgKiAodGhhdC5feTIgLSB0aGF0Ll95MCksXG4gICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXG4gICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgdGhhdC5feDIsXG4gICAgdGhhdC5feTJcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWwuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbE9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQge2Vwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge0NhcmRpbmFsfSBmcm9tIFwiLi9jYXJkaW5hbC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB2YXIgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICB4MiA9IHRoYXQuX3gyLFxuICAgICAgeTIgPSB0aGF0Ll95MjtcblxuICBpZiAodGhhdC5fbDAxX2EgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGEgPSAyICogdGhhdC5fbDAxXzJhICsgMyAqIHRoYXQuX2wwMV9hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDEgPSAoeDEgKiBhIC0gdGhhdC5feDAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll94MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICAgIHkxID0gKHkxICogYSAtIHRoYXQuX3kwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feTIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgfVxuXG4gIGlmICh0aGF0Ll9sMjNfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbSA9IDMgKiB0aGF0Ll9sMjNfYSAqICh0aGF0Ll9sMjNfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MiA9ICh4MiAqIGIgKyB0aGF0Ll94MSAqIHRoYXQuX2wyM18yYSAtIHggKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgfVxuXG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MSwgeTEsIHgyLCB5MiwgdGhhdC5feDIsIHRoYXQuX3kyKTtcbn1cblxuZnVuY3Rpb24gQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbS5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCB7Q2FyZGluYWxDbG9zZWR9IGZyb20gXCIuL2NhcmRpbmFsQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbS5qc1wiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCB7Q2FyZGluYWxPcGVufSBmcm9tIFwiLi9jYXJkaW5hbE9wZW4uanNcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhdG11bGxSb20uanNcIjtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21PcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxuZnVuY3Rpb24gTGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhckNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhckNsb3NlZChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbn1cblxuLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgdmFyIGggPSB0aGF0Ll94MSAtIHRoYXQuX3gwO1xuICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG59XG5cbi8vIEFjY29yZGluZyB0byBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19IZXJtaXRlX3NwbGluZSNSZXByZXNlbnRhdGlvbnNcbi8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuZnVuY3Rpb24gcG9pbnQodGhhdCwgdDAsIHQxKSB7XG4gIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgeTAgPSB0aGF0Ll95MCxcbiAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgZHggPSAoeDEgLSB4MCkgLyAzO1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5Nb25vdG9uZVgucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxuICAgIHRoaXMuX3QwID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgdDEgPSBOYU47XG5cbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQodGhpcywgc2xvcGUyKHRoaXMsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKSwgdDEpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgdGhpcy5fdDAgPSB0MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xufVxuXG4oTW9ub3RvbmVZLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9ub3RvbmVYLnByb3RvdHlwZSkpLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG59O1xuXG5mdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5SZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIE5hdHVyYWwoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTmF0dXJhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgaWYgKG4pIHtcbiAgICAgIHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzBdLCB5WzBdKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHhbMF0sIHlbMF0pO1xuICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeFsxXSwgeVsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgcHkgPSBjb250cm9sUG9pbnRzKHkpO1xuICAgICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMTsgaTEgPCBuOyArK2kwLCArK2kxKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIG4gPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTIvYmV6aWVyLXNwbGluZXMvIGZvciBkZXJpdmF0aW9uLlxuZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XG4gIHZhciBpLFxuICAgICAgbiA9IHgubGVuZ3RoIC0gMSxcbiAgICAgIG0sXG4gICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkobik7XG4gIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyArK2kpIGFbaV0gPSAxLCBiW2ldID0gNCwgcltpXSA9IDQgKiB4W2ldICsgMiAqIHhbaSArIDFdO1xuICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICBhW24gLSAxXSA9IHJbbiAtIDFdIC8gYltuIC0gMV07XG4gIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcbiAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgKytpKSBiW2ldID0gMiAqIHhbaSArIDFdIC0gYVtpICsgMV07XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl90ID0gdDtcbn1cblxuU3RlcC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoMCA8IHRoaXMuX3QgJiYgdGhpcy5fdCA8IDEgJiYgdGhpcy5fcG9pbnQgPT09IDIpIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5feCA9IHgsIHRoaXMuX3kgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBBZnRlcihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDEpKSByZXR1cm47XG4gIGZvciAodmFyIGkgPSAxLCBqLCBzMCwgczEgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgczAgPSBzMSwgczEgPSBzZXJpZXNbb3JkZXJbaV1dO1xuICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIHMxW2pdWzFdICs9IHMxW2pdWzBdID0gaXNOYU4oczBbal1bMV0pID8gczBbal1bMF0gOiBzMFtqXVsxXTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsIG8gPSBuZXcgQXJyYXkobik7XG4gIHdoaWxlICgtLW4gPj0gMCkgb1tuXSA9IG47XG4gIHJldHVybiBvO1xufVxuIiwiaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBvZmZzZXROb25lIGZyb20gXCIuL29mZnNldC9ub25lLmpzXCI7XG5pbXBvcnQgb3JkZXJOb25lIGZyb20gXCIuL29yZGVyL25vbmUuanNcIjtcblxuZnVuY3Rpb24gc3RhY2tWYWx1ZShkLCBrZXkpIHtcbiAgcmV0dXJuIGRba2V5XTtcbn1cblxuZnVuY3Rpb24gc3RhY2tTZXJpZXMoa2V5KSB7XG4gIGNvbnN0IHNlcmllcyA9IFtdO1xuICBzZXJpZXMua2V5ID0ga2V5O1xuICByZXR1cm4gc2VyaWVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBjb25zdGFudChbXSksXG4gICAgICBvcmRlciA9IG9yZGVyTm9uZSxcbiAgICAgIG9mZnNldCA9IG9mZnNldE5vbmUsXG4gICAgICB2YWx1ZSA9IHN0YWNrVmFsdWU7XG5cbiAgZnVuY3Rpb24gc3RhY2soZGF0YSkge1xuICAgIHZhciBzeiA9IEFycmF5LmZyb20oa2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzdGFja1NlcmllcyksXG4gICAgICAgIGksIG4gPSBzei5sZW5ndGgsIGogPSAtMSxcbiAgICAgICAgb3o7XG5cbiAgICBmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuICAgICAgZm9yIChpID0gMCwgKytqOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIChzeltpXVtqXSA9IFswLCArdmFsdWUoZCwgc3pbaV0ua2V5LCBqLCBkYXRhKV0pLmRhdGEgPSBkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gYXJyYXkob3JkZXIoc3opKTsgaSA8IG47ICsraSkge1xuICAgICAgc3pbb3pbaV1dLmluZGV4ID0gaTtcbiAgICB9XG5cbiAgICBvZmZzZXQoc3osIG96KTtcbiAgICByZXR1cm4gc3o7XG4gIH1cblxuICBzdGFjay5rZXlzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGtleXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KEFycmF5LmZyb20oXykpLCBzdGFjaykgOiBrZXlzO1xuICB9O1xuXG4gIHN0YWNrLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHN0YWNrKSA6IHZhbHVlO1xuICB9O1xuXG4gIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9yZGVyID0gXyA9PSBudWxsID8gb3JkZXJOb25lIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChBcnJheS5mcm9tKF8pKSwgc3RhY2spIDogb3JkZXI7XG4gIH07XG5cbiAgc3RhY2sub2Zmc2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9IF8gPT0gbnVsbCA/IG9mZnNldE5vbmUgOiBfLCBzdGFjaykgOiBvZmZzZXQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0YWNrO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpLCBuLCBqID0gMCwgbSA9IHNlcmllc1swXS5sZW5ndGgsIHk7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHkgPSBpID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBpZiAoeSkgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc2VyaWVzW2ldW2pdWzFdIC89IHk7XG4gIH1cbiAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIGogPSAwLCBkLCBkeSwgeXAsIHluLCBuLCBtID0gc2VyaWVzW29yZGVyWzBdXS5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHlwID0geW4gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChkeSA9IChkID0gc2VyaWVzW29yZGVyW2ldXVtqXSlbMV0gLSBkWzBdKSA+IDApIHtcbiAgICAgICAgZFswXSA9IHlwLCBkWzFdID0geXAgKz0gZHk7XG4gICAgICB9IGVsc2UgaWYgKGR5IDwgMCkge1xuICAgICAgICBkWzFdID0geW4sIGRbMF0gPSB5biArPSBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbMF0gPSAwLCBkWzFdID0gZHk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGogPSAwLCBzMCA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMC5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgeSA9IDA7IGkgPCBuOyArK2kpIHkgKz0gc2VyaWVzW2ldW2pdWzFdIHx8IDA7XG4gICAgczBbal1bMV0gKz0gczBbal1bMF0gPSAteSAvIDI7XG4gIH1cbiAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkgfHwgISgobSA9IChzMCA9IHNlcmllc1tvcmRlclswXV0pLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciB5ID0gMCwgaiA9IDEsIHMwLCBtLCBuOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHMxID0gMCwgczIgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgc2kgPSBzZXJpZXNbb3JkZXJbaV1dLFxuICAgICAgICAgIHNpajAgPSBzaVtqXVsxXSB8fCAwLFxuICAgICAgICAgIHNpajEgPSBzaVtqIC0gMV1bMV0gfHwgMCxcbiAgICAgICAgICBzMyA9IChzaWowIC0gc2lqMSkgLyAyO1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBpOyArK2spIHtcbiAgICAgICAgdmFyIHNrID0gc2VyaWVzW29yZGVyW2tdXSxcbiAgICAgICAgICAgIHNrajAgPSBza1tqXVsxXSB8fCAwLFxuICAgICAgICAgICAgc2tqMSA9IHNrW2ogLSAxXVsxXSB8fCAwO1xuICAgICAgICBzMyArPSBza2owIC0gc2tqMTtcbiAgICAgIH1cbiAgICAgIHMxICs9IHNpajAsIHMyICs9IHMzICogc2lqMDtcbiAgICB9XG4gICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgaWYgKHMxKSB5IC09IHMyIC8gczE7XG4gIH1cbiAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgcGVha3MgPSBzZXJpZXMubWFwKHBlYWspO1xuICByZXR1cm4gbm9uZShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gcGVha3NbYV0gLSBwZWFrc1tiXTsgfSk7XG59XG5cbmZ1bmN0aW9uIHBlYWsoc2VyaWVzKSB7XG4gIHZhciBpID0gLTEsIGogPSAwLCBuID0gc2VyaWVzLmxlbmd0aCwgdmksIHZqID0gLUluZmluaXR5O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKCh2aSA9ICtzZXJpZXNbaV1bMV0pID4gdmopIHZqID0gdmksIGogPSBpO1xuICByZXR1cm4gajtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBzdW1zID0gc2VyaWVzLm1hcChzdW0pO1xuICByZXR1cm4gbm9uZShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1thXSAtIHN1bXNbYl07IH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VtKHNlcmllcykge1xuICB2YXIgcyA9IDAsIGkgPSAtMSwgbiA9IHNlcmllcy5sZW5ndGgsIHY7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgcmV0dXJuIHM7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgcmV0dXJuIGFzY2VuZGluZyhzZXJpZXMpLnJldmVyc2UoKTtcbn1cbiIsImltcG9ydCBhcHBlYXJhbmNlIGZyb20gXCIuL2FwcGVhcmFuY2UuanNcIjtcbmltcG9ydCB7c3VtfSBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCxcbiAgICAgIGksXG4gICAgICBqLFxuICAgICAgc3VtcyA9IHNlcmllcy5tYXAoc3VtKSxcbiAgICAgIG9yZGVyID0gYXBwZWFyYW5jZShzZXJpZXMpLFxuICAgICAgdG9wID0gMCxcbiAgICAgIGJvdHRvbSA9IDAsXG4gICAgICB0b3BzID0gW10sXG4gICAgICBib3R0b21zID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGogPSBvcmRlcltpXTtcbiAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgIHRvcHMucHVzaChqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICBib3R0b21zLnB1c2goaik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBub25lKHNlcmllcykucmV2ZXJzZSgpO1xufVxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc051bWJlcigzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTnVtYmVyO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkVYSVRJTkcgPSBleHBvcnRzLkVOVEVSRUQgPSBleHBvcnRzLkVOVEVSSU5HID0gZXhwb3J0cy5FWElURUQgPSBleHBvcnRzLlVOTU9VTlRFRCA9IHZvaWQgMDtcblxudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoXCIuL3V0aWxzL1Byb3BUeXBlc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnRzLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcbnZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydHMuRVhJVEVEID0gRVhJVEVEO1xudmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydHMuRU5URVJJTkcgPSBFTlRFUklORztcbnZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0cy5FTlRFUkVEID0gRU5URVJFRDtcbnZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxuZXhwb3J0cy5FWElUSU5HID0gRVhJVElORztcblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQudHJhbnNpdGlvbkdyb3VwOyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDogbnVsbCAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuXG4gICAgfTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAgPyB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwLmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFTlRFUklOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KG5vZGUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG5vZGUpO1xuXG4gICAgICBfdGhpczMub25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXRzLmV4aXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciA9IHRpbWVvdXQgPT0gbnVsbCAmJiAhdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcjtcblxuICAgIGlmICghbm9kZSB8fCBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCJdKTsgLy8gZmlsdGVyIHByb3BzIGZvciBUcmFuc3RpdGlvblxuXG5cbiAgICBkZWxldGUgY2hpbGRQcm9wcy5pbjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5tb3VudE9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudW5tb3VudE9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy50aW1lb3V0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFkZEVuZExpc3RlbmVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyZWQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRlZDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb24uY29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5UcmFuc2l0aW9uLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IGZ1bmN0aW9uIHRyYW5zaXRpb25Hcm91cCgpIHt9XG59O1xuVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgLCBgJ3VubW91bnRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gX1Byb3BUeXBlcy50aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gKipOb3RlOioqIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQgaXMgY2xlYXJlciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuXG59IDoge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSAwO1xuVHJhbnNpdGlvbi5FWElURUQgPSAxO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IDI7XG5UcmFuc2l0aW9uLkVOVEVSRUQgPSAzO1xuVHJhbnNpdGlvbi5FWElUSU5HID0gNDtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKFRyYW5zaXRpb24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICBpZiAoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICAvLyBVc2UgdGhlIHNldFN0YXRlKCkgdXBkYXRlciB0byBlbnN1cmUgc3RhdGUgaXNuJ3Qgc3RhbGUgaW4gY2VydGFpbiBlZGdlIGNhc2VzLlxuICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlIDogbnVsbDtcbiAgfVxuICAvLyBCaW5kaW5nIFwidGhpc1wiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LlxuICB0aGlzLnNldFN0YXRlKHVwZGF0ZXIuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3QgPSB0aGlzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLnByb3BzID0gcHJldlByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBwcmV2U3RhdGU7XG4gIH1cbn1cblxuLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC5cbi8vIEFkZCBhIGZsYWcgdG8gc3VwcHJlc3MgdGhlc2Ugd2FybmluZ3MgZm9yIHRoaXMgc3BlY2lhbCBjYXNlLlxuY29tcG9uZW50V2lsbE1vdW50Ll9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxVcGRhdGUuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgfVxuXG4gIGlmIChcbiAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIC8vIElmIG5ldyBjb21wb25lbnQgQVBJcyBhcmUgZGVmaW5lZCwgXCJ1bnNhZmVcIiBsaWZlY3ljbGVzIHdvbid0IGJlIGNhbGxlZC5cbiAgLy8gRXJyb3IgaWYgYW55IG9mIHRoZXNlIGxpZmVjeWNsZXMgYXJlIHByZXNlbnQsXG4gIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuXG4gIHZhciBmb3VuZFdpbGxNb3VudE5hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH1cbiAgaWYgKFxuICAgIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsXG4gICkge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xuICAgIHZhciBuZXdBcGlOYW1lID1cbiAgICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJ1xuICAgICAgICA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgIHRocm93IEVycm9yKFxuICAgICAgJ1Vuc2FmZSBsZWdhY3kgbGlmZWN5Y2xlcyB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgbmV3IGNvbXBvbmVudCBBUElzLlxcblxcbicgK1xuICAgICAgICBjb21wb25lbnROYW1lICtcbiAgICAgICAgJyB1c2VzICcgK1xuICAgICAgICBuZXdBcGlOYW1lICtcbiAgICAgICAgJyBidXQgYWxzbyBjb250YWlucyB0aGUgZm9sbG93aW5nIGxlZ2FjeSBsaWZlY3ljbGVzOicgK1xuICAgICAgICAoZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsXG4gICAgICAgICAgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZVxuICAgICAgICAgIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArXG4gICAgICAgICdcXG5cXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcydcbiAgICApO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXTSBhbmQgY1dSUCB0byBpbnZva2UgdGhlIG5ldyBzdGF0aWMgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGVzZSBsaWZlY3ljbGVzIGlmIGdEU0ZQIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGNvbXBvbmVudFdpbGxNb3VudDtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuXG4gIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoYXQgbGlmZWN5Y2xlIGlmIGdTQlUgZXhpc3RzLlxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTtcblxuICAgIHZhciBjb21wb25lbnREaWRVcGRhdGUgPSBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsKFxuICAgICAgcHJldlByb3BzLFxuICAgICAgcHJldlN0YXRlLFxuICAgICAgbWF5YmVTbmFwc2hvdFxuICAgICkge1xuICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kO1xuICAgICAgLy8gSXQgd2lsbCBwYXNzIGEgc25hcHNob3QgdmFsdWUgdG8gZGlkLXVwZGF0ZSB0aG91Z2guXG4gICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgdmFsdWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBib3RoIGNhc2VzLCBidXQgY2FuJ3QganVzdCBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIFwibWF5YmVTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBmb3IgPD0gMTUueCB2ZXJzaW9ucyB0aGlzIG1pZ2h0IGJlIGEgXCJwcmV2Q29udGV4dFwiIG9iamVjdC5cbiAgICAgIC8vIFdlIGFsc28gY2FuJ3QganVzdCBjaGVjayBcIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGdldC1zbmFwc2hvdCBtaWdodCByZXR1cm4gYSBmYWxzeSB2YWx1ZS5cbiAgICAgIC8vIFNvIGNoZWNrIGZvciB0aGUgZXhwbGljaXQgX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIGZsYWcgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yLlxuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWdcbiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90XG4gICAgICAgIDogbWF5YmVTbmFwc2hvdDtcblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxuZXhwb3J0IHsgcG9seWZpbGwgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKSA6IG51bGw7XG5leHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB0aW1lb3V0c1NoYXBlO1xudmFyIGNsYXNzTmFtZXNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KSwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyRG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXREb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0QWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KV0pIDogbnVsbDtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9DaGlsZE1hcHBpbmcgPSByZXF1aXJlKFwiLi91dGlscy9DaGlsZE1hcHBpbmdcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICAgKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICAgKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gICAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICAgKlxuICAgKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICAgKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gICAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICAgKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gICAqIGl0ZW1zLlxuICAgKi9cblxufTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiB7XG4gICAgICAgIGlzTW91bnRpbmc6ICF0aGlzLmFwcGVhcmVkXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmFwcGVhcmVkID0gdHJ1ZTtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyAoMCwgX0NoaWxkTWFwcGluZy5nZXRJbml0aWFsQ2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiAoMCwgX0NoaWxkTWFwcGluZy5nZXROZXh0Q2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0cmFuc2l0aW9uR3JvdXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKFRyYW5zaXRpb25Hcm91cCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmxpcCA9IGZsaXA7XG5cbnZhciBfY29udmVydCA9IHJlcXVpcmUoXCIuL2NvbnZlcnRcIik7XG5cbnZhciBfY29udmVydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb252ZXJ0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcmVkdWNlKG5vZGUsIHByZWNpc2lvbikge1xuICBpZiAobm9kZS50eXBlID09PSBcIk1hdGhFeHByZXNzaW9uXCIpIHJldHVybiByZWR1Y2VNYXRoRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pO1xuICBpZiAobm9kZS50eXBlID09PSBcIkNhbGNcIikgcmV0dXJuIHJlZHVjZShub2RlLnZhbHVlLCBwcmVjaXNpb24pO1xuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBpc0VxdWFsKGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBsZWZ0LnR5cGUgPT09IHJpZ2h0LnR5cGUgJiYgbGVmdC52YWx1ZSA9PT0gcmlnaHQudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGlzVmFsdWVUeXBlKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnTGVuZ3RoVmFsdWUnOlxuICAgIGNhc2UgJ0FuZ2xlVmFsdWUnOlxuICAgIGNhc2UgJ1RpbWVWYWx1ZSc6XG4gICAgY2FzZSAnRnJlcXVlbmN5VmFsdWUnOlxuICAgIGNhc2UgJ1Jlc29sdXRpb25WYWx1ZSc6XG4gICAgY2FzZSAnRW1WYWx1ZSc6XG4gICAgY2FzZSAnRXhWYWx1ZSc6XG4gICAgY2FzZSAnQ2hWYWx1ZSc6XG4gICAgY2FzZSAnUmVtVmFsdWUnOlxuICAgIGNhc2UgJ1ZoVmFsdWUnOlxuICAgIGNhc2UgJ1Z3VmFsdWUnOlxuICAgIGNhc2UgJ1ZtaW5WYWx1ZSc6XG4gICAgY2FzZSAnVm1heFZhbHVlJzpcbiAgICBjYXNlICdQZXJjZW50YWdlVmFsdWUnOlxuICAgIGNhc2UgJ1ZhbHVlJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29udmVydE1hdGhFeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbikge1xuICB2YXIgbm9kZXMgPSAoMCwgX2NvbnZlcnQyLmRlZmF1bHQpKG5vZGUubGVmdCwgbm9kZS5yaWdodCwgcHJlY2lzaW9uKTtcbiAgdmFyIGxlZnQgPSByZWR1Y2Uobm9kZXMubGVmdCwgcHJlY2lzaW9uKTtcbiAgdmFyIHJpZ2h0ID0gcmVkdWNlKG5vZGVzLnJpZ2h0LCBwcmVjaXNpb24pO1xuXG4gIGlmIChsZWZ0LnR5cGUgPT09IFwiTWF0aEV4cHJlc3Npb25cIiAmJiByaWdodC50eXBlID09PSBcIk1hdGhFeHByZXNzaW9uXCIpIHtcblxuICAgIGlmIChsZWZ0Lm9wZXJhdG9yID09PSAnLycgJiYgcmlnaHQub3BlcmF0b3IgPT09ICcqJyB8fCBsZWZ0Lm9wZXJhdG9yID09PSAnLScgJiYgcmlnaHQub3BlcmF0b3IgPT09ICcrJyB8fCBsZWZ0Lm9wZXJhdG9yID09PSAnKicgJiYgcmlnaHQub3BlcmF0b3IgPT09ICcvJyB8fCBsZWZ0Lm9wZXJhdG9yID09PSAnKycgJiYgcmlnaHQub3BlcmF0b3IgPT09ICctJykge1xuXG4gICAgICBpZiAoaXNFcXVhbChsZWZ0LnJpZ2h0LCByaWdodC5yaWdodCkpIG5vZGVzID0gKDAsIF9jb252ZXJ0Mi5kZWZhdWx0KShsZWZ0LmxlZnQsIHJpZ2h0LmxlZnQsIHByZWNpc2lvbik7ZWxzZSBpZiAoaXNFcXVhbChsZWZ0LnJpZ2h0LCByaWdodC5sZWZ0KSkgbm9kZXMgPSAoMCwgX2NvbnZlcnQyLmRlZmF1bHQpKGxlZnQubGVmdCwgcmlnaHQucmlnaHQsIHByZWNpc2lvbik7XG5cbiAgICAgIGxlZnQgPSByZWR1Y2Uobm9kZXMubGVmdCwgcHJlY2lzaW9uKTtcbiAgICAgIHJpZ2h0ID0gcmVkdWNlKG5vZGVzLnJpZ2h0LCBwcmVjaXNpb24pO1xuICAgIH1cbiAgfVxuXG4gIG5vZGUubGVmdCA9IGxlZnQ7XG4gIG5vZGUucmlnaHQgPSByaWdodDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGZsaXAob3BlcmF0b3IpIHtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSAnKycgPyAnLScgOiAnKyc7XG59XG5cbmZ1bmN0aW9uIGZsaXBWYWx1ZShub2RlKSB7XG4gIGlmIChpc1ZhbHVlVHlwZShub2RlLnR5cGUpKSBub2RlLnZhbHVlID0gLW5vZGUudmFsdWU7ZWxzZSBpZiAobm9kZS50eXBlID09ICdNYXRoRXhwcmVzc2lvbicpIHtcbiAgICBub2RlLmxlZnQgPSBmbGlwVmFsdWUobm9kZS5sZWZ0KTtcbiAgICBub2RlLnJpZ2h0ID0gZmxpcFZhbHVlKG5vZGUucmlnaHQpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VBZGRTdWJFeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbikge1xuICB2YXIgX25vZGUgPSBub2RlLFxuICAgICAgbGVmdCA9IF9ub2RlLmxlZnQsXG4gICAgICByaWdodCA9IF9ub2RlLnJpZ2h0LFxuICAgICAgb3AgPSBfbm9kZS5vcGVyYXRvcjtcblxuXG4gIGlmIChsZWZ0LnR5cGUgPT09ICdDc3NWYXJpYWJsZScgfHwgcmlnaHQudHlwZSA9PT0gJ0Nzc1ZhcmlhYmxlJykgcmV0dXJuIG5vZGU7XG5cbiAgLy8gc29tZXRoaW5nICsgMCA9PiBzb21ldGhpbmdcbiAgLy8gc29tZXRoaW5nIC0gMCA9PiBzb21ldGhpbmdcbiAgaWYgKHJpZ2h0LnZhbHVlID09PSAwKSByZXR1cm4gbGVmdDtcblxuICAvLyAwICsgc29tZXRoaW5nID0+IHNvbWV0aGluZ1xuICBpZiAobGVmdC52YWx1ZSA9PT0gMCAmJiBvcCA9PT0gXCIrXCIpIHJldHVybiByaWdodDtcblxuICAvLyAwIC0gc29tZXRoaW5nID0+IC1zb21ldGhpbmdcbiAgaWYgKGxlZnQudmFsdWUgPT09IDAgJiYgb3AgPT09IFwiLVwiKSByZXR1cm4gZmxpcFZhbHVlKHJpZ2h0KTtcblxuICAvLyB2YWx1ZSArIHZhbHVlXG4gIC8vIHZhbHVlIC0gdmFsdWVcbiAgaWYgKGxlZnQudHlwZSA9PT0gcmlnaHQudHlwZSAmJiBpc1ZhbHVlVHlwZShsZWZ0LnR5cGUpKSB7XG4gICAgbm9kZSA9IE9iamVjdC5hc3NpZ24oe30sIGxlZnQpO1xuICAgIGlmIChvcCA9PT0gXCIrXCIpIG5vZGUudmFsdWUgPSBsZWZ0LnZhbHVlICsgcmlnaHQudmFsdWU7ZWxzZSBub2RlLnZhbHVlID0gbGVmdC52YWx1ZSAtIHJpZ2h0LnZhbHVlO1xuICB9XG5cbiAgLy8gdmFsdWUgPG9wPiAoZXhwcilcbiAgaWYgKGlzVmFsdWVUeXBlKGxlZnQudHlwZSkgJiYgKHJpZ2h0Lm9wZXJhdG9yID09PSAnKycgfHwgcmlnaHQub3BlcmF0b3IgPT09ICctJykgJiYgcmlnaHQudHlwZSA9PT0gJ01hdGhFeHByZXNzaW9uJykge1xuICAgIC8vIHZhbHVlICsgKHZhbHVlICsgc29tZXRoaW5nKSA9PiAodmFsdWUgKyB2YWx1ZSkgKyBzb21ldGhpbmdcbiAgICAvLyB2YWx1ZSArICh2YWx1ZSAtIHNvbWV0aGluZykgPT4gKHZhbHVlICsgdmFsdWUpIC0gc29tZXRoaW5nXG4gICAgLy8gdmFsdWUgLSAodmFsdWUgKyBzb21ldGhpbmcpID0+ICh2YWx1ZSAtIHZhbHVlKSAtIHNvbWV0aGluZ1xuICAgIC8vIHZhbHVlIC0gKHZhbHVlIC0gc29tZXRoaW5nKSA9PiAodmFsdWUgLSB2YWx1ZSkgKyBzb21ldGhpbmdcbiAgICBpZiAobGVmdC50eXBlID09PSByaWdodC5sZWZ0LnR5cGUpIHtcbiAgICAgIG5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCBub2RlKTtcbiAgICAgIG5vZGUubGVmdCA9IHJlZHVjZSh7XG4gICAgICAgIHR5cGU6ICdNYXRoRXhwcmVzc2lvbicsXG4gICAgICAgIG9wZXJhdG9yOiBvcCxcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgcmlnaHQ6IHJpZ2h0LmxlZnRcbiAgICAgIH0sIHByZWNpc2lvbik7XG4gICAgICBub2RlLnJpZ2h0ID0gcmlnaHQucmlnaHQ7XG4gICAgICBub2RlLm9wZXJhdG9yID0gb3AgPT09ICctJyA/IGZsaXAocmlnaHQub3BlcmF0b3IpIDogcmlnaHQub3BlcmF0b3I7XG4gICAgICByZXR1cm4gcmVkdWNlKG5vZGUsIHByZWNpc2lvbik7XG4gICAgfVxuICAgIC8vIHZhbHVlICsgKHNvbWV0aGluZyArIHZhbHVlKSA9PiAodmFsdWUgKyB2YWx1ZSkgKyBzb21ldGhpbmdcbiAgICAvLyB2YWx1ZSArIChzb21ldGhpbmcgLSB2YWx1ZSkgPT4gKHZhbHVlIC0gdmFsdWUpICsgc29tZXRoaW5nXG4gICAgLy8gdmFsdWUgLSAoc29tZXRoaW5nICsgdmFsdWUpID0+ICh2YWx1ZSAtIHZhbHVlKSAtIHNvbWV0aGluZ1xuICAgIC8vIHZhbHVlIC0gKHNvbWV0aGluZyAtIHZhbHVlKSA9PiAodmFsdWUgKyB2YWx1ZSkgLSBzb21ldGhpbmdcbiAgICBlbHNlIGlmIChsZWZ0LnR5cGUgPT09IHJpZ2h0LnJpZ2h0LnR5cGUpIHtcbiAgICAgICAgbm9kZSA9IE9iamVjdC5hc3NpZ24oe30sIG5vZGUpO1xuICAgICAgICBub2RlLmxlZnQgPSByZWR1Y2Uoe1xuICAgICAgICAgIHR5cGU6ICdNYXRoRXhwcmVzc2lvbicsXG4gICAgICAgICAgb3BlcmF0b3I6IG9wID09PSAnLScgPyBmbGlwKHJpZ2h0Lm9wZXJhdG9yKSA6IHJpZ2h0Lm9wZXJhdG9yLFxuICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0LnJpZ2h0XG4gICAgICAgIH0sIHByZWNpc2lvbik7XG4gICAgICAgIG5vZGUucmlnaHQgPSByaWdodC5sZWZ0O1xuICAgICAgICByZXR1cm4gcmVkdWNlKG5vZGUsIHByZWNpc2lvbik7XG4gICAgICB9XG4gIH1cblxuICAvLyAoZXhwcikgPG9wPiB2YWx1ZVxuICBpZiAobGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIChsZWZ0Lm9wZXJhdG9yID09PSAnKycgfHwgbGVmdC5vcGVyYXRvciA9PT0gJy0nKSAmJiBpc1ZhbHVlVHlwZShyaWdodC50eXBlKSkge1xuICAgIC8vICh2YWx1ZSArIHNvbWV0aGluZykgKyB2YWx1ZSA9PiAodmFsdWUgKyB2YWx1ZSkgKyBzb21ldGhpbmdcbiAgICAvLyAodmFsdWUgLSBzb21ldGhpbmcpICsgdmFsdWUgPT4gKHZhbHVlICsgdmFsdWUpIC0gc29tZXRoaW5nXG4gICAgLy8gKHZhbHVlICsgc29tZXRoaW5nKSAtIHZhbHVlID0+ICh2YWx1ZSAtIHZhbHVlKSArIHNvbWV0aGluZ1xuICAgIC8vICh2YWx1ZSAtIHNvbWV0aGluZykgLSB2YWx1ZSA9PiAodmFsdWUgLSB2YWx1ZSkgLSBzb21ldGhpbmdcbiAgICBpZiAocmlnaHQudHlwZSA9PT0gbGVmdC5sZWZ0LnR5cGUpIHtcbiAgICAgIG5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCBsZWZ0KTtcbiAgICAgIG5vZGUubGVmdCA9IHJlZHVjZSh7XG4gICAgICAgIHR5cGU6ICdNYXRoRXhwcmVzc2lvbicsXG4gICAgICAgIG9wZXJhdG9yOiBvcCxcbiAgICAgICAgbGVmdDogbGVmdC5sZWZ0LFxuICAgICAgICByaWdodDogcmlnaHRcbiAgICAgIH0sIHByZWNpc2lvbik7XG4gICAgICByZXR1cm4gcmVkdWNlKG5vZGUsIHByZWNpc2lvbik7XG4gICAgfVxuICAgIC8vIChzb21ldGhpbmcgKyB2YWx1ZSkgKyB2YWx1ZSA9PiBzb21ldGhpbmcgKyAodmFsdWUgKyB2YWx1ZSlcbiAgICAvLyAoc29tZXRoaW5nIC0gdmFsdWUxKSArIHZhbHVlMiA9PiBzb21ldGhpbmcgLSAodmFsdWUyIC0gdmFsdWUxKVxuICAgIC8vIChzb21ldGhpbmcgKyB2YWx1ZSkgLSB2YWx1ZSA9PiBzb21ldGhpbmcgKyAodmFsdWUgLSB2YWx1ZSlcbiAgICAvLyAoc29tZXRoaW5nIC0gdmFsdWUpIC0gdmFsdWUgPT4gc29tZXRoaW5nIC0gKHZhbHVlICsgdmFsdWUpXG4gICAgZWxzZSBpZiAocmlnaHQudHlwZSA9PT0gbGVmdC5yaWdodC50eXBlKSB7XG4gICAgICAgIG5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCBsZWZ0KTtcbiAgICAgICAgaWYgKGxlZnQub3BlcmF0b3IgPT09ICctJykge1xuICAgICAgICAgIG5vZGUucmlnaHQgPSByZWR1Y2Uoe1xuICAgICAgICAgICAgdHlwZTogJ01hdGhFeHByZXNzaW9uJyxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBvcCA9PT0gJy0nID8gJysnIDogJy0nLFxuICAgICAgICAgICAgbGVmdDogcmlnaHQsXG4gICAgICAgICAgICByaWdodDogbGVmdC5yaWdodFxuICAgICAgICAgIH0sIHByZWNpc2lvbik7XG4gICAgICAgICAgbm9kZS5vcGVyYXRvciA9IG9wID09PSAnLScgPyAnLScgOiAnKyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5yaWdodCA9IHJlZHVjZSh7XG4gICAgICAgICAgICB0eXBlOiAnTWF0aEV4cHJlc3Npb24nLFxuICAgICAgICAgICAgb3BlcmF0b3I6IG9wLFxuICAgICAgICAgICAgbGVmdDogbGVmdC5yaWdodCxcbiAgICAgICAgICAgIHJpZ2h0OiByaWdodFxuICAgICAgICAgIH0sIHByZWNpc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUucmlnaHQudmFsdWUgPCAwKSB7XG4gICAgICAgICAgbm9kZS5yaWdodC52YWx1ZSAqPSAtMTtcbiAgICAgICAgICBub2RlLm9wZXJhdG9yID0gbm9kZS5vcGVyYXRvciA9PT0gJy0nID8gJysnIDogJy0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWR1Y2Uobm9kZSwgcHJlY2lzaW9uKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlRGl2aXNpb25FeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbikge1xuICBpZiAoIWlzVmFsdWVUeXBlKG5vZGUucmlnaHQudHlwZSkpIHJldHVybiBub2RlO1xuXG4gIGlmIChub2RlLnJpZ2h0LnR5cGUgIT09ICdWYWx1ZScpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBkaXZpZGUgYnkgXFxcIlwiICsgbm9kZS5yaWdodC51bml0ICsgXCJcXFwiLCBudW1iZXIgZXhwZWN0ZWRcIik7XG5cbiAgaWYgKG5vZGUucmlnaHQudmFsdWUgPT09IDApIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRpdmlkZSBieSB6ZXJvJyk7XG5cbiAgLy8gKGV4cHIpIC8gdmFsdWVcbiAgaWYgKG5vZGUubGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nKSB7XG4gICAgaWYgKGlzVmFsdWVUeXBlKG5vZGUubGVmdC5sZWZ0LnR5cGUpICYmIGlzVmFsdWVUeXBlKG5vZGUubGVmdC5yaWdodC50eXBlKSkge1xuICAgICAgbm9kZS5sZWZ0LmxlZnQudmFsdWUgLz0gbm9kZS5yaWdodC52YWx1ZTtcbiAgICAgIG5vZGUubGVmdC5yaWdodC52YWx1ZSAvPSBub2RlLnJpZ2h0LnZhbHVlO1xuICAgICAgcmV0dXJuIHJlZHVjZShub2RlLmxlZnQsIHByZWNpc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG4gIC8vIHNvbWV0aGluZyAvIHZhbHVlXG4gIGVsc2UgaWYgKGlzVmFsdWVUeXBlKG5vZGUubGVmdC50eXBlKSkge1xuICAgICAgbm9kZS5sZWZ0LnZhbHVlIC89IG5vZGUucmlnaHQudmFsdWU7XG4gICAgICByZXR1cm4gbm9kZS5sZWZ0O1xuICAgIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZU11bHRpcGxpY2F0aW9uRXhwcmVzc2lvbihub2RlKSB7XG4gIC8vIChleHByKSAqIHZhbHVlXG4gIGlmIChub2RlLmxlZnQudHlwZSA9PT0gJ01hdGhFeHByZXNzaW9uJyAmJiBub2RlLnJpZ2h0LnR5cGUgPT09ICdWYWx1ZScpIHtcbiAgICBpZiAoaXNWYWx1ZVR5cGUobm9kZS5sZWZ0LmxlZnQudHlwZSkgJiYgaXNWYWx1ZVR5cGUobm9kZS5sZWZ0LnJpZ2h0LnR5cGUpKSB7XG4gICAgICBub2RlLmxlZnQubGVmdC52YWx1ZSAqPSBub2RlLnJpZ2h0LnZhbHVlO1xuICAgICAgbm9kZS5sZWZ0LnJpZ2h0LnZhbHVlICo9IG5vZGUucmlnaHQudmFsdWU7XG4gICAgICByZXR1cm4gbm9kZS5sZWZ0O1xuICAgIH1cbiAgfVxuICAvLyBzb21ldGhpbmcgKiB2YWx1ZVxuICBlbHNlIGlmIChpc1ZhbHVlVHlwZShub2RlLmxlZnQudHlwZSkgJiYgbm9kZS5yaWdodC50eXBlID09PSAnVmFsdWUnKSB7XG4gICAgICBub2RlLmxlZnQudmFsdWUgKj0gbm9kZS5yaWdodC52YWx1ZTtcbiAgICAgIHJldHVybiBub2RlLmxlZnQ7XG4gICAgfVxuICAgIC8vIHZhbHVlICogKGV4cHIpXG4gICAgZWxzZSBpZiAobm9kZS5sZWZ0LnR5cGUgPT09ICdWYWx1ZScgJiYgbm9kZS5yaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nKSB7XG4gICAgICAgIGlmIChpc1ZhbHVlVHlwZShub2RlLnJpZ2h0LmxlZnQudHlwZSkgJiYgaXNWYWx1ZVR5cGUobm9kZS5yaWdodC5yaWdodC50eXBlKSkge1xuICAgICAgICAgIG5vZGUucmlnaHQubGVmdC52YWx1ZSAqPSBub2RlLmxlZnQudmFsdWU7XG4gICAgICAgICAgbm9kZS5yaWdodC5yaWdodC52YWx1ZSAqPSBub2RlLmxlZnQudmFsdWU7XG4gICAgICAgICAgcmV0dXJuIG5vZGUucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHZhbHVlICogc29tZXRoaW5nXG4gICAgICBlbHNlIGlmIChub2RlLmxlZnQudHlwZSA9PT0gJ1ZhbHVlJyAmJiBpc1ZhbHVlVHlwZShub2RlLnJpZ2h0LnR5cGUpKSB7XG4gICAgICAgICAgbm9kZS5yaWdodC52YWx1ZSAqPSBub2RlLmxlZnQudmFsdWU7XG4gICAgICAgICAgcmV0dXJuIG5vZGUucmlnaHQ7XG4gICAgICAgIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZU1hdGhFeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbikge1xuICBub2RlID0gY29udmVydE1hdGhFeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbik7XG5cbiAgc3dpdGNoIChub2RlLm9wZXJhdG9yKSB7XG4gICAgY2FzZSBcIitcIjpcbiAgICBjYXNlIFwiLVwiOlxuICAgICAgcmV0dXJuIHJlZHVjZUFkZFN1YkV4cHJlc3Npb24obm9kZSwgcHJlY2lzaW9uKTtcbiAgICBjYXNlIFwiL1wiOlxuICAgICAgcmV0dXJuIHJlZHVjZURpdmlzaW9uRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pO1xuICAgIGNhc2UgXCIqXCI6XG4gICAgICByZXR1cm4gcmVkdWNlTXVsdGlwbGljYXRpb25FeHByZXNzaW9uKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSByZWR1Y2U7IiwiLyohIGRlY2ltYWwuanMtbGlnaHQgdjIuNS4xIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlTWNsL2RlY2ltYWwuanMtbGlnaHQvTElDRU5DRSAqL1xyXG47KGZ1bmN0aW9uIChnbG9iYWxTY29wZSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIGRlY2ltYWwuanMtbGlnaHQgdjIuNS4xXHJcbiAgICogIEFuIGFyYml0cmFyeS1wcmVjaXNpb24gRGVjaW1hbCB0eXBlIGZvciBKYXZhU2NyaXB0LlxyXG4gICAqICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9kZWNpbWFsLmpzLWxpZ2h0XHJcbiAgICogIENvcHlyaWdodCAoYykgMjAyMCBNaWNoYWVsIE1jbGF1Z2hsaW4gPE04Y2g4OGxAZ21haWwuY29tPlxyXG4gICAqICBNSVQgRXhwYXQgTGljZW5jZVxyXG4gICAqL1xyXG5cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIEVESVRBQkxFIERFRkFVTFRTICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG4gICAgLy8gVGhlIGxpbWl0IG9uIHRoZSB2YWx1ZSBvZiBgcHJlY2lzaW9uYCwgYW5kIG9uIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgYXJndW1lbnQgdG9cclxuICAgIC8vIGB0b0RlY2ltYWxQbGFjZXNgLCBgdG9FeHBvbmVudGlhbGAsIGB0b0ZpeGVkYCwgYHRvUHJlY2lzaW9uYCBhbmQgYHRvU2lnbmlmaWNhbnREaWdpdHNgLlxyXG4gIHZhciBNQVhfRElHSVRTID0gMWU5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gMWU5XHJcblxyXG5cclxuICAgIC8vIFRoZSBpbml0aWFsIGNvbmZpZ3VyYXRpb24gcHJvcGVydGllcyBvZiB0aGUgRGVjaW1hbCBjb25zdHJ1Y3Rvci5cclxuICAgIERlY2ltYWwgPSB7XHJcblxyXG4gICAgICAvLyBUaGVzZSB2YWx1ZXMgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMgKGluY2x1c2l2ZSkuXHJcbiAgICAgIC8vIE1vc3Qgb2YgdGhlc2UgdmFsdWVzIGNhbiBiZSBjaGFuZ2VkIGR1cmluZyBydW4tdGltZSB1c2luZyBgRGVjaW1hbC5jb25maWdgLlxyXG5cclxuICAgICAgLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgcmVzdWx0IG9mIGEgY2FsY3VsYXRpb24gb3IgYmFzZSBjb252ZXJzaW9uLlxyXG4gICAgICAvLyBFLmcuIGBEZWNpbWFsLmNvbmZpZyh7IHByZWNpc2lvbjogMjAgfSk7YFxyXG4gICAgICBwcmVjaXNpb246IDIwLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxIHRvIE1BWF9ESUdJVFNcclxuXHJcbiAgICAgIC8vIFRoZSByb3VuZGluZyBtb2RlIHVzZWQgYnkgZGVmYXVsdCBieSBgdG9JbnRlZ2VyYCwgYHRvRGVjaW1hbFBsYWNlc2AsIGB0b0V4cG9uZW50aWFsYCxcclxuICAgICAgLy8gYHRvRml4ZWRgLCBgdG9QcmVjaXNpb25gIGFuZCBgdG9TaWduaWZpY2FudERpZ2l0c2AuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFJPVU5EX1VQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgICAgLy8gUk9VTkRfRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cclxuICAgICAgLy8gUk9VTkRfQ0VJTCAgICAgICAyIFRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBST1VORF9GTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgIC8vIFJPVU5EX0hBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXHJcbiAgICAgIC8vIFJPVU5EX0hBTEZfRE9XTiAgNSBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgZG93bi5cclxuICAgICAgLy8gUk9VTkRfSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgICAvLyBST1VORF9IQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBST1VORF9IQUxGX0ZMT09SIDggVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICAvL1xyXG4gICAgICAvLyBFLmcuXHJcbiAgICAgIC8vIGBEZWNpbWFsLnJvdW5kaW5nID0gNDtgXHJcbiAgICAgIC8vIGBEZWNpbWFsLnJvdW5kaW5nID0gRGVjaW1hbC5ST1VORF9IQUxGX1VQO2BcclxuICAgICAgcm91bmRpbmc6IDQsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byA4XHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGJlbmVhdGggd2hpY2ggYHRvU3RyaW5nYCByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgICAvLyBKYXZhU2NyaXB0IG51bWJlcnM6IC03XHJcbiAgICAgIHRvRXhwTmVnOiAtNywgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gLU1BWF9FXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGFib3ZlIHdoaWNoIGB0b1N0cmluZ2AgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgLy8gSmF2YVNjcmlwdCBudW1iZXJzOiAyMVxyXG4gICAgICB0b0V4cFBvczogIDIxLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIE1BWF9FXHJcblxyXG4gICAgICAvLyBUaGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgMTAuXHJcbiAgICAgIC8vIDExNSBkaWdpdHNcclxuICAgICAgTE4xMDogJzIuMzAyNTg1MDkyOTk0MDQ1Njg0MDE3OTkxNDU0Njg0MzY0MjA3NjAxMTAxNDg4NjI4NzcyOTc2MDMzMzI3OTAwOTY3NTcyNjA5Njc3MzUyNDgwMjM1OTk3MjA1MDg5NTk4Mjk4MzQxOTY3Nzg0MDQyMjg2J1xyXG4gICAgfSxcclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVORCBPRiBFRElUQUJMRSBERUZBVUxUUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuICAgIGV4dGVybmFsID0gdHJ1ZSxcclxuXHJcbiAgICBkZWNpbWFsRXJyb3IgPSAnW0RlY2ltYWxFcnJvcl0gJyxcclxuICAgIGludmFsaWRBcmd1bWVudCA9IGRlY2ltYWxFcnJvciArICdJbnZhbGlkIGFyZ3VtZW50OiAnLFxyXG4gICAgZXhwb25lbnRPdXRPZlJhbmdlID0gZGVjaW1hbEVycm9yICsgJ0V4cG9uZW50IG91dCBvZiByYW5nZTogJyxcclxuXHJcbiAgICBtYXRoZmxvb3IgPSBNYXRoLmZsb29yLFxyXG4gICAgbWF0aHBvdyA9IE1hdGgucG93LFxyXG5cclxuICAgIGlzRGVjaW1hbCA9IC9eKFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPyQvaSxcclxuXHJcbiAgICBPTkUsXHJcbiAgICBCQVNFID0gMWU3LFxyXG4gICAgTE9HX0JBU0UgPSA3LFxyXG4gICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXHJcbiAgICBNQVhfRSA9IG1hdGhmbG9vcihNQVhfU0FGRV9JTlRFR0VSIC8gTE9HX0JBU0UpLCAgICAvLyAxMjg2NzQyNzUwNjc3Mjg0XHJcblxyXG4gICAgLy8gRGVjaW1hbC5wcm90b3R5cGUgb2JqZWN0XHJcbiAgICBQID0ge307XHJcblxyXG5cclxuICAvLyBEZWNpbWFsIHByb3RvdHlwZSBtZXRob2RzXHJcblxyXG5cclxuICAvKlxyXG4gICAqICBhYnNvbHV0ZVZhbHVlICAgICAgICAgICAgICAgICAgICAgICBhYnNcclxuICAgKiAgY29tcGFyZWRUbyAgICAgICAgICAgICAgICAgICAgICAgICAgY21wXHJcbiAgICogIGRlY2ltYWxQbGFjZXMgICAgICAgICAgICAgICAgICAgICAgIGRwXHJcbiAgICogIGRpdmlkZWRCeSAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdlxyXG4gICAqICBkaXZpZGVkVG9JbnRlZ2VyQnkgICAgICAgICAgICAgICAgICBpZGl2XHJcbiAgICogIGVxdWFscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVxXHJcbiAgICogIGV4cG9uZW50XHJcbiAgICogIGdyZWF0ZXJUaGFuICAgICAgICAgICAgICAgICAgICAgICAgIGd0XHJcbiAgICogIGdyZWF0ZXJUaGFuT3JFcXVhbFRvICAgICAgICAgICAgICAgIGd0ZVxyXG4gICAqICBpc0ludGVnZXIgICAgICAgICAgICAgICAgICAgICAgICAgICBpc2ludFxyXG4gICAqICBpc05lZ2F0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICBpc25lZ1xyXG4gICAqICBpc1Bvc2l0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICBpc3Bvc1xyXG4gICAqICBpc1plcm9cclxuICAgKiAgbGVzc1RoYW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbHRcclxuICAgKiAgbGVzc1RoYW5PckVxdWFsVG8gICAgICAgICAgICAgICAgICAgbHRlXHJcbiAgICogIGxvZ2FyaXRobSAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ1xyXG4gICAqICBtaW51cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJcclxuICAgKiAgbW9kdWxvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kXHJcbiAgICogIG5hdHVyYWxFeHBvbmVudGlhbCAgICAgICAgICAgICAgICAgIGV4cFxyXG4gICAqICBuYXR1cmFsTG9nYXJpdGhtICAgICAgICAgICAgICAgICAgICBsblxyXG4gICAqICBuZWdhdGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdcclxuICAgKiAgcGx1cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkXHJcbiAgICogIHByZWNpc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNkXHJcbiAgICogIHNxdWFyZVJvb3QgICAgICAgICAgICAgICAgICAgICAgICAgIHNxcnRcclxuICAgKiAgdGltZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsXHJcbiAgICogIHRvRGVjaW1hbFBsYWNlcyAgICAgICAgICAgICAgICAgICAgIHRvZHBcclxuICAgKiAgdG9FeHBvbmVudGlhbFxyXG4gICAqICB0b0ZpeGVkXHJcbiAgICogIHRvSW50ZWdlciAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvaW50XHJcbiAgICogIHRvTnVtYmVyXHJcbiAgICogIHRvUG93ZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvd1xyXG4gICAqICB0b1ByZWNpc2lvblxyXG4gICAqICB0b1NpZ25pZmljYW50RGlnaXRzICAgICAgICAgICAgICAgICB0b3NkXHJcbiAgICogIHRvU3RyaW5nXHJcbiAgICogIHZhbHVlT2YgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFxyXG4gICAqL1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5hYnNvbHV0ZVZhbHVlID0gUC5hYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgeCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xyXG4gICAgaWYgKHgucykgeC5zID0gMTtcclxuICAgIHJldHVybiB4O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVyblxyXG4gICAqICAgMSAgICBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgYHlgLFxyXG4gICAqICAtMSAgICBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGxlc3MgdGhhbiB0aGUgdmFsdWUgb2YgYHlgLFxyXG4gICAqICAgMCAgICBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWVcclxuICAgKlxyXG4gICAqL1xyXG4gIFAuY29tcGFyZWRUbyA9IFAuY21wID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBpLCBqLCB4ZEwsIHlkTCxcclxuICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpO1xyXG5cclxuICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgIGlmICh4LnMgIT09IHkucykgcmV0dXJuIHgucyB8fCAteS5zO1xyXG5cclxuICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gICAgaWYgKHguZSAhPT0geS5lKSByZXR1cm4geC5lID4geS5lIF4geC5zIDwgMCA/IDEgOiAtMTtcclxuXHJcbiAgICB4ZEwgPSB4LmQubGVuZ3RoO1xyXG4gICAgeWRMID0geS5kLmxlbmd0aDtcclxuXHJcbiAgICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgZm9yIChpID0gMCwgaiA9IHhkTCA8IHlkTCA/IHhkTCA6IHlkTDsgaSA8IGo7ICsraSkge1xyXG4gICAgICBpZiAoeC5kW2ldICE9PSB5LmRbaV0pIHJldHVybiB4LmRbaV0gPiB5LmRbaV0gXiB4LnMgPCAwID8gMSA6IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbXBhcmUgbGVuZ3Rocy5cclxuICAgIHJldHVybiB4ZEwgPT09IHlkTCA/IDAgOiB4ZEwgPiB5ZEwgXiB4LnMgPCAwID8gMSA6IC0xO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmRlY2ltYWxQbGFjZXMgPSBQLmRwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSB0aGlzLFxyXG4gICAgICB3ID0geC5kLmxlbmd0aCAtIDEsXHJcbiAgICAgIGRwID0gKHcgLSB4LmUpICogTE9HX0JBU0U7XHJcblxyXG4gICAgLy8gU3VidHJhY3QgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvcyBvZiB0aGUgbGFzdCB3b3JkLlxyXG4gICAgdyA9IHguZFt3XTtcclxuICAgIGlmICh3KSBmb3IgKDsgdyAlIDEwID09IDA7IHcgLz0gMTApIGRwLS07XHJcblxyXG4gICAgcmV0dXJuIGRwIDwgMCA/IDAgOiBkcDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGRpdmlkZWQgYnkgYHlgLCB0cnVuY2F0ZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmRpdmlkZWRCeSA9IFAuZGl2ID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiBkaXZpZGUodGhpcywgbmV3IHRoaXMuY29uc3RydWN0b3IoeSkpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBpbnRlZ2VyIHBhcnQgb2YgZGl2aWRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbFxyXG4gICAqIGJ5IHRoZSB2YWx1ZSBvZiBgeWAsIHRydW5jYXRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmRpdmlkZWRUb0ludGVnZXJCeSA9IFAuaWRpdiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG4gICAgcmV0dXJuIHJvdW5kKGRpdmlkZSh4LCBuZXcgQ3Rvcih5KSwgMCwgMSksIEN0b3IucHJlY2lzaW9uKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBgeWAsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmVxdWFscyA9IFAuZXEgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgcmV0dXJuICF0aGlzLmNtcCh5KTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdGhlIChiYXNlIDEwKSBleHBvbmVudCB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgKHRoaXMuZSBpcyB0aGUgYmFzZSAxMDAwMDAwMCBleHBvbmVudCkuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmV4cG9uZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGdldEJhc2UxMEV4cG9uZW50KHRoaXMpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBgeWAsIG90aGVyd2lzZSByZXR1cm5cclxuICAgKiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuZ3JlYXRlclRoYW4gPSBQLmd0ID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiB0aGlzLmNtcCh5KSA+IDA7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIGB5YCxcclxuICAgKiBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5ncmVhdGVyVGhhbk9yRXF1YWxUbyA9IFAuZ3RlID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiB0aGlzLmNtcCh5KSA+PSAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgYW4gaW50ZWdlciwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaXNJbnRlZ2VyID0gUC5pc2ludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLmUgPiB0aGlzLmQubGVuZ3RoIC0gMjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIG5lZ2F0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5pc05lZ2F0aXZlID0gUC5pc25lZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnMgPCAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgcG9zaXRpdmUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmlzUG9zaXRpdmUgPSBQLmlzcG9zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucyA+IDA7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyAwLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5pc1plcm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zID09PSAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgbGVzcyB0aGFuIGB5YCwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubGVzc1RoYW4gPSBQLmx0ID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiB0aGlzLmNtcCh5KSA8IDA7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYHlgLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5sZXNzVGhhbk9yRXF1YWxUbyA9IFAubHRlID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiB0aGlzLmNtcCh5KSA8IDE7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRoZSBsb2dhcml0aG0gb2YgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCB0byB0aGUgc3BlY2lmaWVkIGJhc2UsIHRydW5jYXRlZCB0b1xyXG4gICAqIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgKlxyXG4gICAqIElmIG5vIGJhc2UgaXMgc3BlY2lmaWVkLCByZXR1cm4gbG9nWzEwXSh4KS5cclxuICAgKlxyXG4gICAqIGxvZ1tiYXNlXSh4KSA9IGxuKHgpIC8gbG4oYmFzZSlcclxuICAgKlxyXG4gICAqIFRoZSBtYXhpbXVtIGVycm9yIG9mIHRoZSByZXN1bHQgaXMgMSB1bHAgKHVuaXQgaW4gdGhlIGxhc3QgcGxhY2UpLlxyXG4gICAqXHJcbiAgICogW2Jhc2VdIHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IFRoZSBiYXNlIG9mIHRoZSBsb2dhcml0aG0uXHJcbiAgICpcclxuICAgKi9cclxuICBQLmxvZ2FyaXRobSA9IFAubG9nID0gZnVuY3Rpb24gKGJhc2UpIHtcclxuICAgIHZhciByLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb24sXHJcbiAgICAgIHdwciA9IHByICsgNTtcclxuXHJcbiAgICAvLyBEZWZhdWx0IGJhc2UgaXMgMTAuXHJcbiAgICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIGJhc2UgPSBuZXcgQ3RvcigxMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBiYXNlID0gbmV3IEN0b3IoYmFzZSk7XHJcblxyXG4gICAgICAvLyBsb2dbLWJdKHgpID0gTmFOXHJcbiAgICAgIC8vIGxvZ1swXSh4KSAgPSBOYU5cclxuICAgICAgLy8gbG9nWzFdKHgpICA9IE5hTlxyXG4gICAgICBpZiAoYmFzZS5zIDwgMSB8fCBiYXNlLmVxKE9ORSkpIHRocm93IEVycm9yKGRlY2ltYWxFcnJvciArICdOYU4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsb2dbYl0oLXgpID0gTmFOXHJcbiAgICAvLyBsb2dbYl0oMCkgPSAtSW5maW5pdHlcclxuICAgIGlmICh4LnMgPCAxKSB0aHJvdyBFcnJvcihkZWNpbWFsRXJyb3IgKyAoeC5zID8gJ05hTicgOiAnLUluZmluaXR5JykpO1xyXG5cclxuICAgIC8vIGxvZ1tiXSgxKSA9IDBcclxuICAgIGlmICh4LmVxKE9ORSkpIHJldHVybiBuZXcgQ3RvcigwKTtcclxuXHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG4gICAgciA9IGRpdmlkZShsbih4LCB3cHIpLCBsbihiYXNlLCB3cHIpLCB3cHIpO1xyXG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xyXG5cclxuICAgIHJldHVybiByb3VuZChyLCBwcik7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBtaW51cyBgeWAsIHRydW5jYXRlZCB0b1xyXG4gICAqIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubWludXMgPSBQLnN1YiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgeCA9IHRoaXM7XHJcbiAgICB5ID0gbmV3IHguY29uc3RydWN0b3IoeSk7XHJcbiAgICByZXR1cm4geC5zID09IHkucyA/IHN1YnRyYWN0KHgsIHkpIDogYWRkKHgsICh5LnMgPSAteS5zLCB5KSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBtb2R1bG8gYHlgLCB0cnVuY2F0ZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLm1vZHVsbyA9IFAubW9kID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBxLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcblxyXG4gICAgeSA9IG5ldyBDdG9yKHkpO1xyXG5cclxuICAgIC8vIHggJSAwID0gTmFOXHJcbiAgICBpZiAoIXkucykgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ05hTicpO1xyXG5cclxuICAgIC8vIFJldHVybiB4IGlmIHggaXMgMC5cclxuICAgIGlmICgheC5zKSByZXR1cm4gcm91bmQobmV3IEN0b3IoeCksIHByKTtcclxuXHJcbiAgICAvLyBQcmV2ZW50IHJvdW5kaW5nIG9mIGludGVybWVkaWF0ZSBjYWxjdWxhdGlvbnMuXHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG4gICAgcSA9IGRpdmlkZSh4LCB5LCAwLCAxKS50aW1lcyh5KTtcclxuICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4geC5taW51cyhxKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgbmF0dXJhbCBleHBvbmVudGlhbCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLFxyXG4gICAqIGkuZS4gdGhlIGJhc2UgZSByYWlzZWQgdG8gdGhlIHBvd2VyIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwsIHRydW5jYXRlZCB0byBgcHJlY2lzaW9uYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubmF0dXJhbEV4cG9uZW50aWFsID0gUC5leHAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZXhwKHRoaXMpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLFxyXG4gICAqIHRydW5jYXRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLm5hdHVyYWxMb2dhcml0aG0gPSBQLmxuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGxuKHRoaXMpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgbmVnYXRlZCwgaS5lLiBhcyBpZiBtdWx0aXBsaWVkIGJ5XHJcbiAgICogLTEuXHJcbiAgICpcclxuICAgKi9cclxuICBQLm5lZ2F0ZWQgPSBQLm5lZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XHJcbiAgICB4LnMgPSAteC5zIHx8IDA7XHJcbiAgICByZXR1cm4geDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHBsdXMgYHlgLCB0cnVuY2F0ZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnBsdXMgPSBQLmFkZCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgeCA9IHRoaXM7XHJcbiAgICB5ID0gbmV3IHguY29uc3RydWN0b3IoeSk7XHJcbiAgICByZXR1cm4geC5zID09IHkucyA/IGFkZCh4LCB5KSA6IHN1YnRyYWN0KHgsICh5LnMgPSAteS5zLCB5KSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBbel0ge2Jvb2xlYW58bnVtYmVyfSBXaGV0aGVyIHRvIGNvdW50IGludGVnZXItcGFydCB0cmFpbGluZyB6ZXJvczogdHJ1ZSwgZmFsc2UsIDEgb3IgMC5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uICh6KSB7XHJcbiAgICB2YXIgZSwgc2QsIHcsXHJcbiAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgIGlmICh6ICE9PSB2b2lkIDAgJiYgeiAhPT0gISF6ICYmIHogIT09IDEgJiYgeiAhPT0gMCkgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgeik7XHJcblxyXG4gICAgZSA9IGdldEJhc2UxMEV4cG9uZW50KHgpICsgMTtcclxuICAgIHcgPSB4LmQubGVuZ3RoIC0gMTtcclxuICAgIHNkID0gdyAqIExPR19CQVNFICsgMTtcclxuICAgIHcgPSB4LmRbd107XHJcblxyXG4gICAgLy8gSWYgbm9uLXplcm8uLi5cclxuICAgIGlmICh3KSB7XHJcblxyXG4gICAgICAvLyBTdWJ0cmFjdCB0aGUgbnVtYmVyIG9mIHRyYWlsaW5nIHplcm9zIG9mIHRoZSBsYXN0IHdvcmQuXHJcbiAgICAgIGZvciAoOyB3ICUgMTAgPT0gMDsgdyAvPSAxMCkgc2QtLTtcclxuXHJcbiAgICAgIC8vIEFkZCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3Qgd29yZC5cclxuICAgICAgZm9yICh3ID0geC5kWzBdOyB3ID49IDEwOyB3IC89IDEwKSBzZCsrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB6ICYmIGUgPiBzZCA/IGUgOiBzZDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhpcyBEZWNpbWFsLCB0cnVuY2F0ZWQgdG8gYHByZWNpc2lvbmBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnNxdWFyZVJvb3QgPSBQLnNxcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZSwgbiwgcHIsIHIsIHMsIHQsIHdwcixcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIC8vIE5lZ2F0aXZlIG9yIHplcm8/XHJcbiAgICBpZiAoeC5zIDwgMSkge1xyXG4gICAgICBpZiAoIXgucykgcmV0dXJuIG5ldyBDdG9yKDApO1xyXG5cclxuICAgICAgLy8gc3FydCgteCkgPSBOYU5cclxuICAgICAgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ05hTicpO1xyXG4gICAgfVxyXG5cclxuICAgIGUgPSBnZXRCYXNlMTBFeHBvbmVudCh4KTtcclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcblxyXG4gICAgLy8gSW5pdGlhbCBlc3RpbWF0ZS5cclxuICAgIHMgPSBNYXRoLnNxcnQoK3gpO1xyXG5cclxuICAgIC8vIE1hdGguc3FydCB1bmRlcmZsb3cvb3ZlcmZsb3c/XHJcbiAgICAvLyBQYXNzIHggdG8gTWF0aC5zcXJ0IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSBleHBvbmVudCBvZiB0aGUgcmVzdWx0LlxyXG4gICAgaWYgKHMgPT0gMCB8fCBzID09IDEgLyAwKSB7XHJcbiAgICAgIG4gPSBkaWdpdHNUb1N0cmluZyh4LmQpO1xyXG4gICAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApIG4gKz0gJzAnO1xyXG4gICAgICBzID0gTWF0aC5zcXJ0KG4pO1xyXG4gICAgICBlID0gbWF0aGZsb29yKChlICsgMSkgLyAyKSAtIChlIDwgMCB8fCBlICUgMik7XHJcblxyXG4gICAgICBpZiAocyA9PSAxIC8gMCkge1xyXG4gICAgICAgIG4gPSAnNWUnICsgZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XHJcbiAgICAgICAgbiA9IG4uc2xpY2UoMCwgbi5pbmRleE9mKCdlJykgKyAxKSArIGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHIgPSBuZXcgQ3RvcihuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHIgPSBuZXcgQ3RvcihzLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBzID0gd3ByID0gcHIgKyAzO1xyXG5cclxuICAgIC8vIE5ld3Rvbi1SYXBoc29uIGl0ZXJhdGlvbi5cclxuICAgIGZvciAoOzspIHtcclxuICAgICAgdCA9IHI7XHJcbiAgICAgIHIgPSB0LnBsdXMoZGl2aWRlKHgsIHQsIHdwciArIDIpKS50aW1lcygwLjUpO1xyXG5cclxuICAgICAgaWYgKGRpZ2l0c1RvU3RyaW5nKHQuZCkuc2xpY2UoMCwgd3ByKSA9PT0gKG4gPSBkaWdpdHNUb1N0cmluZyhyLmQpKS5zbGljZSgwLCB3cHIpKSB7XHJcbiAgICAgICAgbiA9IG4uc2xpY2Uod3ByIC0gMywgd3ByICsgMSk7XHJcblxyXG4gICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0cyBhcmUgOTk5OSBvclxyXG4gICAgICAgIC8vIDQ5OTksIGkuZS4gYXBwcm9hY2hpbmcgYSByb3VuZGluZyBib3VuZGFyeSwgY29udGludWUgdGhlIGl0ZXJhdGlvbi5cclxuICAgICAgICBpZiAocyA9PSB3cHIgJiYgbiA9PSAnNDk5OScpIHtcclxuXHJcbiAgICAgICAgICAvLyBPbiB0aGUgZmlyc3QgaXRlcmF0aW9uIG9ubHksIGNoZWNrIHRvIHNlZSBpZiByb3VuZGluZyB1cCBnaXZlcyB0aGUgZXhhY3QgcmVzdWx0IGFzIHRoZVxyXG4gICAgICAgICAgLy8gbmluZXMgbWF5IGluZmluaXRlbHkgcmVwZWF0LlxyXG4gICAgICAgICAgcm91bmQodCwgcHIgKyAxLCAwKTtcclxuXHJcbiAgICAgICAgICBpZiAodC50aW1lcyh0KS5lcSh4KSkge1xyXG4gICAgICAgICAgICByID0gdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChuICE9ICc5OTk5Jykge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3cHIgKz0gNDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4gcm91bmQociwgcHIpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgdGltZXMgYHlgLCB0cnVuY2F0ZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRpbWVzID0gUC5tdWwgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIGNhcnJ5LCBlLCBpLCBrLCByLCByTCwgdCwgeGRMLCB5ZEwsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgeGQgPSB4LmQsXHJcbiAgICAgIHlkID0gKHkgPSBuZXcgQ3Rvcih5KSkuZDtcclxuXHJcbiAgICAvLyBSZXR1cm4gMCBpZiBlaXRoZXIgaXMgMC5cclxuICAgIGlmICgheC5zIHx8ICF5LnMpIHJldHVybiBuZXcgQ3RvcigwKTtcclxuXHJcbiAgICB5LnMgKj0geC5zO1xyXG4gICAgZSA9IHguZSArIHkuZTtcclxuICAgIHhkTCA9IHhkLmxlbmd0aDtcclxuICAgIHlkTCA9IHlkLmxlbmd0aDtcclxuXHJcbiAgICAvLyBFbnN1cmUgeGQgcG9pbnRzIHRvIHRoZSBsb25nZXIgYXJyYXkuXHJcbiAgICBpZiAoeGRMIDwgeWRMKSB7XHJcbiAgICAgIHIgPSB4ZDtcclxuICAgICAgeGQgPSB5ZDtcclxuICAgICAgeWQgPSByO1xyXG4gICAgICByTCA9IHhkTDtcclxuICAgICAgeGRMID0geWRMO1xyXG4gICAgICB5ZEwgPSByTDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXNlIHRoZSByZXN1bHQgYXJyYXkgd2l0aCB6ZXJvcy5cclxuICAgIHIgPSBbXTtcclxuICAgIHJMID0geGRMICsgeWRMO1xyXG4gICAgZm9yIChpID0gckw7IGktLTspIHIucHVzaCgwKTtcclxuXHJcbiAgICAvLyBNdWx0aXBseSFcclxuICAgIGZvciAoaSA9IHlkTDsgLS1pID49IDA7KSB7XHJcbiAgICAgIGNhcnJ5ID0gMDtcclxuICAgICAgZm9yIChrID0geGRMICsgaTsgayA+IGk7KSB7XHJcbiAgICAgICAgdCA9IHJba10gKyB5ZFtpXSAqIHhkW2sgLSBpIC0gMV0gKyBjYXJyeTtcclxuICAgICAgICByW2stLV0gPSB0ICUgQkFTRSB8IDA7XHJcbiAgICAgICAgY2FycnkgPSB0IC8gQkFTRSB8IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJba10gPSAocltrXSArIGNhcnJ5KSAlIEJBU0UgfCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoOyAhclstLXJMXTspIHIucG9wKCk7XHJcblxyXG4gICAgaWYgKGNhcnJ5KSArK2U7XHJcbiAgICBlbHNlIHIuc2hpZnQoKTtcclxuXHJcbiAgICB5LmQgPSByO1xyXG4gICAgeS5lID0gZTtcclxuXHJcbiAgICByZXR1cm4gZXh0ZXJuYWwgPyByb3VuZCh5LCBDdG9yLnByZWNpc2lvbikgOiB5O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgcm91bmRlZCB0byBhIG1heGltdW0gb2YgYGRwYFxyXG4gICAqIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJtYCBvciBgcm91bmRpbmdgIGlmIGBybWAgaXMgb21pdHRlZC5cclxuICAgKlxyXG4gICAqIElmIGBkcGAgaXMgb21pdHRlZCwgcmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbC5cclxuICAgKlxyXG4gICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYX0RJR0lUUyBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b0RlY2ltYWxQbGFjZXMgPSBQLnRvZHAgPSBmdW5jdGlvbiAoZHAsIHJtKSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIHggPSBuZXcgQ3Rvcih4KTtcclxuICAgIGlmIChkcCA9PT0gdm9pZCAwKSByZXR1cm4geDtcclxuXHJcbiAgICBjaGVja0ludDMyKGRwLCAwLCBNQVhfRElHSVRTKTtcclxuXHJcbiAgICBpZiAocm0gPT09IHZvaWQgMCkgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgZWxzZSBjaGVja0ludDMyKHJtLCAwLCA4KTtcclxuXHJcbiAgICByZXR1cm4gcm91bmQoeCwgZHAgKyBnZXRCYXNlMTBFeHBvbmVudCh4KSArIDEsIHJtKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaW4gZXhwb25lbnRpYWwgbm90YXRpb24gcm91bmRlZCB0b1xyXG4gICAqIGBkcGAgZml4ZWQgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogW2RwXSB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlcy4gSW50ZWdlciwgMCB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvRXhwb25lbnRpYWwgPSBmdW5jdGlvbiAoZHAsIHJtKSB7XHJcbiAgICB2YXIgc3RyLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgaWYgKGRwID09PSB2b2lkIDApIHtcclxuICAgICAgc3RyID0gdG9TdHJpbmcoeCwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVja0ludDMyKGRwLCAwLCBNQVhfRElHSVRTKTtcclxuXHJcbiAgICAgIGlmIChybSA9PT0gdm9pZCAwKSBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICAgIGVsc2UgY2hlY2tJbnQzMihybSwgMCwgOCk7XHJcblxyXG4gICAgICB4ID0gcm91bmQobmV3IEN0b3IoeCksIGRwICsgMSwgcm0pO1xyXG4gICAgICBzdHIgPSB0b1N0cmluZyh4LCB0cnVlLCBkcCArIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGluIG5vcm1hbCAoZml4ZWQtcG9pbnQpIG5vdGF0aW9uIHRvXHJcbiAgICogYGRwYCBmaXhlZCBkZWNpbWFsIHBsYWNlcyBhbmQgcm91bmRlZCB1c2luZyByb3VuZGluZyBtb2RlIGBybWAgb3IgYHJvdW5kaW5nYCBpZiBgcm1gIGlzXHJcbiAgICogb21pdHRlZC5cclxuICAgKlxyXG4gICAqIEFzIHdpdGggSmF2YVNjcmlwdCBudW1iZXJzLCAoLTApLnRvRml4ZWQoMCkgaXMgJzAnLCBidXQgZS5nLiAoLTAuMDAwMDEpLnRvRml4ZWQoMCkgaXMgJy0wJy5cclxuICAgKlxyXG4gICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYX0RJR0lUUyBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogKC0wKS50b0ZpeGVkKDApIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKDApIGlzICctMCcuXHJcbiAgICogKC0wKS50b0ZpeGVkKDEpIGlzICcwLjAnLCBidXQgKC0wLjAxKS50b0ZpeGVkKDEpIGlzICctMC4wJy5cclxuICAgKiAoLTApLnRvRml4ZWQoMykgaXMgJzAuMDAwJy5cclxuICAgKiAoLTAuNSkudG9GaXhlZCgwKSBpcyAnLTAnLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b0ZpeGVkID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgdmFyIHN0ciwgeSxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmIChkcCA9PT0gdm9pZCAwKSByZXR1cm4gdG9TdHJpbmcoeCk7XHJcblxyXG4gICAgY2hlY2tJbnQzMihkcCwgMCwgTUFYX0RJR0lUUyk7XHJcblxyXG4gICAgaWYgKHJtID09PSB2b2lkIDApIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIGVsc2UgY2hlY2tJbnQzMihybSwgMCwgOCk7XHJcblxyXG4gICAgeSA9IHJvdW5kKG5ldyBDdG9yKHgpLCBkcCArIGdldEJhc2UxMEV4cG9uZW50KHgpICsgMSwgcm0pO1xyXG4gICAgc3RyID0gdG9TdHJpbmcoeS5hYnMoKSwgZmFsc2UsIGRwICsgZ2V0QmFzZTEwRXhwb25lbnQoeSkgKyAxKTtcclxuXHJcbiAgICAvLyBUbyBkZXRlcm1pbmUgd2hldGhlciB0byBhZGQgdGhlIG1pbnVzIHNpZ24gbG9vayBhdCB0aGUgdmFsdWUgYmVmb3JlIGl0IHdhcyByb3VuZGVkLFxyXG4gICAgLy8gaS5lLiBsb29rIGF0IGB4YCByYXRoZXIgdGhhbiBgeWAuXHJcbiAgICByZXR1cm4geC5pc25lZygpICYmICF4LmlzWmVybygpID8gJy0nICsgc3RyIDogc3RyO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgcm91bmRlZCB0byBhIHdob2xlIG51bWJlciB1c2luZ1xyXG4gICAqIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudG9JbnRlZ2VyID0gUC50b2ludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcbiAgICByZXR1cm4gcm91bmQobmV3IEN0b3IoeCksIGdldEJhc2UxMEV4cG9uZW50KHgpICsgMSwgQ3Rvci5yb3VuZGluZyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgY29udmVydGVkIHRvIGEgbnVtYmVyIHByaW1pdGl2ZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gK3RoaXM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCByYWlzZWQgdG8gdGhlIHBvd2VyIGB5YCxcclxuICAgKiB0cnVuY2F0ZWQgdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnQgZGlnaXRzLlxyXG4gICAqXHJcbiAgICogRm9yIG5vbi1pbnRlZ2VyIG9yIHZlcnkgbGFyZ2UgZXhwb25lbnRzIHBvdyh4LCB5KSBpcyBjYWxjdWxhdGVkIHVzaW5nXHJcbiAgICpcclxuICAgKiAgIHheeSA9IGV4cCh5KmxuKHgpKVxyXG4gICAqXHJcbiAgICogVGhlIG1heGltdW0gZXJyb3IgaXMgMSB1bHAgKHVuaXQgaW4gbGFzdCBwbGFjZSkuXHJcbiAgICpcclxuICAgKiB5IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IFRoZSBwb3dlciB0byB3aGljaCB0byByYWlzZSB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvUG93ZXIgPSBQLnBvdyA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgZSwgaywgcHIsIHIsIHNpZ24sIHlJc0ludCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBndWFyZCA9IDEyLFxyXG4gICAgICB5biA9ICsoeSA9IG5ldyBDdG9yKHkpKTtcclxuXHJcbiAgICAvLyBwb3coeCwgMCkgPSAxXHJcbiAgICBpZiAoIXkucykgcmV0dXJuIG5ldyBDdG9yKE9ORSk7XHJcblxyXG4gICAgeCA9IG5ldyBDdG9yKHgpO1xyXG5cclxuICAgIC8vIHBvdygwLCB5ID4gMCkgPSAwXHJcbiAgICAvLyBwb3coMCwgeSA8IDApID0gSW5maW5pdHlcclxuICAgIGlmICgheC5zKSB7XHJcbiAgICAgIGlmICh5LnMgPCAxKSB0aHJvdyBFcnJvcihkZWNpbWFsRXJyb3IgKyAnSW5maW5pdHknKTtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcG93KDEsIHkpID0gMVxyXG4gICAgaWYgKHguZXEoT05FKSkgcmV0dXJuIHg7XHJcblxyXG4gICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuXHJcbiAgICAvLyBwb3coeCwgMSkgPSB4XHJcbiAgICBpZiAoeS5lcShPTkUpKSByZXR1cm4gcm91bmQoeCwgcHIpO1xyXG5cclxuICAgIGUgPSB5LmU7XHJcbiAgICBrID0geS5kLmxlbmd0aCAtIDE7XHJcbiAgICB5SXNJbnQgPSBlID49IGs7XHJcbiAgICBzaWduID0geC5zO1xyXG5cclxuICAgIGlmICgheUlzSW50KSB7XHJcblxyXG4gICAgICAvLyBwb3coeCA8IDAsIHkgbm9uLWludGVnZXIpID0gTmFOXHJcbiAgICAgIGlmIChzaWduIDwgMCkgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ05hTicpO1xyXG5cclxuICAgIC8vIElmIHkgaXMgYSBzbWFsbCBpbnRlZ2VyIHVzZSB0aGUgJ2V4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nJyBhbGdvcml0aG0uXHJcbiAgICB9IGVsc2UgaWYgKChrID0geW4gPCAwID8gLXluIDogeW4pIDw9IE1BWF9TQUZFX0lOVEVHRVIpIHtcclxuICAgICAgciA9IG5ldyBDdG9yKE9ORSk7XHJcblxyXG4gICAgICAvLyBNYXggayBvZiA5MDA3MTk5MjU0NzQwOTkxIHRha2VzIDUzIGxvb3AgaXRlcmF0aW9ucy5cclxuICAgICAgLy8gTWF4aW11bSBkaWdpdHMgYXJyYXkgbGVuZ3RoOyBsZWF2ZXMgWzI4LCAzNF0gZ3VhcmQgZGlnaXRzLlxyXG4gICAgICBlID0gTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UgKyA0KTtcclxuXHJcbiAgICAgIGV4dGVybmFsID0gZmFsc2U7XHJcblxyXG4gICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgaWYgKGsgJSAyKSB7XHJcbiAgICAgICAgICByID0gci50aW1lcyh4KTtcclxuICAgICAgICAgIHRydW5jYXRlKHIuZCwgZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrID0gbWF0aGZsb29yKGsgLyAyKTtcclxuICAgICAgICBpZiAoayA9PT0gMCkgYnJlYWs7XHJcblxyXG4gICAgICAgIHggPSB4LnRpbWVzKHgpO1xyXG4gICAgICAgIHRydW5jYXRlKHguZCwgZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICAgIHJldHVybiB5LnMgPCAwID8gbmV3IEN0b3IoT05FKS5kaXYocikgOiByb3VuZChyLCBwcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzdWx0IGlzIG5lZ2F0aXZlIGlmIHggaXMgbmVnYXRpdmUgYW5kIHRoZSBsYXN0IGRpZ2l0IG9mIGludGVnZXIgeSBpcyBvZGQuXHJcbiAgICBzaWduID0gc2lnbiA8IDAgJiYgeS5kW01hdGgubWF4KGUsIGspXSAmIDEgPyAtMSA6IDE7XHJcblxyXG4gICAgeC5zID0gMTtcclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICByID0geS50aW1lcyhsbih4LCBwciArIGd1YXJkKSk7XHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcbiAgICByID0gZXhwKHIpO1xyXG4gICAgci5zID0gc2lnbjtcclxuXHJcbiAgICByZXR1cm4gcjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgcm91bmRlZCB0byBgc2RgIHNpZ25pZmljYW50IGRpZ2l0c1xyXG4gICAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIFJldHVybiBleHBvbmVudGlhbCBub3RhdGlvbiBpZiBgc2RgIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50XHJcbiAgICogdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gbm9ybWFsIG5vdGF0aW9uLlxyXG4gICAqXHJcbiAgICogW3NkXSB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHMuIEludGVnZXIsIDEgdG8gTUFYX0RJR0lUUyBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b1ByZWNpc2lvbiA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICAgIHZhciBlLCBzdHIsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoc2QgPT09IHZvaWQgMCkge1xyXG4gICAgICBlID0gZ2V0QmFzZTEwRXhwb25lbnQoeCk7XHJcbiAgICAgIHN0ciA9IHRvU3RyaW5nKHgsIGUgPD0gQ3Rvci50b0V4cE5lZyB8fCBlID49IEN0b3IudG9FeHBQb3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hlY2tJbnQzMihzZCwgMSwgTUFYX0RJR0lUUyk7XHJcblxyXG4gICAgICBpZiAocm0gPT09IHZvaWQgMCkgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgICBlbHNlIGNoZWNrSW50MzIocm0sIDAsIDgpO1xyXG5cclxuICAgICAgeCA9IHJvdW5kKG5ldyBDdG9yKHgpLCBzZCwgcm0pO1xyXG4gICAgICBlID0gZ2V0QmFzZTEwRXhwb25lbnQoeCk7XHJcbiAgICAgIHN0ciA9IHRvU3RyaW5nKHgsIHNkIDw9IGUgfHwgZSA8PSBDdG9yLnRvRXhwTmVnLCBzZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIGBzZGBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm1gLCBvciB0byBgcHJlY2lzaW9uYCBhbmQgYHJvdW5kaW5nYCByZXNwZWN0aXZlbHkgaWZcclxuICAgKiBvbWl0dGVkLlxyXG4gICAqXHJcbiAgICogW3NkXSB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHMuIEludGVnZXIsIDEgdG8gTUFYX0RJR0lUUyBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b1NpZ25pZmljYW50RGlnaXRzID0gUC50b3NkID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gICAgdmFyIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoc2QgPT09IHZvaWQgMCkge1xyXG4gICAgICBzZCA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcclxuXHJcbiAgICAgIGlmIChybSA9PT0gdm9pZCAwKSBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICAgIGVsc2UgY2hlY2tJbnQzMihybSwgMCwgOCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvdW5kKG5ldyBDdG9yKHgpLCBzZCwgcm0pO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbC5cclxuICAgKlxyXG4gICAqIFJldHVybiBleHBvbmVudGlhbCBub3RhdGlvbiBpZiB0aGlzIERlY2ltYWwgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuXHJcbiAgICogYHRvRXhwUG9zYCwgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW4gYHRvRXhwTmVnYC5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudG9TdHJpbmcgPSBQLnZhbHVlT2YgPSBQLnZhbCA9IFAudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSB0aGlzLFxyXG4gICAgICBlID0gZ2V0QmFzZTEwRXhwb25lbnQoeCksXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIHJldHVybiB0b1N0cmluZyh4LCBlIDw9IEN0b3IudG9FeHBOZWcgfHwgZSA+PSBDdG9yLnRvRXhwUG9zKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgRGVjaW1hbC5wcm90b3R5cGUgKFApIGFuZC9vciBEZWNpbWFsIG1ldGhvZHMsIGFuZCB0aGVpciBjYWxsZXJzLlxyXG5cclxuXHJcbiAgLypcclxuICAgKiAgYWRkICAgICAgICAgICAgICAgICBQLm1pbnVzLCBQLnBsdXNcclxuICAgKiAgY2hlY2tJbnQzMiAgICAgICAgICBQLnRvZHAsIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnRvUHJlY2lzaW9uLCBQLnRvc2RcclxuICAgKiAgZGlnaXRzVG9TdHJpbmcgICAgICBQLmxvZywgUC5zcXJ0LCBQLnBvdywgdG9TdHJpbmcsIGV4cCwgbG5cclxuICAgKiAgZGl2aWRlICAgICAgICAgICAgICBQLmRpdiwgUC5pZGl2LCBQLmxvZywgUC5tb2QsIFAuc3FydCwgZXhwLCBsblxyXG4gICAqICBleHAgICAgICAgICAgICAgICAgIFAuZXhwLCBQLnBvd1xyXG4gICAqICBnZXRCYXNlMTBFeHBvbmVudCAgIFAuZXhwb25lbnQsIFAuc2QsIFAudG9pbnQsIFAuc3FydCwgUC50b2RwLCBQLnRvRml4ZWQsIFAudG9QcmVjaXNpb24sXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgUC50b1N0cmluZywgZGl2aWRlLCByb3VuZCwgdG9TdHJpbmcsIGV4cCwgbG5cclxuICAgKiAgZ2V0TG4xMCAgICAgICAgICAgICBQLmxvZywgbG5cclxuICAgKiAgZ2V0WmVyb1N0cmluZyAgICAgICBkaWdpdHNUb1N0cmluZywgdG9TdHJpbmdcclxuICAgKiAgbG4gICAgICAgICAgICAgICAgICBQLmxvZywgUC5sbiwgUC5wb3csIGV4cFxyXG4gICAqICBwYXJzZURlY2ltYWwgICAgICAgIERlY2ltYWxcclxuICAgKiAgcm91bmQgICAgICAgICAgICAgICBQLmFicywgUC5pZGl2LCBQLmxvZywgUC5taW51cywgUC5tb2QsIFAubmVnLCBQLnBsdXMsIFAudG9pbnQsIFAuc3FydCxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICBQLnRpbWVzLCBQLnRvZHAsIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnBvdywgUC50b1ByZWNpc2lvbiwgUC50b3NkLFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGRpdmlkZSwgZ2V0TG4xMCwgZXhwLCBsblxyXG4gICAqICBzdWJ0cmFjdCAgICAgICAgICAgIFAubWludXMsIFAucGx1c1xyXG4gICAqICB0b1N0cmluZyAgICAgICAgICAgIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnRvUHJlY2lzaW9uLCBQLnRvU3RyaW5nLCBQLnZhbHVlT2ZcclxuICAgKiAgdHJ1bmNhdGUgICAgICAgICAgICBQLnBvd1xyXG4gICAqXHJcbiAgICogIFRocm93czogICAgICAgICAgICAgUC5sb2csIFAubW9kLCBQLnNkLCBQLnNxcnQsIFAucG93LCAgY2hlY2tJbnQzMiwgZGl2aWRlLCByb3VuZCxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICBnZXRMbjEwLCBleHAsIGxuLCBwYXJzZURlY2ltYWwsIERlY2ltYWwsIGNvbmZpZ1xyXG4gICAqL1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gYWRkKHgsIHkpIHtcclxuICAgIHZhciBjYXJyeSwgZCwgZSwgaSwgaywgbGVuLCB4ZCwgeWQsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG5cclxuICAgIC8vIElmIGVpdGhlciBpcyB6ZXJvLi4uXHJcbiAgICBpZiAoIXgucyB8fCAheS5zKSB7XHJcblxyXG4gICAgICAvLyBSZXR1cm4geCBpZiB5IGlzIHplcm8uXHJcbiAgICAgIC8vIFJldHVybiB5IGlmIHkgaXMgbm9uLXplcm8uXHJcbiAgICAgIGlmICgheS5zKSB5ID0gbmV3IEN0b3IoeCk7XHJcbiAgICAgIHJldHVybiBleHRlcm5hbCA/IHJvdW5kKHksIHByKSA6IHk7XHJcbiAgICB9XHJcblxyXG4gICAgeGQgPSB4LmQ7XHJcbiAgICB5ZCA9IHkuZDtcclxuXHJcbiAgICAvLyB4IGFuZCB5IGFyZSBmaW5pdGUsIG5vbi16ZXJvIG51bWJlcnMgd2l0aCB0aGUgc2FtZSBzaWduLlxyXG5cclxuICAgIGsgPSB4LmU7XHJcbiAgICBlID0geS5lO1xyXG4gICAgeGQgPSB4ZC5zbGljZSgpO1xyXG4gICAgaSA9IGsgLSBlO1xyXG5cclxuICAgIC8vIElmIGJhc2UgMWU3IGV4cG9uZW50cyBkaWZmZXIuLi5cclxuICAgIGlmIChpKSB7XHJcbiAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgIGQgPSB4ZDtcclxuICAgICAgICBpID0gLWk7XHJcbiAgICAgICAgbGVuID0geWQubGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGQgPSB5ZDtcclxuICAgICAgICBlID0gaztcclxuICAgICAgICBsZW4gPSB4ZC5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIExpbWl0IG51bWJlciBvZiB6ZXJvcyBwcmVwZW5kZWQgdG8gbWF4KGNlaWwocHIgLyBMT0dfQkFTRSksIGxlbikgKyAxLlxyXG4gICAgICBrID0gTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UpO1xyXG4gICAgICBsZW4gPSBrID4gbGVuID8gayArIDEgOiBsZW4gKyAxO1xyXG5cclxuICAgICAgaWYgKGkgPiBsZW4pIHtcclxuICAgICAgICBpID0gbGVuO1xyXG4gICAgICAgIGQubGVuZ3RoID0gMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuIE5vdGU6IEZhc3RlciB0byB1c2UgcmV2ZXJzZSB0aGVuIGRvIHVuc2hpZnRzLlxyXG4gICAgICBkLnJldmVyc2UoKTtcclxuICAgICAgZm9yICg7IGktLTspIGQucHVzaCgwKTtcclxuICAgICAgZC5yZXZlcnNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGVuID0geGQubGVuZ3RoO1xyXG4gICAgaSA9IHlkLmxlbmd0aDtcclxuXHJcbiAgICAvLyBJZiB5ZCBpcyBsb25nZXIgdGhhbiB4ZCwgc3dhcCB4ZCBhbmQgeWQgc28geGQgcG9pbnRzIHRvIHRoZSBsb25nZXIgYXJyYXkuXHJcbiAgICBpZiAobGVuIC0gaSA8IDApIHtcclxuICAgICAgaSA9IGxlbjtcclxuICAgICAgZCA9IHlkO1xyXG4gICAgICB5ZCA9IHhkO1xyXG4gICAgICB4ZCA9IGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT25seSBzdGFydCBhZGRpbmcgYXQgeWQubGVuZ3RoIC0gMSBhcyB0aGUgZnVydGhlciBkaWdpdHMgb2YgeGQgY2FuIGJlIGxlZnQgYXMgdGhleSBhcmUuXHJcbiAgICBmb3IgKGNhcnJ5ID0gMDsgaTspIHtcclxuICAgICAgY2FycnkgPSAoeGRbLS1pXSA9IHhkW2ldICsgeWRbaV0gKyBjYXJyeSkgLyBCQVNFIHwgMDtcclxuICAgICAgeGRbaV0gJT0gQkFTRTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2FycnkpIHtcclxuICAgICAgeGQudW5zaGlmdChjYXJyeSk7XHJcbiAgICAgICsrZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciB6ZXJvLCBhcyAreCArICt5ICE9IDAgJiYgLXggKyAteSAhPSAwXHJcbiAgICBmb3IgKGxlbiA9IHhkLmxlbmd0aDsgeGRbLS1sZW5dID09IDA7KSB4ZC5wb3AoKTtcclxuXHJcbiAgICB5LmQgPSB4ZDtcclxuICAgIHkuZSA9IGU7XHJcblxyXG4gICAgcmV0dXJuIGV4dGVybmFsID8gcm91bmQoeSwgcHIpIDogeTtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBjaGVja0ludDMyKGksIG1pbiwgbWF4KSB7XHJcbiAgICBpZiAoaSAhPT0gfn5pIHx8IGkgPCBtaW4gfHwgaSA+IG1heCkge1xyXG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBkaWdpdHNUb1N0cmluZyhkKSB7XHJcbiAgICB2YXIgaSwgaywgd3MsXHJcbiAgICAgIGluZGV4T2ZMYXN0V29yZCA9IGQubGVuZ3RoIC0gMSxcclxuICAgICAgc3RyID0gJycsXHJcbiAgICAgIHcgPSBkWzBdO1xyXG5cclxuICAgIGlmIChpbmRleE9mTGFzdFdvcmQgPiAwKSB7XHJcbiAgICAgIHN0ciArPSB3O1xyXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgaW5kZXhPZkxhc3RXb3JkOyBpKyspIHtcclxuICAgICAgICB3cyA9IGRbaV0gKyAnJztcclxuICAgICAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGspIHN0ciArPSBnZXRaZXJvU3RyaW5nKGspO1xyXG4gICAgICAgIHN0ciArPSB3cztcclxuICAgICAgfVxyXG5cclxuICAgICAgdyA9IGRbaV07XHJcbiAgICAgIHdzID0gdyArICcnO1xyXG4gICAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XHJcbiAgICAgIGlmIChrKSBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcclxuICAgIH0gZWxzZSBpZiAodyA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gJzAnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcyBvZiBsYXN0IHcuXHJcbiAgICBmb3IgKDsgdyAlIDEwID09PSAwOykgdyAvPSAxMDtcclxuXHJcbiAgICByZXR1cm4gc3RyICsgdztcclxuICB9XHJcblxyXG5cclxuICB2YXIgZGl2aWRlID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvLyBBc3N1bWVzIG5vbi16ZXJvIHggYW5kIGssIGFuZCBoZW5jZSBub24temVybyByZXN1bHQuXHJcbiAgICBmdW5jdGlvbiBtdWx0aXBseUludGVnZXIoeCwgaykge1xyXG4gICAgICB2YXIgdGVtcCxcclxuICAgICAgICBjYXJyeSA9IDAsXHJcbiAgICAgICAgaSA9IHgubGVuZ3RoO1xyXG5cclxuICAgICAgZm9yICh4ID0geC5zbGljZSgpOyBpLS07KSB7XHJcbiAgICAgICAgdGVtcCA9IHhbaV0gKiBrICsgY2Fycnk7XHJcbiAgICAgICAgeFtpXSA9IHRlbXAgJSBCQVNFIHwgMDtcclxuICAgICAgICBjYXJyeSA9IHRlbXAgLyBCQVNFIHwgMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNhcnJ5KSB4LnVuc2hpZnQoY2FycnkpO1xyXG5cclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcGFyZShhLCBiLCBhTCwgYkwpIHtcclxuICAgICAgdmFyIGksIHI7XHJcblxyXG4gICAgICBpZiAoYUwgIT0gYkwpIHtcclxuICAgICAgICByID0gYUwgPiBiTCA/IDEgOiAtMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGkgPSByID0gMDsgaSA8IGFMOyBpKyspIHtcclxuICAgICAgICAgIGlmIChhW2ldICE9IGJbaV0pIHtcclxuICAgICAgICAgICAgciA9IGFbaV0gPiBiW2ldID8gMSA6IC0xO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0KGEsIGIsIGFMKSB7XHJcbiAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IGIgZnJvbSBhLlxyXG4gICAgICBmb3IgKDsgYUwtLTspIHtcclxuICAgICAgICBhW2FMXSAtPSBpO1xyXG4gICAgICAgIGkgPSBhW2FMXSA8IGJbYUxdID8gMSA6IDA7XHJcbiAgICAgICAgYVthTF0gPSBpICogQkFTRSArIGFbYUxdIC0gYlthTF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKDsgIWFbMF0gJiYgYS5sZW5ndGggPiAxOykgYS5zaGlmdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgcHIsIGRwKSB7XHJcbiAgICAgIHZhciBjbXAsIGUsIGksIGssIHByb2QsIHByb2RMLCBxLCBxZCwgcmVtLCByZW1MLCByZW0wLCBzZCwgdCwgeGksIHhMLCB5ZDAsIHlMLCB5eixcclxuICAgICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgICBzaWduID0geC5zID09IHkucyA/IDEgOiAtMSxcclxuICAgICAgICB4ZCA9IHguZCxcclxuICAgICAgICB5ZCA9IHkuZDtcclxuXHJcbiAgICAgIC8vIEVpdGhlciAwP1xyXG4gICAgICBpZiAoIXgucykgcmV0dXJuIG5ldyBDdG9yKHgpO1xyXG4gICAgICBpZiAoIXkucykgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ0RpdmlzaW9uIGJ5IHplcm8nKTtcclxuXHJcbiAgICAgIGUgPSB4LmUgLSB5LmU7XHJcbiAgICAgIHlMID0geWQubGVuZ3RoO1xyXG4gICAgICB4TCA9IHhkLmxlbmd0aDtcclxuICAgICAgcSA9IG5ldyBDdG9yKHNpZ24pO1xyXG4gICAgICBxZCA9IHEuZCA9IFtdO1xyXG5cclxuICAgICAgLy8gUmVzdWx0IGV4cG9uZW50IG1heSBiZSBvbmUgbGVzcyB0aGFuIGUuXHJcbiAgICAgIGZvciAoaSA9IDA7IHlkW2ldID09ICh4ZFtpXSB8fCAwKTsgKSArK2k7XHJcbiAgICAgIGlmICh5ZFtpXSA+ICh4ZFtpXSB8fCAwKSkgLS1lO1xyXG5cclxuICAgICAgaWYgKHByID09IG51bGwpIHtcclxuICAgICAgICBzZCA9IHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICAgIH0gZWxzZSBpZiAoZHApIHtcclxuICAgICAgICBzZCA9IHByICsgKGdldEJhc2UxMEV4cG9uZW50KHgpIC0gZ2V0QmFzZTEwRXhwb25lbnQoeSkpICsgMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZCA9IHByO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2QgPCAwKSByZXR1cm4gbmV3IEN0b3IoMCk7XHJcblxyXG4gICAgICAvLyBDb252ZXJ0IHByZWNpc2lvbiBpbiBudW1iZXIgb2YgYmFzZSAxMCBkaWdpdHMgdG8gYmFzZSAxZTcgZGlnaXRzLlxyXG4gICAgICBzZCA9IHNkIC8gTE9HX0JBU0UgKyAyIHwgMDtcclxuICAgICAgaSA9IDA7XHJcblxyXG4gICAgICAvLyBkaXZpc29yIDwgMWU3XHJcbiAgICAgIGlmICh5TCA9PSAxKSB7XHJcbiAgICAgICAgayA9IDA7XHJcbiAgICAgICAgeWQgPSB5ZFswXTtcclxuICAgICAgICBzZCsrO1xyXG5cclxuICAgICAgICAvLyBrIGlzIHRoZSBjYXJyeS5cclxuICAgICAgICBmb3IgKDsgKGkgPCB4TCB8fCBrKSAmJiBzZC0tOyBpKyspIHtcclxuICAgICAgICAgIHQgPSBrICogQkFTRSArICh4ZFtpXSB8fCAwKTtcclxuICAgICAgICAgIHFkW2ldID0gdCAvIHlkIHwgMDtcclxuICAgICAgICAgIGsgPSB0ICUgeWQgfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIC8vIGRpdmlzb3IgPj0gMWU3XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIE5vcm1hbGlzZSB4ZCBhbmQgeWQgc28gaGlnaGVzdCBvcmRlciBkaWdpdCBvZiB5ZCBpcyA+PSBCQVNFLzJcclxuICAgICAgICBrID0gQkFTRSAvICh5ZFswXSArIDEpIHwgMDtcclxuXHJcbiAgICAgICAgaWYgKGsgPiAxKSB7XHJcbiAgICAgICAgICB5ZCA9IG11bHRpcGx5SW50ZWdlcih5ZCwgayk7XHJcbiAgICAgICAgICB4ZCA9IG11bHRpcGx5SW50ZWdlcih4ZCwgayk7XHJcbiAgICAgICAgICB5TCA9IHlkLmxlbmd0aDtcclxuICAgICAgICAgIHhMID0geGQubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeGkgPSB5TDtcclxuICAgICAgICByZW0gPSB4ZC5zbGljZSgwLCB5TCk7XHJcbiAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIEFkZCB6ZXJvcyB0byBtYWtlIHJlbWFpbmRlciBhcyBsb25nIGFzIGRpdmlzb3IuXHJcbiAgICAgICAgZm9yICg7IHJlbUwgPCB5TDspIHJlbVtyZW1MKytdID0gMDtcclxuXHJcbiAgICAgICAgeXogPSB5ZC5zbGljZSgpO1xyXG4gICAgICAgIHl6LnVuc2hpZnQoMCk7XHJcbiAgICAgICAgeWQwID0geWRbMF07XHJcblxyXG4gICAgICAgIGlmICh5ZFsxXSA+PSBCQVNFIC8gMikgKyt5ZDA7XHJcblxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgIGsgPSAwO1xyXG5cclxuICAgICAgICAgIC8vIENvbXBhcmUgZGl2aXNvciBhbmQgcmVtYWluZGVyLlxyXG4gICAgICAgICAgY21wID0gY29tcGFyZSh5ZCwgcmVtLCB5TCwgcmVtTCk7XHJcblxyXG4gICAgICAgICAgLy8gSWYgZGl2aXNvciA8IHJlbWFpbmRlci5cclxuICAgICAgICAgIGlmIChjbXAgPCAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdHJpYWwgZGlnaXQsIGsuXHJcbiAgICAgICAgICAgIHJlbTAgPSByZW1bMF07XHJcbiAgICAgICAgICAgIGlmICh5TCAhPSByZW1MKSByZW0wID0gcmVtMCAqIEJBU0UgKyAocmVtWzFdIHx8IDApO1xyXG5cclxuICAgICAgICAgICAgLy8gayB3aWxsIGJlIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byB0aGUgY3VycmVudCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIGsgPSByZW0wIC8geWQwIHwgMDtcclxuXHJcbiAgICAgICAgICAgIC8vICBBbGdvcml0aG06XHJcbiAgICAgICAgICAgIC8vICAxLiBwcm9kdWN0ID0gZGl2aXNvciAqIHRyaWFsIGRpZ2l0IChrKVxyXG4gICAgICAgICAgICAvLyAgMi4gaWYgcHJvZHVjdCA+IHJlbWFpbmRlcjogcHJvZHVjdCAtPSBkaXZpc29yLCBrLS1cclxuICAgICAgICAgICAgLy8gIDMuIHJlbWFpbmRlciAtPSBwcm9kdWN0XHJcbiAgICAgICAgICAgIC8vICA0LiBpZiBwcm9kdWN0IHdhcyA8IHJlbWFpbmRlciBhdCAyOlxyXG4gICAgICAgICAgICAvLyAgICA1LiBjb21wYXJlIG5ldyByZW1haW5kZXIgYW5kIGRpdmlzb3JcclxuICAgICAgICAgICAgLy8gICAgNi4gSWYgcmVtYWluZGVyID4gZGl2aXNvcjogcmVtYWluZGVyIC09IGRpdmlzb3IsIGsrK1xyXG5cclxuICAgICAgICAgICAgaWYgKGsgPiAxKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGsgPj0gQkFTRSkgayA9IEJBU0UgLSAxO1xyXG5cclxuICAgICAgICAgICAgICAvLyBwcm9kdWN0ID0gZGl2aXNvciAqIHRyaWFsIGRpZ2l0LlxyXG4gICAgICAgICAgICAgIHByb2QgPSBtdWx0aXBseUludGVnZXIoeWQsIGspO1xyXG4gICAgICAgICAgICAgIHByb2RMID0gcHJvZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgIC8vIENvbXBhcmUgcHJvZHVjdCBhbmQgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIGNtcCA9IGNvbXBhcmUocHJvZCwgcmVtLCBwcm9kTCwgcmVtTCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHByb2R1Y3QgPiByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgaWYgKGNtcCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBrLS07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHByb2R1Y3QuXHJcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdChwcm9kLCB5TCA8IHByb2RMID8geXogOiB5ZCwgcHJvZEwpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gY21wIGlzIC0xLlxyXG4gICAgICAgICAgICAgIC8vIElmIGsgaXMgMCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb21wYXJlIHlkIGFuZCByZW0gYWdhaW4gYmVsb3csIHNvIGNoYW5nZSBjbXAgdG8gMVxyXG4gICAgICAgICAgICAgIC8vIHRvIGF2b2lkIGl0LiBJZiBrIGlzIDEgdGhlcmUgaXMgYSBuZWVkIHRvIGNvbXBhcmUgeWQgYW5kIHJlbSBhZ2FpbiBiZWxvdy5cclxuICAgICAgICAgICAgICBpZiAoayA9PSAwKSBjbXAgPSBrID0gMTtcclxuICAgICAgICAgICAgICBwcm9kID0geWQuc2xpY2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHByb2RMIDwgcmVtTCkgcHJvZC51bnNoaWZ0KDApO1xyXG5cclxuICAgICAgICAgICAgLy8gU3VidHJhY3QgcHJvZHVjdCBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgc3VidHJhY3QocmVtLCBwcm9kLCByZW1MKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHByb2R1Y3Qgd2FzIDwgcHJldmlvdXMgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgIC8vIENvbXBhcmUgZGl2aXNvciBhbmQgbmV3IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKHlkLCByZW0sIHlMLCByZW1MKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgaWYgKGNtcCA8IDEpIHtcclxuICAgICAgICAgICAgICAgIGsrKztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgICAgc3VidHJhY3QocmVtLCB5TCA8IHJlbUwgPyB5eiA6IHlkLCByZW1MKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgaysrO1xyXG4gICAgICAgICAgICByZW0gPSBbMF07XHJcbiAgICAgICAgICB9ICAgIC8vIGlmIGNtcCA9PT0gMSwgayB3aWxsIGJlIDBcclxuXHJcbiAgICAgICAgICAvLyBBZGQgdGhlIG5leHQgZGlnaXQsIGssIHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICAgICAgICBxZFtpKytdID0gaztcclxuXHJcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJlbWFpbmRlci5cclxuICAgICAgICAgIGlmIChjbXAgJiYgcmVtWzBdKSB7XHJcbiAgICAgICAgICAgIHJlbVtyZW1MKytdID0geGRbeGldIHx8IDA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZW0gPSBbeGRbeGldXTtcclxuICAgICAgICAgICAgcmVtTCA9IDE7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gd2hpbGUgKCh4aSsrIDwgeEwgfHwgcmVtWzBdICE9PSB2b2lkIDApICYmIHNkLS0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBMZWFkaW5nIHplcm8/XHJcbiAgICAgIGlmICghcWRbMF0pIHFkLnNoaWZ0KCk7XHJcblxyXG4gICAgICBxLmUgPSBlO1xyXG5cclxuICAgICAgcmV0dXJuIHJvdW5kKHEsIGRwID8gcHIgKyBnZXRCYXNlMTBFeHBvbmVudChxKSArIDEgOiBwcik7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGV4cG9uZW50aWFsIG9mIGB4YCB0cnVuY2F0ZWQgdG8gYHNkYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgKlxyXG4gICAqIFRheWxvci9NYWNsYXVyaW4gc2VyaWVzLlxyXG4gICAqXHJcbiAgICogZXhwKHgpID0geF4wLzAhICsgeF4xLzEhICsgeF4yLzIhICsgeF4zLzMhICsgLi4uXHJcbiAgICpcclxuICAgKiBBcmd1bWVudCByZWR1Y3Rpb246XHJcbiAgICogICBSZXBlYXQgeCA9IHggLyAzMiwgayArPSA1LCB1bnRpbCB8eHwgPCAwLjFcclxuICAgKiAgIGV4cCh4KSA9IGV4cCh4IC8gMl5rKV4oMl5rKVxyXG4gICAqXHJcbiAgICogUHJldmlvdXNseSwgdGhlIGFyZ3VtZW50IHdhcyBpbml0aWFsbHkgcmVkdWNlZCBieVxyXG4gICAqIGV4cCh4KSA9IGV4cChyKSAqIDEwXmsgIHdoZXJlIHIgPSB4IC0gayAqIGxuMTAsIGsgPSBmbG9vcih4IC8gbG4xMClcclxuICAgKiB0byBmaXJzdCBwdXQgciBpbiB0aGUgcmFuZ2UgWzAsIGxuMTBdLCBiZWZvcmUgZGl2aWRpbmcgYnkgMzIgdW50aWwgfHh8IDwgMC4xLCBidXQgdGhpcyB3YXNcclxuICAgKiBmb3VuZCB0byBiZSBzbG93ZXIgdGhhbiBqdXN0IGRpdmlkaW5nIHJlcGVhdGVkbHkgYnkgMzIgYXMgYWJvdmUuXHJcbiAgICpcclxuICAgKiAoTWF0aCBvYmplY3QgaW50ZWdlciBtaW4vbWF4OiBNYXRoLmV4cCg3MDkpID0gOC4yZSszMDcsIE1hdGguZXhwKC03NDUpID0gNWUtMzI0KVxyXG4gICAqXHJcbiAgICogIGV4cCh4KSBpcyBub24tdGVybWluYXRpbmcgZm9yIGFueSBmaW5pdGUsIG5vbi16ZXJvIHguXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBleHAoeCwgc2QpIHtcclxuICAgIHZhciBkZW5vbWluYXRvciwgZ3VhcmQsIHBvdywgc3VtLCB0LCB3cHIsXHJcbiAgICAgIGkgPSAwLFxyXG4gICAgICBrID0gMCxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcblxyXG4gICAgaWYgKGdldEJhc2UxMEV4cG9uZW50KHgpID4gMTYpIHRocm93IEVycm9yKGV4cG9uZW50T3V0T2ZSYW5nZSArIGdldEJhc2UxMEV4cG9uZW50KHgpKTtcclxuXHJcbiAgICAvLyBleHAoMCkgPSAxXHJcbiAgICBpZiAoIXgucykgcmV0dXJuIG5ldyBDdG9yKE9ORSk7XHJcblxyXG4gICAgaWYgKHNkID09IG51bGwpIHtcclxuICAgICAgZXh0ZXJuYWwgPSBmYWxzZTtcclxuICAgICAgd3ByID0gcHI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3cHIgPSBzZDtcclxuICAgIH1cclxuXHJcbiAgICB0ID0gbmV3IEN0b3IoMC4wMzEyNSk7XHJcblxyXG4gICAgd2hpbGUgKHguYWJzKCkuZ3RlKDAuMSkpIHtcclxuICAgICAgeCA9IHgudGltZXModCk7ICAgIC8vIHggPSB4IC8gMl41XHJcbiAgICAgIGsgKz0gNTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFc3RpbWF0ZSB0aGUgcHJlY2lzaW9uIGluY3JlYXNlIG5lY2Vzc2FyeSB0byBlbnN1cmUgdGhlIGZpcnN0IDQgcm91bmRpbmcgZGlnaXRzIGFyZSBjb3JyZWN0LlxyXG4gICAgZ3VhcmQgPSBNYXRoLmxvZyhtYXRocG93KDIsIGspKSAvIE1hdGguTE4xMCAqIDIgKyA1IHwgMDtcclxuICAgIHdwciArPSBndWFyZDtcclxuICAgIGRlbm9taW5hdG9yID0gcG93ID0gc3VtID0gbmV3IEN0b3IoT05FKTtcclxuICAgIEN0b3IucHJlY2lzaW9uID0gd3ByO1xyXG5cclxuICAgIGZvciAoOzspIHtcclxuICAgICAgcG93ID0gcm91bmQocG93LnRpbWVzKHgpLCB3cHIpO1xyXG4gICAgICBkZW5vbWluYXRvciA9IGRlbm9taW5hdG9yLnRpbWVzKCsraSk7XHJcbiAgICAgIHQgPSBzdW0ucGx1cyhkaXZpZGUocG93LCBkZW5vbWluYXRvciwgd3ByKSk7XHJcblxyXG4gICAgICBpZiAoZGlnaXRzVG9TdHJpbmcodC5kKS5zbGljZSgwLCB3cHIpID09PSBkaWdpdHNUb1N0cmluZyhzdW0uZCkuc2xpY2UoMCwgd3ByKSkge1xyXG4gICAgICAgIHdoaWxlIChrLS0pIHN1bSA9IHJvdW5kKHN1bS50aW1lcyhzdW0pLCB3cHIpO1xyXG4gICAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICAgICAgcmV0dXJuIHNkID09IG51bGwgPyAoZXh0ZXJuYWwgPSB0cnVlLCByb3VuZChzdW0sIHByKSkgOiBzdW07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN1bSA9IHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSBiYXNlIDEwIGV4cG9uZW50IGZyb20gdGhlIGJhc2UgMWU3IGV4cG9uZW50LlxyXG4gIGZ1bmN0aW9uIGdldEJhc2UxMEV4cG9uZW50KHgpIHtcclxuICAgIHZhciBlID0geC5lICogTE9HX0JBU0UsXHJcbiAgICAgIHcgPSB4LmRbMF07XHJcblxyXG4gICAgLy8gQWRkIHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHRoZSBmaXJzdCB3b3JkIG9mIHRoZSBkaWdpdHMgYXJyYXkuXHJcbiAgICBmb3IgKDsgdyA+PSAxMDsgdyAvPSAxMCkgZSsrO1xyXG4gICAgcmV0dXJuIGU7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gZ2V0TG4xMChDdG9yLCBzZCwgcHIpIHtcclxuXHJcbiAgICBpZiAoc2QgPiBDdG9yLkxOMTAuc2QoKSkge1xyXG5cclxuXHJcbiAgICAgIC8vIFJlc2V0IGdsb2JhbCBzdGF0ZSBpbiBjYXNlIHRoZSBleGNlcHRpb24gaXMgY2F1Z2h0LlxyXG4gICAgICBleHRlcm5hbCA9IHRydWU7XHJcbiAgICAgIGlmIChwcikgQ3Rvci5wcmVjaXNpb24gPSBwcjtcclxuICAgICAgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ0xOMTAgcHJlY2lzaW9uIGxpbWl0IGV4Y2VlZGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvdW5kKG5ldyBDdG9yKEN0b3IuTE4xMCksIHNkKTtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBnZXRaZXJvU3RyaW5nKGspIHtcclxuICAgIHZhciB6cyA9ICcnO1xyXG4gICAgZm9yICg7IGstLTspIHpzICs9ICcwJztcclxuICAgIHJldHVybiB6cztcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiBgeGAgdHJ1bmNhdGVkIHRvIGBzZGAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMuXHJcbiAgICpcclxuICAgKiAgbG4obikgaXMgbm9uLXRlcm1pbmF0aW5nIChuICE9IDEpXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBsbih5LCBzZCkge1xyXG4gICAgdmFyIGMsIGMwLCBkZW5vbWluYXRvciwgZSwgbnVtZXJhdG9yLCBzdW0sIHQsIHdwciwgeDIsXHJcbiAgICAgIG4gPSAxLFxyXG4gICAgICBndWFyZCA9IDEwLFxyXG4gICAgICB4ID0geSxcclxuICAgICAgeGQgPSB4LmQsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG5cclxuICAgIC8vIGxuKC14KSA9IE5hTlxyXG4gICAgLy8gbG4oMCkgPSAtSW5maW5pdHlcclxuICAgIGlmICh4LnMgPCAxKSB0aHJvdyBFcnJvcihkZWNpbWFsRXJyb3IgKyAoeC5zID8gJ05hTicgOiAnLUluZmluaXR5JykpO1xyXG5cclxuICAgIC8vIGxuKDEpID0gMFxyXG4gICAgaWYgKHguZXEoT05FKSkgcmV0dXJuIG5ldyBDdG9yKDApO1xyXG5cclxuICAgIGlmIChzZCA9PSBudWxsKSB7XHJcbiAgICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICAgIHdwciA9IHByO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd3ByID0gc2Q7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHguZXEoMTApKSB7XHJcbiAgICAgIGlmIChzZCA9PSBudWxsKSBleHRlcm5hbCA9IHRydWU7XHJcbiAgICAgIHJldHVybiBnZXRMbjEwKEN0b3IsIHdwcik7XHJcbiAgICB9XHJcblxyXG4gICAgd3ByICs9IGd1YXJkO1xyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSB3cHI7XHJcbiAgICBjID0gZGlnaXRzVG9TdHJpbmcoeGQpO1xyXG4gICAgYzAgPSBjLmNoYXJBdCgwKTtcclxuICAgIGUgPSBnZXRCYXNlMTBFeHBvbmVudCh4KTtcclxuXHJcbiAgICBpZiAoTWF0aC5hYnMoZSkgPCAxLjVlMTUpIHtcclxuXHJcbiAgICAgIC8vIEFyZ3VtZW50IHJlZHVjdGlvbi5cclxuICAgICAgLy8gVGhlIHNlcmllcyBjb252ZXJnZXMgZmFzdGVyIHRoZSBjbG9zZXIgdGhlIGFyZ3VtZW50IGlzIHRvIDEsIHNvIHVzaW5nXHJcbiAgICAgIC8vIGxuKGFeYikgPSBiICogbG4oYSksICAgbG4oYSkgPSBsbihhXmIpIC8gYlxyXG4gICAgICAvLyBtdWx0aXBseSB0aGUgYXJndW1lbnQgYnkgaXRzZWxmIHVudGlsIHRoZSBsZWFkaW5nIGRpZ2l0cyBvZiB0aGUgc2lnbmlmaWNhbmQgYXJlIDcsIDgsIDksXHJcbiAgICAgIC8vIDEwLCAxMSwgMTIgb3IgMTMsIHJlY29yZGluZyB0aGUgbnVtYmVyIG9mIG11bHRpcGxpY2F0aW9ucyBzbyB0aGUgc3VtIG9mIHRoZSBzZXJpZXMgY2FuXHJcbiAgICAgIC8vIGxhdGVyIGJlIGRpdmlkZWQgYnkgdGhpcyBudW1iZXIsIHRoZW4gc2VwYXJhdGUgb3V0IHRoZSBwb3dlciBvZiAxMCB1c2luZ1xyXG4gICAgICAvLyBsbihhKjEwXmIpID0gbG4oYSkgKyBiKmxuKDEwKS5cclxuXHJcbiAgICAgIC8vIG1heCBuIGlzIDIxIChnaXZlcyAwLjksIDEuMCBvciAxLjEpICg5ZTE1IC8gMjEgPSA0LjJlMTQpLlxyXG4gICAgICAvL3doaWxlIChjMCA8IDkgJiYgYzAgIT0gMSB8fCBjMCA9PSAxICYmIGMuY2hhckF0KDEpID4gMSkge1xyXG4gICAgICAvLyBtYXggbiBpcyA2IChnaXZlcyAwLjcgLSAxLjMpXHJcbiAgICAgIHdoaWxlIChjMCA8IDcgJiYgYzAgIT0gMSB8fCBjMCA9PSAxICYmIGMuY2hhckF0KDEpID4gMykge1xyXG4gICAgICAgIHggPSB4LnRpbWVzKHkpO1xyXG4gICAgICAgIGMgPSBkaWdpdHNUb1N0cmluZyh4LmQpO1xyXG4gICAgICAgIGMwID0gYy5jaGFyQXQoMCk7XHJcbiAgICAgICAgbisrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlID0gZ2V0QmFzZTEwRXhwb25lbnQoeCk7XHJcblxyXG4gICAgICBpZiAoYzAgPiAxKSB7XHJcbiAgICAgICAgeCA9IG5ldyBDdG9yKCcwLicgKyBjKTtcclxuICAgICAgICBlKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeCA9IG5ldyBDdG9yKGMwICsgJy4nICsgYy5zbGljZSgxKSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBUaGUgYXJndW1lbnQgcmVkdWN0aW9uIG1ldGhvZCBhYm92ZSBtYXkgcmVzdWx0IGluIG92ZXJmbG93IGlmIHRoZSBhcmd1bWVudCB5IGlzIGEgbWFzc2l2ZVxyXG4gICAgICAvLyBudW1iZXIgd2l0aCBleHBvbmVudCA+PSAxNTAwMDAwMDAwMDAwMDAwICg5ZTE1IC8gNiA9IDEuNWUxNSksIHNvIGluc3RlYWQgcmVjYWxsIHRoaXNcclxuICAgICAgLy8gZnVuY3Rpb24gdXNpbmcgbG4oeCoxMF5lKSA9IGxuKHgpICsgZSpsbigxMCkuXHJcbiAgICAgIHQgPSBnZXRMbjEwKEN0b3IsIHdwciArIDIsIHByKS50aW1lcyhlICsgJycpO1xyXG4gICAgICB4ID0gbG4obmV3IEN0b3IoYzAgKyAnLicgKyBjLnNsaWNlKDEpKSwgd3ByIC0gZ3VhcmQpLnBsdXModCk7XHJcblxyXG4gICAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgICByZXR1cm4gc2QgPT0gbnVsbCA/IChleHRlcm5hbCA9IHRydWUsIHJvdW5kKHgsIHByKSkgOiB4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHggaXMgcmVkdWNlZCB0byBhIHZhbHVlIG5lYXIgMS5cclxuXHJcbiAgICAvLyBUYXlsb3Igc2VyaWVzLlxyXG4gICAgLy8gbG4oeSkgPSBsbigoMSArIHgpLygxIC0geCkpID0gMih4ICsgeF4zLzMgKyB4XjUvNSArIHheNy83ICsgLi4uKVxyXG4gICAgLy8gd2hlcmUgeCA9ICh5IC0gMSkvKHkgKyAxKSAgICAofHh8IDwgMSlcclxuICAgIHN1bSA9IG51bWVyYXRvciA9IHggPSBkaXZpZGUoeC5taW51cyhPTkUpLCB4LnBsdXMoT05FKSwgd3ByKTtcclxuICAgIHgyID0gcm91bmQoeC50aW1lcyh4KSwgd3ByKTtcclxuICAgIGRlbm9taW5hdG9yID0gMztcclxuXHJcbiAgICBmb3IgKDs7KSB7XHJcbiAgICAgIG51bWVyYXRvciA9IHJvdW5kKG51bWVyYXRvci50aW1lcyh4MiksIHdwcik7XHJcbiAgICAgIHQgPSBzdW0ucGx1cyhkaXZpZGUobnVtZXJhdG9yLCBuZXcgQ3RvcihkZW5vbWluYXRvciksIHdwcikpO1xyXG5cclxuICAgICAgaWYgKGRpZ2l0c1RvU3RyaW5nKHQuZCkuc2xpY2UoMCwgd3ByKSA9PT0gZGlnaXRzVG9TdHJpbmcoc3VtLmQpLnNsaWNlKDAsIHdwcikpIHtcclxuICAgICAgICBzdW0gPSBzdW0udGltZXMoMik7XHJcblxyXG4gICAgICAgIC8vIFJldmVyc2UgdGhlIGFyZ3VtZW50IHJlZHVjdGlvbi5cclxuICAgICAgICBpZiAoZSAhPT0gMCkgc3VtID0gc3VtLnBsdXMoZ2V0TG4xMChDdG9yLCB3cHIgKyAyLCBwcikudGltZXMoZSArICcnKSk7XHJcbiAgICAgICAgc3VtID0gZGl2aWRlKHN1bSwgbmV3IEN0b3IobiksIHdwcik7XHJcblxyXG4gICAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICAgICAgcmV0dXJuIHNkID09IG51bGwgPyAoZXh0ZXJuYWwgPSB0cnVlLCByb3VuZChzdW0sIHByKSkgOiBzdW07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN1bSA9IHQ7XHJcbiAgICAgIGRlbm9taW5hdG9yICs9IDI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBQYXJzZSB0aGUgdmFsdWUgb2YgYSBuZXcgRGVjaW1hbCBgeGAgZnJvbSBzdHJpbmcgYHN0cmAuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcGFyc2VEZWNpbWFsKHgsIHN0cikge1xyXG4gICAgdmFyIGUsIGksIGxlbjtcclxuXHJcbiAgICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gICAgaWYgKChlID0gc3RyLmluZGV4T2YoJy4nKSkgPiAtMSkgc3RyID0gc3RyLnJlcGxhY2UoJy4nLCAnJyk7XHJcblxyXG4gICAgLy8gRXhwb25lbnRpYWwgZm9ybT9cclxuICAgIGlmICgoaSA9IHN0ci5zZWFyY2goL2UvaSkpID4gMCkge1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIGV4cG9uZW50LlxyXG4gICAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgICBlICs9ICtzdHIuc2xpY2UoaSArIDEpO1xyXG4gICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgLy8gSW50ZWdlci5cclxuICAgICAgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIGxlYWRpbmcgemVyb3MuXHJcbiAgICBmb3IgKGkgPSAwOyBzdHIuY2hhckNvZGVBdChpKSA9PT0gNDg7KSArK2k7XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBzdHIuY2hhckNvZGVBdChsZW4gLSAxKSA9PT0gNDg7KSAtLWxlbjtcclxuICAgIHN0ciA9IHN0ci5zbGljZShpLCBsZW4pO1xyXG5cclxuICAgIGlmIChzdHIpIHtcclxuICAgICAgbGVuIC09IGk7XHJcbiAgICAgIGUgPSBlIC0gaSAtIDE7XHJcbiAgICAgIHguZSA9IG1hdGhmbG9vcihlIC8gTE9HX0JBU0UpO1xyXG4gICAgICB4LmQgPSBbXTtcclxuXHJcbiAgICAgIC8vIFRyYW5zZm9ybSBiYXNlXHJcblxyXG4gICAgICAvLyBlIGlzIHRoZSBiYXNlIDEwIGV4cG9uZW50LlxyXG4gICAgICAvLyBpIGlzIHdoZXJlIHRvIHNsaWNlIHN0ciB0byBnZXQgdGhlIGZpcnN0IHdvcmQgb2YgdGhlIGRpZ2l0cyBhcnJheS5cclxuICAgICAgaSA9IChlICsgMSkgJSBMT0dfQkFTRTtcclxuICAgICAgaWYgKGUgPCAwKSBpICs9IExPR19CQVNFO1xyXG5cclxuICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICBpZiAoaSkgeC5kLnB1c2goK3N0ci5zbGljZSgwLCBpKSk7XHJcbiAgICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47KSB4LmQucHVzaCgrc3RyLnNsaWNlKGksIGkgKz0gTE9HX0JBU0UpKTtcclxuICAgICAgICBzdHIgPSBzdHIuc2xpY2UoaSk7XHJcbiAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpIC09IGxlbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yICg7IGktLTspIHN0ciArPSAnMCc7XHJcbiAgICAgIHguZC5wdXNoKCtzdHIpO1xyXG5cclxuICAgICAgaWYgKGV4dGVybmFsICYmICh4LmUgPiBNQVhfRSB8fCB4LmUgPCAtTUFYX0UpKSB0aHJvdyBFcnJvcihleHBvbmVudE91dE9mUmFuZ2UgKyBlKTtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBaZXJvLlxyXG4gICAgICB4LnMgPSAwO1xyXG4gICAgICB4LmUgPSAwO1xyXG4gICAgICB4LmQgPSBbMF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSb3VuZCBgeGAgdG8gYHNkYCBzaWduaWZpY2FudCBkaWdpdHMsIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJtYCBpZiBwcmVzZW50ICh0cnVuY2F0ZSBvdGhlcndpc2UpLlxyXG4gICAqL1xyXG4gICBmdW5jdGlvbiByb3VuZCh4LCBzZCwgcm0pIHtcclxuICAgIHZhciBpLCBqLCBrLCBuLCByZCwgZG9Sb3VuZCwgdywgeGRpLFxyXG4gICAgICB4ZCA9IHguZDtcclxuXHJcbiAgICAvLyByZDogdGhlIHJvdW5kaW5nIGRpZ2l0LCBpLmUuIHRoZSBkaWdpdCBhZnRlciB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cC5cclxuICAgIC8vIHc6IHRoZSB3b3JkIG9mIHhkIHdoaWNoIGNvbnRhaW5zIHRoZSByb3VuZGluZyBkaWdpdCwgYSBiYXNlIDFlNyBudW1iZXIuXHJcbiAgICAvLyB4ZGk6IHRoZSBpbmRleCBvZiB3IHdpdGhpbiB4ZC5cclxuICAgIC8vIG46IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHcuXHJcbiAgICAvLyBpOiB3aGF0IHdvdWxkIGJlIHRoZSBpbmRleCBvZiByZCB3aXRoaW4gdyBpZiBhbGwgdGhlIG51bWJlcnMgd2VyZSA3IGRpZ2l0cyBsb25nIChpLmUuIGlmXHJcbiAgICAvLyB0aGV5IGhhZCBsZWFkaW5nIHplcm9zKVxyXG4gICAgLy8gajogaWYgPiAwLCB0aGUgYWN0dWFsIGluZGV4IG9mIHJkIHdpdGhpbiB3IChpZiA8IDAsIHJkIGlzIGEgbGVhZGluZyB6ZXJvKS5cclxuXHJcbiAgICAvLyBHZXQgdGhlIGxlbmd0aCBvZiB0aGUgZmlyc3Qgd29yZCBvZiB0aGUgZGlnaXRzIGFycmF5IHhkLlxyXG4gICAgZm9yIChuID0gMSwgayA9IHhkWzBdOyBrID49IDEwOyBrIC89IDEwKSBuKys7XHJcbiAgICBpID0gc2QgLSBuO1xyXG5cclxuICAgIC8vIElzIHRoZSByb3VuZGluZyBkaWdpdCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB4ZD9cclxuICAgIGlmIChpIDwgMCkge1xyXG4gICAgICBpICs9IExPR19CQVNFO1xyXG4gICAgICBqID0gc2Q7XHJcbiAgICAgIHcgPSB4ZFt4ZGkgPSAwXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHhkaSA9IE1hdGguY2VpbCgoaSArIDEpIC8gTE9HX0JBU0UpO1xyXG4gICAgICBrID0geGQubGVuZ3RoO1xyXG4gICAgICBpZiAoeGRpID49IGspIHJldHVybiB4O1xyXG4gICAgICB3ID0gayA9IHhkW3hkaV07XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygdy5cclxuICAgICAgZm9yIChuID0gMTsgayA+PSAxMDsgayAvPSAxMCkgbisrO1xyXG5cclxuICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiByZCB3aXRoaW4gdy5cclxuICAgICAgaSAlPSBMT0dfQkFTRTtcclxuXHJcbiAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIHcsIGFkanVzdGVkIGZvciBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAvLyBUaGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2YgdyBpcyBnaXZlbiBieSBMT0dfQkFTRSAtIG4uXHJcbiAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyBuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChybSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgIGsgPSBtYXRocG93KDEwLCBuIC0gaiAtIDEpO1xyXG5cclxuICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIHcuXHJcbiAgICAgIHJkID0gdyAvIGsgJSAxMCB8IDA7XHJcblxyXG4gICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgIGRvUm91bmQgPSBzZCA8IDAgfHwgeGRbeGRpICsgMV0gIT09IHZvaWQgMCB8fCB3ICUgaztcclxuXHJcbiAgICAgIC8vIFRoZSBleHByZXNzaW9uIGB3ICUgbWF0aHBvdygxMCwgbiAtIGogLSAxKWAgcmV0dXJucyBhbGwgdGhlIGRpZ2l0cyBvZiB3IHRvIHRoZSByaWdodCBvZiB0aGVcclxuICAgICAgLy8gZGlnaXQgYXQgKGxlZnQtdG8tcmlnaHQpIGluZGV4IGosIGUuZy4gaWYgdyBpcyA5MDg3MTQgYW5kIGogaXMgMiwgdGhlIGV4cHJlc3Npb24gd2lsbCBnaXZlXHJcbiAgICAgIC8vIDcxNC5cclxuXHJcbiAgICAgIGRvUm91bmQgPSBybSA8IDRcclxuICAgICAgICA/IChyZCB8fCBkb1JvdW5kKSAmJiAocm0gPT0gMCB8fCBybSA9PSAoeC5zIDwgMCA/IDMgOiAyKSlcclxuICAgICAgICA6IHJkID4gNSB8fCByZCA9PSA1ICYmIChybSA9PSA0IHx8IGRvUm91bmQgfHwgcm0gPT0gNiAmJlxyXG5cclxuICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGRpZ2l0IHRvIHRoZSBsZWZ0IG9mIHRoZSByb3VuZGluZyBkaWdpdCBpcyBvZGQuXHJcbiAgICAgICAgICAoKGkgPiAwID8gaiA+IDAgPyB3IC8gbWF0aHBvdygxMCwgbiAtIGopIDogMCA6IHhkW3hkaSAtIDFdKSAlIDEwKSAmIDEgfHxcclxuICAgICAgICAgICAgcm0gPT0gKHgucyA8IDAgPyA4IDogNykpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZCA8IDEgfHwgIXhkWzBdKSB7XHJcbiAgICAgIGlmIChkb1JvdW5kKSB7XHJcbiAgICAgICAgayA9IGdldEJhc2UxMEV4cG9uZW50KHgpO1xyXG4gICAgICAgIHhkLmxlbmd0aCA9IDE7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgc2QgdG8gZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgICAgc2QgPSBzZCAtIGsgLSAxO1xyXG5cclxuICAgICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICAgIHhkWzBdID0gbWF0aHBvdygxMCwgKExPR19CQVNFIC0gc2QgJSBMT0dfQkFTRSkgJSBMT0dfQkFTRSk7XHJcbiAgICAgICAgeC5lID0gbWF0aGZsb29yKC1zZCAvIExPR19CQVNFKSB8fCAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHhkLmxlbmd0aCA9IDE7XHJcblxyXG4gICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgeGRbMF0gPSB4LmUgPSB4LnMgPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4geDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgZXhjZXNzIGRpZ2l0cy5cclxuICAgIGlmIChpID09IDApIHtcclxuICAgICAgeGQubGVuZ3RoID0geGRpO1xyXG4gICAgICBrID0gMTtcclxuICAgICAgeGRpLS07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB4ZC5sZW5ndGggPSB4ZGkgKyAxO1xyXG4gICAgICBrID0gbWF0aHBvdygxMCwgTE9HX0JBU0UgLSBpKTtcclxuXHJcbiAgICAgIC8vIEUuZy4gNTY3MDAgYmVjb21lcyA1NjAwMCBpZiA3IGlzIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAgLy8gaiA+IDAgbWVhbnMgaSA+IG51bWJlciBvZiBsZWFkaW5nIHplcm9zIG9mIHcuXHJcbiAgICAgIHhkW3hkaV0gPSBqID4gMCA/ICh3IC8gbWF0aHBvdygxMCwgbiAtIGopICUgbWF0aHBvdygxMCwgaikgfCAwKSAqIGsgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb1JvdW5kKSB7XHJcbiAgICAgIGZvciAoOzspIHtcclxuXHJcbiAgICAgICAgLy8gSXMgdGhlIGRpZ2l0IHRvIGJlIHJvdW5kZWQgdXAgaW4gdGhlIGZpcnN0IHdvcmQgb2YgeGQ/XHJcbiAgICAgICAgaWYgKHhkaSA9PSAwKSB7XHJcbiAgICAgICAgICBpZiAoKHhkWzBdICs9IGspID09IEJBU0UpIHtcclxuICAgICAgICAgICAgeGRbMF0gPSAxO1xyXG4gICAgICAgICAgICArK3guZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeGRbeGRpXSArPSBrO1xyXG4gICAgICAgICAgaWYgKHhkW3hkaV0gIT0gQkFTRSkgYnJlYWs7XHJcbiAgICAgICAgICB4ZFt4ZGktLV0gPSAwO1xyXG4gICAgICAgICAgayA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChpID0geGQubGVuZ3RoOyB4ZFstLWldID09PSAwOykgeGQucG9wKCk7XHJcblxyXG4gICAgaWYgKGV4dGVybmFsICYmICh4LmUgPiBNQVhfRSB8fCB4LmUgPCAtTUFYX0UpKSB7XHJcbiAgICAgIHRocm93IEVycm9yKGV4cG9uZW50T3V0T2ZSYW5nZSArIGdldEJhc2UxMEV4cG9uZW50KHgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBzdWJ0cmFjdCh4LCB5KSB7XHJcbiAgICB2YXIgZCwgZSwgaSwgaiwgaywgbGVuLCB4ZCwgeGUsIHhMVHksIHlkLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuXHJcbiAgICAvLyBSZXR1cm4geSBuZWdhdGVkIGlmIHggaXMgemVyby5cclxuICAgIC8vIFJldHVybiB4IGlmIHkgaXMgemVybyBhbmQgeCBpcyBub24temVyby5cclxuICAgIGlmICgheC5zIHx8ICF5LnMpIHtcclxuICAgICAgaWYgKHkucykgeS5zID0gLXkucztcclxuICAgICAgZWxzZSB5ID0gbmV3IEN0b3IoeCk7XHJcbiAgICAgIHJldHVybiBleHRlcm5hbCA/IHJvdW5kKHksIHByKSA6IHk7XHJcbiAgICB9XHJcblxyXG4gICAgeGQgPSB4LmQ7XHJcbiAgICB5ZCA9IHkuZDtcclxuXHJcbiAgICAvLyB4IGFuZCB5IGFyZSBub24temVybyBudW1iZXJzIHdpdGggdGhlIHNhbWUgc2lnbi5cclxuXHJcbiAgICBlID0geS5lO1xyXG4gICAgeGUgPSB4LmU7XHJcbiAgICB4ZCA9IHhkLnNsaWNlKCk7XHJcbiAgICBrID0geGUgLSBlO1xyXG5cclxuICAgIC8vIElmIGV4cG9uZW50cyBkaWZmZXIuLi5cclxuICAgIGlmIChrKSB7XHJcbiAgICAgIHhMVHkgPSBrIDwgMDtcclxuXHJcbiAgICAgIGlmICh4TFR5KSB7XHJcbiAgICAgICAgZCA9IHhkO1xyXG4gICAgICAgIGsgPSAtaztcclxuICAgICAgICBsZW4gPSB5ZC5sZW5ndGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZCA9IHlkO1xyXG4gICAgICAgIGUgPSB4ZTtcclxuICAgICAgICBsZW4gPSB4ZC5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE51bWJlcnMgd2l0aCBtYXNzaXZlbHkgZGlmZmVyZW50IGV4cG9uZW50cyB3b3VsZCByZXN1bHQgaW4gYSB2ZXJ5IGhpZ2ggbnVtYmVyIG9mIHplcm9zXHJcbiAgICAgIC8vIG5lZWRpbmcgdG8gYmUgcHJlcGVuZGVkLCBidXQgdGhpcyBjYW4gYmUgYXZvaWRlZCB3aGlsZSBzdGlsbCBlbnN1cmluZyBjb3JyZWN0IHJvdW5kaW5nIGJ5XHJcbiAgICAgIC8vIGxpbWl0aW5nIHRoZSBudW1iZXIgb2YgemVyb3MgdG8gYE1hdGguY2VpbChwciAvIExPR19CQVNFKSArIDJgLlxyXG4gICAgICBpID0gTWF0aC5tYXgoTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UpLCBsZW4pICsgMjtcclxuXHJcbiAgICAgIGlmIChrID4gaSkge1xyXG4gICAgICAgIGsgPSBpO1xyXG4gICAgICAgIGQubGVuZ3RoID0gMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgICAgIGQucmV2ZXJzZSgpO1xyXG4gICAgICBmb3IgKGkgPSBrOyBpLS07KSBkLnB1c2goMCk7XHJcbiAgICAgIGQucmV2ZXJzZSgpO1xyXG5cclxuICAgIC8vIEJhc2UgMWU3IGV4cG9uZW50cyBlcXVhbC5cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBDaGVjayBkaWdpdHMgdG8gZGV0ZXJtaW5lIHdoaWNoIGlzIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG5cclxuICAgICAgaSA9IHhkLmxlbmd0aDtcclxuICAgICAgbGVuID0geWQubGVuZ3RoO1xyXG4gICAgICB4TFR5ID0gaSA8IGxlbjtcclxuICAgICAgaWYgKHhMVHkpIGxlbiA9IGk7XHJcblxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoeGRbaV0gIT0geWRbaV0pIHtcclxuICAgICAgICAgIHhMVHkgPSB4ZFtpXSA8IHlkW2ldO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBrID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoeExUeSkge1xyXG4gICAgICBkID0geGQ7XHJcbiAgICAgIHhkID0geWQ7XHJcbiAgICAgIHlkID0gZDtcclxuICAgICAgeS5zID0gLXkucztcclxuICAgIH1cclxuXHJcbiAgICBsZW4gPSB4ZC5sZW5ndGg7XHJcblxyXG4gICAgLy8gQXBwZW5kIHplcm9zIHRvIHhkIGlmIHNob3J0ZXIuXHJcbiAgICAvLyBEb24ndCBhZGQgemVyb3MgdG8geWQgaWYgc2hvcnRlciBhcyBzdWJ0cmFjdGlvbiBvbmx5IG5lZWRzIHRvIHN0YXJ0IGF0IHlkIGxlbmd0aC5cclxuICAgIGZvciAoaSA9IHlkLmxlbmd0aCAtIGxlbjsgaSA+IDA7IC0taSkgeGRbbGVuKytdID0gMDtcclxuXHJcbiAgICAvLyBTdWJ0cmFjdCB5ZCBmcm9tIHhkLlxyXG4gICAgZm9yIChpID0geWQubGVuZ3RoOyBpID4gazspIHtcclxuICAgICAgaWYgKHhkWy0taV0gPCB5ZFtpXSkge1xyXG4gICAgICAgIGZvciAoaiA9IGk7IGogJiYgeGRbLS1qXSA9PT0gMDspIHhkW2pdID0gQkFTRSAtIDE7XHJcbiAgICAgICAgLS14ZFtqXTtcclxuICAgICAgICB4ZFtpXSArPSBCQVNFO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4ZFtpXSAtPSB5ZFtpXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICBmb3IgKDsgeGRbLS1sZW5dID09PSAwOykgeGQucG9wKCk7XHJcblxyXG4gICAgLy8gUmVtb3ZlIGxlYWRpbmcgemVyb3MgYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgIGZvciAoOyB4ZFswXSA9PT0gMDsgeGQuc2hpZnQoKSkgLS1lO1xyXG5cclxuICAgIC8vIFplcm8/XHJcbiAgICBpZiAoIXhkWzBdKSByZXR1cm4gbmV3IEN0b3IoMCk7XHJcblxyXG4gICAgeS5kID0geGQ7XHJcbiAgICB5LmUgPSBlO1xyXG5cclxuICAgIC8vcmV0dXJuIGV4dGVybmFsICYmIHhkLmxlbmd0aCA+PSBwciAvIExPR19CQVNFID8gcm91bmQoeSwgcHIpIDogeTtcclxuICAgIHJldHVybiBleHRlcm5hbCA/IHJvdW5kKHksIHByKSA6IHk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gdG9TdHJpbmcoeCwgaXNFeHAsIHNkKSB7XHJcbiAgICB2YXIgayxcclxuICAgICAgZSA9IGdldEJhc2UxMEV4cG9uZW50KHgpLFxyXG4gICAgICBzdHIgPSBkaWdpdHNUb1N0cmluZyh4LmQpLFxyXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgIGlmIChpc0V4cCkge1xyXG4gICAgICBpZiAoc2QgJiYgKGsgPSBzZCAtIGxlbikgPiAwKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLmNoYXJBdCgwKSArICcuJyArIHN0ci5zbGljZSgxKSArIGdldFplcm9TdHJpbmcoayk7XHJcbiAgICAgIH0gZWxzZSBpZiAobGVuID4gMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0ciA9IHN0ciArIChlIDwgMCA/ICdlJyA6ICdlKycpICsgZTtcclxuICAgIH0gZWxzZSBpZiAoZSA8IDApIHtcclxuICAgICAgc3RyID0gJzAuJyArIGdldFplcm9TdHJpbmcoLWUgLSAxKSArIHN0cjtcclxuICAgICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMCkgc3RyICs9IGdldFplcm9TdHJpbmcoayk7XHJcbiAgICB9IGVsc2UgaWYgKGUgPj0gbGVuKSB7XHJcbiAgICAgIHN0ciArPSBnZXRaZXJvU3RyaW5nKGUgKyAxIC0gbGVuKTtcclxuICAgICAgaWYgKHNkICYmIChrID0gc2QgLSBlIC0gMSkgPiAwKSBzdHIgPSBzdHIgKyAnLicgKyBnZXRaZXJvU3RyaW5nKGspO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKChrID0gZSArIDEpIDwgbGVuKSBzdHIgPSBzdHIuc2xpY2UoMCwgaykgKyAnLicgKyBzdHIuc2xpY2Uoayk7XHJcbiAgICAgIGlmIChzZCAmJiAoayA9IHNkIC0gbGVuKSA+IDApIHtcclxuICAgICAgICBpZiAoZSArIDEgPT09IGxlbikgc3RyICs9ICcuJztcclxuICAgICAgICBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4LnMgPCAwID8gJy0nICsgc3RyIDogc3RyO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIERvZXMgbm90IHN0cmlwIHRyYWlsaW5nIHplcm9zLlxyXG4gIGZ1bmN0aW9uIHRydW5jYXRlKGFyciwgbGVuKSB7XHJcbiAgICBpZiAoYXJyLmxlbmd0aCA+IGxlbikge1xyXG4gICAgICBhcnIubGVuZ3RoID0gbGVuO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvLyBEZWNpbWFsIG1ldGhvZHNcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIGNsb25lXHJcbiAgICogIGNvbmZpZy9zZXRcclxuICAgKi9cclxuXHJcblxyXG4gIC8qXHJcbiAgICogQ3JlYXRlIGFuZCByZXR1cm4gYSBEZWNpbWFsIGNvbnN0cnVjdG9yIHdpdGggdGhlIHNhbWUgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGFzIHRoaXMgRGVjaW1hbFxyXG4gICAqIGNvbnN0cnVjdG9yLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY2xvbmUob2JqKSB7XHJcbiAgICB2YXIgaSwgcCwgcHM7XHJcblxyXG4gICAgLypcclxuICAgICAqIFRoZSBEZWNpbWFsIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi5cclxuICAgICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIGluc3RhbmNlLlxyXG4gICAgICpcclxuICAgICAqIHZhbHVlIHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERlY2ltYWwodmFsdWUpIHtcclxuICAgICAgdmFyIHggPSB0aGlzO1xyXG5cclxuICAgICAgLy8gRGVjaW1hbCBjYWxsZWQgd2l0aG91dCBuZXcuXHJcbiAgICAgIGlmICghKHggaW5zdGFuY2VvZiBEZWNpbWFsKSkgcmV0dXJuIG5ldyBEZWNpbWFsKHZhbHVlKTtcclxuXHJcbiAgICAgIC8vIFJldGFpbiBhIHJlZmVyZW5jZSB0byB0aGlzIERlY2ltYWwgY29uc3RydWN0b3IsIGFuZCBzaGFkb3cgRGVjaW1hbC5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuICAgICAgLy8gd2hpY2ggcG9pbnRzIHRvIE9iamVjdC5cclxuICAgICAgeC5jb25zdHJ1Y3RvciA9IERlY2ltYWw7XHJcblxyXG4gICAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlY2ltYWwpIHtcclxuICAgICAgICB4LnMgPSB2YWx1ZS5zO1xyXG4gICAgICAgIHguZSA9IHZhbHVlLmU7XHJcbiAgICAgICAgeC5kID0gKHZhbHVlID0gdmFsdWUuZCkgPyB2YWx1ZS5zbGljZSgpIDogdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG5cclxuICAgICAgICAvLyBSZWplY3QgSW5maW5pdHkvTmFOLlxyXG4gICAgICAgIGlmICh2YWx1ZSAqIDAgIT09IDApIHtcclxuICAgICAgICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSA+IDApIHtcclxuICAgICAgICAgIHgucyA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcclxuICAgICAgICAgIHZhbHVlID0gLXZhbHVlO1xyXG4gICAgICAgICAgeC5zID0gLTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHgucyA9IDA7XHJcbiAgICAgICAgICB4LmUgPSAwO1xyXG4gICAgICAgICAgeC5kID0gWzBdO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBzbWFsbCBpbnRlZ2Vycy5cclxuICAgICAgICBpZiAodmFsdWUgPT09IH5+dmFsdWUgJiYgdmFsdWUgPCAxZTcpIHtcclxuICAgICAgICAgIHguZSA9IDA7XHJcbiAgICAgICAgICB4LmQgPSBbdmFsdWVdO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVjaW1hbCh4LCB2YWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgdmFsdWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBNaW51cyBzaWduP1xyXG4gICAgICBpZiAodmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gNDUpIHtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xyXG4gICAgICAgIHgucyA9IC0xO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHgucyA9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0RlY2ltYWwudGVzdCh2YWx1ZSkpIHBhcnNlRGVjaW1hbCh4LCB2YWx1ZSk7XHJcbiAgICAgIGVsc2UgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIERlY2ltYWwucHJvdG90eXBlID0gUDtcclxuXHJcbiAgICBEZWNpbWFsLlJPVU5EX1VQID0gMDtcclxuICAgIERlY2ltYWwuUk9VTkRfRE9XTiA9IDE7XHJcbiAgICBEZWNpbWFsLlJPVU5EX0NFSUwgPSAyO1xyXG4gICAgRGVjaW1hbC5ST1VORF9GTE9PUiA9IDM7XHJcbiAgICBEZWNpbWFsLlJPVU5EX0hBTEZfVVAgPSA0O1xyXG4gICAgRGVjaW1hbC5ST1VORF9IQUxGX0RPV04gPSA1O1xyXG4gICAgRGVjaW1hbC5ST1VORF9IQUxGX0VWRU4gPSA2O1xyXG4gICAgRGVjaW1hbC5ST1VORF9IQUxGX0NFSUwgPSA3O1xyXG4gICAgRGVjaW1hbC5ST1VORF9IQUxGX0ZMT09SID0gODtcclxuXHJcbiAgICBEZWNpbWFsLmNsb25lID0gY2xvbmU7XHJcbiAgICBEZWNpbWFsLmNvbmZpZyA9IERlY2ltYWwuc2V0ID0gY29uZmlnO1xyXG5cclxuICAgIGlmIChvYmogPT09IHZvaWQgMCkgb2JqID0ge307XHJcbiAgICBpZiAob2JqKSB7XHJcbiAgICAgIHBzID0gWydwcmVjaXNpb24nLCAncm91bmRpbmcnLCAndG9FeHBOZWcnLCAndG9FeHBQb3MnLCAnTE4xMCddO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcHMubGVuZ3RoOykgaWYgKCFvYmouaGFzT3duUHJvcGVydHkocCA9IHBzW2krK10pKSBvYmpbcF0gPSB0aGlzW3BdO1xyXG4gICAgfVxyXG5cclxuICAgIERlY2ltYWwuY29uZmlnKG9iaik7XHJcblxyXG4gICAgcmV0dXJuIERlY2ltYWw7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBDb25maWd1cmUgZ2xvYmFsIHNldHRpbmdzIGZvciBhIERlY2ltYWwgY29uc3RydWN0b3IuXHJcbiAgICpcclxuICAgKiBgb2JqYCBpcyBhbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBvZiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMsXHJcbiAgICpcclxuICAgKiAgIHByZWNpc2lvbiAge251bWJlcn1cclxuICAgKiAgIHJvdW5kaW5nICAge251bWJlcn1cclxuICAgKiAgIHRvRXhwTmVnICAge251bWJlcn1cclxuICAgKiAgIHRvRXhwUG9zICAge251bWJlcn1cclxuICAgKlxyXG4gICAqIEUuZy4gRGVjaW1hbC5jb25maWcoeyBwcmVjaXNpb246IDIwLCByb3VuZGluZzogNCB9KVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY29uZmlnKG9iaikge1xyXG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ09iamVjdCBleHBlY3RlZCcpO1xyXG4gICAgfVxyXG4gICAgdmFyIGksIHAsIHYsXHJcbiAgICAgIHBzID0gW1xyXG4gICAgICAgICdwcmVjaXNpb24nLCAxLCBNQVhfRElHSVRTLFxyXG4gICAgICAgICdyb3VuZGluZycsIDAsIDgsXHJcbiAgICAgICAgJ3RvRXhwTmVnJywgLTEgLyAwLCAwLFxyXG4gICAgICAgICd0b0V4cFBvcycsIDAsIDEgLyAwXHJcbiAgICAgIF07XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgIGlmICgodiA9IG9ialtwID0gcHNbaV1dKSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgaWYgKG1hdGhmbG9vcih2KSA9PT0gdiAmJiB2ID49IHBzW2kgKyAxXSAmJiB2IDw9IHBzW2kgKyAyXSkgdGhpc1twXSA9IHY7XHJcbiAgICAgICAgZWxzZSB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBwICsgJzogJyArIHYpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCh2ID0gb2JqW3AgPSAnTE4xMCddKSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgaWYgKHYgPT0gTWF0aC5MTjEwKSB0aGlzW3BdID0gbmV3IHRoaXModik7XHJcbiAgICAgICAgZWxzZSB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBwICsgJzogJyArIHYpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIENyZWF0ZSBhbmQgY29uZmlndXJlIGluaXRpYWwgRGVjaW1hbCBjb25zdHJ1Y3Rvci5cclxuICBEZWNpbWFsID0gY2xvbmUoRGVjaW1hbCk7XHJcblxyXG4gIERlY2ltYWxbJ2RlZmF1bHQnXSA9IERlY2ltYWwuRGVjaW1hbCA9IERlY2ltYWw7XHJcblxyXG4gIC8vIEludGVybmFsIGNvbnN0YW50LlxyXG4gIE9ORSA9IG5ldyBEZWNpbWFsKDEpO1xyXG5cclxuXHJcbiAgLy8gRXhwb3J0LlxyXG5cclxuXHJcbiAgLy8gQU1ELlxyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIERlY2ltYWw7XHJcbiAgICB9KTtcclxuXHJcbiAgLy8gTm9kZSBhbmQgb3RoZXIgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cy5cclxuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gRGVjaW1hbDtcclxuXHJcbiAgICAvLyBCcm93c2VyLlxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoIWdsb2JhbFNjb3BlKSB7XHJcbiAgICAgIGdsb2JhbFNjb3BlID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiAmJiBzZWxmLnNlbGYgPT0gc2VsZlxyXG4gICAgICAgID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2xvYmFsU2NvcGUuRGVjaW1hbCA9IERlY2ltYWw7XHJcbiAgfVxyXG59KSh0aGlzKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lbW9pemUgPSBleHBvcnRzLnJldmVyc2UgPSBleHBvcnRzLmNvbXBvc2UgPSBleHBvcnRzLm1hcCA9IGV4cG9ydHMucmFuZ2UgPSBleHBvcnRzLmN1cnJ5ID0gZXhwb3J0cy5QTEFDRV9IT0xERVIgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIGlkZW50aXR5KGkpIHtcbiAgcmV0dXJuIGk7XG59O1xuXG52YXIgUExBQ0VfSE9MREVSID0ge1xuICAnQEBmdW5jdGlvbmFsL3BsYWNlaG9sZGVyJzogdHJ1ZVxufTtcbmV4cG9ydHMuUExBQ0VfSE9MREVSID0gUExBQ0VfSE9MREVSO1xuXG52YXIgaXNQbGFjZUhvbGRlciA9IGZ1bmN0aW9uIGlzUGxhY2VIb2xkZXIodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IFBMQUNFX0hPTERFUjtcbn07XG5cbnZhciBjdXJyeTAgPSBmdW5jdGlvbiBjdXJyeTAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIF9jdXJyaWVkKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgaXNQbGFjZUhvbGRlcihhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pKSB7XG4gICAgICByZXR1cm4gX2N1cnJpZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cbnZhciBjdXJyeU4gPSBmdW5jdGlvbiBjdXJyeU4obiwgZm4pIHtcbiAgaWYgKG4gPT09IDEpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICByZXR1cm4gY3VycnkwKGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnICE9PSBQTEFDRV9IT0xERVI7XG4gICAgfSkubGVuZ3RoO1xuXG4gICAgaWYgKGFyZ3NMZW5ndGggPj0gbikge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJ5TihuIC0gYXJnc0xlbmd0aCwgY3VycnkwKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdEFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgcmVzdEFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0FyZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBpc1BsYWNlSG9sZGVyKGFyZykgPyByZXN0QXJncy5zaGlmdCgpIDogYXJnO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3QXJncykuY29uY2F0KHJlc3RBcmdzKSk7XG4gICAgfSkpO1xuICB9KTtcbn07XG5cbnZhciBjdXJyeSA9IGZ1bmN0aW9uIGN1cnJ5KGZuKSB7XG4gIHJldHVybiBjdXJyeU4oZm4ubGVuZ3RoLCBmbik7XG59O1xuXG5leHBvcnRzLmN1cnJ5ID0gY3Vycnk7XG5cbnZhciByYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKGJlZ2luLCBlbmQpIHtcbiAgdmFyIGFyciA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSBiZWdpbjsgaSA8IGVuZDsgKytpKSB7XG4gICAgYXJyW2kgLSBiZWdpbl0gPSBpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn07XG5cbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbnZhciBtYXAgPSBjdXJyeShmdW5jdGlvbiAoZm4sIGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgcmV0dXJuIGFyci5tYXAoZm4pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKGFycikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gYXJyW2tleV07XG4gIH0pLm1hcChmbik7XG59KTtcbmV4cG9ydHMubWFwID0gbWFwO1xuXG52YXIgY29tcG9zZSA9IGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cblxuICB2YXIgZm5zID0gYXJncy5yZXZlcnNlKCk7IC8vIGZpcnN0IGZ1bmN0aW9uIGNhbiByZWNlaXZlIG11bHRpcGx5IGFyZ3VtZW50c1xuXG4gIHZhciBmaXJzdEZuID0gZm5zWzBdO1xuICB2YXIgdGFpbHNGbiA9IGZucy5zbGljZSgxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGFpbHNGbi5yZWR1Y2UoZnVuY3Rpb24gKHJlcywgZm4pIHtcbiAgICAgIHJldHVybiBmbihyZXMpO1xuICAgIH0sIGZpcnN0Rm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuY29tcG9zZSA9IGNvbXBvc2U7XG5cbnZhciByZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIHJldHVybiBhcnIucmV2ZXJzZSgpO1xuICB9IC8vIGNhbiBiZSBzdHJpbmdcblxuXG4gIHJldHVybiBhcnIuc3BsaXQoJycpLnJldmVyc2Uuam9pbignJyk7XG59O1xuXG5leHBvcnRzLnJldmVyc2UgPSByZXZlcnNlO1xuXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgIH1cblxuICAgIGlmIChsYXN0QXJncyAmJiBhcmdzLmV2ZXJ5KGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgIHJldHVybiB2YWwgPT09IGxhc3RBcmdzW2ldO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3M7XG4gICAgbGFzdFJlc3VsdCA9IGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG59O1xuXG5leHBvcnRzLm1lbW9pemUgPSBtZW1vaXplOyIsIi8qKlxuICogQGZpbGVPdmVydmlldyBDcm9zc1xuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW50ZXJmYWNlIENyb3NzUHJvcHMge1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB0b3A/OiBudW1iZXI7XG4gIGxlZnQ/OiBudW1iZXI7XG4gIGNsYXNzTmFtZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBTVkdQcm9wczxTVkdQYXRoRWxlbWVudD4gJiBDcm9zc1Byb3BzO1xuXG5leHBvcnQgY2xhc3MgQ3Jvc3MgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgfTtcblxuICBzdGF0aWMgZ2V0UGF0aCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHRvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gYE0ke3h9LCR7dG9wfXYke2hlaWdodH1NJHtsZWZ0fSwke3l9aCR7d2lkdGh9YDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIHRvcCwgbGVmdCwgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc051bWJlcih4KSB8fCAhaXNOdW1iZXIoeSkgfHwgIWlzTnVtYmVyKHdpZHRoKSB8fCAhaXNOdW1iZXIoaGVpZ2h0KSB8fCAhaXNOdW1iZXIodG9wKSB8fCAhaXNOdW1iZXIobGVmdCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8cGF0aFxuICAgICAgICB7Li4uZmlsdGVyUHJvcHModGhpcy5wcm9wcywgdHJ1ZSl9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtY3Jvc3MnLCBjbGFzc05hbWUpfVxuICAgICAgICBkPXtDcm9zcy5nZXRQYXRoKHgsIHksIHdpZHRoLCBoZWlnaHQsIHRvcCwgbGVmdCl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBSZW5kZXIgc2VjdG9ycyBvZiBhIHBpZVxuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGUsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IFNlY3RvciwgUHJvcHMgYXMgU2VjdG9yUHJvcHMgfSBmcm9tICcuLi9zaGFwZS9TZWN0b3InO1xuaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9zaGFwZS9DdXJ2ZSc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50L1RleHQnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuLi9jb21wb25lbnQvTGFiZWwnO1xuaW1wb3J0IHsgTGFiZWxMaXN0IH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsTGlzdCc7XG5pbXBvcnQgeyBDZWxsLCBQcm9wcyBhcyBDZWxsUHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnQvQ2VsbCc7XG5pbXBvcnQgeyBmaW5kQWxsQnlUeXBlIH0gZnJvbSAnLi4vdXRpbC9SZWFjdFV0aWxzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4uL3V0aWwvR2xvYmFsJztcbmltcG9ydCB7IHBvbGFyVG9DYXJ0ZXNpYW4sIGdldE1heFJhZGl1cyB9IGZyb20gJy4uL3V0aWwvUG9sYXJVdGlscyc7XG5pbXBvcnQgeyBpc051bWJlciwgZ2V0UGVyY2VudFZhbHVlLCBtYXRoU2lnbiwgaW50ZXJwb2xhdGVOdW1iZXIsIHVuaXF1ZUlkIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL3V0aWwvTG9nVXRpbHMnO1xuaW1wb3J0IHtcbiAgTGVnZW5kVHlwZSxcbiAgVG9vbHRpcFR5cGUsXG4gIEFuaW1hdGlvblRpbWluZyxcbiAgZmlsdGVyUHJvcHMsXG4gIENvb3JkaW5hdGUsXG4gIENoYXJ0T2Zmc2V0LFxuICBEYXRhS2V5LFxuICBhZGFwdEV2ZW50c09mQ2hpbGQsXG4gIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUGllRGVmIHtcbiAgLyoqIFRoZSBhYnNjaXNzYSBvZiBwb2xlIGluIHBvbGFyIGNvb3JkaW5hdGUgICovXG4gIGN4PzogbnVtYmVyIHwgc3RyaW5nO1xuICAvKiogVGhlIG9yZGluYXRlIG9mIHBvbGUgaW4gcG9sYXIgY29vcmRpbmF0ZSAgKi9cbiAgY3k/OiBudW1iZXIgfCBzdHJpbmc7XG4gIC8qKiBUaGUgc3RhcnQgYW5nbGUgb2YgZmlyc3Qgc2VjdG9yICovXG4gIHN0YXJ0QW5nbGU/OiBudW1iZXI7XG4gIC8qKiBUaGUgZW5kIGFuZ2xlIG9mIGxhc3Qgc2VjdG9yICovXG4gIGVuZEFuZ2xlPzogbnVtYmVyO1xuICBwYWRkaW5nQW5nbGU/OiBudW1iZXI7XG4gIC8qKiBUaGUgaW5uZXIgcmFkaXVzIG9mIHNlY3RvcnMgKi9cbiAgaW5uZXJSYWRpdXM/OiBudW1iZXIgfCBzdHJpbmc7XG4gIC8qKiBUaGUgb3V0ZXIgcmFkaXVzIG9mIHNlY3RvcnMgKi9cbiAgb3V0ZXJSYWRpdXM/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGNvcm5lclJhZGl1cz86IG51bWJlciB8IHN0cmluZztcbn1cblxudHlwZSBQaWVBY3RpdmVTaGFwZSA9IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PiB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KSB8IFNlY3RvclByb3BzO1xudHlwZSBQaWVMYWJlbExpbmUgPVxuICB8IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PlxuICB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KVxuICB8IFNWR1Byb3BzPFNWR1BhdGhFbGVtZW50PlxuICB8IGJvb2xlYW47XG5leHBvcnQgdHlwZSBQaWVMYWJlbDxQID0gYW55PiA9XG4gIHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+XG4gIHwgKChwcm9wczogUCkgPT4gUmVhY3ROb2RlIHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KVxuICB8IHsgb2Zmc2V0UmFkaXVzOiBudW1iZXIgfVxuICB8IGJvb2xlYW47XG50eXBlIFBpZVNlY3RvckRhdGFJdGVtID0gU2VjdG9yUHJvcHMgJiB7XG4gIHBlcmNlbnQ/OiBudW1iZXI7XG4gIG5hbWU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIG1pZEFuZ2xlPzogbnVtYmVyO1xuICBtaWRkbGVSYWRpdXM/OiBudW1iZXI7XG4gIHRvb2x0aXBQb3NpdGlvbj86IENvb3JkaW5hdGU7XG4gIHZhbHVlPzogbnVtYmVyO1xuICBwYWRkaW5nQW5nbGU/OiBudW1iZXI7XG59O1xuXG5pbnRlcmZhY2UgUGllUHJvcHMgZXh0ZW5kcyBQaWVEZWYge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGFuaW1hdGlvbklkPzogbnVtYmVyO1xuICBkYXRhS2V5OiBEYXRhS2V5PGFueT47XG4gIG5hbWVLZXk/OiBEYXRhS2V5PGFueT47XG4gIHZhbHVlS2V5PzogRGF0YUtleTxhbnk+O1xuICAvKiogTWF0Y2ggZWFjaCBzZWN0b3IncyBzdHJva2UgY29sb3IgdG8gaXQncyBmaWxsIGNvbG9yICovXG4gIGJsZW5kU3Ryb2tlPzogYm9vbGVhbjtcbiAgLyoqIFRoZSBtaW5pbXVtIGFuZ2xlIGZvciBuby16ZXJvIGVsZW1lbnQgKi9cbiAgbWluQW5nbGU/OiBudW1iZXI7XG4gIGxlZ2VuZFR5cGU/OiBMZWdlbmRUeXBlO1xuICB0b29sdGlwVHlwZT86IFRvb2x0aXBUeXBlO1xuICAvKiogdGhlIG1heCByYWRpdXMgb2YgcGllICovXG4gIG1heFJhZGl1cz86IG51bWJlcjtcbiAgaGlkZT86IGJvb2xlYW47XG4gIC8qKiB0aGUgaW5wdXQgZGF0YSAqL1xuICBkYXRhPzogYW55W107XG4gIHNlY3RvcnM/OiBQaWVTZWN0b3JEYXRhSXRlbVtdO1xuICBhY3RpdmVTaGFwZT86IFBpZUFjdGl2ZVNoYXBlO1xuICBsYWJlbExpbmU/OiBQaWVMYWJlbExpbmU7XG4gIGxhYmVsPzogUGllTGFiZWw7XG5cbiAgYWN0aXZlSW5kZXg/OiBudW1iZXIgfCBudW1iZXJbXTtcbiAgYW5pbWF0aW9uRWFzaW5nPzogQW5pbWF0aW9uVGltaW5nO1xuICBpc0FuaW1hdGlvbkFjdGl2ZT86IGJvb2xlYW47XG4gIGFuaW1hdGlvbkJlZ2luPzogbnVtYmVyO1xuICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgb25BbmltYXRpb25FbmQ/OiAoKSA9PiB2b2lkO1xuICBvbkFuaW1hdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcbiAgaWQ/OiBzdHJpbmc7XG4gIG9uTW91c2VFbnRlcj86IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIsIGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gIG9uTW91c2VMZWF2ZT86IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIsIGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gIG9uQ2xpY2s/OiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyLCBlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpZUxhYmVsUmVuZGVyUHJvcHMgZXh0ZW5kcyBQaWVEZWYge1xuICBuYW1lOiBzdHJpbmc7XG4gIHBlcmNlbnQ/OiBudW1iZXI7XG4gIHN0cm9rZTogc3RyaW5nO1xuICBpbmRleD86IG51bWJlcjtcbiAgdGV4dEFuY2hvcjogc3RyaW5nO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBpc0FuaW1hdGlvbkZpbmlzaGVkPzogYm9vbGVhbjtcbiAgcHJldklzQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgcHJldlNlY3RvcnM/OiBQaWVTZWN0b3JEYXRhSXRlbVtdO1xuICBjdXJTZWN0b3JzPzogUGllU2VjdG9yRGF0YUl0ZW1bXTtcbiAgcHJldkFuaW1hdGlvbklkPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQ8YW55LCBTVkdFbGVtZW50PiAmIFBpZVByb3BzO1xuXG5leHBvcnQgY2xhc3MgUGllIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1BpZSc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBzdHJva2U6ICcjZmZmJyxcbiAgICBmaWxsOiAnIzgwODA4MCcsXG4gICAgbGVnZW5kVHlwZTogJ3JlY3QnLFxuICAgIGN4OiAnNTAlJyxcbiAgICBjeTogJzUwJScsXG4gICAgc3RhcnRBbmdsZTogMCxcbiAgICBlbmRBbmdsZTogMzYwLFxuICAgIGlubmVyUmFkaXVzOiAwLFxuICAgIG91dGVyUmFkaXVzOiAnODAlJyxcbiAgICBwYWRkaW5nQW5nbGU6IDAsXG4gICAgbGFiZWxMaW5lOiB0cnVlLFxuICAgIGhpZGU6IGZhbHNlLFxuICAgIG1pbkFuZ2xlOiAwLFxuICAgIGlzQW5pbWF0aW9uQWN0aXZlOiAhR2xvYmFsLmlzU3NyLFxuICAgIGFuaW1hdGlvbkJlZ2luOiA0MDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDE1MDAsXG4gICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZScsXG4gICAgbmFtZUtleTogJ25hbWUnLFxuICAgIGJsZW5kU3Ryb2tlOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgcGFyc2VEZWx0YUFuZ2xlID0gKHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHNpZ24gPSBtYXRoU2lnbihlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IGRlbHRhQW5nbGUgPSBNYXRoLm1pbihNYXRoLmFicyhlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpLCAzNjApO1xuXG4gICAgcmV0dXJuIHNpZ24gKiBkZWx0YUFuZ2xlO1xuICB9O1xuXG4gIHN0YXRpYyBnZXRSZWFsUGllRGF0YSA9IChpdGVtOiBQaWUpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIGNoaWxkcmVuIH0gPSBpdGVtLnByb3BzO1xuICAgIGNvbnN0IHByZXNlbnRhdGlvblByb3BzID0gZmlsdGVyUHJvcHMoaXRlbS5wcm9wcyk7XG4gICAgY29uc3QgY2VsbHMgPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBDZWxsLmRpc3BsYXlOYW1lKTtcblxuICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAoKGVudHJ5LCBpbmRleCkgPT4gKHtcbiAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICAgIC4uLnByZXNlbnRhdGlvblByb3BzLFxuICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgLi4uKGNlbGxzICYmIGNlbGxzW2luZGV4XSAmJiBjZWxsc1tpbmRleF0ucHJvcHMpLFxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChjZWxscyAmJiBjZWxscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjZWxscy5tYXAoKGNlbGw6IFJlYWN0RWxlbWVudDxDZWxsUHJvcHM+KSA9PiAoeyAuLi5wcmVzZW50YXRpb25Qcm9wcywgLi4uY2VsbC5wcm9wcyB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9O1xuXG4gIHN0YXRpYyBwYXJzZUNvb3JkaW5hdGVPZlBpZSA9IChpdGVtOiBQaWUsIG9mZnNldDogQ2hhcnRPZmZzZXQpID0+IHtcbiAgICBjb25zdCB7IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCB9ID0gb2Zmc2V0O1xuICAgIGNvbnN0IG1heFBpZVJhZGl1cyA9IGdldE1heFJhZGl1cyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb25zdCBjeCA9IGxlZnQgKyBnZXRQZXJjZW50VmFsdWUoaXRlbS5wcm9wcy5jeCwgd2lkdGgsIHdpZHRoIC8gMik7XG4gICAgY29uc3QgY3kgPSB0b3AgKyBnZXRQZXJjZW50VmFsdWUoaXRlbS5wcm9wcy5jeSwgaGVpZ2h0LCBoZWlnaHQgLyAyKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGdldFBlcmNlbnRWYWx1ZShpdGVtLnByb3BzLmlubmVyUmFkaXVzLCBtYXhQaWVSYWRpdXMsIDApO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gZ2V0UGVyY2VudFZhbHVlKGl0ZW0ucHJvcHMub3V0ZXJSYWRpdXMsIG1heFBpZVJhZGl1cywgbWF4UGllUmFkaXVzICogMC44KTtcbiAgICBjb25zdCBtYXhSYWRpdXMgPSBpdGVtLnByb3BzLm1heFJhZGl1cyB8fCBNYXRoLnNxcnQod2lkdGggKiB3aWR0aCArIGhlaWdodCAqIGhlaWdodCkgLyAyO1xuXG4gICAgcmV0dXJuIHsgY3gsIGN5LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIG1heFJhZGl1cyB9O1xuICB9O1xuXG4gIHN0YXRpYyBnZXRDb21wb3NlZERhdGEgPSAoeyBpdGVtLCBvZmZzZXQgfTogeyBpdGVtOiBQaWU7IG9mZnNldDogQ2hhcnRPZmZzZXQgfSk6IE9taXQ8UHJvcHMsICdkYXRhS2V5Jz4gPT4ge1xuICAgIGNvbnN0IHBpZURhdGEgPSBQaWUuZ2V0UmVhbFBpZURhdGEoaXRlbSk7XG4gICAgaWYgKCFwaWVEYXRhIHx8ICFwaWVEYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjb3JuZXJSYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBwYWRkaW5nQW5nbGUsIGRhdGFLZXksIG5hbWVLZXksIHZhbHVlS2V5LCB0b29sdGlwVHlwZSB9ID0gaXRlbS5wcm9wcztcbiAgICBjb25zdCBtaW5BbmdsZSA9IE1hdGguYWJzKGl0ZW0ucHJvcHMubWluQW5nbGUpO1xuICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBQaWUucGFyc2VDb29yZGluYXRlT2ZQaWUoaXRlbSwgb2Zmc2V0KTtcbiAgICBjb25zdCBkZWx0YUFuZ2xlID0gUGllLnBhcnNlRGVsdGFBbmdsZShzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgY29uc3QgYWJzRGVsdGFBbmdsZSA9IE1hdGguYWJzKGRlbHRhQW5nbGUpO1xuXG4gICAgbGV0IHJlYWxEYXRhS2V5ID0gZGF0YUtleTtcblxuICAgIGlmIChfLmlzTmlsKGRhdGFLZXkpICYmIF8uaXNOaWwodmFsdWVLZXkpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYFVzZSBcImRhdGFLZXlcIiB0byBzcGVjaWZ5IHRoZSB2YWx1ZSBvZiBwaWUsXG4gICAgICB0aGUgcHJvcHMgXCJ2YWx1ZUtleVwiIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiAxLjEuMGAsXG4gICAgICApO1xuICAgICAgcmVhbERhdGFLZXkgPSAndmFsdWUnO1xuICAgIH0gZWxzZSBpZiAoXy5pc05pbChkYXRhS2V5KSkge1xuICAgICAgd2FybihcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGBVc2UgXCJkYXRhS2V5XCIgdG8gc3BlY2lmeSB0aGUgdmFsdWUgb2YgcGllLFxuICAgICAgdGhlIHByb3BzIFwidmFsdWVLZXlcIiB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gMS4xLjBgLFxuICAgICAgKTtcbiAgICAgIHJlYWxEYXRhS2V5ID0gdmFsdWVLZXk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm90WmVyb0l0ZW1Db3VudCA9IHBpZURhdGEuZmlsdGVyKGVudHJ5ID0+IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5LCByZWFsRGF0YUtleSwgMCkgIT09IDApLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbFBhZGluZ0FuZ2xlID0gKGFic0RlbHRhQW5nbGUgPj0gMzYwID8gbm90WmVyb0l0ZW1Db3VudCA6IG5vdFplcm9JdGVtQ291bnQgLSAxKSAqIHBhZGRpbmdBbmdsZTtcbiAgICBjb25zdCByZWFsVG90YWxBbmdsZSA9IGFic0RlbHRhQW5nbGUgLSBub3RaZXJvSXRlbUNvdW50ICogbWluQW5nbGUgLSB0b3RhbFBhZGluZ0FuZ2xlO1xuXG4gICAgY29uc3Qgc3VtID0gcGllRGF0YS5yZWR1Y2UoKHJlc3VsdDogbnVtYmVyLCBlbnRyeTogYW55KSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgcmVhbERhdGFLZXksIDApO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpc051bWJlcih2YWwpID8gdmFsIDogMCk7XG4gICAgfSwgMCk7XG4gICAgbGV0IHNlY3RvcnM7XG5cbiAgICBpZiAoc3VtID4gMCkge1xuICAgICAgbGV0IHByZXY6IFBpZVNlY3RvckRhdGFJdGVtO1xuICAgICAgc2VjdG9ycyA9IHBpZURhdGEubWFwKChlbnRyeTogYW55LCBpOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgdmFsID0gZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksIHJlYWxEYXRhS2V5LCAwKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5LCBuYW1lS2V5LCBpKTtcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IChpc051bWJlcih2YWwpID8gdmFsIDogMCkgLyBzdW07XG4gICAgICAgIGxldCB0ZW1wU3RhcnRBbmdsZTtcblxuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgIHRlbXBTdGFydEFuZ2xlID0gcHJldi5lbmRBbmdsZSArIG1hdGhTaWduKGRlbHRhQW5nbGUpICogcGFkZGluZ0FuZ2xlICogKHZhbCAhPT0gMCA/IDEgOiAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZW1wU3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZW1wRW5kQW5nbGUgPVxuICAgICAgICAgIHRlbXBTdGFydEFuZ2xlICsgbWF0aFNpZ24oZGVsdGFBbmdsZSkgKiAoKHZhbCAhPT0gMCA/IG1pbkFuZ2xlIDogMCkgKyBwZXJjZW50ICogcmVhbFRvdGFsQW5nbGUpO1xuICAgICAgICBjb25zdCBtaWRBbmdsZSA9ICh0ZW1wU3RhcnRBbmdsZSArIHRlbXBFbmRBbmdsZSkgLyAyO1xuICAgICAgICBjb25zdCBtaWRkbGVSYWRpdXMgPSAoY29vcmRpbmF0ZS5pbm5lclJhZGl1cyArIGNvb3JkaW5hdGUub3V0ZXJSYWRpdXMpIC8gMjtcbiAgICAgICAgY29uc3QgdG9vbHRpcFBheWxvYWQgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgICAgICBwYXlsb2FkOiBlbnRyeSxcbiAgICAgICAgICAgIGRhdGFLZXk6IHJlYWxEYXRhS2V5LFxuICAgICAgICAgICAgdHlwZTogdG9vbHRpcFR5cGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgdG9vbHRpcFBvc2l0aW9uID0gcG9sYXJUb0NhcnRlc2lhbihjb29yZGluYXRlLmN4LCBjb29yZGluYXRlLmN5LCBtaWRkbGVSYWRpdXMsIG1pZEFuZ2xlKTtcblxuICAgICAgICBwcmV2ID0ge1xuICAgICAgICAgIHBlcmNlbnQsXG4gICAgICAgICAgY29ybmVyUmFkaXVzLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdG9vbHRpcFBheWxvYWQsXG4gICAgICAgICAgbWlkQW5nbGUsXG4gICAgICAgICAgbWlkZGxlUmFkaXVzLFxuICAgICAgICAgIHRvb2x0aXBQb3NpdGlvbixcbiAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAuLi5jb29yZGluYXRlLFxuICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgcmVhbERhdGFLZXkpLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IHRlbXBTdGFydEFuZ2xlLFxuICAgICAgICAgIGVuZEFuZ2xlOiB0ZW1wRW5kQW5nbGUsXG4gICAgICAgICAgcGF5bG9hZDogZW50cnksXG4gICAgICAgICAgcGFkZGluZ0FuZ2xlOiBtYXRoU2lnbihkZWx0YUFuZ2xlKSAqIHBhZGRpbmdBbmdsZSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jb29yZGluYXRlLFxuICAgICAgc2VjdG9ycyxcbiAgICAgIGRhdGE6IHBpZURhdGEsXG4gICAgfTtcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNBbmltYXRpb25GaW5pc2hlZDogIXByb3BzLmlzQW5pbWF0aW9uQWN0aXZlLFxuICAgICAgcHJldklzQW5pbWF0aW9uQWN0aXZlOiBwcm9wcy5pc0FuaW1hdGlvbkFjdGl2ZSxcbiAgICAgIHByZXZBbmltYXRpb25JZDogcHJvcHMuYW5pbWF0aW9uSWQsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRlOiBTdGF0ZTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XG4gICAgaWYgKHByZXZTdGF0ZS5wcmV2SXNBbmltYXRpb25BY3RpdmUgIT09IG5leHRQcm9wcy5pc0FuaW1hdGlvbkFjdGl2ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldklzQW5pbWF0aW9uQWN0aXZlOiBuZXh0UHJvcHMuaXNBbmltYXRpb25BY3RpdmUsXG4gICAgICAgIHByZXZBbmltYXRpb25JZDogbmV4dFByb3BzLmFuaW1hdGlvbklkLFxuICAgICAgICBjdXJTZWN0b3JzOiBuZXh0UHJvcHMuc2VjdG9ycyxcbiAgICAgICAgcHJldlNlY3RvcnM6IFtdLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy5pc0FuaW1hdGlvbkFjdGl2ZSAmJiBuZXh0UHJvcHMuYW5pbWF0aW9uSWQgIT09IHByZXZTdGF0ZS5wcmV2QW5pbWF0aW9uSWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZXZBbmltYXRpb25JZDogbmV4dFByb3BzLmFuaW1hdGlvbklkLFxuICAgICAgICBjdXJTZWN0b3JzOiBuZXh0UHJvcHMuc2VjdG9ycyxcbiAgICAgICAgcHJldlNlY3RvcnM6IHByZXZTdGF0ZS5jdXJTZWN0b3JzLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy5zZWN0b3JzICE9PSBwcmV2U3RhdGUuY3VyU2VjdG9ycykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VyU2VjdG9yczogbmV4dFByb3BzLnNlY3RvcnMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3RhdGljIGdldFRleHRBbmNob3IoeDogbnVtYmVyLCBjeDogbnVtYmVyKSB7XG4gICAgaWYgKHggPiBjeCkge1xuICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuICAgIGlmICh4IDwgY3gpIHtcbiAgICAgIHJldHVybiAnZW5kJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ21pZGRsZSc7XG4gIH1cblxuICBpZCA9IHVuaXF1ZUlkKCdyZWNoYXJ0cy1waWUtJyk7XG5cbiAgaXNBY3RpdmVJbmRleChpOiBudW1iZXIpIHtcbiAgICBjb25zdCB7IGFjdGl2ZUluZGV4IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWN0aXZlSW5kZXgpKSB7XG4gICAgICByZXR1cm4gYWN0aXZlSW5kZXguaW5kZXhPZihpKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPT09IGFjdGl2ZUluZGV4O1xuICB9XG5cbiAgaGFuZGxlQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25BbmltYXRpb25FbmQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzQW5pbWF0aW9uRmluaXNoZWQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uQW5pbWF0aW9uRW5kKSkge1xuICAgICAgb25BbmltYXRpb25FbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvblN0YXJ0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIGlmIChfLmlzRnVuY3Rpb24ob25BbmltYXRpb25TdGFydCkpIHtcbiAgICAgIG9uQW5pbWF0aW9uU3RhcnQoKTtcbiAgICB9XG4gIH07XG5cbiAgc3RhdGljIHJlbmRlckxhYmVsTGluZUl0ZW0ob3B0aW9uOiBQaWVMYWJlbExpbmUsIHByb3BzOiBhbnkpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uKHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPEN1cnZlIHsuLi5wcm9wc30gdHlwZT1cImxpbmVhclwiIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBpZS1sYWJlbC1saW5lXCIgLz47XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyTGFiZWxJdGVtKG9wdGlvbjogUGllTGFiZWwsIHByb3BzOiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9XG4gICAgbGV0IGxhYmVsID0gdmFsdWU7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICBsYWJlbCA9IG9wdGlvbihwcm9wcyk7XG4gICAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQobGFiZWwpKSB7XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRleHQgey4uLnByb3BzfSBhbGlnbm1lbnRCYXNlbGluZT1cIm1pZGRsZVwiIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBpZS1sYWJlbC10ZXh0XCI+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvVGV4dD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTGFiZWxzKHNlY3RvcnM6IFBpZVNlY3RvckRhdGFJdGVtW10pIHtcbiAgICBjb25zdCB7IGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGlzQW5pbWF0aW9uQWN0aXZlICYmICF0aGlzLnN0YXRlLmlzQW5pbWF0aW9uRmluaXNoZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IGxhYmVsLCBsYWJlbExpbmUsIGRhdGFLZXksIHZhbHVlS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBpZVByb3BzID0gZmlsdGVyUHJvcHModGhpcy5wcm9wcyk7XG4gICAgY29uc3QgY3VzdG9tTGFiZWxQcm9wcyA9IGZpbHRlclByb3BzKGxhYmVsKTtcbiAgICBjb25zdCBjdXN0b21MYWJlbExpbmVQcm9wcyA9IGZpbHRlclByb3BzKGxhYmVsTGluZSk7XG4gICAgY29uc3Qgb2Zmc2V0UmFkaXVzID0gKGxhYmVsICYmIChsYWJlbCBhcyBhbnkpLm9mZnNldFJhZGl1cykgfHwgMjA7XG5cbiAgICBjb25zdCBsYWJlbHMgPSBzZWN0b3JzLm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgIGNvbnN0IG1pZEFuZ2xlID0gKGVudHJ5LnN0YXJ0QW5nbGUgKyBlbnRyeS5lbmRBbmdsZSkgLyAyO1xuICAgICAgY29uc3QgZW5kUG9pbnQgPSBwb2xhclRvQ2FydGVzaWFuKGVudHJ5LmN4LCBlbnRyeS5jeSwgZW50cnkub3V0ZXJSYWRpdXMgKyBvZmZzZXRSYWRpdXMsIG1pZEFuZ2xlKTtcbiAgICAgIGNvbnN0IGxhYmVsUHJvcHMgPSB7XG4gICAgICAgIC4uLnBpZVByb3BzLFxuICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgc3Ryb2tlOiAnbm9uZScsXG4gICAgICAgIC4uLmN1c3RvbUxhYmVsUHJvcHMsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICB0ZXh0QW5jaG9yOiBQaWUuZ2V0VGV4dEFuY2hvcihlbmRQb2ludC54LCBlbnRyeS5jeCksXG4gICAgICAgIC4uLmVuZFBvaW50LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGxpbmVQcm9wcyA9IHtcbiAgICAgICAgLi4ucGllUHJvcHMsXG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICBmaWxsOiAnbm9uZScsXG4gICAgICAgIHN0cm9rZTogZW50cnkuZmlsbCxcbiAgICAgICAgLi4uY3VzdG9tTGFiZWxMaW5lUHJvcHMsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBwb2ludHM6IFtwb2xhclRvQ2FydGVzaWFuKGVudHJ5LmN4LCBlbnRyeS5jeSwgZW50cnkub3V0ZXJSYWRpdXMsIG1pZEFuZ2xlKSwgZW5kUG9pbnRdLFxuICAgICAgICBrZXk6ICdsaW5lJyxcbiAgICAgIH07XG4gICAgICBsZXQgcmVhbERhdGFLZXkgPSBkYXRhS2V5O1xuICAgICAgLy8gVE9ETzogY29tcGF0aWJsZSB0byBsb3dlciB2ZXJzaW9uc1xuICAgICAgaWYgKF8uaXNOaWwoZGF0YUtleSkgJiYgXy5pc05pbCh2YWx1ZUtleSkpIHtcbiAgICAgICAgcmVhbERhdGFLZXkgPSAndmFsdWUnO1xuICAgICAgfSBlbHNlIGlmIChfLmlzTmlsKGRhdGFLZXkpKSB7XG4gICAgICAgIHJlYWxEYXRhS2V5ID0gdmFsdWVLZXk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgPExheWVyIGtleT17YGxhYmVsLSR7aX1gfT5cbiAgICAgICAgICB7bGFiZWxMaW5lICYmIFBpZS5yZW5kZXJMYWJlbExpbmVJdGVtKGxhYmVsTGluZSwgbGluZVByb3BzKX1cbiAgICAgICAgICB7UGllLnJlbmRlckxhYmVsSXRlbShsYWJlbCwgbGFiZWxQcm9wcywgZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksIHJlYWxEYXRhS2V5KSl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxMYXllciBjbGFzc05hbWU9XCJyZWNoYXJ0cy1waWUtbGFiZWxzXCI+e2xhYmVsc308L0xheWVyPjtcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJTZWN0b3JJdGVtKG9wdGlvbjogUGllQWN0aXZlU2hhcGUsIHByb3BzOiBhbnkpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uKHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XG4gICAgICByZXR1cm4gPFNlY3RvciB7Li4ucHJvcHN9IHsuLi5vcHRpb259IC8+O1xuICAgIH1cblxuICAgIHJldHVybiA8U2VjdG9yIHsuLi5wcm9wc30gLz47XG4gIH1cblxuICByZW5kZXJTZWN0b3JzU3RhdGljYWxseShzZWN0b3JzOiBQaWVTZWN0b3JEYXRhSXRlbVtdKSB7XG4gICAgY29uc3QgeyBhY3RpdmVTaGFwZSwgYmxlbmRTdHJva2UgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gc2VjdG9ycy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBzZWN0b3JPcHRpb25zID0gdGhpcy5pc0FjdGl2ZUluZGV4KGkpID8gYWN0aXZlU2hhcGUgOiBudWxsO1xuICAgICAgY29uc3Qgc2VjdG9yUHJvcHMgPSB7XG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICBzdHJva2U6IGJsZW5kU3Ryb2tlID8gZW50cnkuZmlsbCA6IGVudHJ5LnN0cm9rZSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMYXllclxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBpZS1zZWN0b3JcIlxuICAgICAgICAgIHsuLi5hZGFwdEV2ZW50c09mQ2hpbGQodGhpcy5wcm9wcywgZW50cnksIGkpfVxuICAgICAgICAgIGtleT17YHNlY3Rvci0ke2l9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgPlxuICAgICAgICAgIHtQaWUucmVuZGVyU2VjdG9ySXRlbShzZWN0b3JPcHRpb25zLCBzZWN0b3JQcm9wcyl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyU2VjdG9yc1dpdGhBbmltYXRpb24oKSB7XG4gICAgY29uc3QgeyBzZWN0b3JzLCBpc0FuaW1hdGlvbkFjdGl2ZSwgYW5pbWF0aW9uQmVnaW4sIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25FYXNpbmcsIGFuaW1hdGlvbklkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJldlNlY3RvcnMsIHByZXZJc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZVxuICAgICAgICBiZWdpbj17YW5pbWF0aW9uQmVnaW59XG4gICAgICAgIGR1cmF0aW9uPXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgaXNBY3RpdmU9e2lzQW5pbWF0aW9uQWN0aXZlfVxuICAgICAgICBlYXNpbmc9e2FuaW1hdGlvbkVhc2luZ31cbiAgICAgICAgZnJvbT17eyB0OiAwIH19XG4gICAgICAgIHRvPXt7IHQ6IDEgfX1cbiAgICAgICAga2V5PXtgcGllLSR7YW5pbWF0aW9uSWR9LSR7cHJldklzQW5pbWF0aW9uQWN0aXZlfWB9XG4gICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uU3RhcnR9XG4gICAgICAgIG9uQW5pbWF0aW9uRW5kPXt0aGlzLmhhbmRsZUFuaW1hdGlvbkVuZH1cbiAgICAgID5cbiAgICAgICAgeyh7IHQgfTogeyB0OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0ZXBEYXRhOiBQaWVTZWN0b3JEYXRhSXRlbVtdID0gW107XG4gICAgICAgICAgY29uc3QgZmlyc3QgPSBzZWN0b3JzICYmIHNlY3RvcnNbMF07XG4gICAgICAgICAgbGV0IGN1ckFuZ2xlID0gZmlyc3Quc3RhcnRBbmdsZTtcblxuICAgICAgICAgIHNlY3RvcnMuZm9yRWFjaCgoZW50cnksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gcHJldlNlY3RvcnMgJiYgcHJldlNlY3RvcnNbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgcGFkZGluZ0FuZ2xlID0gaW5kZXggPiAwID8gXy5nZXQoZW50cnksICdwYWRkaW5nQW5nbGUnLCAwKSA6IDA7XG5cbiAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFuZ2xlSXAgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LmVuZEFuZ2xlIC0gcHJldi5zdGFydEFuZ2xlLCBlbnRyeS5lbmRBbmdsZSAtIGVudHJ5LnN0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgICBjb25zdCBsYXRlc3QgPSB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogY3VyQW5nbGUgKyBwYWRkaW5nQW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IGN1ckFuZ2xlICsgYW5nbGVJcCh0KSArIHBhZGRpbmdBbmdsZSxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBzdGVwRGF0YS5wdXNoKGxhdGVzdCk7XG4gICAgICAgICAgICAgIGN1ckFuZ2xlID0gbGF0ZXN0LmVuZEFuZ2xlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBlbmRBbmdsZSwgc3RhcnRBbmdsZSB9ID0gZW50cnk7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvckFuZ2xlID0gaW50ZXJwb2xhdGVOdW1iZXIoMCwgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgICAgY29uc3QgZGVsdGFBbmdsZSA9IGludGVycG9sYXRvckFuZ2xlKHQpO1xuICAgICAgICAgICAgICBjb25zdCBsYXRlc3QgPSB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogY3VyQW5nbGUgKyBwYWRkaW5nQW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IGN1ckFuZ2xlICsgZGVsdGFBbmdsZSArIHBhZGRpbmdBbmdsZSxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBzdGVwRGF0YS5wdXNoKGxhdGVzdCk7XG4gICAgICAgICAgICAgIGN1ckFuZ2xlID0gbGF0ZXN0LmVuZEFuZ2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIDxMYXllcj57dGhpcy5yZW5kZXJTZWN0b3JzU3RhdGljYWxseShzdGVwRGF0YSl9PC9MYXllcj47XG4gICAgICAgIH19XG4gICAgICA8L0FuaW1hdGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclNlY3RvcnMoKSB7XG4gICAgY29uc3QgeyBzZWN0b3JzLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZTZWN0b3JzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGlzQW5pbWF0aW9uQWN0aXZlICYmIHNlY3RvcnMgJiYgc2VjdG9ycy5sZW5ndGggJiYgKCFwcmV2U2VjdG9ycyB8fCAhXy5pc0VxdWFsKHByZXZTZWN0b3JzLCBzZWN0b3JzKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclNlY3RvcnNXaXRoQW5pbWF0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbmRlclNlY3RvcnNTdGF0aWNhbGx5KHNlY3RvcnMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGlkZSwgc2VjdG9ycywgY2xhc3NOYW1lLCBsYWJlbCwgY3gsIGN5LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNBbmltYXRpb25GaW5pc2hlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChcbiAgICAgIGhpZGUgfHxcbiAgICAgICFzZWN0b3JzIHx8XG4gICAgICAhc2VjdG9ycy5sZW5ndGggfHxcbiAgICAgICFpc051bWJlcihjeCBhcyBudW1iZXIpIHx8XG4gICAgICAhaXNOdW1iZXIoY3kgYXMgbnVtYmVyKSB8fFxuICAgICAgIWlzTnVtYmVyKGlubmVyUmFkaXVzIGFzIG51bWJlcikgfHxcbiAgICAgICFpc051bWJlcihvdXRlclJhZGl1cyBhcyBudW1iZXIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtcGllJywgY2xhc3NOYW1lKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPXtsYXllckNsYXNzfT5cbiAgICAgICAge3RoaXMucmVuZGVyU2VjdG9ycygpfVxuICAgICAgICB7bGFiZWwgJiYgdGhpcy5yZW5kZXJMYWJlbHMoc2VjdG9ycyl9XG4gICAgICAgIHtMYWJlbC5yZW5kZXJDYWxsQnlQYXJlbnQodGhpcy5wcm9wcywgbnVsbCwgZmFsc2UpfVxuICAgICAgICB7KCFpc0FuaW1hdGlvbkFjdGl2ZSB8fCBpc0FuaW1hdGlvbkZpbmlzaGVkKSAmJiBMYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50KHRoaXMucHJvcHMsIHNlY3RvcnMsIGZhbHNlKX1cbiAgICAgIDwvTGF5ZXI+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFJhZGFyXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIE1vdXNlRXZlbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGludGVycG9sYXRlTnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHsgcG9sYXJUb0NhcnRlc2lhbiB9IGZyb20gJy4uL3V0aWwvUG9sYXJVdGlscyc7XG5pbXBvcnQgeyBnZXRWYWx1ZUJ5RGF0YUtleSB9IGZyb20gJy4uL3V0aWwvQ2hhcnRVdGlscyc7XG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSAnLi4vc2hhcGUvUG9seWdvbic7XG5pbXBvcnQgeyBEb3QsIFByb3BzIGFzIERvdFByb3BzIH0gZnJvbSAnLi4vc2hhcGUvRG90JztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IExhYmVsTGlzdCB9IGZyb20gJy4uL2NvbXBvbmVudC9MYWJlbExpc3QnO1xuaW1wb3J0IHsgTGVnZW5kVHlwZSwgVG9vbHRpcFR5cGUsIEFuaW1hdGlvblRpbWluZywgZmlsdGVyUHJvcHMsIERhdGFLZXkgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IFByb3BzIGFzIFBvbGFyQW5nbGVBeGlzUHJvcHMgfSBmcm9tICcuL1BvbGFyQW5nbGVBeGlzJztcbmltcG9ydCB7IFByb3BzIGFzIFBvbGFyUmFkaXVzQXhpc1Byb3BzIH0gZnJvbSAnLi9Qb2xhclJhZGl1c0F4aXMnO1xuXG5pbnRlcmZhY2UgUmFkYXJQb2ludCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICBjeD86IG51bWJlcjtcbiAgY3k/OiBudW1iZXI7XG4gIGFuZ2xlPzogbnVtYmVyO1xuICByYWRpdXM/OiBudW1iZXI7XG4gIHZhbHVlPzogbnVtYmVyO1xuICBwYXlsb2FkPzogYW55O1xuICBuYW1lPzogc3RyaW5nO1xufVxuXG50eXBlIFJhZGFyRG90ID0gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+IHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pIHwgRG90UHJvcHMgfCBib29sZWFuO1xuXG5pbnRlcmZhY2UgUmFkYXJQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgZGF0YUtleTogRGF0YUtleTxhbnk+O1xuICBhbmdsZUF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgcmFkaXVzQXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICBwb2ludHM/OiBSYWRhclBvaW50W107XG4gIGJhc2VMaW5lUG9pbnRzPzogUmFkYXJQb2ludFtdO1xuICBpc1JhbmdlPzogYm9vbGVhbjtcbiAgc2hhcGU/OiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50Pik7XG4gIGFjdGl2ZURvdD86IFJhZGFyRG90O1xuICBkb3Q/OiBSYWRhckRvdDtcbiAgbGVnZW5kVHlwZT86IExlZ2VuZFR5cGU7XG4gIHRvb2x0aXBUeXBlPzogVG9vbHRpcFR5cGU7XG4gIGhpZGU/OiBib29sZWFuO1xuICBjb25uZWN0TnVsbHM/OiBib29sZWFuO1xuXG4gIGxhYmVsPzogYW55O1xuICBvbkFuaW1hdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcbiAgb25BbmltYXRpb25FbmQ/OiAoKSA9PiB2b2lkO1xuICBhbmltYXRpb25CZWdpbj86IG51bWJlcjtcbiAgYW5pbWF0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gIGlzQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgYW5pbWF0aW9uSWQ/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkVhc2luZz86IEFuaW1hdGlvblRpbWluZztcblxuICBvbk1vdXNlRW50ZXI/OiAocHJvcHM6IGFueSwgZTogTW91c2VFdmVudDxTVkdQb2x5Z29uRWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uTW91c2VMZWF2ZT86IChwcm9wczogYW55LCBlOiBNb3VzZUV2ZW50PFNWR1BvbHlnb25FbGVtZW50PikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBPbWl0PFNWR1Byb3BzPFNWR0VsZW1lbnQ+LCAnb25Nb3VzZUVudGVyJyB8ICdvbk1vdXNlTGVhdmUnPiAmIFJhZGFyUHJvcHM7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGlzQW5pbWF0aW9uRmluaXNoZWQ/OiBib29sZWFuO1xuICBwcmV2UG9pbnRzPzogUmFkYXJQb2ludFtdO1xuICBjdXJQb2ludHM/OiBSYWRhclBvaW50W107XG4gIHByZXZBbmltYXRpb25JZD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFJhZGFyIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1JhZGFyJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFuZ2xlQXhpc0lkOiAwLFxuICAgIHJhZGl1c0F4aXNJZDogMCxcbiAgICBoaWRlOiBmYWxzZSxcbiAgICBhY3RpdmVEb3Q6IHRydWUsXG4gICAgZG90OiBmYWxzZSxcbiAgICBsZWdlbmRUeXBlOiAncmVjdCcsXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uQmVnaW46IDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDE1MDAsXG4gICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZScsXG4gIH07XG5cbiAgc3RhdGljIGdldENvbXBvc2VkRGF0YSA9ICh7XG4gICAgcmFkaXVzQXhpcyxcbiAgICBhbmdsZUF4aXMsXG4gICAgZGlzcGxheWVkRGF0YSxcbiAgICBkYXRhS2V5LFxuICAgIGJhbmRTaXplLFxuICB9OiB7XG4gICAgcmFkaXVzQXhpczogUG9sYXJSYWRpdXNBeGlzUHJvcHMgJiB7IHNjYWxlOiAodmFsdWU6IGFueSkgPT4gbnVtYmVyIH07XG4gICAgYW5nbGVBeGlzOiBQb2xhckFuZ2xlQXhpc1Byb3BzICYgeyBzY2FsZTogKHZhbHVlOiBhbnkpID0+IG51bWJlciB9O1xuICAgIGRpc3BsYXllZERhdGE6IGFueVtdO1xuICAgIGRhdGFLZXk6IFJhZGFyUHJvcHNbJ2RhdGFLZXknXTtcbiAgICBiYW5kU2l6ZTogbnVtYmVyO1xuICB9KSA9PiB7XG4gICAgY29uc3QgeyBjeCwgY3kgfSA9IGFuZ2xlQXhpcztcbiAgICBsZXQgaXNSYW5nZSA9IGZhbHNlO1xuICAgIGNvbnN0IHBvaW50czogUmFkYXJQb2ludFtdID0gW107XG5cbiAgICBkaXNwbGF5ZWREYXRhLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksIGFuZ2xlQXhpcy5kYXRhS2V5LCBpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0VmFsdWVCeURhdGFLZXkoZW50cnksIGRhdGFLZXkpO1xuICAgICAgY29uc3QgYW5nbGUgPSBhbmdsZUF4aXMuc2NhbGUobmFtZSkgKyAoYmFuZFNpemUgfHwgMCk7XG4gICAgICBjb25zdCBwb2ludFZhbHVlID0gXy5pc0FycmF5KHZhbHVlKSA/IF8ubGFzdCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgIGNvbnN0IHJhZGl1cyA9IF8uaXNOaWwocG9pbnRWYWx1ZSkgPyB1bmRlZmluZWQgOiByYWRpdXNBeGlzLnNjYWxlKHBvaW50VmFsdWUpO1xuXG4gICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPj0gMikge1xuICAgICAgICBpc1JhbmdlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAuLi5wb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgcmFkaXVzLCBhbmdsZSksXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjeCxcbiAgICAgICAgY3ksXG4gICAgICAgIHJhZGl1cyxcbiAgICAgICAgYW5nbGUsXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgYmFzZUxpbmVQb2ludHM6IFJhZGFyUG9pbnRbXSA9IFtdO1xuXG4gICAgaWYgKGlzUmFuZ2UpIHtcbiAgICAgIHBvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcbiAgICAgICAgaWYgKF8uaXNBcnJheShwb2ludC52YWx1ZSkpIHtcbiAgICAgICAgICBjb25zdCBiYXNlVmFsdWUgPSBfLmZpcnN0KHBvaW50LnZhbHVlKTtcbiAgICAgICAgICBjb25zdCByYWRpdXMgPSBfLmlzTmlsKGJhc2VWYWx1ZSkgPyB1bmRlZmluZWQgOiByYWRpdXNBeGlzLnNjYWxlKGJhc2VWYWx1ZSk7XG5cbiAgICAgICAgICBiYXNlTGluZVBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgIC4uLnBvaW50LFxuICAgICAgICAgICAgcmFkaXVzLFxuICAgICAgICAgICAgLi4ucG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgcG9pbnQuYW5nbGUpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VMaW5lUG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBwb2ludHMsIGlzUmFuZ2UsIGJhc2VMaW5lUG9pbnRzIH07XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlID0geyBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAobmV4dFByb3BzLmFuaW1hdGlvbklkICE9PSBwcmV2U3RhdGUucHJldkFuaW1hdGlvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2QW5pbWF0aW9uSWQ6IG5leHRQcm9wcy5hbmltYXRpb25JZCxcbiAgICAgICAgY3VyUG9pbnRzOiBuZXh0UHJvcHMucG9pbnRzLFxuICAgICAgICBwcmV2UG9pbnRzOiBwcmV2U3RhdGUuY3VyUG9pbnRzLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy5wb2ludHMgIT09IHByZXZTdGF0ZS5jdXJQb2ludHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1clBvaW50czogbmV4dFByb3BzLnBvaW50cyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBoYW5kbGVBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvbkVuZCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogdHJ1ZSB9KTtcblxuICAgIGlmIChfLmlzRnVuY3Rpb24ob25BbmltYXRpb25FbmQpKSB7XG4gICAgICBvbkFuaW1hdGlvbkVuZCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVBbmltYXRpb25TdGFydCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uQW5pbWF0aW9uU3RhcnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogZmFsc2UgfSk7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uQW5pbWF0aW9uU3RhcnQpKSB7XG4gICAgICBvbkFuaW1hdGlvblN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZU1vdXNlRW50ZXIgPSAoZTogTW91c2VFdmVudDxTVkdQb2x5Z29uRWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB7IG9uTW91c2VFbnRlciB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChvbk1vdXNlRW50ZXIpIHtcbiAgICAgIG9uTW91c2VFbnRlcih0aGlzLnByb3BzLCBlKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlTW91c2VMZWF2ZSA9IChlOiBNb3VzZUV2ZW50PFNWR1BvbHlnb25FbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHsgb25Nb3VzZUxlYXZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKHRoaXMucHJvcHMsIGUpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgcmVuZGVyRG90SXRlbShvcHRpb246IFJhZGFyRG90LCBwcm9wczogYW55KSB7XG4gICAgbGV0IGRvdEl0ZW07XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgZG90SXRlbSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICBkb3RJdGVtID0gb3B0aW9uKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG90SXRlbSA9IDxEb3Qgey4uLnByb3BzfSBjbGFzc05hbWU9XCJyZWNoYXJ0cy1yYWRhci1kb3RcIiAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gZG90SXRlbTtcbiAgfVxuXG4gIHJlbmRlckRvdHMocG9pbnRzOiBSYWRhclBvaW50W10pIHtcbiAgICBjb25zdCB7IGRvdCwgZGF0YUtleSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYXNlUHJvcHMgPSBmaWx0ZXJQcm9wcyh0aGlzLnByb3BzKTtcbiAgICBjb25zdCBjdXN0b21Eb3RQcm9wcyA9IGZpbHRlclByb3BzKGRvdCk7XG5cbiAgICBjb25zdCBkb3RzID0gcG9pbnRzLm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgIGNvbnN0IGRvdFByb3BzID0ge1xuICAgICAgICBrZXk6IGBkb3QtJHtpfWAsXG4gICAgICAgIHI6IDMsXG4gICAgICAgIC4uLmJhc2VQcm9wcyxcbiAgICAgICAgLi4uY3VzdG9tRG90UHJvcHMsXG4gICAgICAgIGRhdGFLZXksXG4gICAgICAgIGN4OiBlbnRyeS54LFxuICAgICAgICBjeTogZW50cnkueSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFJhZGFyLnJlbmRlckRvdEl0ZW0oZG90LCBkb3RQcm9wcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLXJhZGFyLWRvdHNcIj57ZG90c308L0xheWVyPjtcbiAgfVxuXG4gIHJlbmRlclBvbHlnb25TdGF0aWNhbGx5KHBvaW50czogUmFkYXJQb2ludFtdKSB7XG4gICAgY29uc3QgeyBzaGFwZSwgZG90LCBpc1JhbmdlLCBiYXNlTGluZVBvaW50cywgY29ubmVjdE51bGxzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IHJhZGFyO1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChzaGFwZSkpIHtcbiAgICAgIHJhZGFyID0gUmVhY3QuY2xvbmVFbGVtZW50KHNoYXBlLCB7IC4uLnRoaXMucHJvcHMsIHBvaW50cyB9IGFzIGFueSk7XG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24oc2hhcGUpKSB7XG4gICAgICByYWRhciA9IHNoYXBlKHsgLi4udGhpcy5wcm9wcywgcG9pbnRzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByYWRhciA9IChcbiAgICAgICAgPFBvbHlnb25cbiAgICAgICAgICB7Li4uZmlsdGVyUHJvcHModGhpcy5wcm9wcywgdHJ1ZSl9XG4gICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLmhhbmRsZU1vdXNlRW50ZXJ9XG4gICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZU1vdXNlTGVhdmV9XG4gICAgICAgICAgcG9pbnRzPXtwb2ludHN9XG4gICAgICAgICAgYmFzZUxpbmVQb2ludHM9e2lzUmFuZ2UgPyBiYXNlTGluZVBvaW50cyA6IG51bGx9XG4gICAgICAgICAgY29ubmVjdE51bGxzPXtjb25uZWN0TnVsbHN9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtcmFkYXItcG9seWdvblwiPlxuICAgICAgICB7cmFkYXJ9XG4gICAgICAgIHtkb3QgPyB0aGlzLnJlbmRlckRvdHMocG9pbnRzKSA6IG51bGx9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJQb2x5Z29uV2l0aEFuaW1hdGlvbigpIHtcbiAgICBjb25zdCB7IHBvaW50cywgaXNBbmltYXRpb25BY3RpdmUsIGFuaW1hdGlvbkJlZ2luLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uRWFzaW5nLCBhbmltYXRpb25JZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZQb2ludHMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVcbiAgICAgICAgYmVnaW49e2FuaW1hdGlvbkJlZ2lufVxuICAgICAgICBkdXJhdGlvbj17YW5pbWF0aW9uRHVyYXRpb259XG4gICAgICAgIGlzQWN0aXZlPXtpc0FuaW1hdGlvbkFjdGl2ZX1cbiAgICAgICAgZWFzaW5nPXthbmltYXRpb25FYXNpbmd9XG4gICAgICAgIGZyb209e3sgdDogMCB9fVxuICAgICAgICB0bz17eyB0OiAxIH19XG4gICAgICAgIGtleT17YHJhZGFyLSR7YW5pbWF0aW9uSWR9YH1cbiAgICAgICAgb25BbmltYXRpb25FbmQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uRW5kfVxuICAgICAgICBvbkFuaW1hdGlvblN0YXJ0PXt0aGlzLmhhbmRsZUFuaW1hdGlvblN0YXJ0fVxuICAgICAgPlxuICAgICAgICB7KHsgdCB9OiB7IHQ6IG51bWJlciB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgcHJldlBvaW50c0RpZmZGYWN0b3IgPSBwcmV2UG9pbnRzICYmIHByZXZQb2ludHMubGVuZ3RoIC8gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBzdGVwRGF0YSA9IHBvaW50cy5tYXAoKGVudHJ5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IHByZXZQb2ludHMgJiYgcHJldlBvaW50c1tNYXRoLmZsb29yKGluZGV4ICogcHJldlBvaW50c0RpZmZGYWN0b3IpXTtcblxuICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yWCA9IGludGVycG9sYXRlTnVtYmVyKHByZXYueCwgZW50cnkueCk7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclkgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnksIGVudHJ5LnkpO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgeDogaW50ZXJwb2xhdG9yWCh0KSxcbiAgICAgICAgICAgICAgICB5OiBpbnRlcnBvbGF0b3JZKHQpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JYID0gaW50ZXJwb2xhdGVOdW1iZXIoZW50cnkuY3gsIGVudHJ5LngpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yWSA9IGludGVycG9sYXRlTnVtYmVyKGVudHJ5LmN5LCBlbnRyeS55KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgIHg6IGludGVycG9sYXRvclgodCksXG4gICAgICAgICAgICAgIHk6IGludGVycG9sYXRvclkodCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUG9seWdvblN0YXRpY2FsbHkoc3RlcERhdGEpO1xuICAgICAgICB9fVxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJQb2x5Z29uKCkge1xuICAgIGNvbnN0IHsgcG9pbnRzLCBpc0FuaW1hdGlvbkFjdGl2ZSwgaXNSYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZQb2ludHMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoaXNBbmltYXRpb25BY3RpdmUgJiYgcG9pbnRzICYmIHBvaW50cy5sZW5ndGggJiYgIWlzUmFuZ2UgJiYgKCFwcmV2UG9pbnRzIHx8ICFfLmlzRXF1YWwocHJldlBvaW50cywgcG9pbnRzKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclBvbHlnb25XaXRoQW5pbWF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyUG9seWdvblN0YXRpY2FsbHkocG9pbnRzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhpZGUsIGNsYXNzTmFtZSwgcG9pbnRzLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChoaWRlIHx8ICFwb2ludHMgfHwgIXBvaW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaXNBbmltYXRpb25GaW5pc2hlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtcmFkYXInLCBjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMYXllciBjbGFzc05hbWU9e2xheWVyQ2xhc3N9PlxuICAgICAgICB7dGhpcy5yZW5kZXJQb2x5Z29uKCl9XG4gICAgICAgIHsoIWlzQW5pbWF0aW9uQWN0aXZlIHx8IGlzQW5pbWF0aW9uRmluaXNoZWQpICYmIExhYmVsTGlzdC5yZW5kZXJDYWxsQnlQYXJlbnQodGhpcy5wcm9wcywgcG9pbnRzKX1cbiAgICAgIDwvTGF5ZXI+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFJlbmRlciBhIGdyb3VwIG9mIHJhZGlhbCBiYXJcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyZWFjdC1zbW9vdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNlY3RvciwgUHJvcHMgYXMgU2VjdG9yUHJvcHMgfSBmcm9tICcuLi9zaGFwZS9TZWN0b3InO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgZmluZEFsbEJ5VHlwZSB9IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuLi91dGlsL0dsb2JhbCc7XG5pbXBvcnQgeyBJbXBsaWNpdExhYmVsTGlzdFR5cGUsIExhYmVsTGlzdCB9IGZyb20gJy4uL2NvbXBvbmVudC9MYWJlbExpc3QnO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4uL2NvbXBvbmVudC9DZWxsJztcbmltcG9ydCB7IG1hdGhTaWduLCBpbnRlcnBvbGF0ZU51bWJlciB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7XG4gIGdldENhdGVDb29yZGluYXRlT2ZCYXIsXG4gIGZpbmRQb3NpdGlvbk9mQmFyLFxuICBnZXRWYWx1ZUJ5RGF0YUtleSxcbiAgdHJ1bmNhdGVCeURvbWFpbixcbiAgZ2V0QmFzZVZhbHVlT2ZCYXIsXG59IGZyb20gJy4uL3V0aWwvQ2hhcnRVdGlscyc7XG5pbXBvcnQge1xuICBMZWdlbmRUeXBlLFxuICBUb29sdGlwVHlwZSxcbiAgQW5pbWF0aW9uVGltaW5nLFxuICBmaWx0ZXJQcm9wcyxcbiAgVGlja0l0ZW0sXG4gIGFkYXB0RXZlbnRzT2ZDaGlsZCxcbiAgUHJlc2VudGF0aW9uQXR0cmlidXRlc0FkYXB0Q2hpbGRFdmVudCxcbn0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG4vLyBUT0RPOiBDYXVzZSBvZiBjaXJjdWxhciBkZXBlbmRlbmN5LiBOZWVkcyByZWZhY3RvcmluZyBvZiBmdW5jdGlvbnMgdGhhdCBuZWVkIHRoZW0uXG4vLyBpbXBvcnQgeyBBbmdsZUF4aXNQcm9wcywgUmFkaXVzQXhpc1Byb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgUmFkaWFsQmFyRGF0YUl0ZW0gPSBTZWN0b3JQcm9wcyAmIHtcbiAgdmFsdWU/OiBhbnk7XG4gIHBheWxvYWQ/OiBhbnk7XG4gIGJhY2tncm91bmQ/OiBTZWN0b3JQcm9wcztcbn07XG5cbnR5cGUgUmFkaWFsQmFyU2hhcGUgPSBSZWFjdEVsZW1lbnQgfCAoKHByb3BzOiBQcm9wcykgPT4gUmVhY3ROb2RlKTtcbnR5cGUgUmFkaWFsQmFyQmFja2dyb3VuZCA9IFJlYWN0RWxlbWVudCB8ICgocHJvcHM6IFByb3BzKSA9PiBSZWFjdE5vZGUpIHwgU2VjdG9yUHJvcHMgfCBib29sZWFuO1xuXG5pbnRlcmZhY2UgUmFkaWFsQmFyUHJvcHMge1xuICBhbmltYXRpb25JZD86IHN0cmluZyB8IG51bWJlcjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBhbmdsZUF4aXNJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgcmFkaXVzQXhpc0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICBzdGFydEFuZ2xlPzogbnVtYmVyO1xuICBlbmRBbmdsZT86IG51bWJlcjtcbiAgc2hhcGU/OiBSYWRpYWxCYXJTaGFwZTtcbiAgYWN0aXZlU2hhcGU/OiBSYWRpYWxCYXJTaGFwZTtcbiAgYWN0aXZlSW5kZXg/OiBudW1iZXI7XG4gIGRhdGFLZXk6IHN0cmluZyB8IG51bWJlciB8ICgob2JqOiBhbnkpID0+IGFueSk7XG4gIGNvcm5lclJhZGl1cz86IHN0cmluZyB8IG51bWJlcjtcbiAgZm9yY2VDb3JuZXJSYWRpdXM/OiBib29sZWFuO1xuICBjb3JuZXJJc0V4dGVybmFsPzogYm9vbGVhbjtcbiAgbWluUG9pbnRTaXplPzogbnVtYmVyO1xuICBtYXhCYXJTaXplPzogbnVtYmVyO1xuICBkYXRhPzogUmFkaWFsQmFyRGF0YUl0ZW1bXTtcbiAgbGVnZW5kVHlwZT86IExlZ2VuZFR5cGU7XG4gIHRvb2x0aXBUeXBlPzogVG9vbHRpcFR5cGU7XG4gIGhpZGU/OiBib29sZWFuO1xuICBsYWJlbD86IEltcGxpY2l0TGFiZWxMaXN0VHlwZTxhbnk+O1xuICBzdGFja0lkPzogc3RyaW5nIHwgbnVtYmVyO1xuICBiYWNrZ3JvdW5kPzogUmFkaWFsQmFyQmFja2dyb3VuZDtcbiAgb25BbmltYXRpb25TdGFydD86ICgpID0+IHZvaWQ7XG4gIG9uQW5pbWF0aW9uRW5kPzogKCkgPT4gdm9pZDtcbiAgaXNBbmltYXRpb25BY3RpdmU/OiBib29sZWFuO1xuICBhbmltYXRpb25CZWdpbj86IG51bWJlcjtcbiAgYW5pbWF0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkVhc2luZz86IEFuaW1hdGlvblRpbWluZztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBQcmVzZW50YXRpb25BdHRyaWJ1dGVzQWRhcHRDaGlsZEV2ZW50PGFueSwgU1ZHRWxlbWVudD4gJiBSYWRpYWxCYXJQcm9wcztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgcmVhZG9ubHkgaXNBbmltYXRpb25GaW5pc2hlZD86IGJvb2xlYW47XG4gIHJlYWRvbmx5IHByZXZEYXRhPzogUmFkaWFsQmFyRGF0YUl0ZW1bXTtcbiAgcmVhZG9ubHkgY3VyRGF0YT86IFJhZGlhbEJhckRhdGFJdGVtW107XG4gIHJlYWRvbmx5IHByZXZBbmltYXRpb25JZD86IHN0cmluZyB8IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFJhZGlhbEJhciBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdSYWRpYWxCYXInO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYW5nbGVBeGlzSWQ6IDAsXG4gICAgcmFkaXVzQXhpc0lkOiAwLFxuICAgIG1pblBvaW50U2l6ZTogMCxcbiAgICBoaWRlOiBmYWxzZSxcbiAgICBsZWdlbmRUeXBlOiAncmVjdCcsXG4gICAgZGF0YTogW10gYXMgUmFkaWFsQmFyRGF0YUl0ZW1bXSxcbiAgICBpc0FuaW1hdGlvbkFjdGl2ZTogIUdsb2JhbC5pc1NzcixcbiAgICBhbmltYXRpb25CZWdpbjogMCxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMTUwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlJyxcbiAgICBmb3JjZUNvcm5lclJhZGl1czogZmFsc2UsXG4gICAgY29ybmVySXNFeHRlcm5hbDogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGdldENvbXBvc2VkRGF0YSA9ICh7XG4gICAgaXRlbSxcbiAgICBwcm9wcyxcbiAgICByYWRpdXNBeGlzLFxuICAgIHJhZGl1c0F4aXNUaWNrcyxcbiAgICBhbmdsZUF4aXMsXG4gICAgYW5nbGVBeGlzVGlja3MsXG4gICAgZGlzcGxheWVkRGF0YSxcbiAgICBkYXRhS2V5LFxuICAgIHN0YWNrZWREYXRhLFxuICAgIGJhclBvc2l0aW9uLFxuICAgIGJhbmRTaXplLFxuICAgIGRhdGFTdGFydEluZGV4LFxuICB9OiB7XG4gICAgaXRlbTogUmFkaWFsQmFyO1xuICAgIHByb3BzOiBhbnk7XG4gICAgcmFkaXVzQXhpczogYW55OyAvLyBSYWRpdXNBeGlzUHJvcHM7XG4gICAgcmFkaXVzQXhpc1RpY2tzOiBBcnJheTxUaWNrSXRlbT47XG4gICAgYW5nbGVBeGlzOiBhbnk7IC8vIEFuZ2xlQXhpc1Byb3BzO1xuICAgIGFuZ2xlQXhpc1RpY2tzOiBBcnJheTxUaWNrSXRlbT47XG4gICAgZGlzcGxheWVkRGF0YTogYW55W107XG4gICAgZGF0YUtleTogUHJvcHNbJ2RhdGFLZXknXTtcbiAgICBzdGFja2VkRGF0YT86IGFueVtdO1xuICAgIGJhclBvc2l0aW9uPzogYW55W107XG4gICAgYmFuZFNpemU/OiBudW1iZXI7XG4gICAgZGF0YVN0YXJ0SW5kZXg6IG51bWJlcjtcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbk9mQmFyKGJhclBvc2l0aW9uLCBpdGVtKTtcbiAgICBpZiAoIXBvcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjeCwgY3kgfSA9IGFuZ2xlQXhpcztcbiAgICBjb25zdCB7IGxheW91dCB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbWluUG9pbnRTaXplIH0gPSBpdGVtLnByb3BzO1xuICAgIGNvbnN0IG51bWVyaWNBeGlzID0gbGF5b3V0ID09PSAncmFkaWFsJyA/IGFuZ2xlQXhpcyA6IHJhZGl1c0F4aXM7XG4gICAgY29uc3Qgc3RhY2tlZERvbWFpbiA9IHN0YWNrZWREYXRhID8gbnVtZXJpY0F4aXMuc2NhbGUuZG9tYWluKCkgOiBudWxsO1xuICAgIGNvbnN0IGJhc2VWYWx1ZSA9IGdldEJhc2VWYWx1ZU9mQmFyKHsgbnVtZXJpY0F4aXMgfSk7XG4gICAgY29uc3QgY2VsbHMgPSBmaW5kQWxsQnlUeXBlKGNoaWxkcmVuLCBDZWxsLmRpc3BsYXlOYW1lKTtcbiAgICBjb25zdCBzZWN0b3JzID0gZGlzcGxheWVkRGF0YS5tYXAoKGVudHJ5OiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGxldCB2YWx1ZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYmFja2dyb3VuZFNlY3RvcjtcblxuICAgICAgaWYgKHN0YWNrZWREYXRhKSB7XG4gICAgICAgIHZhbHVlID0gdHJ1bmNhdGVCeURvbWFpbihzdGFja2VkRGF0YVtkYXRhU3RhcnRJbmRleCArIGluZGV4XSwgc3RhY2tlZERvbWFpbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5LCBkYXRhS2V5KTtcbiAgICAgICAgaWYgKCFfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBbYmFzZVZhbHVlLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxheW91dCA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgaW5uZXJSYWRpdXMgPSBnZXRDYXRlQ29vcmRpbmF0ZU9mQmFyKHtcbiAgICAgICAgICBheGlzOiByYWRpdXNBeGlzLFxuICAgICAgICAgIHRpY2tzOiByYWRpdXNBeGlzVGlja3MsXG4gICAgICAgICAgYmFuZFNpemUsXG4gICAgICAgICAgb2Zmc2V0OiBwb3Mub2Zmc2V0LFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICB9KTtcbiAgICAgICAgZW5kQW5nbGUgPSBhbmdsZUF4aXMuc2NhbGUodmFsdWVbMV0pO1xuICAgICAgICBzdGFydEFuZ2xlID0gYW5nbGVBeGlzLnNjYWxlKHZhbHVlWzBdKTtcbiAgICAgICAgb3V0ZXJSYWRpdXMgPSBpbm5lclJhZGl1cyArIHBvcy5zaXplO1xuICAgICAgICBjb25zdCBkZWx0YUFuZ2xlID0gZW5kQW5nbGUgLSBzdGFydEFuZ2xlO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhtaW5Qb2ludFNpemUpID4gMCAmJiBNYXRoLmFicyhkZWx0YUFuZ2xlKSA8IE1hdGguYWJzKG1pblBvaW50U2l6ZSkpIHtcbiAgICAgICAgICBjb25zdCBkZWx0YSA9IG1hdGhTaWduKGRlbHRhQW5nbGUgfHwgbWluUG9pbnRTaXplKSAqIChNYXRoLmFicyhtaW5Qb2ludFNpemUpIC0gTWF0aC5hYnMoZGVsdGFBbmdsZSkpO1xuXG4gICAgICAgICAgZW5kQW5nbGUgKz0gZGVsdGE7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2dyb3VuZFNlY3RvciA9IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICBjeCxcbiAgICAgICAgICAgIGN5LFxuICAgICAgICAgICAgaW5uZXJSYWRpdXMsXG4gICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHByb3BzLnN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBlbmRBbmdsZTogcHJvcHMuZW5kQW5nbGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlubmVyUmFkaXVzID0gcmFkaXVzQXhpcy5zY2FsZSh2YWx1ZVswXSk7XG4gICAgICAgIG91dGVyUmFkaXVzID0gcmFkaXVzQXhpcy5zY2FsZSh2YWx1ZVsxXSk7XG4gICAgICAgIHN0YXJ0QW5nbGUgPSBnZXRDYXRlQ29vcmRpbmF0ZU9mQmFyKHtcbiAgICAgICAgICBheGlzOiBhbmdsZUF4aXMsXG4gICAgICAgICAgdGlja3M6IGFuZ2xlQXhpc1RpY2tzLFxuICAgICAgICAgIGJhbmRTaXplLFxuICAgICAgICAgIG9mZnNldDogcG9zLm9mZnNldCxcbiAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgfSk7XG4gICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIHBvcy5zaXplO1xuICAgICAgICBjb25zdCBkZWx0YVJhZGl1cyA9IG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXM7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKG1pblBvaW50U2l6ZSkgPiAwICYmIE1hdGguYWJzKGRlbHRhUmFkaXVzKSA8IE1hdGguYWJzKG1pblBvaW50U2l6ZSkpIHtcbiAgICAgICAgICBjb25zdCBkZWx0YSA9IG1hdGhTaWduKGRlbHRhUmFkaXVzIHx8IG1pblBvaW50U2l6ZSkgKiAoTWF0aC5hYnMobWluUG9pbnRTaXplKSAtIE1hdGguYWJzKGRlbHRhUmFkaXVzKSk7XG4gICAgICAgICAgb3V0ZXJSYWRpdXMgKz0gZGVsdGE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZW50cnksXG4gICAgICAgIC4uLmJhY2tncm91bmRTZWN0b3IsXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICB2YWx1ZTogc3RhY2tlZERhdGEgPyB2YWx1ZSA6IHZhbHVlWzFdLFxuICAgICAgICBjeCxcbiAgICAgICAgY3ksXG4gICAgICAgIGlubmVyUmFkaXVzLFxuICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgIC4uLihjZWxscyAmJiBjZWxsc1tpbmRleF0gJiYgY2VsbHNbaW5kZXhdLnByb3BzKSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBkYXRhOiBzZWN0b3JzLCBsYXlvdXQgfTtcbiAgfTtcblxuICBzdGF0ZTogU3RhdGUgPSB7XG4gICAgaXNBbmltYXRpb25GaW5pc2hlZDogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKTogU3RhdGUge1xuICAgIGlmIChuZXh0UHJvcHMuYW5pbWF0aW9uSWQgIT09IHByZXZTdGF0ZS5wcmV2QW5pbWF0aW9uSWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZXZBbmltYXRpb25JZDogbmV4dFByb3BzLmFuaW1hdGlvbklkLFxuICAgICAgICBjdXJEYXRhOiBuZXh0UHJvcHMuZGF0YSxcbiAgICAgICAgcHJldkRhdGE6IHByZXZTdGF0ZS5jdXJEYXRhLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy5kYXRhICE9PSBwcmV2U3RhdGUuY3VyRGF0YSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VyRGF0YTogbmV4dFByb3BzLmRhdGEsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0RGVsdGFBbmdsZSgpIHtcbiAgICBjb25zdCB7IHN0YXJ0QW5nbGUsIGVuZEFuZ2xlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNpZ24gPSBtYXRoU2lnbihlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IGRlbHRhQW5nbGUgPSBNYXRoLm1pbihNYXRoLmFicyhlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpLCAzNjApO1xuXG4gICAgcmV0dXJuIHNpZ24gKiBkZWx0YUFuZ2xlO1xuICB9XG5cbiAgaGFuZGxlQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25BbmltYXRpb25FbmQgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IHRydWUgfSk7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uQW5pbWF0aW9uRW5kKSkge1xuICAgICAgb25BbmltYXRpb25FbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvblN0YXJ0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IGZhbHNlIH0pO1xuXG4gICAgaWYgKF8uaXNGdW5jdGlvbihvbkFuaW1hdGlvblN0YXJ0KSkge1xuICAgICAgb25BbmltYXRpb25TdGFydCgpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgcmVuZGVyU2VjdG9yU2hhcGUoc2hhcGU6IFJhZGlhbEJhckJhY2tncm91bmQsIHByb3BzOiBhbnkpIHtcbiAgICBsZXQgc2VjdG9yU2hhcGU7XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoc2hhcGUpKSB7XG4gICAgICBzZWN0b3JTaGFwZSA9IFJlYWN0LmNsb25lRWxlbWVudChzaGFwZSwgcHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKHNoYXBlKSkge1xuICAgICAgc2VjdG9yU2hhcGUgPSBzaGFwZShwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY3RvclNoYXBlID0gUmVhY3QuY3JlYXRlRWxlbWVudChTZWN0b3IsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VjdG9yU2hhcGU7XG4gIH1cblxuICByZW5kZXJTZWN0b3JzU3RhdGljYWxseShzZWN0b3JzOiBTZWN0b3JQcm9wc1tdKSB7XG4gICAgY29uc3QgeyBzaGFwZSwgYWN0aXZlU2hhcGUsIGFjdGl2ZUluZGV4LCBjb3JuZXJSYWRpdXMsIC4uLm90aGVycyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYXNlUHJvcHMgPSBmaWx0ZXJQcm9wcyhvdGhlcnMpO1xuXG4gICAgcmV0dXJuIHNlY3RvcnMubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIC4uLmJhc2VQcm9wcyxcbiAgICAgICAgY29ybmVyUmFkaXVzLFxuICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgLi4uYWRhcHRFdmVudHNPZkNoaWxkKHRoaXMucHJvcHMsIGVudHJ5LCBpKSxcbiAgICAgICAga2V5OiBgc2VjdG9yLSR7aX1gLFxuICAgICAgICBjbGFzc05hbWU6ICdyZWNoYXJ0cy1yYWRpYWwtYmFyLXNlY3RvcicsXG4gICAgICAgIGZvcmNlQ29ybmVyUmFkaXVzOiBvdGhlcnMuZm9yY2VDb3JuZXJSYWRpdXMsXG4gICAgICAgIGNvcm5lcklzRXh0ZXJuYWw6IG90aGVycy5jb3JuZXJJc0V4dGVybmFsLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFJhZGlhbEJhci5yZW5kZXJTZWN0b3JTaGFwZShpID09PSBhY3RpdmVJbmRleCA/IGFjdGl2ZVNoYXBlIDogc2hhcGUsIHByb3BzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclNlY3RvcnNXaXRoQW5pbWF0aW9uKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgaXNBbmltYXRpb25BY3RpdmUsIGFuaW1hdGlvbkJlZ2luLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uRWFzaW5nLCBhbmltYXRpb25JZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZEYXRhIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRlXG4gICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgZHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICBpc0FjdGl2ZT17aXNBbmltYXRpb25BY3RpdmV9XG4gICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICBmcm9tPXt7IHQ6IDAgfX1cbiAgICAgICAgdG89e3sgdDogMSB9fVxuICAgICAgICBrZXk9e2ByYWRpYWxCYXItJHthbmltYXRpb25JZH1gfVxuICAgICAgICBvbkFuaW1hdGlvblN0YXJ0PXt0aGlzLmhhbmRsZUFuaW1hdGlvblN0YXJ0fVxuICAgICAgICBvbkFuaW1hdGlvbkVuZD17dGhpcy5oYW5kbGVBbmltYXRpb25FbmR9XG4gICAgICA+XG4gICAgICAgIHsoeyB0IH06IHsgdDogbnVtYmVyIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBzdGVwRGF0YSA9IGRhdGEubWFwKChlbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBwcmV2RGF0YSAmJiBwcmV2RGF0YVtpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclN0YXJ0QW5nbGUgPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnN0YXJ0QW5nbGUsIGVudHJ5LnN0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JFbmRBbmdsZSA9IGludGVycG9sYXRlTnVtYmVyKHByZXYuZW5kQW5nbGUsIGVudHJ5LmVuZEFuZ2xlKTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGludGVycG9sYXRvclN0YXJ0QW5nbGUodCksXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IGludGVycG9sYXRvckVuZEFuZ2xlKHQpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBlbmRBbmdsZSwgc3RhcnRBbmdsZSB9ID0gZW50cnk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZU51bWJlcihzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7IC4uLmVudHJ5LCBlbmRBbmdsZTogaW50ZXJwb2xhdG9yKHQpIH07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gPExheWVyPnt0aGlzLnJlbmRlclNlY3RvcnNTdGF0aWNhbGx5KHN0ZXBEYXRhKX08L0xheWVyPjtcbiAgICAgICAgfX1cbiAgICAgIDwvQW5pbWF0ZT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyU2VjdG9ycygpIHtcbiAgICBjb25zdCB7IGRhdGEsIGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJldkRhdGEgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoaXNBbmltYXRpb25BY3RpdmUgJiYgZGF0YSAmJiBkYXRhLmxlbmd0aCAmJiAoIXByZXZEYXRhIHx8ICFfLmlzRXF1YWwocHJldkRhdGEsIGRhdGEpKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU2VjdG9yc1dpdGhBbmltYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJTZWN0b3JzU3RhdGljYWxseShkYXRhKTtcbiAgfVxuXG4gIHJlbmRlckJhY2tncm91bmQoc2VjdG9ycz86IFJhZGlhbEJhckRhdGFJdGVtW10pIHtcbiAgICBjb25zdCB7IGNvcm5lclJhZGl1cyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYWNrZ3JvdW5kUHJvcHMgPSBmaWx0ZXJQcm9wcyh0aGlzLnByb3BzLmJhY2tncm91bmQpO1xuXG4gICAgcmV0dXJuIHNlY3RvcnMubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgY29uc3QgeyB2YWx1ZSwgYmFja2dyb3VuZCwgLi4ucmVzdCB9ID0gZW50cnk7XG5cbiAgICAgIGlmICghYmFja2dyb3VuZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIGNvcm5lclJhZGl1cyxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgZmlsbDogJyNlZWUnLFxuICAgICAgICAuLi5iYWNrZ3JvdW5kLFxuICAgICAgICAuLi5iYWNrZ3JvdW5kUHJvcHMsXG4gICAgICAgIC4uLmFkYXB0RXZlbnRzT2ZDaGlsZCh0aGlzLnByb3BzLCBlbnRyeSwgaSksXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBrZXk6IGBzZWN0b3ItJHtpfWAsXG4gICAgICAgIGNsYXNzTmFtZTogJ3JlY2hhcnRzLXJhZGlhbC1iYXItYmFja2dyb3VuZC1zZWN0b3InLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFJhZGlhbEJhci5yZW5kZXJTZWN0b3JTaGFwZShiYWNrZ3JvdW5kLCBwcm9wcyk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoaWRlLCBkYXRhLCBjbGFzc05hbWUsIGJhY2tncm91bmQsIGlzQW5pbWF0aW9uQWN0aXZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGhpZGUgfHwgIWRhdGEgfHwgIWRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGlzQW5pbWF0aW9uRmluaXNoZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgbGF5ZXJDbGFzcyA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLWFyZWEnLCBjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMYXllciBjbGFzc05hbWU9e2xheWVyQ2xhc3N9PlxuICAgICAgICB7YmFja2dyb3VuZCAmJiA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtcmFkaWFsLWJhci1iYWNrZ3JvdW5kXCI+e3RoaXMucmVuZGVyQmFja2dyb3VuZChkYXRhKX08L0xheWVyPn1cblxuICAgICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtcmFkaWFsLWJhci1zZWN0b3JzXCI+e3RoaXMucmVuZGVyU2VjdG9ycygpfTwvTGF5ZXI+XG5cbiAgICAgICAgeyghaXNBbmltYXRpb25BY3RpdmUgfHwgaXNBbmltYXRpb25GaW5pc2hlZCkgJiZcbiAgICAgICAgICBMYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgICAgICAgICBjbG9ja1dpc2U6IHRoaXMuZ2V0RGVsdGFBbmdsZSgpIDwgMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBCcnVzaFxuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgQ2hpbGRyZW4sIFJlYWN0VGV4dCwgTW91c2VFdmVudCwgUmVhY3RFbGVtZW50LCBUb3VjaEV2ZW50LCBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgc2NhbGVQb2ludCwgU2NhbGVQb2ludCB9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uL2NvbnRhaW5lci9MYXllcic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50L1RleHQnO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVByZWZpeFN0eWxlIH0gZnJvbSAnLi4vdXRpbC9Dc3NQcmVmaXhVdGlscyc7XG5pbXBvcnQgeyBQYWRkaW5nLCBEYXRhS2V5LCBmaWx0ZXJQcm9wcyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG50eXBlIEJydXNoVHJhdmVsbGVyVHlwZSA9IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PiB8ICgocHJvcHM6IGFueSkgPT4gUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+KTtcbmludGVyZmFjZSBCcnVzaFN0YXJ0RW5kSW5kZXgge1xuICBzdGFydEluZGV4PzogbnVtYmVyO1xuICBlbmRJbmRleD86IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEludGVybmFsQnJ1c2hQcm9wcyB7XG4gIHg/OiBudW1iZXI7XG4gIHk/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xuICBkYXRhPzogYW55W107XG4gIHVwZGF0ZUlkPzogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgQnJ1c2hQcm9wcyBleHRlbmRzIEludGVybmFsQnJ1c2hQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICBoZWlnaHQ6IG51bWJlcjtcbiAgdHJhdmVsbGVyV2lkdGg/OiBudW1iZXI7XG4gIHRyYXZlbGxlcj86IEJydXNoVHJhdmVsbGVyVHlwZTtcbiAgZ2FwPzogbnVtYmVyO1xuICBwYWRkaW5nPzogUGFkZGluZztcblxuICBkYXRhS2V5PzogRGF0YUtleTxhbnk+O1xuICBzdGFydEluZGV4PzogbnVtYmVyO1xuICBlbmRJbmRleD86IG51bWJlcjtcbiAgdGlja0Zvcm1hdHRlcj86ICh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBSZWFjdFRleHQ7XG5cbiAgY2hpbGRyZW4/OiBSZWFjdEVsZW1lbnQ7XG5cbiAgb25DaGFuZ2U/OiAobmV3SW5kZXg6IEJydXNoU3RhcnRFbmRJbmRleCkgPT4gdm9pZDtcbiAgbGVhdmVUaW1lT3V0PzogbnVtYmVyO1xuICBhbHdheXNTaG93VGV4dD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHRWxlbWVudD4gJiBCcnVzaFByb3BzO1xuXG50eXBlIEJydXNoVHJhdmVsbGVySWQgPSAnc3RhcnRYJyB8ICdlbmRYJztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgaXNUcmF2ZWxsZXJNb3Zpbmc/OiBib29sZWFuO1xuICBpc1NsaWRlTW92aW5nPzogYm9vbGVhbjtcbiAgc3RhcnRYPzogbnVtYmVyO1xuICBlbmRYPzogbnVtYmVyO1xuICBzbGlkZU1vdmVTdGFydFg/OiBudW1iZXI7XG4gIG1vdmluZ1RyYXZlbGxlcklkPzogQnJ1c2hUcmF2ZWxsZXJJZDtcbiAgaXNUZXh0QWN0aXZlPzogYm9vbGVhbjtcbiAgYnJ1c2hNb3ZlU3RhcnRYPzogbnVtYmVyO1xuXG4gIHNjYWxlPzogU2NhbGVQb2ludDxudW1iZXI+O1xuICBzY2FsZVZhbHVlcz86IG51bWJlcltdO1xuXG4gIHByZXZEYXRhPzogYW55W107XG4gIHByZXZXaWR0aD86IG51bWJlcjtcbiAgcHJldlg/OiBudW1iZXI7XG4gIHByZXZUcmF2ZWxsZXJXaWR0aD86IG51bWJlcjtcbiAgcHJldlVwZGF0ZUlkPzogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5jb25zdCBjcmVhdGVTY2FsZSA9ICh7XG4gIGRhdGEsXG4gIHN0YXJ0SW5kZXgsXG4gIGVuZEluZGV4LFxuICB4LFxuICB3aWR0aCxcbiAgdHJhdmVsbGVyV2lkdGgsXG59OiB7XG4gIGRhdGE/OiBhbnlbXTtcbiAgc3RhcnRJbmRleD86IG51bWJlcjtcbiAgZW5kSW5kZXg/OiBudW1iZXI7XG4gIHg/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xuICB0cmF2ZWxsZXJXaWR0aD86IG51bWJlcjtcbn0pID0+IHtcbiAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICBjb25zdCBzY2FsZSA9IHNjYWxlUG9pbnQ8bnVtYmVyPigpXG4gICAgLmRvbWFpbihfLnJhbmdlKDAsIGxlbikpXG4gICAgLnJhbmdlKFt4LCB4ICsgd2lkdGggLSB0cmF2ZWxsZXJXaWR0aF0pO1xuICBjb25zdCBzY2FsZVZhbHVlcyA9IHNjYWxlLmRvbWFpbigpLm1hcChlbnRyeSA9PiBzY2FsZShlbnRyeSkpO1xuXG4gIHJldHVybiB7XG4gICAgaXNUZXh0QWN0aXZlOiBmYWxzZSxcbiAgICBpc1NsaWRlTW92aW5nOiBmYWxzZSxcbiAgICBpc1RyYXZlbGxlck1vdmluZzogZmFsc2UsXG4gICAgc3RhcnRYOiBzY2FsZShzdGFydEluZGV4KSxcbiAgICBlbmRYOiBzY2FsZShlbmRJbmRleCksXG4gICAgc2NhbGUsXG4gICAgc2NhbGVWYWx1ZXMsXG4gIH07XG59O1xuXG5jb25zdCBpc1RvdWNoID0gKGU6IFRvdWNoRXZlbnQ8U1ZHRWxlbWVudD4gfCBNb3VzZUV2ZW50PFNWR0VsZW1lbnQ+KTogZSBpcyBUb3VjaEV2ZW50PFNWR0VsZW1lbnQ+ID0+XG4gIChlIGFzIFRvdWNoRXZlbnQ8U1ZHRWxlbWVudD4pLmNoYW5nZWRUb3VjaGVzICYmICEhKGUgYXMgVG91Y2hFdmVudDxTVkdFbGVtZW50PikuY2hhbmdlZFRvdWNoZXMubGVuZ3RoO1xuXG5leHBvcnQgY2xhc3MgQnJ1c2ggZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQnJ1c2gnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaGVpZ2h0OiA0MCxcbiAgICB0cmF2ZWxsZXJXaWR0aDogNSxcbiAgICBnYXA6IDEsXG4gICAgZmlsbDogJyNmZmYnLFxuICAgIHN0cm9rZTogJyM2NjYnLFxuICAgIHBhZGRpbmc6IHsgdG9wOiAxLCByaWdodDogMSwgYm90dG9tOiAxLCBsZWZ0OiAxIH0sXG4gICAgbGVhdmVUaW1lT3V0OiAxMDAwLFxuICAgIGFsd2F5c1Nob3dUZXh0OiBmYWxzZSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnRyYXZlbGxlckRyYWdTdGFydEhhbmRsZXJzID0ge1xuICAgICAgc3RhcnRYOiB0aGlzLmhhbmRsZVRyYXZlbGxlckRyYWdTdGFydC5iaW5kKHRoaXMsICdzdGFydFgnKSxcbiAgICAgIGVuZFg6IHRoaXMuaGFuZGxlVHJhdmVsbGVyRHJhZ1N0YXJ0LmJpbmQodGhpcywgJ2VuZFgnKSxcbiAgICB9O1xuXG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG5cbiAgbGVhdmVUaW1lcj86IG51bWJlcjtcblxuICB0cmF2ZWxsZXJEcmFnU3RhcnRIYW5kbGVycz86IFJlY29yZDxcbiAgICBCcnVzaFRyYXZlbGxlcklkLFxuICAgIChldmVudDogTW91c2VFdmVudDxTVkdHRWxlbWVudD4gfCBUb3VjaEV2ZW50PFNWR0dFbGVtZW50PikgPT4gdm9pZFxuICA+O1xuXG4gIHN0YXRpYyByZW5kZXJEZWZhdWx0VHJhdmVsbGVyKHByb3BzOiBhbnkpIHtcbiAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIHN0cm9rZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgbGluZVkgPSBNYXRoLmZsb29yKHkgKyBoZWlnaHQgLyAyKSAtIDE7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPHJlY3QgeD17eH0geT17eX0gd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0gZmlsbD17c3Ryb2tlfSBzdHJva2U9XCJub25lXCIgLz5cbiAgICAgICAgPGxpbmUgeDE9e3ggKyAxfSB5MT17bGluZVl9IHgyPXt4ICsgd2lkdGggLSAxfSB5Mj17bGluZVl9IGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiI2ZmZlwiIC8+XG4gICAgICAgIDxsaW5lIHgxPXt4ICsgMX0geTE9e2xpbmVZICsgMn0geDI9e3ggKyB3aWR0aCAtIDF9IHkyPXtsaW5lWSArIDJ9IGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiI2ZmZlwiIC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgc3RhdGljIHJlbmRlclRyYXZlbGxlcihvcHRpb246IEJydXNoVHJhdmVsbGVyVHlwZSwgcHJvcHM6IGFueSkge1xuICAgIGxldCByZWN0YW5nbGU7XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmVjdGFuZ2xlID0gUmVhY3QuY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbikpIHtcbiAgICAgIHJlY3RhbmdsZSA9IG9wdGlvbihwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3RhbmdsZSA9IEJydXNoLnJlbmRlckRlZmF1bHRUcmF2ZWxsZXIocHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiByZWN0YW5nbGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XG4gICAgY29uc3QgeyBkYXRhLCB3aWR0aCwgeCwgdHJhdmVsbGVyV2lkdGgsIHVwZGF0ZUlkLCBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gbmV4dFByb3BzO1xuXG4gICAgaWYgKGRhdGEgIT09IHByZXZTdGF0ZS5wcmV2RGF0YSB8fCB1cGRhdGVJZCAhPT0gcHJldlN0YXRlLnByZXZVcGRhdGVJZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldkRhdGE6IGRhdGEsXG4gICAgICAgIHByZXZUcmF2ZWxsZXJXaWR0aDogdHJhdmVsbGVyV2lkdGgsXG4gICAgICAgIHByZXZVcGRhdGVJZDogdXBkYXRlSWQsXG4gICAgICAgIHByZXZYOiB4LFxuICAgICAgICBwcmV2V2lkdGg6IHdpZHRoLFxuICAgICAgICAuLi4oZGF0YSAmJiBkYXRhLmxlbmd0aFxuICAgICAgICAgID8gY3JlYXRlU2NhbGUoeyBkYXRhLCB3aWR0aCwgeCwgdHJhdmVsbGVyV2lkdGgsIHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0pXG4gICAgICAgICAgOiB7IHNjYWxlOiBudWxsLCBzY2FsZVZhbHVlczogbnVsbCB9KSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHByZXZTdGF0ZS5zY2FsZSAmJlxuICAgICAgKHdpZHRoICE9PSBwcmV2U3RhdGUucHJldldpZHRoIHx8IHggIT09IHByZXZTdGF0ZS5wcmV2WCB8fCB0cmF2ZWxsZXJXaWR0aCAhPT0gcHJldlN0YXRlLnByZXZUcmF2ZWxsZXJXaWR0aClcbiAgICApIHtcbiAgICAgIHByZXZTdGF0ZS5zY2FsZS5yYW5nZShbeCwgeCArIHdpZHRoIC0gdHJhdmVsbGVyV2lkdGhdKTtcblxuICAgICAgY29uc3Qgc2NhbGVWYWx1ZXMgPSBwcmV2U3RhdGUuc2NhbGUuZG9tYWluKCkubWFwKGVudHJ5ID0+IHByZXZTdGF0ZS5zY2FsZShlbnRyeSkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2RGF0YTogZGF0YSxcbiAgICAgICAgcHJldlRyYXZlbGxlcldpZHRoOiB0cmF2ZWxsZXJXaWR0aCxcbiAgICAgICAgcHJldlVwZGF0ZUlkOiB1cGRhdGVJZCxcbiAgICAgICAgcHJldlg6IHgsXG4gICAgICAgIHByZXZXaWR0aDogd2lkdGgsXG4gICAgICAgIHN0YXJ0WDogcHJldlN0YXRlLnNjYWxlKG5leHRQcm9wcy5zdGFydEluZGV4KSxcbiAgICAgICAgZW5kWDogcHJldlN0YXRlLnNjYWxlKG5leHRQcm9wcy5lbmRJbmRleCksXG4gICAgICAgIHNjYWxlVmFsdWVzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmxlYXZlVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxlYXZlVGltZXIpO1xuICAgICAgdGhpcy5sZWF2ZVRpbWVyID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmRldGFjaERyYWdFbmRMaXN0ZW5lcigpO1xuICB9XG5cbiAgc3RhdGljIGdldEluZGV4SW5SYW5nZShyYW5nZTogbnVtYmVyW10sIHg6IG51bWJlcikge1xuICAgIGNvbnN0IGxlbiA9IHJhbmdlLmxlbmd0aDtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSBsZW4gLSAxO1xuXG4gICAgd2hpbGUgKGVuZCAtIHN0YXJ0ID4gMSkge1xuICAgICAgY29uc3QgbWlkZGxlID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7XG5cbiAgICAgIGlmIChyYW5nZVttaWRkbGVdID4geCkge1xuICAgICAgICBlbmQgPSBtaWRkbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IG1pZGRsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geCA+PSByYW5nZVtlbmRdID8gZW5kIDogc3RhcnQ7XG4gIH1cblxuICBnZXRJbmRleCh7IHN0YXJ0WCwgZW5kWCB9OiB7IHN0YXJ0WDogbnVtYmVyOyBlbmRYOiBudW1iZXIgfSkge1xuICAgIGNvbnN0IHsgc2NhbGVWYWx1ZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBnYXAsIGRhdGEgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0WCwgZW5kWCk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtaW5JbmRleCA9IEJydXNoLmdldEluZGV4SW5SYW5nZShzY2FsZVZhbHVlcywgbWluKTtcbiAgICBjb25zdCBtYXhJbmRleCA9IEJydXNoLmdldEluZGV4SW5SYW5nZShzY2FsZVZhbHVlcywgbWF4KTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnRJbmRleDogbWluSW5kZXggLSAobWluSW5kZXggJSBnYXApLFxuICAgICAgZW5kSW5kZXg6IG1heEluZGV4ID09PSBsYXN0SW5kZXggPyBsYXN0SW5kZXggOiBtYXhJbmRleCAtIChtYXhJbmRleCAlIGdhcCksXG4gICAgfTtcbiAgfVxuXG4gIGdldFRleHRPZlRpY2soaW5kZXg6IG51bWJlcikge1xuICAgIGNvbnN0IHsgZGF0YSwgdGlja0Zvcm1hdHRlciwgZGF0YUtleSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB0ZXh0ID0gZ2V0VmFsdWVCeURhdGFLZXkoZGF0YVtpbmRleF0sIGRhdGFLZXksIGluZGV4KTtcblxuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odGlja0Zvcm1hdHRlcikgPyB0aWNrRm9ybWF0dGVyKHRleHQsIGluZGV4KSA6IHRleHQ7XG4gIH1cblxuICBoYW5kbGVEcmFnID0gKGU6IFJlYWN0LlRvdWNoIHwgTW91c2VFdmVudDxTVkdHRWxlbWVudD4pID0+IHtcbiAgICBpZiAodGhpcy5sZWF2ZVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5sZWF2ZVRpbWVyKTtcbiAgICAgIHRoaXMubGVhdmVUaW1lciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNUcmF2ZWxsZXJNb3ZpbmcpIHtcbiAgICAgIHRoaXMuaGFuZGxlVHJhdmVsbGVyTW92ZShlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaXNTbGlkZU1vdmluZykge1xuICAgICAgdGhpcy5oYW5kbGVTbGlkZURyYWcoZSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVRvdWNoTW92ZSA9IChlOiBUb3VjaEV2ZW50PFNWR0dFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzICE9IG51bGwgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmhhbmRsZURyYWcoZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gICAgfVxuICB9O1xuXG4gIGF0dGFjaERyYWdFbmRMaXN0ZW5lcigpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlRHJhZ0VuZCwgdHJ1ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVEcmFnRW5kLCB0cnVlKTtcbiAgfVxuXG4gIGRldGFjaERyYWdFbmRMaXN0ZW5lcigpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlRHJhZ0VuZCwgdHJ1ZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVEcmFnRW5kLCB0cnVlKTtcbiAgfVxuXG4gIGhhbmRsZURyYWdFbmQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1RyYXZlbGxlck1vdmluZzogZmFsc2UsXG4gICAgICBpc1NsaWRlTW92aW5nOiBmYWxzZSxcbiAgICB9KTtcbiAgICB0aGlzLmRldGFjaERyYWdFbmRMaXN0ZW5lcigpO1xuICB9O1xuXG4gIGhhbmRsZUxlYXZlV3JhcHBlciA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zdGF0ZS5pc1RyYXZlbGxlck1vdmluZyB8fCB0aGlzLnN0YXRlLmlzU2xpZGVNb3ZpbmcpIHtcbiAgICAgIHRoaXMubGVhdmVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaGFuZGxlRHJhZ0VuZCwgdGhpcy5wcm9wcy5sZWF2ZVRpbWVPdXQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVFbnRlclNsaWRlT3JUcmF2ZWxsZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1RleHRBY3RpdmU6IHRydWUsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlTGVhdmVTbGlkZU9yVHJhdmVsbGVyID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNUZXh0QWN0aXZlOiBmYWxzZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVTbGlkZURyYWdTdGFydCA9IChlOiBUb3VjaEV2ZW50PFNWR1JlY3RFbGVtZW50PiB8IE1vdXNlRXZlbnQ8U1ZHUmVjdEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSBpc1RvdWNoKGUpID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzVHJhdmVsbGVyTW92aW5nOiBmYWxzZSxcbiAgICAgIGlzU2xpZGVNb3Zpbmc6IHRydWUsXG4gICAgICBzbGlkZU1vdmVTdGFydFg6IGV2ZW50LnBhZ2VYLFxuICAgIH0pO1xuXG4gICAgdGhpcy5hdHRhY2hEcmFnRW5kTGlzdGVuZXIoKTtcbiAgfTtcblxuICBoYW5kbGVTbGlkZURyYWcoZTogUmVhY3QuVG91Y2ggfCBNb3VzZUV2ZW50PFNWR0dFbGVtZW50Pikge1xuICAgIGNvbnN0IHsgc2xpZGVNb3ZlU3RhcnRYLCBzdGFydFgsIGVuZFggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyB4LCB3aWR0aCwgdHJhdmVsbGVyV2lkdGgsIHN0YXJ0SW5kZXgsIGVuZEluZGV4LCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgZGVsdGEgPSBlLnBhZ2VYIC0gc2xpZGVNb3ZlU3RhcnRYO1xuXG4gICAgaWYgKGRlbHRhID4gMCkge1xuICAgICAgZGVsdGEgPSBNYXRoLm1pbihkZWx0YSwgeCArIHdpZHRoIC0gdHJhdmVsbGVyV2lkdGggLSBlbmRYLCB4ICsgd2lkdGggLSB0cmF2ZWxsZXJXaWR0aCAtIHN0YXJ0WCk7XG4gICAgfSBlbHNlIGlmIChkZWx0YSA8IDApIHtcbiAgICAgIGRlbHRhID0gTWF0aC5tYXgoZGVsdGEsIHggLSBzdGFydFgsIHggLSBlbmRYKTtcbiAgICB9XG4gICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLmdldEluZGV4KHtcbiAgICAgIHN0YXJ0WDogc3RhcnRYICsgZGVsdGEsXG4gICAgICBlbmRYOiBlbmRYICsgZGVsdGEsXG4gICAgfSk7XG5cbiAgICBpZiAoKG5ld0luZGV4LnN0YXJ0SW5kZXggIT09IHN0YXJ0SW5kZXggfHwgbmV3SW5kZXguZW5kSW5kZXggIT09IGVuZEluZGV4KSAmJiBvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UobmV3SW5kZXgpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc3RhcnRYOiBzdGFydFggKyBkZWx0YSxcbiAgICAgIGVuZFg6IGVuZFggKyBkZWx0YSxcbiAgICAgIHNsaWRlTW92ZVN0YXJ0WDogZS5wYWdlWCxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVRyYXZlbGxlckRyYWdTdGFydChpZDogQnJ1c2hUcmF2ZWxsZXJJZCwgZTogTW91c2VFdmVudDxTVkdHRWxlbWVudD4gfCBUb3VjaEV2ZW50PFNWR0dFbGVtZW50Pikge1xuICAgIGNvbnN0IGV2ZW50ID0gaXNUb3VjaChlKSA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1NsaWRlTW92aW5nOiBmYWxzZSxcbiAgICAgIGlzVHJhdmVsbGVyTW92aW5nOiB0cnVlLFxuICAgICAgbW92aW5nVHJhdmVsbGVySWQ6IGlkLFxuICAgICAgYnJ1c2hNb3ZlU3RhcnRYOiBldmVudC5wYWdlWCxcbiAgICB9KTtcblxuICAgIHRoaXMuYXR0YWNoRHJhZ0VuZExpc3RlbmVyKCk7XG4gIH1cblxuICBoYW5kbGVUcmF2ZWxsZXJNb3ZlKGU6IFJlYWN0LlRvdWNoIHwgTW91c2VFdmVudDxTVkdHRWxlbWVudD4pIHtcbiAgICBjb25zdCB7IGJydXNoTW92ZVN0YXJ0WCwgbW92aW5nVHJhdmVsbGVySWQsIGVuZFgsIHN0YXJ0WCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwcmV2VmFsdWUgPSB0aGlzLnN0YXRlW21vdmluZ1RyYXZlbGxlcklkXTtcblxuICAgIGNvbnN0IHsgeCwgd2lkdGgsIHRyYXZlbGxlcldpZHRoLCBvbkNoYW5nZSwgZ2FwLCBkYXRhIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHsgc3RhcnRYOiB0aGlzLnN0YXRlLnN0YXJ0WCwgZW5kWDogdGhpcy5zdGF0ZS5lbmRYIH07XG5cbiAgICBsZXQgZGVsdGEgPSBlLnBhZ2VYIC0gYnJ1c2hNb3ZlU3RhcnRYO1xuICAgIGlmIChkZWx0YSA+IDApIHtcbiAgICAgIGRlbHRhID0gTWF0aC5taW4oZGVsdGEsIHggKyB3aWR0aCAtIHRyYXZlbGxlcldpZHRoIC0gcHJldlZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgZGVsdGEgPSBNYXRoLm1heChkZWx0YSwgeCAtIHByZXZWYWx1ZSk7XG4gICAgfVxuXG4gICAgcGFyYW1zW21vdmluZ1RyYXZlbGxlcklkXSA9IHByZXZWYWx1ZSArIGRlbHRhO1xuXG4gICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLmdldEluZGV4KHBhcmFtcyk7XG4gICAgY29uc3QgeyBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gbmV3SW5kZXg7XG4gICAgY29uc3QgaXNGdWxsR2FwID0gKCkgPT4ge1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKFxuICAgICAgICAobW92aW5nVHJhdmVsbGVySWQgPT09ICdzdGFydFgnICYmIChlbmRYID4gc3RhcnRYID8gc3RhcnRJbmRleCAlIGdhcCA9PT0gMCA6IGVuZEluZGV4ICUgZ2FwID09PSAwKSkgfHxcbiAgICAgICAgKGVuZFggPCBzdGFydFggJiYgZW5kSW5kZXggPT09IGxhc3RJbmRleCkgfHxcbiAgICAgICAgKG1vdmluZ1RyYXZlbGxlcklkID09PSAnZW5kWCcgJiYgKGVuZFggPiBzdGFydFggPyBlbmRJbmRleCAlIGdhcCA9PT0gMCA6IHN0YXJ0SW5kZXggJSBnYXAgPT09IDApKSB8fFxuICAgICAgICAoZW5kWCA+IHN0YXJ0WCAmJiBlbmRJbmRleCA9PT0gbGFzdEluZGV4KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICBbbW92aW5nVHJhdmVsbGVySWRdOiBwcmV2VmFsdWUgKyBkZWx0YSxcbiAgICAgICAgYnJ1c2hNb3ZlU3RhcnRYOiBlLnBhZ2VYLFxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgaWYgKGlzRnVsbEdhcCgpKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShuZXdJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZW5kZXJCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmlsbCwgc3Ryb2tlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIDxyZWN0IHN0cm9rZT17c3Ryb2tlfSBmaWxsPXtmaWxsfSB4PXt4fSB5PXt5fSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPjtcbiAgfVxuXG4gIHJlbmRlclBhbm9yYW1hKCkge1xuICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgZGF0YSwgY2hpbGRyZW4sIHBhZGRpbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY2hhcnRFbGVtZW50ID0gQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICBpZiAoIWNoYXJ0RWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGFydEVsZW1lbnQsIHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBtYXJnaW46IHBhZGRpbmcsXG4gICAgICBjb21wYWN0OiB0cnVlLFxuICAgICAgZGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclRyYXZlbGxlckxheWVyKHRyYXZlbGxlclg6IG51bWJlciwgaWQ6IEJydXNoVHJhdmVsbGVySWQpIHtcbiAgICBjb25zdCB7IHksIHRyYXZlbGxlcldpZHRoLCBoZWlnaHQsIHRyYXZlbGxlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB4ID0gTWF0aC5tYXgodHJhdmVsbGVyWCwgdGhpcy5wcm9wcy54KTtcbiAgICBjb25zdCB0cmF2ZWxsZXJQcm9wcyA9IHtcbiAgICAgIC4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aDogdHJhdmVsbGVyV2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXJcbiAgICAgICAgY2xhc3NOYW1lPVwicmVjaGFydHMtYnJ1c2gtdHJhdmVsbGVyXCJcbiAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLmhhbmRsZUVudGVyU2xpZGVPclRyYXZlbGxlcn1cbiAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZUxlYXZlU2xpZGVPclRyYXZlbGxlcn1cbiAgICAgICAgb25Nb3VzZURvd249e3RoaXMudHJhdmVsbGVyRHJhZ1N0YXJ0SGFuZGxlcnNbaWRdfVxuICAgICAgICBvblRvdWNoU3RhcnQ9e3RoaXMudHJhdmVsbGVyRHJhZ1N0YXJ0SGFuZGxlcnNbaWRdfVxuICAgICAgICBzdHlsZT17eyBjdXJzb3I6ICdjb2wtcmVzaXplJyB9fVxuICAgICAgPlxuICAgICAgICB7QnJ1c2gucmVuZGVyVHJhdmVsbGVyKHRyYXZlbGxlciwgdHJhdmVsbGVyUHJvcHMpfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyU2xpZGUoc3RhcnRYOiBudW1iZXIsIGVuZFg6IG51bWJlcikge1xuICAgIGNvbnN0IHsgeSwgaGVpZ2h0LCBzdHJva2UsIHRyYXZlbGxlcldpZHRoIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHggPSBNYXRoLm1pbihzdGFydFgsIGVuZFgpICsgdHJhdmVsbGVyV2lkdGg7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSAtIHRyYXZlbGxlcldpZHRoLCAwKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8cmVjdFxuICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1icnVzaC1zbGlkZVwiXG4gICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5oYW5kbGVFbnRlclNsaWRlT3JUcmF2ZWxsZXJ9XG4gICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5oYW5kbGVMZWF2ZVNsaWRlT3JUcmF2ZWxsZXJ9XG4gICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZVNsaWRlRHJhZ1N0YXJ0fVxuICAgICAgICBvblRvdWNoU3RhcnQ9e3RoaXMuaGFuZGxlU2xpZGVEcmFnU3RhcnR9XG4gICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ21vdmUnIH19XG4gICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICBmaWxsPXtzdHJva2V9XG4gICAgICAgIGZpbGxPcGFjaXR5PXswLjJ9XG4gICAgICAgIHg9e3h9XG4gICAgICAgIHk9e3l9XG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJUZXh0KCkge1xuICAgIGNvbnN0IHsgc3RhcnRJbmRleCwgZW5kSW5kZXgsIHksIGhlaWdodCwgdHJhdmVsbGVyV2lkdGgsIHN0cm9rZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHN0YXJ0WCwgZW5kWCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBvZmZzZXQgPSA1O1xuICAgIGNvbnN0IGF0dHJzID0ge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgZmlsbDogc3Ryb2tlLFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT1cInJlY2hhcnRzLWJydXNoLXRleHRzXCI+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgdGV4dEFuY2hvcj1cImVuZFwiXG4gICAgICAgICAgdmVydGljYWxBbmNob3I9XCJtaWRkbGVcIlxuICAgICAgICAgIHg9e01hdGgubWluKHN0YXJ0WCwgZW5kWCkgLSBvZmZzZXR9XG4gICAgICAgICAgeT17eSArIGhlaWdodCAvIDJ9XG4gICAgICAgICAgey4uLmF0dHJzfVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMuZ2V0VGV4dE9mVGljayhzdGFydEluZGV4KX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHRleHRBbmNob3I9XCJzdGFydFwiXG4gICAgICAgICAgdmVydGljYWxBbmNob3I9XCJtaWRkbGVcIlxuICAgICAgICAgIHg9e01hdGgubWF4KHN0YXJ0WCwgZW5kWCkgKyB0cmF2ZWxsZXJXaWR0aCArIG9mZnNldH1cbiAgICAgICAgICB5PXt5ICsgaGVpZ2h0IC8gMn1cbiAgICAgICAgICB7Li4uYXR0cnN9XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5nZXRUZXh0T2ZUaWNrKGVuZEluZGV4KX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgY2xhc3NOYW1lLCBjaGlsZHJlbiwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYWx3YXlzU2hvd1RleHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBzdGFydFgsIGVuZFgsIGlzVGV4dEFjdGl2ZSwgaXNTbGlkZU1vdmluZywgaXNUcmF2ZWxsZXJNb3ZpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoXG4gICAgICAhZGF0YSB8fFxuICAgICAgIWRhdGEubGVuZ3RoIHx8XG4gICAgICAhaXNOdW1iZXIoeCkgfHxcbiAgICAgICFpc051bWJlcih5KSB8fFxuICAgICAgIWlzTnVtYmVyKHdpZHRoKSB8fFxuICAgICAgIWlzTnVtYmVyKGhlaWdodCkgfHxcbiAgICAgIHdpZHRoIDw9IDAgfHxcbiAgICAgIGhlaWdodCA8PSAwXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBsYXllckNsYXNzID0gY2xhc3NOYW1lcygncmVjaGFydHMtYnJ1c2gnLCBjbGFzc05hbWUpO1xuICAgIGNvbnN0IGlzUGFub3JhbWljID0gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxO1xuICAgIGNvbnN0IHN0eWxlID0gZ2VuZXJhdGVQcmVmaXhTdHlsZSgndXNlclNlbGVjdCcsICdub25lJyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyXG4gICAgICAgIGNsYXNzTmFtZT17bGF5ZXJDbGFzc31cbiAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMuaGFuZGxlRHJhZ31cbiAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZUxlYXZlV3JhcHBlcn1cbiAgICAgICAgb25Ub3VjaE1vdmU9e3RoaXMuaGFuZGxlVG91Y2hNb3ZlfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICA+XG4gICAgICAgIHt0aGlzLnJlbmRlckJhY2tncm91bmQoKX1cbiAgICAgICAge2lzUGFub3JhbWljICYmIHRoaXMucmVuZGVyUGFub3JhbWEoKX1cbiAgICAgICAge3RoaXMucmVuZGVyU2xpZGUoc3RhcnRYLCBlbmRYKX1cbiAgICAgICAge3RoaXMucmVuZGVyVHJhdmVsbGVyTGF5ZXIoc3RhcnRYLCAnc3RhcnRYJyl9XG4gICAgICAgIHt0aGlzLnJlbmRlclRyYXZlbGxlckxheWVyKGVuZFgsICdlbmRYJyl9XG4gICAgICAgIHsoaXNUZXh0QWN0aXZlIHx8IGlzU2xpZGVNb3ZpbmcgfHwgaXNUcmF2ZWxsZXJNb3ZpbmcgfHwgYWx3YXlzU2hvd1RleHQpICYmIHRoaXMucmVuZGVyVGV4dCgpfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUmVmZXJlbmNlIExpbmVcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uL2NvbnRhaW5lci9MYXllcic7XG5pbXBvcnQgeyBJbXBsaWNpdExhYmVsVHlwZSwgTGFiZWwgfSBmcm9tICcuLi9jb21wb25lbnQvTGFiZWwnO1xuaW1wb3J0IHsgaWZPdmVyZmxvd01hdGNoZXMgfSBmcm9tICcuLi91dGlsL0lmT3ZlcmZsb3dNYXRjaGVzJztcbmltcG9ydCB7IGlzTnVtT3JTdHIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMYWJlbGVkU2NhbGVzLCByZWN0V2l0aENvb3JkcyB9IGZyb20gJy4uL3V0aWwvQ2FydGVzaWFuVXRpbHMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL3V0aWwvTG9nVXRpbHMnO1xuaW1wb3J0IHsgQ2FydGVzaWFuVmlld0JveCwgRDNTY2FsZSwgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IFByb3BzIGFzIFhBeGlzUHJvcHMgfSBmcm9tICcuL1hBeGlzJztcbmltcG9ydCB7IFByb3BzIGFzIFlBeGlzUHJvcHMgfSBmcm9tICcuL1lBeGlzJztcblxuaW50ZXJmYWNlIEludGVybmFsUmVmZXJlbmNlTGluZVByb3BzIHtcbiAgdmlld0JveD86IENhcnRlc2lhblZpZXdCb3g7XG4gIHhBeGlzPzogT21pdDxYQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPiB9O1xuICB5QXhpcz86IE9taXQ8WUF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgY2xpcFBhdGhJZD86IG51bWJlciB8IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJlZmVyZW5jZUxpbmVQcm9wcyBleHRlbmRzIEludGVybmFsUmVmZXJlbmNlTGluZVByb3BzIHtcbiAgaXNGcm9udD86IGJvb2xlYW47XG4gIGFsd2F5c1Nob3c/OiBib29sZWFuO1xuICBpZk92ZXJmbG93PzogJ2hpZGRlbicgfCAndmlzaWJsZScgfCAnZGlzY2FyZCcgfCAnZXh0ZW5kRG9tYWluJztcblxuICB4PzogbnVtYmVyIHwgc3RyaW5nO1xuICB5PzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIHNlZ21lbnQ/OiBBcnJheTx7XG4gICAgeD86IG51bWJlciB8IHN0cmluZztcbiAgICB5PzogbnVtYmVyIHwgc3RyaW5nO1xuICB9PjtcblxuICBwb3NpdGlvbj86ICdtaWRkbGUnIHwgJ3N0YXJ0JyB8ICdlbmQnO1xuXG4gIGNsYXNzTmFtZT86IG51bWJlciB8IHN0cmluZztcbiAgeUF4aXNJZD86IG51bWJlciB8IHN0cmluZztcbiAgeEF4aXNJZD86IG51bWJlciB8IHN0cmluZztcbiAgc2hhcGU/OiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50Pik7XG4gIGxhYmVsPzogSW1wbGljaXRMYWJlbFR5cGU7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHTGluZUVsZW1lbnQ+ICYgUmVmZXJlbmNlTGluZVByb3BzO1xuXG5jb25zdCByZW5kZXJMaW5lID0gKG9wdGlvbjogUmVmZXJlbmNlTGluZVByb3BzWydzaGFwZSddLCBwcm9wczogYW55KSA9PiB7XG4gIGxldCBsaW5lO1xuXG4gIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgbGluZSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9uKSkge1xuICAgIGxpbmUgPSBvcHRpb24ocHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIGxpbmUgPSA8bGluZSB7Li4ucHJvcHN9IGNsYXNzTmFtZT1cInJlY2hhcnRzLXJlZmVyZW5jZS1saW5lLWxpbmVcIiAvPjtcbiAgfVxuXG4gIHJldHVybiBsaW5lO1xufTtcblxuLy8gVE9ETzogU2NhbGVIZWxwZXJcbmNvbnN0IGdldEVuZFBvaW50cyA9IChzY2FsZXM6IGFueSwgaXNGaXhlZFg6IGJvb2xlYW4sIGlzRml4ZWRZOiBib29sZWFuLCBpc1NlZ21lbnQ6IGJvb2xlYW4sIHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdmlld0JveDogeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0sXG4gICAgcG9zaXRpb24sXG4gIH0gPSBwcm9wcztcblxuICBpZiAoaXNGaXhlZFkpIHtcbiAgICBjb25zdCB7XG4gICAgICB5OiB5Q29vcmQsXG4gICAgICB5QXhpczogeyBvcmllbnRhdGlvbiB9LFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCBjb29yZCA9IHNjYWxlcy55LmFwcGx5KHlDb29yZCwgeyBwb3NpdGlvbiB9KTtcblxuICAgIGlmIChpZk92ZXJmbG93TWF0Y2hlcyhwcm9wcywgJ2Rpc2NhcmQnKSAmJiAhc2NhbGVzLnkuaXNJblJhbmdlKGNvb3JkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcG9pbnRzID0gW1xuICAgICAgeyB4OiB4ICsgd2lkdGgsIHk6IGNvb3JkIH0sXG4gICAgICB7IHgsIHk6IGNvb3JkIH0sXG4gICAgXTtcbiAgICByZXR1cm4gb3JpZW50YXRpb24gPT09ICdsZWZ0JyA/IHBvaW50cy5yZXZlcnNlKCkgOiBwb2ludHM7XG4gIH1cbiAgaWYgKGlzRml4ZWRYKSB7XG4gICAgY29uc3Qge1xuICAgICAgeDogeENvb3JkLFxuICAgICAgeEF4aXM6IHsgb3JpZW50YXRpb24gfSxcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgY29vcmQgPSBzY2FsZXMueC5hcHBseSh4Q29vcmQsIHsgcG9zaXRpb24gfSk7XG5cbiAgICBpZiAoaWZPdmVyZmxvd01hdGNoZXMocHJvcHMsICdkaXNjYXJkJykgJiYgIXNjYWxlcy54LmlzSW5SYW5nZShjb29yZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBvaW50cyA9IFtcbiAgICAgIHsgeDogY29vcmQsIHk6IHkgKyBoZWlnaHQgfSxcbiAgICAgIHsgeDogY29vcmQsIHkgfSxcbiAgICBdO1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gJ3RvcCcgPyBwb2ludHMucmV2ZXJzZSgpIDogcG9pbnRzO1xuICB9XG4gIGlmIChpc1NlZ21lbnQpIHtcbiAgICBjb25zdCB7IHNlZ21lbnQgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgcG9pbnRzID0gc2VnbWVudC5tYXAocCA9PiBzY2FsZXMuYXBwbHkocCwgeyBwb3NpdGlvbiB9KSk7XG5cbiAgICBpZiAoaWZPdmVyZmxvd01hdGNoZXMocHJvcHMsICdkaXNjYXJkJykgJiYgXy5zb21lKHBvaW50cywgcCA9PiAhc2NhbGVzLmlzSW5SYW5nZShwKSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWZlcmVuY2VMaW5lKHByb3BzOiBQcm9wcykge1xuICBjb25zdCB7IHg6IGZpeGVkWCwgeTogZml4ZWRZLCBzZWdtZW50LCB4QXhpcywgeUF4aXMsIHNoYXBlLCBjbGFzc05hbWUsIGFsd2F5c1Nob3csIGNsaXBQYXRoSWQgfSA9IHByb3BzO1xuXG4gIHdhcm4oYWx3YXlzU2hvdyA9PT0gdW5kZWZpbmVkLCAnVGhlIGFsd2F5c1Nob3cgcHJvcCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGlmT3ZlcmZsb3c9XCJleHRlbmREb21haW5cIiBpbnN0ZWFkLicpO1xuXG4gIGNvbnN0IHNjYWxlcyA9IGNyZWF0ZUxhYmVsZWRTY2FsZXMoeyB4OiB4QXhpcy5zY2FsZSwgeTogeUF4aXMuc2NhbGUgfSk7XG5cbiAgY29uc3QgaXNYID0gaXNOdW1PclN0cihmaXhlZFgpO1xuICBjb25zdCBpc1kgPSBpc051bU9yU3RyKGZpeGVkWSk7XG4gIGNvbnN0IGlzU2VnbWVudCA9IHNlZ21lbnQgJiYgc2VnbWVudC5sZW5ndGggPT09IDI7XG5cbiAgY29uc3QgZW5kUG9pbnRzID0gZ2V0RW5kUG9pbnRzKHNjYWxlcywgaXNYLCBpc1ksIGlzU2VnbWVudCwgcHJvcHMpO1xuICBpZiAoIWVuZFBvaW50cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgW3sgeDogeDEsIHk6IHkxIH0sIHsgeDogeDIsIHk6IHkyIH1dID0gZW5kUG9pbnRzO1xuXG4gIGNvbnN0IGNsaXBQYXRoID0gaWZPdmVyZmxvd01hdGNoZXMocHJvcHMsICdoaWRkZW4nKSA/IGB1cmwoIyR7Y2xpcFBhdGhJZH0pYCA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBsaW5lUHJvcHMgPSB7XG4gICAgY2xpcFBhdGgsXG4gICAgLi4uZmlsdGVyUHJvcHMocHJvcHMsIHRydWUpLFxuICAgIHgxLFxuICAgIHkxLFxuICAgIHgyLFxuICAgIHkyLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPExheWVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtcmVmZXJlbmNlLWxpbmUnLCBjbGFzc05hbWUpfT5cbiAgICAgIHtyZW5kZXJMaW5lKHNoYXBlLCBsaW5lUHJvcHMpfVxuICAgICAge0xhYmVsLnJlbmRlckNhbGxCeVBhcmVudChwcm9wcywgcmVjdFdpdGhDb29yZHMoeyB4MSwgeTEsIHgyLCB5MiB9KSl9XG4gICAgPC9MYXllcj5cbiAgKTtcbn1cblxuUmVmZXJlbmNlTGluZS5kaXNwbGF5TmFtZSA9ICdSZWZlcmVuY2VMaW5lJztcblJlZmVyZW5jZUxpbmUuZGVmYXVsdFByb3BzID0ge1xuICBpc0Zyb250OiBmYWxzZSxcbiAgaWZPdmVyZmxvdzogJ2Rpc2NhcmQnLFxuICB4QXhpc0lkOiAwLFxuICB5QXhpc0lkOiAwLFxuICBmaWxsOiAnbm9uZScsXG4gIHN0cm9rZTogJyNjY2MnLFxuICBmaWxsT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDEsXG4gIHBvc2l0aW9uOiAnbWlkZGxlJyxcbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUmVmZXJlbmNlIERvdFxuICovXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgRG90LCBQcm9wcyBhcyBEb3RQcm9wcyB9IGZyb20gJy4uL3NoYXBlL0RvdCc7XG5pbXBvcnQgeyBJbXBsaWNpdExhYmVsVHlwZSwgTGFiZWwgfSBmcm9tICcuLi9jb21wb25lbnQvTGFiZWwnO1xuaW1wb3J0IHsgaXNOdW1PclN0ciB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IGlmT3ZlcmZsb3dNYXRjaGVzIH0gZnJvbSAnLi4vdXRpbC9JZk92ZXJmbG93TWF0Y2hlcyc7XG5pbXBvcnQgeyBjcmVhdGVMYWJlbGVkU2NhbGVzIH0gZnJvbSAnLi4vdXRpbC9DYXJ0ZXNpYW5VdGlscyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vdXRpbC9Mb2dVdGlscyc7XG5pbXBvcnQgeyBEM1NjYWxlLCBmaWx0ZXJQcm9wcyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWEF4aXNQcm9wcyB9IGZyb20gJy4vWEF4aXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vWUF4aXMnO1xuXG5pbnRlcmZhY2UgSW50ZXJuYWxSZWZlcmVuY2VEb3RQcm9wcyB7XG4gIHhBeGlzPzogT21pdDxYQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPiB9O1xuICB5QXhpcz86IE9taXQ8WUF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgY2xpcFBhdGhJZD86IG51bWJlciB8IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJlZmVyZW5jZURvdFByb3BzIGV4dGVuZHMgSW50ZXJuYWxSZWZlcmVuY2VEb3RQcm9wcyB7XG4gIHI/OiBudW1iZXI7XG5cbiAgaXNGcm9udD86IGJvb2xlYW47XG4gIGFsd2F5c1Nob3c/OiBib29sZWFuO1xuICBpZk92ZXJmbG93PzogJ2hpZGRlbicgfCAndmlzaWJsZScgfCAnZGlzY2FyZCcgfCAnZXh0ZW5kRG9tYWluJztcbiAgeD86IG51bWJlciB8IHN0cmluZztcbiAgeT86IG51bWJlciB8IHN0cmluZztcblxuICBjbGFzc05hbWU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHlBeGlzSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHhBeGlzSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHNoYXBlPzogUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+IHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pO1xuICBsYWJlbD86IEltcGxpY2l0TGFiZWxUeXBlO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IERvdFByb3BzICYgUmVmZXJlbmNlRG90UHJvcHM7XG5cbmNvbnN0IGdldENvb3JkaW5hdGUgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgeCwgeSwgeEF4aXMsIHlBeGlzIH0gPSBwcm9wcztcbiAgY29uc3Qgc2NhbGVzID0gY3JlYXRlTGFiZWxlZFNjYWxlcyh7IHg6IHhBeGlzLnNjYWxlLCB5OiB5QXhpcy5zY2FsZSB9KTtcblxuICBjb25zdCByZXN1bHQgPSBzY2FsZXMuYXBwbHkoeyB4LCB5IH0sIHsgYmFuZEF3YXJlOiB0cnVlIH0pO1xuXG4gIGlmIChpZk92ZXJmbG93TWF0Y2hlcyhwcm9wcywgJ2Rpc2NhcmQnKSAmJiAhc2NhbGVzLmlzSW5SYW5nZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFJlZmVyZW5jZURvdChwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyB4LCB5LCByLCBhbHdheXNTaG93LCBjbGlwUGF0aElkIH0gPSBwcm9wcztcbiAgY29uc3QgaXNYID0gaXNOdW1PclN0cih4KTtcbiAgY29uc3QgaXNZID0gaXNOdW1PclN0cih5KTtcblxuICB3YXJuKGFsd2F5c1Nob3cgPT09IHVuZGVmaW5lZCwgJ1RoZSBhbHdheXNTaG93IHByb3AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBpZk92ZXJmbG93PVwiZXh0ZW5kRG9tYWluXCIgaW5zdGVhZC4nKTtcblxuICBpZiAoIWlzWCB8fCAhaXNZKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjb29yZGluYXRlID0gZ2V0Q29vcmRpbmF0ZShwcm9wcyk7XG5cbiAgaWYgKCFjb29yZGluYXRlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB7IHg6IGN4LCB5OiBjeSB9ID0gY29vcmRpbmF0ZTtcblxuICBjb25zdCB7IHNoYXBlLCBjbGFzc05hbWUgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGNsaXBQYXRoID0gaWZPdmVyZmxvd01hdGNoZXMocHJvcHMsICdoaWRkZW4nKSA/IGB1cmwoIyR7Y2xpcFBhdGhJZH0pYCA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBkb3RQcm9wcyA9IHtcbiAgICBjbGlwUGF0aCxcbiAgICAuLi5maWx0ZXJQcm9wcyhwcm9wcywgdHJ1ZSksXG4gICAgY3gsXG4gICAgY3ksXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5ZXIgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy1yZWZlcmVuY2UtZG90JywgY2xhc3NOYW1lKX0+XG4gICAgICB7UmVmZXJlbmNlRG90LnJlbmRlckRvdChzaGFwZSwgZG90UHJvcHMpfVxuICAgICAge0xhYmVsLnJlbmRlckNhbGxCeVBhcmVudChwcm9wcywge1xuICAgICAgICB4OiBjeCAtIHIsXG4gICAgICAgIHk6IGN5IC0gcixcbiAgICAgICAgd2lkdGg6IDIgKiByLFxuICAgICAgICBoZWlnaHQ6IDIgKiByLFxuICAgICAgfSl9XG4gICAgPC9MYXllcj5cbiAgKTtcbn1cblxuUmVmZXJlbmNlRG90LmRpc3BsYXlOYW1lID0gJ1JlZmVyZW5jZURvdCc7XG5SZWZlcmVuY2VEb3QuZGVmYXVsdFByb3BzID0ge1xuICBpc0Zyb250OiBmYWxzZSxcbiAgaWZPdmVyZmxvdzogJ2Rpc2NhcmQnLFxuICB4QXhpc0lkOiAwLFxuICB5QXhpc0lkOiAwLFxuICByOiAxMCxcbiAgZmlsbDogJyNmZmYnLFxuICBzdHJva2U6ICcjY2NjJyxcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxLFxufTtcblJlZmVyZW5jZURvdC5yZW5kZXJEb3QgPSAob3B0aW9uOiBQcm9wc1snc2hhcGUnXSwgcHJvcHM6IGFueSkgPT4ge1xuICBsZXQgZG90O1xuXG4gIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgZG90ID0gUmVhY3QuY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgZG90ID0gb3B0aW9uKHByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICBkb3QgPSA8RG90IHsuLi5wcm9wc30gY3g9e3Byb3BzLmN4fSBjeT17cHJvcHMuY3l9IGNsYXNzTmFtZT1cInJlY2hhcnRzLXJlZmVyZW5jZS1kb3QtZG90XCIgLz47XG4gIH1cblxuICByZXR1cm4gZG90O1xufTtcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBSZWZlcmVuY2UgTGluZVxuICovXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgSW1wbGljaXRMYWJlbFR5cGUsIExhYmVsIH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsJztcbmltcG9ydCB7IGNyZWF0ZUxhYmVsZWRTY2FsZXMsIHJlY3RXaXRoUG9pbnRzIH0gZnJvbSAnLi4vdXRpbC9DYXJ0ZXNpYW5VdGlscyc7XG5pbXBvcnQgeyBpZk92ZXJmbG93TWF0Y2hlcyB9IGZyb20gJy4uL3V0aWwvSWZPdmVyZmxvd01hdGNoZXMnO1xuaW1wb3J0IHsgaXNOdW1PclN0ciB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi91dGlsL0xvZ1V0aWxzJztcbmltcG9ydCB7IFJlY3RhbmdsZSwgUHJvcHMgYXMgUmVjdGFuZ2xlUHJvcHMgfSBmcm9tICcuLi9zaGFwZS9SZWN0YW5nbGUnO1xuaW1wb3J0IHsgQ2FydGVzaWFuVmlld0JveCwgRDNTY2FsZSwgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW1wb3J0IHsgUHJvcHMgYXMgWEF4aXNQcm9wcyB9IGZyb20gJy4vWEF4aXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vWUF4aXMnO1xuXG5pbnRlcmZhY2UgSW50ZXJuYWxSZWZlcmVuY2VBcmVhUHJvcHMge1xuICB2aWV3Qm94PzogQ2FydGVzaWFuVmlld0JveDtcbiAgeEF4aXM/OiBPbWl0PFhBeGlzUHJvcHMsICdzY2FsZSc+ICYgeyBzY2FsZTogRDNTY2FsZTxzdHJpbmcgfCBudW1iZXI+IH07XG4gIHlBeGlzPzogT21pdDxZQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPiB9O1xuICBjbGlwUGF0aElkPzogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUmVmZXJlbmNlQXJlYVByb3BzIGV4dGVuZHMgSW50ZXJuYWxSZWZlcmVuY2VBcmVhUHJvcHMge1xuICBpc0Zyb250PzogYm9vbGVhbjtcbiAgYWx3YXlzU2hvdz86IGJvb2xlYW47XG4gIGlmT3ZlcmZsb3c/OiAnaGlkZGVuJyB8ICd2aXNpYmxlJyB8ICdkaXNjYXJkJyB8ICdleHRlbmREb21haW4nO1xuICB4MT86IG51bWJlciB8IHN0cmluZztcbiAgeDI/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHkxPzogbnVtYmVyIHwgc3RyaW5nO1xuICB5Mj86IG51bWJlciB8IHN0cmluZztcblxuICBjbGFzc05hbWU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHlBeGlzSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHhBeGlzSWQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHNoYXBlPzogUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+IHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pO1xuICBsYWJlbD86IEltcGxpY2l0TGFiZWxUeXBlO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFJlY3RhbmdsZVByb3BzICYgUmVmZXJlbmNlQXJlYVByb3BzO1xuXG5jb25zdCBnZXRSZWN0ID0gKGhhc1gxOiBib29sZWFuLCBoYXNYMjogYm9vbGVhbiwgaGFzWTE6IGJvb2xlYW4sIGhhc1kyOiBib29sZWFuLCBwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyB4MTogeFZhbHVlMSwgeDI6IHhWYWx1ZTIsIHkxOiB5VmFsdWUxLCB5MjogeVZhbHVlMiwgeEF4aXMsIHlBeGlzIH0gPSBwcm9wcztcblxuICBjb25zdCBzY2FsZXMgPSBjcmVhdGVMYWJlbGVkU2NhbGVzKHsgeDogeEF4aXMuc2NhbGUsIHk6IHlBeGlzLnNjYWxlIH0pO1xuXG4gIGNvbnN0IHAxID0ge1xuICAgIHg6IGhhc1gxID8gc2NhbGVzLnguYXBwbHkoeFZhbHVlMSwgeyBwb3NpdGlvbjogJ3N0YXJ0JyB9KSA6IHNjYWxlcy54LnJhbmdlTWluLFxuICAgIHk6IGhhc1kxID8gc2NhbGVzLnkuYXBwbHkoeVZhbHVlMSwgeyBwb3NpdGlvbjogJ3N0YXJ0JyB9KSA6IHNjYWxlcy55LnJhbmdlTWluLFxuICB9O1xuXG4gIGNvbnN0IHAyID0ge1xuICAgIHg6IGhhc1gyID8gc2NhbGVzLnguYXBwbHkoeFZhbHVlMiwgeyBwb3NpdGlvbjogJ2VuZCcgfSkgOiBzY2FsZXMueC5yYW5nZU1heCxcbiAgICB5OiBoYXNZMiA/IHNjYWxlcy55LmFwcGx5KHlWYWx1ZTIsIHsgcG9zaXRpb246ICdlbmQnIH0pIDogc2NhbGVzLnkucmFuZ2VNYXgsXG4gIH07XG5cbiAgaWYgKGlmT3ZlcmZsb3dNYXRjaGVzKHByb3BzLCAnZGlzY2FyZCcpICYmICghc2NhbGVzLmlzSW5SYW5nZShwMSkgfHwgIXNjYWxlcy5pc0luUmFuZ2UocDIpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHJlY3RXaXRoUG9pbnRzKHAxLCBwMik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUmVmZXJlbmNlQXJlYShwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyB4MSwgeDIsIHkxLCB5MiwgY2xhc3NOYW1lLCBhbHdheXNTaG93LCBjbGlwUGF0aElkIH0gPSBwcm9wcztcblxuICB3YXJuKGFsd2F5c1Nob3cgPT09IHVuZGVmaW5lZCwgJ1RoZSBhbHdheXNTaG93IHByb3AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBpZk92ZXJmbG93PVwiZXh0ZW5kRG9tYWluXCIgaW5zdGVhZC4nKTtcblxuICBjb25zdCBoYXNYMSA9IGlzTnVtT3JTdHIoeDEpO1xuICBjb25zdCBoYXNYMiA9IGlzTnVtT3JTdHIoeDIpO1xuICBjb25zdCBoYXNZMSA9IGlzTnVtT3JTdHIoeTEpO1xuICBjb25zdCBoYXNZMiA9IGlzTnVtT3JTdHIoeTIpO1xuXG4gIGNvbnN0IHsgc2hhcGUgfSA9IHByb3BzO1xuXG4gIGlmICghaGFzWDEgJiYgIWhhc1gyICYmICFoYXNZMSAmJiAhaGFzWTIgJiYgIXNoYXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCByZWN0ID0gZ2V0UmVjdChoYXNYMSwgaGFzWDIsIGhhc1kxLCBoYXNZMiwgcHJvcHMpO1xuXG4gIGlmICghcmVjdCAmJiAhc2hhcGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNsaXBQYXRoID0gaWZPdmVyZmxvd01hdGNoZXMocHJvcHMsICdoaWRkZW4nKSA/IGB1cmwoIyR7Y2xpcFBhdGhJZH0pYCA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gKFxuICAgIDxMYXllciBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3JlY2hhcnRzLXJlZmVyZW5jZS1hcmVhJywgY2xhc3NOYW1lKX0+XG4gICAgICB7UmVmZXJlbmNlQXJlYS5yZW5kZXJSZWN0KHNoYXBlLCB7IGNsaXBQYXRoLCAuLi5maWx0ZXJQcm9wcyhwcm9wcywgdHJ1ZSksIC4uLnJlY3QgfSl9XG4gICAgICB7TGFiZWwucmVuZGVyQ2FsbEJ5UGFyZW50KHByb3BzLCByZWN0KX1cbiAgICA8L0xheWVyPlxuICApO1xufVxuXG5SZWZlcmVuY2VBcmVhLmRpc3BsYXlOYW1lID0gJ1JlZmVyZW5jZUFyZWEnO1xuUmVmZXJlbmNlQXJlYS5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzRnJvbnQ6IGZhbHNlLFxuICBpZk92ZXJmbG93OiAnZGlzY2FyZCcsXG4gIHhBeGlzSWQ6IDAsXG4gIHlBeGlzSWQ6IDAsXG4gIHI6IDEwLFxuICBmaWxsOiAnI2NjYycsXG4gIGZpbGxPcGFjaXR5OiAwLjUsXG4gIHN0cm9rZTogJ25vbmUnLFxuICBzdHJva2VXaWR0aDogMSxcbn07XG5cblJlZmVyZW5jZUFyZWEucmVuZGVyUmVjdCA9IChvcHRpb246IFJlZmVyZW5jZUFyZWFQcm9wc1snc2hhcGUnXSwgcHJvcHM6IGFueSkgPT4ge1xuICBsZXQgcmVjdDtcblxuICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgIHJlY3QgPSBSZWFjdC5jbG9uZUVsZW1lbnQob3B0aW9uLCBwcm9wcyk7XG4gIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbikpIHtcbiAgICByZWN0ID0gb3B0aW9uKHByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICByZWN0ID0gPFJlY3RhbmdsZSB7Li4ucHJvcHN9IGNsYXNzTmFtZT1cInJlY2hhcnRzLXJlZmVyZW5jZS1hcmVhLXJlY3RcIiAvPjtcbiAgfVxuXG4gIHJldHVybiByZWN0O1xufTtcbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBDYXJ0ZXNpYW4gQXhpc1xuICovXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGUsIENvbXBvbmVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBzaGFsbG93RXF1YWwgfSBmcm9tICcuLi91dGlsL1NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgeyBnZXRTdHJpbmdTaXplIH0gZnJvbSAnLi4vdXRpbC9ET01VdGlscyc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uL2NvbnRhaW5lci9MYXllcic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50L1RleHQnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuLi9jb21wb25lbnQvTGFiZWwnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi4vdXRpbC9HbG9iYWwnO1xuaW1wb3J0IHsgaXNOdW1iZXIsIG1hdGhTaWduIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHtcbiAgQ2FydGVzaWFuVmlld0JveCxcbiAgZmlsdGVyUHJvcHMsXG4gIFRpY2tJdGVtLFxuICBhZGFwdEV2ZW50c09mQ2hpbGQsXG4gIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5pbnRlcmZhY2UgQ2FydGVzaWFuVGlja0l0ZW0gZXh0ZW5kcyBUaWNrSXRlbSB7XG4gIHRpY2tDb29yZD86IG51bWJlcjtcbiAgdGlja1NpemU/OiBudW1iZXI7XG4gIGlzU2hvdz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FydGVzaWFuQXhpc1Byb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB1bml0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBvcmllbnRhdGlvbj86ICd0b3AnIHwgJ2JvdHRvbScgfCAnbGVmdCcgfCAncmlnaHQnO1xuICAvLyBUaGUgdmlld0JveCBvZiBzdmdcbiAgdmlld0JveD86IENhcnRlc2lhblZpZXdCb3g7XG4gIHRpY2s/OiBTVkdQcm9wczxTVkdUZXh0RWxlbWVudD4gfCBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PikgfCBib29sZWFuO1xuICBheGlzTGluZT86IGJvb2xlYW4gfCBTVkdQcm9wczxTVkdMaW5lRWxlbWVudD47XG4gIHRpY2tMaW5lPzogYm9vbGVhbiB8IFNWR1Byb3BzPFNWR0xpbmVFbGVtZW50PjtcbiAgbWlycm9yPzogYm9vbGVhbjtcbiAgdGlja01hcmdpbjogbnVtYmVyO1xuICBoaWRlPzogYm9vbGVhbjtcbiAgbGFiZWw/OiBhbnk7XG5cbiAgbWluVGlja0dhcD86IG51bWJlcjtcbiAgdGlja3M/OiBDYXJ0ZXNpYW5UaWNrSXRlbVtdO1xuICB0aWNrU2l6ZT86IG51bWJlcjtcbiAgLyoqIFRoZSBmb3JtYXR0ZXIgZnVuY3Rpb24gb2YgdGljayAqL1xuICB0aWNrRm9ybWF0dGVyPzogKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHN0cmluZztcbiAgdGlja3NHZW5lcmF0b3I/OiAocHJvcHM/OiBDYXJ0ZXNpYW5BeGlzUHJvcHMpID0+IENhcnRlc2lhblRpY2tJdGVtW107XG4gIGludGVydmFsPzogbnVtYmVyIHwgJ3ByZXNlcnZlU3RhcnQnIHwgJ3ByZXNlcnZlRW5kJyB8ICdwcmVzZXJ2ZVN0YXJ0RW5kJztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBPbWl0PFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQ8YW55LCBTVkdFbGVtZW50PiwgJ3ZpZXdCb3gnPiAmIENhcnRlc2lhbkF4aXNQcm9wcztcblxuZXhwb3J0IGNsYXNzIENhcnRlc2lhbkF4aXMgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NhcnRlc2lhbkF4aXMnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB2aWV3Qm94OiB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAvLyBUaGUgb3JpZW50YXRpb24gb2YgYXhpc1xuICAgIG9yaWVudGF0aW9uOiAnYm90dG9tJyxcbiAgICAvLyBUaGUgdGlja3NcbiAgICB0aWNrczogW10gYXMgQ2FydGVzaWFuQXhpc1Byb3BzWyd0aWNrcyddLFxuXG4gICAgc3Ryb2tlOiAnIzY2NicsXG4gICAgdGlja0xpbmU6IHRydWUsXG4gICAgYXhpc0xpbmU6IHRydWUsXG4gICAgdGljazogdHJ1ZSxcbiAgICBtaXJyb3I6IGZhbHNlLFxuXG4gICAgbWluVGlja0dhcDogNSxcbiAgICAvLyBUaGUgd2lkdGggb3IgaGVpZ2h0IG9mIHRpY2tcbiAgICB0aWNrU2l6ZTogNixcbiAgICB0aWNrTWFyZ2luOiAyLFxuICAgIGludGVydmFsOiAncHJlc2VydmVFbmQnLFxuICB9O1xuXG4gIC8vIHRvZG8gQXJyYXk8VGljaz5cbiAgc3RhdGljIGdldFRpY2tzKHByb3BzOiBQcm9wcyk6IGFueVtdIHtcbiAgICBjb25zdCB7IHRpY2ssIHRpY2tzLCB2aWV3Qm94LCBtaW5UaWNrR2FwLCBvcmllbnRhdGlvbiwgaW50ZXJ2YWwsIHRpY2tGb3JtYXR0ZXIsIHVuaXQgfSA9IHByb3BzO1xuXG4gICAgaWYgKCF0aWNrcyB8fCAhdGlja3MubGVuZ3RoIHx8ICF0aWNrKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKGludGVydmFsKSB8fCBHbG9iYWwuaXNTc3IpIHtcbiAgICAgIHJldHVybiBDYXJ0ZXNpYW5BeGlzLmdldE51bWJlckludGVydmFsVGlja3MoXG4gICAgICAgIHRpY2tzLFxuICAgICAgICB0eXBlb2YgaW50ZXJ2YWwgPT09ICdudW1iZXInICYmIGlzTnVtYmVyKGludGVydmFsKSA/IGludGVydmFsIDogMCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGludGVydmFsID09PSAncHJlc2VydmVTdGFydEVuZCcpIHtcbiAgICAgIHJldHVybiBDYXJ0ZXNpYW5BeGlzLmdldFRpY2tzU3RhcnQoXG4gICAgICAgIHtcbiAgICAgICAgICB0aWNrcyxcbiAgICAgICAgICB0aWNrRm9ybWF0dGVyLFxuICAgICAgICAgIHZpZXdCb3gsXG4gICAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgICAgbWluVGlja0dhcCxcbiAgICAgICAgICB1bml0LFxuICAgICAgICB9LFxuICAgICAgICB0cnVlLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGludGVydmFsID09PSAncHJlc2VydmVTdGFydCcpIHtcbiAgICAgIHJldHVybiBDYXJ0ZXNpYW5BeGlzLmdldFRpY2tzU3RhcnQoe1xuICAgICAgICB0aWNrcyxcbiAgICAgICAgdGlja0Zvcm1hdHRlcixcbiAgICAgICAgdmlld0JveCxcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIG1pblRpY2tHYXAsXG4gICAgICAgIHVuaXQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gQ2FydGVzaWFuQXhpcy5nZXRUaWNrc0VuZCh7XG4gICAgICB0aWNrcyxcbiAgICAgIHRpY2tGb3JtYXR0ZXIsXG4gICAgICB2aWV3Qm94LFxuICAgICAgb3JpZW50YXRpb24sXG4gICAgICBtaW5UaWNrR2FwLFxuICAgICAgdW5pdCxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXROdW1iZXJJbnRlcnZhbFRpY2tzKHRpY2tzOiBDYXJ0ZXNpYW5UaWNrSXRlbVtdLCBpbnRlcnZhbDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRpY2tzLmZpbHRlcigoZW50cnksIGkpID0+IGkgJSAoaW50ZXJ2YWwgKyAxKSA9PT0gMCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0VGlja3NTdGFydChcbiAgICB7IHRpY2tzLCB0aWNrRm9ybWF0dGVyLCB2aWV3Qm94LCBvcmllbnRhdGlvbiwgbWluVGlja0dhcCwgdW5pdCB9OiBPbWl0PFByb3BzLCAndGlja01hcmdpbic+LFxuICAgIHByZXNlcnZlRW5kPzogYm9vbGVhbixcbiAgKSB7XG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSB2aWV3Qm94O1xuICAgIGNvbnN0IHNpemVLZXkgPSBvcmllbnRhdGlvbiA9PT0gJ3RvcCcgfHwgb3JpZW50YXRpb24gPT09ICdib3R0b20nID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIGNvbnN0IHJlc3VsdCA9ICh0aWNrcyB8fCBbXSkuc2xpY2UoKTtcbiAgICAvLyB3ZSBuZWVkIGFkZCB0aGUgd2lkdGggb2YgJ3VuaXQnIG9ubHkgd2hlbiBzaXplS2V5ID09PSAnd2lkdGgnXG4gICAgY29uc3QgdW5pdFNpemUgPSB1bml0ICYmIHNpemVLZXkgPT09ICd3aWR0aCcgPyBnZXRTdHJpbmdTaXplKHVuaXQpW3NpemVLZXldIDogMDtcbiAgICBjb25zdCBsZW4gPSByZXN1bHQubGVuZ3RoO1xuICAgIGNvbnN0IHNpZ24gPSBsZW4gPj0gMiA/IG1hdGhTaWduKHJlc3VsdFsxXS5jb29yZGluYXRlIC0gcmVzdWx0WzBdLmNvb3JkaW5hdGUpIDogMTtcblxuICAgIGxldCBzdGFydCwgZW5kO1xuXG4gICAgaWYgKHNpZ24gPT09IDEpIHtcbiAgICAgIHN0YXJ0ID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggOiB5O1xuICAgICAgZW5kID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggKyB3aWR0aCA6IHkgKyBoZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggKyB3aWR0aCA6IHkgKyBoZWlnaHQ7XG4gICAgICBlbmQgPSBzaXplS2V5ID09PSAnd2lkdGgnID8geCA6IHk7XG4gICAgfVxuXG4gICAgaWYgKHByZXNlcnZlRW5kKSB7XG4gICAgICAvLyBUcnkgdG8gZ3VhcmFudGVlIHRoZSB0YWlsIHRvIGJlIGRpc3BsYXllZFxuICAgICAgbGV0IHRhaWwgPSB0aWNrc1tsZW4gLSAxXTtcbiAgICAgIGNvbnN0IHRhaWxDb250ZW50ID0gXy5pc0Z1bmN0aW9uKHRpY2tGb3JtYXR0ZXIpID8gdGlja0Zvcm1hdHRlcih0YWlsLnZhbHVlLCBsZW4gLSAxKSA6IHRhaWwudmFsdWU7XG4gICAgICBjb25zdCB0YWlsU2l6ZSA9IGdldFN0cmluZ1NpemUodGFpbENvbnRlbnQpW3NpemVLZXldICsgdW5pdFNpemU7XG4gICAgICBjb25zdCB0YWlsR2FwID0gc2lnbiAqICh0YWlsLmNvb3JkaW5hdGUgKyAoc2lnbiAqIHRhaWxTaXplKSAvIDIgLSBlbmQpO1xuICAgICAgcmVzdWx0W2xlbiAtIDFdID0gdGFpbCA9IHtcbiAgICAgICAgLi4udGFpbCxcbiAgICAgICAgdGlja0Nvb3JkOiB0YWlsR2FwID4gMCA/IHRhaWwuY29vcmRpbmF0ZSAtIHRhaWxHYXAgKiBzaWduIDogdGFpbC5jb29yZGluYXRlLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgaXNUYWlsU2hvdyA9XG4gICAgICAgIHNpZ24gKiAodGFpbC50aWNrQ29vcmQgLSAoc2lnbiAqIHRhaWxTaXplKSAvIDIgLSBzdGFydCkgPj0gMCAmJlxuICAgICAgICBzaWduICogKHRhaWwudGlja0Nvb3JkICsgKHNpZ24gKiB0YWlsU2l6ZSkgLyAyIC0gZW5kKSA8PSAwO1xuXG4gICAgICBpZiAoaXNUYWlsU2hvdykge1xuICAgICAgICBlbmQgPSB0YWlsLnRpY2tDb29yZCAtIHNpZ24gKiAodGFpbFNpemUgLyAyICsgbWluVGlja0dhcCk7XG4gICAgICAgIHJlc3VsdFtsZW4gLSAxXSA9IHsgLi4udGFpbCwgaXNTaG93OiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY291bnQgPSBwcmVzZXJ2ZUVuZCA/IGxlbiAtIDEgOiBsZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBsZXQgZW50cnkgPSByZXN1bHRbaV07XG4gICAgICBjb25zdCBjb250ZW50ID0gXy5pc0Z1bmN0aW9uKHRpY2tGb3JtYXR0ZXIpID8gdGlja0Zvcm1hdHRlcihlbnRyeS52YWx1ZSwgaSkgOiBlbnRyeS52YWx1ZTtcbiAgICAgIGNvbnN0IHNpemUgPSBnZXRTdHJpbmdTaXplKGNvbnRlbnQpW3NpemVLZXldICsgdW5pdFNpemU7XG5cbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGdhcCA9IHNpZ24gKiAoZW50cnkuY29vcmRpbmF0ZSAtIChzaWduICogc2l6ZSkgLyAyIC0gc3RhcnQpO1xuICAgICAgICByZXN1bHRbaV0gPSBlbnRyeSA9IHtcbiAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICB0aWNrQ29vcmQ6IGdhcCA8IDAgPyBlbnRyeS5jb29yZGluYXRlIC0gZ2FwICogc2lnbiA6IGVudHJ5LmNvb3JkaW5hdGUsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbaV0gPSBlbnRyeSA9IHsgLi4uZW50cnksIHRpY2tDb29yZDogZW50cnkuY29vcmRpbmF0ZSB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc1Nob3cgPVxuICAgICAgICBzaWduICogKGVudHJ5LnRpY2tDb29yZCAtIChzaWduICogc2l6ZSkgLyAyIC0gc3RhcnQpID49IDAgJiZcbiAgICAgICAgc2lnbiAqIChlbnRyeS50aWNrQ29vcmQgKyAoc2lnbiAqIHNpemUpIC8gMiAtIGVuZCkgPD0gMDtcblxuICAgICAgaWYgKGlzU2hvdykge1xuICAgICAgICBzdGFydCA9IGVudHJ5LnRpY2tDb29yZCArIHNpZ24gKiAoc2l6ZSAvIDIgKyBtaW5UaWNrR2FwKTtcbiAgICAgICAgcmVzdWx0W2ldID0geyAuLi5lbnRyeSwgaXNTaG93OiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNTaG93KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRUaWNrc0VuZCh7IHRpY2tzLCB0aWNrRm9ybWF0dGVyLCB2aWV3Qm94LCBvcmllbnRhdGlvbiwgbWluVGlja0dhcCwgdW5pdCB9OiBPbWl0PFByb3BzLCAndGlja01hcmdpbic+KSB7XG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSB2aWV3Qm94O1xuICAgIGNvbnN0IHNpemVLZXkgPSBvcmllbnRhdGlvbiA9PT0gJ3RvcCcgfHwgb3JpZW50YXRpb24gPT09ICdib3R0b20nID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIC8vIHdlIG5lZWQgYWRkIHRoZSB3aWR0aCBvZiAndW5pdCcgb25seSB3aGVuIHNpemVLZXkgPT09ICd3aWR0aCdcbiAgICBjb25zdCB1bml0U2l6ZSA9IHVuaXQgJiYgc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IGdldFN0cmluZ1NpemUodW5pdClbc2l6ZUtleV0gOiAwO1xuICAgIGNvbnN0IHJlc3VsdCA9ICh0aWNrcyB8fCBbXSkuc2xpY2UoKTtcbiAgICBjb25zdCBsZW4gPSByZXN1bHQubGVuZ3RoO1xuICAgIGNvbnN0IHNpZ24gPSBsZW4gPj0gMiA/IG1hdGhTaWduKHJlc3VsdFsxXS5jb29yZGluYXRlIC0gcmVzdWx0WzBdLmNvb3JkaW5hdGUpIDogMTtcblxuICAgIGxldCBzdGFydCwgZW5kO1xuXG4gICAgaWYgKHNpZ24gPT09IDEpIHtcbiAgICAgIHN0YXJ0ID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggOiB5O1xuICAgICAgZW5kID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggKyB3aWR0aCA6IHkgKyBoZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gc2l6ZUtleSA9PT0gJ3dpZHRoJyA/IHggKyB3aWR0aCA6IHkgKyBoZWlnaHQ7XG4gICAgICBlbmQgPSBzaXplS2V5ID09PSAnd2lkdGgnID8geCA6IHk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZW50cnkgPSByZXN1bHRbaV07XG4gICAgICBjb25zdCBjb250ZW50ID0gXy5pc0Z1bmN0aW9uKHRpY2tGb3JtYXR0ZXIpID8gdGlja0Zvcm1hdHRlcihlbnRyeS52YWx1ZSwgbGVuIC0gaSAtIDEpIDogZW50cnkudmFsdWU7XG4gICAgICBjb25zdCBzaXplID0gZ2V0U3RyaW5nU2l6ZShjb250ZW50KVtzaXplS2V5XSArIHVuaXRTaXplO1xuXG4gICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICBjb25zdCBnYXAgPSBzaWduICogKGVudHJ5LmNvb3JkaW5hdGUgKyAoc2lnbiAqIHNpemUpIC8gMiAtIGVuZCk7XG4gICAgICAgIHJlc3VsdFtpXSA9IGVudHJ5ID0ge1xuICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgIHRpY2tDb29yZDogZ2FwID4gMCA/IGVudHJ5LmNvb3JkaW5hdGUgLSBnYXAgKiBzaWduIDogZW50cnkuY29vcmRpbmF0ZSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IGVudHJ5ID0geyAuLi5lbnRyeSwgdGlja0Nvb3JkOiBlbnRyeS5jb29yZGluYXRlIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzU2hvdyA9XG4gICAgICAgIHNpZ24gKiAoZW50cnkudGlja0Nvb3JkIC0gKHNpZ24gKiBzaXplKSAvIDIgLSBzdGFydCkgPj0gMCAmJlxuICAgICAgICBzaWduICogKGVudHJ5LnRpY2tDb29yZCArIChzaWduICogc2l6ZSkgLyAyIC0gZW5kKSA8PSAwO1xuXG4gICAgICBpZiAoaXNTaG93KSB7XG4gICAgICAgIGVuZCA9IGVudHJ5LnRpY2tDb29yZCAtIHNpZ24gKiAoc2l6ZSAvIDIgKyBtaW5UaWNrR2FwKTtcbiAgICAgICAgcmVzdWx0W2ldID0geyAuLi5lbnRyeSwgaXNTaG93OiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNTaG93KTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSh7IHZpZXdCb3gsIC4uLnJlc3RQcm9wcyB9OiBQcm9wcykge1xuICAgIC8vIHByb3BzLnZpZXdCb3ggaXMgc29tZXRpbWVzIGdlbmVyYXRlZCBldmVyeSB0aW1lIC1cbiAgICAvLyBjaGVjayB0aGF0IHNwZWNpYWxseSBhcyBvYmplY3QgZXF1YWxpdHkgaXMgbGlrZWx5IHRvIGZhaWxcbiAgICBjb25zdCB7IHZpZXdCb3g6IHZpZXdCb3hPbGQsIC4uLnJlc3RQcm9wc09sZCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh2aWV3Qm94LCB2aWV3Qm94T2xkKSB8fCAhc2hhbGxvd0VxdWFsKHJlc3RQcm9wcywgcmVzdFByb3BzT2xkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvb3JkaW5hdGVzIG9mIGVuZHBvaW50cyBpbiB0aWNrc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgb2YgYSBzaW1wbGUgdGlja1xuICAgKiBAcmV0dXJuIHtPYmplY3R9ICh4MSwgeTEpOiBUaGUgY29vcmRpbmF0ZSBvZiBlbmRwb2ludCBjbG9zZSB0byB0aWNrIHRleHRcbiAgICogICh4MiwgeTIpOiBUaGUgY29vcmRpbmF0ZSBvZiBlbmRwb2ludCBjbG9zZSB0byBheGlzXG4gICAqL1xuICBnZXRUaWNrTGluZUNvb3JkKGRhdGE6IENhcnRlc2lhblRpY2tJdGVtKSB7XG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBvcmllbnRhdGlvbiwgdGlja1NpemUsIG1pcnJvciwgdGlja01hcmdpbiB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgeDEsIHgyLCB5MSwgeTIsIHR4LCB0eTtcblxuICAgIGNvbnN0IHNpZ24gPSBtaXJyb3IgPyAtMSA6IDE7XG4gICAgY29uc3QgZmluYWxUaWNrU2l6ZSA9IGRhdGEudGlja1NpemUgfHwgdGlja1NpemU7XG4gICAgY29uc3QgdGlja0Nvb3JkID0gaXNOdW1iZXIoZGF0YS50aWNrQ29vcmQpID8gZGF0YS50aWNrQ29vcmQgOiBkYXRhLmNvb3JkaW5hdGU7XG5cbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICBjYXNlICd0b3AnOlxuICAgICAgICB4MSA9IHgyID0gZGF0YS5jb29yZGluYXRlO1xuICAgICAgICB5MiA9IHkgKyArIW1pcnJvciAqIGhlaWdodDtcbiAgICAgICAgeTEgPSB5MiAtIHNpZ24gKiBmaW5hbFRpY2tTaXplO1xuICAgICAgICB0eSA9IHkxIC0gc2lnbiAqIHRpY2tNYXJnaW47XG4gICAgICAgIHR4ID0gdGlja0Nvb3JkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICB5MSA9IHkyID0gZGF0YS5jb29yZGluYXRlO1xuICAgICAgICB4MiA9IHggKyArIW1pcnJvciAqIHdpZHRoO1xuICAgICAgICB4MSA9IHgyIC0gc2lnbiAqIGZpbmFsVGlja1NpemU7XG4gICAgICAgIHR4ID0geDEgLSBzaWduICogdGlja01hcmdpbjtcbiAgICAgICAgdHkgPSB0aWNrQ29vcmQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB5MSA9IHkyID0gZGF0YS5jb29yZGluYXRlO1xuICAgICAgICB4MiA9IHggKyArbWlycm9yICogd2lkdGg7XG4gICAgICAgIHgxID0geDIgKyBzaWduICogZmluYWxUaWNrU2l6ZTtcbiAgICAgICAgdHggPSB4MSArIHNpZ24gKiB0aWNrTWFyZ2luO1xuICAgICAgICB0eSA9IHRpY2tDb29yZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB4MSA9IHgyID0gZGF0YS5jb29yZGluYXRlO1xuICAgICAgICB5MiA9IHkgKyArbWlycm9yICogaGVpZ2h0O1xuICAgICAgICB5MSA9IHkyICsgc2lnbiAqIGZpbmFsVGlja1NpemU7XG4gICAgICAgIHR5ID0geTEgKyBzaWduICogdGlja01hcmdpbjtcbiAgICAgICAgdHggPSB0aWNrQ29vcmQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB7IGxpbmU6IHsgeDEsIHkxLCB4MiwgeTIgfSwgdGljazogeyB4OiB0eCwgeTogdHkgfSB9O1xuICB9XG5cbiAgZ2V0VGlja1RleHRBbmNob3IoKSB7XG4gICAgY29uc3QgeyBvcmllbnRhdGlvbiwgbWlycm9yIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB0ZXh0QW5jaG9yO1xuXG4gICAgc3dpdGNoIChvcmllbnRhdGlvbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIHRleHRBbmNob3IgPSBtaXJyb3IgPyAnc3RhcnQnIDogJ2VuZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB0ZXh0QW5jaG9yID0gbWlycm9yID8gJ2VuZCcgOiAnc3RhcnQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRleHRBbmNob3IgPSAnbWlkZGxlJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHRBbmNob3I7XG4gIH1cblxuICBnZXRUaWNrVmVydGljYWxBbmNob3IoKSB7XG4gICAgY29uc3QgeyBvcmllbnRhdGlvbiwgbWlycm9yIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB2ZXJ0aWNhbEFuY2hvciA9ICdlbmQnO1xuXG4gICAgc3dpdGNoIChvcmllbnRhdGlvbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIHZlcnRpY2FsQW5jaG9yID0gJ21pZGRsZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgdmVydGljYWxBbmNob3IgPSBtaXJyb3IgPyAnc3RhcnQnIDogJ2VuZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmVydGljYWxBbmNob3IgPSBtaXJyb3IgPyAnZW5kJyA6ICdzdGFydCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB2ZXJ0aWNhbEFuY2hvcjtcbiAgfVxuXG4gIHJlbmRlckF4aXNMaW5lKCkge1xuICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24sIG1pcnJvciwgYXhpc0xpbmUgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb3BzOiBTVkdQcm9wczxTVkdMaW5lRWxlbWVudD4gPSB7XG4gICAgICAuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzKSxcbiAgICAgIC4uLmZpbHRlclByb3BzKGF4aXNMaW5lKSxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICB9O1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSAndG9wJyB8fCBvcmllbnRhdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGNvbnN0IG5lZWRIZWlnaHQgPSArKChvcmllbnRhdGlvbiA9PT0gJ3RvcCcgJiYgIW1pcnJvcikgfHwgKG9yaWVudGF0aW9uID09PSAnYm90dG9tJyAmJiBtaXJyb3IpKTtcbiAgICAgIHByb3BzID0ge1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgeDE6IHgsXG4gICAgICAgIHkxOiB5ICsgbmVlZEhlaWdodCAqIGhlaWdodCxcbiAgICAgICAgeDI6IHggKyB3aWR0aCxcbiAgICAgICAgeTI6IHkgKyBuZWVkSGVpZ2h0ICogaGVpZ2h0LFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmVlZFdpZHRoID0gKygob3JpZW50YXRpb24gPT09ICdsZWZ0JyAmJiAhbWlycm9yKSB8fCAob3JpZW50YXRpb24gPT09ICdyaWdodCcgJiYgbWlycm9yKSk7XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIHgxOiB4ICsgbmVlZFdpZHRoICogd2lkdGgsXG4gICAgICAgIHkxOiB5LFxuICAgICAgICB4MjogeCArIG5lZWRXaWR0aCAqIHdpZHRoLFxuICAgICAgICB5MjogeSArIGhlaWdodCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIDxsaW5lIHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy1jYXJ0ZXNpYW4tYXhpcy1saW5lJywgXy5nZXQoYXhpc0xpbmUsICdjbGFzc05hbWUnKSl9IC8+O1xuICB9XG5cbiAgc3RhdGljIHJlbmRlclRpY2tJdGVtKG9wdGlvbjogUHJvcHNbJ3RpY2snXSwgcHJvcHM6IGFueSwgdmFsdWU6IFJlYWN0Tm9kZSkge1xuICAgIGxldCB0aWNrSXRlbTtcblxuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgICB0aWNrSXRlbSA9IFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICB0aWNrSXRlbSA9IG9wdGlvbihwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpY2tJdGVtID0gKFxuICAgICAgICA8VGV4dCB7Li4ucHJvcHN9IGNsYXNzTmFtZT1cInJlY2hhcnRzLWNhcnRlc2lhbi1heGlzLXRpY2stdmFsdWVcIj5cbiAgICAgICAgICB7dmFsdWV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpY2tJdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlbmRlciB0aGUgdGlja3NcbiAgICogQHBhcmFtIHtBcnJheX0gdGlja3MgVGhlIHRpY2tzIHRvIGFjdHVhbGx5IHJlbmRlciAob3ZlcnJpZGVzIHdoYXQgd2FzIHBhc3NlZCBpbiBwcm9wcylcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IHJlbmRlcmVkVGlja3NcbiAgICovXG4gIHJlbmRlclRpY2tzKHRpY2tzOiBDYXJ0ZXNpYW5UaWNrSXRlbVtdKSB7XG4gICAgY29uc3QgeyB0aWNrTGluZSwgc3Ryb2tlLCB0aWNrLCB0aWNrRm9ybWF0dGVyLCB1bml0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZpbmFsVGlja3MgPSBDYXJ0ZXNpYW5BeGlzLmdldFRpY2tzKHsgLi4udGhpcy5wcm9wcywgdGlja3MgfSk7XG4gICAgY29uc3QgdGV4dEFuY2hvciA9IHRoaXMuZ2V0VGlja1RleHRBbmNob3IoKTtcbiAgICBjb25zdCB2ZXJ0aWNhbEFuY2hvciA9IHRoaXMuZ2V0VGlja1ZlcnRpY2FsQW5jaG9yKCk7XG4gICAgY29uc3QgYXhpc1Byb3BzID0gZmlsdGVyUHJvcHModGhpcy5wcm9wcyk7XG4gICAgY29uc3QgY3VzdG9tVGlja1Byb3BzID0gZmlsdGVyUHJvcHModGljayk7XG4gICAgY29uc3QgdGlja0xpbmVQcm9wcyA9IHtcbiAgICAgIC4uLmF4aXNQcm9wcyxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIC4uLmZpbHRlclByb3BzKHRpY2tMaW5lKSxcbiAgICB9O1xuICAgIGNvbnN0IGl0ZW1zID0gZmluYWxUaWNrcy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCB7IGxpbmU6IGxpbmVDb29yZCwgdGljazogdGlja0Nvb3JkIH0gPSB0aGlzLmdldFRpY2tMaW5lQ29vcmQoZW50cnkpO1xuICAgICAgY29uc3QgdGlja1Byb3BzID0ge1xuICAgICAgICB0ZXh0QW5jaG9yLFxuICAgICAgICB2ZXJ0aWNhbEFuY2hvcixcbiAgICAgICAgLi4uYXhpc1Byb3BzLFxuICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgZmlsbDogc3Ryb2tlLFxuICAgICAgICAuLi5jdXN0b21UaWNrUHJvcHMsXG4gICAgICAgIC4uLnRpY2tDb29yZCxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHBheWxvYWQ6IGVudHJ5LFxuICAgICAgICB2aXNpYmxlVGlja3NDb3VudDogZmluYWxUaWNrcy5sZW5ndGgsXG4gICAgICAgIHRpY2tGb3JtYXR0ZXIsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGF5ZXJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1jYXJ0ZXNpYW4tYXhpcy10aWNrXCJcbiAgICAgICAgICBrZXk9e2B0aWNrLSR7aX1gfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIHsuLi5hZGFwdEV2ZW50c09mQ2hpbGQodGhpcy5wcm9wcywgZW50cnksIGkpfVxuICAgICAgICA+XG4gICAgICAgICAge3RpY2tMaW5lICYmIChcbiAgICAgICAgICAgIDxsaW5lXG4gICAgICAgICAgICAgIHsuLi50aWNrTGluZVByb3BzfVxuICAgICAgICAgICAgICB7Li4ubGluZUNvb3JkfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3JlY2hhcnRzLWNhcnRlc2lhbi1heGlzLXRpY2stbGluZScsIF8uZ2V0KHRpY2tMaW5lLCAnY2xhc3NOYW1lJykpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHt0aWNrICYmXG4gICAgICAgICAgICBDYXJ0ZXNpYW5BeGlzLnJlbmRlclRpY2tJdGVtKFxuICAgICAgICAgICAgICB0aWNrLFxuICAgICAgICAgICAgICB0aWNrUHJvcHMsXG4gICAgICAgICAgICAgIGAke18uaXNGdW5jdGlvbih0aWNrRm9ybWF0dGVyKSA/IHRpY2tGb3JtYXR0ZXIoZW50cnkudmFsdWUsIGkpIDogZW50cnkudmFsdWV9JHt1bml0IHx8ICcnfWAsXG4gICAgICAgICAgICApfVxuICAgICAgICA8L0xheWVyPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiA8ZyBjbGFzc05hbWU9XCJyZWNoYXJ0cy1jYXJ0ZXNpYW4tYXhpcy10aWNrc1wiPntpdGVtc308L2c+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYXhpc0xpbmUsIHdpZHRoLCBoZWlnaHQsIHRpY2tzR2VuZXJhdG9yLCBjbGFzc05hbWUsIGhpZGUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoaGlkZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyB0aWNrcywgLi4ubm9UaWNrc1Byb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBmaW5hbFRpY2tzID0gdGlja3M7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHRpY2tzR2VuZXJhdG9yKSkge1xuICAgICAgZmluYWxUaWNrcyA9IHRpY2tzICYmIHRpY2tzLmxlbmd0aCA+IDAgPyB0aWNrc0dlbmVyYXRvcih0aGlzLnByb3BzKSA6IHRpY2tzR2VuZXJhdG9yKG5vVGlja3NQcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDAgfHwgIWZpbmFsVGlja3MgfHwgIWZpbmFsVGlja3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExheWVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncmVjaGFydHMtY2FydGVzaWFuLWF4aXMnLCBjbGFzc05hbWUpfT5cbiAgICAgICAge2F4aXNMaW5lICYmIHRoaXMucmVuZGVyQXhpc0xpbmUoKX1cbiAgICAgICAge3RoaXMucmVuZGVyVGlja3MoZmluYWxUaWNrcyl9XG4gICAgICAgIHtMYWJlbC5yZW5kZXJDYWxsQnlQYXJlbnQodGhpcy5wcm9wcyl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBSZW5kZXIgc2VjdG9ycyBvZiBhIGZ1bm5lbFxuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IFRyYXBlem9pZCwgUHJvcHMgYXMgVHJhcGV6b2lkUHJvcHMgfSBmcm9tICcuLi9zaGFwZS9UcmFwZXpvaWQnO1xuaW1wb3J0IHsgTGFiZWxMaXN0IH0gZnJvbSAnLi4vY29tcG9uZW50L0xhYmVsTGlzdCc7XG5pbXBvcnQgeyBDZWxsLCBQcm9wcyBhcyBDZWxsUHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnQvQ2VsbCc7XG5pbXBvcnQgeyBmaW5kQWxsQnlUeXBlIH0gZnJvbSAnLi4vdXRpbC9SZWFjdFV0aWxzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4uL3V0aWwvR2xvYmFsJztcbmltcG9ydCB7IGludGVycG9sYXRlTnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9EYXRhVXRpbHMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHtcbiAgTGVnZW5kVHlwZSxcbiAgVG9vbHRpcFR5cGUsXG4gIEFuaW1hdGlvblRpbWluZyxcbiAgQ2hhcnRPZmZzZXQsXG4gIERhdGFLZXksXG4gIGZpbHRlclByb3BzLFxuICBhZGFwdEV2ZW50c09mQ2hpbGQsXG4gIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5pbnRlcmZhY2UgRnVubmVsVHJhcGV6b2lkSXRlbSBleHRlbmRzIFRyYXBlem9pZFByb3BzIHtcbiAgdmFsdWU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHBheWxvYWQ/OiBhbnk7XG59XG5cbmludGVyZmFjZSBJbnRlcm5hbEZ1bm5lbFByb3BzIHtcbiAgdHJhcGV6b2lkcz86IEZ1bm5lbFRyYXBlem9pZEl0ZW1bXTtcbiAgYW5pbWF0aW9uSWQ/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBGdW5uZWxQcm9wcyBleHRlbmRzIEludGVybmFsRnVubmVsUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGRhdGFLZXk6IERhdGFLZXk8YW55PjtcbiAgbmFtZUtleT86IERhdGFLZXk8YW55PjtcbiAgZGF0YT86IGFueVtdO1xuICBoaWRlPzogYm9vbGVhbjtcbiAgYWN0aXZlU2hhcGU/OiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PikgfCBUcmFwZXpvaWRQcm9wcztcbiAgbGVnZW5kVHlwZT86IExlZ2VuZFR5cGU7XG4gIHRvb2x0aXBUeXBlPzogVG9vbHRpcFR5cGU7XG4gIGFjdGl2ZUluZGV4PzogbnVtYmVyIHwgbnVtYmVyW107XG4gIGxhc3RTaGFwZVR5cGU/OiAndHJpYW5nbGUnIHwgJ3JlY3RhbmdsZSc7XG4gIHJldmVyc2VkPzogYm9vbGVhbjtcblxuICBvbkFuaW1hdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcbiAgb25BbmltYXRpb25FbmQ/OiAoKSA9PiB2b2lkO1xuXG4gIGlzQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgYW5pbWF0ZU5ld1ZhbHVlcz86IGJvb2xlYW47XG4gIGFuaW1hdGlvbkJlZ2luPzogbnVtYmVyO1xuICBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgYW5pbWF0aW9uRWFzaW5nPzogQW5pbWF0aW9uVGltaW5nO1xuICBpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBQcmVzZW50YXRpb25BdHRyaWJ1dGVzQWRhcHRDaGlsZEV2ZW50PGFueSwgU1ZHRWxlbWVudD4gJiBUcmFwZXpvaWRQcm9wcyAmIEZ1bm5lbFByb3BzO1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICByZWFkb25seSBwcmV2VHJhcGV6b2lkcz86IEZ1bm5lbFRyYXBlem9pZEl0ZW1bXTtcbiAgcmVhZG9ubHkgY3VyVHJhcGV6b2lkcz86IEZ1bm5lbFRyYXBlem9pZEl0ZW1bXTtcbiAgcmVhZG9ubHkgcHJldkFuaW1hdGlvbklkPzogbnVtYmVyO1xuICByZWFkb25seSBpc0FuaW1hdGlvbkZpbmlzaGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEZ1bm5lbCBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdGdW5uZWwnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc3Ryb2tlOiAnI2ZmZicsXG4gICAgZmlsbDogJyM4MDgwODAnLFxuICAgIGxlZ2VuZFR5cGU6ICdyZWN0JyxcbiAgICBsYWJlbExpbmU6IHRydWUsXG4gICAgaGlkZTogZmFsc2UsXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uQmVnaW46IDQwMCxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMTUwMCxcbiAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlJyxcbiAgICBuYW1lS2V5OiAnbmFtZScsXG4gICAgbGFzdFNoYXBlVHlwZTogJ3RyaWFuZ2xlJyxcbiAgfTtcblxuICBzdGF0aWMgZ2V0UmVhbEZ1bm5lbERhdGEgPSAoaXRlbTogRnVubmVsKSA9PiB7XG4gICAgY29uc3QgeyBkYXRhLCBjaGlsZHJlbiB9ID0gaXRlbS5wcm9wcztcbiAgICBjb25zdCBwcmVzZW50YXRpb25Qcm9wcyA9IGZpbHRlclByb3BzKGl0ZW0ucHJvcHMpO1xuICAgIGNvbnN0IGNlbGxzID0gZmluZEFsbEJ5VHlwZShjaGlsZHJlbiwgQ2VsbC5kaXNwbGF5TmFtZSk7XG5cbiAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGRhdGEubWFwKChlbnRyeTogYW55LCBpbmRleDogbnVtYmVyKSA9PiAoe1xuICAgICAgICBwYXlsb2FkOiBlbnRyeSxcbiAgICAgICAgLi4ucHJlc2VudGF0aW9uUHJvcHMsXG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAuLi4oY2VsbHMgJiYgY2VsbHNbaW5kZXhdICYmIGNlbGxzW2luZGV4XS5wcm9wcyksXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKGNlbGxzICYmIGNlbGxzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNlbGxzLm1hcCgoY2VsbDogUmVhY3RFbGVtZW50PENlbGxQcm9wcz4pID0+ICh7IC4uLnByZXNlbnRhdGlvblByb3BzLCAuLi5jZWxsLnByb3BzIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH07XG5cbiAgc3RhdGljIGdldFJlYWxXaWR0aEhlaWdodCA9IChpdGVtOiBGdW5uZWwsIG9mZnNldDogQ2hhcnRPZmZzZXQpID0+IHtcbiAgICBjb25zdCBjdXN0b21XaWR0aCA9IGl0ZW0ucHJvcHMud2lkdGg7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20gfSA9IG9mZnNldDtcbiAgICBjb25zdCByZWFsSGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGxldCByZWFsV2lkdGggPSB3aWR0aDtcblxuICAgIGlmIChfLmlzTnVtYmVyKGN1c3RvbVdpZHRoKSkge1xuICAgICAgcmVhbFdpZHRoID0gY3VzdG9tV2lkdGg7XG4gICAgfSBlbHNlIGlmIChfLmlzU3RyaW5nKGN1c3RvbVdpZHRoKSkge1xuICAgICAgcmVhbFdpZHRoID0gKHJlYWxXaWR0aCAqIHBhcnNlRmxvYXQoY3VzdG9tV2lkdGgpKSAvIDEwMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVhbFdpZHRoOiByZWFsV2lkdGggLSBsZWZ0IC0gcmlnaHQgLSA1MCxcbiAgICAgIHJlYWxIZWlnaHQ6IHJlYWxIZWlnaHQgLSBib3R0b20gLSB0b3AsXG4gICAgICBvZmZzZXRYOiAod2lkdGggLSByZWFsV2lkdGgpIC8gMixcbiAgICAgIG9mZnNldFk6IChoZWlnaHQgLSByZWFsSGVpZ2h0KSAvIDIsXG4gICAgfTtcbiAgfTtcblxuICBzdGF0aWMgZ2V0Q29tcG9zZWREYXRhID0gKHsgaXRlbSwgb2Zmc2V0IH06IHsgaXRlbTogRnVubmVsOyBvZmZzZXQ6IENoYXJ0T2Zmc2V0IH0pID0+IHtcbiAgICBjb25zdCBmdW5uZWxEYXRhID0gRnVubmVsLmdldFJlYWxGdW5uZWxEYXRhKGl0ZW0pO1xuICAgIGNvbnN0IHsgZGF0YUtleSwgbmFtZUtleSwgdG9vbHRpcFR5cGUsIGxhc3RTaGFwZVR5cGUsIHJldmVyc2VkIH0gPSBpdGVtLnByb3BzO1xuICAgIGNvbnN0IHsgbGVmdCwgdG9wIH0gPSBvZmZzZXQ7XG4gICAgY29uc3QgeyByZWFsSGVpZ2h0LCByZWFsV2lkdGgsIG9mZnNldFgsIG9mZnNldFkgfSA9IEZ1bm5lbC5nZXRSZWFsV2lkdGhIZWlnaHQoaXRlbSwgb2Zmc2V0KTtcbiAgICBjb25zdCBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIGZ1bm5lbERhdGEubWFwKChlbnRyeTogYW55KSA9PiBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgZGF0YUtleSwgMCkpLFxuICAgICk7XG4gICAgY29uc3QgbGVuID0gZnVubmVsRGF0YS5sZW5ndGg7XG4gICAgY29uc3Qgcm93SGVpZ2h0ID0gcmVhbEhlaWdodCAvIGxlbjtcbiAgICBjb25zdCBwYXJlbnRWaWV3Qm94ID0geyB4OiBvZmZzZXQubGVmdCwgeTogb2Zmc2V0LnRvcCwgd2lkdGg6IG9mZnNldC53aWR0aCwgaGVpZ2h0OiBvZmZzZXQuaGVpZ2h0IH07XG5cbiAgICBsZXQgdHJhcGV6b2lkcyA9IGZ1bm5lbERhdGEubWFwKChlbnRyeTogYW55LCBpOiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHJhd1ZhbCA9IGdldFZhbHVlQnlEYXRhS2V5KGVudHJ5LCBkYXRhS2V5LCAwKTtcbiAgICAgIGNvbnN0IG5hbWUgPSBnZXRWYWx1ZUJ5RGF0YUtleShlbnRyeSwgbmFtZUtleSwgaSk7XG4gICAgICBsZXQgdmFsID0gcmF3VmFsO1xuICAgICAgbGV0IG5leHRWYWw7XG5cbiAgICAgIGlmIChpICE9PSBsZW4gLSAxKSB7XG4gICAgICAgIG5leHRWYWwgPSBnZXRWYWx1ZUJ5RGF0YUtleShmdW5uZWxEYXRhW2kgKyAxXSwgZGF0YUtleSwgMCk7XG5cbiAgICAgICAgaWYgKG5leHRWYWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIFtuZXh0VmFsXSA9IG5leHRWYWw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmF3VmFsIGluc3RhbmNlb2YgQXJyYXkgJiYgcmF3VmFsLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBbdmFsLCBuZXh0VmFsXSA9IHJhd1ZhbDtcbiAgICAgIH0gZWxzZSBpZiAobGFzdFNoYXBlVHlwZSA9PT0gJ3JlY3RhbmdsZScpIHtcbiAgICAgICAgbmV4dFZhbCA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRWYWwgPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB4ID0gKChtYXhWYWx1ZSAtIHZhbCkgKiByZWFsV2lkdGgpIC8gKDIgKiBtYXhWYWx1ZSkgKyB0b3AgKyAyNSArIG9mZnNldFg7XG4gICAgICBjb25zdCB5ID0gcm93SGVpZ2h0ICogaSArIGxlZnQgKyBvZmZzZXRZO1xuICAgICAgY29uc3QgdXBwZXJXaWR0aCA9ICh2YWwgLyBtYXhWYWx1ZSkgKiByZWFsV2lkdGg7XG4gICAgICBjb25zdCBsb3dlcldpZHRoID0gKG5leHRWYWwgLyBtYXhWYWx1ZSkgKiByZWFsV2lkdGg7XG5cbiAgICAgIGNvbnN0IHRvb2x0aXBQYXlsb2FkID0gW3sgbmFtZSwgdmFsdWU6IHZhbCwgcGF5bG9hZDogZW50cnksIGRhdGFLZXksIHR5cGU6IHRvb2x0aXBUeXBlIH1dO1xuICAgICAgY29uc3QgdG9vbHRpcFBvc2l0aW9uID0ge1xuICAgICAgICB4OiB4ICsgdXBwZXJXaWR0aCAvIDIsXG4gICAgICAgIHk6IHkgKyByb3dIZWlnaHQgLyAyLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgd2lkdGg6IE1hdGgubWF4KHVwcGVyV2lkdGgsIGxvd2VyV2lkdGgpLFxuICAgICAgICB1cHBlcldpZHRoLFxuICAgICAgICBsb3dlcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJvd0hlaWdodCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsLFxuICAgICAgICB0b29sdGlwUGF5bG9hZCxcbiAgICAgICAgdG9vbHRpcFBvc2l0aW9uLFxuICAgICAgICAuLi5fLm9taXQoZW50cnksICd3aWR0aCcpLFxuICAgICAgICBwYXlsb2FkOiBlbnRyeSxcbiAgICAgICAgcGFyZW50Vmlld0JveCxcbiAgICAgICAgbGFiZWxWaWV3Qm94OiB7XG4gICAgICAgICAgeDogeCArICh1cHBlcldpZHRoIC0gbG93ZXJXaWR0aCkgLyA0LFxuICAgICAgICAgIHksXG4gICAgICAgICAgd2lkdGg6IE1hdGguYWJzKHVwcGVyV2lkdGggLSBsb3dlcldpZHRoKSAvIDIgKyBNYXRoLm1pbih1cHBlcldpZHRoLCBsb3dlcldpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IHJvd0hlaWdodCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBpZiAocmV2ZXJzZWQpIHtcbiAgICAgIHRyYXBlem9pZHMgPSB0cmFwZXpvaWRzLm1hcCgoZW50cnk6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBuZXdZID0gZW50cnkueSAtIGluZGV4ICogcm93SGVpZ2h0ICsgKGxlbiAtIDEgLSBpbmRleCkgKiByb3dIZWlnaHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgdXBwZXJXaWR0aDogZW50cnkubG93ZXJXaWR0aCxcbiAgICAgICAgICBsb3dlcldpZHRoOiBlbnRyeS51cHBlcldpZHRoLFxuICAgICAgICAgIHg6IGVudHJ5LnggLSAoZW50cnkubG93ZXJXaWR0aCAtIGVudHJ5LnVwcGVyV2lkdGgpIC8gMixcbiAgICAgICAgICB5OiBlbnRyeS55IC0gaW5kZXggKiByb3dIZWlnaHQgKyAobGVuIC0gMSAtIGluZGV4KSAqIHJvd0hlaWdodCxcbiAgICAgICAgICB0b29sdGlwUG9zaXRpb246IHsgLi4uZW50cnkudG9vbHRpcFBvc2l0aW9uLCB5OiBuZXdZICsgcm93SGVpZ2h0IC8gMiB9LFxuICAgICAgICAgIGxhYmVsVmlld0JveDoge1xuICAgICAgICAgICAgLi4uZW50cnkubGFiZWxWaWV3Qm94LFxuICAgICAgICAgICAgeTogbmV3WSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYXBlem9pZHMsXG4gICAgICBkYXRhOiBmdW5uZWxEYXRhLFxuICAgIH07XG4gIH07XG5cbiAgc3RhdGU6IFN0YXRlID0geyBpc0FuaW1hdGlvbkZpbmlzaGVkOiBmYWxzZSB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcbiAgICBpZiAobmV4dFByb3BzLmFuaW1hdGlvbklkICE9PSBwcmV2U3RhdGUucHJldkFuaW1hdGlvbklkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2QW5pbWF0aW9uSWQ6IG5leHRQcm9wcy5hbmltYXRpb25JZCxcbiAgICAgICAgY3VyVHJhcGV6b2lkczogbmV4dFByb3BzLnRyYXBlem9pZHMsXG4gICAgICAgIHByZXZUcmFwZXpvaWRzOiBwcmV2U3RhdGUuY3VyVHJhcGV6b2lkcyxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMudHJhcGV6b2lkcyAhPT0gcHJldlN0YXRlLmN1clRyYXBlem9pZHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1clRyYXBlem9pZHM6IG5leHRQcm9wcy50cmFwZXpvaWRzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGhhbmRsZUFuaW1hdGlvbkVuZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uQW5pbWF0aW9uRW5kIH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0FuaW1hdGlvbkZpbmlzaGVkOiB0cnVlIH0pO1xuXG4gICAgaWYgKF8uaXNGdW5jdGlvbihvbkFuaW1hdGlvbkVuZCkpIHtcbiAgICAgIG9uQW5pbWF0aW9uRW5kKCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUFuaW1hdGlvblN0YXJ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgb25BbmltYXRpb25TdGFydCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogZmFsc2UgfSk7XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9uQW5pbWF0aW9uU3RhcnQpKSB7XG4gICAgICBvbkFuaW1hdGlvblN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIGlzQWN0aXZlSW5kZXgoaTogbnVtYmVyKSB7XG4gICAgY29uc3QgeyBhY3RpdmVJbmRleCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGFjdGl2ZUluZGV4KSkge1xuICAgICAgcmV0dXJuIGFjdGl2ZUluZGV4LmluZGV4T2YoaSkgIT09IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBpID09PSBhY3RpdmVJbmRleDtcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJUcmFwZXpvaWRJdGVtKG9wdGlvbjogUHJvcHNbJ2FjdGl2ZVNoYXBlJ10sIHByb3BzOiBhbnkpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uKHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XG4gICAgICByZXR1cm4gPFRyYXBlem9pZCB7Li4ucHJvcHN9IHsuLi5vcHRpb259IC8+O1xuICAgIH1cblxuICAgIHJldHVybiA8VHJhcGV6b2lkIHsuLi5wcm9wc30gLz47XG4gIH1cblxuICByZW5kZXJUcmFwZXpvaWRzU3RhdGljYWxseSh0cmFwZXpvaWRzOiBGdW5uZWxUcmFwZXpvaWRJdGVtW10pIHtcbiAgICBjb25zdCB7IGFjdGl2ZVNoYXBlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIHRyYXBlem9pZHMubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgY29uc3QgdHJhcGV6b2lkT3B0aW9ucyA9IHRoaXMuaXNBY3RpdmVJbmRleChpKSA/IGFjdGl2ZVNoYXBlIDogbnVsbDtcbiAgICAgIGNvbnN0IHRyYXBlem9pZFByb3BzID0ge1xuICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgc3Ryb2tlOiBlbnRyeS5zdHJva2UsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TGF5ZXJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1mdW5uZWwtdHJhcGV6b2lkXCJcbiAgICAgICAgICB7Li4uYWRhcHRFdmVudHNPZkNoaWxkKHRoaXMucHJvcHMsIGVudHJ5LCBpKX1cbiAgICAgICAgICBrZXk9e2B0cmFwZXpvaWQtJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgID5cbiAgICAgICAgICB7RnVubmVsLnJlbmRlclRyYXBlem9pZEl0ZW0odHJhcGV6b2lkT3B0aW9ucywgdHJhcGV6b2lkUHJvcHMpfVxuICAgICAgICA8L0xheWVyPlxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclRyYXBlem9pZHNXaXRoQW5pbWF0aW9uKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRyYXBlem9pZHMsXG4gICAgICBpc0FuaW1hdGlvbkFjdGl2ZSxcbiAgICAgIGFuaW1hdGlvbkJlZ2luLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBhbmltYXRpb25FYXNpbmcsXG4gICAgICBhbmltYXRpb25JZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByZXZUcmFwZXpvaWRzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRlXG4gICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgZHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICBpc0FjdGl2ZT17aXNBbmltYXRpb25BY3RpdmV9XG4gICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICBmcm9tPXt7IHQ6IDAgfX1cbiAgICAgICAgdG89e3sgdDogMSB9fVxuICAgICAgICBrZXk9e2BmdW5uZWwtJHthbmltYXRpb25JZH1gfVxuICAgICAgICBvbkFuaW1hdGlvblN0YXJ0PXt0aGlzLmhhbmRsZUFuaW1hdGlvblN0YXJ0fVxuICAgICAgICBvbkFuaW1hdGlvbkVuZD17dGhpcy5oYW5kbGVBbmltYXRpb25FbmR9XG4gICAgICA+XG4gICAgICAgIHsoeyB0IH06IHsgdDogbnVtYmVyIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBzdGVwRGF0YSA9IHRyYXBlem9pZHMubWFwKChlbnRyeTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gcHJldlRyYXBlem9pZHMgJiYgcHJldlRyYXBlem9pZHNbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JYID0gaW50ZXJwb2xhdGVOdW1iZXIocHJldi54LCBlbnRyeS54KTtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yWSA9IGludGVycG9sYXRlTnVtYmVyKHByZXYueSwgZW50cnkueSk7XG4gICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclVwcGVyV2lkdGggPSBpbnRlcnBvbGF0ZU51bWJlcihwcmV2LnVwcGVyV2lkdGgsIGVudHJ5LnVwcGVyV2lkdGgpO1xuICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JMb3dlcldpZHRoID0gaW50ZXJwb2xhdGVOdW1iZXIocHJldi5sb3dlcldpZHRoLCBlbnRyeS5sb3dlcldpZHRoKTtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9ySGVpZ2h0ID0gaW50ZXJwb2xhdGVOdW1iZXIocHJldi5oZWlnaHQsIGVudHJ5LmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICB4OiBpbnRlcnBvbGF0b3JYKHQpLFxuICAgICAgICAgICAgICAgIHk6IGludGVycG9sYXRvclkodCksXG4gICAgICAgICAgICAgICAgdXBwZXJXaWR0aDogaW50ZXJwb2xhdG9yVXBwZXJXaWR0aCh0KSxcbiAgICAgICAgICAgICAgICBsb3dlcldpZHRoOiBpbnRlcnBvbGF0b3JMb3dlcldpZHRoKHQpLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaW50ZXJwb2xhdG9ySGVpZ2h0KHQpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JYID0gaW50ZXJwb2xhdGVOdW1iZXIoZW50cnkueCArIGVudHJ5LnVwcGVyV2lkdGggLyAyLCBlbnRyeS54KTtcbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvclkgPSBpbnRlcnBvbGF0ZU51bWJlcihlbnRyeS55ICsgZW50cnkuaGVpZ2h0IC8gMiwgZW50cnkueSk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JVcHBlcldpZHRoID0gaW50ZXJwb2xhdGVOdW1iZXIoMCwgZW50cnkudXBwZXJXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JMb3dlcldpZHRoID0gaW50ZXJwb2xhdGVOdW1iZXIoMCwgZW50cnkubG93ZXJXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3JIZWlnaHQgPSBpbnRlcnBvbGF0ZU51bWJlcigwLCBlbnRyeS5oZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgeDogaW50ZXJwb2xhdG9yWCh0KSxcbiAgICAgICAgICAgICAgeTogaW50ZXJwb2xhdG9yWSh0KSxcbiAgICAgICAgICAgICAgdXBwZXJXaWR0aDogaW50ZXJwb2xhdG9yVXBwZXJXaWR0aCh0KSxcbiAgICAgICAgICAgICAgbG93ZXJXaWR0aDogaW50ZXJwb2xhdG9yTG93ZXJXaWR0aCh0KSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBpbnRlcnBvbGF0b3JIZWlnaHQodCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiA8TGF5ZXI+e3RoaXMucmVuZGVyVHJhcGV6b2lkc1N0YXRpY2FsbHkoc3RlcERhdGEpfTwvTGF5ZXI+O1xuICAgICAgICB9fVxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJUcmFwZXpvaWRzKCkge1xuICAgIGNvbnN0IHsgdHJhcGV6b2lkcywgaXNBbmltYXRpb25BY3RpdmUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBwcmV2VHJhcGV6b2lkcyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChcbiAgICAgIGlzQW5pbWF0aW9uQWN0aXZlICYmXG4gICAgICB0cmFwZXpvaWRzICYmXG4gICAgICB0cmFwZXpvaWRzLmxlbmd0aCAmJlxuICAgICAgKCFwcmV2VHJhcGV6b2lkcyB8fCAhXy5pc0VxdWFsKHByZXZUcmFwZXpvaWRzLCB0cmFwZXpvaWRzKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclRyYXBlem9pZHNXaXRoQW5pbWF0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbmRlclRyYXBlem9pZHNTdGF0aWNhbGx5KHRyYXBlem9pZHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGlkZSwgdHJhcGV6b2lkcywgY2xhc3NOYW1lLCBpc0FuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzQW5pbWF0aW9uRmluaXNoZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoaGlkZSB8fCAhdHJhcGV6b2lkcyB8fCAhdHJhcGV6b2lkcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGxheWVyQ2xhc3MgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy10cmFwZXpvaWRzJywgY2xhc3NOYW1lKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPXtsYXllckNsYXNzfT5cbiAgICAgICAge3RoaXMucmVuZGVyVHJhcGV6b2lkcygpfVxuICAgICAgICB7KCFpc0FuaW1hdGlvbkFjdGl2ZSB8fCBpc0FuaW1hdGlvbkZpbmlzaGVkKSAmJiBMYWJlbExpc3QucmVuZGVyQ2FsbEJ5UGFyZW50KHRoaXMucHJvcHMsIHRyYXBlem9pZHMpfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUmVjdGFuZ2xlXG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBTVkdQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCB7IEFuaW1hdGlvblRpbWluZywgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuY29uc3QgZ2V0VHJhcGV6b2lkUGF0aCA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgdXBwZXJXaWR0aDogbnVtYmVyLCBsb3dlcldpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHdpZHRoR2FwID0gdXBwZXJXaWR0aCAtIGxvd2VyV2lkdGg7XG4gIGxldCBwYXRoO1xuICBwYXRoID0gYE0gJHt4fSwke3l9YDtcbiAgcGF0aCArPSBgTCAke3ggKyB1cHBlcldpZHRofSwke3l9YDtcbiAgcGF0aCArPSBgTCAke3ggKyB1cHBlcldpZHRoIC0gd2lkdGhHYXAgLyAyfSwke3kgKyBoZWlnaHR9YDtcbiAgcGF0aCArPSBgTCAke3ggKyB1cHBlcldpZHRoIC0gd2lkdGhHYXAgLyAyIC0gbG93ZXJXaWR0aH0sJHt5ICsgaGVpZ2h0fWA7XG4gIHBhdGggKz0gYEwgJHt4fSwke3l9IFpgO1xuICByZXR1cm4gcGF0aDtcbn07XG5cbmludGVyZmFjZSBUcmFwZXpvaWRQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgeD86IG51bWJlcjtcbiAgeT86IG51bWJlcjtcbiAgdXBwZXJXaWR0aD86IG51bWJlcjtcbiAgbG93ZXJXaWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuXG4gIGlzVXBkYXRlQW5pbWF0aW9uQWN0aXZlPzogYm9vbGVhbjtcbiAgYW5pbWF0aW9uQmVnaW4/OiBudW1iZXI7XG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuICBhbmltYXRpb25FYXNpbmc/OiBBbmltYXRpb25UaW1pbmc7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHUGF0aEVsZW1lbnQ+ICYgVHJhcGV6b2lkUHJvcHM7XG5cbmV4cG9ydCBjbGFzcyBUcmFwZXpvaWQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHVwcGVyV2lkdGg6IDAsXG4gICAgbG93ZXJXaWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmU6IGZhbHNlLFxuICAgIGFuaW1hdGlvbkJlZ2luOiAwLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAxNTAwLFxuICAgIGFuaW1hdGlvbkVhc2luZzogJ2Vhc2UnLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHRvdGFsTGVuZ3RoOiAtMSxcbiAgfTtcblxuICBwcml2YXRlIG5vZGU6IFNWR1BhdGhFbGVtZW50O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlICovXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLm5vZGUgJiYgdGhpcy5ub2RlLmdldFRvdGFsTGVuZ3RoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0b3RhbExlbmd0aCA9IHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aCgpO1xuXG4gICAgICAgIGlmICh0b3RhbExlbmd0aCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdG90YWxMZW5ndGgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBjYWxjdWxhdGUgdG90YWwgbGVuZ3RoIGVycm9yXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgeCwgeSwgdXBwZXJXaWR0aCwgbG93ZXJXaWR0aCwgaGVpZ2h0LCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0b3RhbExlbmd0aCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGFuaW1hdGlvbkVhc2luZywgYW5pbWF0aW9uRHVyYXRpb24sIGFuaW1hdGlvbkJlZ2luLCBpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChcbiAgICAgIHggIT09ICt4IHx8XG4gICAgICB5ICE9PSAreSB8fFxuICAgICAgdXBwZXJXaWR0aCAhPT0gK3VwcGVyV2lkdGggfHxcbiAgICAgIGxvd2VyV2lkdGggIT09ICtsb3dlcldpZHRoIHx8XG4gICAgICBoZWlnaHQgIT09ICtoZWlnaHQgfHxcbiAgICAgICh1cHBlcldpZHRoID09PSAwICYmIGxvd2VyV2lkdGggPT09IDApIHx8XG4gICAgICBoZWlnaHQgPT09IDBcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGxheWVyQ2xhc3MgPSBjbGFzc05hbWVzKCdyZWNoYXJ0cy10cmFwZXpvaWQnLCBjbGFzc05hbWUpO1xuXG4gICAgaWYgKCFpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGc+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIHsuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzLCB0cnVlKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17bGF5ZXJDbGFzc31cbiAgICAgICAgICAgIGQ9e2dldFRyYXBlem9pZFBhdGgoeCwgeSwgdXBwZXJXaWR0aCwgbG93ZXJXaWR0aCwgaGVpZ2h0KX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2c+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVcbiAgICAgICAgY2FuQmVnaW49e3RvdGFsTGVuZ3RoID4gMH1cbiAgICAgICAgZnJvbT17eyB1cHBlcldpZHRoOiAwLCBsb3dlcldpZHRoOiAwLCBoZWlnaHQsIHgsIHkgfX1cbiAgICAgICAgdG89e3sgdXBwZXJXaWR0aCwgbG93ZXJXaWR0aCwgaGVpZ2h0LCB4LCB5IH19XG4gICAgICAgIGR1cmF0aW9uPXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgYW5pbWF0aW9uRWFzaW5nPXthbmltYXRpb25FYXNpbmd9XG4gICAgICAgIGlzQWN0aXZlPXtpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZX1cbiAgICAgID5cbiAgICAgICAgeyh7XG4gICAgICAgICAgdXBwZXJXaWR0aDogY3VyclVwcGVyV2lkdGgsXG4gICAgICAgICAgbG93ZXJXaWR0aDogY3Vyckxvd2VyV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBjdXJySGVpZ2h0LFxuICAgICAgICAgIHg6IGN1cnJYLFxuICAgICAgICAgIHk6IGN1cnJZLFxuICAgICAgICB9OiB7XG4gICAgICAgICAgdXBwZXJXaWR0aDogbnVtYmVyO1xuICAgICAgICAgIGxvd2VyV2lkdGg6IG51bWJlcjtcbiAgICAgICAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICB9KSA9PiAoXG4gICAgICAgICAgPEFuaW1hdGVcbiAgICAgICAgICAgIGNhbkJlZ2luPXt0b3RhbExlbmd0aCA+IDB9XG4gICAgICAgICAgICBmcm9tPXtgMHB4ICR7dG90YWxMZW5ndGggPT09IC0xID8gMSA6IHRvdGFsTGVuZ3RofXB4YH1cbiAgICAgICAgICAgIHRvPXtgJHt0b3RhbExlbmd0aH1weCAwcHhgfVxuICAgICAgICAgICAgYXR0cmlidXRlTmFtZT1cInN0cm9rZURhc2hhcnJheVwiXG4gICAgICAgICAgICBiZWdpbj17YW5pbWF0aW9uQmVnaW59XG4gICAgICAgICAgICBkdXJhdGlvbj17YW5pbWF0aW9uRHVyYXRpb259XG4gICAgICAgICAgICBlYXNpbmc9e2FuaW1hdGlvbkVhc2luZ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICB7Li4uZmlsdGVyUHJvcHModGhpcy5wcm9wcywgdHJ1ZSl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17bGF5ZXJDbGFzc31cbiAgICAgICAgICAgICAgZD17Z2V0VHJhcGV6b2lkUGF0aChjdXJyWCwgY3VyclksIGN1cnJVcHBlcldpZHRoLCBjdXJyTG93ZXJXaWR0aCwgY3VyckhlaWdodCl9XG4gICAgICAgICAgICAgIHJlZj17bm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BbmltYXRlPlxuICAgICAgICApfVxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB7XG4gICAgICBpZiAodHlwZW9mIGRvbWFpbiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihkb21haW4pO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGRvbWFpbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhpcy5kb21haW4oZG9tYWluKTtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJwb2xhdG9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCA9IFN5bWJvbChcImltcGxpY2l0XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBuZXcgTWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBfKSB7XG4gICAgICBjb25zdCBrZXkgPSB2YWx1ZSArIFwiXCI7XG4gICAgICBpZiAoaW5kZXguaGFzKGtleSkpIGNvbnRpbnVlO1xuICAgICAgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2godmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHIwID0gMCxcbiAgICAgIHIxID0gMSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcjEgPCByMCxcbiAgICAgICAgc3RhcnQgPSByZXZlcnNlID8gcjEgOiByMCxcbiAgICAgICAgc3RvcCA9IHJldmVyc2UgPyByMCA6IHIxO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChbcjAsIHIxXSA9IF8sIHIwID0gK3IwLCByMSA9ICtyMSwgcmVzY2FsZSgpKSA6IFtyMCwgcjFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIFtyMCwgcjFdID0gXywgcjAgPSArcjAsIHIxID0gK3IxLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgcGFkZGluZ091dGVyID0gK18pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gK18sIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoZG9tYWluKCksIFtyMCwgcjFdKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHJlc2NhbGUoKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGVwID0gLXN0ZXA7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmKSB7XG4gIGxldCBkZWx0YSA9IGY7XG4gIGxldCBjb21wYXJlID0gZjtcblxuICBpZiAoZi5sZW5ndGggPT09IDEpIHtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgICBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICBjb25zdCBpID0gbGVmdChhLCB4LCBsbywgaGkgLSAxKTtcbiAgICByZXR1cm4gaSA+IGxvICYmIGRlbHRhKGFbaSAtIDFdLCB4KSA+IC1kZWx0YShhW2ldLCB4KSA/IGkgLSAxIDogaTtcbiAgfVxuXG4gIHJldHVybiB7bGVmdCwgY2VudGVyLCByaWdodH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBudW1iZXJzKHZhbHVlcywgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiAoaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5IDogZ2VuZXJpY0FycmF5KShhLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSAqICgxIC0gdCkgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihhLCBiKSB7XG4gIHZhciB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChjbGFtcCAhPT0gaWRlbnRpdHkpIGNsYW1wID0gY2xhbXBlcihkb21haW5bMF0sIGRvbWFpbltuIC0gMV0pO1xuICAgIHBpZWNld2lzZSA9IG4gPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnRzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggPSBNYXRoLnJvdW5kKHgpKSA+PSAxZTIxXG4gICAgICA/IHgudG9Mb2NhbGVTdHJpbmcoXCJlblwiKS5yZXBsYWNlKC8sL2csIFwiXCIpXG4gICAgICA6IHgudG9TdHJpbmcoMTApO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsUGFydHMoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbFBhcnRzKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcbmltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogKHgsIHApID0+ICh4ICogMTAwKS50b0ZpeGVkKHApLFxuICBcImJcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMiksXG4gIFwiY1wiOiAoeCkgPT4geCArIFwiXCIsXG4gIFwiZFwiOiBmb3JtYXREZWNpbWFsLFxuICBcImVcIjogKHgsIHApID0+IHgudG9FeHBvbmVudGlhbChwKSxcbiAgXCJmXCI6ICh4LCBwKSA9PiB4LnRvRml4ZWQocCksXG4gIFwiZ1wiOiAoeCwgcCkgPT4geC50b1ByZWNpc2lvbihwKSxcbiAgXCJvXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpLFxuICBcInBcIjogKHgsIHApID0+IGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCksXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLFxuICBcInhcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwi4oiSXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weX0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXQuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgdmFyIGkwID0gMDtcbiAgICB2YXIgaTEgPSBkLmxlbmd0aCAtIDE7XG4gICAgdmFyIHN0YXJ0ID0gZFtpMF07XG4gICAgdmFyIHN0b3AgPSBkW2kxXTtcbiAgICB2YXIgcHJlc3RlcDtcbiAgICB2YXIgc3RlcDtcbiAgICB2YXIgbWF4SXRlciA9IDEwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuICAgIFxuICAgIHdoaWxlIChtYXhJdGVyLS0gPiAwKSB7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgICAgaWYgKHN0ZXAgPT09IHByZXN0ZXApIHtcbiAgICAgICAgZFtpMF0gPSBzdGFydFxuICAgICAgICBkW2kxXSA9IHN0b3BcbiAgICAgICAgcmV0dXJuIGRvbWFpbihkKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwcmVzdGVwID0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJpbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZGVudGl0eShkb21haW4pIHtcbiAgdmFyIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHg7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8sIG51bWJlciksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZGVudGl0eShkb21haW4pLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA/IEFycmF5LmZyb20oZG9tYWluLCBudW1iZXIpIDogWzAsIDFdO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZS5qc1wiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHAoeCkge1xuICByZXR1cm4gTWF0aC5leHAoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxvZ24oeCkge1xuICByZXR1cm4gLU1hdGgubG9nKC14KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXhwbih4KSB7XG4gIHJldHVybiAtTWF0aC5leHAoLXgpO1xufVxuXG5mdW5jdGlvbiBwb3cxMCh4KSB7XG4gIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xufVxuXG5mdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gcG93MTBcbiAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG59XG5cbmZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgIDogYmFzZSA9PT0gMTAgJiYgTWF0aC5sb2cxMFxuICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAtZigteCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dnaXNoKHRyYW5zZm9ybSkge1xuICB2YXIgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgYmFzZSA9IDEwLFxuICAgICAgbG9ncyxcbiAgICAgIHBvd3M7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkge1xuICAgICAgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZ24sIHRyYW5zZm9ybUV4cG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB1ID0gZFswXSxcbiAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgcjtcblxuICAgIGlmIChyID0gdiA8IHUpIGkgPSB1LCB1ID0gdiwgdiA9IGk7XG5cbiAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgIGogPSBsb2dzKHYpLFxuICAgICAgICBwLFxuICAgICAgICBrLFxuICAgICAgICB0LFxuICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50LFxuICAgICAgICB6ID0gW107XG5cbiAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICBpID0gTWF0aC5mbG9vcihpKSwgaiA9IE1hdGguY2VpbChqKTtcbiAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPD0gajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKDsgaSA8PSBqOyArK2kpIHtcbiAgICAgICAgZm9yIChrID0gYmFzZSAtIDEsIHAgPSBwb3dzKGkpOyBrID49IDE7IC0taykge1xuICAgICAgICAgIHQgPSBwICogaztcbiAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoei5sZW5ndGggKiAyIDwgbikgeiA9IHRpY2tzKHUsIHYsIG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gdGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtU3ltbG9nKGMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHgpICogTWF0aC5sb2cxcChNYXRoLmFicyh4IC8gYykpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TeW1leHAoYykge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLmV4cG0xKE1hdGguYWJzKHgpKSAqIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzeW1sb2dpc2godHJhbnNmb3JtKSB7XG4gIHZhciBjID0gMSwgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtU3ltbG9nKGMpLCB0cmFuc2Zvcm1TeW1leHAoYykpO1xuXG4gIHNjYWxlLmNvbnN0YW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjID0gK18pLCB0cmFuc2Zvcm1TeW1leHAoYykpIDogYztcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXIuanNcIjtcbmltcG9ydCB7Y29weSwgaWRlbnRpdHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb3coZXhwb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3FydCh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC1NYXRoLnNxcnQoLXgpIDogTWF0aC5zcXJ0KHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXVhcmUoeCkge1xuICByZXR1cm4geCA8IDAgPyAteCAqIHggOiB4ICogeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvd2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSksXG4gICAgICBleHBvbmVudCA9IDE7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICByZXR1cm4gZXhwb25lbnQgPT09IDEgPyB0cmFuc2Zvcm0oaWRlbnRpdHksIGlkZW50aXR5KVxuICAgICAgICA6IGV4cG9uZW50ID09PSAwLjUgPyB0cmFuc2Zvcm0odHJhbnNmb3JtU3FydCwgdHJhbnNmb3JtU3F1YXJlKVxuICAgICAgICA6IHRyYW5zZm9ybSh0cmFuc2Zvcm1Qb3coZXhwb25lbnQpLCB0cmFuc2Zvcm1Qb3coMSAvIGV4cG9uZW50KSk7XG4gIH1cblxuICBzY2FsZS5leHBvbmVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCByZXNjYWxlKCkpIDogZXhwb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsImltcG9ydCBjb250aW51b3VzIGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0LmpzXCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5mdW5jdGlvbiBzcXVhcmUoeCkge1xuICByZXR1cm4gTWF0aC5zaWduKHgpICogeCAqIHg7XG59XG5cbmZ1bmN0aW9uIHVuc3F1YXJlKHgpIHtcbiAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGguc3FydChNYXRoLmFicyh4KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhZGlhbCgpIHtcbiAgdmFyIHNxdWFyZWQgPSBjb250aW51b3VzKCksXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICB2YXIgeSA9IHVuc3F1YXJlKHNxdWFyZWQoeCkpO1xuICAgIHJldHVybiBpc05hTih5KSA/IHVua25vd24gOiByb3VuZCA/IE1hdGgucm91bmQoeSkgOiB5O1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBzcXVhcmVkLmludmVydChzcXVhcmUoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzcXVhcmVkLmRvbWFpbihfKSwgc2NhbGUpIDogc3F1YXJlZC5kb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzcXVhcmVkLnJhbmdlKChyYW5nZSA9IEFycmF5LmZyb20oXywgbnVtYmVyKSkubWFwKHNxdWFyZSkpLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHNjYWxlLnJhbmdlKF8pLnJvdW5kKHRydWUpO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCBzY2FsZSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzcXVhcmVkLmNsYW1wKF8pLCBzY2FsZSkgOiBzcXVhcmVkLmNsYW1wKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHJhZGlhbChzcXVhcmVkLmRvbWFpbigpLCByYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAuY2xhbXAoc3F1YXJlZC5jbGFtcCgpKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXgodmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtYXg7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGxcbiAgICAgICAgICAmJiAobWF4IDwgdmFsdWUgfHwgKG1heCA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGxldCBtaW47XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGxcbiAgICAgICAgICAmJiAobWluID4gdmFsdWUgfHwgKG1pbiA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGxcbiAgICAgICAgICAmJiAobWluID4gdmFsdWUgfHwgKG1pbiA9PT0gdW5kZWZpbmVkICYmIHZhbHVlID49IHZhbHVlKSkpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9xdWlja3NlbGVjdFxuLy8gSVNDIGxpY2Vuc2UsIENvcHlyaWdodCAyMDE4IFZsYWRpbWlyIEFnYWZvbmtpbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1aWNrc2VsZWN0KGFycmF5LCBrLCBsZWZ0ID0gMCwgcmlnaHQgPSBhcnJheS5sZW5ndGggLSAxLCBjb21wYXJlID0gYXNjZW5kaW5nKSB7XG4gIHdoaWxlIChyaWdodCA+IGxlZnQpIHtcbiAgICBpZiAocmlnaHQgLSBsZWZ0ID4gNjAwKSB7XG4gICAgICBjb25zdCBuID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgIGNvbnN0IG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICBjb25zdCB6ID0gTWF0aC5sb2cobik7XG4gICAgICBjb25zdCBzID0gMC41ICogTWF0aC5leHAoMiAqIHogLyAzKTtcbiAgICAgIGNvbnN0IHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgY29uc3QgbmV3TGVmdCA9IE1hdGgubWF4KGxlZnQsIE1hdGguZmxvb3IoayAtIG0gKiBzIC8gbiArIHNkKSk7XG4gICAgICBjb25zdCBuZXdSaWdodCA9IE1hdGgubWluKHJpZ2h0LCBNYXRoLmZsb29yKGsgKyAobiAtIG0pICogcyAvIG4gKyBzZCkpO1xuICAgICAgcXVpY2tzZWxlY3QoYXJyYXksIGssIG5ld0xlZnQsIG5ld1JpZ2h0LCBjb21wYXJlKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ID0gYXJyYXlba107XG4gICAgbGV0IGkgPSBsZWZ0O1xuICAgIGxldCBqID0gcmlnaHQ7XG5cbiAgICBzd2FwKGFycmF5LCBsZWZ0LCBrKTtcbiAgICBpZiAoY29tcGFyZShhcnJheVtyaWdodF0sIHQpID4gMCkgc3dhcChhcnJheSwgbGVmdCwgcmlnaHQpO1xuXG4gICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICBzd2FwKGFycmF5LCBpLCBqKSwgKytpLCAtLWo7XG4gICAgICB3aGlsZSAoY29tcGFyZShhcnJheVtpXSwgdCkgPCAwKSArK2k7XG4gICAgICB3aGlsZSAoY29tcGFyZShhcnJheVtqXSwgdCkgPiAwKSAtLWo7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhcmUoYXJyYXlbbGVmdF0sIHQpID09PSAwKSBzd2FwKGFycmF5LCBsZWZ0LCBqKTtcbiAgICBlbHNlICsraiwgc3dhcChhcnJheSwgaiwgcmlnaHQpO1xuXG4gICAgaWYgKGogPD0gaykgbGVmdCA9IGogKyAxO1xuICAgIGlmIChrIDw9IGopIHJpZ2h0ID0gaiAtIDE7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBzd2FwKGFycmF5LCBpLCBqKSB7XG4gIGNvbnN0IHQgPSBhcnJheVtpXTtcbiAgYXJyYXlbaV0gPSBhcnJheVtqXTtcbiAgYXJyYXlbal0gPSB0O1xufVxuIiwiaW1wb3J0IG1heCBmcm9tIFwiLi9tYXguanNcIjtcbmltcG9ydCBtaW4gZnJvbSBcIi4vbWluLmpzXCI7XG5pbXBvcnQgcXVpY2tzZWxlY3QgZnJvbSBcIi4vcXVpY2tzZWxlY3QuanNcIjtcbmltcG9ydCBudW1iZXIsIHtudW1iZXJzfSBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpbGUodmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIHZhbHVlcyA9IEZsb2F0NjRBcnJheS5mcm9tKG51bWJlcnModmFsdWVzLCB2YWx1ZW9mKSk7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuIG1pbih2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gbWF4KHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gbWF4KHF1aWNrc2VsZWN0KHZhbHVlcywgaTApLnN1YmFycmF5KDAsIGkwICsgMSkpLFxuICAgICAgdmFsdWUxID0gbWluKHZhbHVlcy5zdWJhcnJheShpMCArIDEpKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFudGlsZVNvcnRlZCh2YWx1ZXMsIHAsIHZhbHVlb2YgPSBudW1iZXIpIHtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImltcG9ydCB7YXNjZW5kaW5nLCBiaXNlY3QsIHF1YW50aWxlU29ydGVkIGFzIHRocmVzaG9sZH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFudGlsZSgpIHtcbiAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHRocmVzaG9sZHMgPSBbXSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBNYXRoLm1heCgxLCByYW5nZS5sZW5ndGgpO1xuICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aHJlc2hvbGRzW2kgLSAxXSA9IHRocmVzaG9sZChkb21haW4sIGkgLyBuKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogcmFuZ2VbYmlzZWN0KHRocmVzaG9sZHMsIHgpXTtcbiAgfVxuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXSA6IFtcbiAgICAgIGkgPiAwID8gdGhyZXNob2xkc1tpIC0gMV0gOiBkb21haW5bMF0sXG4gICAgICBpIDwgdGhyZXNob2xkcy5sZW5ndGggPyB0aHJlc2hvbGRzW2ldIDogZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXVxuICAgIF07XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdO1xuICAgIGZvciAobGV0IGQgb2YgXykgaWYgKGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpemUoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICBuID0gMSxcbiAgICAgIGRvbWFpbiA9IFswLjVdLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA8PSB4ID8gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3gwLCB4MV0gPSBfLCB4MCA9ICt4MCwgeDEgPSAreDEsIHJlc2NhbGUoKSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gKHJhbmdlID0gQXJyYXkuZnJvbShfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dXG4gICAgICAgIDogaSA8IDEgPyBbeDAsIGRvbWFpblswXV1cbiAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgIDogW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUudGhyZXNob2xkcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aXplKClcbiAgICAgICAgLmRvbWFpbihbeDAsIHgxXSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGxpbmVhcmlzaChzY2FsZSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJlc2hvbGQoKSB7XG4gIHZhciBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bixcbiAgICAgIG4gPSAxO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA8PSB4ID8gcmFuZ2VbYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/IG5ldyBEYXRlIDogbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHllYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxueWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHllYXI7XG5leHBvcnQgdmFyIHllYXJzID0geWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgbW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9udGg7XG5leHBvcnQgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChcbiAgZGF0ZSA9PiBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApLFxuICAoZGF0ZSwgc3RlcCkgPT4gZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCksXG4gIChzdGFydCwgZW5kKSA9PiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5LFxuICBkYXRlID0+IGRhdGUuZ2V0RGF0ZSgpIC0gMVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IGZvcm1hdFllYXJJU08sXG4gICAgXCJHXCI6IGZvcm1hdEZ1bGxZZWFySVNPLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRVVENZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRVVENGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJnXCI6IHBhcnNlWWVhcixcbiAgICBcIkdcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgTWFwKG5hbWVzLm1hcCgobmFtZSwgaSkgPT4gW25hbWUudG9Mb3dlckNhc2UoKSwgaV0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGRJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcklTTyhkLCBwKSB7XG4gIGQgPSBkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIFVUQ2RJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7YmlzZWN0b3IsIHRpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7dGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lTWlsbGlzZWNvbmR9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge3RpbWVGb3JtYXR9IGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZS5qc1wiO1xuXG52YXIgZHVyYXRpb25TZWNvbmQgPSAxMDAwLFxuICAgIGR1cmF0aW9uTWludXRlID0gZHVyYXRpb25TZWNvbmQgKiA2MCxcbiAgICBkdXJhdGlvbkhvdXIgPSBkdXJhdGlvbk1pbnV0ZSAqIDYwLFxuICAgIGR1cmF0aW9uRGF5ID0gZHVyYXRpb25Ib3VyICogMjQsXG4gICAgZHVyYXRpb25XZWVrID0gZHVyYXRpb25EYXkgKiA3LFxuICAgIGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSAqIDMwLFxuICAgIGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5ICogMzY1O1xuXG5mdW5jdGlvbiBkYXRlKHQpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKHQpO1xufVxuXG5mdW5jdGlvbiBudW1iZXIodCkge1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKCksXG4gICAgICBpbnZlcnQgPSBzY2FsZS5pbnZlcnQsXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgdmFyIGZvcm1hdE1pbGxpc2Vjb25kID0gZm9ybWF0KFwiLiVMXCIpLFxuICAgICAgZm9ybWF0U2Vjb25kID0gZm9ybWF0KFwiOiVTXCIpLFxuICAgICAgZm9ybWF0TWludXRlID0gZm9ybWF0KFwiJUk6JU1cIiksXG4gICAgICBmb3JtYXRIb3VyID0gZm9ybWF0KFwiJUkgJXBcIiksXG4gICAgICBmb3JtYXREYXkgPSBmb3JtYXQoXCIlYSAlZFwiKSxcbiAgICAgIGZvcm1hdFdlZWsgPSBmb3JtYXQoXCIlYiAlZFwiKSxcbiAgICAgIGZvcm1hdE1vbnRoID0gZm9ybWF0KFwiJUJcIiksXG4gICAgICBmb3JtYXRZZWFyID0gZm9ybWF0KFwiJVlcIik7XG5cbiAgdmFyIHRpY2tJbnRlcnZhbHMgPSBbXG4gICAgW3NlY29uZCwgIDEsICAgICAgZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsICA1LCAgNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAxNSwgMTUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMzAsIDMwICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFttaW51dGUsICAxLCAgICAgIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAgNSwgIDUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMTUsIDE1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDMwLCAzMCAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbICBob3VyLCAgMSwgICAgICBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDMsICAzICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICA2LCAgNiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAxMiwgMTIgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgIGRheSwgIDEsICAgICAgZHVyYXRpb25EYXkgICBdLFxuICAgIFsgICBkYXksICAyLCAgMiAqIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICB3ZWVrLCAgMSwgICAgICBkdXJhdGlvbldlZWsgIF0sXG4gICAgWyBtb250aCwgIDEsICAgICAgZHVyYXRpb25Nb250aCBdLFxuICAgIFsgbW9udGgsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcbiAgICBbICB5ZWFyLCAgMSwgICAgICBkdXJhdGlvblllYXIgIF1cbiAgXTtcblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICByZXR1cm4gKHNlY29uZChkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICA6IG1pbnV0ZShkYXRlKSA8IGRhdGUgPyBmb3JtYXRTZWNvbmRcbiAgICAgICAgOiBob3VyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICA6IGRheShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXG4gICAgICAgIDogbW9udGgoZGF0ZSkgPCBkYXRlID8gKHdlZWsoZGF0ZSkgPCBkYXRlID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlaylcbiAgICAgICAgOiB5ZWFyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHN0YXJ0LCBzdG9wKSB7XG4gICAgaWYgKGludGVydmFsID09IG51bGwpIGludGVydmFsID0gMTA7XG5cbiAgICAvLyBJZiBhIGRlc2lyZWQgdGljayBjb3VudCBpcyBzcGVjaWZpZWQsIHBpY2sgYSByZWFzb25hYmxlIHRpY2sgaW50ZXJ2YWxcbiAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGludGVydmFsIGlzIGFscmVhZHkgYSB0aW1lIGludGVydmFsIGFuZCB1c2UgaXQuXG4gICAgaWYgKHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCxcbiAgICAgICAgICBpID0gYmlzZWN0b3IoZnVuY3Rpb24oaSkgeyByZXR1cm4gaVsyXTsgfSkucmlnaHQodGlja0ludGVydmFscywgdGFyZ2V0KSxcbiAgICAgICAgICBzdGVwO1xuICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgaW50ZXJ2YWwpO1xuICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgaSA9IHRpY2tJbnRlcnZhbHNbdGFyZ2V0IC8gdGlja0ludGVydmFsc1tpIC0gMV1bMl0gPCB0aWNrSW50ZXJ2YWxzW2ldWzJdIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpLCAxKTtcbiAgICAgICAgaW50ZXJ2YWwgPSBtaWxsaXNlY29uZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnRlcnZhbC5ldmVyeShzdGVwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKEFycmF5LmZyb20oXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHIgPSB0MSA8IHQwLFxuICAgICAgICB0O1xuICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICB0ID0gdGlja0ludGVydmFsKGludGVydmFsLCB0MCwgdDEpO1xuICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIChpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgZFswXSwgZFtkLmxlbmd0aCAtIDFdKSlcbiAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGltZSgpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IHtjYWxlbmRhcn0gZnJvbSBcIi4vdGltZS5qc1wiO1xuaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuaW1wb3J0IHt1dGNZZWFyLCB1dGNNb250aCwgdXRjV2VlaywgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHV0Y1NlY29uZCwgdXRjTWlsbGlzZWNvbmR9IGZyb20gXCJkMy10aW1lXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1dGNUaW1lKCkge1xuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGNhbGVuZGFyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgdXRjU2Vjb25kLCB1dGNNaWxsaXNlY29uZCwgdXRjRm9ybWF0KS5kb21haW4oW0RhdGUuVVRDKDIwMDAsIDAsIDEpLCBEYXRlLlVUQygyMDAwLCAwLCAyKV0pLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXQuanNcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXIuanNcIjtcbmltcG9ydCB7bG9nZ2lzaH0gZnJvbSBcIi4vbG9nLmpzXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nLmpzXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93LmpzXCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgdDAsXG4gICAgICB0MSxcbiAgICAgIGsxMCxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5LFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IGludGVycG9sYXRvcihrMTAgPT09IDAgPyAwLjUgOiAoeCA9ICh0cmFuc2Zvcm0oeCkgLSB0MCkgKiBrMTAsIGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgeCkpIDogeCkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKFt4MCwgeDFdID0gXywgdDAgPSB0cmFuc2Zvcm0oeDAgPSAreDApLCB0MSA9IHRyYW5zZm9ybSh4MSA9ICt4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBmdW5jdGlvbiByYW5nZShpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgcjAsIHIxO1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3IwLCByMV0gPSBfLCBpbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0ZShyMCwgcjEpLCBzY2FsZSkgOiBbaW50ZXJwb2xhdG9yKDApLCBpbnRlcnBvbGF0b3IoMSldO1xuICAgIH07XG4gIH1cblxuICBzY2FsZS5yYW5nZSA9IHJhbmdlKGludGVycG9sYXRlKTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gcmFuZ2UoaW50ZXJwb2xhdGVSb3VuZCk7XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJpbXBvcnQge2FzY2VuZGluZywgYmlzZWN0LCBxdWFudGlsZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbFF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgaWYgKCFpc05hTih4ID0gK3gpKSByZXR1cm4gaW50ZXJwb2xhdG9yKChiaXNlY3QoZG9tYWluLCB4LCAxKSAtIDEpIC8gKGRvbWFpbi5sZW5ndGggLSAxKSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yIChsZXQgZCBvZiBfKSBpZiAoZCAhPSBudWxsICYmICFpc05hTihkID0gK2QpKSBkb21haW4ucHVzaChkKTtcbiAgICBkb21haW4uc29ydChhc2NlbmRpbmcpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvbWFpbi5tYXAoKGQsIGkpID0+IGludGVycG9sYXRvcihpIC8gKGRvbWFpbi5sZW5ndGggLSAxKSkpO1xuICB9O1xuXG4gIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7bGVuZ3RoOiBuICsgMX0sIChfLCBpKSA9PiBxdWFudGlsZShkb21haW4sIGkgLyBuKSk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXF1ZW50aWFsUXVhbnRpbGUoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyB2YWx1ZX0gZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGllY2V3aXNlKGludGVycG9sYXRlLCB2YWx1ZXMpIHtcbiAgaWYgKHZhbHVlcyA9PT0gdW5kZWZpbmVkKSB2YWx1ZXMgPSBpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUgPSB2YWx1ZTtcbiAgdmFyIGkgPSAwLCBuID0gdmFsdWVzLmxlbmd0aCAtIDEsIHYgPSB2YWx1ZXNbMF0sIEkgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gIHdoaWxlIChpIDwgbikgSVtpXSA9IGludGVycG9sYXRlKHYsIHYgPSB2YWx1ZXNbKytpXSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICo9IG4pKSk7XG4gICAgcmV0dXJuIElbaV0odCAtIGkpO1xuICB9O1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGVSb3VuZCwgcGllY2V3aXNlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXMuanNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2cuanNcIjtcbmltcG9ydCB7Y29weX0gZnJvbSBcIi4vc2VxdWVudGlhbC5qc1wiO1xuaW1wb3J0IHtzeW1sb2dpc2h9IGZyb20gXCIuL3N5bWxvZy5qc1wiO1xuaW1wb3J0IHtwb3dpc2h9IGZyb20gXCIuL3Bvdy5qc1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMC41LFxuICAgICAgeDIgPSAxLFxuICAgICAgcyA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICBrMTAsXG4gICAgICBrMjEsXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAoeCA9IDAuNSArICgoeCA9ICt0cmFuc2Zvcm0oeCkpIC0gdDEpICogKHMgKiB4IDwgcyAqIHQxID8gazEwIDogazIxKSwgaW50ZXJwb2xhdG9yKGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgeCkpIDogeCkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKFt4MCwgeDEsIHgyXSA9IF8sIHQwID0gdHJhbnNmb3JtKHgwID0gK3gwKSwgdDEgPSB0cmFuc2Zvcm0oeDEgPSAreDEpLCB0MiA9IHRyYW5zZm9ybSh4MiA9ICt4MiksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAwLjUgLyAodDEgLSB0MCksIGsyMSA9IHQxID09PSB0MiA/IDAgOiAwLjUgLyAodDIgLSB0MSksIHMgPSB0MSA8IHQwID8gLTEgOiAxLCBzY2FsZSkgOiBbeDAsIHgxLCB4Ml07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmFuZ2UoaW50ZXJwb2xhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oXykge1xuICAgICAgdmFyIHIwLCByMSwgcjI7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChbcjAsIHIxLCByMl0gPSBfLCBpbnRlcnBvbGF0b3IgPSBwaWVjZXdpc2UoaW50ZXJwb2xhdGUsIFtyMCwgcjEsIHIyXSksIHNjYWxlKSA6IFtpbnRlcnBvbGF0b3IoMCksIGludGVycG9sYXRvcigwLjUpLCBpbnRlcnBvbGF0b3IoMSldO1xuICAgIH07XG4gIH1cblxuICBzY2FsZS5yYW5nZSA9IHJhbmdlKGludGVycG9sYXRlKTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gcmFuZ2UoaW50ZXJwb2xhdGVSb3VuZCk7XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIHQyID0gdCh4MiksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAwLjUgLyAodDEgLSB0MCksIGsyMSA9IHQxID09PSB0MiA/IDAgOiAwLjUgLyAodDIgLSB0MSksIHMgPSB0MSA8IHQwID8gLTEgOiAxO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGl2ZXJnaW5nKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyKCkpLmRvbWFpbihbMC4xLCAxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nTG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmVyZ2luZ1N5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nUG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdQb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdTcXJ0KCkge1xuICByZXR1cm4gZGl2ZXJnaW5nUG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbnRlcnNlY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlSW50ZXJzZWN0aW9uJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGNhc3RBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL19jYXN0QXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMl1cbiAqL1xudmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdGlvbjtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgYmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vX2Jhc2VGaWx0ZXInKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKiBAc2VlIF8ucmVqZWN0XG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICpcbiAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAqL1xuZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWx0ZXI7XG4iLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYywgdmFsaWQtanNkb2MgKi9cclxudmFyIE1hcFNoaW0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBpbmRleCBpbiBwcm92aWRlZCBhcnJheSB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheT59IGFyclxyXG4gICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIGFyci5zb21lKGZ1bmN0aW9uIChlbnRyeSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5WzBdID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzXzEucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW50cmllc19fLmxlbmd0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX19lbnRyaWVzX19baW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW50cmllc19fW2luZGV4XVsxXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5wdXNoKFtrZXksIHZhbHVlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuX19lbnRyaWVzX187XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KGVudHJpZXMsIGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18uc3BsaWNlKDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gdm9pZCAwKSB7IGN0eCA9IG51bGw7IH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX19lbnRyaWVzX187IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XHJcbiAgICB9KCkpO1xyXG59KSgpO1xuXG4vKipcclxuICogRGV0ZWN0cyB3aGV0aGVyIHdpbmRvdyBhbmQgZG9jdW1lbnQgb2JqZWN0cyBhcmUgYXZhaWxhYmxlIGluIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAqL1xyXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgPT09IGRvY3VtZW50O1xuXG4vLyBSZXR1cm5zIGdsb2JhbCBvYmplY3Qgb2YgYSBjdXJyZW50IGVudmlyb25tZW50LlxyXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXHJcbnZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcclxuICAgICAgICAvLyBhbiBcIkludmFsaWQgY2FsbGluZyBvYmplY3RcIiBlcnJvciBpZiByQUYgaXMgaW52b2tlZCB3aXRob3V0IHRoZSBnbG9iYWxcclxuICAgICAgICAvLyBvYmplY3Qgb24gdGhlIGxlZnQgaGFuZCBzaWRlLlxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKERhdGUubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xyXG59KSgpO1xuXG4vLyBEZWZpbmVzIG1pbmltdW0gdGltZW91dCBiZWZvcmUgYWRkaW5nIGEgdHJhaWxpbmcgY2FsbC5cclxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXHJcbmZ1bmN0aW9uIHRocm90dGxlIChjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgIHZhciBsZWFkaW5nQ2FsbCA9IGZhbHNlLCB0cmFpbGluZ0NhbGwgPSBmYWxzZSwgbGFzdENhbGxUaW1lID0gMDtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIHNjaGVkdWxlcyBuZXcgaW52b2NhdGlvbiBpZlxyXG4gICAgICogdGhlIFwicHJveHlcIiB3YXMgY2FsbGVkIGR1cmluZyBjdXJyZW50IHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xyXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBsZWFkaW5nQ2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIHByb3h5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGltZW91dENhbGxiYWNrKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSQxKHJlc29sdmVQZW5kaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwcm94eSgpIHtcclxuICAgICAgICB2YXIgdGltZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cclxuICAgICAgICAgICAgaWYgKHRpbWVTdGFtcCAtIGxhc3RDYWxsVGltZSA8IHRyYWlsaW5nVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciBcInRyYW5zaXRpb25zXCIgd2hpY2ggbmV2ZXIgYWN0dWFsbHkgc3RhcnRcclxuICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgc28gdGhlcmUgaXMgYSBjaGFuY2UgdGhhdCB3ZSBtaWdodCBtaXNzIG9uZSBpZiBjaGFuZ2VcclxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aW1lb3V0Q2FsbGJhY2ssIGRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxyXG52YXIgUkVGUkVTSF9ERUxBWSA9IDIwO1xyXG4vLyBBIGxpc3Qgb2Ygc3Vic3RyaW5ncyBvZiBDU1MgcHJvcGVydGllcyB1c2VkIHRvIGZpbmQgdHJhbnNpdGlvbiBldmVudHMgdGhhdFxyXG4vLyBtaWdodCBhZmZlY3QgZGltZW5zaW9ucyBvZiBvYnNlcnZlZCBlbGVtZW50cy5cclxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XHJcbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxyXG52YXIgbXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCA9IHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJztcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBjb250cm9sbGVyIGNsYXNzIHdoaWNoIGhhbmRsZXMgdXBkYXRlcyBvZiBSZXNpemVPYnNlcnZlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgRE9NIGxpc3RlbmVycyBoYXZlIGJlZW4gYWRkZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZWxscyB0aGF0IGNvbnRyb2xsZXIgaGFzIHN1YnNjcmliZWQgZm9yIE11dGF0aW9uIEV2ZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TXV0YXRpb25PYnNlcnZlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2ZXJTUEk+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kXyA9IHRoaXMub25UcmFuc2l0aW9uRW5kXy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IHRocm90dGxlKHRoaXMucmVmcmVzaC5iaW5kKHRoaXMpLCBSRUZSRVNIX0RFTEFZKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvYnNlcnZlciB0byBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICBpZiAoIX50aGlzLm9ic2VydmVyc18uaW5kZXhPZihvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcclxuICAgICAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG9ic2VydmVyIGlmIGl0J3MgcHJlc2VudCBpbiByZWdpc3RyeS5cclxuICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIGlmIGNvbnRyb2xsZXIgaGFzIG5vIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMubGVuZ3RoICYmIHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy4gSXQgd2lsbCBjb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaW5zb2ZhclxyXG4gICAgICogaXQgZGV0ZWN0cyBjaGFuZ2VzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXNEZXRlY3RlZCA9IHRoaXMudXBkYXRlT2JzZXJ2ZXJzXygpO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxyXG4gICAgICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXHJcbiAgICAgICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGV2ZXJ5IG9ic2VydmVyIGZyb20gb2JzZXJ2ZXJzIGxpc3QgYW5kIG5vdGlmaWVzIHRoZW0gb2YgcXVldWVkXHJcbiAgICAgKiBlbnRyaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiBpdCdzIGVsZW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gRGVsaXZlciBub3RpZmljYXRpb25zIGluIGEgc2VwYXJhdGUgY3ljbGUgaW4gb3JkZXIgdG8gYXZvaWQgYW55XHJcbiAgICAgICAgLy8gY29sbGlzaW9ucyBiZXR3ZWVuIG9ic2VydmVycywgZS5nLiB3aGVuIG11bHRpcGxlIGluc3RhbmNlcyBvZlxyXG4gICAgICAgIC8vIFJlc2l6ZU9ic2VydmVyIGFyZSB0cmFja2luZyB0aGUgc2FtZSBlbGVtZW50IGFuZCB0aGUgY2FsbGJhY2sgb2Ygb25lXHJcbiAgICAgICAgLy8gb2YgdGhlbSBjaGFuZ2VzIGNvbnRlbnQgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgdGFyZ2V0LiBTb21ldGltZXNcclxuICAgICAgICAvLyB0aGlzIG1heSByZXN1bHQgaW4gbm90aWZpY2F0aW9ucyBiZWluZyBibG9ja2VkIGZvciB0aGUgcmVzdCBvZiBvYnNlcnZlcnMuXHJcbiAgICAgICAgYWN0aXZlT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBvYnNlcnZlci5icm9hZGNhc3RBY3RpdmUoKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFjdGl2ZU9ic2VydmVycy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgYWRkZWQuXHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcclxuICAgICAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXHJcbiAgICAgICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAobXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5kaXNjb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHJ1bm5pbmcgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiBsaXN0ZW5lcnNcclxuICAgICAgICAvLyBoYXZlIGJlZW4gYWxyZWFkeSByZW1vdmVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8ICF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0aW9uRXZlbnR9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EucHJvcGVydHlOYW1lLCBwcm9wZXJ0eU5hbWUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgICAgICAvLyBEZXRlY3Qgd2hldGhlciB0cmFuc2l0aW9uIG1heSBhZmZlY3QgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50LlxyXG4gICAgICAgIHZhciBpc1JlZmxvd1Byb3BlcnR5ID0gdHJhbnNpdGlvbktleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5wcm9wZXJ0eU5hbWUuaW5kZXhPZihrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgdGhlIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlXykge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXyA9IG5ldyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGUge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogRGVmaW5lcyBub24td3JpdGFibGUvZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBwcm92aWRlZCB0YXJnZXQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gT2JqZWN0IGZvciB3aGljaCB0byBkZWZpbmUgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gUHJvcGVydGllcyB0byBiZSBkZWZpbmVkLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUYXJnZXQgb2JqZWN0LlxyXG4gKi9cclxudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHByb3BzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHNba2V5XSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59KTtcblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAvLyBBc3N1bWUgdGhhdCB0aGUgZWxlbWVudCBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB3aGljaCBtZWFucyB0aGF0IGl0XHJcbiAgICAvLyBoYXMgdGhlIFwib3duZXJEb2N1bWVudFwiIHByb3BlcnR5IGZyb20gd2hpY2ggd2UgY2FuIHJldHJpZXZlIGFcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cclxuICAgIHZhciBvd25lckdsb2JhbCA9IHRhcmdldCAmJiB0YXJnZXQub3duZXJEb2N1bWVudCAmJiB0YXJnZXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgIC8vIFJldHVybiB0aGUgbG9jYWwgZ2xvYmFsIG9iamVjdCBpZiBpdCdzIG5vdCBwb3NzaWJsZSBleHRyYWN0IG9uZSBmcm9tXHJcbiAgICAvLyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xyXG59KTtcblxuLy8gUGxhY2Vob2xkZXIgb2YgYW4gZW1wdHkgY29udGVudCByZWN0YW5nbGUuXHJcbnZhciBlbXB0eVJlY3QgPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHByb3ZpZGVkIHN0cmluZyB0byBhIG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIGJvcmRlcnMgc2l6ZSBmcm9tIHByb3ZpZGVkIHN0eWxlcy5cclxuICpcclxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHBvc2l0aW9ucyAtIEJvcmRlcnMgcG9zaXRpb25zICh0b3AsIHJpZ2h0LCAuLi4pXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgcG9zaXRpb25zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzWydib3JkZXItJyArIHBvc2l0aW9uICsgJy13aWR0aCddO1xyXG4gICAgICAgIHJldHVybiBzaXplICsgdG9GbG9hdCh2YWx1ZSk7XHJcbiAgICB9LCAwKTtcclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFBhZGRpbmdzKHN0eWxlcykge1xyXG4gICAgdmFyIHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XHJcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgcG9zaXRpb25zXzEgPSBwb3NpdGlvbnM7IF9pIDwgcG9zaXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gcG9zaXRpb25zXzFbX2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xyXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhZGRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIFNWRyBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1NWR0dyYXBoaWNzRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkc1xyXG4gKiAgICAgIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgdmFyIGJib3ggPSB0YXJnZXQuZ2V0QkJveCgpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KDAsIDAsIGJib3gud2lkdGgsIGJib3guaGVpZ2h0KTtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBIVE1MRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBmb3Igd2hpY2ggdG8gY2FsY3VsYXRlIHRoZSBjb250ZW50IHJlY3RhbmdsZS5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIC8vIENsaWVudCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGNhbid0IGJlXHJcbiAgICAvLyB1c2VkIGV4Y2x1c2l2ZWx5IGFzIHRoZXkgcHJvdmlkZSByb3VuZGVkIHZhbHVlcy5cclxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcclxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxyXG4gICAgLy8gZGV0YWNoZWQgZWxlbWVudHMuIFRob3VnaCBlbGVtZW50cyB3aXRoIHdpZHRoICYgaGVpZ2h0IHByb3BlcnRpZXMgbGVzc1xyXG4gICAgLy8gdGhhbiAwLjUgd2lsbCBiZSBkaXNjYXJkZWQgYXMgd2VsbC5cclxuICAgIC8vXHJcbiAgICAvLyBXaXRob3V0IGl0IHdlIHdvdWxkIG5lZWQgdG8gaW1wbGVtZW50IHNlcGFyYXRlIG1ldGhvZHMgZm9yIGVhY2ggb2ZcclxuICAgIC8vIHRob3NlIGNhc2VzIGFuZCBpdCdzIG5vdCBwb3NzaWJsZSB0byBwZXJmb3JtIGEgcHJlY2lzZSBhbmQgcGVyZm9ybWFuY2VcclxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxyXG4gICAgLy8gZ2l2ZXMgd3JvbmcgcmVzdWx0cyBmb3IgZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBsZXNzIHRoYW4gMC41LlxyXG4gICAgaWYgKCFjbGllbnRXaWR0aCAmJiAhY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIHZhciBzdHlsZXMgPSBnZXRXaW5kb3dPZih0YXJnZXQpLmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcclxuICAgIHZhciBwYWRkaW5ncyA9IGdldFBhZGRpbmdzKHN0eWxlcyk7XHJcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XHJcbiAgICB2YXIgdmVydFBhZCA9IHBhZGRpbmdzLnRvcCArIHBhZGRpbmdzLmJvdHRvbTtcclxuICAgIC8vIENvbXB1dGVkIHN0eWxlcyBvZiB3aWR0aCAmIGhlaWdodCBhcmUgYmVpbmcgdXNlZCBiZWNhdXNlIHRoZXkgYXJlIHRoZVxyXG4gICAgLy8gb25seSBkaW1lbnNpb25zIGF2YWlsYWJsZSB0byBKUyB0aGF0IGNvbnRhaW4gbm9uLXJvdW5kZWQgdmFsdWVzLiBJdCBjb3VsZFxyXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxyXG4gICAgLy8gYWZmZWN0ZWQgYnkgQ1NTIHRyYW5zZm9ybWF0aW9ucyBsZXQgYWxvbmUgcGFkZGluZ3MsIGJvcmRlcnMgYW5kIHNjcm9sbCBiYXJzLlxyXG4gICAgdmFyIHdpZHRoID0gdG9GbG9hdChzdHlsZXMud2lkdGgpLCBoZWlnaHQgPSB0b0Zsb2F0KHN0eWxlcy5oZWlnaHQpO1xyXG4gICAgLy8gV2lkdGggJiBoZWlnaHQgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB3aGVuIHRoZSAnYm9yZGVyLWJveCcgYm94XHJcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cclxuICAgIGlmIChzdHlsZXMuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcclxuICAgICAgICAvLyBGb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgcmVxdWlyZWQgdG8gaGFuZGxlIEludGVybmV0IEV4cGxvcmVyIHdoaWNoXHJcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gV2UgY2FuIHNheSB0aGF0IGlmIENTUyBkaW1lbnNpb25zICsgcGFkZGluZ3MgYXJlIGVxdWFsIHRvIHRoZSBcImNsaWVudFwiXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XHJcbiAgICAgICAgLy8gYW55dGhpbmcsIG9yIGFuIGVsZW1lbnQgbWVyZWx5IGRvZXNuJ3QgaGF2ZSBwYWRkaW5ncy9ib3JkZXJzIHN0eWxlcy5cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh3aWR0aCArIGhvcml6UGFkKSAhPT0gY2xpZW50V2lkdGgpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpICE9PSBjbGllbnRIZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3RvcCcsICdib3R0b20nKSArIHZlcnRQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gRm9sbG93aW5nIHN0ZXBzIGNhbid0IGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50J3Mgcm9vdCBlbGVtZW50IGFzIGl0c1xyXG4gICAgLy8gY2xpZW50W1dpZHRoL0hlaWdodF0gcHJvcGVydGllcyByZXByZXNlbnQgdmlld3BvcnQgYXJlYSBvZiB0aGUgd2luZG93LlxyXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcclxuICAgIC8vIHJlbmRlcmVkIHNjcm9sbCBiYXJzIG5vciBpdCBjYW4gYmUgY2xpcHBlZC5cclxuICAgIGlmICghaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxyXG4gICAgICAgIC8vIGluY2x1ZGUgc2Nyb2xsIGJhcnMgc2l6ZSB3aGljaCBjYW4gYmUgcmVtb3ZlZCBhdCB0aGlzIHN0ZXAgYXMgc2Nyb2xsXHJcbiAgICAgICAgLy8gYmFycyBhcmUgdGhlIG9ubHkgZGlmZmVyZW5jZSBiZXR3ZWVuIHJvdW5kZWQgZGltZW5zaW9ucyArIHBhZGRpbmdzXHJcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cclxuICAgICAgICB2YXIgdmVydFNjcm9sbGJhciA9IE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgLSBjbGllbnRXaWR0aDtcclxuICAgICAgICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpIC0gY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIC8vIENocm9tZSBoYXMgYSByYXRoZXIgd2VpcmQgcm91bmRpbmcgb2YgXCJjbGllbnRcIiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXHJcbiAgICAgICAgLy8gdGhlIGNsaWVudCB3aWR0aCBvZiAzMTVweCBhbmQgZm9yIHRoZSB3aWR0aCBvZiAzMTQuN3B4IGl0IG1heSBnaXZlXHJcbiAgICAgICAgLy8gMzE0cHguIEFuZCBpdCBkb2Vzbid0IGhhcHBlbiBhbGwgdGhlIHRpbWUuIFNvIGp1c3QgaWdub3JlIHRoaXMgZGVsdGFcclxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cclxuICAgICAgICBpZiAoTWF0aC5hYnModmVydFNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gdmVydFNjcm9sbGJhcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gaG9yaXpTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHByb3ZpZGVkIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNWR0dyYXBoaWNzRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzU1ZHR3JhcGhpY3NFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XHJcbiAgICAvLyBpbnRlcmZhY2UuXHJcbiAgICBpZiAodHlwZW9mIFNWR0dyYXBoaWNzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XHJcbiAgICB9XHJcbiAgICAvLyBJZiBpdCdzIHNvLCB0aGVuIGNoZWNrIHRoYXQgZWxlbWVudCBpcyBhdCBsZWFzdCBhbiBpbnN0YW5jZSBvZiB0aGVcclxuICAgIC8vIFNWR0VsZW1lbnQgYW5kIHRoYXQgaXQgaGFzIHRoZSBcImdldEJCb3hcIiBtZXRob2QuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJlxyXG4gICAgICAgIHR5cGVvZiB0YXJnZXQuZ2V0QkJveCA9PT0gJ2Z1bmN0aW9uJyk7IH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGEgZG9jdW1lbnQgZWxlbWVudCAoPGh0bWw+KS5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBhbiBhcHByb3ByaWF0ZSBjb250ZW50IHJlY3RhbmdsZSBmb3IgcHJvdmlkZWQgaHRtbCBvciBzdmcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldENvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcclxuICAgICAgICByZXR1cm4gZW1wdHlSZWN0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHR3JhcGhpY3NFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0KHRhcmdldCk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgcmVjdGFuZ2xlIHdpdGggYW4gaW50ZXJmYWNlIG9mIHRoZSBET01SZWN0UmVhZE9ubHkuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkb21yZWN0cmVhZG9ubHlcclxuICpcclxuICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBPYmplY3Qgd2l0aCByZWN0YW5nbGUncyB4L3kgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbnMuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0UmVhZE9ubHl9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QoX2EpIHtcclxuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxyXG4gICAgdmFyIENvbnN0ciA9IHR5cGVvZiBET01SZWN0UmVhZE9ubHkgIT09ICd1bmRlZmluZWQnID8gRE9NUmVjdFJlYWRPbmx5IDogT2JqZWN0O1xyXG4gICAgdmFyIHJlY3QgPSBPYmplY3QuY3JlYXRlKENvbnN0ci5wcm90b3R5cGUpO1xyXG4gICAgLy8gUmVjdGFuZ2xlJ3MgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZS5cclxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XHJcbiAgICAgICAgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICB0b3A6IHksXHJcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgICAgICBib3R0b206IGhlaWdodCArIHksXHJcbiAgICAgICAgbGVmdDogeFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVjdDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBET01SZWN0SW5pdCBvYmplY3QgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRpbWVuc2lvbnMgYW5kIHRoZSB4L3kgY29vcmRpbmF0ZXMuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkaWN0ZGVmLWRvbXJlY3Rpbml0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb29yZGluYXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gUmVjdGFuZ2xlJ3Mgd2lkdGguXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBSZWN0YW5nbGUncyBoZWlnaHQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY3RJbml0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxufVxuXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0YXRpb25zIG9mIHRoZSBjb250ZW50IHJlY3RhbmdsZSBvZlxyXG4gKiBwcm92aWRlZCBET00gZWxlbWVudCBhbmQgZm9yIGtlZXBpbmcgdHJhY2sgb2YgaXQncyBjaGFuZ2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIGhlaWdodCBvZiBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtET01SZWN0SW5pdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIGFuZCB0ZWxscyB3aGV0aGVyIGl0J3Mgd2lkdGggb3IgaGVpZ2h0IHByb3BlcnRpZXNcclxuICAgICAqIGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBicm9hZGNhc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IGdldENvbnRlbnRSZWN0KHRoaXMudGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IHJlY3Q7XHJcbiAgICAgICAgcmV0dXJuIChyZWN0LndpZHRoICE9PSB0aGlzLmJyb2FkY2FzdFdpZHRoIHx8XHJcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ICE9PSB0aGlzLmJyb2FkY2FzdEhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzICdicm9hZGNhc3RXaWR0aCcgYW5kICdicm9hZGNhc3RIZWlnaHQnIHByb3BlcnRpZXMgd2l0aCBhIGRhdGFcclxuICAgICAqIGZyb20gdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydGllcyBvZiB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9IExhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5icm9hZGNhc3RSZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5jb250ZW50UmVjdF87XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2YXRpb247XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyRW50cnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRoYXQgaXMgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIERhdGEgb2YgdGhlIGVsZW1lbnQncyBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJFbnRyeSh0YXJnZXQsIHJlY3RJbml0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcclxuICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZVxyXG4gICAgICAgIC8vIGFuZCBhcmUgYWxzbyBub3QgZW51bWVyYWJsZSBpbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gUHJvcGVydHkgYWNjZXNzb3JzIGFyZSBub3QgYmVpbmcgdXNlZCBhcyB0aGV5J2QgcmVxdWlyZSB0byBkZWZpbmUgYVxyXG4gICAgICAgIC8vIHByaXZhdGUgV2Vha01hcCBzdG9yYWdlIHdoaWNoIG1heSBjYXVzZSBtZW1vcnkgbGVha3MgaW4gYnJvd3NlcnMgdGhhdFxyXG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgdGhpcyB0eXBlIG9mIGNvbGxlY3Rpb25zLlxyXG4gICAgICAgIGRlZmluZUNvbmZpZ3VyYWJsZSh0aGlzLCB7IHRhcmdldDogdGFyZ2V0LCBjb250ZW50UmVjdDogY29udGVudFJlY3QgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJFbnRyeTtcclxufSgpKTtcblxudmFyIFJlc2l6ZU9ic2VydmVyU1BJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWRcclxuICAgICAqICAgICAgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmVkIGVsZW1lbnRzIGNoYW5nZXMgaXQncyBjb250ZW50IGRpbWVuc2lvbnMuXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn0gY29udHJvbGxlciAtIENvbnRyb2xsZXIgaW5zdGFuY2Ugd2hpY2hcclxuICAgICAqICAgICAgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB1cGRhdGVzIG9mIG9ic2VydmVyLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlcn0gY2FsbGJhY2tDdHggLSBSZWZlcmVuY2UgdG8gdGhlIHB1YmxpY1xyXG4gICAgICogICAgICBSZXNpemVPYnNlcnZlciBpbnN0YW5jZSB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJTUEkoY2FsbGJhY2ssIGNvbnRyb2xsZXIsIGNhbGxiYWNrQ3R4KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICAgICAgICAgKiBvZiBlbGVtZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDEgaXMgbm90IGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXyA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0N0eF8gPSBjYWxsYmFja0N0eDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuc2V0KHRhcmdldCwgbmV3IFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8uYWRkT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICAgICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gc3RvcCBvYnNlcnZpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBub3QgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3BzIG9ic2VydmluZyBhbGwgZWxlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18uY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdHMgb2JzZXJ2YXRpb24gaW5zdGFuY2VzIHRoZSBhc3NvY2lhdGVkIGVsZW1lbnQgb2Ygd2hpY2ggaGFzIGNoYW5nZWRcclxuICAgICAqIGl0J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5nYXRoZXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZhdGlvbi5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnB1c2gob2JzZXJ2YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gICAgICogaW5zdGFuY2VzIGNvbGxlY3RlZCBmcm9tIGFjdGl2ZSByZXNpemUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuYnJvYWRjYXN0QWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgb2JzZXJ2ZXIgZG9lc24ndCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY2FsbGJhY2tDdHhfO1xyXG4gICAgICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfLmNhbGwoY3R4LCBlbnRyaWVzLCBjdHgpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRlbGxzIHdoZXRoZXIgb2JzZXJ2ZXIgaGFzIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5oYXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlclNQSTtcclxufSgpKTtcblxuLy8gUmVnaXN0cnkgb2YgaW50ZXJuYWwgb2JzZXJ2ZXJzLiBJZiBXZWFrTWFwIGlzIG5vdCBhdmFpbGFibGUgdXNlIGN1cnJlbnQgc2hpbVxyXG4vLyBmb3IgdGhlIE1hcCBjb2xsZWN0aW9uIGFzIGl0IGhhcyBhbGwgcmVxdWlyZWQgbWV0aG9kcyBhbmQgYmVjYXVzZSBXZWFrTWFwXHJcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxyXG52YXIgb2JzZXJ2ZXJzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXBTaGltKCk7XHJcbi8qKlxyXG4gKiBSZXNpemVPYnNlcnZlciBBUEkuIEVuY2Fwc3VsYXRlcyB0aGUgUmVzaXplT2JzZXJ2ZXIgU1BJIGltcGxlbWVudGF0aW9uXHJcbiAqIGV4cG9zaW5nIG9ubHkgdGhvc2UgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBzcGVjLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGludm9rZWQgd2hlblxyXG4gICAgICogICAgICBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc2l6ZU9ic2VydmVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcclxuICAgICAgICBvYnNlcnZlcnMuc2V0KHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcclxufSgpKTtcclxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG5bXHJcbiAgICAnb2JzZXJ2ZScsXHJcbiAgICAndW5vYnNlcnZlJyxcclxuICAgICdkaXNjb25uZWN0J1xyXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoX2EgPSBvYnNlcnZlcnMuZ2V0KHRoaXMpKVttZXRob2RdLmFwcGx5KF9hLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSk7XG5cbnZhciBpbmRleCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeHBvcnQgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24gaWYgYXZhaWxhYmxlLlxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwiLy8gXCJleHBvcnQgdHlwZVwiIGRlY2xhcmF0aW9ucyBvbiBzZXBhcmF0ZSBsaW5lcyBhcmUgaW4gdXNlXG4vLyB0byB3b3JrYXJvdW5kIGJhYmVsIGlzc3VlKHMpIDExNDY1IDEyNTc4XG4vL1xuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9pc3N1ZXMvMTE0NjQjaXNzdWVjb21tZW50LTYxNzYwNjg5OFxuZXhwb3J0IHsgU3VyZmFjZSB9IGZyb20gJy4vY29udGFpbmVyL1N1cmZhY2UnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBTdXJmYWNlUHJvcHMgfSBmcm9tICcuL2NvbnRhaW5lci9TdXJmYWNlJztcbmV4cG9ydCB7IExheWVyIH0gZnJvbSAnLi9jb250YWluZXIvTGF5ZXInO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBMYXllclByb3BzIH0gZnJvbSAnLi9jb250YWluZXIvTGF5ZXInO1xuXG5leHBvcnQgeyBMZWdlbmQgfSBmcm9tICcuL2NvbXBvbmVudC9MZWdlbmQnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBMZWdlbmRQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50L0xlZ2VuZCc7XG5leHBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi9jb21wb25lbnQvVG9vbHRpcCc7XG5leHBvcnQgdHlwZSB7IFRvb2x0aXBQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50L1Rvb2x0aXAnO1xuZXhwb3J0IHsgUmVzcG9uc2l2ZUNvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50L1Jlc3BvbnNpdmVDb250YWluZXInO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBSZXNwb25zaXZlQ29udGFpbmVyUHJvcHMgfSBmcm9tICcuL2NvbXBvbmVudC9SZXNwb25zaXZlQ29udGFpbmVyJztcbmV4cG9ydCB7IENlbGwgfSBmcm9tICcuL2NvbXBvbmVudC9DZWxsJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgQ2VsbFByb3BzIH0gZnJvbSAnLi9jb21wb25lbnQvQ2VsbCc7XG5leHBvcnQgeyBUZXh0IH0gZnJvbSAnLi9jb21wb25lbnQvVGV4dCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFRleHRQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50L1RleHQnO1xuZXhwb3J0IHsgTGFiZWwgfSBmcm9tICcuL2NvbXBvbmVudC9MYWJlbCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIExhYmVsUHJvcHMgfSBmcm9tICcuL2NvbXBvbmVudC9MYWJlbCc7XG5leHBvcnQgeyBMYWJlbExpc3QgfSBmcm9tICcuL2NvbXBvbmVudC9MYWJlbExpc3QnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBMYWJlbExpc3RQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50L0xhYmVsTGlzdCc7XG5leHBvcnQgeyBDdXN0b21pemVkIH0gZnJvbSAnLi9jb21wb25lbnQvQ3VzdG9taXplZCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIEN1c3RvbWl6ZWRQcm9wcyB9IGZyb20gJy4vY29tcG9uZW50L0N1c3RvbWl6ZWQnO1xuXG5leHBvcnQgeyBTZWN0b3IgfSBmcm9tICcuL3NoYXBlL1NlY3Rvcic7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFNlY3RvclByb3BzIH0gZnJvbSAnLi9zaGFwZS9TZWN0b3InO1xuZXhwb3J0IHsgQ3VydmUgfSBmcm9tICcuL3NoYXBlL0N1cnZlJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgQ3VydmVQcm9wcyB9IGZyb20gJy4vc2hhcGUvQ3VydmUnO1xuZXhwb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi9zaGFwZS9SZWN0YW5nbGUnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBSZWN0YW5nbGVQcm9wcyB9IGZyb20gJy4vc2hhcGUvUmVjdGFuZ2xlJztcbmV4cG9ydCB7IFBvbHlnb24gfSBmcm9tICcuL3NoYXBlL1BvbHlnb24nO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBQb2x5Z29uUHJvcHMgfSBmcm9tICcuL3NoYXBlL1BvbHlnb24nO1xuZXhwb3J0IHsgRG90IH0gZnJvbSAnLi9zaGFwZS9Eb3QnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBEb3RQcm9wcyB9IGZyb20gJy4vc2hhcGUvRG90JztcbmV4cG9ydCB7IENyb3NzIH0gZnJvbSAnLi9zaGFwZS9Dcm9zcyc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIENyb3NzUHJvcHMgfSBmcm9tICcuL3NoYXBlL0Nyb3NzJztcbmV4cG9ydCB7IFN5bWJvbHMgfSBmcm9tICcuL3NoYXBlL1N5bWJvbHMnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBTeW1ib2xzUHJvcHMgfSBmcm9tICcuL3NoYXBlL1N5bWJvbHMnO1xuXG5leHBvcnQgeyBQb2xhckdyaWQgfSBmcm9tICcuL3BvbGFyL1BvbGFyR3JpZCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFBvbGFyR3JpZFByb3BzIH0gZnJvbSAnLi9wb2xhci9Qb2xhckdyaWQnO1xuZXhwb3J0IHsgUG9sYXJSYWRpdXNBeGlzIH0gZnJvbSAnLi9wb2xhci9Qb2xhclJhZGl1c0F4aXMnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBQb2xhclJhZGl1c0F4aXNQcm9wcyB9IGZyb20gJy4vcG9sYXIvUG9sYXJSYWRpdXNBeGlzJztcbmV4cG9ydCB7IFBvbGFyQW5nbGVBeGlzIH0gZnJvbSAnLi9wb2xhci9Qb2xhckFuZ2xlQXhpcyc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFBvbGFyQW5nbGVBeGlzUHJvcHMgfSBmcm9tICcuL3BvbGFyL1BvbGFyQW5nbGVBeGlzJztcbmV4cG9ydCB7IFBpZSB9IGZyb20gJy4vcG9sYXIvUGllJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgUGllUHJvcHMsIFBpZUxhYmVsLCBQaWVMYWJlbFJlbmRlclByb3BzIH0gZnJvbSAnLi9wb2xhci9QaWUnO1xuZXhwb3J0IHsgUmFkYXIgfSBmcm9tICcuL3BvbGFyL1JhZGFyJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgUmFkYXJQcm9wcyB9IGZyb20gJy4vcG9sYXIvUmFkYXInO1xuZXhwb3J0IHsgUmFkaWFsQmFyIH0gZnJvbSAnLi9wb2xhci9SYWRpYWxCYXInO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBSYWRpYWxCYXJQcm9wcyB9IGZyb20gJy4vcG9sYXIvUmFkaWFsQmFyJztcblxuZXhwb3J0IHsgQnJ1c2ggfSBmcm9tICcuL2NhcnRlc2lhbi9CcnVzaCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIEJydXNoUHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9CcnVzaCc7XG5leHBvcnQgeyBSZWZlcmVuY2VMaW5lIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vUmVmZXJlbmNlTGluZSc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFJlZmVyZW5jZUxpbmVQcm9wcyB9IGZyb20gJy4vY2FydGVzaWFuL1JlZmVyZW5jZUxpbmUnO1xuZXhwb3J0IHsgUmVmZXJlbmNlRG90IH0gZnJvbSAnLi9jYXJ0ZXNpYW4vUmVmZXJlbmNlRG90JztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgUmVmZXJlbmNlRG90UHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9SZWZlcmVuY2VEb3QnO1xuZXhwb3J0IHsgUmVmZXJlbmNlQXJlYSB9IGZyb20gJy4vY2FydGVzaWFuL1JlZmVyZW5jZUFyZWEnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBSZWZlcmVuY2VBcmVhUHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9SZWZlcmVuY2VBcmVhJztcbmV4cG9ydCB7IENhcnRlc2lhbkF4aXMgfSBmcm9tICcuL2NhcnRlc2lhbi9DYXJ0ZXNpYW5BeGlzJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgQ2FydGVzaWFuQXhpc1Byb3BzIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vQ2FydGVzaWFuQXhpcyc7XG5leHBvcnQgeyBDYXJ0ZXNpYW5HcmlkIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vQ2FydGVzaWFuR3JpZCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIENhcnRlc2lhbkdyaWRQcm9wcyB9IGZyb20gJy4vY2FydGVzaWFuL0NhcnRlc2lhbkdyaWQnO1xuZXhwb3J0IHsgTGluZSB9IGZyb20gJy4vY2FydGVzaWFuL0xpbmUnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBMaW5lUHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9MaW5lJztcbmV4cG9ydCB7IEFyZWEgfSBmcm9tICcuL2NhcnRlc2lhbi9BcmVhJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgQXJlYVByb3BzIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vQXJlYSc7XG5leHBvcnQgeyBCYXIgfSBmcm9tICcuL2NhcnRlc2lhbi9CYXInO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBCYXJQcm9wcyB9IGZyb20gJy4vY2FydGVzaWFuL0Jhcic7XG5leHBvcnQgeyBTY2F0dGVyIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vU2NhdHRlcic7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFNjYXR0ZXJQcm9wcyB9IGZyb20gJy4vY2FydGVzaWFuL1NjYXR0ZXInO1xuZXhwb3J0IHsgWEF4aXMgfSBmcm9tICcuL2NhcnRlc2lhbi9YQXhpcyc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIFhBeGlzUHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9YQXhpcyc7XG5leHBvcnQgeyBZQXhpcyB9IGZyb20gJy4vY2FydGVzaWFuL1lBeGlzJztcbmV4cG9ydCB0eXBlIHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vY2FydGVzaWFuL1lBeGlzJztcbmV4cG9ydCB7IFpBeGlzIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vWkF4aXMnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBaQXhpc1Byb3BzIH0gZnJvbSAnLi9jYXJ0ZXNpYW4vWkF4aXMnO1xuZXhwb3J0IHsgRXJyb3JCYXIgfSBmcm9tICcuL2NhcnRlc2lhbi9FcnJvckJhcic7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIEVycm9yQmFyUHJvcHMgfSBmcm9tICcuL2NhcnRlc2lhbi9FcnJvckJhcic7XG5cbmV4cG9ydCB7IExpbmVDaGFydCB9IGZyb20gJy4vY2hhcnQvTGluZUNoYXJ0JztcbmV4cG9ydCB7IEJhckNoYXJ0IH0gZnJvbSAnLi9jaGFydC9CYXJDaGFydCc7XG5leHBvcnQgeyBQaWVDaGFydCB9IGZyb20gJy4vY2hhcnQvUGllQ2hhcnQnO1xuZXhwb3J0IHsgVHJlZW1hcCB9IGZyb20gJy4vY2hhcnQvVHJlZW1hcCc7XG5leHBvcnQgeyBTYW5rZXkgfSBmcm9tICcuL2NoYXJ0L1NhbmtleSc7XG5leHBvcnQgeyBSYWRhckNoYXJ0IH0gZnJvbSAnLi9jaGFydC9SYWRhckNoYXJ0JztcbmV4cG9ydCB7IFNjYXR0ZXJDaGFydCB9IGZyb20gJy4vY2hhcnQvU2NhdHRlckNoYXJ0JztcbmV4cG9ydCB7IEFyZWFDaGFydCB9IGZyb20gJy4vY2hhcnQvQXJlYUNoYXJ0JztcbmV4cG9ydCB7IFJhZGlhbEJhckNoYXJ0IH0gZnJvbSAnLi9jaGFydC9SYWRpYWxCYXJDaGFydCc7XG5leHBvcnQgeyBDb21wb3NlZENoYXJ0IH0gZnJvbSAnLi9jaGFydC9Db21wb3NlZENoYXJ0JztcblxuZXhwb3J0IHsgRnVubmVsIH0gZnJvbSAnLi9udW1iZXJBeGlzL0Z1bm5lbCc7XG5leHBvcnQgdHlwZSB7IFByb3BzIGFzIEZ1bm5lbFByb3BzIH0gZnJvbSAnLi9udW1iZXJBeGlzL0Z1bm5lbCc7XG5leHBvcnQgeyBGdW5uZWxDaGFydCB9IGZyb20gJy4vY2hhcnQvRnVubmVsQ2hhcnQnO1xuZXhwb3J0IHsgVHJhcGV6b2lkIH0gZnJvbSAnLi9zaGFwZS9UcmFwZXpvaWQnO1xuZXhwb3J0IHR5cGUgeyBQcm9wcyBhcyBUcmFwZXpvaWRQcm9wcyB9IGZyb20gJy4vc2hhcGUvVHJhcGV6b2lkJztcblxuZXhwb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi91dGlsL0dsb2JhbCc7XG5leHBvcnQgdHlwZSB7IExlZ2VuZFR5cGUgfSBmcm9tICcuL3V0aWwvdHlwZXMnO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IERlZmF1bHQgTGVnZW5kIENvbnRlbnRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFJlYWN0Tm9kZSwgTW91c2VFdmVudCwgUmVhY3RUZXh0LCBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFN1cmZhY2UgfSBmcm9tICcuLi9jb250YWluZXIvU3VyZmFjZSc7XG5pbXBvcnQgeyBTeW1ib2xzIH0gZnJvbSAnLi4vc2hhcGUvU3ltYm9scyc7XG5pbXBvcnQge1xuICBMZWdlbmRUeXBlLFxuICBMYXlvdXRUeXBlLFxuICBTeW1ib2xUeXBlLFxuICBhZGFwdEV2ZW50c09mQ2hpbGQsXG4gIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQsXG59IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5jb25zdCBTSVpFID0gMzI7XG5leHBvcnQgdHlwZSBDb250ZW50VHlwZSA9IFJlYWN0RWxlbWVudCB8ICgocHJvcHM6IFByb3BzKSA9PiBSZWFjdE5vZGUpO1xuZXhwb3J0IHR5cGUgSWNvblR5cGUgPSBPbWl0PExlZ2VuZFR5cGUsICdub25lJz47XG5leHBvcnQgdHlwZSBIb3Jpem9udGFsQWxpZ25tZW50VHlwZSA9ICdjZW50ZXInIHwgJ2xlZnQnIHwgJ3JpZ2h0JztcbmV4cG9ydCB0eXBlIFZlcnRpY2FsQWxpZ25tZW50VHlwZSA9ICd0b3AnIHwgJ2JvdHRvbScgfCAnbWlkZGxlJztcbmV4cG9ydCB0eXBlIEZvcm1hdHRlciA9IChcbiAgdmFsdWU6IGFueSxcbiAgZW50cnk6IHtcbiAgICB2YWx1ZTogYW55O1xuICAgIGlkPzogc3RyaW5nO1xuICAgIHR5cGU/OiBMZWdlbmRUeXBlO1xuICAgIGNvbG9yPzogc3RyaW5nO1xuICAgIHBheWxvYWQ/OiB7XG4gICAgICBzdHJva2VEYXNoYXJyYXk6IFJlYWN0VGV4dDtcbiAgICB9O1xuICB9LFxuICBpbmRleDogbnVtYmVyLFxuKSA9PiBSZWFjdE5vZGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bG9hZCB7XG4gIHZhbHVlOiBhbnk7XG4gIGlkPzogc3RyaW5nO1xuICB0eXBlPzogTGVnZW5kVHlwZTtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIHBheWxvYWQ/OiB7XG4gICAgc3Ryb2tlRGFzaGFycmF5OiBSZWFjdFRleHQ7XG4gIH07XG4gIGZvcm1hdHRlcj86IEZvcm1hdHRlcjtcbiAgaW5hY3RpdmU/OiBib29sZWFuO1xuICBsZWdlbmRJY29uPzogUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+O1xufVxuaW50ZXJmYWNlIEludGVybmFsUHJvcHMge1xuICBjb250ZW50PzogQ29udGVudFR5cGU7XG4gIGljb25TaXplPzogbnVtYmVyO1xuICBpY29uVHlwZT86IEljb25UeXBlO1xuICBsYXlvdXQ/OiBMYXlvdXRUeXBlO1xuICBhbGlnbj86IEhvcml6b250YWxBbGlnbm1lbnRUeXBlO1xuICB2ZXJ0aWNhbEFsaWduPzogVmVydGljYWxBbGlnbm1lbnRUeXBlO1xuICBwYXlsb2FkPzogQXJyYXk8UGF5bG9hZD47XG4gIGluYWN0aXZlQ29sb3I/OiBzdHJpbmc7XG4gIGZvcm1hdHRlcj86IEZvcm1hdHRlcjtcbiAgb25Nb3VzZUVudGVyPzogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICBvbk1vdXNlTGVhdmU/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gSW50ZXJuYWxQcm9wcyAmIFByZXNlbnRhdGlvbkF0dHJpYnV0ZXNBZGFwdENoaWxkRXZlbnQ8YW55LCBSZWFjdEVsZW1lbnQ+O1xuXG5leHBvcnQgY2xhc3MgRGVmYXVsdExlZ2VuZENvbnRlbnQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdMZWdlbmQnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaWNvblNpemU6IDE0LFxuICAgIGxheW91dDogJ2hvcml6b250YWwnLFxuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBpbmFjdGl2ZUNvbG9yOiAnI2NjYycsXG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgcGF0aCBvZiBpY29uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIERhdGEgb2YgZWFjaCBsZWdlbmQgaXRlbVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFBhdGggZWxlbWVudFxuICAgKi9cbiAgcmVuZGVySWNvbihkYXRhOiBQYXlsb2FkKSB7XG4gICAgY29uc3QgeyBpbmFjdGl2ZUNvbG9yIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGhhbGZTaXplID0gU0laRSAvIDI7XG4gICAgY29uc3Qgc2l4dGhTaXplID0gU0laRSAvIDY7XG4gICAgY29uc3QgdGhpcmRTaXplID0gU0laRSAvIDM7XG4gICAgY29uc3QgY29sb3IgPSBkYXRhLmluYWN0aXZlID8gaW5hY3RpdmVDb2xvciA6IGRhdGEuY29sb3I7XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAncGxhaW5saW5lJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpbmVcbiAgICAgICAgICBzdHJva2VXaWR0aD17NH1cbiAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgc3Ryb2tlPXtjb2xvcn1cbiAgICAgICAgICBzdHJva2VEYXNoYXJyYXk9e2RhdGEucGF5bG9hZC5zdHJva2VEYXNoYXJyYXl9XG4gICAgICAgICAgeDE9ezB9XG4gICAgICAgICAgeTE9e2hhbGZTaXplfVxuICAgICAgICAgIHgyPXtTSVpFfVxuICAgICAgICAgIHkyPXtoYWxmU2l6ZX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1sZWdlbmQtaWNvblwiXG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGF0YS50eXBlID09PSAnbGluZScpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgc3Ryb2tlV2lkdGg9ezR9XG4gICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgIHN0cm9rZT17Y29sb3J9XG4gICAgICAgICAgZD17YE0wLCR7aGFsZlNpemV9aCR7dGhpcmRTaXplfVxuICAgICAgICAgICAgQSR7c2l4dGhTaXplfSwke3NpeHRoU2l6ZX0sMCwxLDEsJHsyICogdGhpcmRTaXplfSwke2hhbGZTaXplfVxuICAgICAgICAgICAgSCR7U0laRX1NJHsyICogdGhpcmRTaXplfSwke2hhbGZTaXplfVxuICAgICAgICAgICAgQSR7c2l4dGhTaXplfSwke3NpeHRoU2l6ZX0sMCwxLDEsJHt0aGlyZFNpemV9LCR7aGFsZlNpemV9YH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1sZWdlbmQtaWNvblwiXG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGF0YS50eXBlID09PSAncmVjdCcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgc3Ryb2tlPVwibm9uZVwiXG4gICAgICAgICAgZmlsbD17Y29sb3J9XG4gICAgICAgICAgZD17YE0wLCR7U0laRSAvIDh9aCR7U0laRX12JHsoU0laRSAqIDMpIC8gNH1oJHstU0laRX16YH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1sZWdlbmQtaWNvblwiXG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGF0YS5sZWdlbmRJY29uKSkge1xuICAgICAgY29uc3QgaWNvblByb3BzOiBhbnkgPSB7IC4uLmRhdGEgfTtcbiAgICAgIGRlbGV0ZSBpY29uUHJvcHMubGVnZW5kSWNvbjtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoZGF0YS5sZWdlbmRJY29uLCBpY29uUHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8U3ltYm9sc1xuICAgICAgICBmaWxsPXtjb2xvcn1cbiAgICAgICAgY3g9e2hhbGZTaXplfVxuICAgICAgICBjeT17aGFsZlNpemV9XG4gICAgICAgIHNpemU9e1NJWkV9XG4gICAgICAgIHNpemVUeXBlPVwiZGlhbWV0ZXJcIlxuICAgICAgICB0eXBlPXtkYXRhLnR5cGUgYXMgU3ltYm9sVHlwZX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IGl0ZW1zIG9mIGxlZ2VuZFxuICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IEl0ZW1zXG4gICAqL1xuICByZW5kZXJJdGVtcygpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIGljb25TaXplLCBsYXlvdXQsIGZvcm1hdHRlciwgaW5hY3RpdmVDb2xvciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB2aWV3Qm94ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogU0laRSwgaGVpZ2h0OiBTSVpFIH07XG4gICAgY29uc3QgaXRlbVN0eWxlID0ge1xuICAgICAgZGlzcGxheTogbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgPyAnaW5saW5lLWJsb2NrJyA6ICdibG9jaycsXG4gICAgICBtYXJnaW5SaWdodDogMTAsXG4gICAgfTtcbiAgICBjb25zdCBzdmdTdHlsZSA9IHsgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLCBtYXJnaW5SaWdodDogNCB9O1xuXG4gICAgcmV0dXJuIHBheWxvYWQubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgY29uc3QgZmluYWxGb3JtYXR0ZXIgPSBlbnRyeS5mb3JtYXR0ZXIgfHwgZm9ybWF0dGVyO1xuICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyh7XG4gICAgICAgICdyZWNoYXJ0cy1sZWdlbmQtaXRlbSc6IHRydWUsXG4gICAgICAgIFtgbGVnZW5kLWl0ZW0tJHtpfWBdOiB0cnVlLFxuICAgICAgICBpbmFjdGl2ZTogZW50cnkuaW5hY3RpdmUsXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVudHJ5LnR5cGUgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29sb3IgPSBlbnRyeS5pbmFjdGl2ZSA/IGluYWN0aXZlQ29sb3IgOiBlbnRyeS5jb2xvcjtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgc3R5bGU9e2l0ZW1TdHlsZX1cbiAgICAgICAgICBrZXk9e2BsZWdlbmQtaXRlbS0ke2l9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICB7Li4uYWRhcHRFdmVudHNPZkNoaWxkKHRoaXMucHJvcHMsIGVudHJ5LCBpKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxTdXJmYWNlIHdpZHRoPXtpY29uU2l6ZX0gaGVpZ2h0PXtpY29uU2l6ZX0gdmlld0JveD17dmlld0JveH0gc3R5bGU9e3N2Z1N0eWxlfT5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlckljb24oZW50cnkpfVxuICAgICAgICAgIDwvU3VyZmFjZT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWNoYXJ0cy1sZWdlbmQtaXRlbS10ZXh0XCIgc3R5bGU9e3sgY29sb3IgfX0+XG4gICAgICAgICAgICB7ZmluYWxGb3JtYXR0ZXIgPyBmaW5hbEZvcm1hdHRlcihlbnRyeS52YWx1ZSwgZW50cnksIGkpIDogZW50cnkudmFsdWV9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIGxheW91dCwgYWxpZ24gfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIXBheWxvYWQgfHwgIXBheWxvYWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaW5hbFN0eWxlID0ge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHRleHRBbGlnbjogbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgPyBhbGlnbiA6ICdsZWZ0JyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx1bCBjbGFzc05hbWU9XCJyZWNoYXJ0cy1kZWZhdWx0LWxlZ2VuZFwiIHN0eWxlPXtmaW5hbFN0eWxlfT5cbiAgICAgICAge3RoaXMucmVuZGVySXRlbXMoKX1cbiAgICAgIDwvdWw+XG4gICAgKTtcbiAgfVxufVxuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZ2V0TmFub1NlY29uZHMsIGhydGltZSwgbG9hZFRpbWUsIG1vZHVsZUxvYWRUaW1lLCBub2RlTG9hZFRpbWUsIHVwVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBub2RlTG9hZFRpbWUpIC8gMWU2O1xuICAgIH07XG4gICAgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWU7XG4gICAgZ2V0TmFub1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBocjtcbiAgICAgIGhyID0gaHJ0aW1lKCk7XG4gICAgICByZXR1cm4gaHJbMF0gKiAxZTkgKyBoclsxXTtcbiAgICB9O1xuICAgIG1vZHVsZUxvYWRUaW1lID0gZ2V0TmFub1NlY29uZHMoKTtcbiAgICB1cFRpbWUgPSBwcm9jZXNzLnVwdGltZSgpICogMWU5O1xuICAgIG5vZGVMb2FkVGltZSA9IG1vZHVsZUxvYWRUaW1lIC0gdXBUaW1lO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmb3JtYW5jZS1ub3cuanMubWFwXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgIH1cbiAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgIDogdW5kZWZpbmVkO1xuICB9XG4gIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICBvdXRlcjpcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgaWYgKCEoc2VlblxuICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICApKSB7XG4gICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2Vlbikge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJbnRlcnNlY3Rpb247XG4iLCJ2YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZicpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXM7XG4iLCJ2YXIgYmFzZUZpbmRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VGaW5kSW5kZXgnKSxcbiAgICBiYXNlSXNOYU4gPSByZXF1aXJlKCcuL19iYXNlSXNOYU4nKSxcbiAgICBzdHJpY3RJbmRleE9mID0gcmVxdWlyZSgnLi9fc3RyaWN0SW5kZXhPZicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJbmRleE9mO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmFOO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmljdEluZGV4T2Y7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseTtcbiIsInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG4iLCJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG4iLCJ2YXIgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEFycmF5TGlrZU9iamVjdDtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbHRlcjtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWF0Y2hEYXRhO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWRkQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzcy9hZGRDbGFzc1wiKSk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHJhbnNpdGlvblwiKSk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gKDAsIF9hZGRDbGFzcy5kZWZhdWx0KShub2RlLCBjKTtcbiAgfSk7XG59O1xuXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gKDAsIF9yZW1vdmVDbGFzcy5kZWZhdWx0KShub2RlLCBjKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBBIHRyYW5zaXRpb24gY29tcG9uZW50IGluc3BpcmVkIGJ5IHRoZSBleGNlbGxlbnRcbiAqIFtuZy1hbmltYXRlXShodHRwOi8vd3d3Lm5nYW5pbWF0ZS5vcmcvKSBsaWJyYXJ5LCB5b3Ugc2hvdWxkIHVzZSBpdCBpZiB5b3UncmVcbiAqIHVzaW5nIENTUyB0cmFuc2l0aW9ucyBvciBhbmltYXRpb25zLiBJdCdzIGJ1aWx0IHVwb24gdGhlXG4gKiBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24pXG4gKiBjb21wb25lbnQsIHNvIGl0IGluaGVyaXRzIGFsbCBvZiBpdHMgcHJvcHMuXG4gKlxuICogYENTU1RyYW5zaXRpb25gIGFwcGxpZXMgYSBwYWlyIG9mIGNsYXNzIG5hbWVzIGR1cmluZyB0aGUgYGFwcGVhcmAsIGBlbnRlcmAsXG4gKiBhbmQgYGV4aXRgIHN0YXRlcyBvZiB0aGUgdHJhbnNpdGlvbi4gVGhlIGZpcnN0IGNsYXNzIGlzIGFwcGxpZWQgYW5kIHRoZW4gYVxuICogc2Vjb25kIGAqLWFjdGl2ZWAgY2xhc3MgaW4gb3JkZXIgdG8gYWN0aXZhdGUgdGhlIENTU1MgdHJhbnNpdGlvbi4gQWZ0ZXIgdGhlXG4gKiB0cmFuc2l0aW9uLCBtYXRjaGluZyBgKi1kb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZVxuICogdHJhbnNpdGlvbiBzdGF0ZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPENTU1RyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17MjAwfSBjbGFzc05hbWVzPVwibXktbm9kZVwiPlxuICogICAgICAgICA8ZGl2PlxuICogICAgICAgICAgIHtcIkknbGwgcmVjZWl2ZSBteS1ub2RlLSogY2xhc3Nlc1wifVxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBpbmAgcHJvcCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY2hpbGQgY29tcG9uZW50IHdpbGwgZmlyc3QgcmVjZWl2ZVxuICogdGhlIGNsYXNzIGBleGFtcGxlLWVudGVyYCwgdGhlbiB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCB3aWxsIGJlIGFkZGVkIGluXG4gKiB0aGUgbmV4dCB0aWNrLiBgQ1NTVHJhbnNpdGlvbmAgW2ZvcmNlcyBhXG4gKiByZWZsb3ddKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqIGJldHdlZW4gYmVmb3JlIGFkZGluZyB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYC4gVGhpcyBpcyBhbiBpbXBvcnRhbnQgdHJpY2tcbiAqIGJlY2F1c2UgaXQgYWxsb3dzIHVzIHRvIHRyYW5zaXRpb24gYmV0d2VlbiBgZXhhbXBsZS1lbnRlcmAgYW5kXG4gKiBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSBhZGRlZCBpbW1lZGlhdGVseSBvbmUgYWZ0ZXJcbiAqIGFub3RoZXIuIE1vc3Qgbm90YWJseSwgdGhpcyBpcyB3aGF0IG1ha2VzIGl0IHBvc3NpYmxlIGZvciB1cyB0byBhbmltYXRlXG4gKiBfYXBwZWFyYW5jZV8uXG4gKlxuICogYGBgY3NzXG4gKiAubXktbm9kZS1lbnRlciB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiB9XG4gKiAubXktbm9kZS1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OiAxO1xuICogICB0cmFuc2l0aW9uOiBvcGFjaXR5IDIwMG1zO1xuICogfVxuICogLm15LW5vZGUtZXhpdCB7XG4gKiAgIG9wYWNpdHk6IDE7XG4gKiB9XG4gKiAubXktbm9kZS1leGl0LWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiAgIHRyYW5zaXRpb246IG9wYWNpdHk6IDIwMG1zO1xuICogfVxuICogYGBgXG4gKlxuICogYCotYWN0aXZlYCBjbGFzc2VzIHJlcHJlc2VudCB3aGljaCBzdHlsZXMgeW91IHdhbnQgdG8gYW5pbWF0ZSAqKnRvKiouXG4gKi9cblxuXG52YXIgQ1NTVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDU1NUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDU1NUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub25FbnRlciA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcyhhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMuY2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmluZyA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzMiA9IF90aGlzLmdldENsYXNzTmFtZXMoYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKSxcbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzMi5hY3RpdmVDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlZmxvd0FuZEFkZENsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyaW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlcmVkID0gZnVuY3Rpb24gKG5vZGUsIGFwcGVhcmluZykge1xuICAgICAgdmFyIGFwcGVhckNsYXNzTmFtZSA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2FwcGVhcicpLmRvbmVDbGFzc05hbWU7XG5cbiAgICAgIHZhciBlbnRlckNsYXNzTmFtZSA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2VudGVyJykuZG9uZUNsYXNzTmFtZTtcblxuICAgICAgdmFyIGRvbmVDbGFzc05hbWUgPSBhcHBlYXJpbmcgPyBhcHBlYXJDbGFzc05hbWUgKyBcIiBcIiArIGVudGVyQ2xhc3NOYW1lIDogZW50ZXJDbGFzc05hbWU7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKTtcblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgZG9uZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczMgPSBfdGhpcy5nZXRDbGFzc05hbWVzKCdleGl0JyksXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczMuY2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdhcHBlYXInKTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnZW50ZXInKTtcblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGluZyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczQgPSBfdGhpcy5nZXRDbGFzc05hbWVzKCdleGl0JyksXG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczQuYWN0aXZlQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZWZsb3dBbmRBZGRDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0aW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25FeGl0ZWQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM1ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLFxuICAgICAgICAgIGRvbmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzNS5kb25lQ2xhc3NOYW1lO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7XG5cbiAgICAgIGFkZENsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWVzO1xuICAgICAgdmFyIGlzU3RyaW5nQ2xhc3NOYW1lcyA9IHR5cGVvZiBjbGFzc05hbWVzID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBwcmVmaXggPSBpc1N0cmluZ0NsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcyA/IGNsYXNzTmFtZXMgKyAnLScgOiAnJztcbiAgICAgIHZhciBjbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBwcmVmaXggKyB0eXBlIDogY2xhc3NOYW1lc1t0eXBlXTtcbiAgICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBjbGFzc05hbWUgKyAnLWFjdGl2ZScgOiBjbGFzc05hbWVzW3R5cGUgKyAnQWN0aXZlJ107XG4gICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IGlzU3RyaW5nQ2xhc3NOYW1lcyA/IGNsYXNzTmFtZSArICctZG9uZScgOiBjbGFzc05hbWVzW3R5cGUgKyAnRG9uZSddO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGFjdGl2ZUNsYXNzTmFtZTogYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgICBkb25lQ2xhc3NOYW1lOiBkb25lQ2xhc3NOYW1lXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ1NTVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbW92ZUNsYXNzZXMgPSBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKG5vZGUsIHR5cGUpIHtcbiAgICB2YXIgX3RoaXMkZ2V0Q2xhc3NOYW1lczYgPSB0aGlzLmdldENsYXNzTmFtZXModHlwZSksXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM2LmNsYXNzTmFtZSxcbiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgICBkb25lQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczYuZG9uZUNsYXNzTmFtZTtcblxuICAgIGNsYXNzTmFtZSAmJiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuICAgIGFjdGl2ZUNsYXNzTmFtZSAmJiByZW1vdmVDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgIGRvbmVDbGFzc05hbWUgJiYgcmVtb3ZlQ2xhc3Mobm9kZSwgZG9uZUNsYXNzTmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmxvd0FuZEFkZENsYXNzID0gZnVuY3Rpb24gcmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgIC8vIHdoaWNoIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byB0cmFuc2l0aW9uIHN0eWxlcyB3aGVuIGFkZGluZyBhIGNsYXNzIG5hbWUuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG9wO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cblxuICAgICAgYWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBkZWxldGUgcHJvcHMuY2xhc3NOYW1lcztcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG9uRW50ZXI6IHRoaXMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nOiB0aGlzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQ6IHRoaXMub25FeGl0LFxuICAgICAgb25FeGl0aW5nOiB0aGlzLm9uRXhpdGluZyxcbiAgICAgIG9uRXhpdGVkOiB0aGlzLm9uRXhpdGVkXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lczogJydcbn07XG5DU1NUcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9leHRlbmRzKHt9LCBfVHJhbnNpdGlvbi5kZWZhdWx0LnByb3BUeXBlcywge1xuICAvKipcbiAgICogVGhlIGFuaW1hdGlvbiBjbGFzc05hbWVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudCBhcyBpdCBlbnRlcnMsIGV4aXRzIG9yXG4gICAqIGhhcyBmaW5pc2hlZCB0aGUgdHJhbnNpdGlvbi4gQSBzaW5nbGUgbmFtZSBjYW4gYmUgcHJvdmlkZWQgYW5kIGl0IHdpbGwgYmVcbiAgICogc3VmZml4ZWQgZm9yIGVhY2ggc3RhZ2U6IGUuZy5cbiAgICpcbiAgICogYGNsYXNzTmFtZXM9XCJmYWRlXCJgIGFwcGxpZXMgYGZhZGUtZW50ZXJgLCBgZmFkZS1lbnRlci1hY3RpdmVgLFxuICAgKiBgZmFkZS1lbnRlci1kb25lYCwgYGZhZGUtZXhpdGAsIGBmYWRlLWV4aXQtYWN0aXZlYCwgYGZhZGUtZXhpdC1kb25lYCxcbiAgICogYGZhZGUtYXBwZWFyYCwgYGZhZGUtYXBwZWFyLWFjdGl2ZWAsIGFuZCBgZmFkZS1hcHBlYXItZG9uZWAuXG4gICAqXG4gICAqICoqTm90ZSoqOiBgZmFkZS1hcHBlYXItZG9uZWAgYW5kIGBmYWRlLWVudGVyLWRvbmVgIHdpbGwgX2JvdGhfIGJlIGFwcGxpZWQuXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBkZWZpbmUgZGlmZmVyZW50IGJlaGF2aW9yIGZvciB3aGVuIGFwcGVhcmluZyBpcyBkb25lIGFuZFxuICAgKiB3aGVuIHJlZ3VsYXIgZW50ZXJpbmcgaXMgZG9uZSwgdXNpbmcgc2VsZWN0b3JzIGxpa2VcbiAgICogYC5mYWRlLWVudGVyLWRvbmU6bm90KC5mYWRlLWFwcGVhci1kb25lKWAuIEZvciBleGFtcGxlLCB5b3UgY291bGQgYXBwbHkgYW5cbiAgICogZXBpYyBlbnRyYW5jZSBhbmltYXRpb24gd2hlbiBlbGVtZW50IGZpcnN0IGFwcGVhcnMgaW4gdGhlIERPTSB1c2luZ1xuICAgKiBbQW5pbWF0ZS5jc3NdKGh0dHBzOi8vZGFuZWRlbi5naXRodWIuaW8vYW5pbWF0ZS5jc3MvKS4gT3RoZXJ3aXNlIHlvdSBjYW5cbiAgICogc2ltcGx5IHVzZSBgZmFkZS1lbnRlci1kb25lYCBmb3IgZGVmaW5pbmcgYm90aCBjYXNlcy5cbiAgICpcbiAgICogRWFjaCBpbmRpdmlkdWFsIGNsYXNzTmFtZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluZGVwZW5kZW50bHkgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17e1xuICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJyxcbiAgICogIGFwcGVhckFjdGl2ZTogJ215LWFjdGl2ZS1hcHBlYXInLFxuICAgKiAgYXBwZWFyRG9uZTogJ215LWRvbmUtYXBwZWFyJyxcbiAgICogIGVudGVyOiAnbXktZW50ZXInLFxuICAgKiAgZW50ZXJBY3RpdmU6ICdteS1hY3RpdmUtZW50ZXInLFxuICAgKiAgZW50ZXJEb25lOiAnbXktZG9uZS1lbnRlcicsXG4gICAqICBleGl0OiAnbXktZXhpdCcsXG4gICAqICBleGl0QWN0aXZlOiAnbXktYWN0aXZlLWV4aXQnLFxuICAgKiAgZXhpdERvbmU6ICdteS1kb25lLWV4aXQnLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gc2V0IHRoZXNlIGNsYXNzZXMgdXNpbmcgQ1NTIE1vZHVsZXM6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuY3NzJztcbiAgICogYGBgXG4gICAqXG4gICAqIHlvdSBtaWdodCB3YW50IHRvIHVzZSBjYW1lbENhc2UgaW4geW91ciBDU1MgZmlsZSwgdGhhdCB3YXkgY291bGQgc2ltcGx5XG4gICAqIHNwcmVhZCB0aGVtIGluc3RlYWQgb2YgbGlzdGluZyB0aGVtIG9uZSBieSBvbmU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3sgLi4uc3R5bGVzIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nIHwge1xuICAgKiAgYXBwZWFyPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyRG9uZT86IHN0cmluZyxcbiAgICogIGVudGVyPzogc3RyaW5nLFxuICAgKiAgZW50ZXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBlbnRlckRvbmU/OiBzdHJpbmcsXG4gICAqICBleGl0Pzogc3RyaW5nLFxuICAgKiAgZXhpdEFjdGl2ZT86IHN0cmluZyxcbiAgICogIGV4aXREb25lPzogc3RyaW5nLFxuICAgKiB9fVxuICAgKi9cbiAgY2xhc3NOYW1lczogX1Byb3BUeXBlcy5jbGFzc05hbWVzU2hhcGUsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3IgJ2FwcGVhcicgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlci1hY3RpdmUnIG9yXG4gICAqICdhcHBlYXItYWN0aXZlJyBjbGFzcyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyJyBvclxuICAgKiAnYXBwZWFyJyBjbGFzc2VzIGFyZSAqKnJlbW92ZWQqKiBhbmQgdGhlIGBkb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0JyBjbGFzcyBpc1xuICAgKiBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdleGl0LWFjdGl2ZScgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3Nlc1xuICAgKiBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZXhpdC1kb25lYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIG5vZGUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59KSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gQ1NTVHJhbnNpdGlvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghKDAsIF9oYXNDbGFzcy5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGA8UmVwbGFjZVRyYW5zaXRpb24+YCBjb21wb25lbnQgaXMgYSBzcGVjaWFsaXplZCBgVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiB0aGF0IGFuaW1hdGVzIGJldHdlZW4gdHdvIGNoaWxkcmVuLlxuICpcbiAqIGBgYGpzeFxuICogPFJlcGxhY2VUcmFuc2l0aW9uIGluPlxuICogICA8RmFkZT48ZGl2PkkgYXBwZWFyIGZpcnN0PC9kaXY+PC9GYWRlPlxuICogICA8RmFkZT48ZGl2PkkgcmVwbGFjZSB0aGUgYWJvdmU8L2Rpdj48L0ZhZGU+XG4gKiA8L1JlcGxhY2VUcmFuc2l0aW9uPlxuICogYGBgXG4gKi9cbnZhciBSZXBsYWNlVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSZXBsYWNlVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVwbGFjZVRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRW50ZXInLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyaW5nJywgMCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyZWQnLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdCcsIDEsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUxpZmVjeWNsZSgnb25FeGl0aW5nJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGVkJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXBsYWNlVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUxpZmVjeWNsZSA9IGZ1bmN0aW9uIGhhbmRsZUxpZmVjeWNsZShoYW5kbGVyLCBpZHgsIG9yaWdpbmFsQXJncykge1xuICAgIHZhciBfY2hpbGQkcHJvcHM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbilbaWR4XTtcblxuICAgIGlmIChjaGlsZC5wcm9wc1toYW5kbGVyXSkgKF9jaGlsZCRwcm9wcyA9IGNoaWxkLnByb3BzKVtoYW5kbGVyXS5hcHBseShfY2hpbGQkcHJvcHMsIG9yaWdpbmFsQXJncyk7XG4gICAgaWYgKHRoaXMucHJvcHNbaGFuZGxlcl0pIHRoaXMucHJvcHNbaGFuZGxlcl0oKDAsIF9yZWFjdERvbS5maW5kRE9NTm9kZSkodGhpcykpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaW5Qcm9wID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5cIl0pO1xuXG4gICAgdmFyIF9SZWFjdCRDaGlsZHJlbiR0b0FyciA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLFxuICAgICAgICBmaXJzdCA9IF9SZWFjdCRDaGlsZHJlbiR0b0FyclswXSxcbiAgICAgICAgc2Vjb25kID0gX1JlYWN0JENoaWxkcmVuJHRvQXJyWzFdO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgcHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBwcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIHByb3BzLm9uRXhpdGVkO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdCwgcHJvcHMsIGluUHJvcCA/IF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChmaXJzdCwge1xuICAgICAga2V5OiAnZmlyc3QnLFxuICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRW50ZXJpbmcsXG4gICAgICBvbkVudGVyZWQ6IHRoaXMuaGFuZGxlRW50ZXJlZFxuICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KHNlY29uZCwge1xuICAgICAga2V5OiAnc2Vjb25kJyxcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRXhpdCxcbiAgICAgIG9uRW50ZXJpbmc6IHRoaXMuaGFuZGxlRXhpdGluZyxcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFeGl0ZWRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlcGxhY2VUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZXBsYWNlVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgaWYgKF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KHByb3BzW3Byb3BOYW1lXSkgIT09IDIpIHJldHVybiBuZXcgRXJyb3IoXCJcXFwiXCIgKyBwcm9wTmFtZSArIFwiXFxcIiBtdXN0IGJlIGV4YWN0bHkgdHdvIHRyYW5zaXRpb24gY29tcG9uZW50cy5cIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFJlcGxhY2VUcmFuc2l0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcbmV4cG9ydHMuZ2V0SW5pdGlhbENoaWxkTWFwcGluZyA9IGdldEluaXRpYWxDaGlsZE1hcHBpbmc7XG5leHBvcnRzLmdldE5leHRDaGlsZE1hcHBpbmcgPSBnZXROZXh0Q2hpbGRNYXBwaW5nO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9ICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgRGVmYXVsdCBUb29sdGlwIENvbnRlbnRcbiAqL1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGlzTnVtT3JTdHIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRGb3JtYXR0ZXI8VD4odmFsdWU6IFQpIHtcbiAgcmV0dXJuIF8uaXNBcnJheSh2YWx1ZSkgJiYgaXNOdW1PclN0cih2YWx1ZVswXSkgJiYgaXNOdW1PclN0cih2YWx1ZVsxXSkgPyB2YWx1ZS5qb2luKCcgfiAnKSA6IHZhbHVlO1xufVxuXG5leHBvcnQgdHlwZSBUb29sdGlwVHlwZSA9ICdub25lJztcbmV4cG9ydCB0eXBlIFZhbHVlVHlwZSA9IG51bWJlciB8IHN0cmluZyB8IEFycmF5PG51bWJlciB8IHN0cmluZz47XG5leHBvcnQgdHlwZSBOYW1lVHlwZSA9IG51bWJlciB8IHN0cmluZztcbmV4cG9ydCB0eXBlIEZvcm1hdHRlcjxUVmFsdWUgZXh0ZW5kcyBWYWx1ZVR5cGUsIFROYW1lIGV4dGVuZHMgTmFtZVR5cGU+ID0gKFxuICB2YWx1ZTogVFZhbHVlLFxuICBuYW1lOiBUTmFtZSxcbiAgaXRlbTogUGF5bG9hZDxUVmFsdWUsIFROYW1lPixcbiAgaW5kZXg6IG51bWJlcixcbiAgcGF5bG9hZDogQXJyYXk8UGF5bG9hZDxUVmFsdWUsIFROYW1lPj4sXG4pID0+IFtSZWFjdE5vZGUsIFJlYWN0Tm9kZV0gfCBSZWFjdE5vZGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bG9hZDxUVmFsdWUgZXh0ZW5kcyBWYWx1ZVR5cGUsIFROYW1lIGV4dGVuZHMgTmFtZVR5cGU+IHtcbiAgdHlwZT86IFRvb2x0aXBUeXBlO1xuICBjb2xvcj86IHN0cmluZztcbiAgZm9ybWF0dGVyPzogRm9ybWF0dGVyPFRWYWx1ZSwgVE5hbWU+O1xuICBuYW1lPzogVE5hbWU7XG4gIHZhbHVlPzogVFZhbHVlO1xuICB1bml0PzogUmVhY3ROb2RlO1xuICBkYXRhS2V5Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBwYXlsb2FkPzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzPFRWYWx1ZSBleHRlbmRzIFZhbHVlVHlwZSwgVE5hbWUgZXh0ZW5kcyBOYW1lVHlwZT4ge1xuICBzZXBhcmF0b3I/OiBzdHJpbmc7XG4gIHdyYXBwZXJDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGxhYmVsQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBmb3JtYXR0ZXI/OiBGdW5jdGlvbjtcbiAgY29udGVudFN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgaXRlbVN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgbGFiZWxTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGxhYmVsRm9ybWF0dGVyPzogKGxhYmVsOiBhbnksIHBheWxvYWQ6IEFycmF5PFBheWxvYWQ8VFZhbHVlLCBUTmFtZT4+KSA9PiBSZWFjdE5vZGU7XG4gIGxhYmVsPzogYW55O1xuICBwYXlsb2FkPzogQXJyYXk8UGF5bG9hZDxUVmFsdWUsIFROYW1lPj47XG4gIGl0ZW1Tb3J0ZXI/OiAoaXRlbTogUGF5bG9hZDxUVmFsdWUsIFROYW1lPikgPT4gbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRvb2x0aXBDb250ZW50PFRWYWx1ZSBleHRlbmRzIFZhbHVlVHlwZSwgVE5hbWUgZXh0ZW5kcyBOYW1lVHlwZT4gZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFxuICBQcm9wczxUVmFsdWUsIFROYW1lPlxuPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdEZWZhdWx0VG9vbHRpcENvbnRlbnQnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc2VwYXJhdG9yOiAnIDogJyxcbiAgICBjb250ZW50U3R5bGU6IHt9LFxuICAgIGl0ZW1TdHlsZToge30sXG4gICAgbGFiZWxTdHlsZToge30sXG4gIH07XG5cbiAgcmVuZGVyQ29udGVudCgpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIHNlcGFyYXRvciwgZm9ybWF0dGVyLCBpdGVtU3R5bGUsIGl0ZW1Tb3J0ZXIgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGlzdFN0eWxlID0geyBwYWRkaW5nOiAwLCBtYXJnaW46IDAgfTtcblxuICAgICAgY29uc3QgaXRlbXMgPSAoaXRlbVNvcnRlciA/IF8uc29ydEJ5KHBheWxvYWQsIGl0ZW1Tb3J0ZXIpIDogcGF5bG9hZCkubWFwKChlbnRyeSwgaSkgPT4ge1xuICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaW5hbEl0ZW1TdHlsZSA9IHtcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgIHBhZGRpbmdUb3A6IDQsXG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogNCxcbiAgICAgICAgICBjb2xvcjogZW50cnkuY29sb3IgfHwgJyMwMDAnLFxuICAgICAgICAgIC4uLml0ZW1TdHlsZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmluYWxGb3JtYXR0ZXIgPSBlbnRyeS5mb3JtYXR0ZXIgfHwgZm9ybWF0dGVyIHx8IGRlZmF1bHRGb3JtYXR0ZXI7XG4gICAgICAgIGxldCB7IG5hbWUsIHZhbHVlIH0gPSBlbnRyeTtcbiAgICAgICAgaWYgKGZpbmFsRm9ybWF0dGVyKSB7XG4gICAgICAgICAgY29uc3QgZm9ybWF0dGVkID0gZmluYWxGb3JtYXR0ZXIodmFsdWUsIG5hbWUsIGVudHJ5LCBpLCBwYXlsb2FkKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb3JtYXR0ZWQpKSB7XG4gICAgICAgICAgICBbdmFsdWUsIG5hbWVdID0gZm9ybWF0dGVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZvcm1hdHRlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInJlY2hhcnRzLXRvb2x0aXAtaXRlbVwiIGtleT17YHRvb2x0aXAtaXRlbS0ke2l9YH0gc3R5bGU9e2ZpbmFsSXRlbVN0eWxlfT5cbiAgICAgICAgICAgIHtpc051bU9yU3RyKG5hbWUpID8gPHNwYW4gY2xhc3NOYW1lPVwicmVjaGFydHMtdG9vbHRpcC1pdGVtLW5hbWVcIj57bmFtZX08L3NwYW4+IDogbnVsbH1cbiAgICAgICAgICAgIHtpc051bU9yU3RyKG5hbWUpID8gPHNwYW4gY2xhc3NOYW1lPVwicmVjaGFydHMtdG9vbHRpcC1pdGVtLXNlcGFyYXRvclwiPntzZXBhcmF0b3J9PC9zcGFuPiA6IG51bGx9XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWNoYXJ0cy10b29sdGlwLWl0ZW0tdmFsdWVcIj57dmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVjaGFydHMtdG9vbHRpcC1pdGVtLXVuaXRcIj57ZW50cnkudW5pdCB8fCAnJ308L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwicmVjaGFydHMtdG9vbHRpcC1pdGVtLWxpc3RcIiBzdHlsZT17bGlzdFN0eWxlfT5cbiAgICAgICAgICB7aXRlbXN9XG4gICAgICAgIDwvdWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgd3JhcHBlckNsYXNzTmFtZSwgY29udGVudFN0eWxlLCBsYWJlbENsYXNzTmFtZSwgbGFiZWxTdHlsZSwgbGFiZWwsIGxhYmVsRm9ybWF0dGVyLCBwYXlsb2FkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZpbmFsU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2MnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAuLi5jb250ZW50U3R5bGUsXG4gICAgfTtcbiAgICBjb25zdCBmaW5hbExhYmVsU3R5bGUgPSB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICAuLi5sYWJlbFN0eWxlLFxuICAgIH07XG4gICAgY29uc3QgaGFzTGFiZWwgPSAhXy5pc05pbChsYWJlbCk7XG4gICAgbGV0IGZpbmFsTGFiZWwgPSBoYXNMYWJlbCA/IGxhYmVsIDogJyc7XG4gICAgY29uc3Qgd3JhcHBlckNOID0gY2xhc3NOYW1lcygncmVjaGFydHMtZGVmYXVsdC10b29sdGlwJywgd3JhcHBlckNsYXNzTmFtZSk7XG4gICAgY29uc3QgbGFiZWxDTiA9IGNsYXNzTmFtZXMoJ3JlY2hhcnRzLXRvb2x0aXAtbGFiZWwnLCBsYWJlbENsYXNzTmFtZSk7XG5cbiAgICBpZiAoaGFzTGFiZWwgJiYgbGFiZWxGb3JtYXR0ZXIpIHtcbiAgICAgIGZpbmFsTGFiZWwgPSBsYWJlbEZvcm1hdHRlcihsYWJlbCwgcGF5bG9hZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXt3cmFwcGVyQ059IHN0eWxlPXtmaW5hbFN0eWxlfT5cbiAgICAgICAgPHAgY2xhc3NOYW1lPXtsYWJlbENOfSBzdHlsZT17ZmluYWxMYWJlbFN0eWxlfT5cbiAgICAgICAgICB7UmVhY3QuaXNWYWxpZEVsZW1lbnQoZmluYWxMYWJlbCkgPyBmaW5hbExhYmVsIDogYCR7ZmluYWxMYWJlbH1gfVxuICAgICAgICA8L3A+XG4gICAgICAgIHt0aGlzLnJlbmRlckNvbnRlbnQoKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVPdmVydmlldyBXcmFwcGVyIGNvbXBvbmVudCB0byBtYWtlIGNoYXJ0cyBhZGFwdCB0byB0aGUgc2l6ZSBvZiBwYXJlbnQgKiBET01cbiAqL1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0UmVzaXplRGV0ZWN0b3IgZnJvbSAncmVhY3QtcmVzaXplLWRldGVjdG9yJztcbmltcG9ydCB7IGlzUGVyY2VudCB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi91dGlsL0xvZ1V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIGFzcGVjdD86IG51bWJlcjtcbiAgd2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgbWluV2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XG4gIG1pbkhlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgbWF4SGVpZ2h0PzogbnVtYmVyO1xuICBjaGlsZHJlbjogUmVhY3RFbGVtZW50O1xuICBkZWJvdW5jZT86IG51bWJlcjtcbiAgaWQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGNsYXNzTmFtZT86IHN0cmluZyB8IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgY29udGFpbmVyV2lkdGg6IG51bWJlcjtcbiAgY29udGFpbmVySGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgZGVib3VuY2U6IDAsXG4gIH07XG5cbiAgcHJpdmF0ZSBoYW5kbGVSZXNpemU6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBtb3VudGVkOiBib29sZWFuO1xuXG4gIHByaXZhdGUgY29udGFpbmVyUmVmOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjb250YWluZXJXaWR0aDogLTEsXG4gICAgICBjb250YWluZXJIZWlnaHQ6IC0xLFxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZVJlc2l6ZSA9XG4gICAgICBwcm9wcy5kZWJvdW5jZSA+IDAgPyBfLmRlYm91bmNlKHRoaXMudXBkYXRlRGltZW5zaW9uc0ltbWVkaWF0ZSwgcHJvcHMuZGVib3VuY2UpIDogdGhpcy51cGRhdGVEaW1lbnNpb25zSW1tZWRpYXRlO1xuXG4gICAgdGhpcy5jb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSAgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZSAqL1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0Q29udGFpbmVyU2l6ZSgpO1xuXG4gICAgaWYgKHNpemUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH1cblxuICBnZXRDb250YWluZXJTaXplKCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXJSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lcldpZHRoOiB0aGlzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxuICAgICAgY29udGFpbmVySGVpZ2h0OiB0aGlzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlRGltZW5zaW9uc0ltbWVkaWF0ZSA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMubW91bnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLmdldENvbnRhaW5lclNpemUoKTtcblxuICAgIGlmIChuZXdTaXplKSB7XG4gICAgICBjb25zdCB7IGNvbnRhaW5lcldpZHRoOiBvbGRXaWR0aCwgY29udGFpbmVySGVpZ2h0OiBvbGRIZWlnaHQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCB7IGNvbnRhaW5lcldpZHRoLCBjb250YWluZXJIZWlnaHQgfSA9IG5ld1NpemU7XG5cbiAgICAgIGlmIChjb250YWluZXJXaWR0aCAhPT0gb2xkV2lkdGggfHwgY29udGFpbmVySGVpZ2h0ICE9PSBvbGRIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbnRhaW5lcldpZHRoLCBjb250YWluZXJIZWlnaHQgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlckNoYXJ0KCkge1xuICAgIGNvbnN0IHsgY29udGFpbmVyV2lkdGgsIGNvbnRhaW5lckhlaWdodCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChjb250YWluZXJXaWR0aCA8IDAgfHwgY29udGFpbmVySGVpZ2h0IDwgMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBhc3BlY3QsIHdpZHRoLCBoZWlnaHQsIG1pbldpZHRoLCBtaW5IZWlnaHQsIG1heEhlaWdodCwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICB3YXJuKFxuICAgICAgaXNQZXJjZW50KHdpZHRoKSB8fCBpc1BlcmNlbnQoaGVpZ2h0KSxcbiAgICAgIGBUaGUgd2lkdGgoJXMpIGFuZCBoZWlnaHQoJXMpIGFyZSBib3RoIGZpeGVkIG51bWJlcnMsXG4gICAgICAgbWF5YmUgeW91IGRvbid0IG5lZWQgdG8gdXNlIGEgUmVzcG9uc2l2ZUNvbnRhaW5lci5gLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgKTtcblxuICAgIHdhcm4oIWFzcGVjdCB8fCBhc3BlY3QgPiAwLCAnVGhlIGFzcGVjdCglcykgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4nLCBhc3BlY3QpO1xuXG4gICAgbGV0IGNhbGN1bGF0ZWRXaWR0aDogbnVtYmVyID0gaXNQZXJjZW50KHdpZHRoKSA/IGNvbnRhaW5lcldpZHRoIDogKHdpZHRoIGFzIG51bWJlcik7XG4gICAgbGV0IGNhbGN1bGF0ZWRIZWlnaHQ6IG51bWJlciA9IGlzUGVyY2VudChoZWlnaHQpID8gY29udGFpbmVySGVpZ2h0IDogKGhlaWdodCBhcyBudW1iZXIpO1xuXG4gICAgaWYgKGFzcGVjdCAmJiBhc3BlY3QgPiAwKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSB0aGUgZGVzaXJlZCBhc3BlY3QgcmF0aW9cbiAgICAgIGlmIChjYWxjdWxhdGVkV2lkdGgpIHtcbiAgICAgICAgLy8gV2lsbCBkZWZhdWx0IHRvIHVzaW5nIHdpZHRoIGZvciBhc3BlY3QgcmF0aW9cbiAgICAgICAgY2FsY3VsYXRlZEhlaWdodCA9IGNhbGN1bGF0ZWRXaWR0aCAvIGFzcGVjdDtcbiAgICAgIH0gZWxzZSBpZiAoY2FsY3VsYXRlZEhlaWdodCkge1xuICAgICAgICAvLyBCdXQgd2Ugc2hvdWxkIGFsc28gdGFrZSBoZWlnaHQgaW50byBjb25zaWRlcmF0aW9uXG4gICAgICAgIGNhbGN1bGF0ZWRXaWR0aCA9IGNhbGN1bGF0ZWRIZWlnaHQgKiBhc3BlY3Q7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIG1heEhlaWdodCBpcyBzZXQsIG92ZXJ3cml0ZSBpZiBjYWxjdWxhdGVkSGVpZ2h0IGlzIGdyZWF0ZXIgdGhhbiBtYXhIZWlnaHRcbiAgICAgIGlmIChtYXhIZWlnaHQgJiYgY2FsY3VsYXRlZEhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICBjYWxjdWxhdGVkSGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHdhcm4oXG4gICAgICBjYWxjdWxhdGVkV2lkdGggPiAwIHx8IGNhbGN1bGF0ZWRIZWlnaHQgPiAwLFxuICAgICAgYFRoZSB3aWR0aCglcykgYW5kIGhlaWdodCglcykgb2YgY2hhcnQgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiAwLFxuICAgICAgIHBsZWFzZSBjaGVjayB0aGUgc3R5bGUgb2YgY29udGFpbmVyLCBvciB0aGUgcHJvcHMgd2lkdGgoJXMpIGFuZCBoZWlnaHQoJXMpLFxuICAgICAgIG9yIGFkZCBhIG1pbldpZHRoKCVzKSBvciBtaW5IZWlnaHQoJXMpIG9yIHVzZSBhc3BlY3QoJXMpIHRvIGNvbnRyb2wgdGhlXG4gICAgICAgaGVpZ2h0IGFuZCB3aWR0aC5gLFxuICAgICAgY2FsY3VsYXRlZFdpZHRoLFxuICAgICAgY2FsY3VsYXRlZEhlaWdodCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbWluV2lkdGgsXG4gICAgICBtaW5IZWlnaHQsXG4gICAgICBhc3BlY3QsXG4gICAgKTtcblxuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIHdpZHRoOiBjYWxjdWxhdGVkV2lkdGgsXG4gICAgICBoZWlnaHQ6IGNhbGN1bGF0ZWRIZWlnaHQsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBtaW5XaWR0aCwgbWluSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIGlkLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3R5bGUgPSB7IHdpZHRoLCBoZWlnaHQsIG1pbldpZHRoLCBtaW5IZWlnaHQsIG1heEhlaWdodCB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdFJlc2l6ZURldGVjdG9yIGhhbmRsZVdpZHRoIGhhbmRsZUhlaWdodCBvblJlc2l6ZT17dGhpcy5oYW5kbGVSZXNpemV9IHRhcmdldFJlZj17dGhpcy5jb250YWluZXJSZWZ9PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgaWQ9e2Ake2lkfWB9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy1yZXNwb25zaXZlLWNvbnRhaW5lcicsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICAgIHJlZj17dGhpcy5jb250YWluZXJSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJDaGFydCgpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUmVhY3RSZXNpemVEZXRlY3Rvcj5cbiAgICApO1xuICB9XG59XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wb3N0Y3NzVmFsdWVQYXJzZXIgPSByZXF1aXJlKCdwb3N0Y3NzLXZhbHVlLXBhcnNlcicpO1xuXG52YXIgX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3N0Y3NzVmFsdWVQYXJzZXIpO1xuXG52YXIgX3BhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG5cbnZhciBfcmVkdWNlciA9IHJlcXVpcmUoJy4vbGliL3JlZHVjZXInKTtcblxudmFyIF9yZWR1Y2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZHVjZXIpO1xuXG52YXIgX3N0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9saWIvc3RyaW5naWZpZXInKTtcblxudmFyIF9zdHJpbmdpZmllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZmllcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBNQVRDSF9DQUxDID0gLygoPzpcXC1bYS16XStcXC0pP2NhbGMpLztcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmVjaXNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDU7XG5cbiAgcmV0dXJuICgwLCBfcG9zdGNzc1ZhbHVlUGFyc2VyMi5kZWZhdWx0KSh2YWx1ZSkud2FsayhmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIHNraXAgYW55dGhpbmcgd2hpY2ggaXNuJ3QgYSBjYWxjKCkgZnVuY3Rpb25cbiAgICBpZiAobm9kZS50eXBlICE9PSAnZnVuY3Rpb24nIHx8ICFNQVRDSF9DQUxDLnRlc3Qobm9kZS52YWx1ZSkpIHJldHVybjtcblxuICAgIC8vIHN0cmluZ2lmeSBjYWxjIGV4cHJlc3Npb24gYW5kIHByb2R1Y2UgYW4gQVNUXG4gICAgdmFyIGNvbnRlbnRzID0gX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIuZGVmYXVsdC5zdHJpbmdpZnkobm9kZS5ub2Rlcyk7XG5cbiAgICAvLyBza2lwIGNvbnN0YW50KCkgYW5kIGVudigpXG4gICAgaWYgKGNvbnRlbnRzLmluZGV4T2YoJ2NvbnN0YW50JykgPj0gMCB8fCBjb250ZW50cy5pbmRleE9mKCdlbnYnKSA+PSAwKSByZXR1cm47XG5cbiAgICB2YXIgYXN0ID0gX3BhcnNlci5wYXJzZXIucGFyc2UoY29udGVudHMpO1xuXG4gICAgLy8gcmVkdWNlIEFTVCB0byBpdHMgc2ltcGxlc3QgZm9ybSwgdGhhdCBpcywgZWl0aGVyIHRvIGEgc2luZ2xlIHZhbHVlXG4gICAgLy8gb3IgYSBzaW1wbGlmaWVkIGNhbGMgZXhwcmVzc2lvblxuICAgIHZhciByZWR1Y2VkQXN0ID0gKDAsIF9yZWR1Y2VyMi5kZWZhdWx0KShhc3QsIHByZWNpc2lvbik7XG5cbiAgICAvLyBzdHJpbmdpZnkgQVNUIGFuZCB3cml0ZSBpdCBiYWNrXG4gICAgbm9kZS50eXBlID0gJ3dvcmQnO1xuICAgIG5vZGUudmFsdWUgPSAoMCwgX3N0cmluZ2lmaWVyMi5kZWZhdWx0KShub2RlLnZhbHVlLCByZWR1Y2VkQXN0LCBwcmVjaXNpb24pO1xuICB9LCB0cnVlKS50b1N0cmluZygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwidmFyIHBhcnNlID0gcmVxdWlyZShcIi4vcGFyc2VcIik7XG52YXIgd2FsayA9IHJlcXVpcmUoXCIuL3dhbGtcIik7XG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpO1xuXG5mdW5jdGlvbiBWYWx1ZVBhcnNlcih2YWx1ZSkge1xuICBpZiAodGhpcyBpbnN0YW5jZW9mIFZhbHVlUGFyc2VyKSB7XG4gICAgdGhpcy5ub2RlcyA9IHBhcnNlKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gbmV3IFZhbHVlUGFyc2VyKHZhbHVlKTtcbn1cblxuVmFsdWVQYXJzZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMubm9kZXMpID8gc3RyaW5naWZ5KHRoaXMubm9kZXMpIDogXCJcIjtcbn07XG5cblZhbHVlUGFyc2VyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24oY2IsIGJ1YmJsZSkge1xuICB3YWxrKHRoaXMubm9kZXMsIGNiLCBidWJibGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblZhbHVlUGFyc2VyLnVuaXQgPSByZXF1aXJlKFwiLi91bml0XCIpO1xuXG5WYWx1ZVBhcnNlci53YWxrID0gd2FsaztcblxuVmFsdWVQYXJzZXIuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbHVlUGFyc2VyO1xuIiwidmFyIG9wZW5QYXJlbnRoZXNlcyA9IFwiKFwiLmNoYXJDb2RlQXQoMCk7XG52YXIgY2xvc2VQYXJlbnRoZXNlcyA9IFwiKVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgc2luZ2xlUXVvdGUgPSBcIidcIi5jaGFyQ29kZUF0KDApO1xudmFyIGRvdWJsZVF1b3RlID0gJ1wiJy5jaGFyQ29kZUF0KDApO1xudmFyIGJhY2tzbGFzaCA9IFwiXFxcXFwiLmNoYXJDb2RlQXQoMCk7XG52YXIgc2xhc2ggPSBcIi9cIi5jaGFyQ29kZUF0KDApO1xudmFyIGNvbW1hID0gXCIsXCIuY2hhckNvZGVBdCgwKTtcbnZhciBjb2xvbiA9IFwiOlwiLmNoYXJDb2RlQXQoMCk7XG52YXIgc3RhciA9IFwiKlwiLmNoYXJDb2RlQXQoMCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgdmFsdWUgPSBpbnB1dDtcblxuICB2YXIgbmV4dCwgcXVvdGUsIHByZXYsIHRva2VuLCBlc2NhcGUsIGVzY2FwZVBvcywgd2hpdGVzcGFjZVBvcztcbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuICB2YXIgbWF4ID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3RhY2sgPSBbeyBub2RlczogdG9rZW5zIH1dO1xuICB2YXIgYmFsYW5jZWQgPSAwO1xuICB2YXIgcGFyZW50O1xuXG4gIHZhciBuYW1lID0gXCJcIjtcbiAgdmFyIGJlZm9yZSA9IFwiXCI7XG4gIHZhciBhZnRlciA9IFwiXCI7XG5cbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIC8vIFdoaXRlc3BhY2VzXG4gICAgaWYgKGNvZGUgPD0gMzIpIHtcbiAgICAgIG5leHQgPSBwb3M7XG4gICAgICBkbyB7XG4gICAgICAgIG5leHQgKz0gMTtcbiAgICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQobmV4dCk7XG4gICAgICB9IHdoaWxlIChjb2RlIDw9IDMyKTtcbiAgICAgIHRva2VuID0gdmFsdWUuc2xpY2UocG9zLCBuZXh0KTtcblxuICAgICAgcHJldiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoY29kZSA9PT0gY2xvc2VQYXJlbnRoZXNlcyAmJiBiYWxhbmNlZCkge1xuICAgICAgICBhZnRlciA9IHRva2VuO1xuICAgICAgfSBlbHNlIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gXCJkaXZcIikge1xuICAgICAgICBwcmV2LmFmdGVyID0gdG9rZW47XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBjb2RlID09PSBjb21tYSB8fFxuICAgICAgICBjb2RlID09PSBjb2xvbiB8fFxuICAgICAgICAoY29kZSA9PT0gc2xhc2ggJiYgdmFsdWUuY2hhckNvZGVBdChuZXh0ICsgMSkgIT09IHN0YXIpXG4gICAgICApIHtcbiAgICAgICAgYmVmb3JlID0gdG9rZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJzcGFjZVwiLFxuICAgICAgICAgIHNvdXJjZUluZGV4OiBwb3MsXG4gICAgICAgICAgdmFsdWU6IHRva2VuXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBwb3MgPSBuZXh0O1xuXG4gICAgICAvLyBRdW90ZXNcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IHNpbmdsZVF1b3RlIHx8IGNvZGUgPT09IGRvdWJsZVF1b3RlKSB7XG4gICAgICBuZXh0ID0gcG9zO1xuICAgICAgcXVvdGUgPSBjb2RlID09PSBzaW5nbGVRdW90ZSA/IFwiJ1wiIDogJ1wiJztcbiAgICAgIHRva2VuID0ge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBzb3VyY2VJbmRleDogcG9zLFxuICAgICAgICBxdW90ZTogcXVvdGVcbiAgICAgIH07XG4gICAgICBkbyB7XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihxdW90ZSwgbmV4dCArIDEpO1xuICAgICAgICBpZiAofm5leHQpIHtcbiAgICAgICAgICBlc2NhcGVQb3MgPSBuZXh0O1xuICAgICAgICAgIHdoaWxlICh2YWx1ZS5jaGFyQ29kZUF0KGVzY2FwZVBvcyAtIDEpID09PSBiYWNrc2xhc2gpIHtcbiAgICAgICAgICAgIGVzY2FwZVBvcyAtPSAxO1xuICAgICAgICAgICAgZXNjYXBlID0gIWVzY2FwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKz0gcXVvdGU7XG4gICAgICAgICAgbmV4dCA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgdG9rZW4udW5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChlc2NhcGUpO1xuICAgICAgdG9rZW4udmFsdWUgPSB2YWx1ZS5zbGljZShwb3MgKyAxLCBuZXh0KTtcblxuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgcG9zID0gbmV4dCArIDE7XG4gICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgICAvLyBDb21tZW50c1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gc2xhc2ggJiYgdmFsdWUuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gc3Rhcikge1xuICAgICAgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IFwiY29tbWVudFwiLFxuICAgICAgICBzb3VyY2VJbmRleDogcG9zXG4gICAgICB9O1xuXG4gICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihcIiovXCIsIHBvcyk7XG4gICAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgICAgdG9rZW4udW5jbG9zZWQgPSB0cnVlO1xuICAgICAgICBuZXh0ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi52YWx1ZSA9IHZhbHVlLnNsaWNlKHBvcyArIDIsIG5leHQpO1xuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuXG4gICAgICBwb3MgPSBuZXh0ICsgMjtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIC8vIERpdmlkZXJzXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBzbGFzaCB8fCBjb2RlID09PSBjb21tYSB8fCBjb2RlID09PSBjb2xvbikge1xuICAgICAgdG9rZW4gPSB2YWx1ZVtwb3NdO1xuXG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IFwiZGl2XCIsXG4gICAgICAgIHNvdXJjZUluZGV4OiBwb3MgLSBiZWZvcmUubGVuZ3RoLFxuICAgICAgICB2YWx1ZTogdG9rZW4sXG4gICAgICAgIGJlZm9yZTogYmVmb3JlLFxuICAgICAgICBhZnRlcjogXCJcIlxuICAgICAgfSk7XG4gICAgICBiZWZvcmUgPSBcIlwiO1xuXG4gICAgICBwb3MgKz0gMTtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIC8vIE9wZW4gcGFyZW50aGVzZXNcbiAgICB9IGVsc2UgaWYgKG9wZW5QYXJlbnRoZXNlcyA9PT0gY29kZSkge1xuICAgICAgLy8gV2hpdGVzcGFjZXMgYWZ0ZXIgb3BlbiBwYXJlbnRoZXNlc1xuICAgICAgbmV4dCA9IHBvcztcbiAgICAgIGRvIHtcbiAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgIH0gd2hpbGUgKGNvZGUgPD0gMzIpO1xuICAgICAgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgc291cmNlSW5kZXg6IHBvcyAtIG5hbWUubGVuZ3RoLFxuICAgICAgICB2YWx1ZTogbmFtZSxcbiAgICAgICAgYmVmb3JlOiB2YWx1ZS5zbGljZShwb3MgKyAxLCBuZXh0KVxuICAgICAgfTtcbiAgICAgIHBvcyA9IG5leHQ7XG5cbiAgICAgIGlmIChuYW1lID09PSBcInVybFwiICYmIGNvZGUgIT09IHNpbmdsZVF1b3RlICYmIGNvZGUgIT09IGRvdWJsZVF1b3RlKSB7XG4gICAgICAgIG5leHQgLT0gMTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgICAgIG5leHQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBuZXh0ICsgMSk7XG4gICAgICAgICAgaWYgKH5uZXh0KSB7XG4gICAgICAgICAgICBlc2NhcGVQb3MgPSBuZXh0O1xuICAgICAgICAgICAgd2hpbGUgKHZhbHVlLmNoYXJDb2RlQXQoZXNjYXBlUG9zIC0gMSkgPT09IGJhY2tzbGFzaCkge1xuICAgICAgICAgICAgICBlc2NhcGVQb3MgLT0gMTtcbiAgICAgICAgICAgICAgZXNjYXBlID0gIWVzY2FwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgKz0gXCIpXCI7XG4gICAgICAgICAgICBuZXh0ID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRva2VuLnVuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGVzY2FwZSk7XG4gICAgICAgIC8vIFdoaXRlc3BhY2VzIGJlZm9yZSBjbG9zZWRcbiAgICAgICAgd2hpdGVzcGFjZVBvcyA9IG5leHQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB3aGl0ZXNwYWNlUG9zIC09IDE7XG4gICAgICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQod2hpdGVzcGFjZVBvcyk7XG4gICAgICAgIH0gd2hpbGUgKGNvZGUgPD0gMzIpO1xuICAgICAgICBpZiAocG9zICE9PSB3aGl0ZXNwYWNlUG9zICsgMSkge1xuICAgICAgICAgIHRva2VuLm5vZGVzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0eXBlOiBcIndvcmRcIixcbiAgICAgICAgICAgICAgc291cmNlSW5kZXg6IHBvcyxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnNsaWNlKHBvcywgd2hpdGVzcGFjZVBvcyArIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbi5ub2RlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbi51bmNsb3NlZCAmJiB3aGl0ZXNwYWNlUG9zICsgMSAhPT0gbmV4dCkge1xuICAgICAgICAgIHRva2VuLmFmdGVyID0gXCJcIjtcbiAgICAgICAgICB0b2tlbi5ub2Rlcy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwic3BhY2VcIixcbiAgICAgICAgICAgIHNvdXJjZUluZGV4OiB3aGl0ZXNwYWNlUG9zICsgMSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS5zbGljZSh3aGl0ZXNwYWNlUG9zICsgMSwgbmV4dClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbi5hZnRlciA9IHZhbHVlLnNsaWNlKHdoaXRlc3BhY2VQb3MgKyAxLCBuZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgPSBuZXh0ICsgMTtcbiAgICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFsYW5jZWQgKz0gMTtcbiAgICAgICAgdG9rZW4uYWZ0ZXIgPSBcIlwiO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIHN0YWNrLnB1c2godG9rZW4pO1xuICAgICAgICB0b2tlbnMgPSB0b2tlbi5ub2RlcyA9IFtdO1xuICAgICAgICBwYXJlbnQgPSB0b2tlbjtcbiAgICAgIH1cbiAgICAgIG5hbWUgPSBcIlwiO1xuXG4gICAgICAvLyBDbG9zZSBwYXJlbnRoZXNlc1xuICAgIH0gZWxzZSBpZiAoY2xvc2VQYXJlbnRoZXNlcyA9PT0gY29kZSAmJiBiYWxhbmNlZCkge1xuICAgICAgcG9zICs9IDE7XG4gICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgICBwYXJlbnQuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgIGFmdGVyID0gXCJcIjtcbiAgICAgIGJhbGFuY2VkIC09IDE7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICAgIHBhcmVudCA9IHN0YWNrW2JhbGFuY2VkXTtcbiAgICAgIHRva2VucyA9IHBhcmVudC5ub2RlcztcblxuICAgICAgLy8gV29yZHNcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCA9IHBvcztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IGJhY2tzbGFzaCkge1xuICAgICAgICAgIG5leHQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KG5leHQpO1xuICAgICAgfSB3aGlsZSAoXG4gICAgICAgIG5leHQgPCBtYXggJiZcbiAgICAgICAgIShcbiAgICAgICAgICBjb2RlIDw9IDMyIHx8XG4gICAgICAgICAgY29kZSA9PT0gc2luZ2xlUXVvdGUgfHxcbiAgICAgICAgICBjb2RlID09PSBkb3VibGVRdW90ZSB8fFxuICAgICAgICAgIGNvZGUgPT09IGNvbW1hIHx8XG4gICAgICAgICAgY29kZSA9PT0gY29sb24gfHxcbiAgICAgICAgICBjb2RlID09PSBzbGFzaCB8fFxuICAgICAgICAgIGNvZGUgPT09IG9wZW5QYXJlbnRoZXNlcyB8fFxuICAgICAgICAgIChjb2RlID09PSBjbG9zZVBhcmVudGhlc2VzICYmIGJhbGFuY2VkKVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgdG9rZW4gPSB2YWx1ZS5zbGljZShwb3MsIG5leHQpO1xuXG4gICAgICBpZiAob3BlblBhcmVudGhlc2VzID09PSBjb2RlKSB7XG4gICAgICAgIG5hbWUgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcIndvcmRcIixcbiAgICAgICAgICBzb3VyY2VJbmRleDogcG9zLFxuICAgICAgICAgIHZhbHVlOiB0b2tlblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcG9zID0gbmV4dDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvczsgcG9zIC09IDEpIHtcbiAgICBzdGFja1twb3NdLnVuY2xvc2VkID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBzdGFja1swXS5ub2Rlcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdhbGsobm9kZXMsIGNiLCBidWJibGUpIHtcbiAgdmFyIGksIG1heCwgbm9kZSwgcmVzdWx0O1xuXG4gIGZvciAoaSA9IDAsIG1heCA9IG5vZGVzLmxlbmd0aDsgaSA8IG1heDsgaSArPSAxKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmICghYnViYmxlKSB7XG4gICAgICByZXN1bHQgPSBjYihub2RlLCBpLCBub2Rlcyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcmVzdWx0ICE9PSBmYWxzZSAmJlxuICAgICAgbm9kZS50eXBlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcylcbiAgICApIHtcbiAgICAgIHdhbGsobm9kZS5ub2RlcywgY2IsIGJ1YmJsZSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1YmJsZSkge1xuICAgICAgY2Iobm9kZSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxufTtcbiIsImZ1bmN0aW9uIHN0cmluZ2lmeU5vZGUobm9kZSwgY3VzdG9tKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlO1xuICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICB2YXIgYnVmO1xuICB2YXIgY3VzdG9tUmVzdWx0O1xuXG4gIGlmIChjdXN0b20gJiYgKGN1c3RvbVJlc3VsdCA9IGN1c3RvbShub2RlKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjdXN0b21SZXN1bHQ7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ3b3JkXCIgfHwgdHlwZSA9PT0gXCJzcGFjZVwiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBidWYgPSBub2RlLnF1b3RlIHx8IFwiXCI7XG4gICAgcmV0dXJuIGJ1ZiArIHZhbHVlICsgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogYnVmKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImNvbW1lbnRcIikge1xuICAgIHJldHVybiBcIi8qXCIgKyB2YWx1ZSArIChub2RlLnVuY2xvc2VkID8gXCJcIiA6IFwiKi9cIik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkaXZcIikge1xuICAgIHJldHVybiAobm9kZS5iZWZvcmUgfHwgXCJcIikgKyB2YWx1ZSArIChub2RlLmFmdGVyIHx8IFwiXCIpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcykpIHtcbiAgICBidWYgPSBzdHJpbmdpZnkobm9kZS5ub2Rlcyk7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbHVlICtcbiAgICAgIFwiKFwiICtcbiAgICAgIChub2RlLmJlZm9yZSB8fCBcIlwiKSArXG4gICAgICBidWYgK1xuICAgICAgKG5vZGUuYWZ0ZXIgfHwgXCJcIikgK1xuICAgICAgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogXCIpXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlcywgY3VzdG9tKSB7XG4gIHZhciByZXN1bHQsIGk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSBub2Rlcy5sZW5ndGggLSAxOyB+aTsgaSAtPSAxKSB7XG4gICAgICByZXN1bHQgPSBzdHJpbmdpZnlOb2RlKG5vZGVzW2ldLCBjdXN0b20pICsgcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBzdHJpbmdpZnlOb2RlKG5vZGVzLCBjdXN0b20pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeTtcbiIsInZhciBtaW51cyA9IFwiLVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgcGx1cyA9IFwiK1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgZG90ID0gXCIuXCIuY2hhckNvZGVBdCgwKTtcbnZhciBleHAgPSBcImVcIi5jaGFyQ29kZUF0KDApO1xudmFyIEVYUCA9IFwiRVwiLmNoYXJDb2RlQXQoMCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBkb3R0ZWQgPSBmYWxzZTtcbiAgdmFyIHNjaVBvcyA9IC0xO1xuICB2YXIgY29udGFpbnNOdW1iZXIgPSBmYWxzZTtcbiAgdmFyIGNvZGU7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7XG4gICAgICBjb250YWluc051bWJlciA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBleHAgfHwgY29kZSA9PT0gRVhQKSB7XG4gICAgICBpZiAoc2NpUG9zID4gLTEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzY2lQb3MgPSBwb3M7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBkb3QpIHtcbiAgICAgIGlmIChkb3R0ZWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkb3R0ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gcGx1cyB8fCBjb2RlID09PSBtaW51cykge1xuICAgICAgaWYgKHBvcyAhPT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9zICs9IDE7XG4gIH1cblxuICBpZiAoc2NpUG9zICsgMSA9PT0gcG9zKSBwb3MtLTtcblxuICByZXR1cm4gY29udGFpbnNOdW1iZXJcbiAgICA/IHtcbiAgICAgICAgbnVtYmVyOiB2YWx1ZS5zbGljZSgwLCBwb3MpLFxuICAgICAgICB1bml0OiB2YWx1ZS5zbGljZShwb3MpXG4gICAgICB9XG4gICAgOiBmYWxzZTtcbn07XG4iLCJcbi8qIHBhcnNlciBnZW5lcmF0ZWQgYnkgamlzb24gMC42LjEtMjE1ICovXG5cbi8qXG4gKiBSZXR1cm5zIGEgUGFyc2VyIG9iamVjdCBvZiB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbiAqXG4gKiAgUGFyc2VyOiB7XG4gKiAgICB5eToge30gICAgIFRoZSBzby1jYWxsZWQgXCJzaGFyZWQgc3RhdGVcIiBvciByYXRoZXIgdGhlICpzb3VyY2UqIG9mIGl0O1xuICogICAgICAgICAgICAgICB0aGUgcmVhbCBcInNoYXJlZCBzdGF0ZVwiIGB5eWAgcGFzc2VkIGFyb3VuZCB0b1xuICogICAgICAgICAgICAgICB0aGUgcnVsZSBhY3Rpb25zLCBldGMuIGlzIGEgZGVyaXZhdGl2ZS9jb3B5IG9mIHRoaXMgb25lLFxuICogICAgICAgICAgICAgICBub3QgYSBkaXJlY3QgcmVmZXJlbmNlIVxuICogIH1cbiAqXG4gKiAgUGFyc2VyLnByb3RvdHlwZToge1xuICogICAgeXk6IHt9LFxuICogICAgRU9GOiAxLFxuICogICAgVEVSUk9SOiAyLFxuICpcbiAqICAgIHRyYWNlOiBmdW5jdGlvbihlcnJvck1lc3NhZ2UsIC4uLiksXG4gKlxuICogICAgSmlzb25QYXJzZXJFcnJvcjogZnVuY3Rpb24obXNnLCBoYXNoKSxcbiAqXG4gKiAgICBxdW90ZU5hbWU6IGZ1bmN0aW9uKG5hbWUpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlciBjb2RlIGxhdGVyIG9uOiBwdXQgc3VpdGFibGVcbiAqICAgICAgICAgICAgICAgcXVvdGVzIGFyb3VuZCBsaXRlcmFsIElEcyBpbiBhIGRlc2NyaXB0aW9uIHN0cmluZy5cbiAqXG4gKiAgICBvcmlnaW5hbFF1b3RlTmFtZTogZnVuY3Rpb24obmFtZSksXG4gKiAgICAgICAgICAgICAgIFRoZSBiYXNpYyBxdW90ZU5hbWUgaGFuZGxlciBwcm92aWRlZCBieSBKSVNPTi5cbiAqICAgICAgICAgICAgICAgYGNsZWFudXBBZnRlclBhcnNlKClgIHdpbGwgY2xlYW4gdXAgYW5kIHJlc2V0IGBxdW90ZU5hbWUoKWAgdG8gcmVmZXJlbmNlIHRoaXMgZnVuY3Rpb25cbiAqICAgICAgICAgICAgICAgYXQgdGhlIGVuZCBvZiB0aGUgYHBhcnNlKClgLlxuICpcbiAqICAgIGRlc2NyaWJlU3ltYm9sOiBmdW5jdGlvbihzeW1ib2wpLFxuICogICAgICAgICAgICAgICBSZXR1cm4gYSBtb3JlLW9yLWxlc3MgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGdpdmVuIHN5bWJvbCwgd2hlblxuICogICAgICAgICAgICAgICBhdmFpbGFibGUsIG9yIHRoZSBzeW1ib2wgaXRzZWxmLCBzZXJ2aW5nIGFzIGl0cyBvd24gJ2Rlc2NyaXB0aW9uJyBmb3IgbGFja1xuICogICAgICAgICAgICAgICBvZiBzb21ldGhpbmcgYmV0dGVyIHRvIHNlcnZlIHVwLlxuICpcbiAqICAgICAgICAgICAgICAgUmV0dXJuIE5VTEwgd2hlbiB0aGUgc3ltYm9sIGlzIHVua25vd24gdG8gdGhlIHBhcnNlci5cbiAqXG4gKiAgICBzeW1ib2xzXzoge2Fzc29jaWF0aXZlIGxpc3Q6IG5hbWUgPT0+IG51bWJlcn0sXG4gKiAgICB0ZXJtaW5hbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBuYW1lfSxcbiAqICAgIG5vbnRlcm1pbmFsczoge2Fzc29jaWF0aXZlIGxpc3Q6IHJ1bGUtbmFtZSA9PT4ge2Fzc29jaWF0aXZlIGxpc3Q6IG51bWJlciA9PT4gcnVsZS1hbHR9fSxcbiAqICAgIHRlcm1pbmFsX2Rlc2NyaXB0aW9uc186IChpZiB0aGVyZSBhcmUgYW55KSB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBkZXNjcmlwdGlvbn0sXG4gKiAgICBwcm9kdWN0aW9uc186IFsuLi5dLFxuICpcbiAqICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIHBhcnNlcl9fcGVyZm9ybUFjdGlvbih5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5bG9jLCB5eXN0YXRlLCB5eXNwLCB5eXZzdGFjaywgeXlsc3RhY2ssIHl5c3RhY2ssIHl5c3N0YWNrKSxcbiAqXG4gKiAgICAgICAgICAgICAgIFRoZSBmdW5jdGlvbiBwYXJhbWV0ZXJzIGFuZCBgdGhpc2AgaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlL21lYW5pbmc6XG4gKiAgICAgICAgICAgICAgIC0gYHRoaXNgICAgIDogcmVmZXJlbmNlIHRvIHRoZSBgeXl2YWxgIGludGVybmFsIG9iamVjdCwgd2hpY2ggaGFzIG1lbWJlcnMgKGAkYCBhbmQgYF8kYClcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzdG9yZS9yZWZlcmVuY2UgdGhlIHJ1bGUgdmFsdWUgYCQkYCBhbmQgbG9jYXRpb24gaW5mbyBgQCRgLlxuICpcbiAqICAgICAgICAgICAgICAgICBPbmUgaW1wb3J0YW50IHRoaW5nIHRvIG5vdGUgYWJvdXQgYHRoaXNgIGEuay5hLiBgeXl2YWxgOiBldmVyeSAqcmVkdWNlKiBhY3Rpb24gZ2V0c1xuICogICAgICAgICAgICAgICAgIHRvIHNlZSB0aGUgc2FtZSBvYmplY3QgdmlhIHRoZSBgdGhpc2AgcmVmZXJlbmNlLCBpLmUuIGlmIHlvdSB3aXNoIHRvIGNhcnJ5IGN1c3RvbVxuICogICAgICAgICAgICAgICAgIGRhdGEgZnJvbSBvbmUgcmVkdWNlIGFjdGlvbiB0aHJvdWdoIHRvIHRoZSBuZXh0IHdpdGhpbiBhIHNpbmdsZSBwYXJzZSBydW4sIHRoZW4geW91XG4gKiAgICAgICAgICAgICAgICAgbWF5IGdldCBuYXN0eSBhbmQgdXNlIGB5eXZhbGAgYS5rLmEuIGB0aGlzYCBmb3Igc3RvcmluZyB5b3Ugb3duIHNlbWktcGVybWFuZW50IGRhdGEuXG4gKlxuICogICAgICAgICAgICAgICAgIGB0aGlzLnl5YCBpcyBhIGRpcmVjdCByZWZlcmVuY2UgdG8gdGhlIGB5eWAgc2hhcmVkIHN0YXRlIG9iamVjdC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgYCVwYXJzZS1wYXJhbWAtc3BlY2lmaWVkIGFkZGl0aW9uYWwgYHBhcnNlKClgIGFyZ3VtZW50cyBoYXZlIGJlZW4gYWRkZWQgdG8gdGhpcyBgeXlgXG4gKiAgICAgICAgICAgICAgICAgb2JqZWN0IGF0IGBwYXJzZSgpYCBzdGFydCBhbmQgYXJlIHRoZXJlZm9yZSBhdmFpbGFibGUgdG8gdGhlIGFjdGlvbiBjb2RlIHZpYSB0aGVcbiAqICAgICAgICAgICAgICAgICBzYW1lIG5hbWVkIGB5eS54eHh4YCBhdHRyaWJ1dGVzICh3aGVyZSBgeHh4eGAgcmVwcmVzZW50cyBhIGlkZW50aWZpZXIgbmFtZSBmcm9tXG4gKiAgICAgICAgICAgICAgICAgdGhlICVwYXJzZS1wYXJhbWAgbGlzdC5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5dGV4dGAgIDogcmVmZXJlbmNlIHRvIHRoZSBsZXhlciB2YWx1ZSB3aGljaCBiZWxvbmdzIHRvIHRoZSBsYXN0IGxleGVyIHRva2VuIHVzZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBtYXRjaCB0aGlzIHJ1bGUuIFRoaXMgaXMgKm5vdCogdGhlIGxvb2stYWhlYWQgdG9rZW4sIGJ1dCB0aGUgbGFzdCB0b2tlblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQncyBhY3R1YWxseSBwYXJ0IG9mIHRoaXMgcnVsZS5cbiAqXG4gKiAgICAgICAgICAgICAgICAgRm9ybXVsYXRlZCBhbm90aGVyIHdheSwgYHl5dGV4dGAgaXMgdGhlIHZhbHVlIG9mIHRoZSB0b2tlbiBpbW1lZGlhdGVseSBwcmVjZWVkaW5nXG4gKiAgICAgICAgICAgICAgICAgdGhlIGN1cnJlbnQgbG9vay1haGVhZCB0b2tlbi5cbiAqICAgICAgICAgICAgICAgICBDYXZlYXRzIGFwcGx5IGZvciBydWxlcyB3aGljaCBkb24ndCByZXF1aXJlIGxvb2stYWhlYWQsIHN1Y2ggYXMgZXBzaWxvbiBydWxlcy5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bGVuZ2AgIDogZGl0dG8gYXMgYHl5dGV4dGAsIG9ubHkgbm93IGZvciB0aGUgbGV4ZXIueXlsZW5nIHZhbHVlLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlsaW5lbm9gOiBkaXR0byBhcyBgeXl0ZXh0YCwgb25seSBub3cgZm9yIHRoZSBsZXhlci55eWxpbmVubyB2YWx1ZS5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bG9jYCAgIDogZGl0dG8gYXMgYHl5dGV4dGAsIG9ubHkgbm93IGZvciB0aGUgbGV4ZXIueXlsbG9jIGxleGVyIHRva2VuIGxvY2F0aW9uIGluZm8uXG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0FSTklORzogc2luY2Ugamlzb24gMC40LjE4LTE4NiB0aGlzIGVudHJ5IG1heSBiZSBOVUxML1VOREVGSU5FRCBpbnN0ZWFkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhbiBlbXB0eSBvYmplY3Qgd2hlbiBubyBzdWl0YWJsZSBsb2NhdGlvbiBpbmZvIGNhbiBiZSBwcm92aWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5c3RhdGVgIDogdGhlIGN1cnJlbnQgcGFyc2VyIHN0YXRlIG51bWJlciwgdXNlZCBpbnRlcm5hbGx5IGZvciBkaXNwYXRjaGluZyBhbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGluZyB0aGUgYWN0aW9uIGNvZGUgY2h1bmsgbWF0Y2hpbmcgdGhlIHJ1bGUgY3VycmVudGx5IGJlaW5nIHJlZHVjZWQuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eXNwYCAgICA6IHRoZSBjdXJyZW50IHN0YXRlIHN0YWNrIHBvc2l0aW9uIChhLmsuYS4gJ3N0YWNrIHBvaW50ZXInKVxuICpcbiAqICAgICAgICAgICAgICAgICBUaGlzIG9uZSBjb21lcyBpbiBoYW5keSB3aGVuIHlvdSBhcmUgZ29pbmcgdG8gZG8gYWR2YW5jZWQgdGhpbmdzIHRvIHRoZSBwYXJzZXJcbiAqICAgICAgICAgICAgICAgICBzdGFja3MsIGFsbCBvZiB3aGljaCBhcmUgYWNjZXNzaWJsZSBmcm9tIHlvdXIgYWN0aW9uIGNvZGUgKHNlZSB0aGUgbmV4dCBlbnRyaWVzIGJlbG93KS5cbiAqXG4gKiAgICAgICAgICAgICAgICAgQWxzbyBub3RlIHRoYXQgeW91IGNhbiBhY2Nlc3MgdGhpcyBhbmQgb3RoZXIgc3RhY2sgaW5kZXggdmFsdWVzIHVzaW5nIHRoZSBuZXcgZG91YmxlLWhhc2hcbiAqICAgICAgICAgICAgICAgICBzeW50YXgsIGkuZS4gYCMjJCA9PT0gIyMwID09PSB5eXNwYCwgd2hpbGUgYCMjMWAgaXMgdGhlIHN0YWNrIGluZGV4IGZvciBhbGwgdGhpbmdzXG4gKiAgICAgICAgICAgICAgICAgcmVsYXRlZCB0byB0aGUgZmlyc3QgcnVsZSB0ZXJtLCBqdXN0IGxpa2UgeW91IGhhdmUgYCQxYCwgYEAxYCBhbmQgYCMxYC5cbiAqICAgICAgICAgICAgICAgICBUaGlzIGlzIG1hZGUgYXZhaWxhYmxlIHRvIHdyaXRlIHZlcnkgYWR2YW5jZWQgZ3JhbW1hciBhY3Rpb24gcnVsZXMsIGUuZy4gd2hlbiB5b3Ugd2FudFxuICogICAgICAgICAgICAgICAgIHRvIGludmVzdGlnYXRlIHRoZSBwYXJzZSBzdGF0ZSBzdGFjayBpbiB5b3VyIGFjdGlvbiBjb2RlLCB3aGljaCB3b3VsZCwgZm9yIGV4YW1wbGUsXG4gKiAgICAgICAgICAgICAgICAgYmUgcmVsZXZhbnQgd2hlbiB5b3Ugd2lzaCB0byBpbXBsZW1lbnQgZXJyb3IgZGlhZ25vc3RpY3MgYW5kIHJlcG9ydGluZyBzY2hlbWVzIHNpbWlsYXJcbiAqICAgICAgICAgICAgICAgICB0byB0aGUgd29yayBkZXNjcmliZWQgaGVyZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgKyBQb3R0aWVyLCBGLiwgMjAxNi4gUmVhY2hhYmlsaXR5IGFuZCBlcnJvciBkaWFnbm9zaXMgaW4gTFIoMSkgYXV0b21hdGEuXG4gKiAgICAgICAgICAgICAgICAgICBJbiBKb3VybsOpZXMgRnJhbmNvcGhvbmVzIGRlcyBMYW5ndWFnZXMgQXBwbGljYXRpZnMuXG4gKlxuICogICAgICAgICAgICAgICAgICsgSmVmZmVyeSwgQy5MLiwgMjAwMy4gR2VuZXJhdGluZyBMUiBzeW50YXggZXJyb3IgbWVzc2FnZXMgZnJvbSBleGFtcGxlcy5cbiAqICAgICAgICAgICAgICAgICAgIEFDTSBUcmFuc2FjdGlvbnMgb24gUHJvZ3JhbW1pbmcgTGFuZ3VhZ2VzIGFuZCBTeXN0ZW1zIChUT1BMQVMpLCAyNSg1KSwgcHAuNjMx4oCTNjQwLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlydWxlbGVuZ3RoYDogdGhlIGN1cnJlbnQgcnVsZSdzIHRlcm0gY291bnQsIGkuZS4gdGhlIG51bWJlciBvZiBlbnRyaWVzIG9jY3VwaWVkIG9uIHRoZSBzdGFjay5cbiAqXG4gKiAgICAgICAgICAgICAgICAgVGhpcyBvbmUgY29tZXMgaW4gaGFuZHkgd2hlbiB5b3UgYXJlIGdvaW5nIHRvIGRvIGFkdmFuY2VkIHRoaW5ncyB0byB0aGUgcGFyc2VyXG4gKiAgICAgICAgICAgICAgICAgc3RhY2tzLCBhbGwgb2Ygd2hpY2ggYXJlIGFjY2Vzc2libGUgZnJvbSB5b3VyIGFjdGlvbiBjb2RlIChzZWUgdGhlIG5leHQgZW50cmllcyBiZWxvdykuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eXZzdGFja2A6IHJlZmVyZW5jZSB0byB0aGUgcGFyc2VyIHZhbHVlIHN0YWNrLiBBbHNvIGFjY2Vzc2VkIHZpYSB0aGUgYCQxYCBldGMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0cy5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bHN0YWNrYDogcmVmZXJlbmNlIHRvIHRoZSBwYXJzZXIgdG9rZW4gbG9jYXRpb24gc3RhY2suIEFsc28gYWNjZXNzZWQgdmlhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGBAMWAgZXRjLiBjb25zdHJ1Y3RzLlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXQVJOSU5HOiBzaW5jZSBqaXNvbiAwLjQuMTgtMTg2IHRoaXMgYXJyYXkgTUFZIGNvbnRhaW4gc2xvdHMgd2hpY2ggYXJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVU5ERUZJTkVEIHJhdGhlciB0aGFuIGFuIGVtcHR5IChsb2NhdGlvbikgb2JqZWN0LCB3aGVuIHRoZSBsZXhlci9wYXJzZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gY29kZSBkaWQgbm90IHByb3ZpZGUgYSBzdWl0YWJsZSBsb2NhdGlvbiBpbmZvIG9iamVjdCB3aGVuIHN1Y2ggYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Qgd2FzIGZpbGxlZCFcbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5c3RhY2tgIDogcmVmZXJlbmNlIHRvIHRoZSBwYXJzZXIgdG9rZW4gaWQgc3RhY2suIEFsc28gYWNjZXNzZWQgdmlhIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAjMWAgZXRjLiBjb25zdHJ1Y3RzLlxuICpcbiAqICAgICAgICAgICAgICAgICBOb3RlOiB0aGlzIGlzIGEgYml0IG9mIGEgKip3aGl0ZSBsaWUqKiBhcyB3ZSBjYW4gc3RhdGljYWxseSBkZWNvZGUgYW55IGAjbmAgcmVmZXJlbmNlIHRvXG4gKiAgICAgICAgICAgICAgICAgaXRzIG51bWVyaWMgdG9rZW4gaWQgdmFsdWUsIGhlbmNlIHRoYXQgY29kZSB3b3VsZG4ndCBuZWVkIHRoZSBgeXlzdGFja2AgYnV0ICp5b3UqIG1pZ2h0XG4gKiAgICAgICAgICAgICAgICAgd2FudCBhY2Nlc3MgdGhpcyBhcnJheSBmb3IgeW91ciBvd24gcHVycG9zZXMsIHN1Y2ggYXMgZXJyb3IgYW5hbHlzaXMgYXMgbWVudGlvbmVkIGFib3ZlIVxuICpcbiAqICAgICAgICAgICAgICAgICBOb3RlIHRoYXQgdGhpcyBzdGFjayBzdG9yZXMgdGhlIGN1cnJlbnQgc3RhY2sgb2YgKnRva2VucyosIHRoYXQgaXMgdGhlIHNlcXVlbmNlIG9mXG4gKiAgICAgICAgICAgICAgICAgYWxyZWFkeSBwYXJzZWQ9cmVkdWNlZCAqbm9udGVybWluYWxzKiAodG9rZW5zIHJlcHJlc2VudGluZyBydWxlcykgYW5kICp0ZXJtaW5hbHMqXG4gKiAgICAgICAgICAgICAgICAgKGxleGVyIHRva2VucyAqc2hpZnRlZCogb250byB0aGUgc3RhY2sgdW50aWwgdGhlIHJ1bGUgdGhleSBiZWxvbmcgdG8gaXMgZm91bmQgYW5kXG4gKiAgICAgICAgICAgICAgICAgKnJlZHVjZWQqLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlzc3RhY2tgOiByZWZlcmVuY2UgdG8gdGhlIHBhcnNlciBzdGF0ZSBzdGFjay4gVGhpcyBvbmUgY2FycmllcyB0aGUgaW50ZXJuYWwgcGFyc2VyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKnN0YXRlcyogc3VjaCBhcyB0aGUgb25lIGluIGB5eXN0YXRlYCwgd2hpY2ggYXJlIHVzZWQgdG8gcmVwcmVzZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhcnNlciBzdGF0ZSBtYWNoaW5lIGluIHRoZSAqcGFyc2UgdGFibGUqLiAqVmVyeSogKmludGVybmFsKiBzdHVmZixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0IGNhbiBJIHNheT8gSWYgeW91IGFjY2VzcyB0aGlzIG9uZSwgeW91J3JlIGNsZWFybHkgZG9pbmcgd2lja2VkIHRoaW5nc1xuICpcbiAqICAgICAgICAgICAgICAgLSBgLi4uYCAgICAgOiB0aGUgZXh0cmEgYXJndW1lbnRzIHlvdSBzcGVjaWZpZWQgaW4gdGhlIGAlcGFyc2UtcGFyYW1gIHN0YXRlbWVudCBpbiB5b3VyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbW1hciBkZWZpbml0aW9uIGZpbGUuXG4gKlxuICogICAgdGFibGU6IFsuLi5dLFxuICogICAgICAgICAgICAgICBTdGF0ZSB0cmFuc2l0aW9uIHRhYmxlXG4gKiAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAgICAgICAgICAgICAgIGluZGV4IGxldmVscyBhcmU6XG4gKiAgICAgICAgICAgICAgIC0gYHN0YXRlYCAgLS0+IGhhc2ggdGFibGVcbiAqICAgICAgICAgICAgICAgLSBgc3ltYm9sYCAtLT4gYWN0aW9uIChudW1iZXIgb3IgYXJyYXkpXG4gKlxuICogICAgICAgICAgICAgICAgIElmIHRoZSBgYWN0aW9uYCBpcyBhbiBhcnJheSwgdGhlc2UgYXJlIHRoZSBlbGVtZW50cycgbWVhbmluZzpcbiAqICAgICAgICAgICAgICAgICAtIGluZGV4IFswXTogMSA9IHNoaWZ0LCAyID0gcmVkdWNlLCAzID0gYWNjZXB0XG4gKiAgICAgICAgICAgICAgICAgLSBpbmRleCBbMV06IEdPVE8gYHN0YXRlYFxuICpcbiAqICAgICAgICAgICAgICAgICBJZiB0aGUgYGFjdGlvbmAgaXMgYSBudW1iZXIsIGl0IGlzIHRoZSBHT1RPIGBzdGF0ZWBcbiAqXG4gKiAgICBkZWZhdWx0QWN0aW9uczogey4uLn0sXG4gKlxuICogICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcyksXG4gKiAgICB5eUVycm9yOiBmdW5jdGlvbihzdHIsIC4uLiksXG4gKiAgICB5eVJlY292ZXJpbmc6IGZ1bmN0aW9uKCksXG4gKiAgICB5eUVyck9rOiBmdW5jdGlvbigpLFxuICogICAgeXlDbGVhckluOiBmdW5jdGlvbigpLFxuICpcbiAqICAgIGNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvOiBmdW5jdGlvbihlcnJvcl9tZXNzYWdlLCBleGNlcHRpb25fb2JqZWN0LCBleHBlY3RlZF90b2tlbl9zZXQsIGlzX3JlY292ZXJhYmxlKSxcbiAqICAgICAgICAgICAgICAgSGVscGVyIGZ1bmN0aW9uICoqd2hpY2ggd2lsbCBiZSBzZXQgdXAgZHVyaW5nIHRoZSBmaXJzdCBpbnZvY2F0aW9uIG9mIHRoZSBgcGFyc2UoKWAgbWV0aG9kKiouXG4gKiAgICAgICAgICAgICAgIFByb2R1Y2VzIGEgbmV3IGVycm9ySW5mbyAnaGFzaCBvYmplY3QnIHdoaWNoIGNhbiBiZSBwYXNzZWQgaW50byBgcGFyc2VFcnJvcigpYC5cbiAqICAgICAgICAgICAgICAgU2VlIGl0J3MgdXNlIGluIHRoaXMgcGFyc2VyIGtlcm5lbCBpbiBtYW55IHBsYWNlczsgZXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICB2YXIgaW5mb09iaiA9IHBhcnNlci5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbygnZmFpbCEnLCBudWxsLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbGxlY3RfZXhwZWN0ZWRfdG9rZW5fc2V0KHN0YXRlKSwgdHJ1ZSk7XG4gKiAgICAgICAgICAgICAgICAgICB2YXIgcmV0VmFsID0gcGFyc2VyLnBhcnNlRXJyb3IoaW5mb09iai5lcnJTdHIsIGluZm9PYmosIHBhcnNlci5KaXNvblBhcnNlckVycm9yKTtcbiAqXG4gKiAgICBvcmlnaW5hbFBhcnNlRXJyb3I6IGZ1bmN0aW9uKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpLFxuICogICAgICAgICAgICAgICBUaGUgYmFzaWMgYHBhcnNlRXJyb3JgIGhhbmRsZXIgcHJvdmlkZWQgYnkgSklTT04uXG4gKiAgICAgICAgICAgICAgIGBjbGVhbnVwQWZ0ZXJQYXJzZSgpYCB3aWxsIGNsZWFuIHVwIGFuZCByZXNldCBgcGFyc2VFcnJvcigpYCB0byByZWZlcmVuY2UgdGhpcyBmdW5jdGlvblxuICogICAgICAgICAgICAgICBhdCB0aGUgZW5kIG9mIHRoZSBgcGFyc2UoKWAuXG4gKlxuICogICAgb3B0aW9uczogeyAuLi4gcGFyc2VyICVvcHRpb25zIC4uLiB9LFxuICpcbiAqICAgIHBhcnNlOiBmdW5jdGlvbihpbnB1dFssIGFyZ3MuLi5dKSxcbiAqICAgICAgICAgICAgICAgUGFyc2UgdGhlIGdpdmVuIGBpbnB1dGAgYW5kIHJldHVybiB0aGUgcGFyc2VkIHZhbHVlIChvciBgdHJ1ZWAgd2hlbiBub25lIHdhcyBwcm92aWRlZCBieVxuICogICAgICAgICAgICAgICB0aGUgcm9vdCBhY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHBhcnNlciBpcyBhY3RpbmcgYXMgYSAqbWF0Y2hlciopLlxuICogICAgICAgICAgICAgICBZb3UgTUFZIHVzZSB0aGUgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyBhcyBwZXIgYCVwYXJzZS1wYXJhbWAgc3BlYyBvZiB0aGlzIGdyYW1tYXI6XG4gKiAgICAgICAgICAgICAgIHRoZXNlIGV4dHJhIGBhcmdzLi4uYCBhcmUgYWRkZWQgdmVyYmF0aW0gdG8gdGhlIGB5eWAgb2JqZWN0IHJlZmVyZW5jZSBhcyBtZW1iZXIgdmFyaWFibGVzLlxuICpcbiAqICAgICAgICAgICAgICAgV0FSTklORzpcbiAqICAgICAgICAgICAgICAgUGFyc2VyJ3MgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyAodmlhIGAlcGFyc2UtcGFyYW1gKSBNQVkgY29uZmxpY3Qgd2l0aFxuICogICAgICAgICAgICAgICBhbnkgYXR0cmlidXRlcyBhbHJlYWR5IGFkZGVkIHRvIGB5eWAgYnkgdGhlIGppc29uIHJ1bi10aW1lO1xuICogICAgICAgICAgICAgICB3aGVuIHN1Y2ggYSBjb2xsaXNpb24gaXMgZGV0ZWN0ZWQgYW4gZXhjZXB0aW9uIGlzIHRocm93biB0byBwcmV2ZW50IHRoZSBnZW5lcmF0ZWQgcnVuLXRpbWVcbiAqICAgICAgICAgICAgICAgZnJvbSBzaWxlbnRseSBhY2NlcHRpbmcgdGhpcyBjb25mdXNpbmcgYW5kIHBvdGVudGlhbGx5IGhhemFyZG91cyBzaXR1YXRpb24hXG4gKlxuICogICAgICAgICAgICAgICBUaGUgbGV4ZXIgTUFZIGFkZCBpdHMgb3duIHNldCBvZiBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgKHZpYSB0aGUgYCVwYXJzZS1wYXJhbWAgbGluZSBpblxuICogICAgICAgICAgICAgICB0aGUgbGV4ZXIgc2VjdGlvbiBvZiB0aGUgZ3JhbW1hciBzcGVjKTogdGhlc2Ugd2lsbCBiZSBpbnNlcnRlZCBpbiB0aGUgYHl5YCBzaGFyZWQgc3RhdGVcbiAqICAgICAgICAgICAgICAgb2JqZWN0IGFuZCBhbnkgY29sbGlzaW9uIHdpdGggdGhvc2Ugd2lsbCBiZSByZXBvcnRlZCBieSB0aGUgbGV4ZXIgdmlhIGEgdGhyb3duIGV4Y2VwdGlvbi5cbiAqXG4gKiAgICBjbGVhbnVwQWZ0ZXJQYXJzZTogZnVuY3Rpb24ocmVzdWx0VmFsdWUsIGludm9rZV9wb3N0X21ldGhvZHMsIGRvX25vdF9udWtlX2Vycm9yaW5mb3MpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24gKip3aGljaCB3aWxsIGJlIHNldCB1cCBkdXJpbmcgdGhlIGZpcnN0IGludm9jYXRpb24gb2YgdGhlIGBwYXJzZSgpYCBtZXRob2QqKi5cbiAqICAgICAgICAgICAgICAgVGhpcyBoZWxwZXIgQVBJIGlzIGludm9rZWQgYXQgdGhlIGVuZCBvZiB0aGUgYHBhcnNlKClgIGNhbGwsIHVubGVzcyBhbiBleGNlcHRpb24gd2FzIHRocm93blxuICogICAgICAgICAgICAgICBhbmQgYCVvcHRpb25zIG5vLXRyeS1jYXRjaGAgaGFzIGJlZW4gZGVmaW5lZCBmb3IgdGhpcyBncmFtbWFyOiBpbiB0aGF0IGNhc2UgdGhpcyBoZWxwZXIgTUFZXG4gKiAgICAgICAgICAgICAgIGJlIGludm9rZWQgYnkgY2FsbGluZyB1c2VyIGNvZGUgdG8gZW5zdXJlIHRoZSBgcG9zdF9wYXJzZWAgY2FsbGJhY2tzIGFyZSBpbnZva2VkIGFuZFxuICogICAgICAgICAgICAgICB0aGUgaW50ZXJuYWwgcGFyc2VyIGdldHMgcHJvcGVybHkgZ2FyYmFnZSBjb2xsZWN0ZWQgdW5kZXIgdGhlc2UgcGFydGljdWxhciBjaXJjdW1zdGFuY2VzLlxuICpcbiAqICAgIHl5TWVyZ2VMb2NhdGlvbkluZm86IGZ1bmN0aW9uKGZpcnN0X2luZGV4LCBsYXN0X2luZGV4LCBmaXJzdF95eWxsb2MsIGxhc3RfeXlsbG9jLCBkb250X2xvb2tfYmFjayksXG4gKiAgICAgICAgICAgICAgIEhlbHBlciBmdW5jdGlvbiAqKndoaWNoIHdpbGwgYmUgc2V0IHVwIGR1cmluZyB0aGUgZmlyc3QgaW52b2NhdGlvbiBvZiB0aGUgYHBhcnNlKClgIG1ldGhvZCoqLlxuICogICAgICAgICAgICAgICBUaGlzIGhlbHBlciBBUEkgY2FuIGJlIGludm9rZWQgdG8gY2FsY3VsYXRlIGEgc3Bhbm5pbmcgYHl5bGxvY2AgbG9jYXRpb24gaW5mbyBvYmplY3QuXG4gKlxuICogICAgICAgICAgICAgICBOb3RlOiAlZXBzaWxvbiBydWxlcyBNQVkgc3BlY2lmeSBubyBgZmlyc3RfaW5kZXhgIGFuZCBgZmlyc3RfeXlsbG9jYCwgaW4gd2hpY2ggY2FzZVxuICogICAgICAgICAgICAgICB0aGlzIGZ1bmN0aW9uIHdpbGwgYXR0ZW1wdCB0byBvYnRhaW4gYSBzdWl0YWJsZSBsb2NhdGlvbiBtYXJrZXIgYnkgaW5zcGVjdGluZyB0aGUgbG9jYXRpb24gc3RhY2tcbiAqICAgICAgICAgICAgICAgYmFja3dhcmRzLlxuICpcbiAqICAgICAgICAgICAgICAgRm9yIG1vcmUgaW5mbyBzZWUgdGhlIGRvY3VtZW50YXRpb24gY29tbWVudCBmdXJ0aGVyIGJlbG93LCBpbW1lZGlhdGVseSBhYm92ZSB0aGlzIGZ1bmN0aW9uJ3NcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24uXG4gKlxuICogICAgbGV4ZXI6IHtcbiAqICAgICAgICB5eTogey4uLn0sICAgICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgc28tY2FsbGVkIFwic2hhcmVkIHN0YXRlXCIgYHl5YCBvbmNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdmlhIGEgY2FsbCB0byB0aGUgYC5zZXRJbnB1dChpbnB1dCwgeXkpYCBsZXhlciBBUEkuXG4gKiAgICAgICAgRU9GOiAxLFxuICogICAgICAgIEVSUk9SOiAyLFxuICogICAgICAgIEppc29uTGV4ZXJFcnJvcjogZnVuY3Rpb24obXNnLCBoYXNoKSxcbiAqICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbihzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSxcbiAqICAgICAgICBzZXRJbnB1dDogZnVuY3Rpb24oaW5wdXQsIFt5eV0pLFxuICogICAgICAgIGlucHV0OiBmdW5jdGlvbigpLFxuICogICAgICAgIHVucHV0OiBmdW5jdGlvbihzdHIpLFxuICogICAgICAgIG1vcmU6IGZ1bmN0aW9uKCksXG4gKiAgICAgICAgcmVqZWN0OiBmdW5jdGlvbigpLFxuICogICAgICAgIGxlc3M6IGZ1bmN0aW9uKG4pLFxuICogICAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24obiksXG4gKiAgICAgICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24obiksXG4gKiAgICAgICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbigpLFxuICogICAgICAgIHRlc3RfbWF0Y2g6IGZ1bmN0aW9uKHJlZ2V4X21hdGNoX2FycmF5LCBydWxlX2luZGV4LCAuLi4pLFxuICogICAgICAgIG5leHQ6IGZ1bmN0aW9uKC4uLiksXG4gKiAgICAgICAgbGV4OiBmdW5jdGlvbiguLi4pLFxuICogICAgICAgIGJlZ2luOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICogICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24oY29uZGl0aW9uKSxcbiAqICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqICAgICAgICB0b3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqICAgICAgICBfY3VycmVudFJ1bGVzOiBmdW5jdGlvbigpLFxuICogICAgICAgIHN0YXRlU3RhY2tTaXplOiBmdW5jdGlvbigpLFxuICogICAgICAgIGNsZWFudXBBZnRlckxleDogZnVuY3Rpb24oKVxuICpcbiAqICAgICAgICBvcHRpb25zOiB7IC4uLiBsZXhlciAlb3B0aW9ucyAuLi4gfSxcbiAqXG4gKiAgICAgICAgcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24oeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlQsIC4uLiksXG4gKiAgICAgICAgcnVsZXM6IFsuLi5dLFxuICogICAgICAgIGNvbmRpdGlvbnM6IHthc3NvY2lhdGl2ZSBsaXN0OiBuYW1lID09PiBzZXR9LFxuICogICAgfVxuICogIH1cbiAqXG4gKlxuICogIHRva2VuIGxvY2F0aW9uIGluZm8gKEAkLCBfJCwgZXRjLik6IHtcbiAqICAgIGZpcnN0X2xpbmU6IG4sXG4gKiAgICBsYXN0X2xpbmU6IG4sXG4gKiAgICBmaXJzdF9jb2x1bW46IG4sXG4gKiAgICBsYXN0X2NvbHVtbjogbixcbiAqICAgIHJhbmdlOiBbc3RhcnRfbnVtYmVyLCBlbmRfbnVtYmVyXVxuICogICAgICAgICAgICAgICAod2hlcmUgdGhlIG51bWJlcnMgYXJlIGluZGV4ZXMgaW50byB0aGUgaW5wdXQgc3RyaW5nLCB6ZXJvLWJhc2VkKVxuICogIH1cbiAqXG4gKiAtLS1cbiAqXG4gKiBUaGUgYHBhcnNlRXJyb3JgIGZ1bmN0aW9uIHJlY2VpdmVzIGEgJ2hhc2gnIG9iamVjdCB3aXRoIHRoZXNlIG1lbWJlcnMgZm9yIGxleGVyIGFuZFxuICogcGFyc2VyIGVycm9yczpcbiAqXG4gKiAge1xuICogICAgdGV4dDogICAgICAgIChtYXRjaGVkIHRleHQpXG4gKiAgICB0b2tlbjogICAgICAgKHRoZSBwcm9kdWNlZCB0ZXJtaW5hbCB0b2tlbiwgaWYgYW55KVxuICogICAgdG9rZW5faWQ6ICAgICh0aGUgcHJvZHVjZWQgdGVybWluYWwgdG9rZW4gbnVtZXJpYyBJRCwgaWYgYW55KVxuICogICAgbGluZTogICAgICAgICh5eWxpbmVubylcbiAqICAgIGxvYzogICAgICAgICAoeXlsbG9jKVxuICogIH1cbiAqXG4gKiBwYXJzZXIgKGdyYW1tYXIpIGVycm9ycyB3aWxsIGFsc28gcHJvdmlkZSB0aGVzZSBhZGRpdGlvbmFsIG1lbWJlcnM6XG4gKlxuICogIHtcbiAqICAgIGV4cGVjdGVkOiAgICAoYXJyYXkgZGVzY3JpYmluZyB0aGUgc2V0IG9mIGV4cGVjdGVkIHRva2VucztcbiAqICAgICAgICAgICAgICAgICAgbWF5IGJlIFVOREVGSU5FRCB3aGVuIHdlIGNhbm5vdCBlYXNpbHkgcHJvZHVjZSBzdWNoIGEgc2V0KVxuICogICAgc3RhdGU6ICAgICAgIChpbnRlZ2VyIChvciBhcnJheSB3aGVuIHRoZSB0YWJsZSBpbmNsdWRlcyBncmFtbWFyIGNvbGxpc2lvbnMpO1xuICogICAgICAgICAgICAgICAgICByZXByZXNlbnRzIHRoZSBjdXJyZW50IGludGVybmFsIHN0YXRlIG9mIHRoZSBwYXJzZXIga2VybmVsLlxuICogICAgICAgICAgICAgICAgICBjYW4sIGZvciBleGFtcGxlLCBiZSB1c2VkIHRvIHBhc3MgdG8gdGhlIGBjb2xsZWN0X2V4cGVjdGVkX3Rva2VuX3NldCgpYFxuICogICAgICAgICAgICAgICAgICBBUEkgdG8gb2J0YWluIHRoZSBleHBlY3RlZCB0b2tlbiBzZXQpXG4gKiAgICBhY3Rpb246ICAgICAgKGludGVnZXI7IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgaW50ZXJuYWwgYWN0aW9uIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQpXG4gKiAgICBuZXdfc3RhdGU6ICAgKGludGVnZXI7IHJlcHJlc2VudHMgdGhlIG5leHQvcGxhbm5lZCBpbnRlcm5hbCBzdGF0ZSwgb25jZSB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICBhY3Rpb24gaGFzIGV4ZWN1dGVkKVxuICogICAgcmVjb3ZlcmFibGU6IChib29sZWFuOiBUUlVFIHdoZW4gdGhlIHBhcnNlciBNQVkgaGF2ZSBhbiBlcnJvciByZWNvdmVyeSBydWxlXG4gKiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVycm9yKVxuICogICAgc3RhdGVfc3RhY2s6IChhcnJheTogdGhlIGN1cnJlbnQgcGFyc2VyIExBTFIvTFIgaW50ZXJuYWwgc3RhdGUgc3RhY2s7IHRoaXMgY2FuIGJlIHVzZWQsXG4gKiAgICAgICAgICAgICAgICAgIGZvciBpbnN0YW5jZSwgZm9yIGFkdmFuY2VkIGVycm9yIGFuYWx5c2lzIGFuZCByZXBvcnRpbmcpXG4gKiAgICB2YWx1ZV9zdGFjazogKGFycmF5OiB0aGUgY3VycmVudCBwYXJzZXIgTEFMUi9MUiBpbnRlcm5hbCBgJCRgIHZhbHVlIHN0YWNrOyB0aGlzIGNhbiBiZSB1c2VkLFxuICogICAgICAgICAgICAgICAgICBmb3IgaW5zdGFuY2UsIGZvciBhZHZhbmNlZCBlcnJvciBhbmFseXNpcyBhbmQgcmVwb3J0aW5nKVxuICogICAgbG9jYXRpb25fc3RhY2s6IChhcnJheTogdGhlIGN1cnJlbnQgcGFyc2VyIExBTFIvTFIgaW50ZXJuYWwgbG9jYXRpb24gc3RhY2s7IHRoaXMgY2FuIGJlIHVzZWQsXG4gKiAgICAgICAgICAgICAgICAgIGZvciBpbnN0YW5jZSwgZm9yIGFkdmFuY2VkIGVycm9yIGFuYWx5c2lzIGFuZCByZXBvcnRpbmcpXG4gKiAgICB5eTogICAgICAgICAgKG9iamVjdDogdGhlIGN1cnJlbnQgcGFyc2VyIGludGVybmFsIFwic2hhcmVkIHN0YXRlXCIgYHl5YFxuICogICAgICAgICAgICAgICAgICBhcyBpcyBhbHNvIGF2YWlsYWJsZSBpbiB0aGUgcnVsZSBhY3Rpb25zOyB0aGlzIGNhbiBiZSB1c2VkLFxuICogICAgICAgICAgICAgICAgICBmb3IgaW5zdGFuY2UsIGZvciBhZHZhbmNlZCBlcnJvciBhbmFseXNpcyBhbmQgcmVwb3J0aW5nKVxuICogICAgbGV4ZXI6ICAgICAgIChyZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbGV4ZXIgaW5zdGFuY2UgdXNlZCBieSB0aGUgcGFyc2VyKVxuICogICAgcGFyc2VyOiAgICAgIChyZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgcGFyc2VyIGluc3RhbmNlKVxuICogIH1cbiAqXG4gKiB3aGlsZSBgdGhpc2Agd2lsbCByZWZlcmVuY2UgdGhlIGN1cnJlbnQgcGFyc2VyIGluc3RhbmNlLlxuICpcbiAqIFdoZW4gYHBhcnNlRXJyb3JgIGlzIGludm9rZWQgYnkgdGhlIGxleGVyLCBgdGhpc2Agd2lsbCBzdGlsbCByZWZlcmVuY2UgdGhlIHJlbGF0ZWQgKnBhcnNlcipcbiAqIGluc3RhbmNlLCB3aGlsZSB0aGVzZSBhZGRpdGlvbmFsIGBoYXNoYCBmaWVsZHMgd2lsbCBhbHNvIGJlIHByb3ZpZGVkOlxuICpcbiAqICB7XG4gKiAgICBsZXhlcjogICAgICAgKHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBsZXhlciBpbnN0YW5jZSB3aGljaCByZXBvcnRlZCB0aGUgZXJyb3IpXG4gKiAgfVxuICpcbiAqIFdoZW4gYHBhcnNlRXJyb3JgIGlzIGludm9rZWQgYnkgdGhlIHBhcnNlciBkdWUgdG8gYSAqKkphdmFTY3JpcHQgZXhjZXB0aW9uKiogYmVpbmcgZmlyZWRcbiAqIGZyb20gZWl0aGVyIHRoZSBwYXJzZXIgb3IgbGV4ZXIsIGB0aGlzYCB3aWxsIHN0aWxsIHJlZmVyZW5jZSB0aGUgcmVsYXRlZCAqcGFyc2VyKlxuICogaW5zdGFuY2UsIHdoaWxlIHRoZXNlIGFkZGl0aW9uYWwgYGhhc2hgIGZpZWxkcyB3aWxsIGFsc28gYmUgcHJvdmlkZWQ6XG4gKlxuICogIHtcbiAqICAgIGV4Y2VwdGlvbjogICAocmVmZXJlbmNlIHRvIHRoZSBleGNlcHRpb24gdGhyb3duKVxuICogIH1cbiAqXG4gKiBQbGVhc2UgZG8gbm90ZSB0aGF0IGluIHRoZSBsYXR0ZXIgc2l0dWF0aW9uLCB0aGUgYGV4cGVjdGVkYCBmaWVsZCB3aWxsIGJlIG9taXR0ZWQgYXNcbiAqIHRoaXMgdHlwZSBvZiBmYWlsdXJlIGlzIGFzc3VtZWQgbm90IHRvIGJlIGR1ZSB0byAqcGFyc2UgZXJyb3JzKiBidXQgcmF0aGVyIGR1ZSB0byB1c2VyXG4gKiBhY3Rpb24gY29kZSBpbiBlaXRoZXIgcGFyc2VyIG9yIGxleGVyIGZhaWxpbmcgdW5leHBlY3RlZGx5LlxuICpcbiAqIC0tLVxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBwYXJzZXIgb3B0aW9ucyBieSBzZXR0aW5nIC8gbW9kaWZ5aW5nIHRoZSBgLnl5YCBvYmplY3Qgb2YgeW91ciBQYXJzZXIgaW5zdGFuY2UuXG4gKiBUaGVzZSBvcHRpb25zIGFyZSBhdmFpbGFibGU6XG4gKlxuICogIyMjIG9wdGlvbnMgd2hpY2ggYXJlIGdsb2JhbCBmb3IgYWxsIHBhcnNlciBpbnN0YW5jZXNcbiAqXG4gKiAgUGFyc2VyLnByZV9wYXJzZTogZnVuY3Rpb24oeXkpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHlvdSBjYW4gc3BlY2lmeSBhIHByZV9wYXJzZSgpIGZ1bmN0aW9uIGluIHRoZSBjaHVuayBmb2xsb3dpbmdcbiAqICAgICAgICAgICAgICAgICB0aGUgZ3JhbW1hciwgaS5lLiBhZnRlciB0aGUgbGFzdCBgJSVgLlxuICogIFBhcnNlci5wb3N0X3BhcnNlOiBmdW5jdGlvbih5eSwgcmV0dmFsLCBwYXJzZUluZm8pIHsgcmV0dXJuIHJldHZhbDsgfVxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB5b3UgY2FuIHNwZWNpZnkgYSBwb3N0X3BhcnNlKCkgZnVuY3Rpb24gaW4gdGhlIGNodW5rIGZvbGxvd2luZ1xuICogICAgICAgICAgICAgICAgIHRoZSBncmFtbWFyLCBpLmUuIGFmdGVyIHRoZSBsYXN0IGAlJWAuIFdoZW4gaXQgZG9lcyBub3QgcmV0dXJuIGFueSB2YWx1ZSxcbiAqICAgICAgICAgICAgICAgICB0aGUgcGFyc2VyIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCBgcmV0dmFsYC5cbiAqXG4gKiAjIyMgb3B0aW9ucyB3aGljaCBjYW4gYmUgc2V0IHVwIHBlciBwYXJzZXIgaW5zdGFuY2VcbiAqXG4gKiAgeXk6IHtcbiAqICAgICAgcHJlX3BhcnNlOiAgZnVuY3Rpb24oeXkpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGlzIGludm9rZWQgYmVmb3JlIHRoZSBwYXJzZSBjeWNsZSBzdGFydHMgKGFuZCBiZWZvcmUgdGhlIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgaW52b2NhdGlvbiBvZiBgbGV4KClgKSBidXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGludm9jYXRpb24gb2ZcbiAqICAgICAgICAgICAgICAgICBgcGFyc2VyLnByZV9wYXJzZSgpYCkuXG4gKiAgICAgIHBvc3RfcGFyc2U6IGZ1bmN0aW9uKHl5LCByZXR2YWwsIHBhcnNlSW5mbykgeyByZXR1cm4gcmV0dmFsOyB9XG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGlzIGludm9rZWQgd2hlbiB0aGUgcGFyc2UgdGVybWluYXRlcyBkdWUgdG8gc3VjY2VzcyAoJ2FjY2VwdCcpXG4gKiAgICAgICAgICAgICAgICAgb3IgZmFpbHVyZSAoZXZlbiB3aGVuIGV4Y2VwdGlvbnMgYXJlIHRocm93bikuXG4gKiAgICAgICAgICAgICAgICAgYHJldHZhbGAgY29udGFpbnMgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBwcm9kdWNlZCBieSBgUGFyc2VyLnBhcnNlKClgO1xuICogICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24gY2FuIG92ZXJyaWRlIHRoZSByZXR1cm4gdmFsdWUgYnkgcmV0dXJuaW5nIGFub3RoZXIuXG4gKiAgICAgICAgICAgICAgICAgV2hlbiBpdCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlLCB0aGUgcGFyc2VyIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICogICAgICAgICAgICAgICAgIGByZXR2YWxgLlxuICogICAgICAgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCBpbW1lZGlhdGVseSBiZWZvcmUgYHBhcnNlci5wb3N0X3BhcnNlKClgLlxuICpcbiAqICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcylcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBwYXJzZUVycm9yYCBmdW5jdGlvbi5cbiAqICAgICAgcXVvdGVOYW1lOiBmdW5jdGlvbihuYW1lKSxcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBxdW90ZU5hbWVgIGZ1bmN0aW9uLlxuICogIH1cbiAqXG4gKiAgcGFyc2VyLmxleGVyLm9wdGlvbnM6IHtcbiAqICAgICAgcHJlX2xleDogIGZ1bmN0aW9uKClcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogaXMgaW52b2tlZCBiZWZvcmUgdGhlIGxleGVyIGlzIGludm9rZWQgdG8gcHJvZHVjZSBhbm90aGVyIHRva2VuLlxuICogICAgICAgICAgICAgICAgIGB0aGlzYCByZWZlcnMgdG8gdGhlIExleGVyIG9iamVjdC5cbiAqICAgICAgcG9zdF9sZXg6IGZ1bmN0aW9uKHRva2VuKSB7IHJldHVybiB0b2tlbjsgfVxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBpcyBpbnZva2VkIHdoZW4gdGhlIGxleGVyIGhhcyBwcm9kdWNlZCBhIHRva2VuIGB0b2tlbmA7XG4gKiAgICAgICAgICAgICAgICAgdGhpcyBmdW5jdGlvbiBjYW4gb3ZlcnJpZGUgdGhlIHJldHVybmVkIHRva2VuIHZhbHVlIGJ5IHJldHVybmluZyBhbm90aGVyLlxuICogICAgICAgICAgICAgICAgIFdoZW4gaXQgZG9lcyBub3QgcmV0dXJuIGFueSAodHJ1dGh5KSB2YWx1ZSwgdGhlIGxleGVyIHdpbGwgcmV0dXJuXG4gKiAgICAgICAgICAgICAgICAgdGhlIG9yaWdpbmFsIGB0b2tlbmAuXG4gKiAgICAgICAgICAgICAgICAgYHRoaXNgIHJlZmVycyB0byB0aGUgTGV4ZXIgb2JqZWN0LlxuICpcbiAqICAgICAgcmFuZ2VzOiBib29sZWFuXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGB0cnVlYCA9PT4gdG9rZW4gbG9jYXRpb24gaW5mbyB3aWxsIGluY2x1ZGUgYSAucmFuZ2VbXSBtZW1iZXIuXG4gKiAgICAgIGZsZXg6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBmbGV4LWxpa2UgbGV4aW5nIGJlaGF2aW91ciB3aGVyZSB0aGUgcnVsZXMgYXJlIHRlc3RlZFxuICogICAgICAgICAgICAgICAgIGV4aGF1c3RpdmVseSB0byBmaW5kIHRoZSBsb25nZXN0IG1hdGNoLlxuICogICAgICBiYWNrdHJhY2tfbGV4ZXI6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciByZWdleGVzIGFyZSB0ZXN0ZWQgaW4gb3JkZXIgYW5kIGZvciBpbnZva2VkO1xuICogICAgICAgICAgICAgICAgIHRoZSBsZXhlciB0ZXJtaW5hdGVzIHRoZSBzY2FuIHdoZW4gYSB0b2tlbiBpcyByZXR1cm5lZCBieSB0aGUgYWN0aW9uIGNvZGUuXG4gKiAgICAgIHhyZWdleHA6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciBydWxlIHJlZ2V4ZXMgYXJlIFwiZXh0ZW5kZWQgcmVnZXggZm9ybWF0XCIgcmVxdWlyaW5nIHRoZVxuICogICAgICAgICAgICAgICAgIGBYUmVnRXhwYCBsaWJyYXJ5LiBXaGVuIHRoaXMgYCVvcHRpb25gIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgYXQgY29tcGlsZSB0aW1lLCBhbGwgbGV4ZXJcbiAqICAgICAgICAgICAgICAgICBydWxlIHJlZ2V4ZXMgaGF2ZSBiZWVuIHdyaXR0ZW4gYXMgc3RhbmRhcmQgSmF2YVNjcmlwdCBSZWdFeHAgZXhwcmVzc2lvbnMuXG4gKiAgfVxuICovXG5cbiAgICAgICAgXG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gKGZ1bmN0aW9uICgpIHtcblxuXG4vLyBTZWUgYWxzbzpcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM4MjEwNy93aGF0cy1hLWdvb2Qtd2F5LXRvLWV4dGVuZC1lcnJvci1pbi1qYXZhc2NyaXB0LyMzNTg4MTUwOFxuLy8gYnV0IHdlIGtlZXAgdGhlIHByb3RvdHlwZS5jb25zdHJ1Y3RvciBhbmQgcHJvdG90eXBlLm5hbWUgYXNzaWdubWVudCBsaW5lcyB0b28gZm9yIGNvbXBhdGliaWxpdHlcbi8vIHdpdGggdXNlcmxhbmQgY29kZSB3aGljaCBtaWdodCBhY2Nlc3MgdGhlIGRlcml2ZWQgY2xhc3MgaW4gYSAnY2xhc3NpYycgd2F5LlxuZnVuY3Rpb24gSmlzb25QYXJzZXJFcnJvcihtc2csIGhhc2gpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAnSmlzb25QYXJzZXJFcnJvcidcbiAgICB9KTtcblxuICAgIGlmIChtc2cgPT0gbnVsbCkgbXNnID0gJz8/Pyc7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG1zZ1xuICAgIH0pO1xuXG4gICAgdGhpcy5oYXNoID0gaGFzaDtcblxuICAgIHZhciBzdGFja3RyYWNlO1xuICAgIGlmIChoYXNoICYmIGhhc2guZXhjZXB0aW9uIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdmFyIGV4MiA9IGhhc2guZXhjZXB0aW9uO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBleDIubWVzc2FnZSB8fCBtc2c7XG4gICAgICAgIHN0YWNrdHJhY2UgPSBleDIuc3RhY2s7XG4gICAgfVxuICAgIGlmICghc3RhY2t0cmFjZSkge1xuICAgICAgICBpZiAoRXJyb3IuaGFzT3duUHJvcGVydHkoJ2NhcHR1cmVTdGFja1RyYWNlJykpIHsgICAgICAgIC8vIFY4L0Nocm9tZSBlbmdpbmVcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2t0cmFjZSA9IChuZXcgRXJyb3IobXNnKSkuc3RhY2s7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0YWNrdHJhY2UpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHN0YWNrdHJhY2VcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5pZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihKaXNvblBhcnNlckVycm9yLnByb3RvdHlwZSwgRXJyb3IucHJvdG90eXBlKTtcbn0gZWxzZSB7XG4gICAgSmlzb25QYXJzZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG59XG5KaXNvblBhcnNlckVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEppc29uUGFyc2VyRXJyb3I7XG5KaXNvblBhcnNlckVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ppc29uUGFyc2VyRXJyb3InO1xuXG5cblxuXG4gICAgICAgIC8vIGhlbHBlcjogcmVjb25zdHJ1Y3QgdGhlIHByb2R1Y3Rpb25zW10gdGFibGVcbiAgICAgICAgZnVuY3Rpb24gYnAocykge1xuICAgICAgICAgICAgdmFyIHJ2ID0gW107XG4gICAgICAgICAgICB2YXIgcCA9IHMucG9wO1xuICAgICAgICAgICAgdmFyIHIgPSBzLnJ1bGU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcnYucHVzaChbXG4gICAgICAgICAgICAgICAgICAgIHBbaV0sXG4gICAgICAgICAgICAgICAgICAgIHJbaV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiByZWNvbnN0cnVjdCB0aGUgZGVmYXVsdEFjdGlvbnNbXSB0YWJsZVxuICAgICAgICBmdW5jdGlvbiBiZGEocykge1xuICAgICAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHMuaWR4O1xuICAgICAgICAgICAgdmFyIGcgPSBzLmdvdG87XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGogPSBkW2ldO1xuICAgICAgICAgICAgICAgIHJ2W2pdID0gZ1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiByZWNvbnN0cnVjdCB0aGUgJ2dvdG8nIHRhYmxlXG4gICAgICAgIGZ1bmN0aW9uIGJ0KHMpIHtcbiAgICAgICAgICAgIHZhciBydiA9IFtdO1xuICAgICAgICAgICAgdmFyIGQgPSBzLmxlbjtcbiAgICAgICAgICAgIHZhciB5ID0gcy5zeW1ib2w7XG4gICAgICAgICAgICB2YXIgdCA9IHMudHlwZTtcbiAgICAgICAgICAgIHZhciBhID0gcy5zdGF0ZTtcbiAgICAgICAgICAgIHZhciBtID0gcy5tb2RlO1xuICAgICAgICAgICAgdmFyIGcgPSBzLmdvdG87XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBkW2ldO1xuICAgICAgICAgICAgICAgIHZhciBxID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHogPSB5LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHFbel0gPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHFbel0gPSBhLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHlwZSA9PT0gMTogYWNjZXB0XG4gICAgICAgICAgICAgICAgICAgICAgICBxW3pdID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnYucHVzaChxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiBydW5sZW5ndGggZW5jb2Rpbmcgd2l0aCBpbmNyZW1lbnQgc3RlcDogY29kZSwgbGVuZ3RoOiBzdGVwIChkZWZhdWx0IHN0ZXAgPSAwKVxuICAgICAgICAvLyBgdGhpc2AgcmVmZXJlbmNlcyBhbiBhcnJheVxuICAgICAgICBmdW5jdGlvbiBzKGMsIGwsIGEpIHtcbiAgICAgICAgICAgIGEgPSBhIHx8IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChjKTtcbiAgICAgICAgICAgICAgICBjICs9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoZWxwZXI6IGR1cGxpY2F0ZSBzZXF1ZW5jZSBmcm9tICpyZWxhdGl2ZSogb2Zmc2V0IGFuZCBsZW5ndGguXG4gICAgICAgIC8vIGB0aGlzYCByZWZlcmVuY2VzIGFuIGFycmF5XG4gICAgICAgIGZ1bmN0aW9uIGMoaSwgbCkge1xuICAgICAgICAgICAgaSA9IHRoaXMubGVuZ3RoIC0gaTtcbiAgICAgICAgICAgIGZvciAobCArPSBpOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKHRoaXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGVscGVyOiB1bnBhY2sgYW4gYXJyYXkgdXNpbmcgaGVscGVycyBhbmQgZGF0YSwgYWxsIHBhc3NlZCBpbiBhbiBhcnJheSBhcmd1bWVudCAnYScuXG4gICAgICAgIGZ1bmN0aW9uIHUoYSkge1xuICAgICAgICAgICAgdmFyIHJ2ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBhW2ldO1xuICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgZW50cnkgYSBoZWxwZXIgZnVuY3Rpb24/XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgZS5hcHBseShydiwgYVtpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcnYucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnY7XG4gICAgICAgIH1cbiAgICBcblxudmFyIHBhcnNlciA9IHtcbiAgICAvLyBDb2RlIEdlbmVyYXRvciBJbmZvcm1hdGlvbiBSZXBvcnRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIE9wdGlvbnM6XG4gICAgLy9cbiAgICAvLyAgIGRlZmF1bHQgYWN0aW9uIG1vZGU6IC4uLi4uLi4uLi4uLi4gW1wiY2xhc3NpY1wiLFwibWVyZ2VcIl1cbiAgICAvLyAgIHRlc3QtY29tcGlsZSBhY3Rpb24gbW9kZTogLi4uLi4uLi4gXCJwYXJzZXI6KixsZXhlcjoqXCJcbiAgICAvLyAgIHRyeS4uY2F0Y2g6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gdHJ1ZVxuICAgIC8vICAgZGVmYXVsdCByZXNvbHZlIG9uIGNvbmZsaWN0OiAuLi4uLiB0cnVlXG4gICAgLy8gICBvbi1kZW1hbmQgbG9vay1haGVhZDogLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBlcnJvciByZWNvdmVyeSB0b2tlbiBza2lwIG1heGltdW06IDNcbiAgICAvLyAgIHl5ZXJyb3IgaW4gcGFyc2UgYWN0aW9ucyBpczogLi4uLi4gTk9UIHJlY292ZXJhYmxlLFxuICAgIC8vICAgeXllcnJvciBpbiBsZXhlciBhY3Rpb25zIGFuZCBvdGhlciBub24tZmF0YWwgbGV4ZXIgYXJlOlxuICAgIC8vICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBOT1QgcmVjb3ZlcmFibGUsXG4gICAgLy8gICBkZWJ1ZyBncmFtbWFyL291dHB1dDogLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgcGFydGlhbCBMUiBjb25mbGljdCB1cGdyYWRlOiAgIHRydWVcbiAgICAvLyAgIHJ1ZGltZW50YXJ5IHRva2VuLXN0YWNrIHN1cHBvcnQ6ICAgZmFsc2VcbiAgICAvLyAgIHBhcnNlciB0YWJsZSBjb21wcmVzc2lvbiBtb2RlOiAuLi4gMlxuICAgIC8vICAgZXhwb3J0IGRlYnVnIHRhYmxlczogLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgZXhwb3J0ICphbGwqIHRhYmxlczogLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgbW9kdWxlIHR5cGU6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiBjb21tb25qc1xuICAgIC8vICAgcGFyc2VyIGVuZ2luZSB0eXBlOiAuLi4uLi4uLi4uLi4uLiBsYWxyXG4gICAgLy8gICBvdXRwdXQgbWFpbigpIGluIHRoZSBtb2R1bGU6IC4uLi4uIHRydWVcbiAgICAvLyAgIGhhcyB1c2VyLXNwZWNpZmllZCBtYWluKCk6IC4uLi4uLi4gZmFsc2VcbiAgICAvLyAgIGhhcyB1c2VyLXNwZWNpZmllZCByZXF1aXJlKCkvaW1wb3J0IG1vZHVsZXMgZm9yIG1haW4oKTpcbiAgICAvLyAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2VcbiAgICAvLyAgIG51bWJlciBvZiBleHBlY3RlZCBjb25mbGljdHM6IC4uLi4gMFxuICAgIC8vXG4gICAgLy9cbiAgICAvLyBQYXJzZXIgQW5hbHlzaXMgZmxhZ3M6XG4gICAgLy9cbiAgICAvLyAgIG5vIHNpZ25pZmljYW50IGFjdGlvbnMgKHBhcnNlciBpcyBhIGxhbmd1YWdlIG1hdGNoZXIgb25seSk6XG4gICAgLy8gICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGVuZzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGluZW5vOiAuLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5dGV4dDogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGxvYzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFBhcnNlRXJyb3IgQVBJOiAuLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZRVJST1I6IC4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZUkVDT1ZFUklORzogLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZRVJST0s6IC4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZQ0xFQVJJTjogLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB0cmFja3MgcnVsZSB2YWx1ZXM6IC4uLi4uLi4uLi4uLi4uIHRydWVcbiAgICAvLyAgIGFzc2lnbnMgcnVsZSB2YWx1ZXM6IC4uLi4uLi4uLi4uLi4gdHJ1ZVxuICAgIC8vICAgdXNlcyBsb2NhdGlvbiB0cmFja2luZzogLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgYXNzaWducyBsb2NhdGlvbjogLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXN0YWNrOiAuLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXNzdGFjazogLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXNwOiAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiB0cnVlXG4gICAgLy8gICB1c2VzIHl5cnVsZWxlbmd0aDogLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5TWVyZ2VMb2NhdGlvbkluZm8gQVBJOiAuLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgZXJyb3IgcmVjb3Zlcnk6IC4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgZXJyb3IgcmVwb3J0aW5nOiAuLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0gRU5EIE9GIFJFUE9SVCAtLS0tLS0tLS0tLVxuXG50cmFjZTogZnVuY3Rpb24gbm9fb3BfdHJhY2UoKSB7IH0sXG5KaXNvblBhcnNlckVycm9yOiBKaXNvblBhcnNlckVycm9yLFxueXk6IHt9LFxub3B0aW9uczoge1xuICB0eXBlOiBcImxhbHJcIixcbiAgaGFzUGFydGlhbExyVXBncmFkZU9uQ29uZmxpY3Q6IHRydWUsXG4gIGVycm9yUmVjb3ZlcnlUb2tlbkRpc2NhcmRDb3VudDogM1xufSxcbnN5bWJvbHNfOiB7XG4gIFwiJGFjY2VwdFwiOiAwLFxuICBcIiRlbmRcIjogMSxcbiAgXCJBRERcIjogMyxcbiAgXCJBTkdMRVwiOiAxNixcbiAgXCJDSFNcIjogMjIsXG4gIFwiQ09NTUFcIjogMTQsXG4gIFwiQ1NTX0NQUk9QXCI6IDEzLFxuICBcIkNTU19WQVJcIjogMTIsXG4gIFwiRElWXCI6IDYsXG4gIFwiRU1TXCI6IDIwLFxuICBcIkVPRlwiOiAxLFxuICBcIkVYU1wiOiAyMSxcbiAgXCJGUkVRXCI6IDE4LFxuICBcIkxFTkdUSFwiOiAxNSxcbiAgXCJMUEFSRU5cIjogNyxcbiAgXCJNVUxcIjogNSxcbiAgXCJORVNURURfQ0FMQ1wiOiA5LFxuICBcIk5VTUJFUlwiOiAxMSxcbiAgXCJQRVJDRU5UQUdFXCI6IDI4LFxuICBcIlBSRUZJWFwiOiAxMCxcbiAgXCJSRU1TXCI6IDIzLFxuICBcIlJFU1wiOiAxOSxcbiAgXCJSUEFSRU5cIjogOCxcbiAgXCJTVUJcIjogNCxcbiAgXCJUSU1FXCI6IDE3LFxuICBcIlZIU1wiOiAyNCxcbiAgXCJWTUFYU1wiOiAyNyxcbiAgXCJWTUlOU1wiOiAyNixcbiAgXCJWV1NcIjogMjUsXG4gIFwiY3NzX3ZhbHVlXCI6IDMzLFxuICBcImNzc192YXJpYWJsZVwiOiAzMixcbiAgXCJlcnJvclwiOiAyLFxuICBcImV4cHJlc3Npb25cIjogMjksXG4gIFwibWF0aF9leHByZXNzaW9uXCI6IDMwLFxuICBcInZhbHVlXCI6IDMxXG59LFxudGVybWluYWxzXzoge1xuICAxOiBcIkVPRlwiLFxuICAyOiBcImVycm9yXCIsXG4gIDM6IFwiQUREXCIsXG4gIDQ6IFwiU1VCXCIsXG4gIDU6IFwiTVVMXCIsXG4gIDY6IFwiRElWXCIsXG4gIDc6IFwiTFBBUkVOXCIsXG4gIDg6IFwiUlBBUkVOXCIsXG4gIDk6IFwiTkVTVEVEX0NBTENcIixcbiAgMTA6IFwiUFJFRklYXCIsXG4gIDExOiBcIk5VTUJFUlwiLFxuICAxMjogXCJDU1NfVkFSXCIsXG4gIDEzOiBcIkNTU19DUFJPUFwiLFxuICAxNDogXCJDT01NQVwiLFxuICAxNTogXCJMRU5HVEhcIixcbiAgMTY6IFwiQU5HTEVcIixcbiAgMTc6IFwiVElNRVwiLFxuICAxODogXCJGUkVRXCIsXG4gIDE5OiBcIlJFU1wiLFxuICAyMDogXCJFTVNcIixcbiAgMjE6IFwiRVhTXCIsXG4gIDIyOiBcIkNIU1wiLFxuICAyMzogXCJSRU1TXCIsXG4gIDI0OiBcIlZIU1wiLFxuICAyNTogXCJWV1NcIixcbiAgMjY6IFwiVk1JTlNcIixcbiAgMjc6IFwiVk1BWFNcIixcbiAgMjg6IFwiUEVSQ0VOVEFHRVwiXG59LFxuVEVSUk9SOiAyLFxuICAgIEVPRjogMSxcblxuICAgIC8vIGludGVybmFsczogZGVmaW5lZCBoZXJlIHNvIHRoZSBvYmplY3QgKnN0cnVjdHVyZSogZG9lc24ndCBnZXQgbW9kaWZpZWQgYnkgcGFyc2UoKSBldCBhbCxcbiAgICAvLyB0aHVzIGhlbHBpbmcgSklUIGNvbXBpbGVycyBsaWtlIENocm9tZSBWOC5cbiAgICBvcmlnaW5hbFF1b3RlTmFtZTogbnVsbCxcbiAgICBvcmlnaW5hbFBhcnNlRXJyb3I6IG51bGwsXG4gICAgY2xlYW51cEFmdGVyUGFyc2U6IG51bGwsXG4gICAgY29uc3RydWN0UGFyc2VFcnJvckluZm86IG51bGwsXG4gICAgeXlNZXJnZUxvY2F0aW9uSW5mbzogbnVsbCxcblxuICAgIF9fcmVlbnRyYW50X2NhbGxfZGVwdGg6IDAsICAgICAgLy8gSU5URVJOQUwgVVNFIE9OTFlcbiAgICBfX2Vycm9yX2luZm9zOiBbXSwgICAgICAgICAgICAgIC8vIElOVEVSTkFMIFVTRSBPTkxZOiB0aGUgc2V0IG9mIHBhcnNlRXJyb3JJbmZvIG9iamVjdHMgY3JlYXRlZCBzaW5jZSB0aGUgbGFzdCBjbGVhbnVwXG4gICAgX19lcnJvcl9yZWNvdmVyeV9pbmZvczogW10sICAgICAvLyBJTlRFUk5BTCBVU0UgT05MWTogdGhlIHNldCBvZiBwYXJzZUVycm9ySW5mbyBvYmplY3RzIGNyZWF0ZWQgc2luY2UgdGhlIGxhc3QgY2xlYW51cFxuXG4gICAgLy8gQVBJcyB3aGljaCB3aWxsIGJlIHNldCB1cCBkZXBlbmRpbmcgb24gdXNlciBhY3Rpb24gY29kZSBhbmFseXNpczpcbiAgICAvL3l5UmVjb3ZlcmluZzogMCxcbiAgICAvL3l5RXJyT2s6IDAsXG4gICAgLy95eUNsZWFySW46IDAsXG5cbiAgICAvLyBIZWxwZXIgQVBJc1xuICAgIC8vIC0tLS0tLS0tLS0tXG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlciBjb2RlIGxhdGVyIG9uOiBwdXQgc3VpdGFibGUgcXVvdGVzIGFyb3VuZFxuICAgIC8vIGxpdGVyYWwgSURzIGluIGEgZGVzY3JpcHRpb24gc3RyaW5nLlxuICAgIHF1b3RlTmFtZTogZnVuY3Rpb24gcGFyc2VyX3F1b3RlTmFtZShpZF9zdHIpIHtcbiAgICAgICAgcmV0dXJuICdcIicgKyBpZF9zdHIgKyAnXCInO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gdGhlIG5hbWUgb2YgdGhlIGdpdmVuIHN5bWJvbCAodGVybWluYWwgb3Igbm9uLXRlcm1pbmFsKSBhcyBhIHN0cmluZywgd2hlbiBhdmFpbGFibGUuXG4gICAgLy9cbiAgICAvLyBSZXR1cm4gTlVMTCB3aGVuIHRoZSBzeW1ib2wgaXMgdW5rbm93biB0byB0aGUgcGFyc2VyLlxuICAgIGdldFN5bWJvbE5hbWU6IGZ1bmN0aW9uIHBhcnNlcl9nZXRTeW1ib2xOYW1lKHN5bWJvbCkge1xuICAgICAgICBpZiAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZS4uLiB0aGlzIG1pZ2h0IHJlZmVyIHRvIGEgUlVMRSB0b2tlbiBpLmUuIGEgbm9uLXRlcm1pbmFsOiBzZWUgaWYgd2UgY2FuIGRpZyB0aGF0IG9uZSB1cC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQW4gZXhhbXBsZSBvZiB0aGlzIG1heSBiZSB3aGVyZSBhIHJ1bGUncyBhY3Rpb24gY29kZSBjb250YWlucyBhIGNhbGwgbGlrZSB0aGlzOlxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgIHBhcnNlci5nZXRTeW1ib2xOYW1lKCMkKVxuICAgICAgICAvL1xuICAgICAgICAvLyB0byBvYnRhaW4gYSBodW1hbi1yZWFkYWJsZSBuYW1lIG9mIHRoZSBjdXJyZW50IGdyYW1tYXIgcnVsZS5cbiAgICAgICAgdmFyIHMgPSB0aGlzLnN5bWJvbHNfO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcykge1xuICAgICAgICAgICAgaWYgKHNba2V5XSA9PT0gc3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIGEgbW9yZS1vci1sZXNzIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBnaXZlbiBzeW1ib2wsIHdoZW4gYXZhaWxhYmxlLFxuICAgIC8vIG9yIHRoZSBzeW1ib2wgaXRzZWxmLCBzZXJ2aW5nIGFzIGl0cyBvd24gJ2Rlc2NyaXB0aW9uJyBmb3IgbGFjayBvZiBzb21ldGhpbmcgYmV0dGVyIHRvIHNlcnZlIHVwLlxuICAgIC8vXG4gICAgLy8gUmV0dXJuIE5VTEwgd2hlbiB0aGUgc3ltYm9sIGlzIHVua25vd24gdG8gdGhlIHBhcnNlci5cbiAgICBkZXNjcmliZVN5bWJvbDogZnVuY3Rpb24gcGFyc2VyX2Rlc2NyaWJlU3ltYm9sKHN5bWJvbCkge1xuICAgICAgICBpZiAoc3ltYm9sICE9PSB0aGlzLkVPRiAmJiB0aGlzLnRlcm1pbmFsX2Rlc2NyaXB0aW9uc18gJiYgdGhpcy50ZXJtaW5hbF9kZXNjcmlwdGlvbnNfW3N5bWJvbF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlcm1pbmFsX2Rlc2NyaXB0aW9uc19bc3ltYm9sXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzeW1ib2wgPT09IHRoaXMuRU9GKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VuZCBvZiBpbnB1dCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlkID0gdGhpcy5nZXRTeW1ib2xOYW1lKHN5bWJvbCk7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVvdGVOYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8gUHJvZHVjZSBhIChtb3JlIG9yIGxlc3MpIGh1bWFuLXJlYWRhYmxlIGxpc3Qgb2YgZXhwZWN0ZWQgdG9rZW5zIGF0IHRoZSBwb2ludCBvZiBmYWlsdXJlLlxuICAgIC8vXG4gICAgLy8gVGhlIHByb2R1Y2VkIGxpc3QgbWF5IGNvbnRhaW4gdG9rZW4gb3IgdG9rZW4gc2V0IGRlc2NyaXB0aW9ucyBpbnN0ZWFkIG9mIHRoZSB0b2tlbnNcbiAgICAvLyB0aGVtc2VsdmVzIHRvIGhlbHAgdHVybmluZyB0aGlzIG91dHB1dCBpbnRvIHNvbWV0aGluZyB0aGF0IGVhc2llciB0byByZWFkIGJ5IGh1bWFuc1xuICAgIC8vIHVubGVzcyBgZG9fbm90X2Rlc2NyaWJlYCBwYXJhbWV0ZXIgaXMgc2V0LCBpbiB3aGljaCBjYXNlIGEgbGlzdCBvZiB0aGUgcmF3LCAqbnVtZXJpYyosXG4gICAgLy8gZXhwZWN0ZWQgdGVybWluYWxzIGFuZCBub250ZXJtaW5hbHMgaXMgcHJvZHVjZWQuXG4gICAgLy9cbiAgICAvLyBUaGUgcmV0dXJuZWQgbGlzdCAoYXJyYXkpIHdpbGwgbm90IGNvbnRhaW4gYW55IGR1cGxpY2F0ZSBlbnRyaWVzLlxuICAgIGNvbGxlY3RfZXhwZWN0ZWRfdG9rZW5fc2V0OiBmdW5jdGlvbiBwYXJzZXJfY29sbGVjdF9leHBlY3RlZF90b2tlbl9zZXQoc3RhdGUsIGRvX25vdF9kZXNjcmliZSkge1xuICAgICAgICB2YXIgVEVSUk9SID0gdGhpcy5URVJST1I7XG4gICAgICAgIHZhciB0b2tlbnNldCA9IFtdO1xuICAgICAgICB2YXIgY2hlY2sgPSB7fTtcbiAgICAgICAgLy8gSGFzIHRoaXMgKGVycm9yPykgc3RhdGUgYmVlbiBvdXRmaXR0ZWQgd2l0aCBhIGN1c3RvbSBleHBlY3RhdGlvbnMgZGVzY3JpcHRpb24gdGV4dCBmb3IgaHVtYW4gY29uc3VtcHRpb24/XG4gICAgICAgIC8vIElmIHNvLCB1c2UgdGhhdCBvbmUgaW5zdGVhZCBvZiB0aGUgbGVzcyBwYWxhdGFibGUgdG9rZW4gc2V0LlxuICAgICAgICBpZiAoIWRvX25vdF9kZXNjcmliZSAmJiB0aGlzLnN0YXRlX2Rlc2NyaXB0aW9uc18gJiYgdGhpcy5zdGF0ZV9kZXNjcmlwdGlvbnNfW3N0YXRlXSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX2Rlc2NyaXB0aW9uc19bc3RhdGVdXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHAgaW4gdGhpcy50YWJsZVtzdGF0ZV0pIHtcbiAgICAgICAgICAgIHAgPSArcDtcbiAgICAgICAgICAgIGlmIChwICE9PSBURVJST1IpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGRvX25vdF9kZXNjcmliZSA/IHAgOiB0aGlzLmRlc2NyaWJlU3ltYm9sKHApO1xuICAgICAgICAgICAgICAgIGlmIChkICYmICFjaGVja1tkXSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnNldC5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1tkXSA9IHRydWU7ICAgICAgICAvLyBNYXJrIHRoaXMgdG9rZW4gZGVzY3JpcHRpb24gYXMgYWxyZWFkeSBtZW50aW9uZWQgdG8gcHJldmVudCBvdXRwdXR0aW5nIGR1cGxpY2F0ZSBlbnRyaWVzLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5zZXQ7XG4gICAgfSxcbnByb2R1Y3Rpb25zXzogYnAoe1xuICBwb3A6IHUoW1xuICAyOSxcbiAgcyxcbiAgWzMwLCAxMF0sXG4gIDMxLFxuICAzMSxcbiAgMzIsXG4gIDMyLFxuICBzLFxuICBbMzMsIDE1XVxuXSksXG4gIHJ1bGU6IHUoW1xuICAyLFxuICBzLFxuICBbMywgNV0sXG4gIDQsXG4gIDcsXG4gIHMsXG4gIFsxLCA0XSxcbiAgMixcbiAgNCxcbiAgNixcbiAgcyxcbiAgWzEsIDE0XSxcbiAgMlxuXSlcbn0pLFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gcGFyc2VyX19QZXJmb3JtQWN0aW9uKHl5c3RhdGUgLyogYWN0aW9uWzFdICovLCB5eXNwLCB5eXZzdGFjaykge1xuXG4gICAgICAgICAgLyogdGhpcyA9PSB5eXZhbCAqL1xuXG4gICAgICAgICAgLy8gdGhlIEpTIGVuZ2luZSBpdHNlbGYgY2FuIGdvIGFuZCByZW1vdmUgdGhlc2Ugc3RhdGVtZW50cyB3aGVuIGB5eWAgdHVybnMgb3V0IHRvIGJlIHVudXNlZCBpbiBhbnkgYWN0aW9uIGNvZGUhXG4gICAgICAgICAgdmFyIHl5ID0gdGhpcy55eTtcbiAgICAgICAgICB2YXIgeXlwYXJzZXIgPSB5eS5wYXJzZXI7XG4gICAgICAgICAgdmFyIHl5bGV4ZXIgPSB5eS5sZXhlcjtcblxuICAgICAgICAgIFxuXG4gICAgICAgICAgc3dpdGNoICh5eXN0YXRlKSB7XG5jYXNlIDA6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICAkYWNjZXB0IDogZXhwcmVzc2lvbiAkZW5kICovXG5cbiAgICAvLyBkZWZhdWx0IGFjdGlvbiAoZ2VuZXJhdGVkIGJ5IEpJU09OIG1vZGUgY2xhc3NpYy9tZXJnZSA6OiAxLFZULFZBLC0sLSwtLC0sLSwtKTpcbiAgICB0aGlzLiQgPSB5eXZzdGFja1t5eXNwIC0gMV07XG4gICAgLy8gRU5EIG9mIGRlZmF1bHQgYWN0aW9uIChnZW5lcmF0ZWQgYnkgSklTT04gbW9kZSBjbGFzc2ljL21lcmdlIDo6IDEsVlQsVkEsLSwtLC0sLSwtLC0pXG4gICAgYnJlYWs7XG5cbmNhc2UgMTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGV4cHJlc3Npb24gOiBtYXRoX2V4cHJlc3Npb24gRU9GICovXG5cbiAgICAvLyBkZWZhdWx0IGFjdGlvbiAoZ2VuZXJhdGVkIGJ5IEpJU09OIG1vZGUgY2xhc3NpYy9tZXJnZSA6OiAyLFZULFZBLC0sLSwtLC0sLSwtKTpcbiAgICB0aGlzLiQgPSB5eXZzdGFja1t5eXNwIC0gMV07XG4gICAgLy8gRU5EIG9mIGRlZmF1bHQgYWN0aW9uIChnZW5lcmF0ZWQgYnkgSklTT04gbW9kZSBjbGFzc2ljL21lcmdlIDo6IDIsVlQsVkEsLSwtLC0sLSwtLC0pXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIHl5dnN0YWNrW3l5c3AgLSAxXTtcbiAgICBicmVhaztcblxuY2FzZSAyOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogbWF0aF9leHByZXNzaW9uIEFERCBtYXRoX2V4cHJlc3Npb24gKi9cbmNhc2UgMzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIG1hdGhfZXhwcmVzc2lvbiA6IG1hdGhfZXhwcmVzc2lvbiBTVUIgbWF0aF9leHByZXNzaW9uICovXG5jYXNlIDQ6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiBtYXRoX2V4cHJlc3Npb24gTVVMIG1hdGhfZXhwcmVzc2lvbiAqL1xuY2FzZSA1OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogbWF0aF9leHByZXNzaW9uIERJViBtYXRoX2V4cHJlc3Npb24gKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ01hdGhFeHByZXNzaW9uJywgb3BlcmF0b3I6IHl5dnN0YWNrW3l5c3AgLSAxXSwgbGVmdDogeXl2c3RhY2tbeXlzcCAtIDJdLCByaWdodDogeXl2c3RhY2tbeXlzcF0gfTtcbiAgICBicmVhaztcblxuY2FzZSA2OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogTFBBUkVOIG1hdGhfZXhwcmVzc2lvbiBSUEFSRU4gKi9cblxuICAgIHRoaXMuJCA9IHl5dnN0YWNrW3l5c3AgLSAxXTtcbiAgICBicmVhaztcblxuY2FzZSA3OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogTkVTVEVEX0NBTEMgTFBBUkVOIG1hdGhfZXhwcmVzc2lvbiBSUEFSRU4gKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0NhbGMnLCB2YWx1ZTogeXl2c3RhY2tbeXlzcCAtIDFdIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgODpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIG1hdGhfZXhwcmVzc2lvbiA6IFNVQiBQUkVGSVggU1VCIE5FU1RFRF9DQUxDIExQQVJFTiBtYXRoX2V4cHJlc3Npb24gUlBBUkVOICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdDYWxjJywgdmFsdWU6IHl5dnN0YWNrW3l5c3AgLSAxXSwgcHJlZml4OiB5eXZzdGFja1t5eXNwIC0gNV0gfTtcbiAgICBicmVhaztcblxuY2FzZSA5OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogY3NzX3ZhcmlhYmxlICovXG5jYXNlIDEwOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogY3NzX3ZhbHVlICovXG5jYXNlIDExOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogdmFsdWUgKi9cblxuICAgIHRoaXMuJCA9IHl5dnN0YWNrW3l5c3BdO1xuICAgIGJyZWFrO1xuXG5jYXNlIDEyOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgdmFsdWUgOiBOVU1CRVIgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1ZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMTM6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICB2YWx1ZSA6IFNVQiBOVU1CRVIgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1ZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pICogLTEgfTtcbiAgICBicmVhaztcblxuY2FzZSAxNDpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YXJpYWJsZSA6IENTU19WQVIgTFBBUkVOIENTU19DUFJPUCBSUEFSRU4gKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0Nzc1ZhcmlhYmxlJywgdmFsdWU6IHl5dnN0YWNrW3l5c3AgLSAxXSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE1OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhcmlhYmxlIDogQ1NTX1ZBUiBMUEFSRU4gQ1NTX0NQUk9QIENPTU1BIG1hdGhfZXhwcmVzc2lvbiBSUEFSRU4gKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0Nzc1ZhcmlhYmxlJywgdmFsdWU6IHl5dnN0YWNrW3l5c3AgLSAzXSwgZmFsbGJhY2s6IHl5dnN0YWNrW3l5c3AgLSAxXSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE2OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogTEVOR1RIICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdMZW5ndGhWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogL1thLXpdKy8uZXhlYyh5eXZzdGFja1t5eXNwXSlbMF0gfTtcbiAgICBicmVhaztcblxuY2FzZSAxNzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IEFOR0xFICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdBbmdsZVZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAvW2Etel0rLy5leGVjKHl5dnN0YWNrW3l5c3BdKVswXSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE4OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogVElNRSAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnVGltZVZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAvW2Etel0rLy5leGVjKHl5dnN0YWNrW3l5c3BdKVswXSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE5OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogRlJFUSAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnRnJlcXVlbmN5VmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6IC9bYS16XSsvLmV4ZWMoeXl2c3RhY2tbeXlzcF0pWzBdIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjA6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBSRVMgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1Jlc29sdXRpb25WYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogL1thLXpdKy8uZXhlYyh5eXZzdGFja1t5eXNwXSlbMF0gfTtcbiAgICBicmVhaztcblxuY2FzZSAyMTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IEVNUyAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnRW1WYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogJ2VtJyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDIyOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogRVhTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdFeFZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAnZXgnIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjM6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBDSFMgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0NoVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICdjaCcgfTtcbiAgICBicmVhaztcblxuY2FzZSAyNDpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFJFTVMgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1JlbVZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAncmVtJyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDI1OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogVkhTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdWaFZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAndmgnIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjY6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBWV1MgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1Z3VmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICd2dycgfTtcbiAgICBicmVhaztcblxuY2FzZSAyNzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFZNSU5TICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdWbWluVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICd2bWluJyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDI4OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogVk1BWFMgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1ZtYXhWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogJ3ZtYXgnIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjk6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBQRVJDRU5UQUdFICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdQZXJjZW50YWdlVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICclJyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDMwOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogU1VCIGNzc192YWx1ZSAqL1xuXG4gICAgdmFyIHByZXYgPSB5eXZzdGFja1t5eXNwXTsgcHJldi52YWx1ZSAqPSAtMTsgdGhpcy4kID0gcHJldjtcbiAgICBicmVhaztcblxufVxufSxcbnRhYmxlOiBidCh7XG4gIGxlbjogdShbXG4gIDI0LFxuICAxLFxuICA1LFxuICAyMyxcbiAgMSxcbiAgMTgsXG4gIHMsXG4gIFswLCAzXSxcbiAgMSxcbiAgcyxcbiAgWzAsIDE2XSxcbiAgcyxcbiAgWzIzLCA0XSxcbiAgYyxcbiAgWzI4LCAzXSxcbiAgMCxcbiAgMCxcbiAgMTYsXG4gIDEsXG4gIDYsXG4gIDYsXG4gIHMsXG4gIFswLCAzXSxcbiAgNSxcbiAgMSxcbiAgMixcbiAgYyxcbiAgWzM3LCAzXSxcbiAgYyxcbiAgWzIwLCAzXSxcbiAgNSxcbiAgMCxcbiAgMFxuXSksXG4gIHN5bWJvbDogdShbXG4gIDQsXG4gIDcsXG4gIDksXG4gIDExLFxuICAxMixcbiAgcyxcbiAgWzE1LCAxOSwgMV0sXG4gIDEsXG4gIDEsXG4gIHMsXG4gIFszLCA0LCAxXSxcbiAgYyxcbiAgWzMwLCAxOV0sXG4gIGMsXG4gIFsyOSwgNF0sXG4gIDcsXG4gIDQsXG4gIDEwLFxuICAxMSxcbiAgYyxcbiAgWzIyLCAxNF0sXG4gIGMsXG4gIFsxOSwgM10sXG4gIGMsXG4gIFs0MywgMjJdLFxuICBjLFxuICBbMjMsIDY5XSxcbiAgYyxcbiAgWzEzOSwgNF0sXG4gIDgsXG4gIGMsXG4gIFs1MSwgMjRdLFxuICA0LFxuICBjLFxuICBbMTM4LCAxNV0sXG4gIDEzLFxuICBjLFxuICBbMTg2LCA1XSxcbiAgOCxcbiAgYyxcbiAgWzYsIDZdLFxuICBjLFxuICBbNSwgNV0sXG4gIDksXG4gIDgsXG4gIDE0LFxuICBjLFxuICBbMTU5LCA0N10sXG4gIGMsXG4gIFs2MCwgMTBdXG5dKSxcbiAgdHlwZTogdShbXG4gIHMsXG4gIFsyLCAxOV0sXG4gIHMsXG4gIFswLCA1XSxcbiAgMSxcbiAgcyxcbiAgWzIsIDI0XSxcbiAgcyxcbiAgWzAsIDRdLFxuICBjLFxuICBbMjIsIDE5XSxcbiAgYyxcbiAgWzQzLCA0Ml0sXG4gIGMsXG4gIFsyMywgNzBdLFxuICBjLFxuICBbMjgsIDI1XSxcbiAgYyxcbiAgWzQ1LCAyNV0sXG4gIGMsXG4gIFsxMTMsIDU0XVxuXSksXG4gIHN0YXRlOiB1KFtcbiAgMSxcbiAgMixcbiAgOCxcbiAgNixcbiAgNyxcbiAgMzAsXG4gIGMsXG4gIFs0LCAzXSxcbiAgMzMsXG4gIDM3LFxuICBjLFxuICBbNSwgM10sXG4gIDM4LFxuICBjLFxuICBbNCwgM10sXG4gIDM5LFxuICBjLFxuICBbNCwgM10sXG4gIDQwLFxuICBjLFxuICBbNCwgM10sXG4gIDQyLFxuICBjLFxuICBbMjEsIDRdLFxuICA1MCxcbiAgYyxcbiAgWzUsIDNdLFxuICA1MSxcbiAgYyxcbiAgWzQsIDNdXG5dKSxcbiAgbW9kZTogdShbXG4gIHMsXG4gIFsxLCAxNzldLFxuICBzLFxuICBbMiwgM10sXG4gIGMsXG4gIFs1LCA1XSxcbiAgYyxcbiAgWzYsIDRdLFxuICBzLFxuICBbMSwgNTddXG5dKSxcbiAgZ290bzogdShbXG4gIDUsXG4gIDMsXG4gIDQsXG4gIDI0LFxuICBzLFxuICBbOSwgMTUsIDFdLFxuICBzLFxuICBbMjUsIDUsIDFdLFxuICBjLFxuICBbMjQsIDE5XSxcbiAgMzEsXG4gIDM1LFxuICAzMixcbiAgMzQsXG4gIGMsXG4gIFsxOCwgMTRdLFxuICAzNixcbiAgYyxcbiAgWzM4LCAxOV0sXG4gIGMsXG4gIFsxOSwgNTddLFxuICBjLFxuICBbMTE4LCA0XSxcbiAgNDEsXG4gIGMsXG4gIFsyNCwgMTldLFxuICA0MyxcbiAgMzUsXG4gIGMsXG4gIFsxNiwgMTRdLFxuICA0NCxcbiAgcyxcbiAgWzIsIDNdLFxuICAyOCxcbiAgMjksXG4gIDIsXG4gIHMsXG4gIFszLCAzXSxcbiAgMjgsXG4gIDI5LFxuICAzLFxuICBjLFxuICBbNTMsIDRdLFxuICBzLFxuICBbNDUsIDUsIDFdLFxuICBjLFxuICBbMTAwLCA0Ml0sXG4gIDUyLFxuICBjLFxuICBbNSwgNF0sXG4gIDUzXG5dKVxufSksXG5kZWZhdWx0QWN0aW9uczogYmRhKHtcbiAgaWR4OiB1KFtcbiAgNixcbiAgNyxcbiAgOCxcbiAgcyxcbiAgWzEwLCAxNiwgMV0sXG4gIDMzLFxuICAzNCxcbiAgMzksXG4gIDQwLFxuICA0MSxcbiAgNDUsXG4gIDQ3LFxuICA1MixcbiAgNTNcbl0pLFxuICBnb3RvOiB1KFtcbiAgOSxcbiAgMTAsXG4gIDExLFxuICBzLFxuICBbMTYsIDE0LCAxXSxcbiAgMTIsXG4gIDEsXG4gIDMwLFxuICAxMyxcbiAgcyxcbiAgWzQsIDQsIDFdLFxuICAxNCxcbiAgMTUsXG4gIDhcbl0pXG59KSxcbnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcykge1xuICAgIGlmIChoYXNoLnJlY292ZXJhYmxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy50cmFjZShzdHIpO1xuICAgICAgICB9XG4gICAgICAgIGhhc2guZGVzdHJveSgpOyAgICAgICAgICAgICAvLyBkZXN0cm95Li4uIHdlbGwsICphbG1vc3QqIVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy50cmFjZShzdHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIEV4Y2VwdGlvbkNsYXNzID0gdGhpcy5KaXNvblBhcnNlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb25DbGFzcyhzdHIsIGhhc2gpO1xuICAgIH1cbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHN0YWNrID0gbmV3IEFycmF5KDEyOCk7ICAgICAgICAgLy8gdG9rZW4gc3RhY2s6IHN0b3JlcyB0b2tlbiB3aGljaCBsZWFkcyB0byBzdGF0ZSBhdCB0aGUgc2FtZSBpbmRleCAoY29sdW1uIHN0b3JhZ2UpXG4gICAgdmFyIHNzdGFjayA9IG5ldyBBcnJheSgxMjgpOyAgICAgICAgLy8gc3RhdGUgc3RhY2s6IHN0b3JlcyBzdGF0ZXMgKGNvbHVtbiBzdG9yYWdlKVxuXG4gICAgdmFyIHZzdGFjayA9IG5ldyBBcnJheSgxMjgpOyAgICAgICAgLy8gc2VtYW50aWMgdmFsdWUgc3RhY2tcblxuICAgIHZhciB0YWJsZSA9IHRoaXMudGFibGU7XG4gICAgdmFyIHNwID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ3N0YWNrIHBvaW50ZXInOiBpbmRleCBpbnRvIHRoZSBzdGFja3NcblxuXG4gICAgXG5cblxuICAgIHZhciBzeW1ib2wgPSAwO1xuXG5cblxuICAgIHZhciBURVJST1IgPSB0aGlzLlRFUlJPUjtcbiAgICB2YXIgRU9GID0gdGhpcy5FT0Y7XG4gICAgdmFyIEVSUk9SX1JFQ09WRVJZX1RPS0VOX0RJU0NBUkRfQ09VTlQgPSAodGhpcy5vcHRpb25zLmVycm9yUmVjb3ZlcnlUb2tlbkRpc2NhcmRDb3VudCB8IDApIHx8IDM7XG4gICAgdmFyIE5PX0FDVElPTiA9IFswLCA1NCAvKiA9PT0gdGFibGUubGVuZ3RoIDo6IGVuc3VyZXMgdGhhdCBhbnlvbmUgdXNpbmcgdGhpcyBuZXcgc3RhdGUgd2lsbCBmYWlsIGRyYW1hdGljYWxseSEgKi9dO1xuXG4gICAgdmFyIGxleGVyO1xuICAgIGlmICh0aGlzLl9fbGV4ZXJfXykge1xuICAgICAgICBsZXhlciA9IHRoaXMuX19sZXhlcl9fO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxleGVyID0gdGhpcy5fX2xleGVyX18gPSBPYmplY3QuY3JlYXRlKHRoaXMubGV4ZXIpO1xuICAgIH1cblxuICAgIHZhciBzaGFyZWRTdGF0ZV95eSA9IHtcbiAgICAgICAgcGFyc2VFcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICBxdW90ZU5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgbGV4ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFyc2VyOiB1bmRlZmluZWQsXG4gICAgICAgIHByZV9wYXJzZTogdW5kZWZpbmVkLFxuICAgICAgICBwb3N0X3BhcnNlOiB1bmRlZmluZWQsXG4gICAgICAgIHByZV9sZXg6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zdF9sZXg6IHVuZGVmaW5lZCAgICAgIC8vIFdBUk5JTkc6IG11c3QgYmUgd3JpdHRlbiB0aGlzIHdheSBmb3IgdGhlIGNvZGUgZXhwYW5kZXJzIHRvIHdvcmsgY29ycmVjdGx5IGluIGJvdGggRVM1IGFuZCBFUzYgbW9kZXMhXG4gICAgfTtcblxuICAgIHZhciBBU1NFUlQ7XG4gICAgaWYgKHR5cGVvZiBhc3NlcnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgQVNTRVJUID0gZnVuY3Rpb24gSmlzb25Bc3NlcnQoY29uZCwgbXNnKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc2VydGlvbiBmYWlsZWQ6ICcgKyAobXNnIHx8ICcqKionKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgQVNTRVJUID0gYXNzZXJ0O1xuICAgIH1cblxuICAgIHRoaXMueXlHZXRTaGFyZWRTdGF0ZSA9IGZ1bmN0aW9uIHl5R2V0U2hhcmVkU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBzaGFyZWRTdGF0ZV95eTtcbiAgICB9O1xuXG5cblxuXG5cblxuXG5cbiAgICBmdW5jdGlvbiBzaGFsbG93X2NvcHlfbm9jbG9iYmVyKGRzdCwgc3JjKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gc3JjKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRzdFtrXSA9PT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNyYywgaykpIHtcbiAgICAgICAgICAgICAgICBkc3Rba10gPSBzcmNba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb3B5IHN0YXRlXG4gICAgc2hhbGxvd19jb3B5X25vY2xvYmJlcihzaGFyZWRTdGF0ZV95eSwgdGhpcy55eSk7XG5cbiAgICBzaGFyZWRTdGF0ZV95eS5sZXhlciA9IGxleGVyO1xuICAgIHNoYXJlZFN0YXRlX3l5LnBhcnNlciA9IHRoaXM7XG5cblxuXG5cblxuXG4gICAgLy8gRG9lcyB0aGUgc2hhcmVkIHN0YXRlIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGBwYXJzZUVycm9yYCB0aGF0IGFscmVhZHkgY29tZXMgd2l0aCB0aGlzIGluc3RhbmNlP1xuICAgIGlmICh0eXBlb2Ygc2hhcmVkU3RhdGVfeXkucGFyc2VFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSBmdW5jdGlvbiBwYXJzZUVycm9yQWx0KHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIGlmICghRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBFeGNlcHRpb25DbGFzcyA9IHRoaXMuSmlzb25QYXJzZXJFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaGFyZWRTdGF0ZV95eS5wYXJzZUVycm9yLmNhbGwodGhpcywgc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcyk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdGhpcy5vcmlnaW5hbFBhcnNlRXJyb3I7XG4gICAgfVxuXG4gICAgLy8gRG9lcyB0aGUgc2hhcmVkIHN0YXRlIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGBxdW90ZU5hbWVgIHRoYXQgYWxyZWFkeSBjb21lcyB3aXRoIHRoaXMgaW5zdGFuY2U/XG4gICAgaWYgKHR5cGVvZiBzaGFyZWRTdGF0ZV95eS5xdW90ZU5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5xdW90ZU5hbWUgPSBmdW5jdGlvbiBxdW90ZU5hbWVBbHQoaWRfc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGVfeXkucXVvdGVOYW1lLmNhbGwodGhpcywgaWRfc3RyKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1b3RlTmFtZSA9IHRoaXMub3JpZ2luYWxRdW90ZU5hbWU7XG4gICAgfVxuXG4gICAgLy8gc2V0IHVwIHRoZSBjbGVhbnVwIGZ1bmN0aW9uOyBtYWtlIGl0IGFuIEFQSSBzbyB0aGF0IGV4dGVybmFsIGNvZGUgY2FuIHJlLXVzZSB0aGlzIG9uZSBpbiBjYXNlIG9mXG4gICAgLy8gY2FsYW1pdGllcyBvciB3aGVuIHRoZSBgJW9wdGlvbnMgbm8tdHJ5LWNhdGNoYCBvcHRpb24gaGFzIGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgZ3JhbW1hciwgaW4gd2hpY2hcbiAgICAvLyBjYXNlIHRoaXMgcGFyc2UoKSBBUEkgbWV0aG9kIGRvZXNuJ3QgY29tZSB3aXRoIGEgYGZpbmFsbHkgeyAuLi4gfWAgYmxvY2sgYW55IG1vcmUhXG4gICAgLy9cbiAgICAvLyBOT1RFOiBhcyB0aGlzIEFQSSB1c2VzIHBhcnNlKCkgYXMgYSBjbG9zdXJlLCBpdCBNVVNUIGJlIHNldCBhZ2FpbiBvbiBldmVyeSBwYXJzZSgpIGludm9jYXRpb24sXG4gICAgLy8gICAgICAgb3IgZWxzZSB5b3VyIGBzaGFyZWRTdGF0ZWAsIGV0Yy4gcmVmZXJlbmNlcyB3aWxsIGJlICp3cm9uZyohXG4gICAgdGhpcy5jbGVhbnVwQWZ0ZXJQYXJzZSA9IGZ1bmN0aW9uIHBhcnNlcl9jbGVhbnVwQWZ0ZXJQYXJzZShyZXN1bHRWYWx1ZSwgaW52b2tlX3Bvc3RfbWV0aG9kcywgZG9fbm90X251a2VfZXJyb3JpbmZvcykge1xuICAgICAgICB2YXIgcnY7XG5cbiAgICAgICAgaWYgKGludm9rZV9wb3N0X21ldGhvZHMpIHtcbiAgICAgICAgICAgIHZhciBoYXNoO1xuXG4gICAgICAgICAgICBpZiAoc2hhcmVkU3RhdGVfeXkucG9zdF9wYXJzZSB8fCB0aGlzLnBvc3RfcGFyc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYW4gZXJyb3IgaGFzaCBpbmZvIGluc3RhbmNlOiB3ZSByZS11c2UgdGhpcyBBUEkgaW4gYSAqKm5vbi1lcnJvciBzaXR1YXRpb24qKlxuICAgICAgICAgICAgICAgIC8vIGFzIHRoaXMgb25lIGRlbGl2ZXJzIGFsbCBwYXJzZXIgaW50ZXJuYWxzIHJlYWR5IGZvciBhY2Nlc3MgYnkgdXNlcmxhbmQgY29kZS5cbiAgICAgICAgICAgICAgICBoYXNoID0gdGhpcy5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbyhudWxsIC8qIG5vIGVycm9yISAqLywgbnVsbCAvKiBubyBleGNlcHRpb24hICovLCBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaGFyZWRTdGF0ZV95eS5wb3N0X3BhcnNlKSB7XG4gICAgICAgICAgICAgICAgcnYgPSBzaGFyZWRTdGF0ZV95eS5wb3N0X3BhcnNlLmNhbGwodGhpcywgc2hhcmVkU3RhdGVfeXksIHJlc3VsdFZhbHVlLCBoYXNoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ2ICE9PSAndW5kZWZpbmVkJykgcmVzdWx0VmFsdWUgPSBydjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnBvc3RfcGFyc2UpIHtcbiAgICAgICAgICAgICAgICBydiA9IHRoaXMucG9zdF9wYXJzZS5jYWxsKHRoaXMsIHNoYXJlZFN0YXRlX3l5LCByZXN1bHRWYWx1ZSwgaGFzaCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBydiAhPT0gJ3VuZGVmaW5lZCcpIHJlc3VsdFZhbHVlID0gcnY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNsZWFudXA6XG4gICAgICAgICAgICBpZiAoaGFzaCAmJiBoYXNoLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICBoYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9fcmVlbnRyYW50X2NhbGxfZGVwdGggPiAxKSByZXR1cm4gcmVzdWx0VmFsdWU7ICAgICAgICAvLyBkbyBub3QgKHlldCkga2lsbCB0aGUgc2hhcmVkU3RhdGUgd2hlbiB0aGlzIGlzIGEgcmVlbnRyYW50IHJ1bi5cblxuICAgICAgICAvLyBjbGVhbiB1cCB0aGUgbGluZ2VyaW5nIGxleGVyIHN0cnVjdHVyZXMgYXMgd2VsbDpcbiAgICAgICAgaWYgKGxleGVyLmNsZWFudXBBZnRlckxleCkge1xuICAgICAgICAgICAgbGV4ZXIuY2xlYW51cEFmdGVyTGV4KGRvX25vdF9udWtlX2Vycm9yaW5mb3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCBsaW5nZXJpbmcgY2lyY3VsYXIgcmVmZXJlbmNlcyBmcm9tIGNhdXNpbmcgbWVtb3J5IGxlYWtzOlxuICAgICAgICBpZiAoc2hhcmVkU3RhdGVfeXkpIHtcbiAgICAgICAgICAgIHNoYXJlZFN0YXRlX3l5LmxleGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc2hhcmVkU3RhdGVfeXkucGFyc2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGxleGVyLnl5ID09PSBzaGFyZWRTdGF0ZV95eSkge1xuICAgICAgICAgICAgICAgIGxleGVyLnl5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoYXJlZFN0YXRlX3l5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0aGlzLm9yaWdpbmFsUGFyc2VFcnJvcjtcbiAgICAgICAgdGhpcy5xdW90ZU5hbWUgPSB0aGlzLm9yaWdpbmFsUXVvdGVOYW1lO1xuXG4gICAgICAgIC8vIG51a2UgdGhlIHZzdGFja1tdIGFycmF5IGF0IGxlYXN0IGFzIHRoYXQgb25lIHdpbGwgc3RpbGwgcmVmZXJlbmNlIG9ic29sZXRlZCB1c2VyIHZhbHVlcy5cbiAgICAgICAgLy8gVG8gYmUgc2FmZSwgd2UgbnVrZSB0aGUgb3RoZXIgaW50ZXJuYWwgc3RhY2sgY29sdW1ucyBhcyB3ZWxsLi4uXG4gICAgICAgIHN0YWNrLmxlbmd0aCA9IDA7ICAgICAgICAgICAgICAgLy8gZmFzdGVzdCB3YXkgdG8gbnVrZSBhbiBhcnJheSB3aXRob3V0IG92ZXJseSBib3RoZXJpbmcgdGhlIEdDXG4gICAgICAgIHNzdGFjay5sZW5ndGggPSAwO1xuXG4gICAgICAgIHZzdGFjay5sZW5ndGggPSAwO1xuICAgICAgICBzcCA9IDA7XG5cbiAgICAgICAgLy8gbnVrZSB0aGUgZXJyb3IgaGFzaCBpbmZvIGluc3RhbmNlcyBjcmVhdGVkIGR1cmluZyB0aGlzIHJ1bi5cbiAgICAgICAgLy8gVXNlcmxhbmQgY29kZSBtdXN0IENPUFkgYW55IGRhdGEvcmVmZXJlbmNlc1xuICAgICAgICAvLyBpbiB0aGUgZXJyb3IgaGFzaCBpbnN0YW5jZShzKSBpdCBpcyBtb3JlIHBlcm1hbmVudGx5IGludGVyZXN0ZWQgaW4uXG4gICAgICAgIGlmICghZG9fbm90X251a2VfZXJyb3JpbmZvcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX19lcnJvcl9pbmZvcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuX19lcnJvcl9pbmZvc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19lcnJvcl9pbmZvcy5sZW5ndGggPSAwO1xuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRWYWx1ZTtcbiAgICB9O1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBOT1RFOiBhcyB0aGlzIEFQSSB1c2VzIHBhcnNlKCkgYXMgYSBjbG9zdXJlLCBpdCBNVVNUIGJlIHNldCBhZ2FpbiBvbiBldmVyeSBwYXJzZSgpIGludm9jYXRpb24sXG4gICAgLy8gICAgICAgb3IgZWxzZSB5b3VyIGBsZXhlcmAsIGBzaGFyZWRTdGF0ZWAsIGV0Yy4gcmVmZXJlbmNlcyB3aWxsIGJlICp3cm9uZyohXG4gICAgdGhpcy5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbyA9IGZ1bmN0aW9uIHBhcnNlcl9jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbyhtc2csIGV4LCBleHBlY3RlZCwgcmVjb3ZlcmFibGUpIHtcbiAgICAgICAgdmFyIHBlaSA9IHtcbiAgICAgICAgICAgIGVyclN0cjogbXNnLFxuICAgICAgICAgICAgZXhjZXB0aW9uOiBleCxcbiAgICAgICAgICAgIHRleHQ6IGxleGVyLm1hdGNoLFxuICAgICAgICAgICAgdmFsdWU6IGxleGVyLnl5dGV4dCxcbiAgICAgICAgICAgIHRva2VuOiB0aGlzLmRlc2NyaWJlU3ltYm9sKHN5bWJvbCkgfHwgc3ltYm9sLFxuICAgICAgICAgICAgdG9rZW5faWQ6IHN5bWJvbCxcbiAgICAgICAgICAgIGxpbmU6IGxleGVyLnl5bGluZW5vLFxuXG4gICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICAgICAgICByZWNvdmVyYWJsZTogcmVjb3ZlcmFibGUsXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIG5ld19zdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgICAgICBzeW1ib2xfc3RhY2s6IHN0YWNrLFxuICAgICAgICAgICAgc3RhdGVfc3RhY2s6IHNzdGFjayxcbiAgICAgICAgICAgIHZhbHVlX3N0YWNrOiB2c3RhY2ssXG5cbiAgICAgICAgICAgIHN0YWNrX3BvaW50ZXI6IHNwLFxuICAgICAgICAgICAgeXk6IHNoYXJlZFN0YXRlX3l5LFxuICAgICAgICAgICAgbGV4ZXI6IGxleGVyLFxuICAgICAgICAgICAgcGFyc2VyOiB0aGlzLFxuXG4gICAgICAgICAgICAvLyBhbmQgbWFrZSBzdXJlIHRoZSBlcnJvciBpbmZvIGRvZXNuJ3Qgc3RheSBkdWUgdG8gcG90ZW50aWFsXG4gICAgICAgICAgICAvLyByZWYgY3ljbGUgdmlhIHVzZXJsYW5kIGNvZGUgbWFuaXB1bGF0aW9ucy5cbiAgICAgICAgICAgIC8vIFRoZXNlIHdvdWxkIG90aGVyd2lzZSBhbGwgYmUgbWVtb3J5IGxlYWsgb3Bwb3J0dW5pdGllcyFcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgb25seSBhcnJheSBhbmQgb2JqZWN0IHJlZmVyZW5jZXMgYXJlIG51a2VkIGFzIHRob3NlXG4gICAgICAgICAgICAvLyBjb25zdGl0dXRlIHRoZSBzZXQgb2YgZWxlbWVudHMgd2hpY2ggY2FuIHByb2R1Y2UgYSBjeWNsaWMgcmVmLlxuICAgICAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIG1lbWJlcnMgaXMga2VwdCBpbnRhY3QgYXMgdGhleSBhcmUgaGFybWxlc3MuXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cnVjdFBhcnNlRXJyb3JJbmZvKCkge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBjeWNsaWMgcmVmZXJlbmNlcyBhZGRlZCB0byBlcnJvciBpbmZvOlxuICAgICAgICAgICAgICAgIC8vIGluZm8ueXkgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIGluZm8ubGV4ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIGluZm8udmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIGluZm8udmFsdWVfc3RhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIC4uLlxuICAgICAgICAgICAgICAgIHZhciByZWMgPSAhIXRoaXMucmVjb3ZlcmFibGU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVjb3ZlcmFibGUgPSByZWM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIHRyYWNrIHRoaXMgaW5zdGFuY2Ugc28gd2UgY2FuIGBkZXN0cm95KClgIGl0IG9uY2Ugd2UgZGVlbSBpdCBzdXBlcmZsdW91cyBhbmQgcmVhZHkgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiFcbiAgICAgICAgdGhpcy5fX2Vycm9yX2luZm9zLnB1c2gocGVpKTtcbiAgICAgICAgcmV0dXJuIHBlaTtcbiAgICB9O1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgZnVuY3Rpb24gZ2V0Tm9uVGVybWluYWxGcm9tQ29kZShzeW1ib2wpIHtcbiAgICAgICAgdmFyIHRva2VuTmFtZSA9IHNlbGYuZ2V0U3ltYm9sTmFtZShzeW1ib2wpO1xuICAgICAgICBpZiAoIXRva2VuTmFtZSkge1xuICAgICAgICAgICAgdG9rZW5OYW1lID0gc3ltYm9sO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbk5hbWU7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzdGRMZXgoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IGxleGVyLmxleCgpO1xuICAgICAgICAvLyBpZiB0b2tlbiBpc24ndCBpdHMgbnVtZXJpYyB2YWx1ZSwgY29udmVydFxuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBFT0Y7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmFzdExleCgpIHtcbiAgICAgICAgdmFyIHRva2VuID0gbGV4ZXIuZmFzdExleCgpO1xuICAgICAgICAvLyBpZiB0b2tlbiBpc24ndCBpdHMgbnVtZXJpYyB2YWx1ZSwgY29udmVydFxuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBFT0Y7XG4gICAgfVxuXG4gICAgdmFyIGxleCA9IHN0ZExleDtcblxuXG4gICAgdmFyIHN0YXRlLCBhY3Rpb24sIHIsIHQ7XG4gICAgdmFyIHl5dmFsID0ge1xuICAgICAgICAkOiB0cnVlLFxuICAgICAgICBfJDogdW5kZWZpbmVkLFxuICAgICAgICB5eTogc2hhcmVkU3RhdGVfeXlcbiAgICB9O1xuICAgIHZhciBwO1xuICAgIHZhciB5eXJ1bGVsZW47XG4gICAgdmFyIHRoaXNfcHJvZHVjdGlvbjtcbiAgICB2YXIgbmV3U3RhdGU7XG4gICAgdmFyIHJldHZhbCA9IGZhbHNlO1xuXG5cbiAgICB0cnkge1xuICAgICAgICB0aGlzLl9fcmVlbnRyYW50X2NhbGxfZGVwdGgrKztcblxuICAgICAgICBsZXhlci5zZXRJbnB1dChpbnB1dCwgc2hhcmVkU3RhdGVfeXkpO1xuXG4gICAgICAgIC8vIE5PVEU6IHdlICphc3N1bWUqIG5vIGxleGVyIHByZS9wb3N0IGhhbmRsZXJzIGFyZSBzZXQgdXAgKmFmdGVyKiBcbiAgICAgICAgLy8gdGhpcyBpbml0aWFsIGBzZXRJbnB1dCgpYCBjYWxsOiBoZW5jZSB3ZSBjYW4gbm93IGNoZWNrIGFuZCBkZWNpZGVcbiAgICAgICAgLy8gd2hldGhlciB3ZSdsbCBnbyB3aXRoIHRoZSBzdGFuZGFyZCwgc2xvd2VyLCBsZXgoKSBBUEkgb3IgdGhlXG4gICAgICAgIC8vIGBmYXN0X2xleCgpYCBvbmU6XG4gICAgICAgIGlmICh0eXBlb2YgbGV4ZXIuY2FuSVVzZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGxleGVySW5mbyA9IGxleGVyLmNhbklVc2UoKTtcbiAgICAgICAgICAgIGlmIChsZXhlckluZm8uZmFzdExleCAmJiB0eXBlb2YgZmFzdExleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGxleCA9IGZhc3RMZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cblxuXG4gICAgICAgIHZzdGFja1tzcF0gPSBudWxsO1xuICAgICAgICBzc3RhY2tbc3BdID0gMDtcbiAgICAgICAgc3RhY2tbc3BdID0gMDtcbiAgICAgICAgKytzcDtcblxuXG5cblxuXG4gICAgICAgIGlmICh0aGlzLnByZV9wYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5wcmVfcGFyc2UuY2FsbCh0aGlzLCBzaGFyZWRTdGF0ZV95eSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXJlZFN0YXRlX3l5LnByZV9wYXJzZSkge1xuICAgICAgICAgICAgc2hhcmVkU3RhdGVfeXkucHJlX3BhcnNlLmNhbGwodGhpcywgc2hhcmVkU3RhdGVfeXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3U3RhdGUgPSBzc3RhY2tbc3AgLSAxXTtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgLy8gcmV0cmlldmUgc3RhdGUgbnVtYmVyIGZyb20gdG9wIG9mIHN0YWNrXG4gICAgICAgICAgICBzdGF0ZSA9IG5ld1N0YXRlOyAgICAgICAgICAgICAgIC8vIHNzdGFja1tzcCAtIDFdO1xuXG4gICAgICAgICAgICAvLyB1c2UgZGVmYXVsdCBhY3Rpb25zIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gMjtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgc2luZ2xlIGA9PWAgY29uZGl0aW9uIGJlbG93IGNvdmVycyBib3RoIHRoZXNlIGA9PT1gIGNvbXBhcmlzb25zIGluIGEgc2luZ2xlXG4gICAgICAgICAgICAgICAgLy8gb3BlcmF0aW9uOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcpIC4uLlxuICAgICAgICAgICAgICAgIGlmICghc3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9IGxleCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZWFkIGFjdGlvbiBmb3IgY3VycmVudCBzdGF0ZSBhbmQgZmlyc3QgaW5wdXRcbiAgICAgICAgICAgICAgICB0ID0gKHRhYmxlW3N0YXRlXSAmJiB0YWJsZVtzdGF0ZV1bc3ltYm9sXSkgfHwgTk9fQUNUSU9OO1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gdFsxXTtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSB0WzBdO1xuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgcGFyc2UgZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyU3RyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyU3ltYm9sRGVzY3IgPSAodGhpcy5kZXNjcmliZVN5bWJvbChzeW1ib2wpIHx8IHN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZCA9IHRoaXMuY29sbGVjdF9leHBlY3RlZF90b2tlbl9zZXQoc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlcG9ydCBlcnJvclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxleGVyLnl5bGluZW5vID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gJ1BhcnNlIGVycm9yIG9uIGxpbmUgJyArIChsZXhlci55eWxpbmVubyArIDEpICsgJzogJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9ICdQYXJzZSBlcnJvcjogJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxleGVyLnNob3dQb3NpdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyICs9ICdcXG4nICsgbGV4ZXIuc2hvd1Bvc2l0aW9uKDc5IC0gMTAsIDEwKSArICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciArPSAnRXhwZWN0aW5nICcgKyBleHBlY3RlZC5qb2luKCcsICcpICsgJywgZ290IHVuZXhwZWN0ZWQgJyArIGVyclN5bWJvbERlc2NyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyICs9ICdVbmV4cGVjdGVkICcgKyBlcnJTeW1ib2xEZXNjcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW5ub3QgcmVjb3ZlciBmcm9tIHRoZSBlcnJvciFcbiAgICAgICAgICAgICAgICAgICAgcCA9IHRoaXMuY29uc3RydWN0UGFyc2VFcnJvckluZm8oZXJyU3RyLCBudWxsLCBleHBlY3RlZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uUGFyc2VyRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSByO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9XG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBjYXRjaCBtaXNjLiBwYXJzZSBmYWlsdXJlczpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgaGFwcGVuLCB1bmxlc3MgcmVzb2x2ZSBkZWZhdWx0cyBhcmUgb2ZmXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHAgPSB0aGlzLmNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvKCdQYXJzZSBFcnJvcjogbXVsdGlwbGUgYWN0aW9ucyBwb3NzaWJsZSBhdCBzdGF0ZTogJyArIHN0YXRlICsgJywgdG9rZW46ICcgKyBzeW1ib2wsIG51bGwsIG51bGwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMucGFyc2VFcnJvcihwLmVyclN0ciwgcCwgdGhpcy5KaXNvblBhcnNlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQW5vdGhlciBjYXNlIG9mIGJldHRlciBzYWZlIHRoYW4gc29ycnk6IGluIGNhc2Ugc3RhdGUgdHJhbnNpdGlvbnMgY29tZSBvdXQgb2YgYW5vdGhlciBlcnJvciByZWNvdmVyeSBwcm9jZXNzXG4gICAgICAgICAgICAgICAgLy8gb3IgYSBidWdneSBMVVQgKExvb2tVcCBUYWJsZSk6XG4gICAgICAgICAgICAgICAgcCA9IHRoaXMuY29uc3RydWN0UGFyc2VFcnJvckluZm8oJ1BhcnNpbmcgaGFsdGVkLiBObyB2aWFibGUgZXJyb3IgcmVjb3ZlcnkgYXBwcm9hY2ggYXZhaWxhYmxlIGR1ZSB0byBpbnRlcm5hbCBzeXN0ZW0gZmFpbHVyZS4nLCBudWxsLCBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgciA9IHRoaXMucGFyc2VFcnJvcihwLmVyclN0ciwgcCwgdGhpcy5KaXNvblBhcnNlckVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBzaGlmdDpcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzdGFja1tzcF0gPSBzeW1ib2w7XG4gICAgICAgICAgICAgICAgdnN0YWNrW3NwXSA9IGxleGVyLnl5dGV4dDtcblxuICAgICAgICAgICAgICAgIHNzdGFja1tzcF0gPSBuZXdTdGF0ZTsgLy8gcHVzaCBzdGF0ZVxuXG4gICAgICAgICAgICAgICAgKytzcDtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSAwO1xuXG5cblxuXG4gICAgICAgICAgICAgICAgLy8gUGljayB1cCB0aGUgbGV4ZXIgZGV0YWlscyBmb3IgdGhlIGN1cnJlbnQgc3ltYm9sIGFzIHRoYXQgb25lIGlzIG5vdCAnbG9vay1haGVhZCcgYW55IG1vcmU6XG5cblxuXG5cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gcmVkdWNlOlxuICAgICAgICAgICAgY2FzZSAyOlxuXG5cblxuICAgICAgICAgICAgICAgIHRoaXNfcHJvZHVjdGlvbiA9IHRoaXMucHJvZHVjdGlvbnNfW25ld1N0YXRlIC0gMV07ICAvLyBgdGhpcy5wcm9kdWN0aW9uc19bXWAgaXMgemVyby1iYXNlZCBpbmRleGVkIHdoaWxlIHN0YXRlcyBzdGFydCBmcm9tIDEgdXB3YXJkcy4uLlxuICAgICAgICAgICAgICAgIHl5cnVsZWxlbiA9IHRoaXNfcHJvZHVjdGlvblsxXTtcblxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgbmV3U3RhdGUsIHNwIC0gMSwgdnN0YWNrKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcG9wIG9mZiBzdGFja1xuICAgICAgICAgICAgICAgIHNwIC09IHl5cnVsZWxlbjtcblxuICAgICAgICAgICAgICAgIC8vIGRvbid0IG92ZXJ3cml0ZSB0aGUgYHN5bWJvbGAgdmFyaWFibGU6IHVzZSBhIGxvY2FsIHZhciB0byBzcGVlZCB0aGluZ3MgdXA6XG4gICAgICAgICAgICAgICAgdmFyIG50c3ltYm9sID0gdGhpc19wcm9kdWN0aW9uWzBdOyAgICAvLyBwdXNoIG5vbnRlcm1pbmFsIChyZWR1Y2UpXG4gICAgICAgICAgICAgICAgc3RhY2tbc3BdID0gbnRzeW1ib2w7XG4gICAgICAgICAgICAgICAgdnN0YWNrW3NwXSA9IHl5dmFsLiQ7XG5cbiAgICAgICAgICAgICAgICAvLyBnb3RvIG5ldyBzdGF0ZSA9IHRhYmxlW1NUQVRFXVtOT05URVJNSU5BTF1cbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3NzdGFja1tzcCAtIDFdXVtudHN5bWJvbF07XG4gICAgICAgICAgICAgICAgc3N0YWNrW3NwXSA9IG5ld1N0YXRlO1xuICAgICAgICAgICAgICAgICsrc3A7XG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGFjY2VwdDpcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoc3AgIT09IC0yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgYCRhY2NlcHRgIHJ1bGUncyBgJCRgIHJlc3VsdCwgaWYgYXZhaWxhYmxlLlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBBbHNvIG5vdGUgdGhhdCBKSVNPTiBhbHdheXMgYWRkcyB0aGlzIHRvcC1tb3N0IGAkYWNjZXB0YCBydWxlICh3aXRoIGltcGxpY2l0LFxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0LCBhY3Rpb24pOlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJGFjY2VwdDogPHN0YXJ0U3ltYm9sPiAkZW5kXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgJXsgJCQgPSAkMTsgQCQgPSBAMTsgJX1cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2gsIGNvbWJpbmVkIHdpdGggdGhlIHBhcnNlIGtlcm5lbCdzIGAkYWNjZXB0YCBzdGF0ZSBiZWhhdmlvdXIgY29kZWQgYmVsb3csXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgcHJvZHVjZSB0aGUgYCQkYCB2YWx1ZSBvdXRwdXQgb2YgdGhlIDxzdGFydFN5bWJvbD4gcnVsZSBhcyB0aGUgcGFyc2UgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAvLyBJRkYgdGhhdCByZXN1bHQgaXMgKm5vdCogYHVuZGVmaW5lZGAuIChTZWUgYWxzbyB0aGUgcGFyc2VyIGtlcm5lbCBjb2RlLilcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gY29kZTpcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAle1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICBAJCA9IEAxOyAgICAgICAgICAgIC8vIGlmIGxvY2F0aW9uIHRyYWNraW5nIHN1cHBvcnQgaXMgaW5jbHVkZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAkMSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJDE7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgLy8gdGhlIGRlZmF1bHQgcGFyc2UgcmVzdWx0IGlmIHRoZSBydWxlIGFjdGlvbnMgZG9uJ3QgcHJvZHVjZSBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICV9XG4gICAgICAgICAgICAgICAgICAgIHNwLS07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdnN0YWNrW3NwXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IHZzdGFja1tzcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJyZWFrIG91dCBvZiBsb29wOiB3ZSBhY2NlcHQgb3IgZmFpbCB3aXRoIGVycm9yXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIC8vIHJlcG9ydCBleGNlcHRpb25zIHRocm91Z2ggdGhlIHBhcnNlRXJyb3IgY2FsbGJhY2sgdG9vLCBidXQga2VlcCB0aGUgZXhjZXB0aW9uIGludGFjdFxuICAgICAgICAvLyBpZiBpdCBpcyBhIGtub3duIHBhcnNlciBvciBsZXhlciBlcnJvciB3aGljaCBoYXMgYmVlbiB0aHJvd24gYnkgcGFyc2VFcnJvcigpIGFscmVhZHk6XG4gICAgICAgIGlmIChleCBpbnN0YW5jZW9mIHRoaXMuSmlzb25QYXJzZXJFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGV4ZXIgJiYgdHlwZW9mIGxleGVyLkppc29uTGV4ZXJFcnJvciA9PT0gJ2Z1bmN0aW9uJyAmJiBleCBpbnN0YW5jZW9mIGxleGVyLkppc29uTGV4ZXJFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cblxuICAgICAgICBwID0gdGhpcy5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbygnUGFyc2luZyBhYm9ydGVkIGR1ZSB0byBleGNlcHRpb24uJywgZXgsIG51bGwsIGZhbHNlKTtcbiAgICAgICAgcmV0dmFsID0gZmFsc2U7XG4gICAgICAgIHIgPSB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25QYXJzZXJFcnJvcik7XG4gICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHZhbCA9IHI7XG4gICAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgICByZXR2YWwgPSB0aGlzLmNsZWFudXBBZnRlclBhcnNlKHJldHZhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX19yZWVudHJhbnRfY2FsbF9kZXB0aC0tO1xuICAgIH0gICAvLyAvZmluYWxseVxuXG4gICAgcmV0dXJuIHJldHZhbDtcbn1cbn07XG5wYXJzZXIub3JpZ2luYWxQYXJzZUVycm9yID0gcGFyc2VyLnBhcnNlRXJyb3I7XG5wYXJzZXIub3JpZ2luYWxRdW90ZU5hbWUgPSBwYXJzZXIucXVvdGVOYW1lO1xuLyogbGV4ZXIgZ2VuZXJhdGVkIGJ5IGppc29uLWxleCAwLjYuMS0yMTUgKi9cblxuLypcbiAqIFJldHVybnMgYSBMZXhlciBvYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gKlxuICogIExleGVyOiB7XG4gKiAgICB5eToge30gICAgIFRoZSBzby1jYWxsZWQgXCJzaGFyZWQgc3RhdGVcIiBvciByYXRoZXIgdGhlICpzb3VyY2UqIG9mIGl0O1xuICogICAgICAgICAgICAgICB0aGUgcmVhbCBcInNoYXJlZCBzdGF0ZVwiIGB5eWAgcGFzc2VkIGFyb3VuZCB0b1xuICogICAgICAgICAgICAgICB0aGUgcnVsZSBhY3Rpb25zLCBldGMuIGlzIGEgZGlyZWN0IHJlZmVyZW5jZSFcbiAqXG4gKiAgICAgICAgICAgICAgIFRoaXMgXCJzaGFyZWQgY29udGV4dFwiIG9iamVjdCB3YXMgcGFzc2VkIHRvIHRoZSBsZXhlciBieSB3YXkgb2YgXG4gKiAgICAgICAgICAgICAgIHRoZSBgbGV4ZXIuc2V0SW5wdXQoc3RyLCB5eSlgIEFQSSBiZWZvcmUgeW91IG1heSB1c2UgaXQuXG4gKlxuICogICAgICAgICAgICAgICBUaGlzIFwic2hhcmVkIGNvbnRleHRcIiBvYmplY3QgaXMgcGFzc2VkIHRvIHRoZSBsZXhlciBhY3Rpb24gY29kZSBpbiBgcGVyZm9ybUFjdGlvbigpYFxuICogICAgICAgICAgICAgICBzbyB1c2VybGFuZCBjb2RlIGluIHRoZSBsZXhlciBhY3Rpb25zIG1heSBjb21tdW5pY2F0ZSB3aXRoIHRoZSBvdXRzaWRlIHdvcmxkIFxuICogICAgICAgICAgICAgICBhbmQvb3Igb3RoZXIgbGV4ZXIgcnVsZXMnIGFjdGlvbnMgaW4gbW9yZSBvciBsZXNzIGNvbXBsZXggd2F5cy5cbiAqXG4gKiAgfVxuICpcbiAqICBMZXhlci5wcm90b3R5cGU6IHtcbiAqICAgIEVPRjogMSxcbiAqICAgIEVSUk9SOiAyLFxuICpcbiAqICAgIHl5OiAgICAgICAgVGhlIG92ZXJhbGwgXCJzaGFyZWQgY29udGV4dFwiIG9iamVjdCByZWZlcmVuY2UuXG4gKlxuICogICAgSmlzb25MZXhlckVycm9yOiBmdW5jdGlvbihtc2csIGhhc2gpLFxuICpcbiAqICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGxleGVyX19wZXJmb3JtQWN0aW9uKHl5LCB5eXJ1bGVudW1iZXIsIFlZX1NUQVJUKSxcbiAqXG4gKiAgICAgICAgICAgICAgIFRoZSBmdW5jdGlvbiBwYXJhbWV0ZXJzIGFuZCBgdGhpc2AgaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlL21lYW5pbmc6XG4gKiAgICAgICAgICAgICAgIC0gYHRoaXNgICAgIDogcmVmZXJlbmNlIHRvIHRoZSBgbGV4ZXJgIGluc3RhbmNlLiBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB5eV9gIGlzIGFuIGFsaWFzIGZvciBgdGhpc2AgbGV4ZXIgaW5zdGFuY2UgcmVmZXJlbmNlIHVzZWQgaW50ZXJuYWxseS5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5YCAgICAgIDogYSByZWZlcmVuY2UgdG8gdGhlIGB5eWAgXCJzaGFyZWQgc3RhdGVcIiBvYmplY3Qgd2hpY2ggd2FzIHBhc3NlZCB0byB0aGUgbGV4ZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSB3YXkgb2YgdGhlIGBsZXhlci5zZXRJbnB1dChzdHIsIHl5KWAgQVBJIGJlZm9yZS5cbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90ZTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZXh0cmEgYXJndW1lbnRzIHlvdSBzcGVjaWZpZWQgaW4gdGhlIGAlcGFyc2UtcGFyYW1gIHN0YXRlbWVudCBpbiB5b3VyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKipwYXJzZXIqKiBncmFtbWFyIGRlZmluaXRpb24gZmlsZSBhcmUgcGFzc2VkIHRvIHRoZSBsZXhlciB2aWEgdGhpcyBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UgYXMgbWVtYmVyIHZhcmlhYmxlcy5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5cnVsZW51bWJlcmAgICA6IGluZGV4IG9mIHRoZSBtYXRjaGVkIGxleGVyIHJ1bGUgKHJlZ2V4KSwgdXNlZCBpbnRlcm5hbGx5LlxuICpcbiAqICAgICAgICAgICAgICAgLSBgWVlfU1RBUlRgOiB0aGUgY3VycmVudCBsZXhlciBcInN0YXJ0IGNvbmRpdGlvblwiIHN0YXRlLlxuICpcbiAqICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpLFxuICpcbiAqICAgIGNvbnN0cnVjdExleEVycm9ySW5mbzogZnVuY3Rpb24oZXJyb3JfbWVzc2FnZSwgaXNfcmVjb3ZlcmFibGUpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24uXG4gKiAgICAgICAgICAgICAgIFByb2R1Y2VzIGEgbmV3IGVycm9ySW5mbyAnaGFzaCBvYmplY3QnIHdoaWNoIGNhbiBiZSBwYXNzZWQgaW50byBgcGFyc2VFcnJvcigpYC5cbiAqICAgICAgICAgICAgICAgU2VlIGl0J3MgdXNlIGluIHRoaXMgbGV4ZXIga2VybmVsIGluIG1hbnkgcGxhY2VzOyBleGFtcGxlIHVzYWdlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgIHZhciBpbmZvT2JqID0gbGV4ZXIuY29uc3RydWN0UGFyc2VFcnJvckluZm8oJ2ZhaWwhJywgdHJ1ZSk7XG4gKiAgICAgICAgICAgICAgICAgICB2YXIgcmV0VmFsID0gbGV4ZXIucGFyc2VFcnJvcihpbmZvT2JqLmVyclN0ciwgaW5mb09iaiwgbGV4ZXIuSmlzb25MZXhlckVycm9yKTtcbiAqXG4gKiAgICBvcHRpb25zOiB7IC4uLiBsZXhlciAlb3B0aW9ucyAuLi4gfSxcbiAqXG4gKiAgICBsZXg6IGZ1bmN0aW9uKCksXG4gKiAgICAgICAgICAgICAgIFByb2R1Y2Ugb25lIHRva2VuIG9mIGxleGVkIGlucHV0LCB3aGljaCB3YXMgcGFzc2VkIGluIGVhcmxpZXIgdmlhIHRoZSBgbGV4ZXIuc2V0SW5wdXQoKWAgQVBJLlxuICogICAgICAgICAgICAgICBZb3UgTUFZIHVzZSB0aGUgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyBhcyBwZXIgYCVwYXJzZS1wYXJhbWAgc3BlYyBvZiB0aGUgKipsZXhlcioqIGdyYW1tYXI6XG4gKiAgICAgICAgICAgICAgIHRoZXNlIGV4dHJhIGBhcmdzLi4uYCBhcmUgYWRkZWQgdmVyYmF0aW0gdG8gdGhlIGB5eWAgb2JqZWN0IHJlZmVyZW5jZSBhcyBtZW1iZXIgdmFyaWFibGVzLlxuICpcbiAqICAgICAgICAgICAgICAgV0FSTklORzpcbiAqICAgICAgICAgICAgICAgTGV4ZXIncyBhZGRpdGlvbmFsIGBhcmdzLi4uYCBwYXJhbWV0ZXJzICh2aWEgbGV4ZXIncyBgJXBhcnNlLXBhcmFtYCkgTUFZIGNvbmZsaWN0IHdpdGhcbiAqICAgICAgICAgICAgICAgYW55IGF0dHJpYnV0ZXMgYWxyZWFkeSBhZGRlZCB0byBgeXlgIGJ5IHRoZSAqKnBhcnNlcioqIG9yIHRoZSBqaXNvbiBydW4tdGltZTsgXG4gKiAgICAgICAgICAgICAgIHdoZW4gc3VjaCBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCBhbiBleGNlcHRpb24gaXMgdGhyb3duIHRvIHByZXZlbnQgdGhlIGdlbmVyYXRlZCBydW4tdGltZSBcbiAqICAgICAgICAgICAgICAgZnJvbSBzaWxlbnRseSBhY2NlcHRpbmcgdGhpcyBjb25mdXNpbmcgYW5kIHBvdGVudGlhbGx5IGhhemFyZG91cyBzaXR1YXRpb24hIFxuICpcbiAqICAgIGNsZWFudXBBZnRlckxleDogZnVuY3Rpb24oZG9fbm90X251a2VfZXJyb3JpbmZvcyksXG4gKiAgICAgICAgICAgICAgIEhlbHBlciBmdW5jdGlvbi5cbiAqXG4gKiAgICAgICAgICAgICAgIFRoaXMgaGVscGVyIEFQSSBpcyBpbnZva2VkIHdoZW4gdGhlICoqcGFyc2UgcHJvY2VzcyoqIGhhcyBjb21wbGV0ZWQ6IGl0IGlzIHRoZSByZXNwb25zaWJpbGl0eVxuICogICAgICAgICAgICAgICBvZiB0aGUgKipwYXJzZXIqKiAob3IgdGhlIGNhbGxpbmcgdXNlcmxhbmQgY29kZSkgdG8gaW52b2tlIHRoaXMgbWV0aG9kIG9uY2UgY2xlYW51cCBpcyBkZXNpcmVkLiBcbiAqXG4gKiAgICAgICAgICAgICAgIFRoaXMgaGVscGVyIG1heSBiZSBpbnZva2VkIGJ5IHVzZXIgY29kZSB0byBlbnN1cmUgdGhlIGludGVybmFsIGxleGVyIGdldHMgcHJvcGVybHkgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKlxuICogICAgc2V0SW5wdXQ6IGZ1bmN0aW9uKGlucHV0LCBbeXldKSxcbiAqXG4gKlxuICogICAgaW5wdXQ6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIHVucHV0OiBmdW5jdGlvbihzdHIpLFxuICpcbiAqXG4gKiAgICBtb3JlOiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICByZWplY3Q6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIGxlc3M6IGZ1bmN0aW9uKG4pLFxuICpcbiAqXG4gKiAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uKG4pLFxuICpcbiAqXG4gKiAgICB1cGNvbWluZ0lucHV0OiBmdW5jdGlvbihuKSxcbiAqXG4gKlxuICogICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICB0ZXN0X21hdGNoOiBmdW5jdGlvbihyZWdleF9tYXRjaF9hcnJheSwgcnVsZV9pbmRleCksXG4gKlxuICpcbiAqICAgIG5leHQ6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIGJlZ2luOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICpcbiAqXG4gKiAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uKGNvbmRpdGlvbiksXG4gKlxuICpcbiAqICAgIHBvcFN0YXRlOiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICB0b3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqXG4gKlxuICogICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24oKSxcbiAqXG4gKlxuICogICAgc3RhdGVTdGFja1NpemU6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uKHl5LCB5eV8sIHl5cnVsZW51bWJlciwgWVlfU1RBUlQpLFxuICpcbiAqXG4gKiAgICBydWxlczogWy4uLl0sXG4gKlxuICpcbiAqICAgIGNvbmRpdGlvbnM6IHthc3NvY2lhdGl2ZSBsaXN0OiBuYW1lID09PiBzZXR9LFxuICogIH1cbiAqXG4gKlxuICogIHRva2VuIGxvY2F0aW9uIGluZm8gKGB5eWxsb2NgKToge1xuICogICAgZmlyc3RfbGluZTogbixcbiAqICAgIGxhc3RfbGluZTogbixcbiAqICAgIGZpcnN0X2NvbHVtbjogbixcbiAqICAgIGxhc3RfY29sdW1uOiBuLFxuICogICAgcmFuZ2U6IFtzdGFydF9udW1iZXIsIGVuZF9udW1iZXJdXG4gKiAgICAgICAgICAgICAgICh3aGVyZSB0aGUgbnVtYmVycyBhcmUgaW5kZXhlcyBpbnRvIHRoZSBpbnB1dCBzdHJpbmcsIHplcm8tYmFzZWQpXG4gKiAgfVxuICpcbiAqIC0tLVxuICpcbiAqIFRoZSBgcGFyc2VFcnJvcmAgZnVuY3Rpb24gcmVjZWl2ZXMgYSAnaGFzaCcgb2JqZWN0IHdpdGggdGhlc2UgbWVtYmVycyBmb3IgbGV4ZXIgZXJyb3JzOlxuICpcbiAqICB7XG4gKiAgICB0ZXh0OiAgICAgICAgKG1hdGNoZWQgdGV4dClcbiAqICAgIHRva2VuOiAgICAgICAodGhlIHByb2R1Y2VkIHRlcm1pbmFsIHRva2VuLCBpZiBhbnkpXG4gKiAgICB0b2tlbl9pZDogICAgKHRoZSBwcm9kdWNlZCB0ZXJtaW5hbCB0b2tlbiBudW1lcmljIElELCBpZiBhbnkpXG4gKiAgICBsaW5lOiAgICAgICAgKHl5bGluZW5vKVxuICogICAgbG9jOiAgICAgICAgICh5eWxsb2MpXG4gKiAgICByZWNvdmVyYWJsZTogKGJvb2xlYW46IFRSVUUgd2hlbiB0aGUgcGFyc2VyIE1BWSBoYXZlIGFuIGVycm9yIHJlY292ZXJ5IHJ1bGVcbiAqICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXJyb3IpXG4gKiAgICB5eTogICAgICAgICAgKG9iamVjdDogdGhlIGN1cnJlbnQgcGFyc2VyIGludGVybmFsIFwic2hhcmVkIHN0YXRlXCIgYHl5YFxuICogICAgICAgICAgICAgICAgICBhcyBpcyBhbHNvIGF2YWlsYWJsZSBpbiB0aGUgcnVsZSBhY3Rpb25zOyB0aGlzIGNhbiBiZSB1c2VkLFxuICogICAgICAgICAgICAgICAgICBmb3IgaW5zdGFuY2UsIGZvciBhZHZhbmNlZCBlcnJvciBhbmFseXNpcyBhbmQgcmVwb3J0aW5nKVxuICogICAgbGV4ZXI6ICAgICAgIChyZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbGV4ZXIgaW5zdGFuY2UgdXNlZCBieSB0aGUgcGFyc2VyKVxuICogIH1cbiAqXG4gKiB3aGlsZSBgdGhpc2Agd2lsbCByZWZlcmVuY2UgdGhlIGN1cnJlbnQgbGV4ZXIgaW5zdGFuY2UuXG4gKlxuICogV2hlbiBgcGFyc2VFcnJvcmAgaXMgaW52b2tlZCBieSB0aGUgbGV4ZXIsIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHdpbGxcbiAqIGF0dGVtcHQgdG8gaW52b2tlIGB5eS5wYXJzZXIucGFyc2VFcnJvcigpYDsgd2hlbiB0aGlzIGNhbGxiYWNrIGlzIG5vdCBwcm92aWRlZFxuICogaXQgd2lsbCB0cnkgdG8gaW52b2tlIGB5eS5wYXJzZUVycm9yKClgIGluc3RlYWQuIFdoZW4gdGhhdCBjYWxsYmFjayBpcyBhbHNvIG5vdFxuICogcHJvdmlkZWQsIGEgYEppc29uTGV4ZXJFcnJvcmAgZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGNvbnRhaW5pbmcgdGhlIGVycm9yXG4gKiBtZXNzYWdlIGFuZCBgaGFzaGAsIGFzIGNvbnN0cnVjdGVkIGJ5IHRoZSBgY29uc3RydWN0TGV4RXJyb3JJbmZvKClgIEFQSS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIGxleGVyJ3MgYEppc29uTGV4ZXJFcnJvcmAgZXJyb3IgY2xhc3MgaXMgcGFzc2VkIHZpYSB0aGVcbiAqIGBFeGNlcHRpb25DbGFzc2AgYXJndW1lbnQsIHdoaWNoIGlzIGludm9rZWQgdG8gY29uc3RydWN0IHRoZSBleGNlcHRpb25cbiAqIGluc3RhbmNlIHRvIGJlIHRocm93biwgc28gdGVjaG5pY2FsbHkgYHBhcnNlRXJyb3JgIHdpbGwgdGhyb3cgdGhlIG9iamVjdFxuICogcHJvZHVjZWQgYnkgdGhlIGBuZXcgRXhjZXB0aW9uQ2xhc3Moc3RyLCBoYXNoKWAgSmF2YVNjcmlwdCBleHByZXNzaW9uLlxuICpcbiAqIC0tLVxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBsZXhlciBvcHRpb25zIGJ5IHNldHRpbmcgLyBtb2RpZnlpbmcgdGhlIGAub3B0aW9uc2Agb2JqZWN0IG9mIHlvdXIgTGV4ZXIgaW5zdGFuY2UuXG4gKiBUaGVzZSBvcHRpb25zIGFyZSBhdmFpbGFibGU6XG4gKlxuICogKE9wdGlvbnMgYXJlIHBlcm1hbmVudC4pXG4gKiAgXG4gKiAgeXk6IHtcbiAqICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcylcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBwYXJzZUVycm9yYCBmdW5jdGlvbi5cbiAqICB9XG4gKlxuICogIGxleGVyLm9wdGlvbnM6IHtcbiAqICAgICAgcHJlX2xleDogIGZ1bmN0aW9uKClcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogaXMgaW52b2tlZCBiZWZvcmUgdGhlIGxleGVyIGlzIGludm9rZWQgdG8gcHJvZHVjZSBhbm90aGVyIHRva2VuLlxuICogICAgICAgICAgICAgICAgIGB0aGlzYCByZWZlcnMgdG8gdGhlIExleGVyIG9iamVjdC5cbiAqICAgICAgcG9zdF9sZXg6IGZ1bmN0aW9uKHRva2VuKSB7IHJldHVybiB0b2tlbjsgfVxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBpcyBpbnZva2VkIHdoZW4gdGhlIGxleGVyIGhhcyBwcm9kdWNlZCBhIHRva2VuIGB0b2tlbmA7XG4gKiAgICAgICAgICAgICAgICAgdGhpcyBmdW5jdGlvbiBjYW4gb3ZlcnJpZGUgdGhlIHJldHVybmVkIHRva2VuIHZhbHVlIGJ5IHJldHVybmluZyBhbm90aGVyLlxuICogICAgICAgICAgICAgICAgIFdoZW4gaXQgZG9lcyBub3QgcmV0dXJuIGFueSAodHJ1dGh5KSB2YWx1ZSwgdGhlIGxleGVyIHdpbGwgcmV0dXJuXG4gKiAgICAgICAgICAgICAgICAgdGhlIG9yaWdpbmFsIGB0b2tlbmAuXG4gKiAgICAgICAgICAgICAgICAgYHRoaXNgIHJlZmVycyB0byB0aGUgTGV4ZXIgb2JqZWN0LlxuICpcbiAqIFdBUk5JTkc6IHRoZSBuZXh0IHNldCBvZiBvcHRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgY2hhbmdlZC4gVGhleSBlY2hvIHRoZSBhYmlsaXRpZXMgb2ZcbiAqIHRoZSBsZXhlciBhcyBwZXIgd2hlbiBpdCB3YXMgY29tcGlsZWQhXG4gKlxuICogICAgICByYW5nZXM6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiB0b2tlbiBsb2NhdGlvbiBpbmZvIHdpbGwgaW5jbHVkZSBhIC5yYW5nZVtdIG1lbWJlci5cbiAqICAgICAgZmxleDogYm9vbGVhblxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBgdHJ1ZWAgPT0+IGZsZXgtbGlrZSBsZXhpbmcgYmVoYXZpb3VyIHdoZXJlIHRoZSBydWxlcyBhcmUgdGVzdGVkXG4gKiAgICAgICAgICAgICAgICAgZXhoYXVzdGl2ZWx5IHRvIGZpbmQgdGhlIGxvbmdlc3QgbWF0Y2guXG4gKiAgICAgIGJhY2t0cmFja19sZXhlcjogYm9vbGVhblxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBgdHJ1ZWAgPT0+IGxleGVyIHJlZ2V4ZXMgYXJlIHRlc3RlZCBpbiBvcmRlciBhbmQgZm9yIGludm9rZWQ7XG4gKiAgICAgICAgICAgICAgICAgdGhlIGxleGVyIHRlcm1pbmF0ZXMgdGhlIHNjYW4gd2hlbiBhIHRva2VuIGlzIHJldHVybmVkIGJ5IHRoZSBhY3Rpb24gY29kZS5cbiAqICAgICAgeHJlZ2V4cDogYm9vbGVhblxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBgdHJ1ZWAgPT0+IGxleGVyIHJ1bGUgcmVnZXhlcyBhcmUgXCJleHRlbmRlZCByZWdleCBmb3JtYXRcIiByZXF1aXJpbmcgdGhlXG4gKiAgICAgICAgICAgICAgICAgYFhSZWdFeHBgIGxpYnJhcnkuIFdoZW4gdGhpcyAlb3B0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgYXQgY29tcGlsZSB0aW1lLCBhbGwgbGV4ZXJcbiAqICAgICAgICAgICAgICAgICBydWxlIHJlZ2V4ZXMgaGF2ZSBiZWVuIHdyaXR0ZW4gYXMgc3RhbmRhcmQgSmF2YVNjcmlwdCBSZWdFeHAgZXhwcmVzc2lvbnMuXG4gKiAgfVxuICovXG5cblxudmFyIGxleGVyID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBTZWUgYWxzbzpcbiAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzgyMTA3L3doYXRzLWEtZ29vZC13YXktdG8tZXh0ZW5kLWVycm9yLWluLWphdmFzY3JpcHQvIzM1ODgxNTA4XG4gICAqIGJ1dCB3ZSBrZWVwIHRoZSBwcm90b3R5cGUuY29uc3RydWN0b3IgYW5kIHByb3RvdHlwZS5uYW1lIGFzc2lnbm1lbnQgbGluZXMgdG9vIGZvciBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggdXNlcmxhbmQgY29kZSB3aGljaCBtaWdodCBhY2Nlc3MgdGhlIGRlcml2ZWQgY2xhc3MgaW4gYSAnY2xhc3NpYycgd2F5LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgZnVuY3Rpb24gSmlzb25MZXhlckVycm9yKG1zZywgaGFzaCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6ICdKaXNvbkxleGVyRXJyb3InXG4gICAgfSk7XG5cbiAgICBpZiAobXNnID09IG51bGwpXG4gICAgICBtc2cgPSAnPz8/JztcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogbXNnXG4gICAgfSk7XG5cbiAgICB0aGlzLmhhc2ggPSBoYXNoO1xuICAgIHZhciBzdGFja3RyYWNlO1xuXG4gICAgaWYgKGhhc2ggJiYgaGFzaC5leGNlcHRpb24gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdmFyIGV4MiA9IGhhc2guZXhjZXB0aW9uO1xuICAgICAgdGhpcy5tZXNzYWdlID0gZXgyLm1lc3NhZ2UgfHwgbXNnO1xuICAgICAgc3RhY2t0cmFjZSA9IGV4Mi5zdGFjaztcbiAgICB9XG5cbiAgICBpZiAoIXN0YWNrdHJhY2UpIHtcbiAgICAgIGlmIChFcnJvci5oYXNPd25Qcm9wZXJ0eSgnY2FwdHVyZVN0YWNrVHJhY2UnKSkge1xuICAgICAgICAvLyBWOFxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YWNrdHJhY2UgPSBuZXcgRXJyb3IobXNnKS5zdGFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhY2t0cmFjZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHN0YWNrdHJhY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEppc29uTGV4ZXJFcnJvci5wcm90b3R5cGUsIEVycm9yLnByb3RvdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgSmlzb25MZXhlckVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgfVxuXG4gIEppc29uTGV4ZXJFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBKaXNvbkxleGVyRXJyb3I7XG4gIEppc29uTGV4ZXJFcnJvci5wcm90b3R5cGUubmFtZSA9ICdKaXNvbkxleGVyRXJyb3InO1xuXG4gIHZhciBsZXhlciA9IHtcbiAgICBcbi8vIENvZGUgR2VuZXJhdG9yIEluZm9ybWF0aW9uIFJlcG9ydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gT3B0aW9uczpcbi8vXG4vLyAgIGJhY2t0cmFja2luZzogLi4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vICAgbG9jYXRpb24ucmFuZ2VzOiAuLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuLy8gICBsb2NhdGlvbiBsaW5lK2NvbHVtbiB0cmFja2luZzogLi4uIHRydWVcbi8vXG4vL1xuLy8gRm9yd2FyZGVkIFBhcnNlciBBbmFseXNpcyBmbGFnczpcbi8vXG4vLyAgIHVzZXMgeXlsZW5nOiAuLi4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vICAgdXNlcyB5eWxpbmVubzogLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuLy8gICB1c2VzIHl5dGV4dDogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4vLyAgIHVzZXMgeXlsbG9jOiAuLi4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vICAgdXNlcyBsZXhlciB2YWx1ZXM6IC4uLi4uLi4uLi4uLi4uLiB0cnVlIC8gdHJ1ZVxuLy8gICBsb2NhdGlvbiB0cmFja2luZzogLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4vLyAgIGxvY2F0aW9uIGFzc2lnbm1lbnQ6IC4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vXG4vL1xuLy8gTGV4ZXIgQW5hbHlzaXMgZmxhZ3M6XG4vL1xuLy8gICB1c2VzIHl5bGVuZzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHl5bGluZW5vOiAuLi4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHl5dGV4dDogLi4uLi4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHl5bGxvYzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIFBhcnNlRXJyb3IgQVBJOiAuLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHl5ZXJyb3I6IC4uLi4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIGxvY2F0aW9uIHRyYWNraW5nICYgZWRpdGluZzogID8/P1xuLy8gICB1c2VzIG1vcmUoKSBBUEk6IC4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHVucHV0KCkgQVBJOiAuLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIHJlamVjdCgpIEFQSTogLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIGxlc3MoKSBBUEk6IC4uLi4uLi4uLi4uLi4uLi4uID8/P1xuLy8gICB1c2VzIGRpc3BsYXkgQVBJcyBwYXN0SW5wdXQoKSwgdXBjb21pbmdJbnB1dCgpLCBzaG93UG9zaXRpb24oKTpcbi8vICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyBkZXNjcmliZVlZTExPQygpIEFQSTogLi4uLi4uLiA/Pz9cbi8vXG4vLyAtLS0tLS0tLS0gRU5EIE9GIFJFUE9SVCAtLS0tLS0tLS0tLVxuXG5FT0Y6IDEsXG4gICAgRVJST1I6IDIsXG5cbiAgICAvLyBKaXNvbkxleGVyRXJyb3I6IEppc29uTGV4ZXJFcnJvciwgICAgICAgIC8vLyA8LS0gaW5qZWN0ZWQgYnkgdGhlIGNvZGUgZ2VuZXJhdG9yXG5cbiAgICAvLyBvcHRpb25zOiB7fSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyA8LS0gaW5qZWN0ZWQgYnkgdGhlIGNvZGUgZ2VuZXJhdG9yXG5cbiAgICAvLyB5eTogLi4uLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyA8LS0gaW5qZWN0ZWQgYnkgc2V0SW5wdXQoKVxuXG4gICAgX19jdXJyZW50UnVsZVNldF9fOiBudWxsLCAgICAgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFk6IGludGVybmFsIHJ1bGUgc2V0IGNhY2hlIGZvciB0aGUgY3VycmVudCBsZXhlciBzdGF0ZSAgXG5cbiAgICBfX2Vycm9yX2luZm9zOiBbXSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWTogdGhlIHNldCBvZiBsZXhFcnJvckluZm8gb2JqZWN0cyBjcmVhdGVkIHNpbmNlIHRoZSBsYXN0IGNsZWFudXAgIFxuICAgIF9fZGVjb21wcmVzc2VkOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZOiBtYXJrIHdoZXRoZXIgdGhlIGxleGVyIGluc3RhbmNlIGhhcyBiZWVuICd1bmZvbGRlZCcgY29tcGxldGVseSBhbmQgaXMgbm93IHJlYWR5IGZvciB1c2UgIFxuICAgIGRvbmU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZICBcbiAgICBfYmFja3RyYWNrOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWSAgXG4gICAgX2lucHV0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFkgIFxuICAgIF9tb3JlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZICBcbiAgICBfc2lnbmFsZWRfZXJyb3JfdG9rZW46IGZhbHNlLCAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWSAgXG4gICAgY29uZGl0aW9uU3RhY2s6IFtdLCAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFk7IG1hbmFnZWQgdmlhIGBwdXNoU3RhdGUoKWAsIGBwb3BTdGF0ZSgpYCwgYHRvcFN0YXRlKClgIGFuZCBgc3RhdGVTdGFja1NpemUoKWAgIFxuICAgIG1hdGNoOiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogdHJhY2tzIGlucHV0IHdoaWNoIGhhcyBiZWVuIG1hdGNoZWQgc28gZmFyIGZvciB0aGUgbGV4ZXIgdG9rZW4gdW5kZXIgY29uc3RydWN0aW9uLiBgbWF0Y2hgIGlzIGlkZW50aWNhbCB0byBgeXl0ZXh0YCBleGNlcHQgdGhhdCB0aGlzIG9uZSBzdGlsbCBjb250YWlucyB0aGUgbWF0Y2hlZCBpbnB1dCBzdHJpbmcgYWZ0ZXIgYGxleGVyLnBlcmZvcm1BY3Rpb24oKWAgaGFzIGJlZW4gaW52b2tlZCwgd2hlcmUgdXNlcmxhbmQgY29kZSBNQVkgaGF2ZSBjaGFuZ2VkL3JlcGxhY2VkIHRoZSBgeXl0ZXh0YCB2YWx1ZSBlbnRpcmVseSEgIFxuICAgIG1hdGNoZWQ6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogdHJhY2tzIGVudGlyZSBpbnB1dCB3aGljaCBoYXMgYmVlbiBtYXRjaGVkIHNvIGZhciAgXG4gICAgbWF0Y2hlczogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gUkVBRC1PTkxZIEVYVEVSTkFMIEFDQ0VTUyAtIEFEVkFOQ0VEIFVTRSBPTkxZOiB0cmFja3MgUkUgbWF0Y2ggcmVzdWx0IGZvciBsYXN0IChzdWNjZXNzZnVsKSBtYXRjaCBhdHRlbXB0ICBcbiAgICB5eXRleHQ6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBBRFZBTkNFRCBVU0UgT05MWTogdHJhY2tzIGlucHV0IHdoaWNoIGhhcyBiZWVuIG1hdGNoZWQgc28gZmFyIGZvciB0aGUgbGV4ZXIgdG9rZW4gdW5kZXIgY29uc3RydWN0aW9uOyB0aGlzIHZhbHVlIGlzIHRyYW5zZmVycmVkIHRvIHRoZSBwYXJzZXIgYXMgdGhlICd0b2tlbiB2YWx1ZScgd2hlbiB0aGUgcGFyc2VyIGNvbnN1bWVzIHRoZSBsZXhlciB0b2tlbiBwcm9kdWNlZCB0aHJvdWdoIGEgY2FsbCB0byB0aGUgYGxleCgpYCBBUEkuICBcbiAgICBvZmZzZXQ6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBSRUFELU9OTFkgRVhURVJOQUwgQUNDRVNTIC0gQURWQU5DRUQgVVNFIE9OTFk6IHRyYWNrcyB0aGUgJ2N1cnNvciBwb3NpdGlvbicgaW4gdGhlIGlucHV0IHN0cmluZywgaS5lLiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgbWF0Y2hlZCBzbyBmYXIgIFxuICAgIHl5bGVuZzogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogbGVuZ3RoIG9mIG1hdGNoZWQgaW5wdXQgZm9yIHRoZSB0b2tlbiB1bmRlciBjb25zdHJ1Y3Rpb24gKGB5eXRleHRgKSAgXG4gICAgeXlsaW5lbm86IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gUkVBRC1PTkxZIEVYVEVSTkFMIEFDQ0VTUyAtIEFEVkFOQ0VEIFVTRSBPTkxZOiAnbGluZSBudW1iZXInIGF0IHdoaWNoIHRoZSB0b2tlbiB1bmRlciBjb25zdHJ1Y3Rpb24gaXMgbG9jYXRlZCAgXG4gICAgeXlsbG9jOiBudWxsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gUkVBRC1PTkxZIEVYVEVSTkFMIEFDQ0VTUyAtIEFEVkFOQ0VEIFVTRSBPTkxZOiB0cmFja3MgbG9jYXRpb24gaW5mbyAobGluZXMgKyBjb2x1bW5zKSBmb3IgdGhlIHRva2VuIHVuZGVyIGNvbnN0cnVjdGlvbiAgXG5cbiAgICAvKipcbiAgICAgKiBJTlRFUk5BTCBVU0U6IGNvbnN0cnVjdCBhIHN1aXRhYmxlIGVycm9yIGluZm8gaGFzaCBvYmplY3QgaW5zdGFuY2UgZm9yIGBwYXJzZUVycm9yYC5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdExleEVycm9ySW5mbzogZnVuY3Rpb24gbGV4ZXJfY29uc3RydWN0TGV4RXJyb3JJbmZvKG1zZywgcmVjb3ZlcmFibGUsIHNob3dfaW5wdXRfcG9zaXRpb24pIHtcbiAgICAgIG1zZyA9ICcnICsgbXNnO1xuXG4gICAgICAvLyBoZXVyaXN0aWMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBlcnJvciBtZXNzYWdlIGFscmVhZHkgY29udGFpbnMgYSAocGFydGlhbCkgc291cmNlIGNvZGUgZHVtcFxuICAgICAgLy8gYXMgcHJvZHVjZWQgYnkgZWl0aGVyIGBzaG93UG9zaXRpb24oKWAgb3IgYHByZXR0eVByaW50UmFuZ2UoKWA6XG4gICAgICBpZiAoc2hvd19pbnB1dF9wb3NpdGlvbiA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2hvd19pbnB1dF9wb3NpdGlvbiA9ICEobXNnLmluZGV4T2YoJ1xcbicpID4gMCAmJiBtc2cuaW5kZXhPZignXicpID4gMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnl5bGxvYyAmJiBzaG93X2lucHV0X3Bvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmV0dHlQcmludFJhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHByZXR0eV9zcmMgPSB0aGlzLnByZXR0eVByaW50UmFuZ2UodGhpcy55eWxsb2MpO1xuXG4gICAgICAgICAgaWYgKCEvXFxuXFxzKiQvLnRlc3QobXNnKSkge1xuICAgICAgICAgICAgbXNnICs9ICdcXG4nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1zZyArPSAnXFxuICBFcnJvbmVvdXMgYXJlYTpcXG4nICsgdGhpcy5wcmV0dHlQcmludFJhbmdlKHRoaXMueXlsbG9jKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5zaG93UG9zaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgcG9zX3N0ciA9IHRoaXMuc2hvd1Bvc2l0aW9uKCk7XG5cbiAgICAgICAgICBpZiAocG9zX3N0cikge1xuICAgICAgICAgICAgaWYgKG1zZy5sZW5ndGggJiYgbXNnW21zZy5sZW5ndGggLSAxXSAhPT0gJ1xcbicgJiYgcG9zX3N0clswXSAhPT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgbXNnICs9ICdcXG4nICsgcG9zX3N0cjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1zZyArPSBwb3Nfc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiogQGNvbnN0cnVjdG9yICovXG4gICAgICB2YXIgcGVpID0ge1xuICAgICAgICBlcnJTdHI6IG1zZyxcbiAgICAgICAgcmVjb3ZlcmFibGU6ICEhcmVjb3ZlcmFibGUsXG4gICAgICAgIHRleHQ6IHRoaXMubWF0Y2gsICAgICAgICAgICAvLyBUaGlzIG9uZSBNQVkgYmUgZW1wdHk7IHVzZXJsYW5kIGNvZGUgc2hvdWxkIHVzZSB0aGUgYHVwY29taW5nSW5wdXRgIEFQSSB0byBvYnRhaW4gbW9yZSB0ZXh0IHdoaWNoIGZvbGxvd3MgdGhlICdsZXhlciBjdXJzb3IgcG9zaXRpb24nLi4uICBcbiAgICAgICAgdG9rZW46IG51bGwsXG4gICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm8sXG4gICAgICAgIGxvYzogdGhpcy55eWxsb2MsXG4gICAgICAgIHl5OiB0aGlzLnl5LFxuICAgICAgICBsZXhlcjogdGhpcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW5kIG1ha2Ugc3VyZSB0aGUgZXJyb3IgaW5mbyBkb2Vzbid0IHN0YXkgZHVlIHRvIHBvdGVudGlhbFxuICAgICAgICAgKiByZWYgY3ljbGUgdmlhIHVzZXJsYW5kIGNvZGUgbWFuaXB1bGF0aW9ucy5cbiAgICAgICAgICogVGhlc2Ugd291bGQgb3RoZXJ3aXNlIGFsbCBiZSBtZW1vcnkgbGVhayBvcHBvcnR1bml0aWVzIVxuICAgICAgICAgKiBcbiAgICAgICAgICogTm90ZSB0aGF0IG9ubHkgYXJyYXkgYW5kIG9iamVjdCByZWZlcmVuY2VzIGFyZSBudWtlZCBhcyB0aG9zZVxuICAgICAgICAgKiBjb25zdGl0dXRlIHRoZSBzZXQgb2YgZWxlbWVudHMgd2hpY2ggY2FuIHByb2R1Y2UgYSBjeWNsaWMgcmVmLlxuICAgICAgICAgKiBUaGUgcmVzdCBvZiB0aGUgbWVtYmVycyBpcyBrZXB0IGludGFjdCBhcyB0aGV5IGFyZSBoYXJtbGVzcy5cbiAgICAgICAgICogXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHRoaXMge0xleEVycm9ySW5mb31cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3RydWN0TGV4RXJyb3JJbmZvKCkge1xuICAgICAgICAgIC8vIHJlbW92ZSBjeWNsaWMgcmVmZXJlbmNlcyBhZGRlZCB0byBlcnJvciBpbmZvOlxuICAgICAgICAgIC8vIGluZm8ueXkgPSBudWxsO1xuICAgICAgICAgIC8vIGluZm8ubGV4ZXIgPSBudWxsO1xuICAgICAgICAgIC8vIC4uLlxuICAgICAgICAgIHZhciByZWMgPSAhIXRoaXMucmVjb3ZlcmFibGU7XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB0aGlzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5yZWNvdmVyYWJsZSA9IHJlYztcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gdHJhY2sgdGhpcyBpbnN0YW5jZSBzbyB3ZSBjYW4gYGRlc3Ryb3koKWAgaXQgb25jZSB3ZSBkZWVtIGl0IHN1cGVyZmx1b3VzIGFuZCByZWFkeSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uIVxuICAgICAgdGhpcy5fX2Vycm9yX2luZm9zLnB1c2gocGVpKTtcblxuICAgICAgcmV0dXJuIHBlaTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaGFuZGxlciB3aGljaCBpcyBpbnZva2VkIHdoZW4gYSBsZXhlciBlcnJvciBvY2N1cnMuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBsZXhlcl9wYXJzZUVycm9yKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICAgIGlmICghRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICAgICAgRXhjZXB0aW9uQ2xhc3MgPSB0aGlzLkppc29uTGV4ZXJFcnJvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMueXkpIHtcbiAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyICYmIHR5cGVvZiB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMueXkucGFyc2VyLnBhcnNlRXJyb3IuY2FsbCh0aGlzLCBzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSB8fCB0aGlzLkVSUk9SO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy55eS5wYXJzZUVycm9yLmNhbGwodGhpcywgc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcykgfHwgdGhpcy5FUlJPUjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uQ2xhc3Moc3RyLCBoYXNoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbWV0aG9kIHdoaWNoIGltcGxlbWVudHMgYHl5ZXJyb3Ioc3RyLCAuLi5hcmdzKWAgZnVuY3Rpb25hbGl0eSBmb3IgdXNlIGluc2lkZSBsZXhlciBhY3Rpb25zLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgeXllcnJvcjogZnVuY3Rpb24geXlFcnJvcihzdHIgLyosIC4uLmFyZ3MgKi8pIHtcbiAgICAgIHZhciBsaW5lbm9fbXNnID0gJyc7XG5cbiAgICAgIGlmICh0aGlzLnl5bGxvYykge1xuICAgICAgICBsaW5lbm9fbXNnID0gJyBvbiBsaW5lICcgKyAodGhpcy55eWxpbmVubyArIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcCA9IHRoaXMuY29uc3RydWN0TGV4RXJyb3JJbmZvKFxuICAgICAgICAnTGV4aWNhbCBlcnJvcicgKyBsaW5lbm9fbXNnICsgJzogJyArIHN0cixcbiAgICAgICAgdGhpcy5vcHRpb25zLmxleGVyRXJyb3JzQXJlUmVjb3ZlcmFibGVcbiAgICAgICk7XG5cbiAgICAgIC8vIEFkZCBhbnkgZXh0cmEgYXJncyB0byB0aGUgaGFzaCB1bmRlciB0aGUgbmFtZSBgZXh0cmFfZXJyb3JfYXR0cmlidXRlc2A6XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBwLmV4dHJhX2Vycm9yX2F0dHJpYnV0ZXMgPSBhcmdzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uTGV4ZXJFcnJvcikgfHwgdGhpcy5FUlJPUjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZmluYWwgY2xlYW51cCBmdW5jdGlvbiBmb3Igd2hlbiB3ZSBoYXZlIGNvbXBsZXRlZCBsZXhpbmcgdGhlIGlucHV0O1xuICAgICAqIG1ha2UgaXQgYW4gQVBJIHNvIHRoYXQgZXh0ZXJuYWwgY29kZSBjYW4gdXNlIHRoaXMgb25lIG9uY2UgdXNlcmxhbmRcbiAgICAgKiBjb2RlIGhhcyBkZWNpZGVkIGl0J3MgdGltZSB0byBkZXN0cm95IGFueSBsaW5nZXJpbmcgbGV4ZXIgZXJyb3JcbiAgICAgKiBoYXNoIG9iamVjdCBpbnN0YW5jZXMgYW5kIHRoZSBsaWtlOiB0aGlzIGZ1bmN0aW9uIGhlbHBzIHRvIGNsZWFuXG4gICAgICogdXAgdGhlc2UgY29uc3RydWN0cywgd2hpY2ggKm1heSogY2FycnkgY3ljbGljIHJlZmVyZW5jZXMgd2hpY2ggd291bGRcbiAgICAgKiBvdGhlcndpc2UgcHJldmVudCB0aGUgaW5zdGFuY2VzIGZyb20gYmVpbmcgcHJvcGVybHkgYW5kIHRpbWVseVxuICAgICAqIGdhcmJhZ2UtY29sbGVjdGVkLCBpLmUuIHRoaXMgZnVuY3Rpb24gaGVscHMgcHJldmVudCBtZW1vcnkgbGVha3MhXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBjbGVhbnVwQWZ0ZXJMZXg6IGZ1bmN0aW9uIGxleGVyX2NsZWFudXBBZnRlckxleChkb19ub3RfbnVrZV9lcnJvcmluZm9zKSB7XG4gICAgICAvLyBwcmV2ZW50IGxpbmdlcmluZyBjaXJjdWxhciByZWZlcmVuY2VzIGZyb20gY2F1c2luZyBtZW1vcnkgbGVha3M6XG4gICAgICB0aGlzLnNldElucHV0KCcnLCB7fSk7XG5cbiAgICAgIC8vIG51a2UgdGhlIGVycm9yIGhhc2ggaW5mbyBpbnN0YW5jZXMgY3JlYXRlZCBkdXJpbmcgdGhpcyBydW4uXG4gICAgICAvLyBVc2VybGFuZCBjb2RlIG11c3QgQ09QWSBhbnkgZGF0YS9yZWZlcmVuY2VzXG4gICAgICAvLyBpbiB0aGUgZXJyb3IgaGFzaCBpbnN0YW5jZShzKSBpdCBpcyBtb3JlIHBlcm1hbmVudGx5IGludGVyZXN0ZWQgaW4uXG4gICAgICBpZiAoIWRvX25vdF9udWtlX2Vycm9yaW5mb3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX19lcnJvcl9pbmZvcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHZhciBlbCA9IHRoaXMuX19lcnJvcl9pbmZvc1tpXTtcblxuICAgICAgICAgIGlmIChlbCAmJiB0eXBlb2YgZWwuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZWwuZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19lcnJvcl9pbmZvcy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2xlYXIgdGhlIGxleGVyIHRva2VuIGNvbnRleHQ7IGludGVuZGVkIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgY2xlYXI6IGZ1bmN0aW9uIGxleGVyX2NsZWFyKCkge1xuICAgICAgdGhpcy55eXRleHQgPSAnJztcbiAgICAgIHRoaXMueXlsZW5nID0gMDtcbiAgICAgIHRoaXMubWF0Y2ggPSAnJztcblxuICAgICAgLy8gLSBETyBOT1QgcmVzZXQgYHRoaXMubWF0Y2hlZGBcbiAgICAgIHRoaXMubWF0Y2hlcyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICB0aGlzLl9iYWNrdHJhY2sgPSBmYWxzZTtcbiAgICAgIHZhciBjb2wgPSAodGhpcy55eWxsb2MgPyB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiA6IDApO1xuXG4gICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG4gICAgICAgIGZpcnN0X2NvbHVtbjogY29sLFxuICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICBsYXN0X2NvbHVtbjogY29sLFxuICAgICAgICByYW5nZTogW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldF1cbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlc2V0cyB0aGUgbGV4ZXIsIHNldHMgbmV3IGlucHV0XG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBzZXRJbnB1dDogZnVuY3Rpb24gbGV4ZXJfc2V0SW5wdXQoaW5wdXQsIHl5KSB7XG4gICAgICB0aGlzLnl5ID0geXkgfHwgdGhpcy55eSB8fCB7fTtcblxuICAgICAgLy8gYWxzbyBjaGVjayBpZiB3ZSd2ZSBmdWxseSBpbml0aWFsaXplZCB0aGUgbGV4ZXIgaW5zdGFuY2UsXG4gICAgICAvLyBpbmNsdWRpbmcgZXhwYW5zaW9uIHdvcmsgdG8gYmUgZG9uZSB0byBnbyBmcm9tIGEgbG9hZGVkXG4gICAgICAvLyBsZXhlciB0byBhIHVzYWJsZSBsZXhlcjpcbiAgICAgIGlmICghdGhpcy5fX2RlY29tcHJlc3NlZCkge1xuICAgICAgICAvLyBzdGVwIDE6IGRlY29tcHJlc3MgdGhlIHJlZ2V4IGxpc3Q6XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMucnVsZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJ1bGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIHJ1bGVfcmUgPSBydWxlc1tpXTtcblxuICAgICAgICAgIC8vIGNvbXByZXNzaW9uOiBpcyB0aGUgUkUgYW4geHJlZiB0byBhbm90aGVyIFJFIHNsb3QgaW4gdGhlIHJ1bGVzW10gdGFibGU/XG4gICAgICAgICAgaWYgKHR5cGVvZiBydWxlX3JlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcnVsZXNbaV0gPSBydWxlc1tydWxlX3JlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGVwIDI6IHVuZm9sZCB0aGUgY29uZGl0aW9uc1tdIHNldCB0byBtYWtlIHRoZXNlIHJlYWR5IGZvciB1c2U6XG4gICAgICAgIHZhciBjb25kaXRpb25zID0gdGhpcy5jb25kaXRpb25zO1xuXG4gICAgICAgIGZvciAodmFyIGsgaW4gY29uZGl0aW9ucykge1xuICAgICAgICAgIHZhciBzcGVjID0gY29uZGl0aW9uc1trXTtcbiAgICAgICAgICB2YXIgcnVsZV9pZHMgPSBzcGVjLnJ1bGVzO1xuICAgICAgICAgIHZhciBsZW4gPSBydWxlX2lkcy5sZW5ndGg7XG4gICAgICAgICAgdmFyIHJ1bGVfcmVnZXhlcyA9IG5ldyBBcnJheShsZW4gKyAxKTsgICAgICAgICAgICAgLy8gc2xvdCAwIGlzIHVudXNlZDsgd2UgdXNlIGEgMS1iYXNlZCBpbmRleCBhcHByb2FjaCBoZXJlIHRvIGtlZXAgdGhlIGhvdHRlc3QgY29kZSBpbiBgbGV4ZXJfbmV4dCgpYCBmYXN0IGFuZCBzaW1wbGUhIFxuICAgICAgICAgIHZhciBydWxlX25ld19pZHMgPSBuZXcgQXJyYXkobGVuICsgMSk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gcnVsZV9pZHNbaV07XG4gICAgICAgICAgICB2YXIgcnVsZV9yZSA9IHJ1bGVzW2lkeF07XG4gICAgICAgICAgICBydWxlX3JlZ2V4ZXNbaSArIDFdID0gcnVsZV9yZTtcbiAgICAgICAgICAgIHJ1bGVfbmV3X2lkc1tpICsgMV0gPSBpZHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BlYy5ydWxlcyA9IHJ1bGVfbmV3X2lkcztcbiAgICAgICAgICBzcGVjLl9fcnVsZV9yZWdleGVzID0gcnVsZV9yZWdleGVzO1xuICAgICAgICAgIHNwZWMuX19ydWxlX2NvdW50ID0gbGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fX2RlY29tcHJlc3NlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQgfHwgJyc7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLl9zaWduYWxlZF9lcnJvcl90b2tlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLnl5bGluZW5vID0gMDtcbiAgICAgIHRoaXMubWF0Y2hlZCA9ICcnO1xuICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xuICAgICAgdGhpcy5fX2N1cnJlbnRSdWxlU2V0X18gPSBudWxsO1xuXG4gICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgZmlyc3RfbGluZTogMSxcbiAgICAgICAgZmlyc3RfY29sdW1uOiAwLFxuICAgICAgICBsYXN0X2xpbmU6IDEsXG4gICAgICAgIGxhc3RfY29sdW1uOiAwLFxuICAgICAgICByYW5nZTogWzAsIDBdXG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZWRpdCB0aGUgcmVtYWluaW5nIGlucHV0IHZpYSB1c2VyLXNwZWNpZmllZCBjYWxsYmFjay5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGZvcndhcmQtYWRqdXN0IHRoZSBpbnB1dC10by1wYXJzZSwgXG4gICAgICogZS5nLiBpbnNlcnRpbmcgbWFjcm8gZXhwYW5zaW9ucyBhbmQgYWxpa2UgaW4gdGhlXG4gICAgICogaW5wdXQgd2hpY2ggaGFzIHlldCB0byBiZSBsZXhlZC5cbiAgICAgKiBUaGUgYmVoYXZpb3VyIG9mIHRoaXMgQVBJIGNvbnRyYXN0cyB0aGUgYHVucHV0KClgIGV0IGFsXG4gICAgICogQVBJcyBhcyB0aG9zZSBhY3Qgb24gdGhlICpjb25zdW1lZCogaW5wdXQsIHdoaWxlIHRoaXNcbiAgICAgKiBvbmUgYWxsb3dzIG9uZSB0byBtYW5pcHVsYXRlIHRoZSBmdXR1cmUsIHdpdGhvdXQgaW1wYWN0aW5nXG4gICAgICogdGhlIGN1cnJlbnQgYHl5bG9jYCBjdXJzb3IgbG9jYXRpb24gb3IgYW55IGhpc3RvcnkuIFxuICAgICAqIFxuICAgICAqIFVzZSB0aGlzIEFQSSB0byBoZWxwIGltcGxlbWVudCBDLXByZXByb2Nlc3Nvci1saWtlXG4gICAgICogYCNpbmNsdWRlYCBzdGF0ZW1lbnRzLCBldGMuXG4gICAgICogXG4gICAgICogVGhlIHByb3ZpZGVkIGNhbGxiYWNrIG11c3QgYmUgc3luY2hyb25vdXMgYW5kIGlzXG4gICAgICogZXhwZWN0ZWQgdG8gcmV0dXJuIHRoZSBlZGl0ZWQgaW5wdXQgKHN0cmluZykuXG4gICAgICpcbiAgICAgKiBUaGUgYGNwc0FyZ2AgYXJndW1lbnQgdmFsdWUgaXMgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICAgICAqIGFzLWlzLlxuICAgICAqXG4gICAgICogYGNhbGxiYWNrYCBpbnRlcmZhY2U6IFxuICAgICAqIGBmdW5jdGlvbiBjYWxsYmFjayhpbnB1dCwgY3BzQXJnKWBcbiAgICAgKiBcbiAgICAgKiAtIGBpbnB1dGAgd2lsbCBjYXJyeSB0aGUgcmVtYWluaW5nLWlucHV0LXRvLWxleCBzdHJpbmdcbiAgICAgKiAgIGZyb20gdGhlIGxleGVyLlxuICAgICAqIC0gYGNwc0FyZ2AgaXMgYGNwc0FyZ2AgcGFzc2VkIGludG8gdGhpcyBBUEkuXG4gICAgICogXG4gICAgICogVGhlIGB0aGlzYCByZWZlcmVuY2UgZm9yIHRoZSBjYWxsYmFjayB3aWxsIGJlIHNldCB0b1xuICAgICAqIHJlZmVyZW5jZSB0aGlzIGxleGVyIGluc3RhbmNlIHNvIHRoYXQgdXNlcmxhbmQgY29kZVxuICAgICAqIGluIHRoZSBjYWxsYmFjayBjYW4gZWFzaWx5IGFuZCBxdWlja2x5IGFjY2VzcyBhbnkgbGV4ZXJcbiAgICAgKiBBUEkuIFxuICAgICAqXG4gICAgICogV2hlbiB0aGUgY2FsbGJhY2sgcmV0dXJucyBhIG5vbi1zdHJpbmctdHlwZSBmYWxzZXkgdmFsdWUsXG4gICAgICogd2UgYXNzdW1lIHRoZSBjYWxsYmFjayBkaWQgbm90IGVkaXQgdGhlIGlucHV0IGFuZCB3ZVxuICAgICAqIHdpbGwgdXNpbmcgdGhlIGlucHV0IGFzLWlzLlxuICAgICAqXG4gICAgICogV2hlbiB0aGUgY2FsbGJhY2sgcmV0dXJucyBhIG5vbi1zdHJpbmctdHlwZSB2YWx1ZSwgaXRcbiAgICAgKiBpcyBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcgZm9yIGxleGluZyB2aWEgdGhlIGBcIlwiICsgcmV0dmFsYFxuICAgICAqIG9wZXJhdGlvbi4gKFNlZSBhbHNvIHdoeTogaHR0cDovLzJhbGl0eS5jb20vMjAxMi8wMy9jb252ZXJ0aW5nLXRvLXN0cmluZy5odG1sIFxuICAgICAqIC0tIHRoYXQgd2F5IGFueSByZXR1cm5lZCBvYmplY3QncyBgdG9WYWx1ZSgpYCBhbmQgYHRvU3RyaW5nKClgXG4gICAgICogbWV0aG9kcyB3aWxsIGJlIGludm9rZWQgaW4gYSBwcm9wZXIvZGVzaXJhYmxlIG9yZGVyLilcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGVkaXRSZW1haW5pbmdJbnB1dDogZnVuY3Rpb24gbGV4ZXJfZWRpdFJlbWFpbmluZ0lucHV0KGNhbGxiYWNrLCBjcHNBcmcpIHtcbiAgICAgIHZhciBydiA9IGNhbGxiYWNrLmNhbGwodGhpcywgdGhpcy5faW5wdXQsIGNwc0FyZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcnYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChydikge1xuICAgICAgICAgIHRoaXMuX2lucHV0ID0gJycgKyBydjtcbiAgICAgICAgfSBcbiAgICAgICAgLy8gZWxzZToga2VlcCBgdGhpcy5faW5wdXRgIGFzIGlzLiAgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pbnB1dCA9IHJ2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29uc3VtZXMgYW5kIHJldHVybnMgb25lIGNoYXIgZnJvbSB0aGUgaW5wdXRcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGlucHV0OiBmdW5jdGlvbiBsZXhlcl9pbnB1dCgpIHtcbiAgICAgIGlmICghdGhpcy5faW5wdXQpIHtcbiAgICAgICAgLy90aGlzLmRvbmUgPSB0cnVlOyAgICAtLSBkb24ndCBzZXQgYGRvbmVgIGFzIHdlIHdhbnQgdGhlIGxleCgpL25leHQoKSBBUEkgdG8gYmUgYWJsZSB0byBwcm9kdWNlIG9uZSBjdXN0b20gRU9GIHRva2VuIG1hdGNoIGFmdGVyIHRoaXMgYW55aG93LiAobGV4ZXIgY2FuIG1hdGNoIHNwZWNpYWwgPDxFT0Y+PiB0b2tlbnMgYW5kIHBlcmZvcm0gdXNlciBhY3Rpb24gY29kZSBmb3IgYSA8PEVPRj4+IG1hdGNoLCBidXQgb25seSBkb2VzIHNvICpvbmNlKilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0WzBdO1xuICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XG5cbiAgICAgIC8vIENvdW50IHRoZSBsaW5lbnVtYmVyIHVwIHdoZW4gd2UgaGl0IHRoZSBMRiAob3IgYSBzdGFuZC1hbG9uZSBDUikuXG4gICAgICAvLyBPbiBDUkxGLCB0aGUgbGluZW51bWJlciBpcyBpbmNyZW1lbnRlZCB3aGVuIHlvdSBmZXRjaCB0aGUgQ1Igb3IgdGhlIENSTEYgY29tYm9cbiAgICAgIC8vIGFuZCB3ZSBhZHZhbmNlIGltbWVkaWF0ZWx5IHBhc3QgdGhlIExGIGFzIHdlbGwsIHJldHVybmluZyBib3RoIHRvZ2V0aGVyIGFzIGlmXG4gICAgICAvLyBpdCB3YXMgYWxsIGEgc2luZ2xlICdjaGFyYWN0ZXInIG9ubHkuXG4gICAgICB2YXIgc2xpY2VfbGVuID0gMTtcblxuICAgICAgdmFyIGxpbmVzID0gZmFsc2U7XG5cbiAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgbGluZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgbGluZXMgPSB0cnVlO1xuICAgICAgICB2YXIgY2gyID0gdGhpcy5faW5wdXRbMV07XG5cbiAgICAgICAgaWYgKGNoMiA9PT0gJ1xcbicpIHtcbiAgICAgICAgICBzbGljZV9sZW4rKztcbiAgICAgICAgICBjaCArPSBjaDI7XG4gICAgICAgICAgdGhpcy55eXRleHQgKz0gY2gyO1xuICAgICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICB0aGlzLm1hdGNoICs9IGNoMjtcbiAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2gyO1xuICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lKys7XG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XG4gICAgICB9XG5cbiAgICAgIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG4gICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKHNsaWNlX2xlbik7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuc2hpZnRzIG9uZSBjaGFyIChvciBhbiBlbnRpcmUgc3RyaW5nKSBpbnRvIHRoZSBpbnB1dFxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgdW5wdXQ6IGZ1bmN0aW9uIGxleGVyX3VucHV0KGNoKSB7XG4gICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbik7XG4gICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcbiAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgIHRoaXMubWF0Y2ggPSB0aGlzLm1hdGNoLnN1YnN0cigwLCB0aGlzLm1hdGNoLmxlbmd0aCAtIGxlbik7XG4gICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSBsZW4pO1xuXG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSA9IHRoaXMueXlsaW5lbm8gKyAxO1xuXG4gICAgICAgIC8vIEdldCBsYXN0IGVudGlyZWx5IG1hdGNoZWQgbGluZSBpbnRvIHRoZSBgcHJlX2xpbmVzW11gIGFycmF5J3NcbiAgICAgICAgLy8gbGFzdCBpbmRleCBzbG90OyB3ZSBkb24ndCBtaW5kIHdoZW4gb3RoZXIgcHJldmlvdXNseSBcbiAgICAgICAgLy8gbWF0Y2hlZCBsaW5lcyBlbmQgdXAgaW4gdGhlIGFycmF5IHRvby4gXG4gICAgICAgIHZhciBwcmUgPSB0aGlzLm1hdGNoO1xuXG4gICAgICAgIHZhciBwcmVfbGluZXMgPSBwcmUuc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgICBpZiAocHJlX2xpbmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHByZSA9IHRoaXMubWF0Y2hlZDtcbiAgICAgICAgICBwcmVfbGluZXMgPSBwcmUuc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uID0gcHJlX2xpbmVzW3ByZV9saW5lcy5sZW5ndGggLSAxXS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiAtPSBsZW47XG4gICAgICB9XG5cbiAgICAgIHRoaXMueXlsbG9jLnJhbmdlWzFdID0gdGhpcy55eWxsb2MucmFuZ2VbMF0gKyB0aGlzLnl5bGVuZztcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhY2hlIG1hdGNoZWQgdGV4dCBhbmQgYXBwZW5kIGl0IG9uIG5leHQgYWN0aW9uXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBtb3JlOiBmdW5jdGlvbiBsZXhlcl9tb3JlKCkge1xuICAgICAgdGhpcy5fbW9yZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc2lnbmFsIHRoZSBsZXhlciB0aGF0IHRoaXMgcnVsZSBmYWlscyB0byBtYXRjaCB0aGUgaW5wdXQsIHNvIHRoZVxuICAgICAqIG5leHQgbWF0Y2hpbmcgcnVsZSAocmVnZXgpIHNob3VsZCBiZSB0ZXN0ZWQgaW5zdGVhZC5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHJlamVjdDogZnVuY3Rpb24gbGV4ZXJfcmVqZWN0KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgdGhpcy5fYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdoZW4gdGhlIGBwYXJzZUVycm9yKClgIGNhbGwgcmV0dXJucywgd2UgTVVTVCBlbnN1cmUgdGhhdCB0aGUgZXJyb3IgaXMgcmVnaXN0ZXJlZC5cbiAgICAgICAgLy8gV2UgYWNjb21wbGlzaCB0aGlzIGJ5IHNpZ25hbGluZyBhbiAnZXJyb3InIHRva2VuIHRvIGJlIHByb2R1Y2VkIGZvciB0aGUgY3VycmVudFxuICAgICAgICAvLyBgLmxleCgpYCBydW4uXG4gICAgICAgIHZhciBsaW5lbm9fbXNnID0gJyc7XG5cbiAgICAgICAgaWYgKHRoaXMueXlsbG9jKSB7XG4gICAgICAgICAgbGluZW5vX21zZyA9ICcgb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwID0gdGhpcy5jb25zdHJ1Y3RMZXhFcnJvckluZm8oXG4gICAgICAgICAgJ0xleGljYWwgZXJyb3InICsgbGluZW5vX21zZyArICc6IFlvdSBjYW4gb25seSBpbnZva2UgcmVqZWN0KCkgaW4gdGhlIGxleGVyIHdoZW4gdGhlIGxleGVyIGlzIG9mIHRoZSBiYWNrdHJhY2tpbmcgcGVyc3Vhc2lvbiAob3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIgPSB0cnVlKS4nLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fc2lnbmFsZWRfZXJyb3JfdG9rZW4gPSB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25MZXhlckVycm9yKSB8fCB0aGlzLkVSUk9SO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0YWluIGZpcnN0IG4gY2hhcmFjdGVycyBvZiB0aGUgbWF0Y2hcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGxlc3M6IGZ1bmN0aW9uIGxleGVyX2xlc3Mobikge1xuICAgICAgcmV0dXJuIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiAocGFydCBvZiB0aGUpIGFscmVhZHkgbWF0Y2hlZCBpbnB1dCwgaS5lLiBmb3IgZXJyb3JcbiAgICAgKiBtZXNzYWdlcy5cbiAgICAgKiBcbiAgICAgKiBMaW1pdCB0aGUgcmV0dXJuZWQgc3RyaW5nIGxlbmd0aCB0byBgbWF4U2l6ZWAgKGRlZmF1bHQ6IDIwKS5cbiAgICAgKiBcbiAgICAgKiBMaW1pdCB0aGUgcmV0dXJuZWQgc3RyaW5nIHRvIHRoZSBgbWF4TGluZXNgIG51bWJlciBvZiBsaW5lcyBvZlxuICAgICAqIGlucHV0IChkZWZhdWx0OiAxKS5cbiAgICAgKiBcbiAgICAgKiBOZWdhdGl2ZSBsaW1pdCB2YWx1ZXMgZXF1YWwgKnVubGltaXRlZCouXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uIGxleGVyX3Bhc3RJbnB1dChtYXhTaXplLCBtYXhMaW5lcykge1xuICAgICAgdmFyIHBhc3QgPSB0aGlzLm1hdGNoZWQuc3Vic3RyaW5nKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSB0aGlzLm1hdGNoLmxlbmd0aCk7XG5cbiAgICAgIGlmIChtYXhTaXplIDwgMClcbiAgICAgICAgbWF4U2l6ZSA9IHBhc3QubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAoIW1heFNpemUpXG4gICAgICAgIG1heFNpemUgPSAyMDtcblxuICAgICAgaWYgKG1heExpbmVzIDwgMClcbiAgICAgICAgbWF4TGluZXMgPSBwYXN0Lmxlbmd0aDsgICAgICAgICAgLy8gY2FuJ3QgZXZlciBoYXZlIG1vcmUgaW5wdXQgbGluZXMgdGhhbiB0aGlzISBcbiAgICAgIGVsc2UgaWYgKCFtYXhMaW5lcylcbiAgICAgICAgbWF4TGluZXMgPSAxO1xuXG4gICAgICAvLyBgc3Vic3RyYCBhbnRpY2lwYXRpb246IHRyZWF0IFxcclxcbiBhcyBhIHNpbmdsZSBjaGFyYWN0ZXIgYW5kIHRha2UgYSBsaXR0bGVcbiAgICAgIC8vIG1vcmUgdGhhbiBuZWNlc3Nhcnkgc28gdGhhdCB3ZSBjYW4gc3RpbGwgcHJvcGVybHkgY2hlY2sgYWdhaW5zdCBtYXhTaXplXG4gICAgICAvLyBhZnRlciB3ZSd2ZSB0cmFuc2Zvcm1lZCBhbmQgbGltaXRlZCB0aGUgbmV3TGluZXMgaW4gaGVyZTpcbiAgICAgIHBhc3QgPSBwYXN0LnN1YnN0cigtbWF4U2l6ZSAqIDIgLSAyKTtcblxuICAgICAgLy8gbm93IHRoYXQgd2UgaGF2ZSBhIHNpZ25pZmljYW50bHkgcmVkdWNlZCBzdHJpbmcgdG8gcHJvY2VzcywgdHJhbnNmb3JtIHRoZSBuZXdsaW5lc1xuICAgICAgLy8gYW5kIGNob3AgdGhlbSwgdGhlbiBsaW1pdCB0aGVtOlxuICAgICAgdmFyIGEgPSBwYXN0LnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpLnNwbGl0KCdcXG4nKTtcblxuICAgICAgYSA9IGEuc2xpY2UoLW1heExpbmVzKTtcbiAgICAgIHBhc3QgPSBhLmpvaW4oJ1xcbicpO1xuXG4gICAgICAvLyBXaGVuLCBhZnRlciBsaW1pdGluZyB0byBtYXhMaW5lcywgd2Ugc3RpbGwgaGF2ZSB0b28gbXVjaCB0byByZXR1cm4sXG4gICAgICAvLyBkbyBhZGQgYW4gZWxsaXBzaXMgcHJlZml4Li4uXG4gICAgICBpZiAocGFzdC5sZW5ndGggPiBtYXhTaXplKSB7XG4gICAgICAgIHBhc3QgPSAnLi4uJyArIHBhc3Quc3Vic3RyKC1tYXhTaXplKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiAocGFydCBvZiB0aGUpIHVwY29taW5nIGlucHV0LCBpLmUuIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgICAgKiBcbiAgICAgKiBMaW1pdCB0aGUgcmV0dXJuZWQgc3RyaW5nIGxlbmd0aCB0byBgbWF4U2l6ZWAgKGRlZmF1bHQ6IDIwKS5cbiAgICAgKiBcbiAgICAgKiBMaW1pdCB0aGUgcmV0dXJuZWQgc3RyaW5nIHRvIHRoZSBgbWF4TGluZXNgIG51bWJlciBvZiBsaW5lcyBvZiBpbnB1dCAoZGVmYXVsdDogMSkuXG4gICAgICogXG4gICAgICogTmVnYXRpdmUgbGltaXQgdmFsdWVzIGVxdWFsICp1bmxpbWl0ZWQqLlxuICAgICAqXG4gICAgICogPiAjIyMgTk9URSAjIyNcbiAgICAgKiA+XG4gICAgICogPiAqXCJ1cGNvbWluZyBpbnB1dFwiKiBpcyBkZWZpbmVkIGFzIHRoZSB3aG9sZSBvZiB0aGUgYm90aFxuICAgICAqID4gdGhlICpjdXJyZW50bHkgbGV4ZWQqIGlucHV0LCB0b2dldGhlciB3aXRoIGFueSByZW1haW5pbmcgaW5wdXRcbiAgICAgKiA+IGZvbGxvd2luZyB0aGF0LiAqXCJjdXJyZW50bHkgbGV4ZWRcIiogaW5wdXQgaXMgdGhlIGlucHV0IFxuICAgICAqID4gYWxyZWFkeSByZWNvZ25pemVkIGJ5IHRoZSBsZXhlciBidXQgbm90IHlldCByZXR1cm5lZCB3aXRoXG4gICAgICogPiB0aGUgbGV4ZXIgdG9rZW4uIFRoaXMgaGFwcGVucyB3aGVuIHlvdSBhcmUgaW52b2tpbmcgdGhpcyBBUElcbiAgICAgKiA+IGZyb20gaW5zaWRlIGFueSBsZXhlciBydWxlIGFjdGlvbiBjb2RlIGJsb2NrLiBcbiAgICAgKiA+XG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICB1cGNvbWluZ0lucHV0OiBmdW5jdGlvbiBsZXhlcl91cGNvbWluZ0lucHV0KG1heFNpemUsIG1heExpbmVzKSB7XG4gICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG5cbiAgICAgIGlmIChtYXhTaXplIDwgMClcbiAgICAgICAgbWF4U2l6ZSA9IG5leHQubGVuZ3RoICsgdGhpcy5faW5wdXQubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAoIW1heFNpemUpXG4gICAgICAgIG1heFNpemUgPSAyMDtcblxuICAgICAgaWYgKG1heExpbmVzIDwgMClcbiAgICAgICAgbWF4TGluZXMgPSBtYXhTaXplOyAgICAgICAgICAvLyBjYW4ndCBldmVyIGhhdmUgbW9yZSBpbnB1dCBsaW5lcyB0aGFuIHRoaXMhIFxuICAgICAgZWxzZSBpZiAoIW1heExpbmVzKVxuICAgICAgICBtYXhMaW5lcyA9IDE7XG5cbiAgICAgIC8vIGBzdWJzdHJpbmdgIGFudGljaXBhdGlvbjogdHJlYXQgXFxyXFxuIGFzIGEgc2luZ2xlIGNoYXJhY3RlciBhbmQgdGFrZSBhIGxpdHRsZVxuICAgICAgLy8gbW9yZSB0aGFuIG5lY2Vzc2FyeSBzbyB0aGF0IHdlIGNhbiBzdGlsbCBwcm9wZXJseSBjaGVjayBhZ2FpbnN0IG1heFNpemVcbiAgICAgIC8vIGFmdGVyIHdlJ3ZlIHRyYW5zZm9ybWVkIGFuZCBsaW1pdGVkIHRoZSBuZXdMaW5lcyBpbiBoZXJlOlxuICAgICAgaWYgKG5leHQubGVuZ3RoIDwgbWF4U2l6ZSAqIDIgKyAyKSB7XG4gICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyaW5nKDAsIG1heFNpemUgKiAyICsgMik7ICAgLy8gc3Vic3RyaW5nIGlzIGZhc3RlciBvbiBDaHJvbWUvVjggXG4gICAgICB9XG5cbiAgICAgIC8vIG5vdyB0aGF0IHdlIGhhdmUgYSBzaWduaWZpY2FudGx5IHJlZHVjZWQgc3RyaW5nIHRvIHByb2Nlc3MsIHRyYW5zZm9ybSB0aGUgbmV3bGluZXNcbiAgICAgIC8vIGFuZCBjaG9wIHRoZW0sIHRoZW4gbGltaXQgdGhlbTpcbiAgICAgIHZhciBhID0gbmV4dC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKS5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGEgPSBhLnNsaWNlKDAsIG1heExpbmVzKTtcbiAgICAgIG5leHQgPSBhLmpvaW4oJ1xcbicpO1xuXG4gICAgICAvLyBXaGVuLCBhZnRlciBsaW1pdGluZyB0byBtYXhMaW5lcywgd2Ugc3RpbGwgaGF2ZSB0b28gbXVjaCB0byByZXR1cm4sXG4gICAgICAvLyBkbyBhZGQgYW4gZWxsaXBzaXMgcG9zdGZpeC4uLlxuICAgICAgaWYgKG5leHQubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBuZXh0ID0gbmV4dC5zdWJzdHJpbmcoMCwgbWF4U2l6ZSkgKyAnLi4uJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhIHN0cmluZyB3aGljaCBkaXNwbGF5cyB0aGUgY2hhcmFjdGVyIHBvc2l0aW9uIHdoZXJlIHRoZVxuICAgICAqIGxleGluZyBlcnJvciBvY2N1cnJlZCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXNcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24gbGV4ZXJfc2hvd1Bvc2l0aW9uKG1heFByZWZpeCwgbWF4UG9zdGZpeCkge1xuICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KG1heFByZWZpeCkucmVwbGFjZSgvXFxzL2csICcgJyk7XG4gICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbignLScpO1xuICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dChtYXhQb3N0Zml4KS5yZXBsYWNlKC9cXHMvZywgJyAnKSArICdcXG4nICsgYyArICdeJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGFuIFlZTExPQyBpbmZvIG9iamVjdCBkZXJpdmVkIG9mZiB0aGUgZ2l2ZW4gY29udGV4dCAoYWN0dWFsLCBwcmVjZWRpbmcsIGZvbGxvd2luZywgY3VycmVudCkuXG4gICAgICogVXNlIHRoaXMgbWV0aG9kIHdoZW4gdGhlIGdpdmVuIGBhY3R1YWxgIGxvY2F0aW9uIGlzIG5vdCBndWFyYW50ZWVkIHRvIGV4aXN0IChpLmUuIHdoZW5cbiAgICAgKiBpdCBNQVkgYmUgTlVMTCkgYW5kIHlvdSBNVVNUIGhhdmUgYSB2YWxpZCBsb2NhdGlvbiBpbmZvIG9iamVjdCBhbnl3YXk6XG4gICAgICogdGhlbiB3ZSB0YWtlIHRoZSBnaXZlbiBjb250ZXh0IG9mIHRoZSBgcHJlY2VkaW5nYCBhbmQgYGZvbGxvd2luZ2AgbG9jYXRpb25zLCBJRkYgdGhvc2UgYXJlIGF2YWlsYWJsZSxcbiAgICAgKiBhbmQgcmVjb25zdHJ1Y3QgdGhlIGBhY3R1YWxgIGxvY2F0aW9uIGluZm8gZnJvbSB0aG9zZS5cbiAgICAgKiBJZiB0aGlzIGZhaWxzLCB0aGUgaGV1cmlzdGljIGlzIHRvIHRha2UgdGhlIGBjdXJyZW50YCBsb2NhdGlvbiwgSUZGIGF2YWlsYWJsZS5cbiAgICAgKiBJZiB0aGlzIGZhaWxzIGFzIHdlbGwsIHdlIGFzc3VtZSB0aGUgc291Z2h0IGxvY2F0aW9uIGlzIGF0L2Fyb3VuZCB0aGUgY3VycmVudCBsZXhlciBwb3NpdGlvblxuICAgICAqIGFuZCB0aGVuIHByb2R1Y2UgdGhhdCBvbmUgYXMgYSByZXNwb25zZS4gRE8gTk9URSB0aGF0IHRoZXNlIGhldXJpc3RpYy9kZXJpdmVkIGxvY2F0aW9uIGluZm9cbiAgICAgKiB2YWx1ZXMgTUFZIGJlIGluYWNjdXJhdGUhXG4gICAgICpcbiAgICAgKiBOT1RFOiBgZGVyaXZlTG9jYXRpb25JbmZvKClgIEFMV0FZUyBwcm9kdWNlcyBhIGxvY2F0aW9uIGluZm8gb2JqZWN0ICpjb3B5KiBvZiBgYWN0dWFsYCwgbm90IGp1c3RcbiAgICAgKiBhICpyZWZlcmVuY2UqIGhlbmNlIGFsbCBpbnB1dCBsb2NhdGlvbiBvYmplY3RzIGNhbiBiZSBhc3N1bWVkIHRvIGJlICdjb25zdGFudCcgKGZ1bmN0aW9uIGhhcyBubyBzaWRlLWVmZmVjdHMpLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgZGVyaXZlTG9jYXRpb25JbmZvOiBmdW5jdGlvbiBsZXhlcl9kZXJpdmVZWUxMT0MoYWN0dWFsLCBwcmVjZWRpbmcsIGZvbGxvd2luZywgY3VycmVudCkge1xuICAgICAgdmFyIGxvYyA9IHtcbiAgICAgICAgZmlyc3RfbGluZTogMSxcbiAgICAgICAgZmlyc3RfY29sdW1uOiAwLFxuICAgICAgICBsYXN0X2xpbmU6IDEsXG4gICAgICAgIGxhc3RfY29sdW1uOiAwLFxuICAgICAgICByYW5nZTogWzAsIDBdXG4gICAgICB9O1xuXG4gICAgICBpZiAoYWN0dWFsKSB7XG4gICAgICAgIGxvYy5maXJzdF9saW5lID0gYWN0dWFsLmZpcnN0X2xpbmUgfCAwO1xuICAgICAgICBsb2MubGFzdF9saW5lID0gYWN0dWFsLmxhc3RfbGluZSB8IDA7XG4gICAgICAgIGxvYy5maXJzdF9jb2x1bW4gPSBhY3R1YWwuZmlyc3RfY29sdW1uIHwgMDtcbiAgICAgICAgbG9jLmxhc3RfY29sdW1uID0gYWN0dWFsLmxhc3RfY29sdW1uIHwgMDtcblxuICAgICAgICBpZiAoYWN0dWFsLnJhbmdlKSB7XG4gICAgICAgICAgbG9jLnJhbmdlWzBdID0gYWN0dWFsLnJhbmdlWzBdIHwgMDtcbiAgICAgICAgICBsb2MucmFuZ2VbMV0gPSBhY3R1YWwucmFuZ2VbMV0gfCAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2MuZmlyc3RfbGluZSA8PSAwIHx8IGxvYy5sYXN0X2xpbmUgPCBsb2MuZmlyc3RfbGluZSkge1xuICAgICAgICAvLyBwbGFuIEI6IGhldXJpc3RpYyB1c2luZyBwcmVjZWRpbmcgYW5kIGZvbGxvd2luZzpcbiAgICAgICAgaWYgKGxvYy5maXJzdF9saW5lIDw9IDAgJiYgcHJlY2VkaW5nKSB7XG4gICAgICAgICAgbG9jLmZpcnN0X2xpbmUgPSBwcmVjZWRpbmcubGFzdF9saW5lIHwgMDtcbiAgICAgICAgICBsb2MuZmlyc3RfY29sdW1uID0gcHJlY2VkaW5nLmxhc3RfY29sdW1uIHwgMDtcblxuICAgICAgICAgIGlmIChwcmVjZWRpbmcucmFuZ2UpIHtcbiAgICAgICAgICAgIGxvYy5yYW5nZVswXSA9IGFjdHVhbC5yYW5nZVsxXSB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChsb2MubGFzdF9saW5lIDw9IDAgfHwgbG9jLmxhc3RfbGluZSA8IGxvYy5maXJzdF9saW5lKSAmJiBmb2xsb3dpbmcpIHtcbiAgICAgICAgICBsb2MubGFzdF9saW5lID0gZm9sbG93aW5nLmZpcnN0X2xpbmUgfCAwO1xuICAgICAgICAgIGxvYy5sYXN0X2NvbHVtbiA9IGZvbGxvd2luZy5maXJzdF9jb2x1bW4gfCAwO1xuXG4gICAgICAgICAgaWYgKGZvbGxvd2luZy5yYW5nZSkge1xuICAgICAgICAgICAgbG9jLnJhbmdlWzFdID0gYWN0dWFsLnJhbmdlWzBdIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwbGFuIEM/OiBzZWUgaWYgdGhlICdjdXJyZW50JyBsb2NhdGlvbiBpcyB1c2VmdWwvc2FuZSB0b286XG4gICAgICAgIGlmIChsb2MuZmlyc3RfbGluZSA8PSAwICYmIGN1cnJlbnQgJiYgKGxvYy5sYXN0X2xpbmUgPD0gMCB8fCBjdXJyZW50Lmxhc3RfbGluZSA8PSBsb2MubGFzdF9saW5lKSkge1xuICAgICAgICAgIGxvYy5maXJzdF9saW5lID0gY3VycmVudC5maXJzdF9saW5lIHwgMDtcbiAgICAgICAgICBsb2MuZmlyc3RfY29sdW1uID0gY3VycmVudC5maXJzdF9jb2x1bW4gfCAwO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnQucmFuZ2UpIHtcbiAgICAgICAgICAgIGxvYy5yYW5nZVswXSA9IGN1cnJlbnQucmFuZ2VbMF0gfCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2MubGFzdF9saW5lIDw9IDAgJiYgY3VycmVudCAmJiAobG9jLmZpcnN0X2xpbmUgPD0gMCB8fCBjdXJyZW50LmZpcnN0X2xpbmUgPj0gbG9jLmZpcnN0X2xpbmUpKSB7XG4gICAgICAgICAgbG9jLmxhc3RfbGluZSA9IGN1cnJlbnQubGFzdF9saW5lIHwgMDtcbiAgICAgICAgICBsb2MubGFzdF9jb2x1bW4gPSBjdXJyZW50Lmxhc3RfY29sdW1uIHwgMDtcblxuICAgICAgICAgIGlmIChjdXJyZW50LnJhbmdlKSB7XG4gICAgICAgICAgICBsb2MucmFuZ2VbMV0gPSBjdXJyZW50LnJhbmdlWzFdIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2FuaXRpemU6IGZpeCBsYXN0X2xpbmUgQkVGT1JFIHdlIGZpeCBmaXJzdF9saW5lIGFzIHdlIHVzZSB0aGUgJ3JhdycgdmFsdWUgb2YgdGhlIGxhdHRlclxuICAgICAgLy8gb3IgcGxhbiBEIGhldXJpc3RpY3MgdG8gcHJvZHVjZSBhICdzZW5zaWJsZScgbGFzdF9saW5lIHZhbHVlOlxuICAgICAgaWYgKGxvYy5sYXN0X2xpbmUgPD0gMCkge1xuICAgICAgICBpZiAobG9jLmZpcnN0X2xpbmUgPD0gMCkge1xuICAgICAgICAgIGxvYy5maXJzdF9saW5lID0gdGhpcy55eWxsb2MuZmlyc3RfbGluZTtcbiAgICAgICAgICBsb2MubGFzdF9saW5lID0gdGhpcy55eWxsb2MubGFzdF9saW5lO1xuICAgICAgICAgIGxvYy5maXJzdF9jb2x1bW4gPSB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW47XG4gICAgICAgICAgbG9jLmxhc3RfY29sdW1uID0gdGhpcy55eWxsb2MubGFzdF9jb2x1bW47XG4gICAgICAgICAgbG9jLnJhbmdlWzBdID0gdGhpcy55eWxsb2MucmFuZ2VbMF07XG4gICAgICAgICAgbG9jLnJhbmdlWzFdID0gdGhpcy55eWxsb2MucmFuZ2VbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jLmxhc3RfbGluZSA9IHRoaXMueXlsbG9jLmxhc3RfbGluZTtcbiAgICAgICAgICBsb2MubGFzdF9jb2x1bW4gPSB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbjtcbiAgICAgICAgICBsb2MucmFuZ2VbMV0gPSB0aGlzLnl5bGxvYy5yYW5nZVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobG9jLmZpcnN0X2xpbmUgPD0gMCkge1xuICAgICAgICBsb2MuZmlyc3RfbGluZSA9IGxvYy5sYXN0X2xpbmU7XG4gICAgICAgIGxvYy5maXJzdF9jb2x1bW4gPSAwOyAgLy8gbG9jLmxhc3RfY29sdW1uOyBcbiAgICAgICAgbG9jLnJhbmdlWzFdID0gbG9jLnJhbmdlWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9jLmZpcnN0X2NvbHVtbiA8IDApIHtcbiAgICAgICAgbG9jLmZpcnN0X2NvbHVtbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2MubGFzdF9jb2x1bW4gPCAwKSB7XG4gICAgICAgIGxvYy5sYXN0X2NvbHVtbiA9IChsb2MuZmlyc3RfY29sdW1uID4gMCA/IGxvYy5maXJzdF9jb2x1bW4gOiA4MCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsb2M7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhIHN0cmluZyB3aGljaCBkaXNwbGF5cyB0aGUgbGluZXMgJiBjb2x1bW5zIG9mIGlucHV0IHdoaWNoIGFyZSByZWZlcmVuY2VkIFxuICAgICAqIGJ5IHRoZSBnaXZlbiBsb2NhdGlvbiBpbmZvIHJhbmdlLCBwbHVzIGEgZmV3IGxpbmVzIG9mIGNvbnRleHQuXG4gICAgICogXG4gICAgICogVGhpcyBmdW5jdGlvbiBwcmV0dHktcHJpbnRzIHRoZSBpbmRpY2F0ZWQgc2VjdGlvbiBvZiB0aGUgaW5wdXQsIHdpdGggbGluZSBudW1iZXJzIFxuICAgICAqIGFuZCBldmVyeXRoaW5nIVxuICAgICAqIFxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdmVyeSB1c2VmdWwgdG8gcHJvdmlkZSBoaWdobHkgcmVhZGFibGUgZXJyb3IgcmVwb3J0cywgd2hpbGVcbiAgICAgKiB0aGUgbG9jYXRpb24gcmFuZ2UgbWF5IGJlIHNwZWNpZmllZCBpbiB2YXJpb3VzIGZsZXhpYmxlIHdheXM6XG4gICAgICogXG4gICAgICogLSBgbG9jYCBpcyB0aGUgbG9jYXRpb24gaW5mbyBvYmplY3Qgd2hpY2ggcmVmZXJlbmNlcyB0aGUgYXJlYSB3aGljaCBzaG91bGQgYmVcbiAgICAgKiAgIGRpc3BsYXllZCBhbmQgJ21hcmtlZCB1cCc6IHRoZXNlIGxpbmVzICYgY29sdW1ucyBvZiB0ZXh0IGFyZSBtYXJrZWQgdXAgYnkgYF5gXG4gICAgICogICBjaGFyYWN0ZXJzIGJlbG93IGVhY2ggY2hhcmFjdGVyIGluIHRoZSBlbnRpcmUgaW5wdXQgcmFuZ2UuXG4gICAgICogXG4gICAgICogLSBgY29udGV4dF9sb2NgIGlzIHRoZSAqb3B0aW9uYWwqIGxvY2F0aW9uIGluZm8gb2JqZWN0IHdoaWNoIGluc3RydWN0cyB0aGlzXG4gICAgICogICBwcmV0dHktcHJpbnRlciBob3cgbXVjaCAqbGVhZGluZyogY29udGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGFsb25nc2lkZVxuICAgICAqICAgdGhlIGFyZWEgcmVmZXJlbmNlZCBieSBgbG9jYC4gVGhpcyBjYW4gaGVscCBwcm92aWRlIGNvbnRleHQgZm9yIHRoZSBkaXNwbGF5ZWRcbiAgICAgKiAgIGVycm9yLCBldGMuXG4gICAgICogXG4gICAgICogICBXaGVuIHRoaXMgbG9jYXRpb24gaW5mbyBpcyBub3QgcHJvdmlkZWQsIGEgZGVmYXVsdCBjb250ZXh0IG9mIDMgbGluZXMgaXNcbiAgICAgKiAgIHVzZWQuXG4gICAgICogXG4gICAgICogLSBgY29udGV4dF9sb2MyYCBpcyBhbm90aGVyICpvcHRpb25hbCogbG9jYXRpb24gaW5mbyBvYmplY3QsIHdoaWNoIHNlcnZlc1xuICAgICAqICAgYSBzaW1pbGFyIHB1cnBvc2UgdG8gYGNvbnRleHRfbG9jYDogaXQgc3BlY2lmaWVzIHRoZSBhbW91bnQgb2YgKnRyYWlsaW5nKlxuICAgICAqICAgY29udGV4dCBsaW5lcyB0byBkaXNwbGF5IGluIHRoZSBwcmV0dHktcHJpbnQgb3V0cHV0LlxuICAgICAqIFxuICAgICAqICAgV2hlbiB0aGlzIGxvY2F0aW9uIGluZm8gaXMgbm90IHByb3ZpZGVkLCBhIGRlZmF1bHQgY29udGV4dCBvZiAxIGxpbmUgb25seSBpc1xuICAgICAqICAgdXNlZC5cbiAgICAgKiBcbiAgICAgKiBTcGVjaWFsIE5vdGVzOlxuICAgICAqIFxuICAgICAqIC0gd2hlbiB0aGUgYGxvY2AtaW5kaWNhdGVkIHJhbmdlIGlzIHZlcnkgbGFyZ2UgKGFib3V0IDUgbGluZXMgb3IgbW9yZSksIHRoZW5cbiAgICAgKiAgIG9ubHkgdGhlIGZpcnN0IGFuZCBsYXN0IGZldyBsaW5lcyBvZiB0aGlzIGJsb2NrIGFyZSBwcmludGVkIHdoaWxlIGFcbiAgICAgKiAgIGAuLi5jb250aW51ZWQuLi5gIG1lc3NhZ2Ugd2lsbCBiZSBwcmludGVkIGJldHdlZW4gdGhlbS5cbiAgICAgKiBcbiAgICAgKiAgIFRoaXMgc2VydmVzIHRoZSBwdXJwb3NlIG9mIG5vdCBwcmludGluZyBhIGh1Z2UgYW1vdW50IG9mIHRleHQgd2hlbiB0aGUgYGxvY2BcbiAgICAgKiAgIHJhbmdlIGhhcHBlbnMgdG8gYmUgaHVnZTogdGhpcyB3YXkgYSBtYW5hZ2VhYmxlICYgcmVhZGFibGUgb3V0cHV0IHJlc3VsdHNcbiAgICAgKiAgIGZvciBhcmJpdHJhcnkgbGFyZ2UgcmFuZ2VzLlxuICAgICAqIFxuICAgICAqIC0gdGhpcyBmdW5jdGlvbiBjYW4gZGlzcGxheSBsaW5lcyBvZiBpbnB1dCB3aGljaCB3aGF2ZSBub3QgeWV0IGJlZW4gbGV4ZWQuXG4gICAgICogICBgcHJldHR5UHJpbnRSYW5nZSgpYCBjYW4gYWNjZXNzIHRoZSBlbnRpcmUgaW5wdXQhXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBwcmV0dHlQcmludFJhbmdlOiBmdW5jdGlvbiBsZXhlcl9wcmV0dHlQcmludFJhbmdlKGxvYywgY29udGV4dF9sb2MsIGNvbnRleHRfbG9jMikge1xuICAgICAgbG9jID0gdGhpcy5kZXJpdmVMb2NhdGlvbkluZm8obG9jLCBjb250ZXh0X2xvYywgY29udGV4dF9sb2MyKTtcbiAgICAgIGNvbnN0IENPTlRFWFQgPSAzO1xuICAgICAgY29uc3QgQ09OVEVYVF9UQUlMID0gMTtcbiAgICAgIGNvbnN0IE1JTklNVU1fVklTSUJMRV9OT05FTVBUWV9MSU5FX0NPVU5UID0gMjtcbiAgICAgIHZhciBpbnB1dCA9IHRoaXMubWF0Y2hlZCArIHRoaXMuX2lucHV0O1xuICAgICAgdmFyIGxpbmVzID0gaW5wdXQuc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIGwwID0gTWF0aC5tYXgoMSwgKGNvbnRleHRfbG9jID8gY29udGV4dF9sb2MuZmlyc3RfbGluZSA6IGxvYy5maXJzdF9saW5lIC0gQ09OVEVYVCkpO1xuICAgICAgdmFyIGwxID0gTWF0aC5tYXgoMSwgKGNvbnRleHRfbG9jMiA/IGNvbnRleHRfbG9jMi5sYXN0X2xpbmUgOiBsb2MubGFzdF9saW5lICsgQ09OVEVYVF9UQUlMKSk7XG4gICAgICB2YXIgbGluZW5vX2Rpc3BsYXlfd2lkdGggPSAxICsgTWF0aC5sb2cxMChsMSB8IDEpIHwgMDtcbiAgICAgIHZhciB3c19wcmVmaXggPSBuZXcgQXJyYXkobGluZW5vX2Rpc3BsYXlfd2lkdGgpLmpvaW4oJyAnKTtcbiAgICAgIHZhciBub25lbXB0eV9saW5lX2luZGV4ZXMgPSBbXTtcblxuICAgICAgdmFyIHJ2ID0gbGluZXMuc2xpY2UobDAgLSAxLCBsMSArIDEpLm1hcChmdW5jdGlvbiBpbmplY3RMaW5lTnVtYmVyKGxpbmUsIGluZGV4KSB7XG4gICAgICAgIHZhciBsbm8gPSBpbmRleCArIGwwO1xuICAgICAgICB2YXIgbG5vX3BmeCA9ICh3c19wcmVmaXggKyBsbm8pLnN1YnN0cigtbGluZW5vX2Rpc3BsYXlfd2lkdGgpO1xuICAgICAgICB2YXIgcnYgPSBsbm9fcGZ4ICsgJzogJyArIGxpbmU7XG4gICAgICAgIHZhciBlcnJwZnggPSBuZXcgQXJyYXkobGluZW5vX2Rpc3BsYXlfd2lkdGggKyAxKS5qb2luKCdeJyk7XG4gICAgICAgIHZhciBvZmZzZXQgPSAyICsgMTtcbiAgICAgICAgdmFyIGxlbiA9IDA7XG5cbiAgICAgICAgaWYgKGxubyA9PT0gbG9jLmZpcnN0X2xpbmUpIHtcbiAgICAgICAgICBvZmZzZXQgKz0gbG9jLmZpcnN0X2NvbHVtbjtcblxuICAgICAgICAgIGxlbiA9IE1hdGgubWF4KFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgICgobG5vID09PSBsb2MubGFzdF9saW5lID8gbG9jLmxhc3RfY29sdW1uIDogbGluZS5sZW5ndGgpKSAtIGxvYy5maXJzdF9jb2x1bW4gKyAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChsbm8gPT09IGxvYy5sYXN0X2xpbmUpIHtcbiAgICAgICAgICBsZW4gPSBNYXRoLm1heCgyLCBsb2MubGFzdF9jb2x1bW4gKyAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChsbm8gPiBsb2MuZmlyc3RfbGluZSAmJiBsbm8gPCBsb2MubGFzdF9saW5lKSB7XG4gICAgICAgICAgbGVuID0gTWF0aC5tYXgoMiwgbGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICB2YXIgbGVhZCA9IG5ldyBBcnJheShvZmZzZXQpLmpvaW4oJy4nKTtcbiAgICAgICAgICB2YXIgbWFyayA9IG5ldyBBcnJheShsZW4pLmpvaW4oJ14nKTtcbiAgICAgICAgICBydiArPSAnXFxuJyArIGVycnBmeCArIGxlYWQgKyBtYXJrO1xuXG4gICAgICAgICAgaWYgKGxpbmUudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG5vbmVtcHR5X2xpbmVfaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydiA9IHJ2LnJlcGxhY2UoL1xcdC9nLCAnICcpO1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9KTtcblxuICAgICAgLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBwcmludCBhbiBvdmVybHkgbGFyZ2UgYW1vdW50IG9mIGVycm9yIGFyZWE6IGxpbWl0IGl0IFxuICAgICAgLy8gdG8gdGhlIHRvcCBhbmQgYm90dG9tIGxpbmUgY291bnQ6XG4gICAgICBpZiAobm9uZW1wdHlfbGluZV9pbmRleGVzLmxlbmd0aCA+IDIgKiBNSU5JTVVNX1ZJU0lCTEVfTk9ORU1QVFlfTElORV9DT1VOVCkge1xuICAgICAgICB2YXIgY2xpcF9zdGFydCA9IG5vbmVtcHR5X2xpbmVfaW5kZXhlc1tNSU5JTVVNX1ZJU0lCTEVfTk9ORU1QVFlfTElORV9DT1VOVCAtIDFdICsgMTtcbiAgICAgICAgdmFyIGNsaXBfZW5kID0gbm9uZW1wdHlfbGluZV9pbmRleGVzW25vbmVtcHR5X2xpbmVfaW5kZXhlcy5sZW5ndGggLSBNSU5JTVVNX1ZJU0lCTEVfTk9ORU1QVFlfTElORV9DT1VOVF0gLSAxO1xuICAgICAgICB2YXIgaW50ZXJtZWRpYXRlX2xpbmUgPSBuZXcgQXJyYXkobGluZW5vX2Rpc3BsYXlfd2lkdGggKyAxKS5qb2luKCcgJykgKyAnICAoLi4uY29udGludWVkLi4uKSc7XG4gICAgICAgIGludGVybWVkaWF0ZV9saW5lICs9ICdcXG4nICsgbmV3IEFycmF5KGxpbmVub19kaXNwbGF5X3dpZHRoICsgMSkuam9pbignLScpICsgJyAgKC0tLS0tLS0tLS0tLS0tLSknO1xuICAgICAgICBydi5zcGxpY2UoY2xpcF9zdGFydCwgY2xpcF9lbmQgLSBjbGlwX3N0YXJ0ICsgMSwgaW50ZXJtZWRpYXRlX2xpbmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcnYuam9pbignXFxuJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhlbHBlciBmdW5jdGlvbiwgdXNlZCB0byBwcm9kdWNlIGEgaHVtYW4gcmVhZGFibGUgZGVzY3JpcHRpb24gYXMgYSBzdHJpbmcsIGdpdmVuXG4gICAgICogdGhlIGlucHV0IGB5eWxsb2NgIGxvY2F0aW9uIG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBTZXQgYGRpc3BsYXlfcmFuZ2VfdG9vYCB0byBUUlVFIHRvIGluY2x1ZGUgdGhlIHN0cmluZyBjaGFyYWN0ZXIgaW5kZXggcG9zaXRpb24ocylcbiAgICAgKiBpbiB0aGUgZGVzY3JpcHRpb24gaWYgdGhlIGB5eWxsb2MucmFuZ2VgIGlzIGF2YWlsYWJsZS5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGRlc2NyaWJlWVlMTE9DOiBmdW5jdGlvbiBsZXhlcl9kZXNjcmliZV95eWxsb2MoeXlsbG9jLCBkaXNwbGF5X3JhbmdlX3Rvbykge1xuICAgICAgdmFyIGwxID0geXlsbG9jLmZpcnN0X2xpbmU7XG4gICAgICB2YXIgbDIgPSB5eWxsb2MubGFzdF9saW5lO1xuICAgICAgdmFyIGMxID0geXlsbG9jLmZpcnN0X2NvbHVtbjtcbiAgICAgIHZhciBjMiA9IHl5bGxvYy5sYXN0X2NvbHVtbjtcbiAgICAgIHZhciBkbCA9IGwyIC0gbDE7XG4gICAgICB2YXIgZGMgPSBjMiAtIGMxO1xuICAgICAgdmFyIHJ2O1xuXG4gICAgICBpZiAoZGwgPT09IDApIHtcbiAgICAgICAgcnYgPSAnbGluZSAnICsgbDEgKyAnLCAnO1xuXG4gICAgICAgIGlmIChkYyA8PSAxKSB7XG4gICAgICAgICAgcnYgKz0gJ2NvbHVtbiAnICsgYzE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcnYgKz0gJ2NvbHVtbnMgJyArIGMxICsgJyAuLiAnICsgYzI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJ2ID0gJ2xpbmVzICcgKyBsMSArICcoY29sdW1uICcgKyBjMSArICcpIC4uICcgKyBsMiArICcoY29sdW1uICcgKyBjMiArICcpJztcbiAgICAgIH1cblxuICAgICAgaWYgKHl5bGxvYy5yYW5nZSAmJiBkaXNwbGF5X3JhbmdlX3Rvbykge1xuICAgICAgICB2YXIgcjEgPSB5eWxsb2MucmFuZ2VbMF07XG4gICAgICAgIHZhciByMiA9IHl5bGxvYy5yYW5nZVsxXSAtIDE7XG5cbiAgICAgICAgaWYgKHIyIDw9IHIxKSB7XG4gICAgICAgICAgcnYgKz0gJyB7U3RyaW5nIE9mZnNldDogJyArIHIxICsgJ30nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ2ICs9ICcge1N0cmluZyBPZmZzZXQgcmFuZ2U6ICcgKyByMSArICcgLi4gJyArIHIyICsgJ30nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBydjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGVzdCB0aGUgbGV4ZWQgdG9rZW46IHJldHVybiBGQUxTRSB3aGVuIG5vdCBhIG1hdGNoLCBvdGhlcndpc2UgcmV0dXJuIHRva2VuLlxuICAgICAqIFxuICAgICAqIGBtYXRjaGAgaXMgc3VwcG9zZWQgdG8gYmUgYW4gYXJyYXkgY29taW5nIG91dCBvZiBhIHJlZ2V4IG1hdGNoLCBpLmUuIGBtYXRjaFswXWBcbiAgICAgKiBjb250YWlucyB0aGUgYWN0dWFsbHkgbWF0Y2hlZCB0ZXh0IHN0cmluZy5cbiAgICAgKiBcbiAgICAgKiBBbHNvIG1vdmUgdGhlIGlucHV0IGN1cnNvciBmb3J3YXJkIGFuZCB1cGRhdGUgdGhlIG1hdGNoIGNvbGxlY3RvcnM6XG4gICAgICogXG4gICAgICogLSBgeXl0ZXh0YFxuICAgICAqIC0gYHl5bGVuZ2BcbiAgICAgKiAtIGBtYXRjaGBcbiAgICAgKiAtIGBtYXRjaGVzYFxuICAgICAqIC0gYHl5bGxvY2BcbiAgICAgKiAtIGBvZmZzZXRgXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICB0ZXN0X21hdGNoOiBmdW5jdGlvbiBsZXhlcl90ZXN0X21hdGNoKG1hdGNoLCBpbmRleGVkX3J1bGUpIHtcbiAgICAgIHZhciB0b2tlbiwgbGluZXMsIGJhY2t1cCwgbWF0Y2hfc3RyLCBtYXRjaF9zdHJfbGVuO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJhY2t0cmFja19sZXhlcikge1xuICAgICAgICAvLyBzYXZlIGNvbnRleHRcbiAgICAgICAgYmFja3VwID0ge1xuICAgICAgICAgIHl5bGluZW5vOiB0aGlzLnl5bGluZW5vLFxuXG4gICAgICAgICAgeXlsbG9jOiB7XG4gICAgICAgICAgICBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5maXJzdF9saW5lLFxuICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgIGxhc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgIHJhbmdlOiB0aGlzLnl5bGxvYy5yYW5nZS5zbGljZSgwKVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICB5eXRleHQ6IHRoaXMueXl0ZXh0LFxuICAgICAgICAgIG1hdGNoOiB0aGlzLm1hdGNoLFxuICAgICAgICAgIG1hdGNoZXM6IHRoaXMubWF0Y2hlcyxcbiAgICAgICAgICBtYXRjaGVkOiB0aGlzLm1hdGNoZWQsXG4gICAgICAgICAgeXlsZW5nOiB0aGlzLnl5bGVuZyxcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgIF9tb3JlOiB0aGlzLl9tb3JlLFxuICAgICAgICAgIF9pbnB1dDogdGhpcy5faW5wdXQsXG5cbiAgICAgICAgICAvL19zaWduYWxlZF9lcnJvcl90b2tlbjogdGhpcy5fc2lnbmFsZWRfZXJyb3JfdG9rZW4sXG4gICAgICAgICAgeXk6IHRoaXMueXksXG5cbiAgICAgICAgICBjb25kaXRpb25TdGFjazogdGhpcy5jb25kaXRpb25TdGFjay5zbGljZSgwKSxcbiAgICAgICAgICBkb25lOiB0aGlzLmRvbmVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbWF0Y2hfc3RyID0gbWF0Y2hbMF07XG4gICAgICBtYXRjaF9zdHJfbGVuID0gbWF0Y2hfc3RyLmxlbmd0aDtcblxuICAgICAgLy8gaWYgKG1hdGNoX3N0ci5pbmRleE9mKCdcXG4nKSAhPT0gLTEgfHwgbWF0Y2hfc3RyLmluZGV4T2YoJ1xccicpICE9PSAtMSkge1xuICAgICAgbGluZXMgPSBtYXRjaF9zdHIuc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUgPSB0aGlzLnl5bGluZW5vICsgMTtcbiAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArPSBtYXRjaF9zdHJfbGVuO1xuICAgICAgfVxuXG4gICAgICAvLyB9XG4gICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaF9zdHI7XG5cbiAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hfc3RyO1xuICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoX3N0cjtcbiAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSArPSBtYXRjaF9zdHJfbGVuO1xuXG4gICAgICAvLyBwcmV2aW91cyBsZXggcnVsZXMgTUFZIGhhdmUgaW52b2tlZCB0aGUgYG1vcmUoKWAgQVBJIHJhdGhlciB0aGFuIHByb2R1Y2luZyBhIHRva2VuOlxuICAgICAgLy8gdGhvc2UgcnVsZXMgd2lsbCBhbHJlYWR5IGhhdmUgbW92ZWQgdGhpcyBgb2Zmc2V0YCBmb3J3YXJkIG1hdGNoaW5nIHRoZWlyIG1hdGNoIGxlbmd0aHMsXG4gICAgICAvLyBoZW5jZSB3ZSBtdXN0IG9ubHkgYWRkIG91ciBvd24gbWF0Y2ggbGVuZ3RoIG5vdzpcbiAgICAgIHRoaXMub2Zmc2V0ICs9IG1hdGNoX3N0cl9sZW47XG5cbiAgICAgIHRoaXMuX21vcmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2JhY2t0cmFjayA9IGZhbHNlO1xuICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaF9zdHJfbGVuKTtcblxuICAgICAgLy8gY2FsbGluZyB0aGlzIG1ldGhvZDpcbiAgICAgIC8vXG4gICAgICAvLyAgIGZ1bmN0aW9uIGxleGVyX19wZXJmb3JtQWN0aW9uKHl5LCB5eXJ1bGVudW1iZXIsIFlZX1NUQVJUKSB7Li4ufVxuICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy55eSxcbiAgICAgICAgaW5kZXhlZF9ydWxlLFxuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0gLyogPSBZWV9TVEFSVCAqL1xuICAgICAgKTtcblxuICAgICAgLy8gb3RoZXJ3aXNlLCB3aGVuIHRoZSBhY3Rpb24gY29kZXMgYXJlIGFsbCBzaW1wbGUgcmV0dXJuIHRva2VuIHN0YXRlbWVudHM6XG4gICAgICAvL3Rva2VuID0gdGhpcy5zaW1wbGVDYXNlQWN0aW9uQ2x1c3RlcnNbaW5kZXhlZF9ydWxlXTtcblxuICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkge1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYmFja3RyYWNrKSB7XG4gICAgICAgIC8vIHJlY292ZXIgY29udGV4dFxuICAgICAgICBmb3IgKHZhciBrIGluIGJhY2t1cCkge1xuICAgICAgICAgIHRoaXNba10gPSBiYWNrdXBba107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9fY3VycmVudFJ1bGVTZXRfXyA9IG51bGw7XG4gICAgICAgIHJldHVybiBmYWxzZTsgIC8vIHJ1bGUgYWN0aW9uIGNhbGxlZCByZWplY3QoKSBpbXBseWluZyB0aGUgbmV4dCBydWxlIHNob3VsZCBiZSB0ZXN0ZWQgaW5zdGVhZC4gXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3NpZ25hbGVkX2Vycm9yX3Rva2VuKSB7XG4gICAgICAgIC8vIHByb2R1Y2Ugb25lICdlcnJvcicgdG9rZW4gYXMgYC5wYXJzZUVycm9yKClgIGluIGByZWplY3QoKWBcbiAgICAgICAgLy8gZGlkIG5vdCBndWFyYW50ZWUgYSBmYWlsdXJlIHNpZ25hbCBieSB0aHJvd2luZyBhbiBleGNlcHRpb24hXG4gICAgICAgIHRva2VuID0gdGhpcy5fc2lnbmFsZWRfZXJyb3JfdG9rZW47XG5cbiAgICAgICAgdGhpcy5fc2lnbmFsZWRfZXJyb3JfdG9rZW4gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBuZXh0IG1hdGNoIGluIGlucHV0XG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBuZXh0OiBmdW5jdGlvbiBsZXhlcl9uZXh0KCkge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbnB1dCkge1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9rZW4sIG1hdGNoLCB0ZW1wTWF0Y2gsIGluZGV4O1xuXG4gICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3BlYyA9IHRoaXMuX19jdXJyZW50UnVsZVNldF9fO1xuXG4gICAgICBpZiAoIXNwZWMpIHtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBydWxlc2V0IGNhY2hlIGFzIHdlIGFwcGFyZW50bHkgZW5jb3VudGVyZWQgYSBzdGF0ZSBjaGFuZ2Ugb3IganVzdCBzdGFydGVkIGxleGluZy5cbiAgICAgICAgLy8gVGhlIGNhY2hlIGlzIHNldCB1cCBmb3IgZmFzdCBsb29rdXAgLS0gd2UgYXNzdW1lIGEgbGV4ZXIgd2lsbCBzd2l0Y2ggc3RhdGVzIG11Y2ggbGVzcyBvZnRlbiB0aGFuIGl0IHdpbGxcbiAgICAgICAgLy8gaW52b2tlIHRoZSBgbGV4KClgIHRva2VuLXByb2R1Y2luZyBBUEkgYW5kIHJlbGF0ZWQgQVBJcywgaGVuY2UgY2FjaGluZyB0aGUgc2V0IGZvciBkaXJlY3QgYWNjZXNzIGhlbHBzXG4gICAgICAgIC8vIHNwZWVkIHVwIHRob3NlIGFjdGl2aXRpZXMgYSB0aW55IGJpdC5cbiAgICAgICAgc3BlYyA9IHRoaXMuX19jdXJyZW50UnVsZVNldF9fID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciBhICpzYW5lKiBjb25kaXRpb24gaGFzIGJlZW4gcHVzaGVkIGJlZm9yZTogdGhpcyBtYWtlcyB0aGUgbGV4ZXIgcm9idXN0IGFnYWluc3RcbiAgICAgICAgLy8gdXNlci1wcm9ncmFtbWVyIGJ1Z3Mgc3VjaCBhcyBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24tbGV4L2lzc3Vlcy8xOVxuICAgICAgICBpZiAoIXNwZWMgfHwgIXNwZWMucnVsZXMpIHtcbiAgICAgICAgICB2YXIgbGluZW5vX21zZyA9ICcnO1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBsaW5lbm9fbXNnID0gJyBvbiBsaW5lICcgKyAodGhpcy55eWxpbmVubyArIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwID0gdGhpcy5jb25zdHJ1Y3RMZXhFcnJvckluZm8oXG4gICAgICAgICAgICAnSW50ZXJuYWwgbGV4ZXIgZW5naW5lIGVycm9yJyArIGxpbmVub19tc2cgKyAnOiBUaGUgbGV4IGdyYW1tYXIgcHJvZ3JhbW1lciBwdXNoZWQgYSBub24tZXhpc3RpbmcgY29uZGl0aW9uIG5hbWUgXCInICsgdGhpcy50b3BTdGF0ZSgpICsgJ1wiOyB0aGlzIGlzIGEgZmF0YWwgZXJyb3IgYW5kIHNob3VsZCBiZSByZXBvcnRlZCB0byB0aGUgYXBwbGljYXRpb24gcHJvZ3JhbW1lciB0ZWFtIScsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBwcm9kdWNlIG9uZSAnZXJyb3InIHRva2VuIHVudGlsIHRoaXMgc2l0dWF0aW9uIGhhcyBiZWVuIHJlc29sdmVkLCBtb3N0IHByb2JhYmx5IGJ5IHBhcnNlIHRlcm1pbmF0aW9uIVxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25MZXhlckVycm9yKSB8fCB0aGlzLkVSUk9SO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBydWxlX2lkcyA9IHNwZWMucnVsZXM7XG4gICAgICB2YXIgcmVnZXhlcyA9IHNwZWMuX19ydWxlX3JlZ2V4ZXM7XG4gICAgICB2YXIgbGVuID0gc3BlYy5fX3J1bGVfY291bnQ7XG5cbiAgICAgIC8vIE5vdGU6IHRoZSBhcnJheXMgYXJlIDEtYmFzZWQsIHdoaWxlIGBsZW5gIGl0c2VsZiBpcyBhIHZhbGlkIGluZGV4LFxuICAgICAgLy8gaGVuY2UgdGhlIG5vbi1zdGFuZGFyZCBsZXNzLW9yLWVxdWFsIGNoZWNrIGluIHRoZSBuZXh0IGxvb3AgY29uZGl0aW9uIVxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbGVuOyBpKyspIHtcbiAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2gocmVnZXhlc1tpXSk7XG5cbiAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7XG4gICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XG4gICAgICAgICAgaW5kZXggPSBpO1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKHRlbXBNYXRjaCwgcnVsZV9pZHNbaV0pO1xuXG4gICAgICAgICAgICBpZiAodG9rZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYmFja3RyYWNrKSB7XG4gICAgICAgICAgICAgIG1hdGNoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjb250aW51ZTsgIC8vIHJ1bGUgYWN0aW9uIGNhbGxlZCByZWplY3QoKSBpbXBseWluZyBhIHJ1bGUgTUlTbWF0Y2guIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gZWxzZTogdGhpcyBpcyBhIGxleGVyIHJ1bGUgd2hpY2ggY29uc3VtZXMgaW5wdXQgd2l0aG91dCBwcm9kdWNpbmcgYSB0b2tlbiAoZS5nLiB3aGl0ZXNwYWNlKVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdG9rZW4gPSB0aGlzLnRlc3RfbWF0Y2gobWF0Y2gsIHJ1bGVfaWRzW2luZGV4XSk7XG5cbiAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVsc2U6IHRoaXMgaXMgYSBsZXhlciBydWxlIHdoaWNoIGNvbnN1bWVzIGlucHV0IHdpdGhvdXQgcHJvZHVjaW5nIGEgdG9rZW4gKGUuZy4gd2hpdGVzcGFjZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lucHV0KSB7XG4gICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxpbmVub19tc2cgPSAnJztcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgICBsaW5lbm9fbXNnID0gJyBvbiBsaW5lICcgKyAodGhpcy55eWxpbmVubyArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHAgPSB0aGlzLmNvbnN0cnVjdExleEVycm9ySW5mbyhcbiAgICAgICAgICAnTGV4aWNhbCBlcnJvcicgKyBsaW5lbm9fbXNnICsgJzogVW5yZWNvZ25pemVkIHRleHQuJyxcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubGV4ZXJFcnJvcnNBcmVSZWNvdmVyYWJsZVxuICAgICAgICApO1xuXG4gICAgICAgIHZhciBwZW5kaW5nSW5wdXQgPSB0aGlzLl9pbnB1dDtcbiAgICAgICAgdmFyIGFjdGl2ZUNvbmRpdGlvbiA9IHRoaXMudG9wU3RhdGUoKTtcbiAgICAgICAgdmFyIGNvbmRpdGlvblN0YWNrRGVwdGggPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aDtcbiAgICAgICAgdG9rZW4gPSB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25MZXhlckVycm9yKSB8fCB0aGlzLkVSUk9SO1xuXG4gICAgICAgIGlmICh0b2tlbiA9PT0gdGhpcy5FUlJPUikge1xuICAgICAgICAgIC8vIHdlIGNhbiB0cnkgdG8gcmVjb3ZlciBmcm9tIGEgbGV4ZXIgZXJyb3IgdGhhdCBgcGFyc2VFcnJvcigpYCBkaWQgbm90ICdyZWNvdmVyJyBmb3IgdXNcbiAgICAgICAgICAvLyBieSBtb3ZpbmcgZm9yd2FyZCBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZSBJRkYgdGhlICh1c2VyLXNwZWNpZmllZD8pIGBwYXJzZUVycm9yKClgXG4gICAgICAgICAgLy8gaGFzIG5vdCBjb25zdW1lZC9tb2RpZmllZCBhbnkgcGVuZGluZyBpbnB1dCBvciBjaGFuZ2VkIHN0YXRlIGluIHRoZSBlcnJvciBoYW5kbGVyOlxuICAgICAgICAgIGlmICghdGhpcy5tYXRjaGVzICYmIC8vIGFuZCBtYWtlIHN1cmUgdGhlIGlucHV0IGhhcyBiZWVuIG1vZGlmaWVkL2NvbnN1bWVkIC4uLlxuICAgICAgICAgIHBlbmRpbmdJbnB1dCA9PT0gdGhpcy5faW5wdXQgJiYgLy8gLi4ub3IgdGhlIGxleGVyIHN0YXRlIGhhcyBiZWVuIG1vZGlmaWVkIHNpZ25pZmljYW50bHkgZW5vdWdoXG4gICAgICAgICAgLy8gdG8gbWVyaXQgYSBub24tY29uc3VtaW5nIGVycm9yIGhhbmRsaW5nIGFjdGlvbiByaWdodCBub3cuXG4gICAgICAgICAgYWN0aXZlQ29uZGl0aW9uID09PSB0aGlzLnRvcFN0YXRlKCkgJiYgY29uZGl0aW9uU3RhY2tEZXB0aCA9PT0gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBuZXh0IG1hdGNoIHRoYXQgaGFzIGEgdG9rZW5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGxleDogZnVuY3Rpb24gbGV4ZXJfbGV4KCkge1xuICAgICAgdmFyIHI7XG5cbiAgICAgIC8vIGFsbG93IHRoZSBQUkUvUE9TVCBoYW5kbGVycyBzZXQvbW9kaWZ5IHRoZSByZXR1cm4gdG9rZW4gZm9yIG1heGltdW0gZmxleGliaWxpdHkgb2YgdGhlIGdlbmVyYXRlZCBsZXhlcjpcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmVfbGV4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHIgPSB0aGlzLnByZV9sZXguY2FsbCh0aGlzLCAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMucHJlX2xleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAoYWxzbyBhY2NvdW50IGZvciBhIHVzZXJkZWYgZnVuY3Rpb24gd2hpY2ggZG9lcyBub3QgcmV0dXJuIGFueSB2YWx1ZToga2VlcCB0aGUgdG9rZW4gYXMgaXMpXG4gICAgICAgIHIgPSB0aGlzLm9wdGlvbnMucHJlX2xleC5jYWxsKHRoaXMsIHIpIHx8IHI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnl5ICYmIHR5cGVvZiB0aGlzLnl5LnByZV9sZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gKGFsc28gYWNjb3VudCBmb3IgYSB1c2VyZGVmIGZ1bmN0aW9uIHdoaWNoIGRvZXMgbm90IHJldHVybiBhbnkgdmFsdWU6IGtlZXAgdGhlIHRva2VuIGFzIGlzKVxuICAgICAgICByID0gdGhpcy55eS5wcmVfbGV4LmNhbGwodGhpcywgcikgfHwgcjtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCFyKSB7XG4gICAgICAgIHIgPSB0aGlzLm5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMueXkgJiYgdHlwZW9mIHRoaXMueXkucG9zdF9sZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gKGFsc28gYWNjb3VudCBmb3IgYSB1c2VyZGVmIGZ1bmN0aW9uIHdoaWNoIGRvZXMgbm90IHJldHVybiBhbnkgdmFsdWU6IGtlZXAgdGhlIHRva2VuIGFzIGlzKVxuICAgICAgICByID0gdGhpcy55eS5wb3N0X2xleC5jYWxsKHRoaXMsIHIpIHx8IHI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnBvc3RfbGV4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIChhbHNvIGFjY291bnQgZm9yIGEgdXNlcmRlZiBmdW5jdGlvbiB3aGljaCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlOiBrZWVwIHRoZSB0b2tlbiBhcyBpcylcbiAgICAgICAgciA9IHRoaXMub3B0aW9ucy5wb3N0X2xleC5jYWxsKHRoaXMsIHIpIHx8IHI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wb3N0X2xleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAoYWxzbyBhY2NvdW50IGZvciBhIHVzZXJkZWYgZnVuY3Rpb24gd2hpY2ggZG9lcyBub3QgcmV0dXJuIGFueSB2YWx1ZToga2VlcCB0aGUgdG9rZW4gYXMgaXMpXG4gICAgICAgIHIgPSB0aGlzLnBvc3RfbGV4LmNhbGwodGhpcywgcikgfHwgcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBuZXh0IG1hdGNoIHRoYXQgaGFzIGEgdG9rZW4uIElkZW50aWNhbCB0byB0aGUgYGxleCgpYCBBUEkgYnV0IGRvZXMgbm90IGludm9rZSBhbnkgb2YgdGhlIFxuICAgICAqIGBwcmVfbGV4KClgIG5vciBhbnkgb2YgdGhlIGBwb3N0X2xleCgpYCBjYWxsYmFja3MuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBmYXN0TGV4OiBmdW5jdGlvbiBsZXhlcl9mYXN0TGV4KCkge1xuICAgICAgdmFyIHI7XG5cbiAgICAgIHdoaWxlICghcikge1xuICAgICAgICByID0gdGhpcy5uZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gaW5mbyBhYm91dCB0aGUgbGV4ZXIgc3RhdGUgdGhhdCBjYW4gaGVscCBhIHBhcnNlciBvciBvdGhlciBsZXhlciBBUEkgdXNlciB0byB1c2UgdGhlXG4gICAgICogbW9zdCBlZmZpY2llbnQgbWVhbnMgYXZhaWxhYmxlLiBUaGlzIEFQSSBpcyBwcm92aWRlZCB0byBhaWQgcnVuLXRpbWUgcGVyZm9ybWFuY2UgZm9yIGxhcmdlclxuICAgICAqIHN5c3RlbXMgd2hpY2ggZW1wbG95IHRoaXMgbGV4ZXIuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBjYW5JVXNlOiBmdW5jdGlvbiBsZXhlcl9jYW5JVXNlKCkge1xuICAgICAgdmFyIHJ2ID0ge1xuICAgICAgICBmYXN0TGV4OiAhKHR5cGVvZiB0aGlzLnByZV9sZXggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHRoaXMub3B0aW9ucy5wcmVfbGV4ID09PSAnZnVuY3Rpb24nIHx8IHRoaXMueXkgJiYgdHlwZW9mIHRoaXMueXkucHJlX2xleCA9PT0gJ2Z1bmN0aW9uJyB8fCB0aGlzLnl5ICYmIHR5cGVvZiB0aGlzLnl5LnBvc3RfbGV4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLm9wdGlvbnMucG9zdF9sZXggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHRoaXMucG9zdF9sZXggPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiB0aGlzLmZhc3RMZXggPT09ICdmdW5jdGlvbidcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBydjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmFja3dhcmRzIGNvbXBhdGlibGUgYWxpYXMgZm9yIGBwdXNoU3RhdGUoKWA7XG4gICAgICogdGhlIGxhdHRlciBpcyBzeW1tZXRyaWNhbCB3aXRoIGBwb3BTdGF0ZSgpYCBhbmQgd2UgYWR2aXNlIHRvIHVzZVxuICAgICAqIHRob3NlIEFQSXMgaW4gYW55IG1vZGVybiBsZXhlciBjb2RlLCByYXRoZXIgdGhhbiBgYmVnaW4oKWAuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBiZWdpbjogZnVuY3Rpb24gbGV4ZXJfYmVnaW4oY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoU3RhdGUoY29uZGl0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWN0aXZhdGVzIGEgbmV3IGxleGVyIGNvbmRpdGlvbiBzdGF0ZSAocHVzaGVzIHRoZSBuZXcgbGV4ZXJcbiAgICAgKiBjb25kaXRpb24gc3RhdGUgb250byB0aGUgY29uZGl0aW9uIHN0YWNrKVxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgcHVzaFN0YXRlOiBmdW5jdGlvbiBsZXhlcl9wdXNoU3RhdGUoY29uZGl0aW9uKSB7XG4gICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICAgIHRoaXMuX19jdXJyZW50UnVsZVNldF9fID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwb3AgdGhlIHByZXZpb3VzbHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZSBvZmYgdGhlIGNvbmRpdGlvblxuICAgICAqIHN0YWNrXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBwb3BTdGF0ZTogZnVuY3Rpb24gbGV4ZXJfcG9wU3RhdGUoKSB7XG4gICAgICB2YXIgbiA9IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgIHRoaXMuX19jdXJyZW50UnVsZVNldF9fID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1swXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBjdXJyZW50bHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZTsgd2hlbiBhbiBpbmRleFxuICAgICAqIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGl0IHByb2R1Y2VzIHRoZSBOLXRoIHByZXZpb3VzIGNvbmRpdGlvbiBzdGF0ZSxcbiAgICAgKiBpZiBhdmFpbGFibGVcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHRvcFN0YXRlOiBmdW5jdGlvbiBsZXhlcl90b3BTdGF0ZShuKSB7XG4gICAgICBuID0gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxIC0gTWF0aC5hYnMobiB8fCAwKTtcblxuICAgICAgaWYgKG4gPj0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1tuXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnSU5JVElBTCc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIChpbnRlcm5hbCkgZGV0ZXJtaW5lIHRoZSBsZXhlciBydWxlIHNldCB3aGljaCBpcyBhY3RpdmUgZm9yIHRoZVxuICAgICAqIGN1cnJlbnRseSBhY3RpdmUgbGV4ZXIgY29uZGl0aW9uIHN0YXRlXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBfY3VycmVudFJ1bGVzOiBmdW5jdGlvbiBsZXhlcl9fY3VycmVudFJ1bGVzKCkge1xuICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoICYmIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zWydJTklUSUFMJ107XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgbnVtYmVyIG9mIHN0YXRlcyBjdXJyZW50bHkgb24gdGhlIHN0YWNrXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBzdGF0ZVN0YWNrU2l6ZTogZnVuY3Rpb24gbGV4ZXJfc3RhdGVTdGFja1NpemUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGg7XG4gICAgfSxcblxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHRyYWNrUG9zaXRpb246IHRydWVcbiAgICB9LFxuXG4gICAgSmlzb25MZXhlckVycm9yOiBKaXNvbkxleGVyRXJyb3IsXG5cbiAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBsZXhlcl9fcGVyZm9ybUFjdGlvbih5eSwgeXlydWxlbnVtYmVyLCBZWV9TVEFSVCkge1xuICAgICAgdmFyIHl5XyA9IHRoaXM7XG4gICAgICB2YXIgWVlTVEFURSA9IFlZX1NUQVJUO1xuXG4gICAgICBzd2l0Y2ggKHl5cnVsZW51bWJlcikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgICAgLyohIFJ1bGU6OiAgICAgICBcXHMrICovXG4gICAgICAgIC8qIHNraXAgd2hpdGVzcGFjZSAqL1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuc2ltcGxlQ2FzZUFjdGlvbkNsdXN0ZXJzW3l5cnVsZW51bWJlcl07XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNpbXBsZUNhc2VBY3Rpb25DbHVzdGVyczoge1xuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgICgtLVswLTlhLXotQS1aLV0qKSAqL1xuICAgICAgMDogMTMsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXCogKi9cbiAgICAgIDI6IDUsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXC8gKi9cbiAgICAgIDM6IDYsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXCsgKi9cbiAgICAgIDQ6IDMsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAtICovXG4gICAgICA1OiA0LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcHhcXGIgKi9cbiAgICAgIDY6IDE1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspY21cXGIgKi9cbiAgICAgIDc6IDE1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspbW1cXGIgKi9cbiAgICAgIDg6IDE1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspaW5cXGIgKi9cbiAgICAgIDk6IDE1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcHRcXGIgKi9cbiAgICAgIDEwOiAxNSxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKXBjXFxiICovXG4gICAgICAxMTogMTUsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylkZWdcXGIgKi9cbiAgICAgIDEyOiAxNixcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWdyYWRcXGIgKi9cbiAgICAgIDEzOiAxNixcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKXJhZFxcYiAqL1xuICAgICAgMTQ6IDE2LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspdHVyblxcYiAqL1xuICAgICAgMTU6IDE2LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspc1xcYiAqL1xuICAgICAgMTY6IDE3LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspbXNcXGIgKi9cbiAgICAgIDE3OiAxNyxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKUh6XFxiICovXG4gICAgICAxODogMTgsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylrSHpcXGIgKi9cbiAgICAgIDE5OiAxOCxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWRwaVxcYiAqL1xuICAgICAgMjA6IDE5LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZHBjbVxcYiAqL1xuICAgICAgMjE6IDE5LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZHBweFxcYiAqL1xuICAgICAgMjI6IDE5LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZW1cXGIgKi9cbiAgICAgIDIzOiAyMCxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWV4XFxiICovXG4gICAgICAyNDogMjEsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyljaFxcYiAqL1xuICAgICAgMjU6IDIyLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcmVtXFxiICovXG4gICAgICAyNjogMjMsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyl2d1xcYiAqL1xuICAgICAgMjc6IDI1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspdmhcXGIgKi9cbiAgICAgIDI4OiAyNCxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKXZtaW5cXGIgKi9cbiAgICAgIDI5OiAyNixcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKXZtYXhcXGIgKi9cbiAgICAgIDMwOiAyNyxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKSUgKi9cbiAgICAgIDMxOiAyOCxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKVxcYiAqL1xuICAgICAgMzI6IDExLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKGNhbGMpICovXG4gICAgICAzMzogOSxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgICh2YXIpICovXG4gICAgICAzNDogMTIsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoW2Etel0rKSAqL1xuICAgICAgMzU6IDEwLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgXFwoICovXG4gICAgICAzNjogNyxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIFxcKSAqL1xuICAgICAgMzc6IDgsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAsICovXG4gICAgICAzODogMTQsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAkICovXG4gICAgICAzOTogMVxuICAgIH0sXG5cbiAgICBydWxlczogW1xuICAgICAgLyogIDA6ICovICAvXig/OigtLVtcXGRcXC1BLVphLXpdKikpLyxcbiAgICAgIC8qICAxOiAqLyAgL14oPzpcXHMrKS8sXG4gICAgICAvKiAgMjogKi8gIC9eKD86XFwqKS8sXG4gICAgICAvKiAgMzogKi8gIC9eKD86XFwvKS8sXG4gICAgICAvKiAgNDogKi8gIC9eKD86XFwrKS8sXG4gICAgICAvKiAgNTogKi8gIC9eKD86LSkvLFxuICAgICAgLyogIDY6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXB4XFxiKS8sXG4gICAgICAvKiAgNzogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspY21cXGIpLyxcbiAgICAgIC8qICA4OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyltbVxcYikvLFxuICAgICAgLyogIDk6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWluXFxiKS8sXG4gICAgICAvKiAxMDogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspcHRcXGIpLyxcbiAgICAgIC8qIDExOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylwY1xcYikvLFxuICAgICAgLyogMTI6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWRlZ1xcYikvLFxuICAgICAgLyogMTM6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWdyYWRcXGIpLyxcbiAgICAgIC8qIDE0OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylyYWRcXGIpLyxcbiAgICAgIC8qIDE1OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyl0dXJuXFxiKS8sXG4gICAgICAvKiAxNjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspc1xcYikvLFxuICAgICAgLyogMTc6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKW1zXFxiKS8sXG4gICAgICAvKiAxODogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspSHpcXGIpLyxcbiAgICAgIC8qIDE5OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylrSHpcXGIpLyxcbiAgICAgIC8qIDIwOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylkcGlcXGIpLyxcbiAgICAgIC8qIDIxOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylkcGNtXFxiKS8sXG4gICAgICAvKiAyMjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspZHBweFxcYikvLFxuICAgICAgLyogMjM6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWVtXFxiKS8sXG4gICAgICAvKiAyNDogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspZXhcXGIpLyxcbiAgICAgIC8qIDI1OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyljaFxcYikvLFxuICAgICAgLyogMjY6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXJlbVxcYikvLFxuICAgICAgLyogMjc6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXZ3XFxiKS8sXG4gICAgICAvKiAyODogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspdmhcXGIpLyxcbiAgICAgIC8qIDI5OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyl2bWluXFxiKS8sXG4gICAgICAvKiAzMDogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspdm1heFxcYikvLFxuICAgICAgLyogMzE6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKSUpLyxcbiAgICAgIC8qIDMyOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylcXGIpLyxcbiAgICAgIC8qIDMzOiAqLyAgL14oPzooY2FsYykpLyxcbiAgICAgIC8qIDM0OiAqLyAgL14oPzoodmFyKSkvLFxuICAgICAgLyogMzU6ICovICAvXig/OihbYS16XSspKS8sXG4gICAgICAvKiAzNjogKi8gIC9eKD86XFwoKS8sXG4gICAgICAvKiAzNzogKi8gIC9eKD86XFwpKS8sXG4gICAgICAvKiAzODogKi8gIC9eKD86LCkvLFxuICAgICAgLyogMzk6ICovICAvXig/OiQpL1xuICAgIF0sXG5cbiAgICBjb25kaXRpb25zOiB7XG4gICAgICAnSU5JVElBTCc6IHtcbiAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMixcbiAgICAgICAgICAzLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgNSxcbiAgICAgICAgICA2LFxuICAgICAgICAgIDcsXG4gICAgICAgICAgOCxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDEwLFxuICAgICAgICAgIDExLFxuICAgICAgICAgIDEyLFxuICAgICAgICAgIDEzLFxuICAgICAgICAgIDE0LFxuICAgICAgICAgIDE1LFxuICAgICAgICAgIDE2LFxuICAgICAgICAgIDE3LFxuICAgICAgICAgIDE4LFxuICAgICAgICAgIDE5LFxuICAgICAgICAgIDIwLFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDIyLFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDI1LFxuICAgICAgICAgIDI2LFxuICAgICAgICAgIDI3LFxuICAgICAgICAgIDI4LFxuICAgICAgICAgIDI5LFxuICAgICAgICAgIDMwLFxuICAgICAgICAgIDMxLFxuICAgICAgICAgIDMyLFxuICAgICAgICAgIDMzLFxuICAgICAgICAgIDM0LFxuICAgICAgICAgIDM1LFxuICAgICAgICAgIDM2LFxuICAgICAgICAgIDM3LFxuICAgICAgICAgIDM4LFxuICAgICAgICAgIDM5XG4gICAgICAgIF0sXG5cbiAgICAgICAgaW5jbHVzaXZlOiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsZXhlcjtcbn0oKTtcbnBhcnNlci5sZXhlciA9IGxleGVyO1xuXG5cblxuZnVuY3Rpb24gUGFyc2VyKCkge1xuICB0aGlzLnl5ID0ge307XG59XG5QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO1xucGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcblxucmV0dXJuIG5ldyBQYXJzZXIoKTtcbn0pKCk7XG5cbiAgICAgICAgXG5cblxuaWYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG4gIGV4cG9ydHMuUGFyc2VyID0gcGFyc2VyLlBhcnNlcjtcbiAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlLmFwcGx5KHBhcnNlciwgYXJndW1lbnRzKTtcbiAgfTtcbiAgXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3NzVW5pdENvbnZlcnRlciA9IHJlcXVpcmUoJ2Nzcy11bml0LWNvbnZlcnRlcicpO1xuXG52YXIgX2Nzc1VuaXRDb252ZXJ0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3NzVW5pdENvbnZlcnRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNvbnZlcnROb2RlcyhsZWZ0LCByaWdodCwgcHJlY2lzaW9uKSB7XG4gIHN3aXRjaCAobGVmdC50eXBlKSB7XG4gICAgY2FzZSAnTGVuZ3RoVmFsdWUnOlxuICAgIGNhc2UgJ0FuZ2xlVmFsdWUnOlxuICAgIGNhc2UgJ1RpbWVWYWx1ZSc6XG4gICAgY2FzZSAnRnJlcXVlbmN5VmFsdWUnOlxuICAgIGNhc2UgJ1Jlc29sdXRpb25WYWx1ZSc6XG4gICAgICByZXR1cm4gY29udmVydEFic29sdXRlTGVuZ3RoKGxlZnQsIHJpZ2h0LCBwcmVjaXNpb24pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4geyBsZWZ0OiBsZWZ0LCByaWdodDogcmlnaHQgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0QWJzb2x1dGVMZW5ndGgobGVmdCwgcmlnaHQsIHByZWNpc2lvbikge1xuICBpZiAocmlnaHQudHlwZSA9PT0gbGVmdC50eXBlKSB7XG4gICAgcmlnaHQgPSB7XG4gICAgICB0eXBlOiBsZWZ0LnR5cGUsXG4gICAgICB2YWx1ZTogKDAsIF9jc3NVbml0Q29udmVydGVyMi5kZWZhdWx0KShyaWdodC52YWx1ZSwgcmlnaHQudW5pdCwgbGVmdC51bml0LCBwcmVjaXNpb24pLFxuICAgICAgdW5pdDogbGVmdC51bml0XG4gICAgfTtcbiAgfVxuICByZXR1cm4geyBsZWZ0OiBsZWZ0LCByaWdodDogcmlnaHQgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY29udmVydE5vZGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwidmFyIGNvbnZlcnNpb25zID0ge1xyXG4gICAgLy8gbGVuZ3RoXHJcbiAgICAncHgnOiB7XHJcbiAgICAgICAgJ3B4JzogMSxcclxuICAgICAgICAnY20nOiA5Ni4wLzIuNTQsXHJcbiAgICAgICAgJ21tJzogOTYuMC8yNS40LFxyXG4gICAgICAgICdpbic6IDk2LFxyXG4gICAgICAgICdwdCc6IDk2LjAvNzIuMCxcclxuICAgICAgICAncGMnOiAxNlxyXG4gICAgfSxcclxuICAgICdjbSc6IHtcclxuICAgICAgICAncHgnOiAyLjU0Lzk2LjAsXHJcbiAgICAgICAgJ2NtJzogMSxcclxuICAgICAgICAnbW0nOiAwLjEsXHJcbiAgICAgICAgJ2luJzogMi41NCxcclxuICAgICAgICAncHQnOiAyLjU0LzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMi41NC82LjBcclxuICAgIH0sXHJcbiAgICAnbW0nOiB7XHJcbiAgICAgICAgJ3B4JzogMjUuNC85Ni4wLFxyXG4gICAgICAgICdjbSc6IDEwLFxyXG4gICAgICAgICdtbSc6IDEsXHJcbiAgICAgICAgJ2luJzogMjUuNCxcclxuICAgICAgICAncHQnOiAyNS40LzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMjUuNC82LjBcclxuICAgIH0sXHJcbiAgICAnaW4nOiB7XHJcbiAgICAgICAgJ3B4JzogMS4wLzk2LjAsXHJcbiAgICAgICAgJ2NtJzogMS4wLzIuNTQsXHJcbiAgICAgICAgJ21tJzogMS4wLzI1LjQsXHJcbiAgICAgICAgJ2luJzogMSxcclxuICAgICAgICAncHQnOiAxLjAvNzIuMCxcclxuICAgICAgICAncGMnOiAxLjAvNi4wXHJcbiAgICB9LFxyXG4gICAgJ3B0Jzoge1xyXG4gICAgICAgICdweCc6IDAuNzUsXHJcbiAgICAgICAgJ2NtJzogNzIuMC8yLjU0LFxyXG4gICAgICAgICdtbSc6IDcyLjAvMjUuNCxcclxuICAgICAgICAnaW4nOiA3MixcclxuICAgICAgICAncHQnOiAxLFxyXG4gICAgICAgICdwYyc6IDEyXHJcbiAgICB9LFxyXG4gICAgJ3BjJzoge1xyXG4gICAgICAgICdweCc6IDYuMC85Ni4wLFxyXG4gICAgICAgICdjbSc6IDYuMC8yLjU0LFxyXG4gICAgICAgICdtbSc6IDYuMC8yNS40LFxyXG4gICAgICAgICdpbic6IDYsXHJcbiAgICAgICAgJ3B0JzogNi4wLzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMVxyXG4gICAgfSxcclxuICAgIC8vIGFuZ2xlXHJcbiAgICAnZGVnJzoge1xyXG4gICAgICAgICdkZWcnOiAxLFxyXG4gICAgICAgICdncmFkJzogMC45LFxyXG4gICAgICAgICdyYWQnOiAxODAvTWF0aC5QSSxcclxuICAgICAgICAndHVybic6IDM2MFxyXG4gICAgfSxcclxuICAgICdncmFkJzoge1xyXG4gICAgICAgICdkZWcnOiA0MDAvMzYwLFxyXG4gICAgICAgICdncmFkJzogMSxcclxuICAgICAgICAncmFkJzogMjAwL01hdGguUEksXHJcbiAgICAgICAgJ3R1cm4nOiA0MDBcclxuICAgIH0sXHJcbiAgICAncmFkJzoge1xyXG4gICAgICAgICdkZWcnOiBNYXRoLlBJLzE4MCxcclxuICAgICAgICAnZ3JhZCc6IE1hdGguUEkvMjAwLFxyXG4gICAgICAgICdyYWQnOiAxLFxyXG4gICAgICAgICd0dXJuJzogTWF0aC5QSSoyXHJcbiAgICB9LFxyXG4gICAgJ3R1cm4nOiB7XHJcbiAgICAgICAgJ2RlZyc6IDEvMzYwLFxyXG4gICAgICAgICdncmFkJzogMS80MDAsXHJcbiAgICAgICAgJ3JhZCc6IDAuNS9NYXRoLlBJLFxyXG4gICAgICAgICd0dXJuJzogMVxyXG4gICAgfSxcclxuICAgIC8vIHRpbWVcclxuICAgICdzJzoge1xyXG4gICAgICAgICdzJzogMSxcclxuICAgICAgICAnbXMnOiAxLzEwMDBcclxuICAgIH0sXHJcbiAgICAnbXMnOiB7XHJcbiAgICAgICAgJ3MnOiAxMDAwLFxyXG4gICAgICAgICdtcyc6IDFcclxuICAgIH0sXHJcbiAgICAvLyBmcmVxdWVuY3lcclxuICAgICdIeic6IHtcclxuICAgICAgICAnSHonOiAxLFxyXG4gICAgICAgICdrSHonOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgJ2tIeic6IHtcclxuICAgICAgICAnSHonOiAxLzEwMDAsXHJcbiAgICAgICAgJ2tIeic6IDFcclxuICAgIH0sXHJcbiAgICAvLyByZXNvbHV0aW9uXHJcbiAgICAnZHBpJzoge1xyXG4gICAgICAgICdkcGknOiAxLFxyXG4gICAgICAgICdkcGNtJzogMS4wLzIuNTQsXHJcbiAgICAgICAgJ2RwcHgnOiAxLzk2XHJcbiAgICB9LFxyXG4gICAgJ2RwY20nOiB7XHJcbiAgICAgICAgJ2RwaSc6IDIuNTQsXHJcbiAgICAgICAgJ2RwY20nOiAxLFxyXG4gICAgICAgICdkcHB4JzogMi41NC85Ni4wXHJcbiAgICB9LFxyXG4gICAgJ2RwcHgnOiB7XHJcbiAgICAgICAgJ2RwaSc6IDk2LFxyXG4gICAgICAgICdkcGNtJzogOTYuMC8yLjU0LFxyXG4gICAgICAgICdkcHB4JzogMVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIHNvdXJjZVVuaXQsIHRhcmdldFVuaXQsIHByZWNpc2lvbikge1xyXG4gICAgaWYgKCFjb252ZXJzaW9ucy5oYXNPd25Qcm9wZXJ0eSh0YXJnZXRVbml0KSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29udmVydCB0byBcIiArIHRhcmdldFVuaXQpO1xyXG5cclxuICAgIGlmICghY29udmVyc2lvbnNbdGFyZ2V0VW5pdF0uaGFzT3duUHJvcGVydHkoc291cmNlVW5pdCkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZnJvbSBcIiArIHNvdXJjZVVuaXQgKyBcIiB0byBcIiArIHRhcmdldFVuaXQpO1xyXG4gICAgXHJcbiAgICB2YXIgY29udmVydGVkID0gY29udmVyc2lvbnNbdGFyZ2V0VW5pdF1bc291cmNlVW5pdF0gKiB2YWx1ZTtcclxuICAgIFxyXG4gICAgaWYgKHByZWNpc2lvbiAhPT0gZmFsc2UpIHtcclxuICAgICAgICBwcmVjaXNpb24gPSBNYXRoLnBvdygxMCwgcGFyc2VJbnQocHJlY2lzaW9uKSB8fCA1KTtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChjb252ZXJ0ZWQgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gY29udmVydGVkO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNhbGMsIG5vZGUsIHByZWNpc2lvbikge1xuICB2YXIgc3RyID0gc3RyaW5naWZ5KG5vZGUsIHByZWNpc2lvbik7XG5cbiAgaWYgKG5vZGUudHlwZSA9PT0gXCJNYXRoRXhwcmVzc2lvblwiKSB7XG4gICAgLy8gaWYgY2FsYyBleHByZXNzaW9uIGNvdWxkbid0IGJlIHJlc29sdmVkIHRvIGEgc2luZ2xlIHZhbHVlLCByZS13cmFwIGl0IGFzXG4gICAgLy8gYSBjYWxjKClcbiAgICBzdHIgPSBjYWxjICsgXCIoXCIgKyBzdHIgKyBcIilcIjtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxudmFyIF9yZWR1Y2VyID0gcmVxdWlyZShcIi4vcmVkdWNlclwiKTtcblxudmFyIG9yZGVyID0ge1xuICBcIipcIjogMCxcbiAgXCIvXCI6IDAsXG4gIFwiK1wiOiAxLFxuICBcIi1cIjogMVxufTtcblxuZnVuY3Rpb24gcm91bmQodmFsdWUsIHByZWMpIHtcbiAgaWYgKHByZWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlYykge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJNYXRoRXhwcmVzc2lvblwiOlxuICAgICAge1xuICAgICAgICB2YXIgbGVmdCA9IG5vZGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0ID0gbm9kZS5yaWdodCxcbiAgICAgICAgICAgIG9wID0gbm9kZS5vcGVyYXRvcjtcblxuICAgICAgICB2YXIgc3RyID0gXCJcIjtcblxuICAgICAgICBpZiAobGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW2xlZnQub3BlcmF0b3JdKSBzdHIgKz0gXCIoXCIgKyBzdHJpbmdpZnkobGVmdCwgcHJlYykgKyBcIilcIjtlbHNlIHN0ciArPSBzdHJpbmdpZnkobGVmdCwgcHJlYyk7XG5cbiAgICAgICAgc3RyICs9IFwiIFwiICsgbm9kZS5vcGVyYXRvciArIFwiIFwiO1xuXG4gICAgICAgIGlmIChyaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW3JpZ2h0Lm9wZXJhdG9yXSkge1xuICAgICAgICAgIHN0ciArPSBcIihcIiArIHN0cmluZ2lmeShyaWdodCwgcHJlYykgKyBcIilcIjtcbiAgICAgICAgfSBlbHNlIGlmIChyaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9wID09PSBcIi1cIiAmJiBbXCIrXCIsIFwiLVwiXS5pbmNsdWRlcyhyaWdodC5vcGVyYXRvcikpIHtcbiAgICAgICAgICAvLyBmaXggIzUyIDogYS0oYitjKSA9IGEtYi1jXG4gICAgICAgICAgcmlnaHQub3BlcmF0b3IgPSAoMCwgX3JlZHVjZXIuZmxpcCkocmlnaHQub3BlcmF0b3IpO1xuICAgICAgICAgIHN0ciArPSBzdHJpbmdpZnkocmlnaHQsIHByZWMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciArPSBzdHJpbmdpZnkocmlnaHQsIHByZWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICBjYXNlIFwiVmFsdWVcIjpcbiAgICAgIHJldHVybiByb3VuZChub2RlLnZhbHVlLCBwcmVjKTtcbiAgICBjYXNlICdDc3NWYXJpYWJsZSc6XG4gICAgICBpZiAobm9kZS5mYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gXCJ2YXIoXCIgKyBub2RlLnZhbHVlICsgXCIsIFwiICsgc3RyaW5naWZ5KG5vZGUuZmFsbGJhY2ssIHByZWMsIHRydWUpICsgXCIpXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJ2YXIoXCIgKyBub2RlLnZhbHVlICsgXCIpXCI7XG4gICAgY2FzZSAnQ2FsYyc6XG4gICAgICBpZiAobm9kZS5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIFwiLVwiICsgbm9kZS5wcmVmaXggKyBcIi1jYWxjKFwiICsgc3RyaW5naWZ5KG5vZGUudmFsdWUsIHByZWMpICsgXCIpXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJjYWxjKFwiICsgc3RyaW5naWZ5KG5vZGUudmFsdWUsIHByZWMpICsgXCIpXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiByb3VuZChub2RlLnZhbHVlLCBwcmVjKSArIG5vZGUudW5pdDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0VGlja1ZhbHVlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZ2V0TmljZVRpY2tWYWx1ZXMuZ2V0VGlja1ZhbHVlcztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXROaWNlVGlja1ZhbHVlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZ2V0TmljZVRpY2tWYWx1ZXMuZ2V0TmljZVRpY2tWYWx1ZXM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0VGlja1ZhbHVlc0ZpeGVkRG9tYWluXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9nZXROaWNlVGlja1ZhbHVlcy5nZXRUaWNrVmFsdWVzRml4ZWREb21haW47XG4gIH1cbn0pO1xuXG52YXIgX2dldE5pY2VUaWNrVmFsdWVzID0gcmVxdWlyZShcIi4vZ2V0TmljZVRpY2tWYWx1ZXNcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFRpY2tWYWx1ZXNGaXhlZERvbWFpbiA9IGV4cG9ydHMuZ2V0VGlja1ZhbHVlcyA9IGV4cG9ydHMuZ2V0TmljZVRpY2tWYWx1ZXMgPSB2b2lkIDA7XG5cbnZhciBfZGVjaW1hbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanMtbGlnaHRcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbC91dGlsc1wiKTtcblxudmFyIF9hcml0aG1ldGljID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2FyaXRobWV0aWNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuLyoqXG4gKiBDYWxjdWxhdGUgYSBpbnRlcnZhbCBvZiBhIG1pbmltdW0gdmFsdWUgYW5kIGEgbWF4aW11bSB2YWx1ZVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbWluICAgICAgIFRoZSBtaW5pbXVtIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1heCAgICAgICBUaGUgbWF4aW11bSB2YWx1ZVxuICogQHJldHVybiB7QXJyYXl9IEFuIGludGVydmFsXG4gKi9cbmZ1bmN0aW9uIGdldFZhbGlkSW50ZXJ2YWwoX3JlZikge1xuICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgIG1pbiA9IF9yZWYyWzBdLFxuICAgICAgbWF4ID0gX3JlZjJbMV07XG5cbiAgdmFyIHZhbGlkTWluID0gbWluLFxuICAgICAgdmFsaWRNYXggPSBtYXg7IC8vIGV4Y2hhbmdlXG5cbiAgaWYgKG1pbiA+IG1heCkge1xuICAgIHZhbGlkTWluID0gbWF4O1xuICAgIHZhbGlkTWF4ID0gbWluO1xuICB9XG5cbiAgcmV0dXJuIFt2YWxpZE1pbiwgdmFsaWRNYXhdO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHN0ZXAgd2hpY2ggaXMgZWFzeSB0byB1bmRlcnN0YW5kIGJldHdlZW4gdGlja3MsIGxpa2UgMTAsIDIwLCAyNVxuICpcbiAqIEBwYXJhbSAge0RlY2ltYWx9IHJvdWdoU3RlcCAgICAgICAgVGhlIHJvdWdoIHN0ZXAgY2FsY3VsYXRlZCBieSBkZXZpZGluZyB0aGVcbiAqIGRpZmZlcmVuY2UgYnkgdGhlIHRpY2tDb3VudFxuICogQHBhcmFtICB7Qm9vbGVhbn0gYWxsb3dEZWNpbWFscyAgICBBbGxvdyB0aGUgdGlja3MgdG8gYmUgZGVjaW1hbHMgb3Igbm90XG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBjb3JyZWN0aW9uRmFjdG9yIEEgY29ycmVjdGlvbiBmYWN0b3JcbiAqIEByZXR1cm4ge0RlY2ltYWx9IFRoZSBzdGVwIHdoaWNoIGlzIGVhc3kgdG8gdW5kZXJzdGFuZCBiZXR3ZWVuIHR3byB0aWNrc1xuICovXG5cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0U3RlcChyb3VnaFN0ZXAsIGFsbG93RGVjaW1hbHMsIGNvcnJlY3Rpb25GYWN0b3IpIHtcbiAgaWYgKHJvdWdoU3RlcC5sdGUoMCkpIHtcbiAgICByZXR1cm4gbmV3IF9kZWNpbWFsLmRlZmF1bHQoMCk7XG4gIH1cblxuICB2YXIgZGlnaXRDb3VudCA9IF9hcml0aG1ldGljLmRlZmF1bHQuZ2V0RGlnaXRDb3VudChyb3VnaFN0ZXAudG9OdW1iZXIoKSk7IC8vIFRoZSByYXRpbyBiZXR3ZWVuIHRoZSByb3VnaCBzdGVwIGFuZCB0aGUgc21hbGxlc3QgbnVtYmVyIHdoaWNoIGhhcyBhIGJpZ2dlclxuICAvLyBvcmRlciBvZiBtYWduaXR1ZGVzIHRoYW4gdGhlIHJvdWdoIHN0ZXBcblxuXG4gIHZhciBkaWdpdENvdW50VmFsdWUgPSBuZXcgX2RlY2ltYWwuZGVmYXVsdCgxMCkucG93KGRpZ2l0Q291bnQpO1xuICB2YXIgc3RlcFJhdGlvID0gcm91Z2hTdGVwLmRpdihkaWdpdENvdW50VmFsdWUpOyAvLyBXaGVuIGFuIGludGVnZXIgYW5kIGEgZmxvYXQgbXVsdGlwbGllZCwgdGhlIGFjY3VyYWN5IG9mIHJlc3VsdCBtYXkgYmUgd3JvbmdcblxuICB2YXIgc3RlcFJhdGlvU2NhbGUgPSBkaWdpdENvdW50ICE9PSAxID8gMC4wNSA6IDAuMTtcbiAgdmFyIGFtZW5kU3RlcFJhdGlvID0gbmV3IF9kZWNpbWFsLmRlZmF1bHQoTWF0aC5jZWlsKHN0ZXBSYXRpby5kaXYoc3RlcFJhdGlvU2NhbGUpLnRvTnVtYmVyKCkpKS5hZGQoY29ycmVjdGlvbkZhY3RvcikubXVsKHN0ZXBSYXRpb1NjYWxlKTtcbiAgdmFyIGZvcm1hdFN0ZXAgPSBhbWVuZFN0ZXBSYXRpby5tdWwoZGlnaXRDb3VudFZhbHVlKTtcbiAgcmV0dXJuIGFsbG93RGVjaW1hbHMgPyBmb3JtYXRTdGVwIDogbmV3IF9kZWNpbWFsLmRlZmF1bHQoTWF0aC5jZWlsKGZvcm1hdFN0ZXApKTtcbn1cbi8qKlxuICogY2FsY3VsYXRlIHRoZSB0aWNrcyB3aGVuIHRoZSBtaW5pbXVtIHZhbHVlIGVxdWFscyB0byB0aGUgbWF4aW11bSB2YWx1ZVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHZhbHVlICAgICAgICAgVGhlIG1pbmltdW0gdmFsdXVlIHdoaWNoIGlzIGFsc28gdGhlIG1heGltdW0gdmFsdWVcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHRpY2tDb3VudCAgICAgVGhlIGNvdW50IG9mIHRpY2tzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBhbGxvd0RlY2ltYWxzIEFsbG93IHRoZSB0aWNrcyB0byBiZSBkZWNpbWFscyBvciBub3RcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICAgICAgdGlja3NcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRpY2tPZlNpbmdsZVZhbHVlKHZhbHVlLCB0aWNrQ291bnQsIGFsbG93RGVjaW1hbHMpIHtcbiAgdmFyIHN0ZXAgPSAxOyAvLyBjYWxjdWxhdGUgdGhlIG1pZGRsZSB2YWx1ZSBvZiB0aWNrc1xuXG4gIHZhciBtaWRkbGUgPSBuZXcgX2RlY2ltYWwuZGVmYXVsdCh2YWx1ZSk7XG5cbiAgaWYgKCFtaWRkbGUuaXNpbnQoKSAmJiBhbGxvd0RlY2ltYWxzKSB7XG4gICAgdmFyIGFic1ZhbCA9IE1hdGguYWJzKHZhbHVlKTtcblxuICAgIGlmIChhYnNWYWwgPCAxKSB7XG4gICAgICAvLyBUaGUgc3RlcCBzaG91bGQgYmUgYSBmbG9hdCBudW1iZXIgd2hlbiB0aGUgZGlmZmVyZW5jZSBpcyBzbWFsbGVyIHRoYW4gMVxuICAgICAgc3RlcCA9IG5ldyBfZGVjaW1hbC5kZWZhdWx0KDEwKS5wb3coX2FyaXRobWV0aWMuZGVmYXVsdC5nZXREaWdpdENvdW50KHZhbHVlKSAtIDEpO1xuICAgICAgbWlkZGxlID0gbmV3IF9kZWNpbWFsLmRlZmF1bHQoTWF0aC5mbG9vcihtaWRkbGUuZGl2KHN0ZXApLnRvTnVtYmVyKCkpKS5tdWwoc3RlcCk7XG4gICAgfSBlbHNlIGlmIChhYnNWYWwgPiAxKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIG1heGltdW0gaW50ZWdlciB3aGljaCBpcyBzbWFsbGVyIHRoYW4gJ3ZhbHVlJyB3aGVuICd2YWx1ZScgaXMgZ3JlYXRlciB0aGFuIDFcbiAgICAgIG1pZGRsZSA9IG5ldyBfZGVjaW1hbC5kZWZhdWx0KE1hdGguZmxvb3IodmFsdWUpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFsdWUgPT09IDApIHtcbiAgICBtaWRkbGUgPSBuZXcgX2RlY2ltYWwuZGVmYXVsdChNYXRoLmZsb29yKCh0aWNrQ291bnQgLSAxKSAvIDIpKTtcbiAgfSBlbHNlIGlmICghYWxsb3dEZWNpbWFscykge1xuICAgIG1pZGRsZSA9IG5ldyBfZGVjaW1hbC5kZWZhdWx0KE1hdGguZmxvb3IodmFsdWUpKTtcbiAgfVxuXG4gIHZhciBtaWRkbGVJbmRleCA9IE1hdGguZmxvb3IoKHRpY2tDb3VudCAtIDEpIC8gMik7XG4gIHZhciBmbiA9ICgwLCBfdXRpbHMuY29tcG9zZSkoKDAsIF91dGlscy5tYXApKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG1pZGRsZS5hZGQobmV3IF9kZWNpbWFsLmRlZmF1bHQobiAtIG1pZGRsZUluZGV4KS5tdWwoc3RlcCkpLnRvTnVtYmVyKCk7XG4gIH0pLCBfdXRpbHMucmFuZ2UpO1xuICByZXR1cm4gZm4oMCwgdGlja0NvdW50KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzdGVwXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgbWluICAgICAgICAgICAgICBUaGUgbWluaW11bSB2YWx1ZSBvZiBhbiBpbnRlcnZhbFxuICogQHBhcmFtICB7TnVtYmVyfSAgbWF4ICAgICAgICAgICAgICBUaGUgbWF4aW11bSB2YWx1ZSBvZiBhbiBpbnRlcnZhbFxuICogQHBhcmFtICB7SW50ZWdlcn0gdGlja0NvdW50ICAgICAgICBUaGUgY291bnQgb2YgdGlja3NcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGFsbG93RGVjaW1hbHMgICAgQWxsb3cgdGhlIHRpY2tzIHRvIGJlIGRlY2ltYWxzIG9yIG5vdFxuICogQHBhcmFtICB7TnVtYmVyfSAgY29ycmVjdGlvbkZhY3RvciBBIGNvcnJlY3Rpb24gZmFjdG9yXG4gKiBAcmV0dXJuIHtPYmplY3R9ICBUaGUgc3RlcCwgbWluaW11bSB2YWx1ZSBvZiB0aWNrcywgbWF4aW11bSB2YWx1ZSBvZiB0aWNrc1xuICovXG5cblxuZnVuY3Rpb24gY2FsY3VsYXRlU3RlcChtaW4sIG1heCwgdGlja0NvdW50LCBhbGxvd0RlY2ltYWxzKSB7XG4gIHZhciBjb3JyZWN0aW9uRmFjdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xuXG4gIC8vIGRpcnR5IGhhY2sgKGZvciByZWNoYXJ0cycgdGVzdClcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoKG1heCAtIG1pbikgLyAodGlja0NvdW50IC0gMSkpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXA6IG5ldyBfZGVjaW1hbC5kZWZhdWx0KDApLFxuICAgICAgdGlja01pbjogbmV3IF9kZWNpbWFsLmRlZmF1bHQoMCksXG4gICAgICB0aWNrTWF4OiBuZXcgX2RlY2ltYWwuZGVmYXVsdCgwKVxuICAgIH07XG4gIH0gLy8gVGhlIHN0ZXAgd2hpY2ggaXMgZWFzeSB0byB1bmRlcnN0YW5kIGJldHdlZW4gdHdvIHRpY2tzXG5cblxuICB2YXIgc3RlcCA9IGdldEZvcm1hdFN0ZXAobmV3IF9kZWNpbWFsLmRlZmF1bHQobWF4KS5zdWIobWluKS5kaXYodGlja0NvdW50IC0gMSksIGFsbG93RGVjaW1hbHMsIGNvcnJlY3Rpb25GYWN0b3IpOyAvLyBBIG1lZGlhbCB2YWx1ZSBvZiB0aWNrc1xuXG4gIHZhciBtaWRkbGU7IC8vIFdoZW4gMCBpcyBpbnNpZGUgdGhlIGludGVydmFsLCAwIHNob3VsZCBiZSBhIHRpY2tcblxuICBpZiAobWluIDw9IDAgJiYgbWF4ID49IDApIHtcbiAgICBtaWRkbGUgPSBuZXcgX2RlY2ltYWwuZGVmYXVsdCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjYWxjdWxhdGUgdGhlIG1pZGRsZSB2YWx1ZVxuICAgIG1pZGRsZSA9IG5ldyBfZGVjaW1hbC5kZWZhdWx0KG1pbikuYWRkKG1heCkuZGl2KDIpOyAvLyBtaW51cyBtb2R1bG8gdmFsdWVcblxuICAgIG1pZGRsZSA9IG1pZGRsZS5zdWIobmV3IF9kZWNpbWFsLmRlZmF1bHQobWlkZGxlKS5tb2Qoc3RlcCkpO1xuICB9XG5cbiAgdmFyIGJlbG93Q291bnQgPSBNYXRoLmNlaWwobWlkZGxlLnN1YihtaW4pLmRpdihzdGVwKS50b051bWJlcigpKTtcbiAgdmFyIHVwQ291bnQgPSBNYXRoLmNlaWwobmV3IF9kZWNpbWFsLmRlZmF1bHQobWF4KS5zdWIobWlkZGxlKS5kaXYoc3RlcCkudG9OdW1iZXIoKSk7XG4gIHZhciBzY2FsZUNvdW50ID0gYmVsb3dDb3VudCArIHVwQ291bnQgKyAxO1xuXG4gIGlmIChzY2FsZUNvdW50ID4gdGlja0NvdW50KSB7XG4gICAgLy8gV2hlbiBtb3JlIHRpY2tzIG5lZWQgdG8gY292ZXIgdGhlIGludGVydmFsLCBzdGVwIHNob3VsZCBiZSBiaWdnZXIuXG4gICAgcmV0dXJuIGNhbGN1bGF0ZVN0ZXAobWluLCBtYXgsIHRpY2tDb3VudCwgYWxsb3dEZWNpbWFscywgY29ycmVjdGlvbkZhY3RvciArIDEpO1xuICB9XG5cbiAgaWYgKHNjYWxlQ291bnQgPCB0aWNrQ291bnQpIHtcbiAgICAvLyBXaGVuIGxlc3MgdGlja3MgY2FuIGNvdmVyIHRoZSBpbnRlcnZhbCwgd2Ugc2hvdWxkIGFkZCBzb21lIGFkZGl0aW9uYWwgdGlja3NcbiAgICB1cENvdW50ID0gbWF4ID4gMCA/IHVwQ291bnQgKyAodGlja0NvdW50IC0gc2NhbGVDb3VudCkgOiB1cENvdW50O1xuICAgIGJlbG93Q291bnQgPSBtYXggPiAwID8gYmVsb3dDb3VudCA6IGJlbG93Q291bnQgKyAodGlja0NvdW50IC0gc2NhbGVDb3VudCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgdGlja01pbjogbWlkZGxlLnN1YihuZXcgX2RlY2ltYWwuZGVmYXVsdChiZWxvd0NvdW50KS5tdWwoc3RlcCkpLFxuICAgIHRpY2tNYXg6IG1pZGRsZS5hZGQobmV3IF9kZWNpbWFsLmRlZmF1bHQodXBDb3VudCkubXVsKHN0ZXApKVxuICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHRpY2tzIG9mIGFuIGludGVydmFsLCB0aGUgY291bnQgb2YgdGlja3Mgd2lsbCBiZSBndXJhcmFudGVlZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIG1pbiwgbWF4ICAgICAgbWluOiBUaGUgbWluaW11bSB2YWx1ZSwgbWF4OiBUaGUgbWF4aW11bSB2YWx1ZVxuICogQHBhcmFtICB7SW50ZWdlcn0gdGlja0NvdW50ICAgICBUaGUgY291bnQgb2YgdGlja3NcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGFsbG93RGVjaW1hbHMgQWxsb3cgdGhlIHRpY2tzIHRvIGJlIGRlY2ltYWxzIG9yIG5vdFxuICogQHJldHVybiB7QXJyYXl9ICAgdGlja3NcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE5pY2VUaWNrVmFsdWVzRm4oX3JlZjMpIHtcbiAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuICAgICAgbWluID0gX3JlZjRbMF0sXG4gICAgICBtYXggPSBfcmVmNFsxXTtcblxuICB2YXIgdGlja0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA2O1xuICB2YXIgYWxsb3dEZWNpbWFscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgLy8gTW9yZSB0aGFuIHR3byB0aWNrcyBzaG91bGQgYmUgcmV0dXJuXG4gIHZhciBjb3VudCA9IE1hdGgubWF4KHRpY2tDb3VudCwgMik7XG5cbiAgdmFyIF9nZXRWYWxpZEludGVydmFsID0gZ2V0VmFsaWRJbnRlcnZhbChbbWluLCBtYXhdKSxcbiAgICAgIF9nZXRWYWxpZEludGVydmFsMiA9IF9zbGljZWRUb0FycmF5KF9nZXRWYWxpZEludGVydmFsLCAyKSxcbiAgICAgIGNvcm1pbiA9IF9nZXRWYWxpZEludGVydmFsMlswXSxcbiAgICAgIGNvcm1heCA9IF9nZXRWYWxpZEludGVydmFsMlsxXTtcblxuICBpZiAoY29ybWluID09PSAtSW5maW5pdHkgfHwgY29ybWF4ID09PSBJbmZpbml0eSkge1xuICAgIHZhciBfdmFsdWVzID0gY29ybWF4ID09PSBJbmZpbml0eSA/IFtjb3JtaW5dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKDAsIF91dGlscy5yYW5nZSkoMCwgdGlja0NvdW50IC0gMSkubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9KSkpIDogX3RvQ29uc3VtYWJsZUFycmF5KCgwLCBfdXRpbHMucmFuZ2UpKDAsIHRpY2tDb3VudCAtIDEpLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gLUluZmluaXR5O1xuICAgIH0pKS5jb25jYXQoW2Nvcm1heF0pO1xuXG4gICAgcmV0dXJuIG1pbiA+IG1heCA/ICgwLCBfdXRpbHMucmV2ZXJzZSkoX3ZhbHVlcykgOiBfdmFsdWVzO1xuICB9XG5cbiAgaWYgKGNvcm1pbiA9PT0gY29ybWF4KSB7XG4gICAgcmV0dXJuIGdldFRpY2tPZlNpbmdsZVZhbHVlKGNvcm1pbiwgdGlja0NvdW50LCBhbGxvd0RlY2ltYWxzKTtcbiAgfSAvLyBHZXQgdGhlIHN0ZXAgYmV0d2VlbiB0d28gdGlja3NcblxuXG4gIHZhciBfY2FsY3VsYXRlU3RlcCA9IGNhbGN1bGF0ZVN0ZXAoY29ybWluLCBjb3JtYXgsIGNvdW50LCBhbGxvd0RlY2ltYWxzKSxcbiAgICAgIHN0ZXAgPSBfY2FsY3VsYXRlU3RlcC5zdGVwLFxuICAgICAgdGlja01pbiA9IF9jYWxjdWxhdGVTdGVwLnRpY2tNaW4sXG4gICAgICB0aWNrTWF4ID0gX2NhbGN1bGF0ZVN0ZXAudGlja01heDtcblxuICB2YXIgdmFsdWVzID0gX2FyaXRobWV0aWMuZGVmYXVsdC5yYW5nZVN0ZXAodGlja01pbiwgdGlja01heC5hZGQobmV3IF9kZWNpbWFsLmRlZmF1bHQoMC4xKS5tdWwoc3RlcCkpLCBzdGVwKTtcblxuICByZXR1cm4gbWluID4gbWF4ID8gKDAsIF91dGlscy5yZXZlcnNlKSh2YWx1ZXMpIDogdmFsdWVzO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHRpY2tzIG9mIGFuIGludGVydmFsLCB0aGUgY291bnQgb2YgdGlja3Mgd29uJ3QgYmUgZ3VyYXJhbnRlZWRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICBtaW4sIG1heCAgICAgIG1pbjogVGhlIG1pbmltdW0gdmFsdWUsIG1heDogVGhlIG1heGltdW0gdmFsdWVcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHRpY2tDb3VudCAgICAgVGhlIGNvdW50IG9mIHRpY2tzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBhbGxvd0RlY2ltYWxzIEFsbG93IHRoZSB0aWNrcyB0byBiZSBkZWNpbWFscyBvciBub3RcbiAqIEByZXR1cm4ge0FycmF5fSAgIHRpY2tzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUaWNrVmFsdWVzRm4oX3JlZjUpIHtcbiAgdmFyIF9yZWY2ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjUsIDIpLFxuICAgICAgbWluID0gX3JlZjZbMF0sXG4gICAgICBtYXggPSBfcmVmNlsxXTtcblxuICB2YXIgdGlja0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA2O1xuICB2YXIgYWxsb3dEZWNpbWFscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgLy8gTW9yZSB0aGFuIHR3byB0aWNrcyBzaG91bGQgYmUgcmV0dXJuXG4gIHZhciBjb3VudCA9IE1hdGgubWF4KHRpY2tDb3VudCwgMik7XG5cbiAgdmFyIF9nZXRWYWxpZEludGVydmFsMyA9IGdldFZhbGlkSW50ZXJ2YWwoW21pbiwgbWF4XSksXG4gICAgICBfZ2V0VmFsaWRJbnRlcnZhbDQgPSBfc2xpY2VkVG9BcnJheShfZ2V0VmFsaWRJbnRlcnZhbDMsIDIpLFxuICAgICAgY29ybWluID0gX2dldFZhbGlkSW50ZXJ2YWw0WzBdLFxuICAgICAgY29ybWF4ID0gX2dldFZhbGlkSW50ZXJ2YWw0WzFdO1xuXG4gIGlmIChjb3JtaW4gPT09IC1JbmZpbml0eSB8fCBjb3JtYXggPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIFttaW4sIG1heF07XG4gIH1cblxuICBpZiAoY29ybWluID09PSBjb3JtYXgpIHtcbiAgICByZXR1cm4gZ2V0VGlja09mU2luZ2xlVmFsdWUoY29ybWluLCB0aWNrQ291bnQsIGFsbG93RGVjaW1hbHMpO1xuICB9XG5cbiAgdmFyIHN0ZXAgPSBnZXRGb3JtYXRTdGVwKG5ldyBfZGVjaW1hbC5kZWZhdWx0KGNvcm1heCkuc3ViKGNvcm1pbikuZGl2KGNvdW50IC0gMSksIGFsbG93RGVjaW1hbHMsIDApO1xuICB2YXIgZm4gPSAoMCwgX3V0aWxzLmNvbXBvc2UpKCgwLCBfdXRpbHMubWFwKShmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuZXcgX2RlY2ltYWwuZGVmYXVsdChjb3JtaW4pLmFkZChuZXcgX2RlY2ltYWwuZGVmYXVsdChuKS5tdWwoc3RlcCkpLnRvTnVtYmVyKCk7XG4gIH0pLCBfdXRpbHMucmFuZ2UpO1xuICB2YXIgdmFsdWVzID0gZm4oMCwgY291bnQpLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkgPj0gY29ybWluICYmIGVudHJ5IDw9IGNvcm1heDtcbiAgfSk7XG4gIHJldHVybiBtaW4gPiBtYXggPyAoMCwgX3V0aWxzLnJldmVyc2UpKHZhbHVlcykgOiB2YWx1ZXM7XG59XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgdGlja3Mgb2YgYW4gaW50ZXJ2YWwsIHRoZSBjb3VudCBvZiB0aWNrcyB3b24ndCBiZSBndXJhcmFudGVlZCxcbiAqIGJ1dCB0aGUgZG9tYWluIHdpbGwgYmUgZ3VhcmFudGVlZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIG1pbiwgbWF4ICAgICAgbWluOiBUaGUgbWluaW11bSB2YWx1ZSwgbWF4OiBUaGUgbWF4aW11bSB2YWx1ZVxuICogQHBhcmFtICB7SW50ZWdlcn0gdGlja0NvdW50ICAgICBUaGUgY291bnQgb2YgdGlja3NcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGFsbG93RGVjaW1hbHMgQWxsb3cgdGhlIHRpY2tzIHRvIGJlIGRlY2ltYWxzIG9yIG5vdFxuICogQHJldHVybiB7QXJyYXl9ICAgdGlja3NcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRpY2tWYWx1ZXNGaXhlZERvbWFpbkZuKF9yZWY3LCB0aWNrQ291bnQpIHtcbiAgdmFyIF9yZWY4ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpLFxuICAgICAgbWluID0gX3JlZjhbMF0sXG4gICAgICBtYXggPSBfcmVmOFsxXTtcblxuICB2YXIgYWxsb3dEZWNpbWFscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcblxuICAvLyBNb3JlIHRoYW4gdHdvIHRpY2tzIHNob3VsZCBiZSByZXR1cm5cbiAgdmFyIF9nZXRWYWxpZEludGVydmFsNSA9IGdldFZhbGlkSW50ZXJ2YWwoW21pbiwgbWF4XSksXG4gICAgICBfZ2V0VmFsaWRJbnRlcnZhbDYgPSBfc2xpY2VkVG9BcnJheShfZ2V0VmFsaWRJbnRlcnZhbDUsIDIpLFxuICAgICAgY29ybWluID0gX2dldFZhbGlkSW50ZXJ2YWw2WzBdLFxuICAgICAgY29ybWF4ID0gX2dldFZhbGlkSW50ZXJ2YWw2WzFdO1xuXG4gIGlmIChjb3JtaW4gPT09IC1JbmZpbml0eSB8fCBjb3JtYXggPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIFttaW4sIG1heF07XG4gIH1cblxuICBpZiAoY29ybWluID09PSBjb3JtYXgpIHtcbiAgICByZXR1cm4gW2Nvcm1pbl07XG4gIH1cblxuICB2YXIgY291bnQgPSBNYXRoLm1heCh0aWNrQ291bnQsIDIpO1xuICB2YXIgc3RlcCA9IGdldEZvcm1hdFN0ZXAobmV3IF9kZWNpbWFsLmRlZmF1bHQoY29ybWF4KS5zdWIoY29ybWluKS5kaXYoY291bnQgLSAxKSwgYWxsb3dEZWNpbWFscywgMCk7XG5cbiAgdmFyIHZhbHVlcyA9IF90b0NvbnN1bWFibGVBcnJheShfYXJpdGhtZXRpYy5kZWZhdWx0LnJhbmdlU3RlcChuZXcgX2RlY2ltYWwuZGVmYXVsdChjb3JtaW4pLCBuZXcgX2RlY2ltYWwuZGVmYXVsdChjb3JtYXgpLnN1YihuZXcgX2RlY2ltYWwuZGVmYXVsdCgwLjk5KS5tdWwoc3RlcCkpLCBzdGVwKSkuY29uY2F0KFtjb3JtYXhdKTtcblxuICByZXR1cm4gbWluID4gbWF4ID8gKDAsIF91dGlscy5yZXZlcnNlKSh2YWx1ZXMpIDogdmFsdWVzO1xufVxuXG52YXIgZ2V0TmljZVRpY2tWYWx1ZXMgPSAoMCwgX3V0aWxzLm1lbW9pemUpKGdldE5pY2VUaWNrVmFsdWVzRm4pO1xuZXhwb3J0cy5nZXROaWNlVGlja1ZhbHVlcyA9IGdldE5pY2VUaWNrVmFsdWVzO1xudmFyIGdldFRpY2tWYWx1ZXMgPSAoMCwgX3V0aWxzLm1lbW9pemUpKGdldFRpY2tWYWx1ZXNGbik7XG5leHBvcnRzLmdldFRpY2tWYWx1ZXMgPSBnZXRUaWNrVmFsdWVzO1xudmFyIGdldFRpY2tWYWx1ZXNGaXhlZERvbWFpbiA9ICgwLCBfdXRpbHMubWVtb2l6ZSkoZ2V0VGlja1ZhbHVlc0ZpeGVkRG9tYWluRm4pO1xuZXhwb3J0cy5nZXRUaWNrVmFsdWVzRml4ZWREb21haW4gPSBnZXRUaWNrVmFsdWVzRml4ZWREb21haW47IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZGVjaW1hbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlY2ltYWwuanMtbGlnaHRcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQGZpbGVPdmVydmlldyDkuIDkupvlhaznlKjnmoTov5Dnrpfmlrnms5VcbiAqIEBhdXRob3IgeGlsZTYxMVxuICogQGRhdGUgMjAxNS0wOS0xN1xuICovXG5cbi8qKlxuICog6I635Y+W5pWw5YC855qE5L2N5pWwXG4gKiDlhbbkuK3nu53lr7nlgLzlsZ7kuo7ljLrpl7RbMC4xLCAxKe+8jCDlvpfliLDnmoTlgLzkuLowXG4gKiDnu53lr7nlgLzlsZ7kuo7ljLrpl7RbMC4wMSwgMC4xKe+8jOW+l+WIsOeahOS9jeaVsOS4uiAtMVxuICog57ud5a+55YC85bGe5LqO5Yy66Ze0WzAuMDAxLCAwLjAxKe+8jOW+l+WIsOeahOS9jeaVsOS4uiAtMlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmFsdWUg5pWw5YC8XG4gKiBAcmV0dXJuIHtJbnRlZ2VyfSDkvY3mlbBcbiAqL1xuZnVuY3Rpb24gZ2V0RGlnaXRDb3VudCh2YWx1ZSkge1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgIHJlc3VsdCA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gTWF0aC5mbG9vcihuZXcgX2RlY2ltYWwuZGVmYXVsdCh2YWx1ZSkuYWJzKCkubG9nKDEwKS50b051bWJlcigpKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiDmjInnhaflm7rlrprnmoTmraXplb/ojrflj5Zbc3RhcnQsIGVuZCnov5nkuKrljLrpl7TnmoTmlbDmja5cbiAqIOW5tuS4lOmcgOimgeWkhOeQhmpz6K6h566X57K+5bqm55qE6Zeu6aKYXG4gKlxuICogQHBhcmFtICB7RGVjaW1hbH0gc3RhcnQg6LW354K5XG4gKiBAcGFyYW0gIHtEZWNpbWFsfSBlbmQgICDnu4jngrnvvIzkuI3ljIXlkKvor6XlgLxcbiAqIEBwYXJhbSAge0RlY2ltYWx9IHN0ZXAgIOatpemVv1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAg6Iul5bmy5pWw5YC8XG4gKi9cblxuXG5mdW5jdGlvbiByYW5nZVN0ZXAoc3RhcnQsIGVuZCwgc3RlcCkge1xuICB2YXIgbnVtID0gbmV3IF9kZWNpbWFsLmRlZmF1bHQoc3RhcnQpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTsgLy8gbWFnaWMgbnVtYmVyIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcFxuXG4gIHdoaWxlIChudW0ubHQoZW5kKSAmJiBpIDwgMTAwMDAwKSB7XG4gICAgcmVzdWx0LnB1c2gobnVtLnRvTnVtYmVyKCkpO1xuICAgIG51bSA9IG51bS5hZGQoc3RlcCk7XG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICog5a+55pWw5YC86L+b6KGM57q/5oCn5o+S5YC8XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBhICDlrprkuYnln5/nmoTmnoHngrlcbiAqIEBwYXJhbSAge051bWJlcn0gYiAg5a6a5LmJ5Z+f55qE5p6B54K5XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHQgIFswLCAxXeWGheeahOafkOS4quWAvFxuICogQHJldHVybiB7TnVtYmVyfSAgICDlrprkuYnln5/lhoXnmoTmn5DkuKrlgLxcbiAqL1xuXG5cbnZhciBpbnRlcnBvbGF0ZU51bWJlciA9ICgwLCBfdXRpbHMuY3VycnkpKGZ1bmN0aW9uIChhLCBiLCB0KSB7XG4gIHZhciBuZXdBID0gK2E7XG4gIHZhciBuZXdCID0gK2I7XG4gIHJldHVybiBuZXdBICsgdCAqIChuZXdCIC0gbmV3QSk7XG59KTtcbi8qKlxuICog57q/5oCn5o+S5YC855qE6YCG6L+Q566XXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBhIOWumuS5ieWfn+eahOaegeeCuVxuICogQHBhcmFtICB7TnVtYmVyfSBiIOWumuS5ieWfn+eahOaegeeCuVxuICogQHBhcmFtICB7TnVtYmVyfSB4IOWPr+S7peiupOS4uuaYr+aPkuWAvOWQjueahOS4gOS4qui+k+WHuuWAvFxuICogQHJldHVybiB7TnVtYmVyfSAgIOW9k3jlnKggYSB+IGLov5nkuKrojIPlm7TlhoXml7bvvIzov5Tlm57lgLzlsZ7kuo5bMCwgMV1cbiAqL1xuXG52YXIgdW5pbnRlcnBvbGF0ZU51bWJlciA9ICgwLCBfdXRpbHMuY3VycnkpKGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gIHZhciBkaWZmID0gYiAtICthO1xuICBkaWZmID0gZGlmZiB8fCBJbmZpbml0eTtcbiAgcmV0dXJuICh4IC0gYSkgLyBkaWZmO1xufSk7XG4vKipcbiAqIOe6v+aAp+aPkuWAvOeahOmAhui/kOeul++8jOW5tuS4lOacieaIquaWreeahOaTjeS9nFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gYSDlrprkuYnln5/nmoTmnoHngrlcbiAqIEBwYXJhbSAge051bWJlcn0gYiDlrprkuYnln5/nmoTmnoHngrlcbiAqIEBwYXJhbSAge051bWJlcn0geCDlj6/ku6XorqTkuLrmmK/mj5LlgLzlkI7nmoTkuIDkuKrovpPlh7rlgLxcbiAqIEByZXR1cm4ge051bWJlcn0gICDlvZN45ZyoIGEgfiBi6L+Z5Liq5Yy66Ze05YaF5pe277yM6L+U5Zue5YC85bGe5LqOWzAsIDFd77yMXG4gKiDlvZN45LiN5ZyoIGEgfiBi6L+Z5Liq5Yy66Ze05pe277yM5Lya5oiq5pat5YiwIGEgfiBiIOi/meS4quWMuumXtFxuICovXG5cbnZhciB1bmludGVycG9sYXRlVHJ1bmNhdGlvbiA9ICgwLCBfdXRpbHMuY3VycnkpKGZ1bmN0aW9uIChhLCBiLCB4KSB7XG4gIHZhciBkaWZmID0gYiAtICthO1xuICBkaWZmID0gZGlmZiB8fCBJbmZpbml0eTtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBkaWZmKSk7XG59KTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgcmFuZ2VTdGVwOiByYW5nZVN0ZXAsXG4gIGdldERpZ2l0Q291bnQ6IGdldERpZ2l0Q291bnQsXG4gIGludGVycG9sYXRlTnVtYmVyOiBpbnRlcnBvbGF0ZU51bWJlcixcbiAgdW5pbnRlcnBvbGF0ZU51bWJlcjogdW5pbnRlcnBvbGF0ZU51bWJlcixcbiAgdW5pbnRlcnBvbGF0ZVRydW5jYXRpb246IHVuaW50ZXJwb2xhdGVUcnVuY2F0aW9uXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IEN1c3RvbWl6ZWRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IGlzVmFsaWRFbGVtZW50LCBjbG9uZUVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQsIENvbXBvbmVudCwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTGF5ZXIgfSBmcm9tICcuLi9jb250YWluZXIvTGF5ZXInO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL3V0aWwvTG9nVXRpbHMnO1xuXG50eXBlIENvbXA8UD4gPSBGdW5jdGlvbkNvbXBvbmVudDxQPiB8IENvbXBvbmVudDxQPjtcbmV4cG9ydCB0eXBlIFByb3BzPFAsIEMgZXh0ZW5kcyBDb21wPFA+PiA9IFAgJiB7XG4gIGNvbXBvbmVudDogQztcbn07XG5cbi8qKlxuICogY3VzdG9tIHN2ZyBlbGVtZW50cyBieSByZWNoYXJ0IGluc3RhbmNlIHByb3BzIGFuZCBzdGF0ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgc3ZnIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDdXN0b21pemVkPFAsIEMgZXh0ZW5kcyBDb21wPFA+Pih7IGNvbXBvbmVudCwgLi4ucHJvcHMgfTogUHJvcHM8UCwgQz4pIHtcbiAgbGV0IGNoaWxkO1xuICBpZiAoaXNWYWxpZEVsZW1lbnQoY29tcG9uZW50KSkge1xuICAgIGNoaWxkID0gY2xvbmVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihjb21wb25lbnQpKSB7XG4gICAgY2hpbGQgPSBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMgYXMgYW55KTtcbiAgfSBlbHNlIHtcbiAgICB3YXJuKGZhbHNlLCBcIkN1c3RvbWl6ZWQncyBwcm9wcyBgY29tcG9uZW50YCBtdXN0IGJlIFJlYWN0LmVsZW1lbnQgb3IgRnVuY3Rpb24sIGJ1dCBnb3QgJXMuXCIsIHR5cGVvZiBjb21wb25lbnQpO1xuICB9XG4gIHJldHVybiA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtY3VzdG9taXplZC13cmFwcGVyXCI+e2NoaWxkfTwvTGF5ZXI+O1xufVxuXG5DdXN0b21pemVkLmRpc3BsYXlOYW1lID0gJ0N1c3RvbWl6ZWQnO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFBvbGFyIEdyaWRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9sYXJUb0NhcnRlc2lhbiB9IGZyb20gJy4uL3V0aWwvUG9sYXJVdGlscyc7XG5pbXBvcnQgeyBmaWx0ZXJQcm9wcyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUG9sYXJHcmlkUHJvcHMge1xuICBjeD86IG51bWJlcjtcbiAgY3k/OiBudW1iZXI7XG4gIGlubmVyUmFkaXVzPzogbnVtYmVyO1xuICBvdXRlclJhZGl1cz86IG51bWJlcjtcblxuICBwb2xhckFuZ2xlcz86IG51bWJlcltdO1xuICBwb2xhclJhZGl1cz86IG51bWJlcltdO1xuICBncmlkVHlwZT86ICdwb2x5Z29uJyB8ICdjaXJjbGUnO1xuICByYWRpYWxMaW5lczogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHUGF0aEVsZW1lbnQ+ICYgUG9sYXJHcmlkUHJvcHM7XG5cbmV4cG9ydCBjbGFzcyBQb2xhckdyaWQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdQb2xhckdyaWQnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY3g6IDAsXG4gICAgY3k6IDAsXG4gICAgaW5uZXJSYWRpdXM6IDAsXG4gICAgb3V0ZXJSYWRpdXM6IDAsXG4gICAgZ3JpZFR5cGU6ICdwb2x5Z29uJyxcbiAgICByYWRpYWxMaW5lczogdHJ1ZSxcbiAgfTtcblxuICBnZXRQb2x5Z29uUGF0aChyYWRpdXM6IG51bWJlcikge1xuICAgIGNvbnN0IHsgY3gsIGN5LCBwb2xhckFuZ2xlcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBwYXRoID0gJyc7XG5cbiAgICBwb2xhckFuZ2xlcy5mb3JFYWNoKChhbmdsZTogbnVtYmVyLCBpOiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9sYXJUb0NhcnRlc2lhbihjeCwgY3ksIHJhZGl1cywgYW5nbGUpO1xuXG4gICAgICBpZiAoaSkge1xuICAgICAgICBwYXRoICs9IGBMICR7cG9pbnQueH0sJHtwb2ludC55fWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoICs9IGBNICR7cG9pbnQueH0sJHtwb2ludC55fWA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcGF0aCArPSAnWic7XG5cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IGF4aXMgb2YgcmFkaWFsIGxpbmVcbiAgICogQHJldHVybiB7W3R5cGVdfSBUaGUgbGluZXNcbiAgICovXG4gIHJlbmRlclBvbGFyQW5nbGVzKCkge1xuICAgIGNvbnN0IHsgY3gsIGN5LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHBvbGFyQW5nbGVzLCByYWRpYWxMaW5lcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghcG9sYXJBbmdsZXMgfHwgIXBvbGFyQW5nbGVzLmxlbmd0aCB8fCAhcmFkaWFsTGluZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIHN0cm9rZTogJyNjY2MnLFxuICAgICAgLi4uZmlsdGVyUHJvcHModGhpcy5wcm9wcyksXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZyBjbGFzc05hbWU9XCJyZWNoYXJ0cy1wb2xhci1ncmlkLWFuZ2xlXCI+XG4gICAgICAgIHtwb2xhckFuZ2xlcy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RhcnQgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgaW5uZXJSYWRpdXMsIGVudHJ5KTtcbiAgICAgICAgICBjb25zdCBlbmQgPSBwb2xhclRvQ2FydGVzaWFuKGN4LCBjeSwgb3V0ZXJSYWRpdXMsIGVudHJ5KTtcblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8bGluZVxuICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIGtleT17YGxpbmUtJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICAgIHgxPXtzdGFydC54fVxuICAgICAgICAgICAgICB5MT17c3RhcnQueX1cbiAgICAgICAgICAgICAgeDI9e2VuZC54fVxuICAgICAgICAgICAgICB5Mj17ZW5kLnl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9nPlxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhdyBjb25jZW50cmljIGNpcmNsZXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIGNpcmNsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggIFRoZSBpbmRleCBvZiBjaXJjbGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dHJhUHJvcHMgRXh0cmEgcHJvcHNcbiAgICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBjaXJjbGVcbiAgICovXG4gIHJlbmRlckNvbmNlbnRyaWNDaXJjbGUocmFkaXVzOiBudW1iZXIsIGluZGV4OiBudW1iZXIsIGV4dHJhUHJvcHM/OiBTVkdQcm9wczxTVkdDaXJjbGVFbGVtZW50Pikge1xuICAgIGNvbnN0IHsgY3gsIGN5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgc3Ryb2tlOiAnI2NjYycsXG4gICAgICAuLi5maWx0ZXJQcm9wcyh0aGlzLnByb3BzKSxcbiAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgIC4uLmV4dHJhUHJvcHMsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Y2lyY2xlXG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItZ3JpZC1jb25jZW50cmljLWNpcmNsZVwiXG4gICAgICAgIGtleT17YGNpcmNsZS0ke2luZGV4fWB9XG4gICAgICAgIGN4PXtjeH1cbiAgICAgICAgY3k9e2N5fVxuICAgICAgICByPXtyYWRpdXN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhdyBjb25jZW50cmljIHBvbHlnb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgICAgIFRoZSByYWRpdXMgb2YgcG9seWdvblxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggICAgICBUaGUgaW5kZXggb2YgcG9seWdvblxuICAgKiBAcGFyYW0ge09iamVjdH0gZXh0cmFQcm9wcyBFeHRyYSBwcm9wc1xuICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IHBvbHlnb25cbiAgICovXG4gIHJlbmRlckNvbmNlbnRyaWNQb2x5Z29uKHJhZGl1czogbnVtYmVyLCBpbmRleDogbnVtYmVyLCBleHRyYVByb3BzPzogU1ZHUHJvcHM8U1ZHUGF0aEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBzdHJva2U6ICcjY2NjJyxcbiAgICAgIC4uLmZpbHRlclByb3BzKHRoaXMucHJvcHMpLFxuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgLi4uZXh0cmFQcm9wcyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxwYXRoXG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItZ3JpZC1jb25jZW50cmljLXBvbHlnb25cIlxuICAgICAgICBrZXk9e2BwYXRoLSR7aW5kZXh9YH1cbiAgICAgICAgZD17dGhpcy5nZXRQb2x5Z29uUGF0aChyYWRpdXMpfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXcgY29uY2VudHJpYyBheGlzXG4gICAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gQ29uY2VudHJpYyBheGlzXG4gICAqIEB0b2RvIE9wdGltaXplIHRoZSBuYW1lXG4gICAqL1xuICByZW5kZXJDb25jZW50cmljUGF0aCgpIHtcbiAgICBjb25zdCB7IHBvbGFyUmFkaXVzLCBncmlkVHlwZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghcG9sYXJSYWRpdXMgfHwgIXBvbGFyUmFkaXVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxnIGNsYXNzTmFtZT1cInJlY2hhcnRzLXBvbGFyLWdyaWQtY29uY2VudHJpY1wiPlxuICAgICAgICB7cG9sYXJSYWRpdXMubWFwKChlbnRyeTogbnVtYmVyLCBpOiBudW1iZXIpID0+XG4gICAgICAgICAgZ3JpZFR5cGUgPT09ICdjaXJjbGUnID8gdGhpcy5yZW5kZXJDb25jZW50cmljQ2lyY2xlKGVudHJ5LCBpKSA6IHRoaXMucmVuZGVyQ29uY2VudHJpY1BvbHlnb24oZW50cnksIGkpLFxuICAgICAgICApfVxuICAgICAgPC9nPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBvdXRlclJhZGl1cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChvdXRlclJhZGl1cyA8PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGcgY2xhc3NOYW1lPVwicmVjaGFydHMtcG9sYXItZ3JpZFwiPlxuICAgICAgICB7dGhpcy5yZW5kZXJQb2xhckFuZ2xlcygpfVxuICAgICAgICB7dGhpcy5yZW5kZXJDb25jZW50cmljUGF0aCgpfVxuICAgICAgPC9nPlxuICAgICk7XG4gIH1cbn1cbiIsImNvbnN0IFBSRUZJWF9MSVNUID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnXTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlUHJlZml4U3R5bGUgPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY2FtZWxOYW1lID0gbmFtZS5yZXBsYWNlKC8oXFx3KS8sIHYgPT4gdi50b1VwcGVyQ2FzZSgpKTtcbiAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gUFJFRklYX0xJU1QucmVkdWNlKFxuICAgIChyZXMsIGVudHJ5KSA9PiAoe1xuICAgICAgLi4ucmVzLFxuICAgICAgW2VudHJ5ICsgY2FtZWxOYW1lXTogdmFsdWUsXG4gICAgfSksXG4gICAge30sXG4gICk7XG5cbiAgcmVzdWx0W25hbWVdID0gdmFsdWU7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgQ2FydGVzaWFuIEdyaWRcbiAqL1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIFJlYWN0RWxlbWVudCwgU1ZHUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyBDaGFydE9mZnNldCwgRDNTY2FsZSwgZmlsdGVyUHJvcHMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuaW1wb3J0IHsgUHJvcHMgYXMgWEF4aXNQcm9wcyB9IGZyb20gJy4vWEF4aXMnO1xuaW1wb3J0IHsgUHJvcHMgYXMgWUF4aXNQcm9wcyB9IGZyb20gJy4vWUF4aXMnO1xuXG50eXBlIEdyaWRMaW5lVHlwZSA9XG4gIHwgU1ZHUHJvcHM8U1ZHTGluZUVsZW1lbnQ+XG4gIHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+XG4gIHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pXG4gIHwgYm9vbGVhbjtcblxuaW50ZXJmYWNlIEludHJuYWxDYXJ0ZXNpYW5HcmlkUHJvcHMge1xuICB4PzogbnVtYmVyO1xuICB5PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBob3Jpem9udGFsQ29vcmRpbmF0ZXNHZW5lcmF0b3I/OiAocHJvcHM6IGFueSkgPT4gbnVtYmVyW107XG4gIHZlcnRpY2FsQ29vcmRpbmF0ZXNHZW5lcmF0b3I/OiAocHJvcHM6IGFueSkgPT4gbnVtYmVyW107XG4gIHhBeGlzPzogT21pdDxYQXhpc1Byb3BzLCAnc2NhbGUnPiAmIHsgc2NhbGU6IEQzU2NhbGU8c3RyaW5nIHwgbnVtYmVyPiB9O1xuICB5QXhpcz86IE9taXQ8WUF4aXNQcm9wcywgJ3NjYWxlJz4gJiB7IHNjYWxlOiBEM1NjYWxlPHN0cmluZyB8IG51bWJlcj4gfTtcbiAgb2Zmc2V0PzogQ2hhcnRPZmZzZXQ7XG4gIGNoYXJ0V2lkdGg/OiBudW1iZXI7XG4gIGNoYXJ0SGVpZ2h0PzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgQ2FydGVzaWFuR3JpZFByb3BzIGV4dGVuZHMgSW50cm5hbENhcnRlc2lhbkdyaWRQcm9wcyB7XG4gIGhvcml6b250YWw/OiBHcmlkTGluZVR5cGU7XG4gIHZlcnRpY2FsPzogR3JpZExpbmVUeXBlO1xuICBob3Jpem9udGFsUG9pbnRzPzogbnVtYmVyW107XG4gIHZlcnRpY2FsUG9pbnRzPzogbnVtYmVyW107XG4gIHZlcnRpY2FsRmlsbD86IHN0cmluZ1tdO1xuICBob3Jpem9udGFsRmlsbD86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFNWR1Byb3BzPFNWR0VsZW1lbnQ+ICYgQ2FydGVzaWFuR3JpZFByb3BzO1xuXG5leHBvcnQgY2xhc3MgQ2FydGVzaWFuR3JpZCBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NhcnRlc2lhbkdyaWQnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAvLyBUaGUgb3JkaW5hdGVzIG9mIGhvcml6b250YWwgZ3JpZCBsaW5lc1xuICAgIGhvcml6b250YWxQb2ludHM6IFtdIGFzIENhcnRlc2lhbkdyaWRQcm9wc1snaG9yaXpvbnRhbFBvaW50cyddLFxuICAgIC8vIFRoZSBhYnNjaXNzYXMgb2YgdmVydGljYWwgZ3JpZCBsaW5lc1xuICAgIHZlcnRpY2FsUG9pbnRzOiBbXSBhcyBDYXJ0ZXNpYW5HcmlkUHJvcHNbJ3ZlcnRpY2FsUG9pbnRzJ10sXG5cbiAgICBzdHJva2U6ICcjY2NjJyxcbiAgICBmaWxsOiAnbm9uZScsXG4gICAgLy8gVGhlIGZpbGwgb2YgY29sb3JzIG9mIGdyaWQgbGluZXNcbiAgICB2ZXJ0aWNhbEZpbGw6IFtdIGFzIENhcnRlc2lhbkdyaWRQcm9wc1sndmVydGljYWxGaWxsJ10sXG4gICAgaG9yaXpvbnRhbEZpbGw6IFtdIGFzIENhcnRlc2lhbkdyaWRQcm9wc1snaG9yaXpvbnRhbEZpbGwnXSxcbiAgfTtcblxuICBzdGF0aWMgcmVuZGVyTGluZUl0ZW0ob3B0aW9uOiBHcmlkTGluZVR5cGUsIHByb3BzOiBhbnkpIHtcbiAgICBsZXQgbGluZUl0ZW07XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgbGluZUl0ZW0gPSBSZWFjdC5jbG9uZUVsZW1lbnQob3B0aW9uLCBwcm9wcyk7XG4gICAgfSBlbHNlIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9uKSkge1xuICAgICAgbGluZUl0ZW0gPSBvcHRpb24ocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHgxLCB5MSwgeDIsIHkyLCBrZXksIC4uLm90aGVycyB9ID0gcHJvcHM7XG5cbiAgICAgIGxpbmVJdGVtID0gPGxpbmUgey4uLmZpbHRlclByb3BzKG90aGVycyl9IHgxPXt4MX0geTE9e3kxfSB4Mj17eDJ9IHkyPXt5Mn0gZmlsbD1cIm5vbmVcIiBrZXk9e2tleX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVJdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXcgdGhlIGhvcml6b250YWwgZ3JpZCBsaW5lc1xuICAgKiBAcGFyYW0ge0FycmF5fSBob3Jpem9udGFsUG9pbnRzIGVpdGhlciBwYXNzZWQgaW4gYXMgcHJvcHMgb3IgZ2VuZXJhdGVkIGZyb20gZnVuY3Rpb25cbiAgICogQHJldHVybiB7R3JvdXB9IEhvcml6b250YWwgbGluZXNcbiAgICovXG4gIHJlbmRlckhvcml6b250YWwoaG9yaXpvbnRhbFBvaW50czogbnVtYmVyW10pIHtcbiAgICBjb25zdCB7IHgsIHdpZHRoLCBob3Jpem9udGFsIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFob3Jpem9udGFsUG9pbnRzIHx8ICFob3Jpem9udGFsUG9pbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbXMgPSBob3Jpem9udGFsUG9pbnRzLm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgICB4MTogeCxcbiAgICAgICAgeTE6IGVudHJ5LFxuICAgICAgICB4MjogeCArIHdpZHRoLFxuICAgICAgICB5MjogZW50cnksXG4gICAgICAgIGtleTogYGxpbmUtJHtpfWAsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENhcnRlc2lhbkdyaWQucmVuZGVyTGluZUl0ZW0oaG9yaXpvbnRhbCwgcHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxnIGNsYXNzTmFtZT1cInJlY2hhcnRzLWNhcnRlc2lhbi1ncmlkLWhvcml6b250YWxcIj57aXRlbXN9PC9nPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IHZlcnRpY2FsIGdyaWQgbGluZXNcbiAgICogQHBhcmFtIHtBcnJheX0gdmVydGljYWxQb2ludHMgZWl0aGVyIHBhc3NlZCBpbiBhcyBwcm9wcyBvciBnZW5lcmF0ZWQgZnJvbSBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtHcm91cH0gVmVydGljYWwgbGluZXNcbiAgICovXG4gIHJlbmRlclZlcnRpY2FsKHZlcnRpY2FsUG9pbnRzOiBudW1iZXJbXSkge1xuICAgIGNvbnN0IHsgeSwgaGVpZ2h0LCB2ZXJ0aWNhbCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghdmVydGljYWxQb2ludHMgfHwgIXZlcnRpY2FsUG9pbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbXMgPSB2ZXJ0aWNhbFBvaW50cy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgICAgeDE6IGVudHJ5LFxuICAgICAgICB5MTogeSxcbiAgICAgICAgeDI6IGVudHJ5LFxuICAgICAgICB5MjogeSArIGhlaWdodCxcbiAgICAgICAga2V5OiBgbGluZS0ke2l9YCxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ2FydGVzaWFuR3JpZC5yZW5kZXJMaW5lSXRlbSh2ZXJ0aWNhbCwgcHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxnIGNsYXNzTmFtZT1cInJlY2hhcnRzLWNhcnRlc2lhbi1ncmlkLXZlcnRpY2FsXCI+e2l0ZW1zfTwvZz47XG4gIH1cblxuICAvKipcbiAgICogRHJhdyB2ZXJ0aWNhbCBncmlkIHN0cmlwZXMgZmlsbGVkIGJ5IGNvbG9yc1xuICAgKiBAcGFyYW0ge0FycmF5fSB2ZXJ0aWNhbFBvaW50cyBlaXRoZXIgcGFzc2VkIGluIGFzIHByb3BzIG9yIGdlbmVyYXRlZCBmcm9tIGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge0dyb3VwfSBWZXJ0aWNhbCBzdHJpcGVzXG4gICAqL1xuICByZW5kZXJWZXJ0aWNhbFN0cmlwZXModmVydGljYWxQb2ludHM6IG51bWJlcltdKSB7XG4gICAgY29uc3QgeyB2ZXJ0aWNhbEZpbGwgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCF2ZXJ0aWNhbEZpbGwgfHwgIXZlcnRpY2FsRmlsbC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZmlsbE9wYWNpdHksIHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdmVydGljYWxQb2ludHNVcGRhdGVkID0gdmVydGljYWxQb2ludHMuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG5cbiAgICBpZiAoeCAhPT0gdmVydGljYWxQb2ludHNVcGRhdGVkWzBdKSB7XG4gICAgICB2ZXJ0aWNhbFBvaW50c1VwZGF0ZWQudW5zaGlmdCgwKTtcbiAgICB9XG5cbiAgICBjb25zdCBpdGVtcyA9IHZlcnRpY2FsUG9pbnRzVXBkYXRlZC5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICBjb25zdCBsaW5lV2lkdGggPSB2ZXJ0aWNhbFBvaW50c1VwZGF0ZWRbaSArIDFdID8gdmVydGljYWxQb2ludHNVcGRhdGVkW2kgKyAxXSAtIGVudHJ5IDogeCArIHdpZHRoIC0gZW50cnk7XG4gICAgICBpZiAobGluZVdpZHRoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2xvckluZGV4ID0gaSAlIHZlcnRpY2FsRmlsbC5sZW5ndGg7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8cmVjdFxuICAgICAgICAgIGtleT17YHJlYWN0LSR7aX1gfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgIHg9e01hdGgucm91bmQoZW50cnkgKyB4IC0geCl9XG4gICAgICAgICAgeT17eX1cbiAgICAgICAgICB3aWR0aD17bGluZVdpZHRofVxuICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICAgIGZpbGw9e3ZlcnRpY2FsRmlsbFtjb2xvckluZGV4XX1cbiAgICAgICAgICBmaWxsT3BhY2l0eT17ZmlsbE9wYWNpdHl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVjaGFydHMtY2FydGVzaWFuLWdyaWQtYmdcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiA8ZyBjbGFzc05hbWU9XCJyZWNoYXJ0cy1jYXJ0ZXNpYW4tZ3JpZHN0cmlwZXMtdmVydGljYWxcIj57aXRlbXN9PC9nPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IGhvcml6b250YWwgZ3JpZCBzdHJpcGVzIGZpbGxlZCBieSBjb2xvcnNcbiAgICogQHBhcmFtIHtBcnJheX0gaG9yaXpvbnRhbFBvaW50cyBlaXRoZXIgcGFzc2VkIGluIGFzIHByb3BzIG9yIGdlbmVyYXRlZCBmcm9tIGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge0dyb3VwfSBIb3Jpem9udGFsIHN0cmlwZXNcbiAgICovXG4gIHJlbmRlckhvcml6b250YWxTdHJpcGVzKGhvcml6b250YWxQb2ludHM6IG51bWJlcltdKSB7XG4gICAgY29uc3QgeyBob3Jpem9udGFsRmlsbCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWhvcml6b250YWxGaWxsIHx8ICFob3Jpem9udGFsRmlsbC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZmlsbE9wYWNpdHksIHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaG9yaXpvbnRhbFBvaW50c1VwZGF0ZWQgPSBob3Jpem9udGFsUG9pbnRzLnNsaWNlKCkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgIGlmICh5ICE9PSBob3Jpem9udGFsUG9pbnRzVXBkYXRlZFswXSkge1xuICAgICAgaG9yaXpvbnRhbFBvaW50c1VwZGF0ZWQudW5zaGlmdCgwKTtcbiAgICB9XG5cbiAgICBjb25zdCBpdGVtcyA9IGhvcml6b250YWxQb2ludHNVcGRhdGVkLm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBob3Jpem9udGFsUG9pbnRzVXBkYXRlZFtpICsgMV0gPyBob3Jpem9udGFsUG9pbnRzVXBkYXRlZFtpICsgMV0gLSBlbnRyeSA6IHkgKyBoZWlnaHQgLSBlbnRyeTtcbiAgICAgIGlmIChsaW5lSGVpZ2h0IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2xvckluZGV4ID0gaSAlIGhvcml6b250YWxGaWxsLmxlbmd0aDtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxyZWN0XG4gICAgICAgICAga2V5PXtgcmVhY3QtJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgeT17TWF0aC5yb3VuZChlbnRyeSArIHkgLSB5KX1cbiAgICAgICAgICB4PXt4fVxuICAgICAgICAgIGhlaWdodD17bGluZUhlaWdodH1cbiAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgc3Ryb2tlPVwibm9uZVwiXG4gICAgICAgICAgZmlsbD17aG9yaXpvbnRhbEZpbGxbY29sb3JJbmRleF19XG4gICAgICAgICAgZmlsbE9wYWNpdHk9e2ZpbGxPcGFjaXR5fVxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLWNhcnRlc2lhbi1ncmlkLWJnXCJcbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gPGcgY2xhc3NOYW1lPVwicmVjaGFydHMtY2FydGVzaWFuLWdyaWRzdHJpcGVzLWhvcml6b250YWxcIj57aXRlbXN9PC9nPjtcbiAgfVxuXG4gIHJlbmRlckJhY2tncm91bmQoKSB7XG4gICAgY29uc3QgeyBmaWxsIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFmaWxsIHx8IGZpbGwgPT09ICdub25lJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBmaWxsT3BhY2l0eSwgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8cmVjdFxuICAgICAgICB4PXt4fVxuICAgICAgICB5PXt5fVxuICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICBzdHJva2U9XCJub25lXCJcbiAgICAgICAgZmlsbD17ZmlsbH1cbiAgICAgICAgZmlsbE9wYWNpdHk9e2ZpbGxPcGFjaXR5fVxuICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy1jYXJ0ZXNpYW4tZ3JpZC1iZ1wiXG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGhvcml6b250YWwsXG4gICAgICB2ZXJ0aWNhbCxcbiAgICAgIGhvcml6b250YWxDb29yZGluYXRlc0dlbmVyYXRvcixcbiAgICAgIHZlcnRpY2FsQ29vcmRpbmF0ZXNHZW5lcmF0b3IsXG4gICAgICB4QXhpcyxcbiAgICAgIHlBeGlzLFxuICAgICAgb2Zmc2V0LFxuICAgICAgY2hhcnRXaWR0aCxcbiAgICAgIGNoYXJ0SGVpZ2h0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKFxuICAgICAgIWlzTnVtYmVyKHdpZHRoKSB8fFxuICAgICAgd2lkdGggPD0gMCB8fFxuICAgICAgIWlzTnVtYmVyKGhlaWdodCkgfHxcbiAgICAgIGhlaWdodCA8PSAwIHx8XG4gICAgICAhaXNOdW1iZXIoeCkgfHxcbiAgICAgIHggIT09ICt4IHx8XG4gICAgICAhaXNOdW1iZXIoeSkgfHxcbiAgICAgIHkgIT09ICt5XG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgeyBob3Jpem9udGFsUG9pbnRzLCB2ZXJ0aWNhbFBvaW50cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIE5vIGhvcml6b250YWwgcG9pbnRzIGFyZSBzcGVjaWZpZWRcbiAgICBpZiAoKCFob3Jpem9udGFsUG9pbnRzIHx8ICFob3Jpem9udGFsUG9pbnRzLmxlbmd0aCkgJiYgXy5pc0Z1bmN0aW9uKGhvcml6b250YWxDb29yZGluYXRlc0dlbmVyYXRvcikpIHtcbiAgICAgIGhvcml6b250YWxQb2ludHMgPSBob3Jpem9udGFsQ29vcmRpbmF0ZXNHZW5lcmF0b3IoeyB5QXhpcywgd2lkdGg6IGNoYXJ0V2lkdGgsIGhlaWdodDogY2hhcnRIZWlnaHQsIG9mZnNldCB9KTtcbiAgICB9XG5cbiAgICAvLyBObyB2ZXJ0aWNhbCBwb2ludHMgYXJlIHNwZWNpZmllZFxuICAgIGlmICgoIXZlcnRpY2FsUG9pbnRzIHx8ICF2ZXJ0aWNhbFBvaW50cy5sZW5ndGgpICYmIF8uaXNGdW5jdGlvbih2ZXJ0aWNhbENvb3JkaW5hdGVzR2VuZXJhdG9yKSkge1xuICAgICAgdmVydGljYWxQb2ludHMgPSB2ZXJ0aWNhbENvb3JkaW5hdGVzR2VuZXJhdG9yKHsgeEF4aXMsIHdpZHRoOiBjaGFydFdpZHRoLCBoZWlnaHQ6IGNoYXJ0SGVpZ2h0LCBvZmZzZXQgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxnIGNsYXNzTmFtZT1cInJlY2hhcnRzLWNhcnRlc2lhbi1ncmlkXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlckJhY2tncm91bmQoKX1cbiAgICAgICAge2hvcml6b250YWwgJiYgdGhpcy5yZW5kZXJIb3Jpem9udGFsKGhvcml6b250YWxQb2ludHMpfVxuICAgICAgICB7dmVydGljYWwgJiYgdGhpcy5yZW5kZXJWZXJ0aWNhbCh2ZXJ0aWNhbFBvaW50cyl9XG5cbiAgICAgICAge2hvcml6b250YWwgJiYgdGhpcy5yZW5kZXJIb3Jpem9udGFsU3RyaXBlcyhob3Jpem9udGFsUG9pbnRzKX1cbiAgICAgICAge3ZlcnRpY2FsICYmIHRoaXMucmVuZGVyVmVydGljYWxTdHJpcGVzKHZlcnRpY2FsUG9pbnRzKX1cbiAgICAgIDwvZz5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgTGluZSBDaGFydFxuICovXG5pbXBvcnQgeyBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQgfSBmcm9tICcuL2dlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCc7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vY2FydGVzaWFuL0xpbmUnO1xuaW1wb3J0IHsgWEF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWEF4aXMnO1xuaW1wb3J0IHsgWUF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWUF4aXMnO1xuaW1wb3J0IHsgZm9ybWF0QXhpc01hcCB9IGZyb20gJy4uL3V0aWwvQ2FydGVzaWFuVXRpbHMnO1xuaW1wb3J0IHsgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IExpbmVDaGFydCA9IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCh7XG4gIGNoYXJ0TmFtZTogJ0xpbmVDaGFydCcsXG4gIEdyYXBoaWNhbENoaWxkOiBMaW5lLFxuICBheGlzQ29tcG9uZW50czogW1xuICAgIHsgYXhpc1R5cGU6ICd4QXhpcycsIEF4aXNDb21wOiBYQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICd5QXhpcycsIEF4aXNDb21wOiBZQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxufSBhcyBDYXRlZ29yaWNhbENoYXJ0T3B0aW9ucyk7XG4iLCJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWZlcmVuY2VEb3QgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vUmVmZXJlbmNlRG90JztcbmltcG9ydCB7IFJlZmVyZW5jZUxpbmUgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vUmVmZXJlbmNlTGluZSc7XG5pbXBvcnQgeyBSZWZlcmVuY2VBcmVhIH0gZnJvbSAnLi4vY2FydGVzaWFuL1JlZmVyZW5jZUFyZWEnO1xuaW1wb3J0IHsgaWZPdmVyZmxvd01hdGNoZXMgfSBmcm9tICcuL0lmT3ZlcmZsb3dNYXRjaGVzJztcbmltcG9ydCB7IGZpbmRBbGxCeVR5cGUgfSBmcm9tICcuL1JlYWN0VXRpbHMnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuL0RhdGFVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBkZXRlY3RSZWZlcmVuY2VFbGVtZW50c0RvbWFpbiA9IChcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZVtdLFxuICBkb21haW46IG51bWJlcltdLFxuICBheGlzSWQ6IHN0cmluZyxcbiAgYXhpc1R5cGU6IHN0cmluZyxcbiAgc3BlY2lmaWVkVGlja3M/OiBhbnlbXSxcbikgPT4ge1xuICBjb25zdCBsaW5lcyA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIFJlZmVyZW5jZUxpbmUuZGlzcGxheU5hbWUpO1xuICBjb25zdCBkb3RzID0gZmluZEFsbEJ5VHlwZShjaGlsZHJlbiwgUmVmZXJlbmNlRG90LmRpc3BsYXlOYW1lKTtcbiAgY29uc3QgZWxlbWVudHMgPSBsaW5lcy5jb25jYXQoZG90cyk7XG4gIGNvbnN0IGFyZWFzID0gZmluZEFsbEJ5VHlwZShjaGlsZHJlbiwgUmVmZXJlbmNlQXJlYS5kaXNwbGF5TmFtZSk7XG4gIGNvbnN0IGlkS2V5ID0gYCR7YXhpc1R5cGV9SWRgO1xuICBjb25zdCB2YWx1ZUtleSA9IGF4aXNUeXBlWzBdO1xuICBsZXQgZmluYWxEb21haW4gPSBkb21haW47XG5cbiAgaWYgKGVsZW1lbnRzLmxlbmd0aCkge1xuICAgIGZpbmFsRG9tYWluID0gZWxlbWVudHMucmVkdWNlKChyZXN1bHQ6IG51bWJlcltdLCBlbDogYW55KSA9PiB7XG4gICAgICBpZiAoZWwucHJvcHNbaWRLZXldID09PSBheGlzSWQgJiYgaWZPdmVyZmxvd01hdGNoZXMoZWwucHJvcHMsICdleHRlbmREb21haW4nKSAmJiBpc051bWJlcihlbC5wcm9wc1t2YWx1ZUtleV0pKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZWwucHJvcHNbdmFsdWVLZXldO1xuXG4gICAgICAgIHJldHVybiBbTWF0aC5taW4ocmVzdWx0WzBdLCB2YWx1ZSksIE1hdGgubWF4KHJlc3VsdFsxXSwgdmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgZmluYWxEb21haW4pO1xuICB9XG5cbiAgaWYgKGFyZWFzLmxlbmd0aCkge1xuICAgIGNvbnN0IGtleTEgPSBgJHt2YWx1ZUtleX0xYDtcbiAgICBjb25zdCBrZXkyID0gYCR7dmFsdWVLZXl9MmA7XG5cbiAgICBmaW5hbERvbWFpbiA9IGFyZWFzLnJlZHVjZSgocmVzdWx0OiBudW1iZXJbXSwgZWw6IGFueSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBlbC5wcm9wc1tpZEtleV0gPT09IGF4aXNJZCAmJlxuICAgICAgICBpZk92ZXJmbG93TWF0Y2hlcyhlbC5wcm9wcywgJ2V4dGVuZERvbWFpbicpICYmXG4gICAgICAgIGlzTnVtYmVyKGVsLnByb3BzW2tleTFdKSAmJlxuICAgICAgICBpc051bWJlcihlbC5wcm9wc1trZXkyXSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCB2YWx1ZTEgPSBlbC5wcm9wc1trZXkxXTtcbiAgICAgICAgY29uc3QgdmFsdWUyID0gZWwucHJvcHNba2V5Ml07XG5cbiAgICAgICAgcmV0dXJuIFtNYXRoLm1pbihyZXN1bHRbMF0sIHZhbHVlMSwgdmFsdWUyKSwgTWF0aC5tYXgocmVzdWx0WzFdLCB2YWx1ZTEsIHZhbHVlMildO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCBmaW5hbERvbWFpbik7XG4gIH1cblxuICBpZiAoc3BlY2lmaWVkVGlja3MgJiYgc3BlY2lmaWVkVGlja3MubGVuZ3RoKSB7XG4gICAgZmluYWxEb21haW4gPSBzcGVjaWZpZWRUaWNrcy5yZWR1Y2UoKHJlc3VsdCwgdGljaykgPT4ge1xuICAgICAgaWYgKGlzTnVtYmVyKHRpY2spKSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5taW4ocmVzdWx0WzBdLCB0aWNrKSwgTWF0aC5tYXgocmVzdWx0WzFdLCB0aWNrKV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgZmluYWxEb21haW4pO1xuICB9XG5cbiAgcmV0dXJuIGZpbmFsRG9tYWluO1xufTtcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5cbmNvbnN0IGV2ZW50Q2VudGVyOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbmlmIChldmVudENlbnRlci5zZXRNYXhMaXN0ZW5lcnMpIHtcbiAgZXZlbnRDZW50ZXIuc2V0TWF4TGlzdGVuZXJzKDEwKTtcbn1cblxuZXhwb3J0IHsgZXZlbnRDZW50ZXIgfTtcbmV4cG9ydCBjb25zdCBTWU5DX0VWRU5UID0gJ3JlY2hhcnRzLnN5bmNNb3VzZUV2ZW50cyc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgQmFyIENoYXJ0XG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCB9IGZyb20gJy4vZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0JztcbmltcG9ydCB7IEJhciB9IGZyb20gJy4uL2NhcnRlc2lhbi9CYXInO1xuaW1wb3J0IHsgWEF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWEF4aXMnO1xuaW1wb3J0IHsgWUF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWUF4aXMnO1xuaW1wb3J0IHsgZm9ybWF0QXhpc01hcCB9IGZyb20gJy4uL3V0aWwvQ2FydGVzaWFuVXRpbHMnO1xuaW1wb3J0IHsgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEJhckNoYXJ0ID0gZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0KHtcbiAgY2hhcnROYW1lOiAnQmFyQ2hhcnQnLFxuICBHcmFwaGljYWxDaGlsZDogQmFyLFxuICBheGlzQ29tcG9uZW50czogW1xuICAgIHsgYXhpc1R5cGU6ICd4QXhpcycsIEF4aXNDb21wOiBYQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICd5QXhpcycsIEF4aXNDb21wOiBZQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxufSBhcyBDYXRlZ29yaWNhbENoYXJ0T3B0aW9ucyk7XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgUGllIENoYXJ0XG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCB9IGZyb20gJy4vZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0JztcbmltcG9ydCB7IFBvbGFyQW5nbGVBeGlzIH0gZnJvbSAnLi4vcG9sYXIvUG9sYXJBbmdsZUF4aXMnO1xuaW1wb3J0IHsgUG9sYXJSYWRpdXNBeGlzIH0gZnJvbSAnLi4vcG9sYXIvUG9sYXJSYWRpdXNBeGlzJztcbmltcG9ydCB7IGZvcm1hdEF4aXNNYXAgfSBmcm9tICcuLi91dGlsL1BvbGFyVXRpbHMnO1xuaW1wb3J0IHsgUGllIH0gZnJvbSAnLi4vcG9sYXIvUGllJztcbmltcG9ydCB7IENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBQaWVDaGFydCA9IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCh7XG4gIGNoYXJ0TmFtZTogJ1BpZUNoYXJ0JyxcbiAgR3JhcGhpY2FsQ2hpbGQ6IFBpZSxcbiAgZXZlbnRUeXBlOiAnaXRlbScsXG4gIGxlZ2VuZENvbnRlbnQ6ICdjaGlsZHJlbicsXG4gIGF4aXNDb21wb25lbnRzOiBbXG4gICAgeyBheGlzVHlwZTogJ2FuZ2xlQXhpcycsIEF4aXNDb21wOiBQb2xhckFuZ2xlQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICdyYWRpdXNBeGlzJywgQXhpc0NvbXA6IFBvbGFyUmFkaXVzQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBsYXlvdXQ6ICdjZW50cmljJyxcbiAgICBzdGFydEFuZ2xlOiAwLFxuICAgIGVuZEFuZ2xlOiAzNjAsXG4gICAgY3g6ICc1MCUnLFxuICAgIGN5OiAnNTAlJyxcbiAgICBpbm5lclJhZGl1czogMCxcbiAgICBvdXRlclJhZGl1czogJzgwJScsXG4gIH0sXG59IGFzIENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFRyZWVtYXBDaGFydFxuICovXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTbW9vdGggZnJvbSAncmVhY3Qtc21vb3RoJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFN1cmZhY2UgfSBmcm9tICcuLi9jb250YWluZXIvU3VyZmFjZSc7XG5pbXBvcnQgeyBMYXllciB9IGZyb20gJy4uL2NvbnRhaW5lci9MYXllcic7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi9zaGFwZS9SZWN0YW5nbGUnO1xuaW1wb3J0IHsgZmluZENoaWxkQnlUeXBlLCBmaWx0ZXJTdmdFbGVtZW50cywgdmFsaWRhdGVXaWR0aEhlaWdodCB9IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuLi91dGlsL0dsb2JhbCc7XG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi4vY29tcG9uZW50L1Rvb2x0aXAnO1xuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gJy4uL3NoYXBlL1BvbHlnb24nO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgQ09MT1JfUEFORUwgfSBmcm9tICcuLi91dGlsL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRTdHJpbmdTaXplIH0gZnJvbSAnLi4vdXRpbC9ET01VdGlscyc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uL3V0aWwvRGF0YVV0aWxzJztcbmltcG9ydCB7IERhdGFLZXksIGZpbHRlclByb3BzLCBUcmVlbWFwTm9kZSB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5jb25zdCBjb21wdXRlTm9kZSA9ICh7XG4gIGRlcHRoLFxuICBub2RlLFxuICBpbmRleCxcbiAgdmFsdWVLZXksXG59OiB7XG4gIGRlcHRoOiBudW1iZXI7XG4gIG5vZGU6IFRyZWVtYXBOb2RlO1xuICBpbmRleDogbnVtYmVyO1xuICB2YWx1ZUtleTogRGF0YUtleTxhbnk+O1xufSkgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBub2RlO1xuICBjb25zdCBjaGlsZERlcHRoID0gZGVwdGggKyAxO1xuICBjb25zdCBjb21wdXRlZENoaWxkcmVuID1cbiAgICBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGhcbiAgICAgID8gY2hpbGRyZW4ubWFwKChjaGlsZDogVHJlZW1hcE5vZGUsIGk6IG51bWJlcikgPT5cbiAgICAgICAgICBjb21wdXRlTm9kZSh7IGRlcHRoOiBjaGlsZERlcHRoLCBub2RlOiBjaGlsZCwgaW5kZXg6IGksIHZhbHVlS2V5IH0pLFxuICAgICAgICApXG4gICAgICA6IG51bGw7XG4gIGxldCB2YWx1ZTtcblxuICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgdmFsdWUgPSBjb21wdXRlZENoaWxkcmVuLnJlZHVjZSgocmVzdWx0OiBhbnksIGNoaWxkOiBUcmVlbWFwTm9kZSkgPT4gcmVzdWx0ICsgY2hpbGQudmFsdWUsIDApO1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE8gbmVlZCB0byB2ZXJpZnkgdmFsdWVLZXlcbiAgICB2YWx1ZSA9IF8uaXNOYU4obm9kZVt2YWx1ZUtleSBhcyBzdHJpbmddKSB8fCBub2RlW3ZhbHVlS2V5IGFzIHN0cmluZ10gPD0gMCA/IDAgOiBub2RlW3ZhbHVlS2V5IGFzIHN0cmluZ107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLm5vZGUsXG4gICAgY2hpbGRyZW46IGNvbXB1dGVkQ2hpbGRyZW4sXG4gICAgdmFsdWUsXG4gICAgZGVwdGgsXG4gICAgaW5kZXgsXG4gIH07XG59O1xuXG5jb25zdCBmaWx0ZXJSZWN0ID0gKG5vZGU6IFRyZWVtYXBOb2RlKSA9PiAoeyB4OiBub2RlLngsIHk6IG5vZGUueSwgd2lkdGg6IG5vZGUud2lkdGgsIGhlaWdodDogbm9kZS5oZWlnaHQgfSk7XG5cbi8vIENvbXB1dGUgdGhlIGFyZWEgZm9yIGVhY2ggY2hpbGQgYmFzZWQgb24gdmFsdWUgJiBzY2FsZS5cbmNvbnN0IGdldEFyZWFPZkNoaWxkcmVuID0gKGNoaWxkcmVuOiBUcmVlbWFwTm9kZVtdLCBhcmVhVmFsdWVSYXRpbzogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHJhdGlvID0gYXJlYVZhbHVlUmF0aW8gPCAwID8gMCA6IGFyZWFWYWx1ZVJhdGlvO1xuXG4gIHJldHVybiBjaGlsZHJlbi5tYXAoKGNoaWxkOiBUcmVlbWFwTm9kZSkgPT4ge1xuICAgIGNvbnN0IGFyZWEgPSBjaGlsZC52YWx1ZSAqIHJhdGlvO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNoaWxkLFxuICAgICAgYXJlYTogXy5pc05hTihhcmVhKSB8fCBhcmVhIDw9IDAgPyAwIDogYXJlYSxcbiAgICB9O1xuICB9KTtcbn07XG5cbi8vIENvbXB1dGVzIHRoZSBzY29yZSBmb3IgdGhlIHNwZWNpZmllZCByb3csIGFzIHRoZSB3b3JzdCBhc3BlY3QgcmF0aW8uXG5jb25zdCBnZXRXb3JzdFNjb3JlID0gKHJvdzogYW55LCBwYXJlbnRTaXplOiBudW1iZXIsIGFzcGVjdFJhdGlvOiBudW1iZXIpID0+IHtcbiAgY29uc3QgcGFyZW50QXJlYSA9IHBhcmVudFNpemUgKiBwYXJlbnRTaXplO1xuICBjb25zdCByb3dBcmVhID0gcm93LmFyZWEgKiByb3cuYXJlYTtcbiAgY29uc3QgeyBtaW4sIG1heCB9ID0gcm93LnJlZHVjZShcbiAgICAocmVzdWx0OiBhbnksIGNoaWxkOiBhbnkpID0+ICh7XG4gICAgICBtaW46IE1hdGgubWluKHJlc3VsdC5taW4sIGNoaWxkLmFyZWEpLFxuICAgICAgbWF4OiBNYXRoLm1heChyZXN1bHQubWF4LCBjaGlsZC5hcmVhKSxcbiAgICB9KSxcbiAgICB7IG1pbjogSW5maW5pdHksIG1heDogMCB9LFxuICApO1xuXG4gIHJldHVybiByb3dBcmVhXG4gICAgPyBNYXRoLm1heCgocGFyZW50QXJlYSAqIG1heCAqIGFzcGVjdFJhdGlvKSAvIHJvd0FyZWEsIHJvd0FyZWEgLyAocGFyZW50QXJlYSAqIG1pbiAqIGFzcGVjdFJhdGlvKSlcbiAgICA6IEluZmluaXR5O1xufTtcblxuY29uc3QgaG9yaXpvbnRhbFBvc2l0aW9uID0gKHJvdzogYW55LCBwYXJlbnRTaXplOiBudW1iZXIsIHBhcmVudFJlY3Q6IFRyZWVtYXBOb2RlLCBpc0ZsdXNoOiBib29sZWFuKSA9PiB7XG4gIGxldCByb3dIZWlnaHQgPSBwYXJlbnRTaXplID8gTWF0aC5yb3VuZChyb3cuYXJlYSAvIHBhcmVudFNpemUpIDogMDtcblxuICBpZiAoaXNGbHVzaCB8fCByb3dIZWlnaHQgPiBwYXJlbnRSZWN0LmhlaWdodCkge1xuICAgIHJvd0hlaWdodCA9IHBhcmVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgbGV0IGN1clggPSBwYXJlbnRSZWN0Lng7XG4gIGxldCBjaGlsZDtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJvdy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNoaWxkID0gcm93W2ldO1xuICAgIGNoaWxkLnggPSBjdXJYO1xuICAgIGNoaWxkLnkgPSBwYXJlbnRSZWN0Lnk7XG4gICAgY2hpbGQuaGVpZ2h0ID0gcm93SGVpZ2h0O1xuICAgIGNoaWxkLndpZHRoID0gTWF0aC5taW4ocm93SGVpZ2h0ID8gTWF0aC5yb3VuZChjaGlsZC5hcmVhIC8gcm93SGVpZ2h0KSA6IDAsIHBhcmVudFJlY3QueCArIHBhcmVudFJlY3Qud2lkdGggLSBjdXJYKTtcbiAgICBjdXJYICs9IGNoaWxkLndpZHRoO1xuICB9XG4gIC8vIHdoYXQncyB6XG4gIGNoaWxkLnogPSB0cnVlO1xuICAvLyBhZGQgdGhlIHJlbWFpbiB4IHRvIHRoZSBsYXN0IG9uZSBvZiByb3dcbiAgY2hpbGQud2lkdGggKz0gcGFyZW50UmVjdC54ICsgcGFyZW50UmVjdC53aWR0aCAtIGN1clg7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJlbnRSZWN0LFxuICAgIHk6IHBhcmVudFJlY3QueSArIHJvd0hlaWdodCxcbiAgICBoZWlnaHQ6IHBhcmVudFJlY3QuaGVpZ2h0IC0gcm93SGVpZ2h0LFxuICB9O1xufTtcblxuY29uc3QgdmVydGljYWxQb3NpdGlvbiA9IChyb3c6IGFueSwgcGFyZW50U2l6ZTogbnVtYmVyLCBwYXJlbnRSZWN0OiBUcmVlbWFwTm9kZSwgaXNGbHVzaDogYm9vbGVhbik6IFRyZWVtYXBOb2RlID0+IHtcbiAgbGV0IHJvd1dpZHRoID0gcGFyZW50U2l6ZSA/IE1hdGgucm91bmQocm93LmFyZWEgLyBwYXJlbnRTaXplKSA6IDA7XG5cbiAgaWYgKGlzRmx1c2ggfHwgcm93V2lkdGggPiBwYXJlbnRSZWN0LndpZHRoKSB7XG4gICAgcm93V2lkdGggPSBwYXJlbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgbGV0IGN1clkgPSBwYXJlbnRSZWN0Lnk7XG4gIGxldCBjaGlsZDtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJvdy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNoaWxkID0gcm93W2ldO1xuICAgIGNoaWxkLnggPSBwYXJlbnRSZWN0Lng7XG4gICAgY2hpbGQueSA9IGN1clk7XG4gICAgY2hpbGQud2lkdGggPSByb3dXaWR0aDtcbiAgICBjaGlsZC5oZWlnaHQgPSBNYXRoLm1pbihyb3dXaWR0aCA/IE1hdGgucm91bmQoY2hpbGQuYXJlYSAvIHJvd1dpZHRoKSA6IDAsIHBhcmVudFJlY3QueSArIHBhcmVudFJlY3QuaGVpZ2h0IC0gY3VyWSk7XG4gICAgY3VyWSArPSBjaGlsZC5oZWlnaHQ7XG4gIH1cbiAgaWYgKGNoaWxkKSB7XG4gICAgY2hpbGQueiA9IGZhbHNlO1xuICAgIGNoaWxkLmhlaWdodCArPSBwYXJlbnRSZWN0LnkgKyBwYXJlbnRSZWN0LmhlaWdodCAtIGN1clk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLnBhcmVudFJlY3QsXG4gICAgeDogcGFyZW50UmVjdC54ICsgcm93V2lkdGgsXG4gICAgd2lkdGg6IHBhcmVudFJlY3Qud2lkdGggLSByb3dXaWR0aCxcbiAgfTtcbn07XG5cbmNvbnN0IHBvc2l0aW9uID0gKHJvdzogYW55LCBwYXJlbnRTaXplOiBudW1iZXIsIHBhcmVudFJlY3Q6IFRyZWVtYXBOb2RlLCBpc0ZsdXNoOiBib29sZWFuKTogVHJlZW1hcE5vZGUgPT4ge1xuICBpZiAocGFyZW50U2l6ZSA9PT0gcGFyZW50UmVjdC53aWR0aCkge1xuICAgIHJldHVybiBob3Jpem9udGFsUG9zaXRpb24ocm93LCBwYXJlbnRTaXplLCBwYXJlbnRSZWN0LCBpc0ZsdXNoKTtcbiAgfVxuXG4gIHJldHVybiB2ZXJ0aWNhbFBvc2l0aW9uKHJvdywgcGFyZW50U2l6ZSwgcGFyZW50UmVjdCwgaXNGbHVzaCk7XG59O1xuXG4vLyBSZWN1cnNpdmVseSBhcnJhbmdlcyB0aGUgc3BlY2lmaWVkIG5vZGUncyBjaGlsZHJlbiBpbnRvIHNxdWFyaWZpZWQgcm93cy5cbmNvbnN0IHNxdWFyaWZ5ID0gKG5vZGU6IFRyZWVtYXBOb2RlLCBhc3BlY3RSYXRpbzogbnVtYmVyKTogVHJlZW1hcE5vZGUgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBub2RlO1xuXG4gIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBsZXQgcmVjdCA9IGZpbHRlclJlY3Qobm9kZSkgYXMgYW55O1xuICAgIC8vIG1heWJlIGEgYnVnXG4gICAgY29uc3Qgcm93ID0gW10gYXMgYW55O1xuICAgIGxldCBiZXN0ID0gSW5maW5pdHk7IC8vIHRoZSBiZXN0IHJvdyBzY29yZSBzbyBmYXJcbiAgICBsZXQgY2hpbGQsIHNjb3JlOyAvLyB0aGUgY3VycmVudCByb3cgc2NvcmVcbiAgICBsZXQgc2l6ZSA9IE1hdGgubWluKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTsgLy8gaW5pdGlhbCBvcmllbnRhdGlvblxuICAgIGNvbnN0IHNjYWxlQ2hpbGRyZW4gPSBnZXRBcmVhT2ZDaGlsZHJlbihjaGlsZHJlbiwgKHJlY3Qud2lkdGggKiByZWN0LmhlaWdodCkgLyBub2RlLnZhbHVlKTtcbiAgICBjb25zdCB0ZW1wQ2hpbGRyZW4gPSBzY2FsZUNoaWxkcmVuLnNsaWNlKCk7XG5cbiAgICByb3cuYXJlYSA9IDA7XG5cbiAgICB3aGlsZSAodGVtcENoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHJvdyBmaXJzdFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICByb3cucHVzaCgoY2hpbGQgPSB0ZW1wQ2hpbGRyZW5bMF0pKTtcbiAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG5cbiAgICAgIHNjb3JlID0gZ2V0V29yc3RTY29yZShyb3csIHNpemUsIGFzcGVjdFJhdGlvKTtcbiAgICAgIGlmIChzY29yZSA8PSBiZXN0KSB7XG4gICAgICAgIC8vIGNvbnRpbnVlIHdpdGggdGhpcyBvcmllbnRhdGlvblxuICAgICAgICB0ZW1wQ2hpbGRyZW4uc2hpZnQoKTtcbiAgICAgICAgYmVzdCA9IHNjb3JlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYWJvcnQsIGFuZCB0cnkgYSBkaWZmZXJlbnQgb3JpZW50YXRpb25cbiAgICAgICAgcm93LmFyZWEgLT0gcm93LnBvcCgpLmFyZWE7XG4gICAgICAgIHJlY3QgPSBwb3NpdGlvbihyb3csIHNpemUsIHJlY3QsIGZhbHNlKTtcbiAgICAgICAgc2l6ZSA9IE1hdGgubWluKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbiAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDtcbiAgICAgICAgYmVzdCA9IEluZmluaXR5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyb3cubGVuZ3RoKSB7XG4gICAgICByZWN0ID0gcG9zaXRpb24ocm93LCBzaXplLCByZWN0LCB0cnVlKTtcbiAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm5vZGUsXG4gICAgICBjaGlsZHJlbjogc2NhbGVDaGlsZHJlbi5tYXAoYyA9PiBzcXVhcmlmeShjLCBhc3BlY3RSYXRpbykpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHdpZHRoPzogbnVtYmVyO1xuXG4gIGhlaWdodD86IG51bWJlcjtcblxuICBkYXRhPzogYW55W107XG5cbiAgYW5pbWF0aW9uSWQ/OiBudW1iZXI7XG5cbiAgc3R5bGU/OiBhbnk7XG5cbiAgYXNwZWN0UmF0aW8/OiBudW1iZXI7XG5cbiAgY29udGVudD86IFJlYWN0LlJlYWN0RWxlbWVudDtcblxuICBmaWxsPzogc3RyaW5nO1xuXG4gIHN0cm9rZT86IHN0cmluZztcblxuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgbmFtZUtleT86IERhdGFLZXk8YW55PjtcblxuICBkYXRhS2V5PzogRGF0YUtleTxhbnk+O1xuXG4gIGNoaWxkcmVuPzogYW55O1xuXG4gIC8vIG9wdGlvbmFsIHZhbHVlcyBmbGF0L25lc3QsIGZsYXQgc2hvdyB3aG9sZSB0cmVlbWFwLCBuZXN0IG9ubHkgc2hvdyBkZXB0aD0xIG5vZGVcbiAgdHlwZT86ICdmbGF0JyB8ICduZXN0JztcblxuICBjb2xvclBhbmVsPzogW107XG5cbiAgLy8gY3VzdG9taXplIG5lc3QgaW5kZXggY29udGVudFxuICBuZXN0SW5kZXhDb250ZW50PzogUmVhY3QuUmVhY3RFbGVtZW50IHwgKChpdGVtOiBhbnksIGk6IG51bWJlcikgPT4gYW55KTtcblxuICBvbkFuaW1hdGlvblN0YXJ0PzogKCkgPT4gdm9pZDtcblxuICBvbkFuaW1hdGlvbkVuZD86ICgpID0+IHZvaWQ7XG5cbiAgb25Nb3VzZUVudGVyPzogKG5vZGU6IFRyZWVtYXBOb2RlLCBlOiBhbnkpID0+IHZvaWQ7XG5cbiAgb25Nb3VzZUxlYXZlPzogKG5vZGU6IFRyZWVtYXBOb2RlLCBlOiBhbnkpID0+IHZvaWQ7XG5cbiAgb25DbGljaz86IChub2RlOiBUcmVlbWFwTm9kZSkgPT4gdm9pZDtcblxuICBpc0FuaW1hdGlvbkFjdGl2ZT86IGJvb2xlYW47XG5cbiAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmU/OiBib29sZWFuO1xuXG4gIGFuaW1hdGlvbkJlZ2luPzogbnVtYmVyO1xuXG4gIGFuaW1hdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xuXG4gIGFuaW1hdGlvbkVhc2luZz86ICdlYXNlJyB8ICdlYXNlLWluJyB8ICdlYXNlLW91dCcgfCAnZWFzZS1pbi1vdXQnIHwgJ2xpbmVhcic7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGlzVG9vbHRpcEFjdGl2ZTogYm9vbGVhbjtcblxuICBpc0FuaW1hdGlvbkZpbmlzaGVkOiBib29sZWFuO1xuXG4gIGFjdGl2ZU5vZGU/OiBUcmVlbWFwTm9kZTtcblxuICBmb3JtYXRSb290PzogVHJlZW1hcE5vZGU7XG5cbiAgY3VycmVudFJvb3Q/OiBUcmVlbWFwTm9kZTtcblxuICBuZXN0SW5kZXg/OiBUcmVlbWFwTm9kZVtdO1xuXG4gIHByZXZEYXRhPzogYW55W107XG5cbiAgcHJldlR5cGU/OiAnZmxhdCcgfCAnbmVzdCc7XG5cbiAgcHJldldpZHRoPzogbnVtYmVyO1xuXG4gIHByZXZIZWlnaHQ/OiBudW1iZXI7XG5cbiAgcHJldkRhdGFLZXk/OiBEYXRhS2V5PGFueT47XG5cbiAgcHJldkFzcGVjdFJhdGlvPzogbnVtYmVyO1xufVxuXG5jb25zdCBkZWZhdWx0U3RhdGU6IFN0YXRlID0ge1xuICBpc1Rvb2x0aXBBY3RpdmU6IGZhbHNlLFxuXG4gIGlzQW5pbWF0aW9uRmluaXNoZWQ6IGZhbHNlLFxuXG4gIGFjdGl2ZU5vZGU6IG51bGwgYXMgVHJlZW1hcE5vZGUsXG5cbiAgZm9ybWF0Um9vdDogbnVsbCBhcyBUcmVlbWFwTm9kZSxcblxuICBjdXJyZW50Um9vdDogbnVsbCBhcyBUcmVlbWFwTm9kZSxcblxuICBuZXN0SW5kZXg6IFtdIGFzIFRyZWVtYXBOb2RlW10sXG59O1xuXG5leHBvcnQgY2xhc3MgVHJlZW1hcCBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdUcmVlbWFwJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFzcGVjdFJhdGlvOiAwLjUgKiAoMSArIE1hdGguc3FydCg1KSksXG4gICAgZGF0YUtleTogJ3ZhbHVlJyxcbiAgICB0eXBlOiAnZmxhdCcsXG4gICAgaXNBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmU6ICFHbG9iYWwuaXNTc3IsXG4gICAgYW5pbWF0aW9uQmVnaW46IDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDE1MDAsXG4gICAgYW5pbWF0aW9uRWFzaW5nOiAnbGluZWFyJyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICAuLi5kZWZhdWx0U3RhdGUsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKTogU3RhdGUge1xuICAgIGlmIChcbiAgICAgIG5leHRQcm9wcy5kYXRhICE9PSBwcmV2U3RhdGUucHJldkRhdGEgfHxcbiAgICAgIG5leHRQcm9wcy50eXBlICE9PSBwcmV2U3RhdGUucHJldlR5cGUgfHxcbiAgICAgIG5leHRQcm9wcy53aWR0aCAhPT0gcHJldlN0YXRlLnByZXZXaWR0aCB8fFxuICAgICAgbmV4dFByb3BzLmhlaWdodCAhPT0gcHJldlN0YXRlLnByZXZIZWlnaHQgfHxcbiAgICAgIG5leHRQcm9wcy5kYXRhS2V5ICE9PSBwcmV2U3RhdGUucHJldkRhdGFLZXkgfHxcbiAgICAgIG5leHRQcm9wcy5hc3BlY3RSYXRpbyAhPT0gcHJldlN0YXRlLnByZXZBc3BlY3RSYXRpb1xuICAgICkge1xuICAgICAgY29uc3Qgcm9vdCA9IGNvbXB1dGVOb2RlKHtcbiAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgIG5vZGU6IHsgY2hpbGRyZW46IG5leHRQcm9wcy5kYXRhLCB4OiAwLCB5OiAwLCB3aWR0aDogbmV4dFByb3BzLndpZHRoLCBoZWlnaHQ6IG5leHRQcm9wcy5oZWlnaHQgfSBhcyBUcmVlbWFwTm9kZSxcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIHZhbHVlS2V5OiBuZXh0UHJvcHMuZGF0YUtleSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybWF0Um9vdCA9IHNxdWFyaWZ5KHJvb3QsIG5leHRQcm9wcy5hc3BlY3RSYXRpbyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRlZmF1bHRTdGF0ZSxcbiAgICAgICAgZm9ybWF0Um9vdCxcbiAgICAgICAgY3VycmVudFJvb3Q6IHJvb3QsXG4gICAgICAgIG5lc3RJbmRleDogW3Jvb3RdLFxuICAgICAgICBwcmV2QXNwZWN0UmF0aW86IG5leHRQcm9wcy5hc3BlY3RSYXRpbyxcbiAgICAgICAgcHJldkRhdGE6IG5leHRQcm9wcy5kYXRhLFxuICAgICAgICBwcmV2V2lkdGg6IG5leHRQcm9wcy53aWR0aCxcbiAgICAgICAgcHJldkhlaWdodDogbmV4dFByb3BzLmhlaWdodCxcbiAgICAgICAgcHJldkRhdGFLZXk6IG5leHRQcm9wcy5kYXRhS2V5LFxuICAgICAgICBwcmV2VHlwZTogbmV4dFByb3BzLnR5cGUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaGFuZGxlTW91c2VFbnRlcihub2RlOiBUcmVlbWFwTm9kZSwgZTogYW55KSB7XG4gICAgY29uc3QgeyBvbk1vdXNlRW50ZXIsIGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRvb2x0aXBJdGVtID0gZmluZENoaWxkQnlUeXBlKGNoaWxkcmVuLCBUb29sdGlwLmRpc3BsYXlOYW1lKTtcblxuICAgIGlmICh0b29sdGlwSXRlbSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAge1xuICAgICAgICAgIGlzVG9vbHRpcEFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmVOb2RlOiBub2RlLFxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgaWYgKG9uTW91c2VFbnRlcikge1xuICAgICAgICAgICAgb25Nb3VzZUVudGVyKG5vZGUsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChvbk1vdXNlRW50ZXIpIHtcbiAgICAgIG9uTW91c2VFbnRlcihub2RlLCBlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVNb3VzZUxlYXZlKG5vZGU6IFRyZWVtYXBOb2RlLCBlOiBhbnkpIHtcbiAgICBjb25zdCB7IG9uTW91c2VMZWF2ZSwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdG9vbHRpcEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIFRvb2x0aXAuZGlzcGxheU5hbWUpO1xuXG4gICAgaWYgKHRvb2x0aXBJdGVtKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgaXNUb29sdGlwQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICBhY3RpdmVOb2RlOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgICAgICAgb25Nb3VzZUxlYXZlKG5vZGUsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShub2RlLCBlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvbkFuaW1hdGlvbkVuZCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpb25GaW5pc2hlZDogdHJ1ZSB9KTtcblxuICAgIGlmIChfLmlzRnVuY3Rpb24ob25BbmltYXRpb25FbmQpKSB7XG4gICAgICBvbkFuaW1hdGlvbkVuZCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVBbmltYXRpb25TdGFydCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uQW5pbWF0aW9uU3RhcnQgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQW5pbWF0aW9uRmluaXNoZWQ6IGZhbHNlIH0pO1xuXG4gICAgaWYgKF8uaXNGdW5jdGlvbihvbkFuaW1hdGlvblN0YXJ0KSkge1xuICAgICAgb25BbmltYXRpb25TdGFydCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVDbGljayhub2RlOiBUcmVlbWFwTm9kZSkge1xuICAgIGNvbnN0IHsgb25DbGljaywgdHlwZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAodHlwZSA9PT0gJ25lc3QnICYmIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgZGF0YUtleSwgYXNwZWN0UmF0aW8gfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCByb290ID0gY29tcHV0ZU5vZGUoe1xuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgbm9kZTogeyAuLi5ub2RlLCB4OiAwLCB5OiAwLCB3aWR0aCwgaGVpZ2h0IH0sXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICB2YWx1ZUtleTogZGF0YUtleSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmb3JtYXRSb290ID0gc3F1YXJpZnkocm9vdCwgYXNwZWN0UmF0aW8pO1xuXG4gICAgICBjb25zdCB7IG5lc3RJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIG5lc3RJbmRleC5wdXNoKG5vZGUpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9ybWF0Um9vdCxcbiAgICAgICAgY3VycmVudFJvb3Q6IHJvb3QsXG4gICAgICAgIG5lc3RJbmRleCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhub2RlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVOZXN0SW5kZXgobm9kZTogVHJlZW1hcE5vZGUsIGk6IG51bWJlcikge1xuICAgIGxldCB7IG5lc3RJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRhdGFLZXksIGFzcGVjdFJhdGlvIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHJvb3QgPSBjb21wdXRlTm9kZSh7XG4gICAgICBkZXB0aDogMCxcbiAgICAgIG5vZGU6IHsgLi4ubm9kZSwgeDogMCwgeTogMCwgd2lkdGgsIGhlaWdodCB9LFxuICAgICAgaW5kZXg6IDAsXG4gICAgICB2YWx1ZUtleTogZGF0YUtleSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGZvcm1hdFJvb3QgPSBzcXVhcmlmeShyb290LCBhc3BlY3RSYXRpbyk7XG5cbiAgICBuZXN0SW5kZXggPSBuZXN0SW5kZXguc2xpY2UoMCwgaSArIDEpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZm9ybWF0Um9vdCxcbiAgICAgIGN1cnJlbnRSb290OiBub2RlLFxuICAgICAgbmVzdEluZGV4LFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVySXRlbShjb250ZW50OiBhbnksIG5vZGVQcm9wczogVHJlZW1hcE5vZGUsIGlzTGVhZjogYm9vbGVhbik6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgY29uc3Qge1xuICAgICAgaXNBbmltYXRpb25BY3RpdmUsXG4gICAgICBhbmltYXRpb25CZWdpbixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgYW5pbWF0aW9uRWFzaW5nLFxuICAgICAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmUsXG4gICAgICB0eXBlLFxuICAgICAgYW5pbWF0aW9uSWQsXG4gICAgICBjb2xvclBhbmVsLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNBbmltYXRpb25GaW5pc2hlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIHgsIHksIGRlcHRoIH0gPSBub2RlUHJvcHM7XG4gICAgY29uc3QgdHJhbnNsYXRlWCA9IHBhcnNlSW50KGAkeyhNYXRoLnJhbmRvbSgpICogMiAtIDEpICogd2lkdGh9YCwgMTApO1xuICAgIGxldCBldmVudCA9IHt9IGFzIGFueTtcbiAgICBpZiAoaXNMZWFmIHx8IHR5cGUgPT09ICduZXN0Jykge1xuICAgICAgZXZlbnQgPSB7XG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVNb3VzZUVudGVyLmJpbmQodGhpcywgbm9kZVByb3BzKSxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUuYmluZCh0aGlzLCBub2RlUHJvcHMpLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcywgbm9kZVByb3BzKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCFpc0FuaW1hdGlvbkFjdGl2ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExheWVyIHsuLi5ldmVudH0+XG4gICAgICAgICAgeyh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkucmVuZGVyQ29udGVudEl0ZW0oXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi5ub2RlUHJvcHMsXG4gICAgICAgICAgICAgIGlzQW5pbWF0aW9uQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgaXNVcGRhdGVBbmltYXRpb25BY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBjb2xvclBhbmVsLFxuICAgICAgICAgICl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8U21vb3RoXG4gICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgZHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICBpc0FjdGl2ZT17aXNBbmltYXRpb25BY3RpdmV9XG4gICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICBrZXk9e2B0cmVlbWFwLSR7YW5pbWF0aW9uSWR9YH1cbiAgICAgICAgZnJvbT17eyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH19XG4gICAgICAgIHRvPXt7IHgsIHksIHdpZHRoLCBoZWlnaHQgfX1cbiAgICAgICAgb25BbmltYXRpb25TdGFydD17dGhpcy5oYW5kbGVBbmltYXRpb25TdGFydH1cbiAgICAgICAgb25BbmltYXRpb25FbmQ9e3RoaXMuaGFuZGxlQW5pbWF0aW9uRW5kfVxuICAgICAgPlxuICAgICAgICB7KHsgeDogY3VyclgsIHk6IGN1cnJZLCB3aWR0aDogY3VycldpZHRoLCBoZWlnaHQ6IGN1cnJIZWlnaHQgfTogVHJlZW1hcE5vZGUpID0+IChcbiAgICAgICAgICA8U21vb3RoXG4gICAgICAgICAgICBmcm9tPXtgdHJhbnNsYXRlKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVYfXB4KWB9XG4gICAgICAgICAgICB0bz1cInRyYW5zbGF0ZSgwLCAwKVwiXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCJcbiAgICAgICAgICAgIGJlZ2luPXthbmltYXRpb25CZWdpbn1cbiAgICAgICAgICAgIGVhc2luZz17YW5pbWF0aW9uRWFzaW5nfVxuICAgICAgICAgICAgaXNBY3RpdmU9e2lzQW5pbWF0aW9uQWN0aXZlfVxuICAgICAgICAgICAgZHVyYXRpb249e2FuaW1hdGlvbkR1cmF0aW9ufVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMYXllciB7Li4uZXZlbnR9PlxuICAgICAgICAgICAgICB7KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGFuaW1hdGlvbiBEdXJhdGlvbiAsIG9ubHkgcmVuZGVyIGRlcHRoPTEgbm9kZXNcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGggPiAyICYmICFpc0FuaW1hdGlvbkZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkucmVuZGVyQ29udGVudEl0ZW0oXG4gICAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5ub2RlUHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIGlzQW5pbWF0aW9uQWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZUFuaW1hdGlvbkFjdGl2ZTogIWlzVXBkYXRlQW5pbWF0aW9uQWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY3VycldpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGN1cnJIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHg6IGN1cnJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjdXJyWSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgY29sb3JQYW5lbCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KSgpfVxuICAgICAgICAgICAgPC9MYXllcj5cbiAgICAgICAgICA8L1Ntb290aD5cbiAgICAgICAgKX1cbiAgICAgIDwvU21vb3RoPlxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyQ29udGVudEl0ZW0oXG4gICAgY29udGVudDogYW55LFxuICAgIG5vZGVQcm9wczogVHJlZW1hcE5vZGUsXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGNvbG9yUGFuZWw6IHN0cmluZ1tdLFxuICApOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjb250ZW50KSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjb250ZW50LCBub2RlUHJvcHMpO1xuICAgIH1cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gY29udGVudChub2RlUHJvcHMpO1xuICAgIH1cbiAgICAvLyBvcHRpbWl6ZSBkZWZhdWx0IHNoYXBlXG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBpbmRleCB9ID0gbm9kZVByb3BzO1xuICAgIGxldCBhcnJvdyA9IG51bGw7XG4gICAgaWYgKHdpZHRoID4gMTAgJiYgaGVpZ2h0ID4gMTAgJiYgbm9kZVByb3BzLmNoaWxkcmVuICYmIHR5cGUgPT09ICduZXN0Jykge1xuICAgICAgYXJyb3cgPSAoXG4gICAgICAgIDxQb2x5Z29uXG4gICAgICAgICAgcG9pbnRzPXtbXG4gICAgICAgICAgICB7IHg6IHggKyAyLCB5OiB5ICsgaGVpZ2h0IC8gMiB9LFxuICAgICAgICAgICAgeyB4OiB4ICsgNiwgeTogeSArIGhlaWdodCAvIDIgKyAzIH0sXG4gICAgICAgICAgICB7IHg6IHggKyAyLCB5OiB5ICsgaGVpZ2h0IC8gMiArIDYgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgbGV0IHRleHQgPSBudWxsO1xuICAgIGNvbnN0IG5hbWVTaXplID0gZ2V0U3RyaW5nU2l6ZShub2RlUHJvcHMubmFtZSk7XG4gICAgaWYgKHdpZHRoID4gMjAgJiYgaGVpZ2h0ID4gMjAgJiYgbmFtZVNpemUud2lkdGggPCB3aWR0aCAmJiBuYW1lU2l6ZS5oZWlnaHQgPCBoZWlnaHQpIHtcbiAgICAgIHRleHQgPSAoXG4gICAgICAgIDx0ZXh0IHg9e3ggKyA4fSB5PXt5ICsgaGVpZ2h0IC8gMiArIDd9IGZvbnRTaXplPXsxNH0+XG4gICAgICAgICAge25vZGVQcm9wcy5uYW1lfVxuICAgICAgICA8L3RleHQ+XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9ycyA9IGNvbG9yUGFuZWwgfHwgQ09MT1JfUEFORUw7XG4gICAgcmV0dXJuIChcbiAgICAgIDxnPlxuICAgICAgICA8UmVjdGFuZ2xlXG4gICAgICAgICAgZmlsbD17bm9kZVByb3BzLmRlcHRoIDwgMiA/IGNvbG9yc1tpbmRleCAlIGNvbG9ycy5sZW5ndGhdIDogJ3JnYmEoMjU1LDI1NSwyNTUsMCknfVxuICAgICAgICAgIHN0cm9rZT1cIiNmZmZcIlxuICAgICAgICAgIHsuLi5fLm9taXQobm9kZVByb3BzLCAnY2hpbGRyZW4nKX1cbiAgICAgICAgLz5cbiAgICAgICAge2Fycm93fVxuICAgICAgICB7dGV4dH1cbiAgICAgIDwvZz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTm9kZShyb290OiBUcmVlbWFwTm9kZSwgbm9kZTogVHJlZW1hcE5vZGUsIGk6IG51bWJlcik6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgY29uc3QgeyBjb250ZW50LCB0eXBlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5vZGVQcm9wcyA9IHsgLi4uZmlsdGVyUHJvcHModGhpcy5wcm9wcyksIC4uLm5vZGUsIHJvb3QgfTtcbiAgICBjb25zdCBpc0xlYWYgPSAhbm9kZS5jaGlsZHJlbiB8fCAhbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBjb25zdCB7IGN1cnJlbnRSb290IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGlzQ3VycmVudFJvb3RDaGlsZCA9IChjdXJyZW50Um9vdC5jaGlsZHJlbiB8fCBbXSkuZmlsdGVyKFxuICAgICAgKGl0ZW06IFRyZWVtYXBOb2RlKSA9PiBpdGVtLmRlcHRoID09PSBub2RlLmRlcHRoICYmIGl0ZW0ubmFtZSA9PT0gbm9kZS5uYW1lLFxuICAgICk7XG5cbiAgICBpZiAoIWlzQ3VycmVudFJvb3RDaGlsZC5sZW5ndGggJiYgcm9vdC5kZXB0aCAmJiB0eXBlID09PSAnbmVzdCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgPExheWVyIGtleT17YHJlY2hhcnRzLXRyZWVtYXAtbm9kZS0ke2l9YH0gY2xhc3NOYW1lPXtgcmVjaGFydHMtdHJlZW1hcC1kZXB0aC0ke25vZGUuZGVwdGh9YH0+XG4gICAgICAgIHt0aGlzLnJlbmRlckl0ZW0oY29udGVudCwgbm9kZVByb3BzLCBpc0xlYWYpfVxuICAgICAgICB7bm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICAgID8gbm9kZS5jaGlsZHJlbi5tYXAoKGNoaWxkOiBUcmVlbWFwTm9kZSwgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5yZW5kZXJOb2RlKG5vZGUsIGNoaWxkLCBpbmRleCkpXG4gICAgICAgICAgOiBudWxsfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQWxsTm9kZXMoKTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgICBjb25zdCB7IGZvcm1hdFJvb3QgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoIWZvcm1hdFJvb3QpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlck5vZGUoZm9ybWF0Um9vdCwgZm9ybWF0Um9vdCwgMCk7XG4gIH1cblxuICByZW5kZXJUb29sdGlwKCk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbmFtZUtleSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB0b29sdGlwSXRlbSA9IGZpbmRDaGlsZEJ5VHlwZShjaGlsZHJlbiwgVG9vbHRpcC5kaXNwbGF5TmFtZSk7XG5cbiAgICBpZiAoIXRvb2x0aXBJdGVtKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRhdGFLZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc1Rvb2x0aXBBY3RpdmUsIGFjdGl2ZU5vZGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgdmlld0JveCA9IHsgeDogMCwgeTogMCwgd2lkdGgsIGhlaWdodCB9O1xuICAgIGNvbnN0IGNvb3JkaW5hdGUgPSBhY3RpdmVOb2RlXG4gICAgICA/IHtcbiAgICAgICAgICB4OiBhY3RpdmVOb2RlLnggKyBhY3RpdmVOb2RlLndpZHRoIC8gMixcbiAgICAgICAgICB5OiBhY3RpdmVOb2RlLnkgKyBhY3RpdmVOb2RlLmhlaWdodCAvIDIsXG4gICAgICAgIH1cbiAgICAgIDogbnVsbDtcbiAgICBjb25zdCBwYXlsb2FkID1cbiAgICAgIGlzVG9vbHRpcEFjdGl2ZSAmJiBhY3RpdmVOb2RlXG4gICAgICAgID8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXlsb2FkOiBhY3RpdmVOb2RlLFxuICAgICAgICAgICAgICBuYW1lOiBnZXRWYWx1ZUJ5RGF0YUtleShhY3RpdmVOb2RlLCBuYW1lS2V5LCAnJyksXG4gICAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZUJ5RGF0YUtleShhY3RpdmVOb2RlLCBkYXRhS2V5KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXVxuICAgICAgICA6IFtdO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0b29sdGlwSXRlbSBhcyBSZWFjdC5EZXRhaWxlZFJlYWN0SFRNTEVsZW1lbnQ8YW55LCBIVE1MRWxlbWVudD4sIHtcbiAgICAgIHZpZXdCb3gsXG4gICAgICBhY3RpdmU6IGlzVG9vbHRpcEFjdGl2ZSxcbiAgICAgIGNvb3JkaW5hdGUsXG4gICAgICBsYWJlbDogJycsXG4gICAgICBwYXlsb2FkLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gcmVuZGVyIG5lc3QgdHJlZW1hcFxuICByZW5kZXJOZXN0SW5kZXgoKTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgICBjb25zdCB7IG5hbWVLZXksIG5lc3RJbmRleENvbnRlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBuZXN0SW5kZXggfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWNoYXJ0cy10cmVlbWFwLW5lc3QtaW5kZXgtd3JhcHBlclwiIHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcsIHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgIHtuZXN0SW5kZXgubWFwKChpdGVtOiBUcmVlbWFwTm9kZSwgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgLy8gVE9ETyBuZWVkIHRvIHZlcmlmeSBuYW1lS2V5IHR5cGVcbiAgICAgICAgICBjb25zdCBuYW1lID0gXy5nZXQoaXRlbSwgbmFtZUtleSBhcyBzdHJpbmcsICdyb290Jyk7XG4gICAgICAgICAgbGV0IGNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChuZXN0SW5kZXhDb250ZW50KSkge1xuICAgICAgICAgICAgY29udGVudCA9IFJlYWN0LmNsb25lRWxlbWVudChuZXN0SW5kZXhDb250ZW50LCBpdGVtLCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihuZXN0SW5kZXhDb250ZW50KSkge1xuICAgICAgICAgICAgY29udGVudCA9IG5lc3RJbmRleENvbnRlbnQoaXRlbSwgaSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBuYW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50c1xuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU5lc3RJbmRleC5iaW5kKHRoaXMsIGl0ZW0sIGkpfVxuICAgICAgICAgICAgICBrZXk9e2BuZXN0LWluZGV4LSR7dW5pcXVlSWQoKX1gfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWNoYXJ0cy10cmVlbWFwLW5lc3QtaW5kZXgtYm94XCJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCA3cHgnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMDAwJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAnM3B4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdpZHRoSGVpZ2h0KHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGNsYXNzTmFtZSwgc3R5bGUsIGNoaWxkcmVuLCB0eXBlLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYXR0cnMgPSBmaWx0ZXJQcm9wcyhvdGhlcnMpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy13cmFwcGVyJywgY2xhc3NOYW1lKX1cbiAgICAgICAgc3R5bGU9e3sgLi4uc3R5bGUsIHBvc2l0aW9uOiAncmVsYXRpdmUnLCBjdXJzb3I6ICdkZWZhdWx0Jywgd2lkdGgsIGhlaWdodCB9fVxuICAgICAgPlxuICAgICAgICA8U3VyZmFjZSB7Li4uYXR0cnN9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXt0eXBlID09PSAnbmVzdCcgPyBoZWlnaHQgLSAzMCA6IGhlaWdodH0+XG4gICAgICAgICAge3RoaXMucmVuZGVyQWxsTm9kZXMoKX1cbiAgICAgICAgICB7ZmlsdGVyU3ZnRWxlbWVudHMoY2hpbGRyZW4pfVxuICAgICAgICA8L1N1cmZhY2U+XG4gICAgICAgIHt0aGlzLnJlbmRlclRvb2x0aXAoKX1cbiAgICAgICAge3R5cGUgPT09ICduZXN0JyAmJiB0aGlzLnJlbmRlck5lc3RJbmRleCgpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IENPTE9SX1BBTkVMID0gW1xuICAnIzE4OTBGRicsXG4gICcjNjZCNUZGJyxcbiAgJyM0MUQ5QzcnLFxuICAnIzJGQzI1QicsXG4gICcjNkVEQjhGJyxcbiAgJyM5QUU2NUMnLFxuICAnI0ZBQ0MxNCcsXG4gICcjRTY5NjVDJyxcbiAgJyM1N0FENzEnLFxuICAnIzIyMzI3MycsXG4gICcjNzM4QUU2JyxcbiAgJyM3NTY0Q0MnLFxuICAnIzg1NDNFMCcsXG4gICcjQTg3N0VEJyxcbiAgJyM1QzhFRTYnLFxuICAnIzEzQzJDMicsXG4gICcjNzBFMEUwJyxcbiAgJyM1Q0EzRTYnLFxuICAnIzM0MzZDNycsXG4gICcjODA4MkZGJyxcbiAgJyNERDgxRTYnLFxuICAnI0YwNDg2NCcsXG4gICcjRkE3RDkyJyxcbiAgJyNENTk4RDknLFxuXTtcbiIsIi8qKlxuICogQGZpbGUgVHJlZW1hcENoYXJ0XG4gKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFNWR1Byb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgU3VyZmFjZSB9IGZyb20gJy4uL2NvbnRhaW5lci9TdXJmYWNlJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vY29udGFpbmVyL0xheWVyJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICcuLi9jb21wb25lbnQvVG9vbHRpcCc7XG5pbXBvcnQgeyBSZWN0YW5nbGUsIFByb3BzIGFzIFJlY3RhbmdsZVByb3BzIH0gZnJvbSAnLi4vc2hhcGUvUmVjdGFuZ2xlJztcbmltcG9ydCB7IHNoYWxsb3dFcXVhbCB9IGZyb20gJy4uL3V0aWwvU2hhbGxvd0VxdWFsJztcbmltcG9ydCB7IGZpbHRlclN2Z0VsZW1lbnRzLCB2YWxpZGF0ZVdpZHRoSGVpZ2h0LCBmaW5kQ2hpbGRCeVR5cGUgfSBmcm9tICcuLi91dGlsL1JlYWN0VXRpbHMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeURhdGFLZXkgfSBmcm9tICcuLi91dGlsL0NoYXJ0VXRpbHMnO1xuaW1wb3J0IHsgTWFyZ2luLCBEYXRhS2V5LCBmaWx0ZXJQcm9wcywgU2Fua2V5TGluaywgU2Fua2V5Tm9kZSB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5jb25zdCBkZWZhdWx0Q29vcmRpbmF0ZU9mVG9vbHRpcCA9IHsgeDogMCwgeTogMCB9O1xuXG5jb25zdCBpbnRlcnBvbGF0aW9uR2VuZXJhdG9yID0gKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGthID0gK2E7XG4gIGNvbnN0IGtiID0gYiAtIGthO1xuICByZXR1cm4gKHQ6IGFueSkgPT4ga2EgKyBrYiAqIHQ7XG59O1xuY29uc3QgY2VudGVyWSA9IChub2RlOiBTYW5rZXlOb2RlKSA9PiBub2RlLnkgKyBub2RlLmR5IC8gMjtcbmNvbnN0IGdldFZhbHVlID0gKGVudHJ5OiBMaW5rRGF0YUl0ZW0pID0+IChlbnRyeSAmJiBlbnRyeS52YWx1ZSkgfHwgMDtcbmNvbnN0IGdldFN1bU9mSWRzID0gKGxpbmtzOiBMaW5rRGF0YUl0ZW1bXSwgaWRzOiBudW1iZXJbXSkgPT5cbiAgaWRzLnJlZHVjZSgocmVzdWx0OiBhbnksIGlkOiBhbnkpID0+IHJlc3VsdCArIGdldFZhbHVlKGxpbmtzW2lkXSksIDApO1xuY29uc3QgZ2V0U3VtV2l0aFdlaWdodGVkU291cmNlID0gKHRyZWU6IGFueSwgbGlua3M6IFNhbmtleUxpbmtbXSwgaWRzOiBudW1iZXJbXSkgPT5cbiAgaWRzLnJlZHVjZSgocmVzdWx0OiBhbnksIGlkOiBhbnkpID0+IHtcbiAgICBjb25zdCBsaW5rID0gbGlua3NbaWRdO1xuICAgIGNvbnN0IHNvdXJjZU5vZGUgPSB0cmVlW2xpbmsuc291cmNlXTtcblxuICAgIHJldHVybiByZXN1bHQgKyBjZW50ZXJZKHNvdXJjZU5vZGUpICogZ2V0VmFsdWUobGlua3NbaWRdKTtcbiAgfSwgMCk7XG5jb25zdCBnZXRTdW1XaXRoV2VpZ2h0ZWRUYXJnZXQgPSAodHJlZTogYW55LCBsaW5rczogU2Fua2V5TGlua1tdLCBpZHM6IG51bWJlcltdKSA9PlxuICBpZHMucmVkdWNlKChyZXN1bHQ6IG51bWJlciwgaWQ6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGxpbmsgPSBsaW5rc1tpZF07XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRyZWVbbGluay50YXJnZXRdO1xuXG4gICAgcmV0dXJuIHJlc3VsdCArIGNlbnRlclkodGFyZ2V0Tm9kZSkgKiBnZXRWYWx1ZShsaW5rc1tpZF0pO1xuICB9LCAwKTtcbmNvbnN0IGFzY2VuZGluZ1kgPSAoYTogYW55LCBiOiBhbnkpID0+IGEueSAtIGIueTtcblxuY29uc3Qgc2VhcmNoVGFyZ2V0c0FuZFNvdXJjZXMgPSAobGlua3M6IExpbmtEYXRhSXRlbVtdLCBpZDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHNvdXJjZU5vZGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBzb3VyY2VMaW5rczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3QgdGFyZ2V0Tm9kZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IHRhcmdldExpbmtzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaW5rcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGxpbmsgPSBsaW5rc1tpXTtcblxuICAgIGlmIChsaW5rLnNvdXJjZSA9PT0gaWQpIHtcbiAgICAgIHRhcmdldE5vZGVzLnB1c2gobGluay50YXJnZXQpO1xuICAgICAgdGFyZ2V0TGlua3MucHVzaChpKTtcbiAgICB9XG5cbiAgICBpZiAobGluay50YXJnZXQgPT09IGlkKSB7XG4gICAgICBzb3VyY2VOb2Rlcy5wdXNoKGxpbmsuc291cmNlKTtcbiAgICAgIHNvdXJjZUxpbmtzLnB1c2goaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgc291cmNlTm9kZXMsIHNvdXJjZUxpbmtzLCB0YXJnZXRMaW5rcywgdGFyZ2V0Tm9kZXMgfTtcbn07XG5cbmNvbnN0IHVwZGF0ZURlcHRoT2ZUYXJnZXRzID0gKHRyZWU6IGFueSwgY3VyTm9kZTogYW55KSA9PiB7XG4gIGNvbnN0IHsgdGFyZ2V0Tm9kZXMgfSA9IGN1ck5vZGU7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRhcmdldE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdHJlZVt0YXJnZXROb2Rlc1tpXV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0YXJnZXQuZGVwdGggPSBNYXRoLm1heChjdXJOb2RlLmRlcHRoICsgMSwgdGFyZ2V0LmRlcHRoKTtcblxuICAgICAgdXBkYXRlRGVwdGhPZlRhcmdldHModHJlZSwgdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IGdldE5vZGVzVHJlZSA9ICh7IG5vZGVzLCBsaW5rcyB9OiBTYW5rZXlEYXRhLCB3aWR0aDogbnVtYmVyLCBub2RlV2lkdGg6IG51bWJlcik6IGFueSA9PiB7XG4gIGNvbnN0IHRyZWUgPSBub2Rlcy5tYXAoKGVudHJ5OiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBzZWFyY2hUYXJnZXRzQW5kU291cmNlcyhsaW5rcywgaW5kZXgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmVudHJ5LFxuICAgICAgLi4ucmVzdWx0LFxuICAgICAgdmFsdWU6IE1hdGgubWF4KGdldFN1bU9mSWRzKGxpbmtzLCByZXN1bHQuc291cmNlTGlua3MpLCBnZXRTdW1PZklkcyhsaW5rcywgcmVzdWx0LnRhcmdldExpbmtzKSksXG4gICAgICBkZXB0aDogMCxcbiAgICB9O1xuICB9KTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdHJlZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSB0cmVlW2ldO1xuXG4gICAgaWYgKCFub2RlLnNvdXJjZU5vZGVzLmxlbmd0aCkge1xuICAgICAgdXBkYXRlRGVwdGhPZlRhcmdldHModHJlZSwgbm9kZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IG1heERlcHRoID0gXy5tYXhCeSh0cmVlLCAoZW50cnk6IFNhbmtleU5vZGUpID0+IGVudHJ5LmRlcHRoKS5kZXB0aDtcblxuICBpZiAobWF4RGVwdGggPj0gMSkge1xuICAgIGNvbnN0IGNoaWxkV2lkdGggPSAod2lkdGggLSBub2RlV2lkdGgpIC8gbWF4RGVwdGg7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRyZWUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0cmVlW2ldO1xuXG4gICAgICBpZiAoIW5vZGUudGFyZ2V0Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIG5vZGUuZGVwdGggPSBtYXhEZXB0aDtcbiAgICAgIH1cbiAgICAgIG5vZGUueCA9IG5vZGUuZGVwdGggKiBjaGlsZFdpZHRoO1xuICAgICAgbm9kZS5keCA9IG5vZGVXaWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyB0cmVlLCBtYXhEZXB0aCB9O1xufTtcblxuY29uc3QgZ2V0RGVwdGhUcmVlID0gKHRyZWU6IGFueSk6IGFueVtdID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRyZWUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gdHJlZVtpXTtcblxuICAgIGlmICghcmVzdWx0W25vZGUuZGVwdGhdKSB7XG4gICAgICByZXN1bHRbbm9kZS5kZXB0aF0gPSBbXTtcbiAgICB9XG5cbiAgICByZXN1bHRbbm9kZS5kZXB0aF0ucHVzaChub2RlKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCB1cGRhdGVZT2ZUcmVlID0gKGRlcHRoVHJlZTogYW55LCBoZWlnaHQ6IG51bWJlciwgbm9kZVBhZGRpbmc6IG51bWJlciwgbGlua3M6IGFueSkgPT4ge1xuICBjb25zdCB5UmF0aW86IG51bWJlciA9IF8ubWluKFxuICAgIGRlcHRoVHJlZS5tYXAoKG5vZGVzOiBhbnkpID0+IChoZWlnaHQgLSAobm9kZXMubGVuZ3RoIC0gMSkgKiBub2RlUGFkZGluZykgLyBfLnN1bUJ5KG5vZGVzLCBnZXRWYWx1ZSkpLFxuICApO1xuXG4gIGZvciAobGV0IGQgPSAwLCBtYXhEZXB0aCA9IGRlcHRoVHJlZS5sZW5ndGg7IGQgPCBtYXhEZXB0aDsgZCsrKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRlcHRoVHJlZVtkXS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IGRlcHRoVHJlZVtkXVtpXTtcblxuICAgICAgbm9kZS55ID0gaTtcbiAgICAgIG5vZGUuZHkgPSBub2RlLnZhbHVlICogeVJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsaW5rcy5tYXAoKGxpbms6IGFueSkgPT4gKHsgLi4ubGluaywgZHk6IGdldFZhbHVlKGxpbmspICogeVJhdGlvIH0pKTtcbn07XG5cbmNvbnN0IHJlc29sdmVDb2xsaXNpb25zID0gKGRlcHRoVHJlZTogYW55W10sIGhlaWdodDogbnVtYmVyLCBub2RlUGFkZGluZzogbnVtYmVyKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkZXB0aFRyZWUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBub2RlcyA9IGRlcHRoVHJlZVtpXTtcbiAgICBjb25zdCBuID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgLy8gU29ydCBieSB0aGUgdmFsdWUgb2YgeVxuICAgIG5vZGVzLnNvcnQoYXNjZW5kaW5nWSk7XG5cbiAgICBsZXQgeTAgPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZXNbal07XG4gICAgICBjb25zdCBkeSA9IHkwIC0gbm9kZS55O1xuXG4gICAgICBpZiAoZHkgPiAwKSB7XG4gICAgICAgIG5vZGUueSArPSBkeTtcbiAgICAgIH1cblxuICAgICAgeTAgPSBub2RlLnkgKyBub2RlLmR5ICsgbm9kZVBhZGRpbmc7XG4gICAgfVxuXG4gICAgeTAgPSBoZWlnaHQgKyBub2RlUGFkZGluZztcbiAgICBmb3IgKGxldCBqID0gbiAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZXNbal07XG4gICAgICBjb25zdCBkeSA9IG5vZGUueSArIG5vZGUuZHkgKyBub2RlUGFkZGluZyAtIHkwO1xuXG4gICAgICBpZiAoZHkgPiAwKSB7XG4gICAgICAgIG5vZGUueSAtPSBkeTtcbiAgICAgICAgeTAgPSBub2RlLnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHJlbGF4TGVmdFRvUmlnaHQgPSAodHJlZTogYW55LCBkZXB0aFRyZWU6IGFueSwgbGlua3M6IGFueSwgYWxwaGE6IGFueSkgPT4ge1xuICBmb3IgKGxldCBpID0gMCwgbWF4RGVwdGggPSBkZXB0aFRyZWUubGVuZ3RoOyBpIDwgbWF4RGVwdGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGVzID0gZGVwdGhUcmVlW2ldO1xuXG4gICAgZm9yIChsZXQgaiA9IDAsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZXNbal07XG5cbiAgICAgIGlmIChub2RlLnNvdXJjZUxpbmtzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBzb3VyY2VTdW0gPSBnZXRTdW1PZklkcyhsaW5rcywgbm9kZS5zb3VyY2VMaW5rcyk7XG4gICAgICAgIGNvbnN0IHdlaWdodGVkU3VtID0gZ2V0U3VtV2l0aFdlaWdodGVkU291cmNlKHRyZWUsIGxpbmtzLCBub2RlLnNvdXJjZUxpbmtzKTtcbiAgICAgICAgY29uc3QgeSA9IHdlaWdodGVkU3VtIC8gc291cmNlU3VtO1xuXG4gICAgICAgIG5vZGUueSArPSAoeSAtIGNlbnRlclkobm9kZSkpICogYWxwaGE7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuY29uc3QgcmVsYXhSaWdodFRvTGVmdCA9ICh0cmVlOiBhbnksIGRlcHRoVHJlZTogYW55LCBsaW5rczogYW55LCBhbHBoYTogYW55KSA9PiB7XG4gIGZvciAobGV0IGkgPSBkZXB0aFRyZWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBub2RlcyA9IGRlcHRoVHJlZVtpXTtcblxuICAgIGZvciAobGV0IGogPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2pdO1xuXG4gICAgICBpZiAobm9kZS50YXJnZXRMaW5rcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0U3VtID0gZ2V0U3VtT2ZJZHMobGlua3MsIG5vZGUudGFyZ2V0TGlua3MpO1xuICAgICAgICBjb25zdCB3ZWlnaHRlZFN1bSA9IGdldFN1bVdpdGhXZWlnaHRlZFRhcmdldCh0cmVlLCBsaW5rcywgbm9kZS50YXJnZXRMaW5rcyk7XG4gICAgICAgIGNvbnN0IHkgPSB3ZWlnaHRlZFN1bSAvIHRhcmdldFN1bTtcblxuICAgICAgICBub2RlLnkgKz0gKHkgLSBjZW50ZXJZKG5vZGUpKSAqIGFscGhhO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmNvbnN0IHVwZGF0ZVlPZkxpbmtzID0gKHRyZWU6IGFueSwgbGlua3M6IGFueSkgPT4ge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdHJlZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSB0cmVlW2ldO1xuICAgIGxldCBzeSA9IDA7XG4gICAgbGV0IHR5ID0gMDtcblxuICAgIG5vZGUudGFyZ2V0TGlua3Muc29ydCgoYTogYW55LCBiOiBhbnkpID0+IHRyZWVbbGlua3NbYV0udGFyZ2V0XS55IC0gdHJlZVtsaW5rc1tiXS50YXJnZXRdLnkpO1xuICAgIG5vZGUuc291cmNlTGlua3Muc29ydCgoYTogYW55LCBiOiBhbnkpID0+IHRyZWVbbGlua3NbYV0uc291cmNlXS55IC0gdHJlZVtsaW5rc1tiXS5zb3VyY2VdLnkpO1xuXG4gICAgZm9yIChsZXQgaiA9IDAsIHRMZW4gPSBub2RlLnRhcmdldExpbmtzLmxlbmd0aDsgaiA8IHRMZW47IGorKykge1xuICAgICAgY29uc3QgbGluayA9IGxpbmtzW25vZGUudGFyZ2V0TGlua3Nbal1dO1xuXG4gICAgICBpZiAobGluaykge1xuICAgICAgICBsaW5rLnN5ID0gc3k7XG4gICAgICAgIHN5ICs9IGxpbmsuZHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IDAsIHNMZW4gPSBub2RlLnNvdXJjZUxpbmtzLmxlbmd0aDsgaiA8IHNMZW47IGorKykge1xuICAgICAgY29uc3QgbGluayA9IGxpbmtzW25vZGUuc291cmNlTGlua3Nbal1dO1xuXG4gICAgICBpZiAobGluaykge1xuICAgICAgICBsaW5rLnR5ID0gdHk7XG4gICAgICAgIHR5ICs9IGxpbmsuZHk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBjb21wdXRlRGF0YSA9ICh7XG4gIGRhdGEsXG4gIHdpZHRoLFxuICBoZWlnaHQsXG4gIGl0ZXJhdGlvbnMsXG4gIG5vZGVXaWR0aCxcbiAgbm9kZVBhZGRpbmcsXG59OiB7XG4gIGRhdGE6IFNhbmtleURhdGE7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBpdGVyYXRpb25zOiBhbnk7XG4gIG5vZGVXaWR0aDogbnVtYmVyO1xuICBub2RlUGFkZGluZzogbnVtYmVyO1xufSk6IHtcbiAgbm9kZXM6IFNhbmtleU5vZGVbXTtcbiAgbGlua3M6IFNhbmtleUxpbmtbXTtcbn0gPT4ge1xuICBjb25zdCB7IGxpbmtzIH0gPSBkYXRhO1xuICBjb25zdCB7IHRyZWUgfSA9IGdldE5vZGVzVHJlZShkYXRhLCB3aWR0aCwgbm9kZVdpZHRoKTtcbiAgY29uc3QgZGVwdGhUcmVlID0gZ2V0RGVwdGhUcmVlKHRyZWUpO1xuICBjb25zdCBuZXdMaW5rcyA9IHVwZGF0ZVlPZlRyZWUoZGVwdGhUcmVlLCBoZWlnaHQsIG5vZGVQYWRkaW5nLCBsaW5rcyk7XG5cbiAgcmVzb2x2ZUNvbGxpc2lvbnMoZGVwdGhUcmVlLCBoZWlnaHQsIG5vZGVQYWRkaW5nKTtcblxuICBsZXQgYWxwaGEgPSAxO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSBpdGVyYXRpb25zOyBpKyspIHtcbiAgICByZWxheFJpZ2h0VG9MZWZ0KHRyZWUsIGRlcHRoVHJlZSwgbmV3TGlua3MsIChhbHBoYSAqPSAwLjk5KSk7XG5cbiAgICByZXNvbHZlQ29sbGlzaW9ucyhkZXB0aFRyZWUsIGhlaWdodCwgbm9kZVBhZGRpbmcpO1xuXG4gICAgcmVsYXhMZWZ0VG9SaWdodCh0cmVlLCBkZXB0aFRyZWUsIG5ld0xpbmtzLCBhbHBoYSk7XG5cbiAgICByZXNvbHZlQ29sbGlzaW9ucyhkZXB0aFRyZWUsIGhlaWdodCwgbm9kZVBhZGRpbmcpO1xuICB9XG5cbiAgdXBkYXRlWU9mTGlua3ModHJlZSwgbmV3TGlua3MpO1xuXG4gIHJldHVybiB7IG5vZGVzOiB0cmVlLCBsaW5rczogbmV3TGlua3MgfTtcbn07XG5cbmNvbnN0IGdldENvb3JkaW5hdGVPZlRvb2x0aXAgPSAoZWw6IGFueSwgdHlwZTogc3RyaW5nKSA9PiB7XG4gIGlmICh0eXBlID09PSAnbm9kZScpIHtcbiAgICByZXR1cm4geyB4OiBlbC54ICsgZWwud2lkdGggLyAyLCB5OiBlbC55ICsgZWwuaGVpZ2h0IC8gMiB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiAoZWwuc291cmNlWCArIGVsLnRhcmdldFgpIC8gMixcbiAgICB5OiAoZWwuc291cmNlWSArIGVsLnRhcmdldFkpIC8gMixcbiAgfTtcbn07XG5cbmNvbnN0IGdldFBheWxvYWRPZlRvb2x0aXAgPSAoZWw6IGFueSwgdHlwZTogc3RyaW5nLCBuYW1lS2V5OiBEYXRhS2V5PGFueT4pID0+IHtcbiAgY29uc3QgeyBwYXlsb2FkIH0gPSBlbDtcbiAgaWYgKHR5cGUgPT09ICdub2RlJykge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIHBheWxvYWQ6IGVsLFxuICAgICAgICBuYW1lOiBnZXRWYWx1ZUJ5RGF0YUtleShwYXlsb2FkLCBuYW1lS2V5LCAnJyksXG4gICAgICAgIHZhbHVlOiBnZXRWYWx1ZUJ5RGF0YUtleShwYXlsb2FkLCAndmFsdWUnKSxcbiAgICAgIH0sXG4gICAgXTtcbiAgfVxuICBpZiAocGF5bG9hZC5zb3VyY2UgJiYgcGF5bG9hZC50YXJnZXQpIHtcbiAgICBjb25zdCBzb3VyY2VOYW1lID0gZ2V0VmFsdWVCeURhdGFLZXkocGF5bG9hZC5zb3VyY2UsIG5hbWVLZXksICcnKTtcbiAgICBjb25zdCB0YXJnZXROYW1lID0gZ2V0VmFsdWVCeURhdGFLZXkocGF5bG9hZC50YXJnZXQsIG5hbWVLZXksICcnKTtcblxuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIHBheWxvYWQ6IGVsLFxuICAgICAgICBuYW1lOiBgJHtzb3VyY2VOYW1lfSAtICR7dGFyZ2V0TmFtZX1gLFxuICAgICAgICB2YWx1ZTogZ2V0VmFsdWVCeURhdGFLZXkocGF5bG9hZCwgJ3ZhbHVlJyksXG4gICAgICB9LFxuICAgIF07XG4gIH1cblxuICByZXR1cm4gW107XG59O1xuXG5pbnRlcmZhY2UgTGlua0RhdGFJdGVtIHtcbiAgc291cmNlOiBudW1iZXI7XG4gIHRhcmdldDogbnVtYmVyO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmludGVyZmFjZSBTYW5rZXlEYXRhIHtcbiAgbm9kZXM6IGFueVtdO1xuICBsaW5rczogTGlua0RhdGFJdGVtW107XG59XG5cbnR5cGUgU2Fua2V5Tm9kZU9wdGlvbnMgPSBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4gfCAoKHByb3BzOiBhbnkpID0+IFJlYWN0RWxlbWVudDxTVkdFbGVtZW50PikgfCBSZWN0YW5nbGVQcm9wcztcblxudHlwZSBTYW5rZXlMaW5rT3B0aW9ucyA9XG4gIHwgUmVhY3RFbGVtZW50PFNWR0VsZW1lbnQ+XG4gIHwgKChwcm9wczogYW55KSA9PiBSZWFjdEVsZW1lbnQ8U1ZHRWxlbWVudD4pXG4gIHwgU1ZHUHJvcHM8U1ZHUGF0aEVsZW1lbnQ+O1xuXG5pbnRlcmZhY2UgU2Fua2V5UHJvcHMge1xuICBuYW1lS2V5PzogRGF0YUtleTxhbnk+O1xuXG4gIGRhdGFLZXk/OiBEYXRhS2V5PGFueT47XG5cbiAgd2lkdGg/OiBudW1iZXI7XG5cbiAgaGVpZ2h0PzogbnVtYmVyO1xuXG4gIGRhdGE6IFNhbmtleURhdGE7XG5cbiAgbm9kZVBhZGRpbmc/OiBudW1iZXI7XG5cbiAgbm9kZVdpZHRoPzogbnVtYmVyO1xuXG4gIGxpbmtDdXJ2YXR1cmU/OiBudW1iZXI7XG5cbiAgaXRlcmF0aW9ucz86IG51bWJlcjtcblxuICAvLyBUT0RPIG9iamVjdCAgZnVuY1xuICBub2RlPzogU2Fua2V5Tm9kZU9wdGlvbnM7XG5cbiAgbGluaz86IFNhbmtleUxpbmtPcHRpb25zO1xuXG4gIHN0eWxlPzogYW55O1xuXG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICBjaGlsZHJlbj86IGFueTtcblxuICBtYXJnaW4/OiBNYXJnaW47XG5cbiAgb25DbGljaz86IGFueTtcblxuICBvbk1vdXNlRW50ZXI/OiBhbnk7XG5cbiAgb25Nb3VzZUxlYXZlPzogYW55O1xufVxuXG50eXBlIFByb3BzID0gU1ZHUHJvcHM8U1ZHRWxlbWVudD4gJiBTYW5rZXlQcm9wcztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgYWN0aXZlRWxlbWVudD86IGFueTtcbiAgYWN0aXZlRWxlbWVudFR5cGU/OiBhbnk7XG4gIGlzVG9vbHRpcEFjdGl2ZTogYm9vbGVhbjtcbiAgbm9kZXM6IFNhbmtleU5vZGVbXTtcbiAgbGlua3M6IFNhbmtleUxpbmtbXTtcblxuICBwcmV2RGF0YT86IFNhbmtleURhdGE7XG4gIHByZXZXaWR0aD86IG51bWJlcjtcbiAgcHJldkhlaWdodD86IG51bWJlcjtcbiAgcHJldk1hcmdpbj86IE1hcmdpbjtcbiAgcHJldkl0ZXJhdGlvbnM/OiBudW1iZXI7XG4gIHByZXZOb2RlV2lkdGg/OiBudW1iZXI7XG4gIHByZXZOb2RlUGFkZGluZz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNhbmtleSBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdTYW5rZXknO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbmFtZUtleTogJ25hbWUnLFxuICAgIGRhdGFLZXk6ICd2YWx1ZScsXG4gICAgbm9kZVBhZGRpbmc6IDEwLFxuICAgIG5vZGVXaWR0aDogMTAsXG4gICAgbGlua0N1cnZhdHVyZTogMC41LFxuICAgIGl0ZXJhdGlvbnM6IDMyLFxuICAgIG1hcmdpbjogeyB0b3A6IDUsIHJpZ2h0OiA1LCBib3R0b206IDUsIGxlZnQ6IDUgfSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBhY3RpdmVFbGVtZW50OiBudWxsIGFzIGFueSxcbiAgICBhY3RpdmVFbGVtZW50VHlwZTogbnVsbCBhcyBhbnksXG4gICAgaXNUb29sdGlwQWN0aXZlOiBmYWxzZSxcbiAgICBub2RlczogW10gYXMgU2Fua2V5Tm9kZVtdLFxuICAgIGxpbmtzOiBbXSBhcyBTYW5rZXlMaW5rW10sXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKTogU3RhdGUge1xuICAgIGNvbnN0IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBpdGVyYXRpb25zLCBub2RlV2lkdGgsIG5vZGVQYWRkaW5nIH0gPSBuZXh0UHJvcHM7XG5cbiAgICBpZiAoXG4gICAgICBkYXRhICE9PSBwcmV2U3RhdGUucHJldkRhdGEgfHxcbiAgICAgIHdpZHRoICE9PSBwcmV2U3RhdGUucHJldldpZHRoIHx8XG4gICAgICBoZWlnaHQgIT09IHByZXZTdGF0ZS5wcmV2SGVpZ2h0IHx8XG4gICAgICAhc2hhbGxvd0VxdWFsKG1hcmdpbiwgcHJldlN0YXRlLnByZXZNYXJnaW4pIHx8XG4gICAgICBpdGVyYXRpb25zICE9PSBwcmV2U3RhdGUucHJldkl0ZXJhdGlvbnMgfHxcbiAgICAgIG5vZGVXaWR0aCAhPT0gcHJldlN0YXRlLnByZXZOb2RlV2lkdGggfHxcbiAgICAgIG5vZGVQYWRkaW5nICE9PSBwcmV2U3RhdGUucHJldk5vZGVQYWRkaW5nXG4gICAgKSB7XG4gICAgICBjb25zdCBjb250ZW50V2lkdGggPSB3aWR0aCAtICgobWFyZ2luICYmIG1hcmdpbi5sZWZ0KSB8fCAwKSAtICgobWFyZ2luICYmIG1hcmdpbi5yaWdodCkgfHwgMCk7XG4gICAgICBjb25zdCBjb250ZW50SGVpZ2h0ID0gaGVpZ2h0IC0gKChtYXJnaW4gJiYgbWFyZ2luLnRvcCkgfHwgMCkgLSAoKG1hcmdpbiAmJiBtYXJnaW4uYm90dG9tKSB8fCAwKTtcbiAgICAgIGNvbnN0IHsgbGlua3MsIG5vZGVzIH0gPSBjb21wdXRlRGF0YSh7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIHdpZHRoOiBjb250ZW50V2lkdGgsXG4gICAgICAgIGhlaWdodDogY29udGVudEhlaWdodCxcbiAgICAgICAgaXRlcmF0aW9ucyxcbiAgICAgICAgbm9kZVdpZHRoLFxuICAgICAgICBub2RlUGFkZGluZyxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY3RpdmVFbGVtZW50OiBudWxsLFxuICAgICAgICBhY3RpdmVFbGVtZW50VHlwZTogbnVsbCxcbiAgICAgICAgaXNUb29sdGlwQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIGxpbmtzLFxuXG4gICAgICAgIHByZXZEYXRhOiBkYXRhLFxuICAgICAgICBwcmV2V2lkdGg6IGl0ZXJhdGlvbnMsXG4gICAgICAgIHByZXZIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgcHJldk1hcmdpbjogbWFyZ2luLFxuICAgICAgICBwcmV2Tm9kZVBhZGRpbmc6IG5vZGVQYWRkaW5nLFxuICAgICAgICBwcmV2Tm9kZVdpZHRoOiBub2RlV2lkdGgsXG4gICAgICAgIHByZXZJdGVyYXRpb25zOiBpdGVyYXRpb25zLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlRW50ZXIoZWw6IFJlYWN0LlJlYWN0RWxlbWVudCwgdHlwZTogc3RyaW5nLCBlOiBhbnkpIHtcbiAgICBjb25zdCB7IG9uTW91c2VFbnRlciwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdG9vbHRpcEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIFRvb2x0aXAuZGlzcGxheU5hbWUpO1xuXG4gICAgaWYgKHRvb2x0aXBJdGVtKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudDogZWwsXG4gICAgICAgICAgYWN0aXZlRWxlbWVudFR5cGU6IHR5cGUsXG4gICAgICAgICAgaXNUb29sdGlwQWN0aXZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgaWYgKG9uTW91c2VFbnRlcikge1xuICAgICAgICAgICAgb25Nb3VzZUVudGVyKGVsLCB0eXBlLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAob25Nb3VzZUVudGVyKSB7XG4gICAgICBvbk1vdXNlRW50ZXIoZWwsIHR5cGUsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZU1vdXNlTGVhdmUoZWw6IFJlYWN0LlJlYWN0RWxlbWVudCwgdHlwZTogc3RyaW5nLCBlOiBhbnkpIHtcbiAgICBjb25zdCB7IG9uTW91c2VMZWF2ZSwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdG9vbHRpcEl0ZW0gPSBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIFRvb2x0aXAuZGlzcGxheU5hbWUpO1xuXG4gICAgaWYgKHRvb2x0aXBJdGVtKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgaXNUb29sdGlwQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZShlbCwgdHlwZSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGVsLCB0eXBlLCBlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVDbGljayhlbDogUmVhY3QuUmVhY3RFbGVtZW50LCB0eXBlOiBzdHJpbmcsIGU6IGFueSkge1xuICAgIGNvbnN0IHsgb25DbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DbGljaykgb25DbGljayhlbCwgdHlwZSwgZSk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyTGlua0l0ZW0ob3B0aW9uOiBhbnksIHByb3BzOiBhbnkpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvcHRpb24sIHByb3BzKTtcbiAgICB9XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uKHByb3BzKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHNvdXJjZVgsIHNvdXJjZVksIHNvdXJjZUNvbnRyb2xYLCB0YXJnZXRYLCB0YXJnZXRZLCB0YXJnZXRDb250cm9sWCwgbGlua1dpZHRoLCAuLi5vdGhlcnMgfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxwYXRoXG4gICAgICAgIGNsYXNzTmFtZT1cInJlY2hhcnRzLXNhbmtleS1saW5rXCJcbiAgICAgICAgZD17YFxuICAgICAgICAgIE0ke3NvdXJjZVh9LCR7c291cmNlWX1cbiAgICAgICAgICBDJHtzb3VyY2VDb250cm9sWH0sJHtzb3VyY2VZfSAke3RhcmdldENvbnRyb2xYfSwke3RhcmdldFl9ICR7dGFyZ2V0WH0sJHt0YXJnZXRZfVxuICAgICAgICBgfVxuICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgIHN0cm9rZT1cIiMzMzNcIlxuICAgICAgICBzdHJva2VXaWR0aD17bGlua1dpZHRofVxuICAgICAgICBzdHJva2VPcGFjaXR5PVwiMC4yXCJcbiAgICAgICAgey4uLmZpbHRlclByb3BzKG90aGVycyl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMaW5rcyhsaW5rczogU2Fua2V5TGlua1tdLCBub2RlczogU2Fua2V5Tm9kZVtdKSB7XG4gICAgY29uc3QgeyBsaW5rQ3VydmF0dXJlLCBsaW5rOiBsaW5rQ29udGVudCwgbWFyZ2luIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRvcCA9IF8uZ2V0KG1hcmdpbiwgJ3RvcCcpIHx8IDA7XG4gICAgY29uc3QgbGVmdCA9IF8uZ2V0KG1hcmdpbiwgJ2xlZnQnKSB8fCAwO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMYXllciBjbGFzc05hbWU9XCJyZWNoYXJ0cy1zYW5rZXktbGlua3NcIiBrZXk9XCJyZWNoYXJ0cy1zYW5rZXktbGlua3NcIj5cbiAgICAgICAge2xpbmtzLm1hcCgobGluazogU2Fua2V5TGluaywgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBzeTogc291cmNlUmVsYXRpdmVZLCB0eTogdGFyZ2V0UmVsYXRpdmVZLCBkeTogbGlua1dpZHRoIH0gPSBsaW5rO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGVzW2xpbmsuc291cmNlXTtcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSBub2Rlc1tsaW5rLnRhcmdldF07XG4gICAgICAgICAgY29uc3Qgc291cmNlWCA9IHNvdXJjZS54ICsgc291cmNlLmR4ICsgbGVmdDtcbiAgICAgICAgICBjb25zdCB0YXJnZXRYID0gdGFyZ2V0LnggKyBsZWZ0O1xuICAgICAgICAgIGNvbnN0IGludGVycG9sYXRpb25GdW5jID0gaW50ZXJwb2xhdGlvbkdlbmVyYXRvcihzb3VyY2VYLCB0YXJnZXRYKTtcbiAgICAgICAgICBjb25zdCBzb3VyY2VDb250cm9sWCA9IGludGVycG9sYXRpb25GdW5jKGxpbmtDdXJ2YXR1cmUpO1xuICAgICAgICAgIGNvbnN0IHRhcmdldENvbnRyb2xYID0gaW50ZXJwb2xhdGlvbkZ1bmMoMSAtIGxpbmtDdXJ2YXR1cmUpO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVkgPSBzb3VyY2UueSArIHNvdXJjZVJlbGF0aXZlWSArIGxpbmtXaWR0aCAvIDIgKyB0b3A7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0WSA9IHRhcmdldC55ICsgdGFyZ2V0UmVsYXRpdmVZICsgbGlua1dpZHRoIC8gMiArIHRvcDtcblxuICAgICAgICAgIGNvbnN0IGxpbmtQcm9wcyA9IHtcbiAgICAgICAgICAgIHNvdXJjZVgsXG4gICAgICAgICAgICB0YXJnZXRYLFxuICAgICAgICAgICAgc291cmNlWSxcbiAgICAgICAgICAgIHRhcmdldFksXG4gICAgICAgICAgICBzb3VyY2VDb250cm9sWCxcbiAgICAgICAgICAgIHRhcmdldENvbnRyb2xYLFxuICAgICAgICAgICAgc291cmNlUmVsYXRpdmVZLFxuICAgICAgICAgICAgdGFyZ2V0UmVsYXRpdmVZLFxuICAgICAgICAgICAgbGlua1dpZHRoLFxuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBwYXlsb2FkOiB7IC4uLmxpbmssIHNvdXJjZSwgdGFyZ2V0IH0sXG4gICAgICAgICAgICAuLi5maWx0ZXJQcm9wcyhsaW5rQ29udGVudCksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBldmVudHMgPSB7XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlci5iaW5kKHRoaXMsIGxpbmtQcm9wcywgJ2xpbmsnKSxcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLmJpbmQodGhpcywgbGlua1Byb3BzLCAnbGluaycpLFxuICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMsIGxpbmtQcm9wcywgJ2xpbmsnKSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICAgIDxMYXllciBrZXk9e2BsaW5rJHtpfWB9IHsuLi5ldmVudHN9PlxuICAgICAgICAgICAgICB7KHRoaXMuY29uc3RydWN0b3IgYXMgYW55KS5yZW5kZXJMaW5rSXRlbShsaW5rQ29udGVudCwgbGlua1Byb3BzKX1cbiAgICAgICAgICAgIDwvTGF5ZXI+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L0xheWVyPlxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyTm9kZUl0ZW0ob3B0aW9uOiBhbnksIHByb3BzOiBQcm9wcykge1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChvcHRpb24pKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KG9wdGlvbiwgcHJvcHMpO1xuICAgIH1cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbikpIHtcbiAgICAgIHJldHVybiBvcHRpb24ocHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiA8UmVjdGFuZ2xlIGNsYXNzTmFtZT1cInJlY2hhcnRzLXNhbmtleS1ub2RlXCIgZmlsbD1cIiMwMDg4ZmVcIiBmaWxsT3BhY2l0eT1cIjAuOFwiIHsuLi5maWx0ZXJQcm9wcyhwcm9wcyl9IC8+O1xuICB9XG5cbiAgcmVuZGVyTm9kZXMobm9kZXM6IFNhbmtleU5vZGVbXSkge1xuICAgIGNvbnN0IHsgbm9kZTogbm9kZUNvbnRlbnQsIG1hcmdpbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB0b3AgPSBfLmdldChtYXJnaW4sICd0b3AnKSB8fCAwO1xuICAgIGNvbnN0IGxlZnQgPSBfLmdldChtYXJnaW4sICdsZWZ0JykgfHwgMDtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5ZXIgY2xhc3NOYW1lPVwicmVjaGFydHMtc2Fua2V5LW5vZGVzXCIga2V5PVwicmVjaGFydHMtc2Fua2V5LW5vZGVzXCI+XG4gICAgICAgIHtub2Rlcy5tYXAoKG5vZGUsIGkpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHgsIHksIGR4LCBkeSB9ID0gbm9kZTtcbiAgICAgICAgICBjb25zdCBub2RlUHJvcHMgPSB7XG4gICAgICAgICAgICAuLi5maWx0ZXJQcm9wcyhub2RlQ29udGVudCksXG4gICAgICAgICAgICB4OiB4ICsgbGVmdCxcbiAgICAgICAgICAgIHk6IHkgKyB0b3AsXG4gICAgICAgICAgICB3aWR0aDogZHgsXG4gICAgICAgICAgICBoZWlnaHQ6IGR5LFxuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBwYXlsb2FkOiBub2RlLFxuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3QgZXZlbnRzID0ge1xuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIuYmluZCh0aGlzLCBub2RlUHJvcHMsICdub2RlJyksXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHRoaXMsIG5vZGVQcm9wcywgJ25vZGUnKSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzLCBub2RlUHJvcHMsICdub2RlJyksXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICA8TGF5ZXIga2V5PXtgbm9kZSR7aX1gfSB7Li4uZXZlbnRzfT5cbiAgICAgICAgICAgICAgeyh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkucmVuZGVyTm9kZUl0ZW0obm9kZUNvbnRlbnQsIG5vZGVQcm9wcyl9XG4gICAgICAgICAgICA8L0xheWVyPlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9MYXllcj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVG9vbHRpcCgpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCB3aWR0aCwgaGVpZ2h0LCBuYW1lS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRvb2x0aXBJdGVtID0gZmluZENoaWxkQnlUeXBlKGNoaWxkcmVuLCBUb29sdGlwLmRpc3BsYXlOYW1lKTtcblxuICAgIGlmICghdG9vbHRpcEl0ZW0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaXNUb29sdGlwQWN0aXZlLCBhY3RpdmVFbGVtZW50LCBhY3RpdmVFbGVtZW50VHlwZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB2aWV3Qm94ID0geyB4OiAwLCB5OiAwLCB3aWR0aCwgaGVpZ2h0IH07XG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IGFjdGl2ZUVsZW1lbnRcbiAgICAgID8gZ2V0Q29vcmRpbmF0ZU9mVG9vbHRpcChhY3RpdmVFbGVtZW50LCBhY3RpdmVFbGVtZW50VHlwZSlcbiAgICAgIDogZGVmYXVsdENvb3JkaW5hdGVPZlRvb2x0aXA7XG4gICAgY29uc3QgcGF5bG9hZCA9IGFjdGl2ZUVsZW1lbnQgPyBnZXRQYXlsb2FkT2ZUb29sdGlwKGFjdGl2ZUVsZW1lbnQsIGFjdGl2ZUVsZW1lbnRUeXBlLCBuYW1lS2V5KSA6IFtdO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0b29sdGlwSXRlbSwge1xuICAgICAgdmlld0JveCxcbiAgICAgIGFjdGl2ZTogaXNUb29sdGlwQWN0aXZlLFxuICAgICAgY29vcmRpbmF0ZSxcbiAgICAgIGxhYmVsOiAnJyxcbiAgICAgIHBheWxvYWQsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdpZHRoSGVpZ2h0KHRoaXMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGNsYXNzTmFtZSwgc3R5bGUsIGNoaWxkcmVuLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBsaW5rcywgbm9kZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgYXR0cnMgPSBmaWx0ZXJQcm9wcyhvdGhlcnMpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWNoYXJ0cy13cmFwcGVyJywgY2xhc3NOYW1lKX1cbiAgICAgICAgc3R5bGU9e3sgLi4uc3R5bGUsIHBvc2l0aW9uOiAncmVsYXRpdmUnLCBjdXJzb3I6ICdkZWZhdWx0Jywgd2lkdGgsIGhlaWdodCB9fVxuICAgICAgPlxuICAgICAgICA8U3VyZmFjZSB7Li4uYXR0cnN9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgICAgIHtmaWx0ZXJTdmdFbGVtZW50cyhjaGlsZHJlbil9XG4gICAgICAgICAge3RoaXMucmVuZGVyTGlua3MobGlua3MsIG5vZGVzKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJOb2Rlcyhub2Rlcyl9XG4gICAgICAgIDwvU3VyZmFjZT5cbiAgICAgICAge3RoaXMucmVuZGVyVG9vbHRpcCgpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFJhZGFyIENoYXJ0XG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCB9IGZyb20gJy4vZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0JztcbmltcG9ydCB7IFJhZGFyIH0gZnJvbSAnLi4vcG9sYXIvUmFkYXInO1xuaW1wb3J0IHsgUG9sYXJBbmdsZUF4aXMgfSBmcm9tICcuLi9wb2xhci9Qb2xhckFuZ2xlQXhpcyc7XG5pbXBvcnQgeyBQb2xhclJhZGl1c0F4aXMgfSBmcm9tICcuLi9wb2xhci9Qb2xhclJhZGl1c0F4aXMnO1xuaW1wb3J0IHsgZm9ybWF0QXhpc01hcCB9IGZyb20gJy4uL3V0aWwvUG9sYXJVdGlscyc7XG5pbXBvcnQgeyBDYXRlZ29yaWNhbENoYXJ0T3B0aW9ucyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgUmFkYXJDaGFydCA9IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCh7XG4gIGNoYXJ0TmFtZTogJ1JhZGFyQ2hhcnQnLFxuICBHcmFwaGljYWxDaGlsZDogUmFkYXIsXG4gIGF4aXNDb21wb25lbnRzOiBbXG4gICAgeyBheGlzVHlwZTogJ2FuZ2xlQXhpcycsIEF4aXNDb21wOiBQb2xhckFuZ2xlQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICdyYWRpdXNBeGlzJywgQXhpc0NvbXA6IFBvbGFyUmFkaXVzQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBsYXlvdXQ6ICdjZW50cmljJyxcbiAgICBzdGFydEFuZ2xlOiA5MCxcbiAgICBlbmRBbmdsZTogLTI3MCxcbiAgICBjeDogJzUwJScsXG4gICAgY3k6ICc1MCUnLFxuICAgIGlubmVyUmFkaXVzOiAwLFxuICAgIG91dGVyUmFkaXVzOiAnODAlJyxcbiAgfSxcbn0gYXMgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMpO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFNjYXR0ZXIgQ2hhcnRcbiAqL1xuaW1wb3J0IHsgZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0IH0gZnJvbSAnLi9nZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQnO1xuaW1wb3J0IHsgU2NhdHRlciB9IGZyb20gJy4uL2NhcnRlc2lhbi9TY2F0dGVyJztcbmltcG9ydCB7IFhBeGlzIH0gZnJvbSAnLi4vY2FydGVzaWFuL1hBeGlzJztcbmltcG9ydCB7IFlBeGlzIH0gZnJvbSAnLi4vY2FydGVzaWFuL1lBeGlzJztcbmltcG9ydCB7IFpBeGlzIH0gZnJvbSAnLi4vY2FydGVzaWFuL1pBeGlzJztcbmltcG9ydCB7IGZvcm1hdEF4aXNNYXAgfSBmcm9tICcuLi91dGlsL0NhcnRlc2lhblV0aWxzJztcbmltcG9ydCB7IENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBTY2F0dGVyQ2hhcnQgPSBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQoe1xuICBjaGFydE5hbWU6ICdTY2F0dGVyQ2hhcnQnLFxuICBHcmFwaGljYWxDaGlsZDogU2NhdHRlcixcbiAgZXZlbnRUeXBlOiAnc2luZ2xlJyxcbiAgYXhpc0NvbXBvbmVudHM6IFtcbiAgICB7IGF4aXNUeXBlOiAneEF4aXMnLCBBeGlzQ29tcDogWEF4aXMgfSxcbiAgICB7IGF4aXNUeXBlOiAneUF4aXMnLCBBeGlzQ29tcDogWUF4aXMgfSxcbiAgICB7IGF4aXNUeXBlOiAnekF4aXMnLCBBeGlzQ29tcDogWkF4aXMgfSxcbiAgXSxcbiAgZm9ybWF0QXhpc01hcCxcbn0gYXMgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMpO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IEFyZWEgQ2hhcnRcbiAqL1xuaW1wb3J0IHsgZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0IH0gZnJvbSAnLi9nZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQnO1xuaW1wb3J0IHsgQXJlYSB9IGZyb20gJy4uL2NhcnRlc2lhbi9BcmVhJztcbmltcG9ydCB7IFhBeGlzIH0gZnJvbSAnLi4vY2FydGVzaWFuL1hBeGlzJztcbmltcG9ydCB7IFlBeGlzIH0gZnJvbSAnLi4vY2FydGVzaWFuL1lBeGlzJztcbmltcG9ydCB7IGZvcm1hdEF4aXNNYXAgfSBmcm9tICcuLi91dGlsL0NhcnRlc2lhblV0aWxzJztcbmltcG9ydCB7IENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBBcmVhQ2hhcnQgPSBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQoe1xuICBjaGFydE5hbWU6ICdBcmVhQ2hhcnQnLFxuICBHcmFwaGljYWxDaGlsZDogQXJlYSxcbiAgYXhpc0NvbXBvbmVudHM6IFtcbiAgICB7IGF4aXNUeXBlOiAneEF4aXMnLCBBeGlzQ29tcDogWEF4aXMgfSxcbiAgICB7IGF4aXNUeXBlOiAneUF4aXMnLCBBeGlzQ29tcDogWUF4aXMgfSxcbiAgXSxcbiAgZm9ybWF0QXhpc01hcCxcbn0gYXMgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMpO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IFJhZGFyIEJhciBDaGFydFxuICovXG5pbXBvcnQgeyBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQgfSBmcm9tICcuL2dlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCc7XG5pbXBvcnQgeyBQb2xhckFuZ2xlQXhpcyB9IGZyb20gJy4uL3BvbGFyL1BvbGFyQW5nbGVBeGlzJztcbmltcG9ydCB7IFBvbGFyUmFkaXVzQXhpcyB9IGZyb20gJy4uL3BvbGFyL1BvbGFyUmFkaXVzQXhpcyc7XG5pbXBvcnQgeyBmb3JtYXRBeGlzTWFwIH0gZnJvbSAnLi4vdXRpbC9Qb2xhclV0aWxzJztcbmltcG9ydCB7IFJhZGlhbEJhciB9IGZyb20gJy4uL3BvbGFyL1JhZGlhbEJhcic7XG5pbXBvcnQgeyBDYXRlZ29yaWNhbENoYXJ0T3B0aW9ucyB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgUmFkaWFsQmFyQ2hhcnQgPSBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQoe1xuICBjaGFydE5hbWU6ICdSYWRpYWxCYXJDaGFydCcsXG4gIEdyYXBoaWNhbENoaWxkOiBSYWRpYWxCYXIsXG4gIGxlZ2VuZENvbnRlbnQ6ICdjaGlsZHJlbicsXG4gIGF4aXNDb21wb25lbnRzOiBbXG4gICAgeyBheGlzVHlwZTogJ2FuZ2xlQXhpcycsIEF4aXNDb21wOiBQb2xhckFuZ2xlQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICdyYWRpdXNBeGlzJywgQXhpc0NvbXA6IFBvbGFyUmFkaXVzQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBsYXlvdXQ6ICdyYWRpYWwnLFxuICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgZW5kQW5nbGU6IDM2MCxcbiAgICBjeDogJzUwJScsXG4gICAgY3k6ICc1MCUnLFxuICAgIGlubmVyUmFkaXVzOiAwLFxuICAgIG91dGVyUmFkaXVzOiAnODAlJyxcbiAgfSxcbn0gYXMgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMpO1xuIiwiLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IENvbXBvc2VkIENoYXJ0XG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCB9IGZyb20gJy4vZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0JztcbmltcG9ydCB7IEFyZWEgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vQXJlYSc7XG5pbXBvcnQgeyBCYXIgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vQmFyJztcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vTGluZSc7XG5pbXBvcnQgeyBTY2F0dGVyIH0gZnJvbSAnLi4vY2FydGVzaWFuL1NjYXR0ZXInO1xuaW1wb3J0IHsgWEF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWEF4aXMnO1xuaW1wb3J0IHsgWUF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWUF4aXMnO1xuaW1wb3J0IHsgWkF4aXMgfSBmcm9tICcuLi9jYXJ0ZXNpYW4vWkF4aXMnO1xuaW1wb3J0IHsgZm9ybWF0QXhpc01hcCB9IGZyb20gJy4uL3V0aWwvQ2FydGVzaWFuVXRpbHMnO1xuaW1wb3J0IHsgQ2F0ZWdvcmljYWxDaGFydE9wdGlvbnMgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IENvbXBvc2VkQ2hhcnQgPSBnZW5lcmF0ZUNhdGVnb3JpY2FsQ2hhcnQoe1xuICBjaGFydE5hbWU6ICdDb21wb3NlZENoYXJ0JyxcbiAgR3JhcGhpY2FsQ2hpbGQ6IFtMaW5lLCBBcmVhLCBCYXIsIFNjYXR0ZXJdLFxuICBheGlzQ29tcG9uZW50czogW1xuICAgIHsgYXhpc1R5cGU6ICd4QXhpcycsIEF4aXNDb21wOiBYQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICd5QXhpcycsIEF4aXNDb21wOiBZQXhpcyB9LFxuICAgIHsgYXhpc1R5cGU6ICd6QXhpcycsIEF4aXNDb21wOiBaQXhpcyB9LFxuICBdLFxuICBmb3JtYXRBeGlzTWFwLFxufSBhcyBDYXRlZ29yaWNhbENoYXJ0T3B0aW9ucyk7XG4iLCIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgRnVubmVsIENoYXJ0XG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCB9IGZyb20gJy4vZ2VuZXJhdGVDYXRlZ29yaWNhbENoYXJ0JztcbmltcG9ydCB7IEZ1bm5lbCB9IGZyb20gJy4uL251bWJlckF4aXMvRnVubmVsJztcbmltcG9ydCB7IENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBGdW5uZWxDaGFydCA9IGdlbmVyYXRlQ2F0ZWdvcmljYWxDaGFydCh7XG4gIGNoYXJ0TmFtZTogJ0Z1bm5lbENoYXJ0JyxcbiAgR3JhcGhpY2FsQ2hpbGQ6IEZ1bm5lbCxcbiAgZXZlbnRUeXBlOiAnaXRlbScsXG4gIGF4aXNDb21wb25lbnRzOiBbXSxcbiAgZGVmYXVsdFByb3BzOiB7XG4gICAgbGF5b3V0OiAnY2VudHJpYycsXG4gIH0sXG59IGFzIENhdGVnb3JpY2FsQ2hhcnRPcHRpb25zKTtcbiIsInZhciByYWZTY2hkID0gZnVuY3Rpb24gcmFmU2NoZChmbikge1xuICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgdmFyIGZyYW1lSWQgPSBudWxsO1xuXG4gIHZhciB3cmFwcGVyRm4gPSBmdW5jdGlvbiB3cmFwcGVyRm4oKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJncztcblxuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgIGZuLmFwcGx5KHZvaWQgMCwgbGFzdEFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHdyYXBwZXJGbi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgZnJhbWVJZCA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZXJGbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJhZlNjaGQ7XG4iLCJpbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoL2RlYm91bmNlJztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gvdGhyb3R0bGUnO1xuZXhwb3J0IHZhciBsaXN0SGFuZGxlID0ge1xuICBkZWJvdW5jZTogZGVib3VuY2UsXG4gIHRocm90dGxlOiB0aHJvdHRsZVxufTtcbmV4cG9ydCB2YXIgZ2V0SGFuZGxlID0gZnVuY3Rpb24gZ2V0SGFuZGxlKHR5cGUpIHtcbiAgcmV0dXJuIGxpc3RIYW5kbGVbdHlwZV07XG59O1xuZXhwb3J0IHZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbihmbikge1xuICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xufTtcbmV4cG9ydCB2YXIgaXNTU1IgPSBmdW5jdGlvbiBpc1NTUigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xufTtcbmV4cG9ydCB2YXIgaXNET01FbGVtZW50ID0gZnVuY3Rpb24gaXNET01FbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQ7XG59OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50LCBjbG9uZUVsZW1lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xuaW1wb3J0IHJhZlNjaGQgZnJvbSAncmFmLXNjaGQnO1xuaW1wb3J0IHsgZ2V0SGFuZGxlLCBpc0Z1bmN0aW9uLCBpc1NTUiwgaXNET01FbGVtZW50IH0gZnJvbSBcIi4uL2xpYi91dGlsc1wiO1xuXG52YXIgUmVzaXplRGV0ZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZXNpemVEZXRlY3RvciwgX1B1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUmVzaXplRGV0ZWN0b3IpO1xuXG4gIGZ1bmN0aW9uIFJlc2l6ZURldGVjdG9yKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc2l6ZURldGVjdG9yKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNhbmNlbEhhbmRsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnJlc2l6ZUhhbmRsZXIgJiYgX3RoaXMucmVzaXplSGFuZGxlci5jYW5jZWwpIHtcbiAgICAgICAgLy8gY2FuY2VsIGRlYm91bmNlZCBoYW5kbGVyXG4gICAgICAgIF90aGlzLnJlc2l6ZUhhbmRsZXIuY2FuY2VsKCk7XG5cbiAgICAgICAgX3RoaXMucmVzaXplSGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmFmQ2xlYW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnJhZiAmJiBfdGhpcy5yYWYuY2FuY2VsKSB7XG4gICAgICAgIF90aGlzLnJhZi5jYW5jZWwoKTtcblxuICAgICAgICBfdGhpcy5yYWYgPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImF0dGFjaE9ic2VydmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0YXJnZXRSZWYgPSBfdGhpcy5wcm9wcy50YXJnZXRSZWY7XG5cbiAgICAgIGlmICh0YXJnZXRSZWYgJiYgdGFyZ2V0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgX3RoaXMudGFyZ2V0UmVmLmN1cnJlbnQgPSB0YXJnZXRSZWYuY3VycmVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSBfdGhpcy5nZXRFbGVtZW50KCk7XG5cbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAvLyBjYW4ndCBmaW5kIGVsZW1lbnQgdG8gb2JzZXJ2ZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5vYnNlcnZhYmxlRWxlbWVudCAmJiBfdGhpcy5vYnNlcnZhYmxlRWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICAvLyBlbGVtZW50IGlzIGFscmVhZHkgb2JzZXJ2ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5vYnNlcnZhYmxlRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgIF90aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0RWxlbWVudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBxdWVyeVNlbGVjdG9yID0gX3RoaXMkcHJvcHMucXVlcnlTZWxlY3RvcixcbiAgICAgICAgICB0YXJnZXREb21FbCA9IF90aGlzJHByb3BzLnRhcmdldERvbUVsO1xuICAgICAgaWYgKGlzU1NSKCkpIHJldHVybiB1bmRlZmluZWQ7IC8vIGluIGNhc2Ugd2UgcGFzcyBhIHF1ZXJ5U2VsZWN0b3JcblxuICAgICAgaWYgKHF1ZXJ5U2VsZWN0b3IpIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHF1ZXJ5U2VsZWN0b3IpOyAvLyBpbiBjYXNlIHdlIHBhc3MgYSBET00gZWxlbWVudFxuXG4gICAgICBpZiAodGFyZ2V0RG9tRWwgJiYgaXNET01FbGVtZW50KHRhcmdldERvbUVsKSkgcmV0dXJuIHRhcmdldERvbUVsOyAvLyBpbiBjYXNlIHdlIHBhc3MgYSBSZWFjdCByZWYgdXNpbmcgUmVhY3QuY3JlYXRlUmVmKClcblxuICAgICAgaWYgKF90aGlzLnRhcmdldFJlZiAmJiBpc0RPTUVsZW1lbnQoX3RoaXMudGFyZ2V0UmVmLmN1cnJlbnQpKSByZXR1cm4gX3RoaXMudGFyZ2V0UmVmLmN1cnJlbnQ7IC8vIHRoZSB3b3JzZSBjYXNlIHdoZW4gd2UgZG9uJ3QgcmVjZWl2ZSBhbnkgaW5mb3JtYXRpb24gZnJvbSB0aGUgcGFyZW50IGFuZCB0aGUgbGlicmFyeSBkb2Vzbid0IGFkZCBhbnkgd3JhcHBlcnNcbiAgICAgIC8vIHdlIGhhdmUgdG8gdXNlIGEgZGVwcmVjYXRlZCBgZmluZERPTU5vZGVgIG1ldGhvZCBpbiBvcmRlciB0byBmaW5kIGEgRE9NIGVsZW1lbnQgdG8gYXR0YWNoIHRvXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZmluZC1kb20tbm9kZVxuXG4gICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBmaW5kRE9NTm9kZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICBpZiAoIWN1cnJlbnRFbGVtZW50KSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgcmVuZGVyVHlwZSA9IF90aGlzLmdldFJlbmRlclR5cGUoKTtcblxuICAgICAgc3dpdGNoIChyZW5kZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3JlbmRlclByb3AnOlxuICAgICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICBjYXNlICdjaGlsZEZ1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgICAgY2FzZSAnY2hpbGQnOlxuICAgICAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICBjYXNlICdjaGlsZEFycmF5JzpcbiAgICAgICAgICByZXR1cm4gY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjcmVhdGVVcGRhdGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnJhZkNsZWFuKCk7XG5cbiAgICAgIF90aGlzLnJhZiA9IHJhZlNjaGQoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuICAgICAgICB2YXIgb25SZXNpemUgPSBfdGhpcy5wcm9wcy5vblJlc2l6ZTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlc2l6ZSkpIHtcbiAgICAgICAgICBvblJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpcy5yYWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY3JlYXRlUmVzaXplSGFuZGxlclwiLCBmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgd2lkdGhDdXJyZW50ID0gX3RoaXMkc3RhdGUud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0Q3VycmVudCA9IF90aGlzJHN0YXRlLmhlaWdodDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBoYW5kbGVXaWR0aCA9IF90aGlzJHByb3BzMi5oYW5kbGVXaWR0aCxcbiAgICAgICAgICBoYW5kbGVIZWlnaHQgPSBfdGhpcyRwcm9wczIuaGFuZGxlSGVpZ2h0O1xuICAgICAgaWYgKCFoYW5kbGVXaWR0aCAmJiAhaGFuZGxlSGVpZ2h0KSByZXR1cm47XG5cbiAgICAgIHZhciB1cGRhdGVyID0gX3RoaXMuY3JlYXRlVXBkYXRlcigpO1xuXG4gICAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHZhciBfcmVmMiA9IGVudHJ5ICYmIGVudHJ5LmNvbnRlbnRSZWN0IHx8IHt9LFxuICAgICAgICAgICAgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcblxuICAgICAgICB2YXIgaXNXaWR0aENoYW5nZWQgPSBoYW5kbGVXaWR0aCAmJiB3aWR0aEN1cnJlbnQgIT09IHdpZHRoO1xuICAgICAgICB2YXIgaXNIZWlnaHRDaGFuZ2VkID0gaGFuZGxlSGVpZ2h0ICYmIGhlaWdodEN1cnJlbnQgIT09IGhlaWdodDtcbiAgICAgICAgdmFyIGlzU2l6ZUNoYW5nZWQgPSBpc1dpZHRoQ2hhbmdlZCB8fCBpc0hlaWdodENoYW5nZWQ7XG4gICAgICAgIHZhciBzaG91bGRTZXRTaXplID0gIV90aGlzLnNraXBPbk1vdW50ICYmIGlzU2l6ZUNoYW5nZWQgJiYgIWlzU1NSKCk7XG5cbiAgICAgICAgaWYgKHNob3VsZFNldFNpemUpIHtcbiAgICAgICAgICB1cGRhdGVyKHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5za2lwT25Nb3VudCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0UmVuZGVyVHlwZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMzLnJlbmRlcixcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ocmVuZGVyKSkge1xuICAgICAgICAvLyBERVBSRUNBVEVELiBVc2UgYENoaWxkIEZ1bmN0aW9uIFBhdHRlcm5gIGluc3RlYWRcbiAgICAgICAgcmV0dXJuICdyZW5kZXJQcm9wJztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiAnY2hpbGRGdW5jdGlvbic7XG4gICAgICB9XG5cbiAgICAgIGlmICggLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgICByZXR1cm4gJ2NoaWxkJztcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIERFUFJFQ0FURUQuIFdyYXAgY2hpbGRyZW4gd2l0aCBhIHNpbmdsZSBwYXJlbnRcbiAgICAgICAgcmV0dXJuICdjaGlsZEFycmF5JztcbiAgICAgIH0gLy8gREVQUkVDQVRFRC4gVXNlIGBDaGlsZCBGdW5jdGlvbiBQYXR0ZXJuYCBpbnN0ZWFkXG5cblxuICAgICAgcmV0dXJuICdwYXJlbnQnO1xuICAgIH0pO1xuXG4gICAgdmFyIHNraXBPbk1vdW50ID0gcHJvcHMuc2tpcE9uTW91bnQsXG4gICAgICAgIHJlZnJlc2hNb2RlID0gcHJvcHMucmVmcmVzaE1vZGUsXG4gICAgICAgIHJlZnJlc2hSYXRlID0gcHJvcHMucmVmcmVzaFJhdGUsXG4gICAgICAgIHJlZnJlc2hPcHRpb25zID0gcHJvcHMucmVmcmVzaE9wdGlvbnM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgaGVpZ2h0OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIF90aGlzLnNraXBPbk1vdW50ID0gc2tpcE9uTW91bnQ7XG4gICAgX3RoaXMucmFmID0gbnVsbDtcbiAgICBfdGhpcy51bm1vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy50YXJnZXRSZWYgPSAvKiNfX1BVUkVfXyovY3JlYXRlUmVmKCk7XG4gICAgX3RoaXMub2JzZXJ2YWJsZUVsZW1lbnQgPSBudWxsO1xuICAgIHZhciBoYW5kbGUgPSBnZXRIYW5kbGUocmVmcmVzaE1vZGUpO1xuICAgIF90aGlzLnJlc2l6ZUhhbmRsZXIgPSBoYW5kbGUgPyBoYW5kbGUoX3RoaXMuY3JlYXRlUmVzaXplSGFuZGxlciwgcmVmcmVzaFJhdGUsIHJlZnJlc2hPcHRpb25zKSA6IF90aGlzLmNyZWF0ZVJlc2l6ZUhhbmRsZXI7XG4gICAgX3RoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoX3RoaXMucmVzaXplSGFuZGxlcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc2l6ZURldGVjdG9yLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYXR0YWNoT2JzZXJ2ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuYXR0YWNoT2JzZXJ2ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMucmFmQ2xlYW4oKTtcbiAgICAgIHRoaXMuY2FuY2VsSGFuZGxlcigpO1xuICAgICAgdGhpcy51bm1vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHM0LnJlbmRlcixcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBXcmFwcGVyVGFnID0gX3RoaXMkcHJvcHM0Lm5vZGVUeXBlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRzdGF0ZTIud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkc3RhdGUyLmhlaWdodDtcbiAgICAgIHZhciBjaGlsZFByb3BzID0ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICB0YXJnZXRSZWY6IHRoaXMudGFyZ2V0UmVmXG4gICAgICB9O1xuICAgICAgdmFyIHJlbmRlclR5cGUgPSB0aGlzLmdldFJlbmRlclR5cGUoKTtcblxuICAgICAgc3dpdGNoIChyZW5kZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3JlbmRlclByb3AnOlxuICAgICAgICAgIHJldHVybiByZW5kZXIoY2hpbGRQcm9wcyk7XG5cbiAgICAgICAgY2FzZSAnY2hpbGRGdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKGNoaWxkUHJvcHMpO1xuXG4gICAgICAgIGNhc2UgJ2NoaWxkJzpcbiAgICAgICAgICAvLyBAVE9ETyBidWcgcHJvbmUgbG9naWNcbiAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkcmVuLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBjaGlsZCBpcyBhIG5hdGl2ZSBET00gZWxlbWVudHMgc3VjaCBhcyBkaXYsIHNwYW4gZXRjXG4gICAgICAgICAgICB2YXIgdGFyZ2V0UmVmID0gY2hpbGRQcm9wcy50YXJnZXRSZWYsXG4gICAgICAgICAgICAgICAgbmF0aXZlUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoY2hpbGRQcm9wcywgW1widGFyZ2V0UmVmXCJdKTtcblxuICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIG5hdGl2ZVByb3BzKTtcbiAgICAgICAgICB9IC8vIGNsYXNzIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IG90aGVyd2lzZVxuXG5cbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcyk7XG5cbiAgICAgICAgY2FzZSAnY2hpbGRBcnJheSc6XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWVsICYmIC8qI19fUFVSRV9fKi9jbG9uZUVsZW1lbnQoZWwsIGNoaWxkUHJvcHMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZXJUYWcsIG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNpemVEZXRlY3Rvcjtcbn0oUHVyZUNvbXBvbmVudCk7XG5cblJlc2l6ZURldGVjdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgaGFuZGxlV2lkdGg6IHRydWUsXG4gIGhhbmRsZUhlaWdodDogdHJ1ZSxcbiAgc2tpcE9uTW91bnQ6IGZhbHNlLFxuICByZWZyZXNoUmF0ZTogMTAwMCxcbiAgcmVmcmVzaE1vZGU6IHVuZGVmaW5lZCxcbiAgcmVmcmVzaE9wdGlvbnM6IHVuZGVmaW5lZCxcbiAgcXVlcnlTZWxlY3RvcjogbnVsbCxcbiAgdGFyZ2V0RG9tRWw6IG51bGwsXG4gIHRhcmdldFJlZjogbnVsbCxcbiAgb25SZXNpemU6IG51bGwsXG4gIHJlbmRlcjogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogbnVsbCxcbiAgbm9kZVR5cGU6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzaXplRGV0ZWN0b3I7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlc2l6ZURldGVjdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL1Jlc2l6ZURldGVjdG9yXCI7XG5cbmZ1bmN0aW9uIHdpdGhSZXNpemVEZXRlY3RvcihDb21wb25lbnQpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICBoYW5kbGVXaWR0aDogdHJ1ZSxcbiAgICBoYW5kbGVIZWlnaHQ6IHRydWVcbiAgfTtcblxuICB2YXIgUmVzaXplRGV0ZWN0b3JIT0MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUmVzaXplRGV0ZWN0b3JIT0MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSZXNpemVEZXRlY3RvckhPQyk7XG5cbiAgICBmdW5jdGlvbiBSZXNpemVEZXRlY3RvckhPQygpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc2l6ZURldGVjdG9ySE9DKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCAvKiNfX1BVUkVfXyovY3JlYXRlUmVmKCkpO1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFJlc2l6ZURldGVjdG9ySE9DLCBbe1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF90aGlzJHByb3BzLmZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgdmFyIHRhcmdldFJlZiA9IGZvcndhcmRlZFJlZiB8fCB0aGlzLnJlZjtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc2l6ZURldGVjdG9yLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHRhcmdldFJlZjogdGFyZ2V0UmVmXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgICB0YXJnZXRSZWY6IHRhcmdldFJlZlxuICAgICAgICB9LCByZXN0KSkpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSZXNpemVEZXRlY3RvckhPQztcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmRSZWZXcmFwcGVyKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzaXplRGV0ZWN0b3JIT0MsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgbmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgZm9yd2FyZFJlZldyYXBwZXIuZGlzcGxheU5hbWUgPSBcIndpdGhSZXNpemVEZXRlY3RvcihcIi5jb25jYXQobmFtZSwgXCIpXCIpO1xuICBSZXNpemVEZXRlY3RvckhPQy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZm9yd2FyZGVkUmVmOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZvcndhcmRSZWZXcmFwcGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJlc2l6ZURldGVjdG9yOyIsImltcG9ydCBSZXNpemVEZXRlY3RvciBmcm9tIFwiLi9jb21wb25lbnRzL1Jlc2l6ZURldGVjdG9yXCI7XG5pbXBvcnQgd2l0aFJlc2l6ZURldGVjdG9yIGZyb20gXCIuL2hvYy93aXRoUmVzaXplRGV0ZWN0b3JcIjtcbmV4cG9ydCB7IHdpdGhSZXNpemVEZXRlY3RvciB9O1xuZXhwb3J0IGRlZmF1bHQgUmVzaXplRGV0ZWN0b3I7Il0sInNvdXJjZVJvb3QiOiIifQ==