"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));
var _electronWinstaller = require("electron-winstaller");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MakerSquirrel extends _makerBase.default {
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
    }
    async make({ dir , makeDir , targetArch , packageJSON , appName , forgeConfig  }) {
        const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);
        await this.ensureDirectory(outPath);
        const winstallerConfig = {
            name: packageJSON.name,
            title: appName,
            noMsi: true,
            exe: `${forgeConfig.packagerConfig.executableName || appName}.exe`,
            setupExe: `${appName}-${packageJSON.version} Setup.exe`,
            ...this.config,
            appDirectory: dir,
            outputDirectory: outPath
        };
        await (0, _electronWinstaller).createWindowsInstaller(winstallerConfig);
        const nupkgVersion = (0, _electronWinstaller).convertVersion(packageJSON.version);
        const artifacts = [
            _path.default.resolve(outPath, 'RELEASES'),
            _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`),
            _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`), 
        ];
        const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);
        if (winstallerConfig.remoteReleases || await _fsExtra.default.pathExists(deltaPath)) {
            artifacts.push(deltaPath);
        }
        const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);
        if (!winstallerConfig.noMsi && await _fsExtra.default.pathExists(msiPath)) {
            artifacts.push(msiPath);
        }
        return artifacts;
    }
    constructor(...args){
        super(...args);
        this.name = 'squirrel';
        this.defaultPlatforms = [
            'win32'
        ];
    }
}
exports.default = MakerSquirrel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VmVyc2lvbiwgY3JlYXRlV2luZG93c0luc3RhbGxlciwgT3B0aW9ucyBhcyBFbGVjdHJvbldpbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnZWxlY3Ryb24td2luc3RhbGxlcic7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCB0eXBlIE1ha2VyU3F1aXJyZWxDb25maWcgPSBPbWl0PEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMsICdhcHBEaXJlY3RvcnknIHwgJ291dHB1dERpcmVjdG9yeSc+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlclNxdWlycmVsIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyU3F1aXJyZWxDb25maWc+IHtcbiAgbmFtZSA9ICdzcXVpcnJlbCc7XG5cbiAgZGVmYXVsdFBsYXRmb3JtczogRm9yZ2VQbGF0Zm9ybVtdID0gWyd3aW4zMiddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbnN0YWxsZWQoJ2VsZWN0cm9uLXdpbnN0YWxsZXInKSAmJiAhcHJvY2Vzcy5lbnYuRElTQUJMRV9TUVVJUlJFTF9URVNUO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7IGRpciwgbWFrZURpciwgdGFyZ2V0QXJjaCwgcGFja2FnZUpTT04sIGFwcE5hbWUsIGZvcmdlQ29uZmlnIH06IE1ha2VyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBvdXRQYXRoID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsIGBzcXVpcnJlbC53aW5kb3dzLyR7dGFyZ2V0QXJjaH1gKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXRQYXRoKTtcblxuICAgIGNvbnN0IHdpbnN0YWxsZXJDb25maWc6IEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMgPSB7XG4gICAgICBuYW1lOiBwYWNrYWdlSlNPTi5uYW1lLFxuICAgICAgdGl0bGU6IGFwcE5hbWUsXG4gICAgICBub01zaTogdHJ1ZSxcbiAgICAgIGV4ZTogYCR7Zm9yZ2VDb25maWcucGFja2FnZXJDb25maWcuZXhlY3V0YWJsZU5hbWUgfHwgYXBwTmFtZX0uZXhlYCxcbiAgICAgIHNldHVwRXhlOiBgJHthcHBOYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259IFNldHVwLmV4ZWAsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcERpcmVjdG9yeTogZGlyLFxuICAgICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICAgIH07XG5cbiAgICBhd2FpdCBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyKHdpbnN0YWxsZXJDb25maWcpO1xuXG4gICAgY29uc3QgbnVwa2dWZXJzaW9uID0gY29udmVydFZlcnNpb24ocGFja2FnZUpTT04udmVyc2lvbik7XG5cbiAgICBjb25zdCBhcnRpZmFjdHMgPSBbXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgJ1JFTEVBU0VTJyksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cEV4ZSB8fCBgJHthcHBOYW1lfVNldHVwLmV4ZWApLFxuICAgICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtudXBrZ1ZlcnNpb259LWZ1bGwubnVwa2dgKSxcbiAgICBdO1xuICAgIGNvbnN0IGRlbHRhUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7bnVwa2dWZXJzaW9ufS1kZWx0YS5udXBrZ2ApO1xuICAgIGlmICh3aW5zdGFsbGVyQ29uZmlnLnJlbW90ZVJlbGVhc2VzIHx8IChhd2FpdCBmcy5wYXRoRXhpc3RzKGRlbHRhUGF0aCkpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChkZWx0YVBhdGgpO1xuICAgIH1cbiAgICBjb25zdCBtc2lQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIHdpbnN0YWxsZXJDb25maWcuc2V0dXBNc2kgfHwgYCR7YXBwTmFtZX1TZXR1cC5tc2lgKTtcbiAgICBpZiAoIXdpbnN0YWxsZXJDb25maWcubm9Nc2kgJiYgKGF3YWl0IGZzLnBhdGhFeGlzdHMobXNpUGF0aCkpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChtc2lQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFydGlmYWN0cztcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk1ha2VyU3F1aXJyZWwiLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiaXNJbnN0YWxsZWQiLCJwcm9jZXNzIiwiZW52IiwiRElTQUJMRV9TUVVJUlJFTF9URVNUIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwicGFja2FnZUpTT04iLCJhcHBOYW1lIiwiZm9yZ2VDb25maWciLCJvdXRQYXRoIiwicGF0aCIsInJlc29sdmUiLCJlbnN1cmVEaXJlY3RvcnkiLCJ3aW5zdGFsbGVyQ29uZmlnIiwibmFtZSIsInRpdGxlIiwibm9Nc2kiLCJleGUiLCJwYWNrYWdlckNvbmZpZyIsImV4ZWN1dGFibGVOYW1lIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwiY3JlYXRlV2luZG93c0luc3RhbGxlciIsIm51cGtnVmVyc2lvbiIsImNvbnZlcnRWZXJzaW9uIiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhF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