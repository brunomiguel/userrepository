{
  "manifest": {
    "name": "react-grid-layout",
    "version": "0.16.6",
    "description": "A draggable and resizable grid layout with responsive breakpoints, for React.",
    "main": "index.js",
    "scripts": {
      "lint": "make lint",
      "test": "make test",
      "build": "make build",
      "build-example": "make build-example",
      "view-example": "make view-example",
      "dev": "make dev",
      "prepublishOnly": "make build",
      "validate": "npm ls",
      "flow": "flow",
      "precommit": "lint-staged && make lint"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:STRML/react-grid-layout.git"
    },
    "keywords": [
      "react",
      "grid",
      "drag",
      "draggable",
      "resize",
      "resizable",
      "fluid",
      "responsive"
    ],
    "author": {
      "name": "Samuel Reed",
      "email": "samuel.trace.reed@gmail.com",
      "url": "http://strml.net/"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/STRML/react-grid-layout/issues"
    },
    "homepage": "https://github.com/STRML/react-grid-layout",
    "dependencies": {
      "classnames": "2.x",
      "lodash.isequal": "^4.0.0",
      "prop-types": "15.x",
      "react-draggable": "3.x",
      "react-resizable": "1.x"
    },
    "devDependencies": {
      "babel-cli": "^6.24.1",
      "babel-core": "^6.24.1",
      "babel-eslint": "^8.2.1",
      "babel-jest": "^22.2.2",
      "babel-loader": "^7.1.2",
      "babel-plugin-espower": "^2.4.0",
      "babel-plugin-react-transform": "^3.0.0",
      "babel-plugin-transform-react-constant-elements": "^6.5.0",
      "babel-plugin-transform-react-inline-elements": "^6.6.5",
      "babel-plugin-typecheck": "^3.6.1",
      "babel-preset-es2015": "^6.24.1",
      "babel-preset-react": "^6.24.1",
      "babel-preset-stage-1": "^6.24.1",
      "css-loader": "^0.28.9",
      "ejs": "^2.4.1",
      "eslint": "^4.17.0",
      "eslint-plugin-flowtype": "^2.44.0",
      "eslint-plugin-mocha": "^4.11.0",
      "eslint-plugin-react": "^7.6.1",
      "exports-loader": "^0.7.0",
      "flow-bin": "^0.65.0",
      "husky": "^0.14.3",
      "imports-loader": "^0.7.1",
      "jest-cli": "^22.3.0",
      "lint-staged": "^6.1.0",
      "lodash": "^4.17.5",
      "opener": "^1.4.3",
      "power-assert": "^1.4.4",
      "prettier": "^1.10.2",
      "react": "^16.2.0",
      "react-dom": "^16.2.0",
      "react-hot-loader": "^3.1.3",
      "react-transform-hmr": "^1.0.2",
      "style-loader": "^0.20.2",
      "valiquire": "^0.3.0",
      "webpack": "^3.11.0",
      "webpack-dev-server": "^2.11.1"
    },
    "publishConfig": {
      "registry": "https://registry.npmjs.org"
    },
    "jest": {
      "testMatch": [
        "<rootDir>/test/spec/*.js"
      ]
    },
    "lint-staged": {
      "*.{js,jsx}": [
        "prettier --write",
        "git add"
      ],
      "*.css": [
        "prettier --write",
        "git add"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-grid-layout-0.16.6-9b2407a2b946c2260ebaf66f13b556e1da4efeb2-integrity/node_modules/react-grid-layout/package.json",
    "readmeFilename": "README.md",
    "readme": "# React-Grid-Layout\n\n[![travis build](https://travis-ci.org/STRML/react-grid-layout.svg?branch=master)](https://travis-ci.org/STRML/react-grid-layout)\n[![CDNJS](https://img.shields.io/cdnjs/v/react-grid-layout.svg)](https://cdnjs.com/libraries/react-grid-layout)\n[![npm package](https://img.shields.io/npm/v/react-grid-layout.svg?style=flat-square)](https://www.npmjs.org/package/react-grid-layout)\n[![npm downloads](https://img.shields.io/npm/dt/react-grid-layout.svg?maxAge=2592000)]()\n\nReact-Grid-Layout is a grid layout system much like [Packery](http://packery.metafizzy.co/) or\n[Gridster](http://dsmorse.github.io/gridster.js/), for React.\n\nUnlike those systems, it is responsive and supports breakpoints. Breakpoint layouts can be provided by the user\nor autogenerated.\n\nRGL is React-only and does not require jQuery.\n\n![BitMEX UI](http://i.imgur.com/oo1NT6c.gif)\n> GIF from production usage on [BitMEX.com](https://www.bitmex.com)\n\n[**[Demo](https://strml.github.io/react-grid-layout/examples/0-showcase.html) | [Changelog](/CHANGELOG.md) | [WebpackBin Editable demo](https://www.webpackbin.com/bins/-Kvr2qCxorvGMgVMxkmI)**]\n\n## Table of Contents\n\n- [Demos](#demos)\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Responsive Usage](#responsive-usage)\n- [Providing Grid Width](#providing-grid-width)\n- [Grid Layout Props](#grid-layout-props)\n- [Responsive Grid Layout Props](#responsive-grid-layout-props)\n- [Grid Item Props](#grid-item-props)\n- [Contribute](#contribute)\n- [TODO List](#todo-list)\n\n## Demos\n\n1. [Showcase](https://strml.github.io/react-grid-layout/examples/0-showcase.html)\n1. [Basic](https://strml.github.io/react-grid-layout/examples/1-basic.html)\n1. [No Dragging/Resizing (Layout Only)](https://strml.github.io/react-grid-layout/examples/2-no-dragging.html)\n1. [Messy Layout Autocorrect](https://strml.github.io/react-grid-layout/examples/3-messy.html)\n1. [Layout Defined on Children](https://strml.github.io/react-grid-layout/examples/4-grid-property.html)\n1. [Static Elements](https://strml.github.io/react-grid-layout/examples/5-static-elements.html)\n1. [Adding/Removing Elements](https://strml.github.io/react-grid-layout/examples/6-dynamic-add-remove.html)\n1. [Saving Layout to LocalStorage](https://strml.github.io/react-grid-layout/examples/7-localstorage.html)\n1. [Saving a Responsive Layout to LocalStorage](https://strml.github.io/react-grid-layout/examples/8-localstorage-responsive.html)\n1. [Minimum and Maximum Width/Height](https://strml.github.io/react-grid-layout/examples/9-min-max-wh.html)\n1. [Dynamic Minimum and Maximum Width/Height](https://strml.github.io/react-grid-layout/examples/10-dynamic-min-max-wh.html)\n1. [No Vertical Compacting (Free Movement)](https://strml.github.io/react-grid-layout/examples/11-no-vertical-compact.html)\n\n#### Projects Using React-Grid-Layout\n\n- [BitMEX](https://www.bitmex.com/)\n- [AWS CloudFront Dashboards](https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/)\n- [Grafana](https://grafana.com/)\n- [Metabase](http://www.metabase.com/)\n- [HubSpot](http://www.hubspot.com)\n- [ComNetViz](http://www.grotto-networking.com/ComNetViz/ComNetViz.html)\n- [Stoplight](https://app.stoplight.io)\n- [Reflect](https://reflect.io)\n- [ez-Dashing](https://github.com/ylacaute/ez-Dashing)\n- [Kibana](https://www.elastic.co/products/kibana)\n\n*Know of others? Create a PR to let me know!*\n\n## Features\n\n* 100% React - no jQuery\n* Compatible with server-rendered apps\n* Draggable widgets\n* Resizable widgets\n* Static widgets\n* Configurable packing: horizontal, vertical, or off\n* Bounds checking for dragging and resizing\n* Widgets may be added or removed without rebuilding grid\n* Layout can be serialized and restored\n* Responsive breakpoints\n* Separate layouts per responsive breakpoint\n* Grid Items placed using CSS Transforms\n* Performance: [on](http://i.imgur.com/FTogpLp.jpg) / [off](http://i.imgur.com/gOveMm8.jpg), note paint (green) as % of time\n\n|Version         | Compatibility    |\n|----------------|------------------|\n| >= 0.11.3      | React 0.14 & v15 |\n| >= 0.10.0      | React 0.14       |\n| 0.8. - 0.9.2   | React 0.13       |\n| < 0.8          | React 0.12       |\n\n## Installation\n\nInstall the React-Grid-Layout [package](https://www.npmjs.org/package/react-grid-layout) package using [npm](https://www.npmjs.com/):\n\n```bash\nnpm install react-grid-layout\n```\n\nInclude the following stylesheets in your application:\n\n```\n/node_modules/react-grid-layout/css/styles.css\n/node_modules/react-resizable/css/styles.css\n```\n\n## Usage\n\nUse ReactGridLayout like any other component. The following example below will\nproduce a grid with three items where:\n\n- users will not be able to drag or resize item `a`\n- item `b` will be restricted to a minimum width of 2 grid blocks and a maximum width of 4 grid blocks\n- users will be able to freely drag and resize item `c`\n\n```javascript\nvar ReactGridLayout = require('react-grid-layout');\n\nvar MyFirstGrid = React.createClass({\n  render: function() {\n    // layout is an array of objects, see the demo for more complete usage\n    var layout = [\n      {i: 'a', x: 0, y: 0, w: 1, h: 2, static: true},\n      {i: 'b', x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4},\n      {i: 'c', x: 4, y: 0, w: 1, h: 2}\n    ];\n    return (\n      <ReactGridLayout className=\"layout\" layout={layout} cols={12} rowHeight={30} width={1200}>\n        <div key=\"a\">a</div>\n        <div key=\"b\">b</div>\n        <div key=\"c\">c</div>\n      </ReactGridLayout>\n    )\n  }\n});\n```\n\nYou may also choose to set layout properties directly on the children:\n\n```javascript\nvar ReactGridLayout = require('react-grid-layout');\n\nvar MyFirstGrid = React.createClass({\n  render: function () {\n    return (\n      <ReactGridLayout className=\"layout\" cols={12} rowHeight={30} width={1200}>\n        <div key=\"a\" data-grid={{x: 0, y: 0, w: 1, h: 2, static: true}}>a</div>\n        <div key=\"b\" data-grid={{x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4}}>b</div>\n        <div key=\"c\" data-grid={{x: 4, y: 0, w: 1, h: 2}}>c</div>\n      </ReactGridLayout>\n    )\n  }\n});\n```\n### Usage without Browserify/Webpack\n\nA module usable in a `<script>` tag is included [here](/dist/react-grid-layout.min.js). It uses a UMD shim and\nexcludes `React`, so it must be otherwise available in your application, either via RequireJS or on `window.React`.\n\n### Responsive Usage\n\nTo make RGL responsive, use the `<ResponsiveReactGridLayout>` element:\n\n```javascript\nvar ResponsiveReactGridLayout = require('react-grid-layout').Responsive;\n//...\nrender: function() {\n  // {lg: layout1, md: layout2, ...}\n  var layouts = getLayoutsFromSomewhere();\n  return (\n    <ResponsiveReactGridLayout className=\"layout\" layouts={layouts}\n      breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\n      cols={{lg: 12, md: 10, sm: 6, xs: 4, xxs: 2}}>\n      <div key=\"1\">1</div>\n      <div key=\"2\">2</div>\n      <div key=\"3\">3</div>\n    </ResponsiveReactGridLayout>\n  )\n}\n```\n\nWhen in responsive mode, you should supply at least one breakpoint via the `layouts` property.\n\nWhen using `layouts`, it is best to supply as many breakpoints as possible, especially the largest one.\nIf the largest is provided, RGL will attempt to interpolate the rest.\n\nYou will also need to provide a `width`, when using `<ResponsiveReactGridLayout>` it is suggested you use the HOC\n`WidthProvider` as per the instructions below.\n\nFor the time being, it is not possible to supply responsive mappings via the `data-grid` property on individual\nitems, but that is coming soon.\n\n### Providing Grid Width\n\nBoth `<ResponsiveReactGridLayout>` and `<ReactGridLayout>` take `width` to calculate\npositions on drag events. In simple cases a HOC `WidthProvider` can be used to automatically determine\nwidth upon initialization and window resize events.\n\n```javascript\nimport {Responsive, WidthProvider} from 'react-grid-layout';\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\n//...\nrender() {\n  // {lg: layout1, md: layout2, ...}\n  var layouts = getLayoutsFromSomewhere();\n  return (\n    <ResponsiveReactGridLayout className=\"layout\" layouts={layouts}\n      breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\n      cols={{lg: 12, md: 10, sm: 6, xs: 4, xxs: 2}}>\n      <div key=\"1\">1</div>\n      <div key=\"2\">2</div>\n      <div key=\"3\">3</div>\n    </ResponsiveReactGridLayout>\n  )\n}\n```\n\nThis allows you to easily replace `WidthProvider` with your own Provider HOC if you need more sophisticated logic.\n\n`WidthProvider` accepts a single prop, `measureBeforeMount`. If `true`, `WidthProvider` will measure the\ncontainer's width before mounting children. Use this if you'd like to completely eliminate any resizing animation\non application/component mount.\n\nHave a more complicated layout? `WidthProvider` [is very simple](/lib/components/WidthProvider.jsx) and only\nlistens to window `'resize'` events. If you need more power and flexibility, try the\n[SizeMe React HOC](https://github.com/ctrlplusb/react-sizeme) as an alternative to WidthProvider.\n\n### Grid Layout Props\n\nRGL supports the following properties (see the source for the final word on this):\n\n```javascript\n//\n// Basic props\n//\n\n// This allows setting the initial width on the server side.\n// This is required unless using the HOC <WidthProvider> or similar\nwidth: number,\n\n// If true, the container height swells and contracts to fit contents\nautoSize: ?boolean = true,\n\n// Number of columns in this layout.\ncols: ?number = 12,\n\n// A CSS selector for tags that will not be draggable.\n// For example: draggableCancel:'.MyNonDraggableAreaClassName'\n// If you forget the leading . it will not work.\ndraggableCancel: ?string = '',\n\n// A CSS selector for tags that will act as the draggable handle.\n// For example: draggableHandle:'.MyDragHandleClassName'\n// If you forget the leading . it will not work.\ndraggableHandle: ?string = '',\n\n// If true, the layout will compact vertically\nverticalCompact: ?boolean = true,\n\n// Compaction type.\ncompactType: ?('vertical' | 'horizontal') = 'vertical';\n\n// Layout is an array of object with the format:\n// {x: number, y: number, w: number, h: number}\n// The index into the layout must match the key used on each item component.\n// If you choose to use custom keys, you can specify that key in the layout\n// array objects like so:\n// {i: string, x: number, y: number, w: number, h: number}\nlayout: ?array = null, // If not provided, use data-grid props on children\n\n// Margin between items [x, y] in px.\nmargin: ?[number, number] = [10, 10],\n\n// Padding inside the container [x, y] in px\ncontainerPadding: ?[number, number] = margin,\n\n// Rows have a static height, but you can change this based on breakpoints\n// if you like.\nrowHeight: ?number = 150,\n\n//\n// Flags\n//\nisDraggable: ?boolean = true,\nisResizable: ?boolean = true,\n// Uses CSS3 translate() instead of position top/left.\n// This makes about 6x faster paint performance\nuseCSSTransforms: ?boolean = true,\n\n// If true, grid items won't change position when being\n// dragged over.\npreventCollision: ?boolean = false;\n\n//\n// Callbacks\n//\n\n// Callback so you can save the layout.\n// Calls back with (currentLayout) after every drag or resize stop.\nonLayoutChange: (layout: Layout) => void,\n\n//\n// All callbacks below have signature (layout, oldItem, newItem, placeholder, e, element).\n// 'start' and 'stop' callbacks pass `undefined` for 'placeholder'.\n//\ntype ItemCallback = (layout: Layout, oldItem: LayoutItem, newItem: LayoutItem,\n                     placeholder: LayoutItem, e: MouseEvent, element: HTMLElement) => void;\n\n// Calls when drag starts.\nonDragStart: ItemCallback,\n// Calls on each drag movement.\nonDrag: ItemCallback,\n// Calls when drag is complete.\nonDragStop: ItemCallback,\n// Calls when resize starts.\nonResizeStart: ItemCallback,\n// Calls when resize movement happens.\nonResize: ItemCallback,\n// Calls when resize is complete.\nonResizeStop: ItemCallback\n```\n\n### Responsive Grid Layout Props\n\nThe responsive grid layout can be used instead. It supports all of the props above, excepting `layout`.\nThe new properties and changes are:\n\n```javascript\n// {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n// Breakpoint names are arbitrary but must match in the cols and layouts objects.\nbreakpoints: ?Object = {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n\n// # of cols. This is a breakpoint -> cols map, e.g. {lg: 12, md: 10, ...}\ncols: ?Object = {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n\n// layouts is an object mapping breakpoints to layouts.\n// e.g. {lg: Layout, md: Layout, ...}\nlayouts: {[key: $Keys<breakpoints>]: Layout}\n\n//\n// Callbacks\n//\n\n// Calls back with breakpoint and new # cols\nonBreakpointChange: (newBreakpoint: string, newCols: number) => void,\n\n// Callback so you can save the layout.\n// AllLayouts are keyed by breakpoint.\nonLayoutChange: (currentLayout: Layout, allLayouts: {[key: $Keys<breakpoints>]: Layout}) => void,\n\n// Callback when the width changes, so you can modify the layout as needed.\nonWidthChange: (containerWidth: number, margin: [number, number], cols: number, containerPadding: [number, number]) => void;\n\n```\n\n### Grid Item Props\n\nRGL supports the following properties on grid items or layout items. When initializing a grid,\nbuild a layout array (as in the first example above), or attach this object as the `data-grid` property\nto each of your child elements (as in the second example).\n\nNote that if a grid item is provided but incomplete (missing one of `x, y, w, or h`), an error\nwill be thrown so you can correct your layout.\n\nIf no properties are provided for a grid item, one will be generated with a width and height of `1`.\n\nYou can set minimums and maximums for each dimension. This is for resizing; it of course has no effect if resizing\nis disabled. Errors will be thrown if your mins and maxes overlap incorrectly, or your initial dimensions\nare out of range.\n\nAny `<GridItem>` properties defined directly will take precedence over globally-set options. For\nexample, if the layout has the property `isDraggable: false`, but the grid item has the prop `isDraggable: true`, the item\nwill be draggable.\n\n```javascript\n{\n\n  // A string corresponding to the component key\n  i: string,\n\n  // These are all in grid units, not pixels\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  minW: ?number = 0,\n  maxW: ?number = Infinity,\n  minH: ?number = 0,\n  maxH: ?number = Infinity,\n\n  // If true, equal to `isDraggable: false, isResizable: false`.\n  static: ?boolean = false,\n  // If false, will not be draggable. Overrides `static`.\n  isDraggable: ?boolean = true,\n  // If false, will not be resizable. Overrides `static`.\n  isResizable: ?boolean = true\n}\n```\n\n## Contribute\n\nIf you have a feature request, please add it as an issue or make a pull request.\n\nIf you have a bug to report, please reproduce the bug in [WebpackBin](http://www.webpackbin.com/VymTE3zWG) to help\nus easily isolate it.\n\n## TODO List\n\n- [x] Basic grid layout\n- [x] Fluid grid layout\n- [x] Grid packing\n- [x] Draggable grid items\n- [x] Live grid packing while dragging\n- [x] Resizable grid items\n- [x] Layouts per responsive breakpoint\n- [x] Define grid attributes on children themselves (`data-grid` key)\n- [x] Static elements\n- [x] Persistent id per item for predictable localstorage restores, even when # items changes\n- [x] Min/max w/h per item\n- [ ] Resizable handles on other corners\n- [ ] Configurable w/h per breakpoint\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Samuel Reed\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-grid-layout/-/react-grid-layout-0.16.6.tgz#9b2407a2b946c2260ebaf66f13b556e1da4efeb2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-grid-layout/-/react-grid-layout-0.16.6.tgz",
    "hash": "9b2407a2b946c2260ebaf66f13b556e1da4efeb2",
    "integrity": "sha512-h2EsYgsqcESLJeevQSJsEKp8hhh+phOlXDJoMhlV2e7T3VWQL+S6iCF3iD/LK19r4oyRyOMDEir0KV+eLXrAyw==",
    "registry": "npm",
    "packageName": "react-grid-layout",
    "cacheIntegrity": "sha512-h2EsYgsqcESLJeevQSJsEKp8hhh+phOlXDJoMhlV2e7T3VWQL+S6iCF3iD/LK19r4oyRyOMDEir0KV+eLXrAyw== sha1-myQHorlGwiYOuvZvE7VW4dpO/rI="
  },
  "registry": "npm",
  "hash": "9b2407a2b946c2260ebaf66f13b556e1da4efeb2"
}