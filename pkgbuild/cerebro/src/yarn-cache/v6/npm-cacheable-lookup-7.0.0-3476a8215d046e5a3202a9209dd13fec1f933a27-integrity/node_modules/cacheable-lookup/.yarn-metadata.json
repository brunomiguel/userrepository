{
  "manifest": {
    "name": "cacheable-lookup",
    "version": "7.0.0",
    "description": "A cacheable dns.lookup(…) that respects TTL",
    "engines": {
      "node": ">=14.16"
    },
    "files": [
      "source",
      "index.d.ts"
    ],
    "type": "module",
    "exports": {
      "types": "./index.d.ts",
      "default": "./source/index.js"
    },
    "scripts": {
      "//test": "xo && nyc --reporter=lcovonly --reporter=text ava && tsd",
      "test": "tsd"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/szmarczak/cacheable-lookup.git"
    },
    "keywords": [
      "dns",
      "lookup",
      "cacheable",
      "ttl"
    ],
    "author": {
      "name": "Szymon Marczak"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/szmarczak/cacheable-lookup/issues"
    },
    "homepage": "https://github.com/szmarczak/cacheable-lookup#readme",
    "devDependencies": {
      "@types/keyv": "^3.1.1",
      "ava": "^4.3.3",
      "benchmark": "^2.1.4",
      "coveralls": "^3.0.9",
      "keyv": "^4.0.0",
      "nyc": "^15.0.0",
      "quibble": "^0.6.14",
      "quick-lru": "^5.1.0",
      "tsd": "^0.11.0",
      "xo": "^0.25.3"
    },
    "ava": {
      "nodeArguments": [
        "--loader=quibble"
      ]
    },
    "xo": {
      "rules": {
        "unicorn/import-index": "off",
        "import/extensions": "off",
        "import/no-useless-path-segments": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cacheable-lookup-7.0.0-3476a8215d046e5a3202a9209dd13fec1f933a27-integrity/node_modules/cacheable-lookup/package.json",
    "readmeFilename": "README.md",
    "readme": "# cacheable-lookup\n\n> A cacheable [`dns.lookup(…)`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) that respects TTL :tada:\n\n[![Node CI](https://github.com/szmarczak/cacheable-lookup/workflows/Node%20CI/badge.svg)](https://github.com/szmarczak/cacheable-lookup/actions)\n[![codecov](https://codecov.io/gh/szmarczak/cacheable-lookup/branch/master/graph/badge.svg)](https://codecov.io/gh/szmarczak/cacheable-lookup)\n[![npm](https://img.shields.io/npm/dm/cacheable-lookup.svg)](https://www.npmjs.com/package/cacheable-lookup)\n[![install size](https://packagephobia.now.sh/badge?p=cacheable-lookup)](https://packagephobia.now.sh/result?p=cacheable-lookup)\n\nMaking lots of HTTP requests? You can save some time by caching DNS lookups :zap:\n\n## Usage\n\n### Using the `lookup` option\n\n```js\nimport http from 'node:http';\nimport CacheableLookup from 'cacheable-lookup';\n\nconst cacheable = new CacheableLookup();\n\nhttp.get('http://example.com', {lookup: cacheable.lookup}, response => {\n\t// Handle the response here\n});\n```\n\n### Attaching CacheableLookup to an Agent\n\n```js\nimport http from 'node:http';\nimport https from 'node:https';\nimport CacheableLookup from 'cacheable-lookup';\n\nconst cacheable = new CacheableLookup();\n\ncacheable.install(http.globalAgent);\ncacheable.install(https.globalAgent);\n\nhttp.get('http://example.com', response => {\n\t// Handle the response here\n});\n```\n\n## API\n\n### new CacheableLookup(options)\n\nReturns a new instance of `CacheableLookup`.\n\n#### options\n\nType: `object`\\\nDefault: `{}`\n\nOptions used to cache the DNS lookups.\n\n##### cache\n\nType: `Map` | [`Keyv`](https://github.com/lukechilds/keyv/)\\\nDefault: `new Map()`\n\nCustom cache instance. If `undefined`, it will create a new one.\n\n**Note**: If you decide to use Keyv instead of the native implementation, the performance will drop by 10x. Memory leaks may occur as it doesn't provide any way to remove all the deprecated values at once.\n\n**Tip**: [`QuickLRU`](https://github.com/sindresorhus/quick-lru) is fully compatible with the Map API, you can use it to limit the amount of cached entries. Example:\n\n```js\nimport http from 'node:http';\nimport CacheableLookup from 'cacheable-lookup';\nimport QuickLRU from 'quick-lru';\n\nconst cacheable = new CacheableLookup({\n\tcache: new QuickLRU({maxSize: 1000})\n});\n\nhttp.get('http://example.com', {lookup: cacheable.lookup}, response => {\n\t// Handle the response here\n});\n```\n\n##### options.maxTtl\n\nType: `number`\\\nDefault: `Infinity`\n\nThe maximum lifetime of the entries received from the specifed DNS server (TTL in seconds).\n\nIf set to `0`, it will make a new DNS query each time.\n\n**Pro Tip**: This shouldn't be lower than your DNS server response time in order to prevent bottlenecks. For example, if you use Cloudflare, this value should be greater than `0.01`.\n\n##### options.fallbackDuration\n\nType: `number`\\\nDefault: `3600` (1 hour)\n\nWhen the DNS server responds with `ENOTFOUND` or `ENODATA` and the OS reports that the entry is available, it will use `dns.lookup(...)` directly for the requested hostnames for the specified amount of time (in seconds).\n\n**Note**: You should avoid setting this to `0` unless the provided DNS servers' database is limited to few domains.\n\n##### options.errorTtl\n\nType: `number`\\\nDefault: `0.15`\n\nThe time how long it needs to remember queries that threw `ENOTFOUND` or `ENODATA` (TTL in seconds).\n\n**Note**: This option is independent, `options.maxTtl` does not affect this.\n\n**Pro Tip**: This shouldn't be lower than your DNS server response time in order to prevent bottlenecks. For example, if you use Cloudflare, this value should be greater than `0.01`.\n\n##### options.resolver\n\nType: `dns.Resolver | dns.promises.Resolver`\\\nDefault: [`new dns.promises.Resolver()`](https://nodejs.org/api/dns.html#dns_class_dns_resolver)\n\nAn instance of [DNS Resolver](https://nodejs.org/api/dns.html#dns_class_dns_resolver) used to make DNS queries.\n\n##### options.lookup\n\nType: `Function`\\\nDefault: [`dns.lookup`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback)\n\nThe fallback function to use when the DNS server responds with `ENOTFOUND` or `ENODATA`.\n\nIf you don't query internal hostnames (such as `localhost`, `database.local` etc.), it is strongly recommended to set this to `false`.\n\n### Entry object\n\nType: `object`\n\n#### address\n\nType: `string`\n\nThe IP address (can be an IPv4 or IPv6 address).\n\n#### family\n\nType: `number`\n\nThe IP family (`4` or `6`).\n\n##### expires\n\nType: `number`\n\n**Note**: This is not present when falling back to `dns.lookup(...)`!\n\nThe timestamp (`Date.now() + ttl * 1000`) when the entry expires.\n\n#### ttl\n\n**Note**: This is not present when falling back to `dns.lookup(...)`!\n\nThe time in seconds for its lifetime.\n\n#### source\n\n**Note**: This is not present when falling back to `dns.lookup(...)`!\n\nWhether this entry was loaded from the cache or came from a query (`cache` or `query`)\n\n### Entry object (callback-style)\n\nWhen `options.all` is `false`, then `callback(error, address, family, expires, ttl)` is called.\\\nWhen `options.all` is `true`, then `callback(error, entries)` is called.\n\n### CacheableLookup instance\n\n#### servers\n\nType: `Array`\n\nThe DNS servers used to make queries. Can be overridden - doing so will clear the cache.\n\n#### [lookup(hostname, options, callback)](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback)\n\n#### lookupAsync(hostname, options)\n\nThe asynchronous version of `dns.lookup(…)`.\n\nReturns an [entry object](#entry-object).\\\nIf `options.all` is true, returns an array of entry objects.\n\n##### hostname\n\nType: `string`\n\n##### options\n\nType: `object`\n\nThe same as the [`dns.lookup(…)`](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback) options.\n\n#### query(hostname)\n\nAn asynchronous function which returns cached DNS lookup entries.\\\nThis is the base for `lookupAsync(hostname, options)` and `lookup(hostname, options, callback)`.\n\n**Note**: This function has no options.\n\nReturns an array of objects with `address`, `family`, `ttl` and `expires` properties.\n\n#### queryAndCache(hostname)\n\nAn asynchronous function which makes two DNS queries: A and AAAA. The result is cached.\\\nThis is used by `query(hostname)` if no entry in the database is present.\n\nReturns an array of objects with `address`, `family`, `ttl` and `expires` properties.\n\n#### updateInterfaceInfo()\n\nUpdates interface info. For example, you need to run this when you plug or unplug your WiFi driver.\n\n**Note:** Running `updateInterfaceInfo()` will trigger `clear()` only on network interface removal.\n\n#### clear(hostname?)\n\nClears the cache for the given hostname. If the hostname argument is not present, the entire cache will be emptied.\n\n## High performance\n\nPerformed on:\n- Query: `example.com`\n- CPU: i7-7700k\n- CPU governor: performance\n\n```\nCacheableLookup#lookupAsync                x 2,896,251 ops/sec ±1.07% (85 runs sampled)\nCacheableLookup#lookupAsync.all            x 2,842,664 ops/sec ±1.11% (88 runs sampled)\nCacheableLookup#lookupAsync.all.ADDRCONFIG x 2,598,283 ops/sec ±1.21% (88 runs sampled)\nCacheableLookup#lookup                     x 2,565,913 ops/sec ±1.56% (85 runs sampled)\nCacheableLookup#lookup.all                 x 2,609,039 ops/sec ±1.01% (86 runs sampled)\nCacheableLookup#lookup.all.ADDRCONFIG      x 2,416,242 ops/sec ±0.89% (85 runs sampled)\ndns#lookup                                 x 7,272     ops/sec ±0.36% (86 runs sampled)\ndns#lookup.all                             x 7,249     ops/sec ±0.40% (86 runs sampled)\ndns#lookup.all.ADDRCONFIG                  x 5,693     ops/sec ±0.28% (85 runs sampled)\nFastest is CacheableLookup#lookupAsync.all\n```\n\n## Related\n\n- [cacheable-request](https://github.com/lukechilds/cacheable-request) - Wrap native HTTP requests with RFC compliant cache support\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Szymon Marczak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cacheable-lookup/-/cacheable-lookup-7.0.0.tgz#3476a8215d046e5a3202a9209dd13fec1f933a27",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cacheable-lookup/-/cacheable-lookup-7.0.0.tgz",
    "hash": "3476a8215d046e5a3202a9209dd13fec1f933a27",
    "integrity": "sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==",
    "registry": "npm",
    "packageName": "cacheable-lookup",
    "cacheIntegrity": "sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w== sha1-NHaoIV0EbloyAqkgndE/7B+TOic="
  },
  "registry": "npm",
  "hash": "3476a8215d046e5a3202a9209dd13fec1f933a27"
}