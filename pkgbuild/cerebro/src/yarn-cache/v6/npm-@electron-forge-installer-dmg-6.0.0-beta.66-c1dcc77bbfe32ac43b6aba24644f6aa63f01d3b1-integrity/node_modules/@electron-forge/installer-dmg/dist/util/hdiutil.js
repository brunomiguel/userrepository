"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unmountImage = exports.mountImage = exports.getMountedImages = void 0;
var _crossSpawnPromise = require("@malept/cross-spawn-promise");
var _debug = _interopRequireDefault(require("debug"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:hdiutil');
const getMountedImages = async ()=>{
    const output = await (0, _crossSpawnPromise).spawn('hdiutil', [
        'info'
    ]);
    const mounts = output.toString().split(/====\n/g);
    mounts.shift();
    const mountObjects = [];
    for (const mount of mounts){
        try {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const mountPath = /\/Volumes\/(.+)\n/g.exec(mount)[1];
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const imagePath = /image-path +: +(.+)\n/g.exec(mount)[1];
            mountObjects.push({
                mountPath,
                imagePath
            });
        } catch  {
        // Ignore
        }
    }
    d('identified active mounts', mountObjects);
    return mountObjects;
};
exports.getMountedImages = getMountedImages;
const mountImage = async (filePath)=>{
    d('mounting image:', filePath);
    const output = await (0, _crossSpawnPromise).spawn('hdiutil', [
        'attach',
        '-noautoopen',
        '-nobrowse',
        '-noverify',
        filePath
    ]);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const mountPath = /\/Volumes\/(.+)\n/g.exec(output.toString())[1];
    d('mounted at:', mountPath);
    return {
        mountPath,
        imagePath: filePath
    };
};
exports.mountImage = mountImage;
const unmountImage = async (mount)=>{
    d('unmounting current mount:', mount);
    await (0, _crossSpawnPromise).spawn('hdiutil', [
        'unmount',
        '-force',
        `/Volumes/${mount.mountPath}`
    ]);
};
exports.unmountImage = unmountImage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hkaXV0aWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdAbWFsZXB0L2Nyb3NzLXNwYXduLXByb21pc2UnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpoZGl1dGlsJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91bnQge1xuICBtb3VudFBhdGg6IHN0cmluZztcbiAgaW1hZ2VQYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRNb3VudGVkSW1hZ2VzID0gYXN5bmMgKCk6IFByb21pc2U8TW91bnRbXT4gPT4ge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCBzcGF3bignaGRpdXRpbCcsIFsnaW5mbyddKTtcbiAgY29uc3QgbW91bnRzID0gb3V0cHV0LnRvU3RyaW5nKCkuc3BsaXQoLz09PT1cXG4vZyk7XG4gIG1vdW50cy5zaGlmdCgpO1xuXG4gIGNvbnN0IG1vdW50T2JqZWN0cyA9IFtdO1xuXG4gIGZvciAoY29uc3QgbW91bnQgb2YgbW91bnRzKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICBjb25zdCBtb3VudFBhdGggPSAvXFwvVm9sdW1lc1xcLyguKylcXG4vZy5leGVjKG1vdW50KSFbMV07XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgY29uc3QgaW1hZ2VQYXRoID0gL2ltYWdlLXBhdGggKzogKyguKylcXG4vZy5leGVjKG1vdW50KSFbMV07XG4gICAgICBtb3VudE9iamVjdHMucHVzaCh7IG1vdW50UGF0aCwgaW1hZ2VQYXRoIH0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gSWdub3JlXG4gICAgfVxuICB9XG5cbiAgZCgnaWRlbnRpZmllZCBhY3RpdmUgbW91bnRzJywgbW91bnRPYmplY3RzKTtcbiAgcmV0dXJuIG1vdW50T2JqZWN0cztcbn07XG5cbmV4cG9ydCBjb25zdCBtb3VudEltYWdlID0gYXN5bmMgKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPE1vdW50PiA9PiB7XG4gIGQoJ21vdW50aW5nIGltYWdlOicsIGZpbGVQYXRoKTtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgc3Bhd24oJ2hkaXV0aWwnLCBbJ2F0dGFjaCcsICctbm9hdXRvb3BlbicsICctbm9icm93c2UnLCAnLW5vdmVyaWZ5JywgZmlsZVBhdGhdKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgY29uc3QgbW91bnRQYXRoID0gL1xcL1ZvbHVtZXNcXC8oLispXFxuL2cuZXhlYyhvdXRwdXQudG9TdHJpbmcoKSkhWzFdO1xuICBkKCdtb3VudGVkIGF0OicsIG1vdW50UGF0aCk7XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudFBhdGgsXG4gICAgaW1hZ2VQYXRoOiBmaWxlUGF0aCxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1bm1vdW50SW1hZ2UgPSBhc3luYyAobW91bnQ6IE1vdW50KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGQoJ3VubW91bnRpbmcgY3VycmVudCBtb3VudDonLCBtb3VudCk7XG4gIGF3YWl0IHNwYXduKCdoZGl1dGlsJywgWyd1bm1vdW50JywgJy1mb3JjZScsIGAvVm9sdW1lcy8ke21vdW50Lm1vdW50UGF0aH1gXSk7XG59O1xuIl0sIm5hbWVzIjpbImQiLCJkZWJ1ZyIsImdldE1vdW50ZWRJbWFnZXMiLCJvdXRwdXQiLCJzcGF3biIsIm1vdW50cyIsInRvU3RyaW5nIiwic3BsaXQiLCJzaGlmdCIsIm1vdW50T2JqZWN0cyIsIm1vdW50IiwibW91bnRQYXRoIiwiZXhlYyIs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