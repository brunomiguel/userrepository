"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InstallerOptions", {
    enumerable: true,
    get: function() {
        return _installerDarwin.InstallerOptions;
    }
});
exports.default = void 0;
var _installerDarwin = _interopRequireWildcard(require("@electron-forge/installer-darwin"));
var _crossSpawnPromise = require("@malept/cross-spawn-promise");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _hdiutil = require("./util/hdiutil");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class InstallerDMG extends _installerDarwin.default {
    async install({ filePath , installSpinner  }) {
        const mounts = await (0, _hdiutil).getMountedImages();
        let targetMount = mounts.find((mount)=>mount.imagePath === filePath
        );
        if (!targetMount) {
            targetMount = await (0, _hdiutil).mountImage(filePath);
        }
        try {
            const volumePath = _path.default.resolve('/Volumes', targetMount.mountPath);
            const appName = (await _fsExtra.default.readdir(volumePath)).find((file)=>file.endsWith('.app')
            );
            if (!appName) {
                throw new Error('Failed to find .app file in DMG');
            }
            const appPath = _path.default.resolve(volumePath, appName);
            const targetApplicationPath = `/Applications/${_path.default.basename(appPath)}`;
            await this.moveApp(appPath, targetApplicationPath, installSpinner, true);
            await (0, _crossSpawnPromise).spawn('open', [
                '-R',
                targetApplicationPath
            ], {
                detached: true
            });
        } finally{
            await (0, _hdiutil).unmountImage(targetMount);
        }
    }
    constructor(...args){
        super(...args);
        this.name = 'dmg';
    }
}
exports.default = InstallerDMG;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJETUcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEluc3RhbGxlckRhcndpbiwgeyBJbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2luc3RhbGxlci1kYXJ3aW4nO1xuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ0BtYWxlcHQvY3Jvc3Mtc3Bhd24tcHJvbWlzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGdldE1vdW50ZWRJbWFnZXMsIG1vdW50SW1hZ2UsIHVubW91bnRJbWFnZSB9IGZyb20gJy4vdXRpbC9oZGl1dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zdGFsbGVyRE1HIGV4dGVuZHMgSW5zdGFsbGVyRGFyd2luIHtcbiAgbmFtZSA9ICdkbWcnO1xuXG4gIGFzeW5jIGluc3RhbGwoeyBmaWxlUGF0aCwgaW5zdGFsbFNwaW5uZXIgfTogSW5zdGFsbGVyT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG1vdW50cyA9IGF3YWl0IGdldE1vdW50ZWRJbWFnZXMoKTtcbiAgICBsZXQgdGFyZ2V0TW91bnQgPSBtb3VudHMuZmluZCgobW91bnQpID0+IG1vdW50LmltYWdlUGF0aCA9PT0gZmlsZVBhdGgpO1xuXG4gICAgaWYgKCF0YXJnZXRNb3VudCkge1xuICAgICAgdGFyZ2V0TW91bnQgPSBhd2FpdCBtb3VudEltYWdlKGZpbGVQYXRoKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgdm9sdW1lUGF0aCA9IHBhdGgucmVzb2x2ZSgnL1ZvbHVtZXMnLCB0YXJnZXRNb3VudC5tb3VudFBhdGgpO1xuICAgICAgY29uc3QgYXBwTmFtZSA9IChhd2FpdCBmcy5yZWFkZGlyKHZvbHVtZVBhdGgpKS5maW5kKChmaWxlKSA9PiBmaWxlLmVuZHNXaXRoKCcuYXBwJykpO1xuICAgICAgaWYgKCFhcHBOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZpbmQgLmFwcCBmaWxlIGluIERNRycpO1xuICAgICAgfVxuICAgICAgY29uc3QgYXBwUGF0aCA9IHBhdGgucmVzb2x2ZSh2b2x1bWVQYXRoLCBhcHBOYW1lKTtcbiAgICAgIGNvbnN0IHRhcmdldEFwcGxpY2F0aW9uUGF0aCA9IGAvQXBwbGljYXRpb25zLyR7cGF0aC5iYXNlbmFtZShhcHBQYXRoKX1gO1xuXG4gICAgICBhd2FpdCB0aGlzLm1vdmVBcHAoYXBwUGF0aCwgdGFyZ2V0QXBwbGljYXRpb25QYXRoLCBpbnN0YWxsU3Bpbm5lciwgdHJ1ZSk7XG5cbiAgICAgIGF3YWl0IHNwYXduKCdvcGVuJywgWyctUicsIHRhcmdldEFwcGxpY2F0aW9uUGF0aF0sIHsgZGV0YWNoZWQ6IHRydWUgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IHVubW91bnRJbWFnZSh0YXJnZXRNb3VudCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IEluc3RhbGxlck9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6WyJJbnN0YWxsZXJPcHRpb25zIiwiSW5zdGFsbGVyRE1HIiwiSW5zdGFsbGVyRGFyd2luIiwiaW5zdGFsbCIsImZpbGVQYXRoIiwiaW5zdGFsbFNwaW5uZXIiLCJtb3VudHMiLCJnZXRNb3VudGVkSW1hZ2VzIiwidGFyZ2V0TW91bnQiLCJmaW5kIiwibW91bnQiLCJpbWFnZVBhdGgiLCJtb3VudEltYWdlIiwidm9sdW1lUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwibW91bnRQYXRoIiwiYXBwTmFtZSIsImZzIiwicmVhZGRpciIsImZpbGUiLCJlbmRzV2l0aCIsIkVycm9yIiwiYXBwUGF0aCIsInRhcmdldEFwcGxpY2F0aW9uUGF0aCIsImJhc2VuYW1lIiwibW92ZUFwcCIsInNwYXduIiwiZGV0YWNoZWQiLCJ1bm1vdW50SW1hZ2UiLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7OytCQXFDU0EsQ0FBZ0I7OztlQUFoQkEsZ0JBQWdCOzs7O0FBckN5QixHQUFrQyxDQUFsQyxnQkFBa0M7QUFFOUQsR0FBNkIsQ0FBN0Isa0JBQTZCO0FBQ3BDLEdBQVUsQ0FBVixRQUFVO0FBQ1IsR0FBTSxDQUFOLEtBQU07QUFFb0MsR0FBZ0IsQ0FBaEIsUUFBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQUV0REMsWUFBWSxTQUFTQyxnQkFBZTtVQUdqREMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxHQUFFQyxjQUFjLEVBQW1CLENBQUMsRUFBaUIsQ0FBQztRQUM1RSxLQUFLLENBQUNDLE1BQU0sR0FBRyxLQUFLLEtBQUNDLFFBQWdCO1FBQ3JDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHRixNQUFNLENBQUNHLElBQUksRUFBRUMsS0FBSyxHQUFLQSxLQUFLLENBQUNDLFNBQVMsS0FBS1AsUUFBUTs7UUFFckUsRUFBRSxHQUFHSSxXQUFXLEVBQUUsQ0FBQztZQUNqQkEsV0FBVyxHQUFHLEtBQUssS0FBQ0ksUUFBVSxhQUFDUixRQUFRO1FBQ3pDLENBQUM7UUFFRCxHQUFHLENBQUMsQ0FBQztZQUNILEtBQUssQ0FBQ1MsVUFBVSxHQUFHQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQyxDQUFVLFdBQUVQLFdBQVcsQ0FBQ1EsU0FBUztZQUNqRSxLQUFLLENBQUNDLE9BQU8sSUFBSSxLQUFLLENBQUNDLFFBQUUsU0FBQ0MsT0FBTyxDQUFDTixVQUFVLEdBQUdKLElBQUksRUFBRVcsSUFBSSxHQUFLQSxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFNOztZQUNsRixFQUFFLEdBQUdKLE9BQU8sRUFBRSxDQUFDO2dCQUNiLEtBQUssQ0FBQyxHQUFHLENBQUNLLEtBQUssQ0FBQyxDQUFpQztZQUNuRCxDQUFDO1lBQ0QsS0FBSyxDQUFDQyxPQUFPLEdBQUdULEtBQUksU0FBQ0MsT0FBTyxDQUFDRixVQUFVLEVBQUVJLE9BQU87WUFDaEQsS0FBSyxDQUFDTyxxQkFBcUIsSUFBSSxjQUFjLEVBQUVWLEtBQUksU0FBQ1csUUFBUSxDQUFDRixPQUFPO1lBRXBFLEtBQUssQ0FBQyxJQUFJLENBQUNHLE9BQU8sQ0FBQ0gsT0FBTyxFQUFFQyxxQkFBcUIsRUFBRW5CLGNBQWMsRUFBRSxJQUFJO1lBRXZFLEtBQUssS0FBQ3NCLGtCQUFLLFFBQUMsQ0FBTSxPQUFFLENBQUM7Z0JBQUEsQ0FBSTtnQkFBRUgscUJBQXFCO1lBQUEsQ0FBQyxFQUFFLENBQUM7Z0JBQUNJLFFBQVEsRUFBRSxJQUFJO1lBQUMsQ0FBQztRQUN2RSxDQUFDLFFBQVMsQ0FBQztZQUNULEtBQUssS0FBQ0MsUUFBWSxlQUFDckIsV0FBVztRQUNoQyxDQUFDO0lBQ0gsQ0FBQzs7O1FBMUJZLElBMkJkLENBMUJDc0IsSUFBSSxHQUFHLENBQUs7OztrQkFETzdCLFlBQVkifQ==