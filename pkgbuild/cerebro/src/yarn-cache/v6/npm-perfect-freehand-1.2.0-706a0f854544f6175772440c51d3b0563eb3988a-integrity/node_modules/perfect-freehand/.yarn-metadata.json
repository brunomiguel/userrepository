{
  "manifest": {
    "version": "1.2.0",
    "name": "perfect-freehand",
    "private": false,
    "description": "Draw perfect pressure-sensitive freehand strokes.",
    "author": {
      "name": "Steve Ruiz",
      "url": "https://twitter.com/steveruizok"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/steveruizok/perfect-freehand"
    },
    "keywords": [
      "ink",
      "draw",
      "paint",
      "signature",
      "handwriting",
      "text",
      "drawing",
      "painting"
    ],
    "files": [
      "dist/**/*"
    ],
    "exports": {
      ".": {
        "types": "./dist/types/index.d.ts",
        "require": "./dist/cjs/index.js",
        "import": "./dist/esm/index.js"
      }
    },
    "license": "MIT",
    "main": "./dist/cjs/index.js",
    "module": "./dist/esm/index.js",
    "types": "./dist/types/index.d.ts",
    "typings": "./dist/types/index.d.ts",
    "scripts": {
      "start": "node scripts/dev & tsc --watch --incremental --emitDeclarationOnly --declarationMap --outDir dist/types",
      "build": "yarn clean && node scripts/build && tsc --project tsconfig.build.json  --emitDeclarationOnly --outDir dist/types",
      "lint": "eslint src/ --ext .ts,.tsx",
      "clean": "rm -rf dist",
      "ts-node": "ts-node",
      "docs": "typedoc --entryPoints src/index.ts"
    },
    "devDependencies": {
      "@babel/core": "^7.15.0",
      "@babel/plugin-syntax-import-meta": "^7.10.4",
      "@babel/preset-env": "^7.15.0",
      "@babel/preset-react": "^7.14.5",
      "@babel/preset-typescript": "^7.15.0",
      "@testing-library/jest-dom": "^5.14.1",
      "@testing-library/react": "^12.0.0",
      "@types/jest": "^27.0.1",
      "@types/node": "^15.0.1",
      "@typescript-eslint/eslint-plugin": "^4.19.0",
      "@typescript-eslint/parser": "^4.19.0",
      "babel-jest": "^27.1.0",
      "eslint": "^7.32.0",
      "fake-indexeddb": "^3.1.3",
      "jest": "^27.1.0",
      "lerna": "^3.15.0",
      "ts-jest": "^27.0.5",
      "tslib": "^2.3.0",
      "typedoc": "^0.21.9",
      "typescript": "^4.4.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-perfect-freehand-1.2.0-706a0f854544f6175772440c51d3b0563eb3988a-integrity/node_modules/perfect-freehand/package.json",
    "readmeFilename": "README.md",
    "readme": "# ![Screenshot](assets/perfect-freehand-logo.svg 'Perfect Freehand')\n\nDraw perfect pressure-sensitive freehand lines.\n\nðŸ”— Curious? Try out a [demo](https://perfect-freehand-example.vercel.app/).\n\nðŸ’… Designer? Check out the [Figma Plugin](https://www.figma.com/community/plugin/950892731860805817).\n\nðŸ•Š Flutterer? There's now a [dart version](https://pub.dev/packages/perfect_freehand) of this library, too.\n\nðŸ’• Love this library? Consider [becoming a sponsor](https://github.com/sponsors/steveruizok?frequency=recurring&sponsor=steveruizok).\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Documentation](#documentation)\n- [Community](#community)\n- [Author](#author)\n\n## Installation\n\n```bash\nnpm install perfect-freehand\n```\n\nor\n\n```bash\nyarn add perfect-freehand\n```\n\n## Introduction\n\nThis package exports a function named `getStroke` that will generate the points for a polygon based on an array of points.\n\n![Screenshot](assets/process.gif 'A GIF showing a stroke with input points, outline points, and a curved path connecting these points')\n\nTo do this work, `getStroke` first creates a set of spline points (red) based on the input points (grey) and then creates outline points (blue). You can render the result any way you like, using whichever technology you prefer.\n\n[![Edit perfect-freehand-example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/perfect-freehand-example-biwyi?fontsize=14&hidenavigation=1&theme=dark)\n\n## Usage\n\nTo use this library, import the `getStroke` function and pass it an array of **input points**, such as those recorded from a user's mouse movement. The `getStroke` function will return a new array of **outline points**. These outline points will form a polygon (called a \"stroke\") that surrounds the input points.\n\n```js\nimport { getStroke } from 'perfect-freehand'\n\nconst inputPoints = [\n  [0, 0],\n  [10, 5],\n  [20, 8],\n  // ...\n]\n\nconst outlinePoints = getStroke(inputPoints)\n```\n\nYou then can **render** your stroke points using your technology of choice. See the [Rendering](#rendering) section for examples in SVG and HTML Canvas.\n\nYou can **customize** the appearance of the stroke shape by passing `getStroke` a second parameter: an options object containing one or more options. See the [Options](#options) section for a full list of available options.\n\n```js\nconst stroke = getStroke(myPoints, {\n  size: 32,\n  thinning: 0.7,\n})\n```\n\nThe appearance of a stroke is effected by the **pressure** associated with each input point. By default, the `getStroke` function will simulate pressure based on the distance between input points.\n\nTo use **real pressure**, such as that from a pen or stylus, provide the pressure as the third number for each input point, and set the `simulatePressure` option to `false`.\n\n```js\nconst inputPoints = [\n  [0, 0, 0.5],\n  [10, 5, 0.7],\n  [20, 8, 0.8],\n  // ...\n]\n\nconst outlinePoints = getStroke(inputPoints, {\n  simulatePressure: false,\n})\n```\n\nIn addition to providing points as an array of arrays, you may also provide your points as an **array of objects** as show in the example below. In both cases, the value for pressure is optional (it will default to `.5`).\n\n```js\nconst inputPoints = [\n  { x: 0, y: 0, pressure: 0.5 },\n  { x: 10, y: 5, pressure: 0.7 },\n  { x: 20, y: 8, pressure: 0.8 },\n  // ...\n]\n\nconst outlinePoints = getStroke(inputPoints, {\n  simulatePressure: false,\n})\n```\n\n**Note:** Internally, the `getStroke` function will convert your object points to array points, which will have an effect on performance. If you're using this library ambitiously and want to format your points as objects, consider modifying this library's `getStrokeOutlinePoints` to use the object syntax instead (e.g. replacing all `[0]` with `.x`, `[1]` with `.y`, and `[2]` with `.pressure`).\n\n## Example\n\n```jsx\nimport * as React from 'react'\nimport { getStroke } from 'perfect-freehand'\nimport { getSvgPathFromStroke } from './utils'\n\nexport default function Example() {\n  const [points, setPoints] = React.useState([])\n\n  function handlePointerDown(e) {\n    e.target.setPointerCapture(e.pointerId)\n    setPoints([[e.pageX, e.pageY, e.pressure]])\n  }\n\n  function handlePointerMove(e) {\n    if (e.buttons !== 1) return\n    setPoints([...points, [e.pageX, e.pageY, e.pressure]])\n  }\n\n  const stroke = getStroke(points, {\n    size: 16,\n    thinning: 0.5,\n    smoothing: 0.5,\n    streamline: 0.5,\n  })\n\n  const pathData = getSvgPathFromStroke(stroke)\n\n  return (\n    <svg\n      onPointerDown={handlePointerDown}\n      onPointerMove={handlePointerMove}\n      style={{ touchAction: 'none' }}\n    >\n      {points && <path d={pathData} />}\n    </svg>\n  )\n}\n```\n\n> **Tip:** For implementations in Typescript, see the example project included in this repository.\n\n[![Edit perfect-freehand-example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/perfect-freehand-example-biwyi?fontsize=14&hidenavigation=1&theme=dark)\n\n## Documentation\n\n### Options\n\nThe options object is optional, as are each of its properties.\n\n| Property           | Type     | Default | Description                                           |\n| ------------------ | -------- | ------- | ----------------------------------------------------- |\n| `size`             | number   | 8       | The base size (diameter) of the stroke.               |\n| `thinning`         | number   | .5      | The effect of pressure on the stroke's size.          |\n| `smoothing`        | number   | .5      | How much to soften the stroke's edges.                |\n| `streamline`       | number   | .5      | How much to streamline the stroke.                    |\n| `simulatePressure` | boolean  | true    | Whether to simulate pressure based on velocity.       |\n| `easing`           | function | t => t  | An easing function to apply to each point's pressure. |\n| `start`            | { }      |         | Tapering options for the start of the line.           |\n| `end`              | { }      |         | Tapering options for the end of the line.             |\n| `last`             | boolean  | true    | Whether the stroke is complete.                       |\n\n**Note:** When the `last` property is `true`, the line's end will be drawn at the last input point, rather than slightly behind it.\n\nThe `start` and `end` options accept an object:\n\n| Property | Type              | Default | Description                                                                              |\n| -------- | ----------------- | ------- | ---------------------------------------------------------------------------------------- |\n| `cap`    | boolean           | true    | Whether to draw a cap.                                                                   |\n| `taper`  | number or boolean | 0       | The distance to taper. If set to true, the taper will be the total length of the stroke. |\n| `easing` | function          | t => t  | An easing function for the tapering effect.                                              |\n\n**Note:** The `cap` property has no effect when `taper` is more than zero.\n\n```js\ngetStroke(myPoints, {\n  size: 8,\n  thinning: 0.5,\n  smoothing: 0.5,\n  streamline: 0.5,\n  easing: (t) => t,\n  simulatePressure: true,\n  last: true,\n  start: {\n    cap: true,\n    taper: 0,\n    easing: (t) => t,\n  },\n  end: {\n    cap: true,\n    taper: 0,\n    easing: (t) => t,\n  },\n})\n```\n\n> **Tip:** To create a stroke with a steady line, set the `thinning` option to `0`.\n\n> **Tip:** To create a stroke that gets thinner with pressure instead of thicker, use a negative number for the `thinning` option.\n\n### Other Exports\n\nFor advanced usage, the library also exports smaller functions that `getStroke` uses to generate its outline points.\n\n#### `getStrokePoints`\n\nA function that accepts an array of points (formatted either as `[x, y, pressure]` or `{ x: number, y: number, pressure: number}`) and (optionally) an options object. Returns a set of adjusted points as `{ point, pressure, vector, distance, runningLength }`. The path's total length will be the `runningLength` of the last point in the array.\n\n```js\nimport { getStrokePoints } from 'perfect-freehand'\nimport samplePoints from \"./samplePoints.json'\n\nconst strokePoints = getStrokePoints(samplePoints)\n```\n\n#### `getOutlinePoints`\n\nA function that accepts an array of points (formatted as `{ point, pressure, vector, distance, runningLength }`, i.e. the output of `getStrokePoints`) and (optionally) an options object, and returns an array of points (`[x, y]`) defining the outline of a pressure-sensitive stroke.\n\n```js\nimport { getStrokePoints, getOutlinePoints } from 'perfect-freehand'\nimport samplePoints from \"./samplePoints.json'\n\nconst strokePoints = getStrokePoints(samplePoints)\n\nconst outlinePoints = getOutlinePoints(strokePoints)\n```\n\n**Note:** Internally, the `getStroke` function passes the result of `getStrokePoints` to `getStrokeOutlinePoints`, just as shown in this example. This means that, in this example, the result of `myOutlinePoints` will be the same as if the `samplePoints` array had been passed to `getStroke`.\n\n#### `StrokeOptions`\n\nA TypeScript type for the options object. Useful if you're defining your options outside of the `getStroke` function.\n\n```ts\nimport { StrokeOptions, getStroke } from 'perfect-freehand'\n\nconst options: StrokeOptions = {\n  size: 16,\n}\n\nconst stroke = getStroke(options)\n```\n\n## Tips & Tricks\n\n### Freehand Anything\n\nWhile this library was designed for rendering the types of input points generated by the movement of a human hand, you can pass any set of points into the library's functions. For example, here's what you get when running [Feather Icons](https://feathericons.com/) through `getStroke`.\n\n![Icons](assets/icons.png)\n\n### Rendering\n\nWhile `getStroke` returns an array of points representing the outline of a stroke, it's up to you to decide how you will render these points.\n\nThe function below will turn the points returned by `getStroke` into SVG path data.\n\n```js\nconst average = (a, b) => (a + b) / 2\n\nfunction getSvgPathFromStroke(stroke) {\n  const len = points.length\n\n  if (!len) {\n    return ''\n  }\n\n  const first = points[0]\n  let result = `M${first[0].toFixed(3)},${first[1].toFixed(3)}Q`\n\n  for (let i = 0, max = len - 1; i < max; i++) {\n    const a = points[i]\n    const b = points[i + 1]\n    result += `${a[0].toFixed(3)},${a[1].toFixed(3)} ${average(\n      a[0],\n      b[0]\n    ).toFixed(3)},${average(a[1], b[1]).toFixed(3)} `\n  }\n\n  result += 'Z'\n\n  return result\n}\n```\n\nTo use this function, first run your input points through `getStroke`, then pass the result to `getSvgPathFromStroke`.\n\n```js\nconst outlinePoints = getStroke(inputPoints)\n\nconst pathData = getSvgPathFromStroke(outlinePoints)\n```\n\nYou could then pass this string of SVG path data either to an [SVG path](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d) element:\n\n```jsx\n<path d={pathData} />\n```\n\nOr, if you are rendering with HTML Canvas, you can pass the string to a [`Path2D` constructor](https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D#using_svg_paths)).\n\n```js\nconst myPath = new Path2D(pathData)\n\nctx.fill(myPath)\n```\n\n### Flattening\n\nBy default, the polygon's paths include self-crossings. You may wish to remove these crossings and render a stroke as a \"flattened\" polygon. To do this, install the [`polygon-clipping`](https://github.com/mfogel/polygon-clipping) package and use the following function together with the `getSvgPathFromStroke`.\n\n```js\nimport polygonClipping from 'polygon-clipping'\n\nfunction getFlatSvgPathFromStroke(stroke) {\n  const faces = polygonClipping.union([stroke])\n\n  const d = []\n\n  faces.forEach((face) =>\n    face.forEach((points) => {\n      d.push(getSvgPathFromStroke(points))\n    })\n  )\n\n  return d.join(' ')\n}\n```\n\n## Development & Contributions\n\nTo work on this library:\n\n- clone this repo\n- run `yarn` in the folder root to install dependencies\n- run `yarn start` to start the local development server\n\nThe development server is located at `packages/dev`. The library and its tests are located at `packages/perfect-freehand`.\n\nPull requests are very welcome!\n\n## Community\n\n### Support\n\nNeed help? Please [open an issue](https://github.com/steveruizok/perfect-freehand/issues/new) for support.\n\n### Discussion\n\nHave an idea or casual question? Visit the [discussion page](https://github.com/steveruizok/perfect-freehand/discussions).\n\n### License\n\n- MIT\n- ...but if you're using `perfect-freehand` in a commercial product, consider [becoming a sponsor](https://github.com/sponsors/steveruizok?frequency=recurring&sponsor=steveruizok). ðŸ’°\n\n## Author\n\n- [@steveruizok](https://twitter.com/steveruizok)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Stephen Ruiz Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/perfect-freehand/-/perfect-freehand-1.2.0.tgz#706a0f854544f6175772440c51d3b0563eb3988a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/perfect-freehand/-/perfect-freehand-1.2.0.tgz",
    "hash": "706a0f854544f6175772440c51d3b0563eb3988a",
    "integrity": "sha512-h/0ikF1M3phW7CwpZ5MMvKnfpHficWoOEyr//KVNTxV4F6deRK1eYMtHyBKEAKFK0aXIEUK9oBvlF6PNXMDsAw==",
    "registry": "npm",
    "packageName": "perfect-freehand",
    "cacheIntegrity": "sha512-h/0ikF1M3phW7CwpZ5MMvKnfpHficWoOEyr//KVNTxV4F6deRK1eYMtHyBKEAKFK0aXIEUK9oBvlF6PNXMDsAw== sha1-cGoPhUVE9hdXckQMUdOwVj6zmIo="
  },
  "registry": "npm",
  "hash": "706a0f854544f6175772440c51d3b0563eb3988a"
}