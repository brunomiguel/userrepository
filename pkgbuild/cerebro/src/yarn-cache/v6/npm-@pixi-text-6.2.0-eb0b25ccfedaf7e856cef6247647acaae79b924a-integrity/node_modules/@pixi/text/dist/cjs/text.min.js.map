{"version":3,"file":"text.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/const.ts","../../src/TextStyle.ts","../../src/TextMetrics.ts","../../src/Text.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT {\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @see PIXI.TEXT_GRADIENT\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /** The font family. */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","import { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics {\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /**\n     * The font properties object from TextMetrics.measureFont.\n     *\n     * @type {PIXI.IFontMetrics}\n     */\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n    public static HEIGHT_MULTIPLIER: number;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _canvas: HTMLCanvasElement|OffscreenCanvas;\n    public static _context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D;\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     *\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @return A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @return The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     *\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @return Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     *\n     * @param whiteSpace - The white space\n     * @return  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     *\n     * @param  text - The text\n     * @return Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @param  char - The character\n     * @return True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param char     - The character\n     * @param [nextChar] - The next character\n     * @return True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @param  text - The text\n     * @return  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  token       - The token\n     * @param  breakWords - The style attr break words\n     * @return Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  char        - The character\n     * @param  nextChar    - The next character\n     * @param  token       - The token/word the characters are from\n     * @param  index       - The index in the token of the char\n     * @param  breakWords - The style attr break words\n     * @return whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  token - The token to split\n     * @return The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @param font - String representing the style of the font\n     * @return Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = ((): HTMLCanvasElement|OffscreenCanvas =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture  } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Renderer } from '@pixi/core';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\ninterface ModernContext2D extends CanvasRenderingContext2D {\n   // for chrome less 94\n   textLetterSpacing?: number;\n   // for chrome greater 94\n   letterSpacing?: number;\n}\n\n// Checking that we can use moddern canvas2D api\n// https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n// note: this is unstable API, Chrome less 94 use a `textLetterSpacing`, newest use a letterSpacing\n// eslint-disable-next-line max-len\nconst supportLetterSpacing = 'letterSpacing' in CanvasRenderingContext2D.prototype || 'textLetterSpacing' in CanvasRenderingContext2D.prototype;\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n     * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n     * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n     * In the next major release, we'll enable this by default.\n     */\n    public static nextLineHeightBehavior = false;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: HTMLCanvasElement;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ModernContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     *\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     *\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     *\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     *\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     *\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text: string, style?: Partial<ITextStyle>|TextStyle, canvas?: HTMLCanvasElement)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = document.createElement('canvas');\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = this.canvas.getContext('2d');\n\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     *\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     *\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0 || supportLetterSpacing)\n        {\n            if (supportLetterSpacing)\n            {\n                this.context.letterSpacing = letterSpacing;\n                this.context.textLetterSpacing = letterSpacing;\n            }\n\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        // Recursively updates transform of all objects from the root to this one\n        this._recursivePostUpdateTransform();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param rect - The output rectangle.\n     * @return The bounds.\n     */\n    public getLocalBounds(rect: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @return The fill style\n     */\n    private _generateFillStyle(style: TextStyle, lines: string[], metrics: TextMetrics): string|CanvasGradient|CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[]|CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     */\n    get style(): TextStyle|Partial<ITextStyle>\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n        //       since the setter creates the TextStyle. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        return this._style;\n    }\n\n    set style(style: TextStyle|Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     *\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","TEXT_GRADIENT","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","style","styleID","reset","deepCopyProperties","TextStyle","clonedProperties","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","fontSizeString","fontFamilies","isArray","split","i","length","test","indexOf","join","getSingleColor","color","hex2string","replace","array1","array2","target","source","propertyObj","prop","slice","text","width","height","lines","lineWidths","maxLineWidth","fontProperties","TextMetrics","canvas","_canvas","font","toFontString","measureFont","ascent","context","getContext","lineWidth","measureText","max","line","cache","collapseSpaces","collapseNewlines","canPrependSpaces","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","characters","wordWrapSplit","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","spacing","_newlines","charCodeAt","_nextChar","_breakingSpaces","push","_token","_char","_index","_fonts","properties","descent","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","HEIGHT_MULTIPLIER","BASELINE_MULTIPLIER","fillStyle","fillRect","fillText","imagedata","getImageData","data","pixels","idx","stop","c","OffscreenCanvas","document","createElement","ex","defaultDestroyOptions","texture","children","baseTexture","supportLetterSpacing","CanvasRenderingContext2D","ownCanvas","Texture","from","orig","Rectangle","_this","_super","_ownCanvas","_resolution","settings","RESOLUTION","_autoResolution","_text","_style","_styleListener","_font","localStyleID","Text","respectDirty","dirty","linePositionX","linePositionY","measured","scale","clearRect","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","strokeStyle","rgb","hex2rgb","string2hex","shadowColor","shadowBlur","shadowOffsetX","cos","shadowOffsetY","sin","_generateFillStyle","linePositionYShift","nextLineHeightBehavior","i_1","drawLetterSpacing","updateTexture","x","y","isStroke","textLetterSpacing","strokeText","currentPosition","stringArray","previousWidth","currentWidth","currentChar","substring","trimmed","trimCanvas","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","updateUvs","_recursivePostUpdateTransform","renderer","resolution","updateText","_render","rect","getLocalBounds","call","calculateVertices","_bounds","addQuad","vertexData","metrics","gradient","dropShadowCorrection","lengthPlus1","unshift","createLinearGradient","textHeight","lastLineBottom","thisLineTop","thisLineGradientStart","thisLineBottom","nextLineTop","thisLineGradientEnd","gradStopLineHeight","lineStop","globalStop","min","Number","toFixed","addColorStop","totalIterations","currentIteration","options","assign","destroy","abs","value","s","sign","_width","_height","String","Sprite"],"mappings":"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"}