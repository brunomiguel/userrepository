{
  "manifest": {
    "author": {
      "name": "Igor Bezkrovny"
    },
    "name": "image-q",
    "version": "1.1.1",
    "description": "Image Quantization Library in **TypeScript** *(MIT Licensed)*",
    "license": "MIT",
    "contributors": [],
    "homepage": "https://github.com/igor-bezkrovny/image-quantization",
    "scripts": {
      "test": "mocha --recursive",
      "prepublish": "npm run dist",
      "dist": "webpack --config ./src/webpack.config.js",
      "watch": "webpack --config ./src/webpack.config.js --watch"
    },
    "preferGlobal": false,
    "main": "./dist/iq.js",
    "typings": "./dist/iq.d.ts",
    "dependencies": {},
    "devDependencies": {
      "chai": "^3.5.0",
      "mocha": "^3.0.2",
      "source-map-loader": "^0.1.5",
      "ts-loader": "^0.8.2",
      "typedoc": "^0.4.4",
      "typescript": "^2.0.0",
      "webpack": "^1.13.1"
    },
    "keywords": [
      "image",
      "palette",
      "quantization",
      "quantizer",
      "color",
      "neuquant",
      "rgbquant",
      "xiaolin wu",
      "cie94 distance",
      "ciede2000",
      "dithering",
      "floyd-steinberg"
    ],
    "engines": {
      "node": ">=0.9.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/igor-bezkrovny/image-quantization"
    },
    "bugs": {
      "url": "https://github.com/igor-bezkrovny/image-quantization/issues"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-image-q-1.1.1-integrity/node_modules/image-q/package.json",
    "readmeFilename": "README.md",
    "readme": "IQ.ts\n-----\n\nComplete Image Quantization Library in **TypeScript** _(MIT License)_\n\n[![Build Status](https://travis-ci.org/igor-bezkrovny/image-quantization.svg?branch=master)](https://travis-ci.org/igor-bezkrovny/image-quantization)\n[![demo](https://img.shields.io/badge/demo-online-brightgreen.svg)](http://igor-bezkrovny.github.io/image-q/demo)\n[![github](https://img.shields.io/badge/github-.com-brightgreen.svg)](https://github.com/igor-bezkrovny/image-quantization)\n[![npm version](https://badge.fury.io/js/image-q.svg)](https://www.npmjs.com/package/image-q)\n[![API Documentation](https://img.shields.io/badge/API_Documentation-Available-blue.svg)](http://igor-bezkrovny.github.io/image-q/doc)\n[![NPM License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n![quantization](https://raw.githubusercontent.com/igor-bezkrovny/image-quantization/master/quantization.png \"quantization\")\n\nTable of Contents\n-----------------\n\n* [Introduction](#introduction)\n* [Capability](#capability)\n* [Usage](#usage)\n* [Todo](#todo)\n* [Changelog](#changelog)\n* [Credits](#credits)\n* [References](#references)\n* [License](#license)\n\nIntroduction\n------------\n\nImage Color Number Reduction with alpha support using RgbQuant/NeuQuant/Xiaolin Wu's algorithms and Euclidean/Manhattan/CIEDE2000 color distance formulas in TypeScript\n \nCapability\n----------\n\n1. Platforms supported\n\t* browser (Chrome 7.0+, FireFox 4.0+, IE 10+, Opera 11.6+, Safari 5.1+)\n\t* node.js (Node.js 0.9.0+)\n\t\n2. Builds\n\t* **iq**.js - UMD build (`import * as iq from \"image-q\"`)\n\t \n3. Import\n\t* `HTMLImageElement`\n\t* `HTMLCanvasElement`\n\t* `NodeCanvas`\n\t* `ImageData`\n\t* `Array`\n\t* `CanvasPixelArray`\n\t* `Uint8Array`\n\t* `Uint32Array`\n\t \n4. Color Distance\n\t* `Euclidean` - 1/1/1/1 coefficients (originally used in Xiaolin Wu's Quantizer **WuQuant**)\n\t* `EuclideanRgbQuantWOAlpha` - BT.709 sRGB coefficients (originally used in **RgbQuant**)\n\t* `EuclideanRgbQuantWithAlpha` BT.709 sRGB coefficients + alpha support\n\t* `Manhattan` - 1/1/1/1 coefficients (originally used in **NeuQuant**) \n\t* `ManhattanSRGB` - BT.709 sRGB coefficients\n\t* `ManhattanNommyde` - see https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-234527620\n\t* `CIEDE2000` - CIEDE2000 (very slow)\n\t* `CIE94Textiles` - CIE94 implementation for textiles\n\t* `CIE94GraphicArts` - CIE94 implementation for graphic arts \n\t* `CMETRIC` - see http://www.compuphase.com/cmetric.htm\n\t* `PNGQUANT` - used in pngQuant tool\n\n5. Palette Quantizers\n\t* `NeuQuant` (original code ported, integer calculations)\n\t* `NeuQuantFloat` (floating-point calculations)\n\t* `RgbQuant`\n\t* `WuQuant`\n\t\n6. Image Quantizers\n\t* `NearestColor`\n\t* `ErrorDiffusionArray` - two modes of error propagation are supported: `xnview` and `gimp`\n\t\t1. `FloydSteinberg`\n        2. `FalseFloydSteinberg`\n        3. `Stucki`\n        4. `Atkinson`\n        5. `Jarvis`\n        6. `Burkes`\n        7. `Sierra`\n        8. `TwoSierra`\n        9. `SierraLite`\n\t* `ErrorDiffusionRiemersma` - Hilbert space-filling curve is used\n\n7. Output\n\t* `Uint32Array`\n\t* `Uint8Array`  \n\t \nInclude IQ Library into your project\n------------------------------------\n\n##### ES6 module\n```javascript\nimport * as iq from \"image-q\"\n```\n\n##### CommonJS \n```javascript\nvar iq = require(\"image-q\");\n```\n\n##### As a global variable (Browser)\n```html\n<script src=\"<path-to image-q/dist/iq.js>\" type=\"text/javascript\" charset=\"utf-8\"></script>\n```\n\nUsage\n-----\n\n##### Load Image (simple example)\n```javascript\nvar img = document.createElement(\"img\");\nimg.onload = function() {\n\t// image is loaded, here should be all code utilizing image\n\t...\n}\nimg.src = \"http://pixabay.com/static/uploads/photo/2012/04/11/11/32/letter-a-27580_640.png\"\n```\n\n##### Generate Palette   \n```javascript\n// desired colors number\nvar targetColors = 256;\n   \n// create pointContainer and fill it with image\nvar pointContainer = iq.utils.PointContainer.fromHTMLImageElement(img);\n\n// create chosen distance calculator (see classes inherited from `iq.distance.AbstractDistanceCalculator`)\nvar distanceCalculator = new iq.distance.Euclidean();\n\n// create chosen palette quantizer (see classes implementing `iq.palette.IPaletteQuantizer`) \nvar paletteQuantizer = new iq.palette.RgbQuant(distanceCalculator, targetColors);\n\t\t\n// feed out pointContainer filled with image to paletteQuantizer\npaletteQuantizer.sample(pointContainer);\n\n... (you may sample more than one image to create mutual palette) \n\n// take generated palette\nvar palette = paletteQuantizer.quantize();\n```\n\n##### Apply Palette to Image (Image Dithering) \n```javascript\n// create image quantizer (see classes implementing `iq.image.IImageDitherer`)\nvar imageDitherer = new iq.image.NearestColor(distanceCalculator);\n\n// apply palette to image\nvar resultPointContainer = imageQuantizer.quantize(pointContainer, palette);\n```\n\nYou may work with resultPointContainer directly or you may convert it to `Uint8Array`/`Uint32Array`\n```javascript\nvar uint8array = resultPointContainer.toUint8Array();\n```\n\nTODO\n----\n1. notification about progress  \n2. ~~riemersma dithering~~  \n3. ordered dithering\n\nChangelog\n---------\n\n##### 1.1.1 (2016-08-28)\n    + CIEDE2000 - incorrect calculation fixed\n    + CIEDE2000 - alpha channel now has only 25% impact on color distance instead of 66%\n    + CIE94 - added 2 types (textiles and graphics art) according to spec\n    + CIE94 - alpha support added\n    + rgb2xyz, lab2xyz, xyz2rgb, xyz2lab - gamma correction\n    + lab2xyz, xyz2lab - refY should be 100 (1.00000) instead of 10 (0.10000) \n    + manhattan with new (Nommyde) coefficients added \n    + mocha tests added\n    + webpack integration\n    + image-q is now UMD module \n    + travis-ci integration\n    + typescript 2.0\n    + indentation with 4 spaces\n\n##### 0.1.4 (2015-06-24)\n\t+ Refactoring \n\t+ Riemersma dithering added (Hilbert Curve)\n\t+ Readme.md updated\n\t+ build.cmd updated\n\n##### 0.1.3 (2015-06-16)\n\t+ NeuQuant is fixed (again) according to original Anthony Dekker source code (all values should be integer)\n\t+ Error Diffusion Dithering is now calculates error like XNVIEW\n\t+ Refactoring\n\n##### 0.1.2 (2015-06-16)\n\t+ Documentation generation fixed\n\t+ File name case problem fixed\n\n##### 0.1.1 (2015-06-16)\n\t+ Auto-generated documentation added\n\t+ Refactoring \n\n##### 0.1.0 (2015-06-16)\n\t+ Code cleanup, removed unnecessary files\n\n##### 0.0.5 (2015-06-16)\n\t+ PNGQUANT color distance added, need to check its quality\n\t+ CIEDE2000 and CIE94 fixed for use in NeuQuant\n\t+ NeuQuant is fixed according to original Anthony Dekker source code (all values should be integer) \n\t+ Code refactoring and cleanup\n\t* We have some slowdown because of red/green/blue/alpha normalization according to white point per each calculateRaw/calculateNormalized call \n\n##### 0.0.4 (2015-06-15)\n\t+ CIEDE2000 color distance equation optimized (original CIEDE2000 equation is available as class `CIEDE2000_Original`) \n\n##### 0.0.3b (2015-06-11)\n\t+ CMETRIC color distance fixed\n\n##### 0.0.3a (2015-06-11)\n\t+ Cleanup\n\t+ Draft of CMETRIC color distance added\n\n##### 0.0.2 (2015-06-10)\n\t+ rgb2xyz & xyz2lab fixed. CIEDE2000 works much better now.\n\t+ CIE94 distance formula added. More investigation is needed.\n\n##### 0.0.1\n\t+ Initial\n\nCredits\n-------\nThanks to Leon Sorokin for information share and his original RgbQuant!\n\nReferences\n----------\n\n* Palette Quantization Algorithms\n\n\t1. [RgbQuant (Leon Sorokin)](https://github.com/leeoniya/RgbQuant.js) `JavaScript`\n\t2. [NeuQuant (Johan Nordberg)](https://github.com/jnordberg/gif.js/blob/master/src/TypedNeuQuant.js) `TypeScript`\n\t3. [NeuQuant (Tim Oxley)](https://github.com/timoxley/neuquant) `JavaScript`\n\t4. [NeuQuant (Devon Govett)](https://github.com/devongovett/neuquant) `JavaScript`\n\t5. [NeuQuant32 (Stuart Coyle)](https://github.com/stuart/pngnq/blob/master/src/neuquant32.c) `C`\n\t6. [Xiaolin Wu (Xiaolin Wu)](http://www.ece.mcmaster.ca/~xwu/cq.c) `C` \n\t7. [Xiaolin Wu (Smart-K8)](http://www.codeproject.com/Articles/66341/A-Simple-Yet-Quite-Powerful-Palette-Quantizer-in-C) `C#`\n\t8. Xiaolin Wu w/ Alpha (Matt Wrock) [How to add Alpha](https://code.msdn.microsoft.com/windowsdesktop/Convert-32-bit-PNGs-to-81ef8c81/view/SourceCode#content), [Source Code](https://nquant.codeplex.com) `C#`\n\t9. [MedianCut (mwcz)](https://github.com/mwcz/median-cut-js) `GPLv3`\n\n* Image Quantization Algorithms\n\n\t1. [All (ImageMagik doc)](http://www.imagemagick.org/Usage/quantize/#dither)\n\t2. [Error Diffusion dithering (Tanner Helland)](http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code)\n\t3. [Riemersma dithering](http://www.compuphase.com/riemer.htm) `TODO: Check License`\n\t4. [Ordered dithering (Joel Yliluoma)](http://bisqwit.iki.fi/story/howto/dither/jy)\n\n* Color Distance Formulas\n\n\t[Calculator + Info](http://colorizer.org/)\n\n\t1. Euclidean Distance\n\t2. Manhattan Distance\n\t3. CIE94 Distance\n\t   - [Source Code (Iulius Curt)](https://github.com/iuliux/CIE94.js)\n\t4. CIEDE2000\n\t   - [Math and Test Data Table (PDF)](http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf)\n\t   - [Info](http://www.ece.rochester.edu/~gsharma/ciede2000/)\n\t   - [Source Code (Greg Fiumara)](https://github.com/gfiumara/CIEDE2000) `C`\n\t   - [Source Code (THEjoezack)](https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/CieDe2000Comparison.cs) `C#`\n\t   - [Online Calculator](http://colormine.org/delta-e-calculator/cie2000)\n\t5. Euclidean Distance w/o Alpha (RgbQuant)\n\t6. Euclidean Distance w/o sRGB coefficients (Xiaolin Wu Quant)  \n\t7. Manhattan Distance w/o sRGB coefficients (NeuQuant)\n\t8. [CMETRIC](http://www.compuphase.com/cmetric.htm) `DRAFT!`\n\n* Color conversion formulas\n\n\t1. [Pseudo-code](http://www.easyrgb.com/?X=MATH)\n\n> Be sure to fix rgb2xyz/xyz2lab. Issue is with strange part of code: `r = r > 0.04045 ? ...`. Check http://en.wikipedia.org/wiki/Lab_color_space   \n\n* Image Quality Assessment\n\n\t1. [SSIM info](http://en.wikipedia.org/wiki/Structural_similarity)\n\t2. [SSIM (Rhys-e)](https://github.com/rhys-e/structural-similarity) `Java` `License: MIT`\n\t3. PSNR ? TBD\n\t4. MSE ? TBD\n\n* Other\n\n\t1. [HUSL (Boronine) - info](http://www.husl-colors.org)\n\t2. [HUSL (Boronine) - code](https://github.com/husl-colors/husl)\n\t3. [Color Image Quantization for Frame Buffer Display](https://www.cs.cmu.edu/~ph/ciq_thesis)\n\t4. [K-Means](http://arxiv.org/pdf/1101.0395.pdf)\n\t5. [Efficient Color Quantization by Hierarchical Clustering Algorithms](ftp://cs.joensuu.fi/pub/Theses/2005_MSc_Hautamaki_Ville.pdf)\n\t6. http://www.codeproject.com/Articles/66341/A-Simple-Yet-Quite-Powerful-Palette-Quantizer-in-C\n\nLicense\n-------\n\n[MIT](LICENSE)\n",
    "licenseText": "# image-quantization (https://github.com/igor-bezkrovny/image-quantization)\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Igor Bezkrovny\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n# http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n\nNeuQuant Neural-Net Quantization Algorithm\n------------------------------------------\n\nCopyright (c) 1994 Anthony Dekker\n\nNEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n\"Kohonen neural networks for optimal colour quantization\" in \"Network:\nComputation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\nthe algorithm.\n\nAny party obtaining a copy of these files from the author, directly or\nindirectly, is granted, free of charge, a full and unrestricted irrevocable,\nworld-wide, paid up, royalty-free, nonexclusive right and license to deal in\nthis software and documentation files (the \"Software\"), including without\nlimitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons who\nreceive copies from any such party to do so, with the only requirement being\nthat this copyright notice remain intact.\n\n# https://github.com/leeoniya/RgbQuant.js\n\nCopyright (c) 2015, Leon Sorokin\nAll rights reserved. (MIT Licensed)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/image-q/-/image-q-1.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/image-q/-/image-q-1.1.1.tgz",
    "hash": "",
    "integrity": "sha1-/IQJlmRGC5DKhi2TALa/u7+/gFY=",
    "registry": "npm",
    "packageName": "image-q",
    "cacheIntegrity": "sha512-zgWEeg+5KV7fILRUxkmPr/Sykz9wP22n2OfBtuzURc7jZ0D5esuw6xFfKWug3fYUEZ78+ECNKjjYmEUqxFtk+Q== sha1-/IQJlmRGC5DKhi2TALa/u7+/gFY="
  },
  "registry": "npm",
  "hash": "ce05847a0fb9295edf20b454c6498faff4b2933f703f6da7d8e7c1b6ecd445cee36740f97acbb0eb115f296ba0ddf614119efcf8408d2a38d898452ac45b64f9"
}