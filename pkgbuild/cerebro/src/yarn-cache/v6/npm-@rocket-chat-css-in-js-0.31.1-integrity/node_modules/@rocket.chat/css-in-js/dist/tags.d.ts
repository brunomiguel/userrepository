/**
 * A shared state created by the upmost Evaluable in the call stack
 */
declare type EvaluationContext = string[];
/**
 * Holds to the evaluation context inside a Evaluable.
 *
 * @returns a pair of the evaluation context and a function to free it,
 *          returning the additional evaluation stored at the context.
 */
export declare const holdContext: () => [EvaluationContext, () => string];
/**
 * A function that lazily evaluates a special string interpolation.
 */
declare type Evaluable = <T extends readonly unknown[]>(...args: T) => string;
export declare type cssFn = Evaluable;
export declare type keyframesFn = Evaluable;
/**
 * Template string tag to declare CSS content chunks.
 *
 * @returns a callback to render the CSS content
 */
export declare const css: (slices: TemplateStringsArray, ...values: readonly unknown[]) => cssFn;
/**
 * Template string tag to declare CSS `@keyframe` at-rules.
 *
 * @returns a callback to render the CSS at-rule content
 */
export declare const keyframes: (slices: TemplateStringsArray, ...values: unknown[]) => keyframesFn;
export {};
