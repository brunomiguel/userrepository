{
  "manifest": {
    "name": "espurify",
    "description": "Clone AST without extra properties",
    "version": "2.1.1",
    "author": {
      "name": "Takuto Wada",
      "email": "takuto.wada@gmail.com",
      "url": "https://github.com/twada"
    },
    "bugs": {
      "url": "https://github.com/estools/espurify/issues"
    },
    "contributors": [
      {
        "name": "Renée Kooi",
        "url": "https://github.com/goto-bus-stop"
      },
      {
        "name": "Andreas Lind",
        "url": "https://github.com/papandreou"
      }
    ],
    "devDependencies": {
      "acorn": "^8.0.0",
      "babel-types": "^6.3.20",
      "babylon": "^6.3.20",
      "esprima": "^4.0.0",
      "estraverse": "^5.0.0",
      "mocha": "^8.0.0",
      "semistandard": "^14.0.0",
      "snazzy": "^8.0.0"
    },
    "files": [
      "CHANGELOG.md",
      "MIT-LICENSE.txt",
      "README.md",
      "index.js",
      "lib",
      "package.json"
    ],
    "homepage": "https://github.com/estools/espurify",
    "keywords": [
      "ast",
      "estree",
      "ecmascript",
      "es6"
    ],
    "license": "MIT",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/estools/espurify.git"
    },
    "scripts": {
      "preversion": "npm test",
      "lint": "semistandard --verbose index.js lib test | snazzy",
      "fmt": "semistandard --fix index.js lib test",
      "test": "npm run lint && mocha test"
    },
    "semistandard": {
      "ignore": [
        "/build/",
        "/bench/",
        "**/*.jsx"
      ],
      "globals": [
        "describe",
        "beforeEach",
        "it"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-espurify-2.1.1-afb043f22fac908d991dd25f7bf40bcf03935b9c-integrity/node_modules/espurify/package.json",
    "readmeFilename": "README.md",
    "readme": "espurify\n================================\n\nClone AST without extra properties\n\n[![Build Status][ci-image]][ci-url]\n[![NPM version][npm-image]][npm-url]\n[![Code Style][style-image]][style-url]\n[![License][license-image]][license-url]\n\n\nAPI\n---------------------------------------\n\n### var purifiedAstClone = espurify(originalAst)\n\nReturns new clone of `originalAst` but without extra properties.\n\nLeaves properties defined in [The ESTree Spec](https://github.com/estree/estree) (formerly known as [Mozilla SpiderMonkey Parser API](https://speakerdeck.com/michaelficarra/spidermonkey-parser-api-a-standard-for-structured-js-representations)) only. Also note that extra informations (such as `loc`, `range` and `raw`) are eliminated too.\n\n#### Supported ECMAScript versions\n\n- [ES5](https://github.com/estree/estree/blob/master/es5.md)\n- [ES2015](https://github.com/estree/estree/blob/master/es2015.md)\n- [ES2016](https://github.com/estree/estree/blob/master/es2016.md)\n- [ES2017](https://github.com/estree/estree/blob/master/es2017.md)\n- [ES2018](https://github.com/estree/estree/blob/master/es2018.md)\n- [ES2019](https://github.com/estree/estree/blob/master/es2019.md)\n\n\n### var customizedCloneFunctionWithWhiteList = espurify.cloneWithWhitelist(whiteList)\n\nReturns customized function for cloning AST, with user-provided `whiteList`.\n\n\n### var purifiedAstClone = customizedCloneFunctionWithWhiteList(originalAst)\n\nReturns new clone of `originalAst` by customized function.\n\n\n#### whiteList\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | N/A           |\n\n`whiteList` is an object containing NodeType as keys and properties as values.\n\n```js\n{\n    ArrayExpression: ['type', 'elements'],\n    ArrayPattern: ['type', 'elements'],\n    ArrowFunctionExpression: ['type', 'id', 'params', 'body', 'generator', 'expression'],\n    AssignmentExpression: ['type', 'operator', 'left', 'right'],\n    ...\n```\n\n\n### var customizedCloneFunction = espurify.customize(options)\n\nReturns customized function for cloning AST, configured by custom `options`.\n\n\n### var purifiedAstClone = customizedCloneFunction(originalAst)\n\nReturns new clone of `originalAst` by customized function.\n\n\n\n#### options\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | `{}`          |\n\nConfiguration options. If not passed, default options will be used.\n\n\n#### options.extra\n\n| type                | default value |\n|:--------------------|:--------------|\n| `array` of `string` | null          |\n\nList of extra properties to be left in result AST. For example, functions returned by `espurify.customize({extra: ['raw']})` will preserve `raw` properties of `Literal`. Functions return by `espurify.customize({extra: ['loc', 'range']})` will preserve `loc` and `range` properties of each Node.\n\n\nEXAMPLE\n---------------------------------------\n\n```javascript\nvar espurify = require('espurify'),\n    estraverse = require('estraverse'),\n    esprima = require('esprima'),\n    syntax = estraverse.Syntax,\n    assert = require('assert');\n\nvar jsCode = 'assert(\"foo\")';\n\n// Adding extra informations to AST\nvar originalAst = esprima.parse(jsCode, {tolerant: true, loc: true, raw: true});\nestraverse.replace(originalAst, {\n    leave: function (currentNode, parentNode) {\n        if (currentNode.type === syntax.Literal && typeof currentNode.raw !== 'undefined') {\n            currentNode['x-verbatim-bar'] = {\n                content : currentNode.raw,\n                precedence : 18  // escodegen.Precedence.Primary\n            };\n            return currentNode;\n        } else {\n            return undefined;\n        }\n    }\n});\n\n\n// purify AST\nvar purifiedClone = espurify(originalAst);\n\n\n// original AST is not modified\nassert.deepEqual(originalAst, {\n  type: 'Program',\n  body: [\n    {\n      type: 'ExpressionStatement',\n      expression: {\n        type: 'CallExpression',\n        callee: {\n          type: 'Identifier',\n          name: 'assert',\n          loc: {\n            start: {\n              line: 1,\n              column: 0\n            },\n            end: {\n              line: 1,\n              column: 6\n            }\n          }\n        },\n        arguments: [\n          {\n            type: 'Literal',\n            value: 'foo',\n            raw: '\"foo\"',\n            loc: {\n              start: {\n                line: 1,\n                column: 7\n              },\n              end: {\n                line: 1,\n                column: 12\n              }\n            },\n            \"x-verbatim-bar\": {\n              content: '\"foo\"',\n              precedence: 18\n            }\n          }\n        ],\n        loc: {\n          start: {\n            line: 1,\n            column: 0\n          },\n          end: {\n            line: 1,\n            column: 13\n          }\n        }\n      },\n      loc: {\n        start: {\n          line: 1,\n          column: 0\n        },\n        end: {\n          line: 1,\n          column: 13\n        }\n      }\n    }\n  ],\n  loc: {\n    start: {\n      line: 1,\n      column: 0\n    },\n    end: {\n      line: 1,\n      column: 13\n    }\n  },\n  errors: []\n});\n\n\n// Extra properties are eliminated from cloned AST\nassert.deepEqual(purifiedClone, {\n    type: 'Program',\n    body: [\n        {\n            type: 'ExpressionStatement',\n            expression: {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: 'assert'\n                },\n                arguments: [\n                    {\n                        type: 'Literal',\n                        value: 'foo'\n                    }\n                ]\n            }\n        }\n    ]\n});\n```\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save espurify\n\nUse\n\n```javascript\nvar espurify = require('espurify');\n```\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](https://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [Renée Kooi](https://github.com/goto-bus-stop)\n* [Andreas Lind](https://github.com/papandreou)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/estools/espurify/blob/master/MIT-LICENSE.txt) license.\n\n\n[npm-url]: https://npmjs.org/package/espurify\n[npm-image]: https://badge.fury.io/js/espurify.svg\n\n[ci-image]: https://github.com/estools/espurify/workflows/Node.js%20CI/badge.svg\n[ci-url]: https://github.com/estools/espurify/actions?query=workflow%3A%22Node.js+CI%22\n\n[style-url]: https://github.com/Flet/semistandard\n[style-image]: https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg\n\n[license-url]: https://github.com/estools/espurify/blob/master/MIT-LICENSE.txt\n[license-image]: https://img.shields.io/badge/license-MIT-brightgreen.svg\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/espurify/-/espurify-2.1.1.tgz#afb043f22fac908d991dd25f7bf40bcf03935b9c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/espurify/-/espurify-2.1.1.tgz",
    "hash": "afb043f22fac908d991dd25f7bf40bcf03935b9c",
    "integrity": "sha512-zttWvnkhcDyGOhSH4vO2qCBILpdCMv/MX8lp4cqgRkQoDRGK2oZxi2GfWhlP2dIXmk7BaKeOTuzbHhyC68o8XQ==",
    "registry": "npm",
    "packageName": "espurify",
    "cacheIntegrity": "sha512-zttWvnkhcDyGOhSH4vO2qCBILpdCMv/MX8lp4cqgRkQoDRGK2oZxi2GfWhlP2dIXmk7BaKeOTuzbHhyC68o8XQ== sha1-r7BD8i+skI2ZHdJfe/QLzwOTW5w="
  },
  "registry": "npm",
  "hash": "afb043f22fac908d991dd25f7bf40bcf03935b9c"
}