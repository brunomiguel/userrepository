{
  "manifest": {
    "name": "ts-node",
    "version": "10.4.0",
    "description": "TypeScript execution environment and REPL for node.js, with source map support",
    "main": "dist/index.js",
    "exports": {
      ".": "./dist/index.js",
      "./package": "./package.json",
      "./package.json": "./package.json",
      "./dist/bin": "./dist/bin.js",
      "./dist/bin.js": "./dist/bin.js",
      "./dist/bin-transpile": "./dist/bin-transpile.js",
      "./dist/bin-transpile.js": "./dist/bin-transpile.js",
      "./dist/bin-script": "./dist/bin-script.js",
      "./dist/bin-script.js": "./dist/bin-script.js",
      "./dist/bin-cwd": "./dist/bin-cwd.js",
      "./dist/bin-cwd.js": "./dist/bin-cwd.js",
      "./register": "./register/index.js",
      "./register/files": "./register/files.js",
      "./register/transpile-only": "./register/transpile-only.js",
      "./register/type-check": "./register/type-check.js",
      "./esm": "./esm.mjs",
      "./esm.mjs": "./esm.mjs",
      "./esm/transpile-only": "./esm/transpile-only.mjs",
      "./esm/transpile-only.mjs": "./esm/transpile-only.mjs",
      "./transpilers/swc-experimental": "./transpilers/swc-experimental.js",
      "./node10/tsconfig.json": "./node10/tsconfig.json",
      "./node12/tsconfig.json": "./node12/tsconfig.json",
      "./node14/tsconfig.json": "./node14/tsconfig.json",
      "./node16/tsconfig.json": "./node16/tsconfig.json"
    },
    "types": "dist/index.d.ts",
    "bin": {
      "ts-node": "dist/bin.js",
      "ts-script": "dist/bin-script-deprecated.js",
      "ts-node-script": "dist/bin-script.js",
      "ts-node-cwd": "dist/bin-cwd.js",
      "ts-node-transpile-only": "dist/bin-transpile.js"
    },
    "files": [
      "/transpilers/",
      "/dist/",
      "!/dist/test",
      "/dist-raw/**.js",
      "/register/",
      "/esm/",
      "/esm.mjs",
      "/LICENSE",
      "/tsconfig.schema.json",
      "/tsconfig.schemastore-schema.json",
      "/node10/",
      "/node12/",
      "/node14/",
      "/node16/"
    ],
    "scripts": {
      "lint": "prettier --check .",
      "lint-fix": "prettier --write .",
      "clean": "rimraf dist tsconfig.schema.json tsconfig.schemastore-schema.json tsconfig.tsbuildinfo tests/ts-node-packed.tgz",
      "rebuild": "npm run clean && npm run build",
      "build": "npm run build-nopack && npm run build-pack",
      "build-nopack": "npm run build-tsc && npm run build-configSchema",
      "build-tsc": "tsc",
      "build-configSchema": "typescript-json-schema --topRef --refs --validationKeywords allOf --out tsconfig.schema.json tsconfig.build-schema.json TsConfigSchema && node --require ./register ./scripts/create-merged-schema",
      "build-pack": "node ./scripts/build-pack.js",
      "test-spec": "ava",
      "test-cov": "nyc ava",
      "test": "npm run build && npm run lint && npm run test-cov --",
      "test-local": "npm run lint-fix && npm run build-tsc && npm run build-pack && npm run test-spec --",
      "pre-debug": "npm run build-tsc && npm run build-pack",
      "coverage-report": "nyc report --reporter=lcov",
      "prepare": "npm run clean && npm run build-nopack",
      "api-extractor": "api-extractor run --local --verbose",
      "esm-usage-example": "npm run build-tsc && cd esm-usage-example && node --experimental-specifier-resolution node --loader ../esm.mjs ./index",
      "esm-usage-example2": "npm run build-tsc && cd tests && TS_NODE_PROJECT=./module-types/override-to-cjs/tsconfig.json node --loader ../esm.mjs ./module-types/override-to-cjs/test.cjs"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/TypeStrong/ts-node.git"
    },
    "keywords": [
      "typescript",
      "node",
      "runtime",
      "environment",
      "ts",
      "compiler"
    ],
    "author": {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com",
      "url": "http://blakeembrey.me"
    },
    "contributors": [
      {
        "name": "Andrew Bradley",
        "email": "cspotcode@gmail.com",
        "url": "https://github.com/cspotcode"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/TypeStrong/ts-node/issues"
    },
    "homepage": "https://typestrong.org/ts-node",
    "devDependencies": {
      "@microsoft/api-extractor": "^7.15.2",
      "@swc/core": ">=1.2.50",
      "@swc/wasm": ">=1.2.50",
      "@types/chai": "^4.0.4",
      "@types/diff": "^4.0.2",
      "@types/lodash": "^4.14.151",
      "@types/node": "13.13.5",
      "@types/proper-lockfile": "^4.1.2",
      "@types/proxyquire": "^1.3.28",
      "@types/react": "^16.0.2",
      "@types/rimraf": "^3.0.0",
      "@types/semver": "^7.1.0",
      "@yarnpkg/fslib": "^2.4.0",
      "ava": "^3.15.0",
      "axios": "^0.21.1",
      "chai": "^4.0.1",
      "expect": "^27.0.2",
      "get-stream": "^6.0.0",
      "lodash": "^4.17.15",
      "ntypescript": "^1.201507091536.1",
      "nyc": "^15.0.1",
      "prettier": "^2.2.1",
      "proper-lockfile": "^4.1.2",
      "proxyquire": "^2.0.0",
      "react": "^16.14.0",
      "rimraf": "^3.0.0",
      "semver": "^7.1.3",
      "throat": "^6.0.1",
      "typedoc": "^0.22.4",
      "typescript": "4.4.3",
      "typescript-json-schema": "^0.51.0",
      "util.promisify": "^1.0.1"
    },
    "peerDependencies": {
      "@swc/core": ">=1.2.50",
      "@swc/wasm": ">=1.2.50",
      "@types/node": "*",
      "typescript": ">=2.7"
    },
    "peerDependenciesMeta": {
      "@swc/core": {
        "optional": true
      },
      "@swc/wasm": {
        "optional": true
      }
    },
    "dependencies": {
      "@cspotcode/source-map-support": "0.7.0",
      "@tsconfig/node10": "^1.0.7",
      "@tsconfig/node12": "^1.0.7",
      "@tsconfig/node14": "^1.0.0",
      "@tsconfig/node16": "^1.0.2",
      "acorn": "^8.4.1",
      "acorn-walk": "^8.1.1",
      "arg": "^4.1.0",
      "create-require": "^1.1.0",
      "diff": "^4.0.1",
      "make-error": "^1.1.1",
      "yn": "3.1.1"
    },
    "prettier": {
      "singleQuote": true
    },
    "volta": {
      "node": "16.9.1",
      "npm": "6.14.15"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-ts-node-10.4.0-integrity/node_modules/ts-node/package.json",
    "readmeFilename": "README.md",
    "readme": "<!--\nBEFORE EDITING THIS README\nOur README.md is auto-generated by combining pages in website/docs and website/readme-sources\n\nIf you are sending a pull request to improve documentation, submit your changes\nin the source markdown files and we will generate the README from there.\n\nYou can build the readme with this command:\n\n    cd website && yarn build-readme\n-->\n\n# ![TypeScript Node](logo.svg?sanitize=true)\n\n[![NPM version](https://img.shields.io/npm/v/ts-node.svg?style=flat)](https://npmjs.org/package/ts-node)\n[![NPM downloads](https://img.shields.io/npm/dm/ts-node.svg?style=flat)](https://npmjs.org/package/ts-node)\n[![Build status](https://img.shields.io/github/workflow/status/TypeStrong/ts-node/Continuous%20Integration)](https://github.com/TypeStrong/ts-node/actions?query=workflow%3A%22Continuous+Integration%22)\n[![Test coverage](https://codecov.io/gh/TypeStrong/ts-node/branch/main/graph/badge.svg)](https://codecov.io/gh/TypeStrong/ts-node)\n\n> TypeScript execution and REPL for node.js, with source map and native ESM support.\n\nThe latest documentation can also be found on our website: <https://typestrong.org/ts-node>\n\n# Table of Contents\n\n*   [Overview](#overview)\n    *   [Features](#features)\n*   [Installation](#installation)\n*   [Usage](#usage)\n    *   [Shell](#shell)\n    *   [Shebang](#shebang)\n    *   [Programmatic](#programmatic)\n        *   [Developers](#developers)\n*   [Configuration](#configuration)\n    *   [CLI flags](#cli-flags)\n    *   [Via tsconfig.json (recommended)](#via-tsconfigjson-recommended)\n        *   [@tsconfig/bases](#tsconfigbases)\n        *   [Default config](#default-config)\n    *   [`node` flags](#node-flags)\n*   [Options](#options)\n    *   [Shell](#shell-1)\n    *   [TSConfig](#tsconfig)\n    *   [Typechecking](#typechecking)\n    *   [Transpilation](#transpilation)\n    *   [Diagnostics](#diagnostics)\n    *   [Advanced](#advanced)\n    *   [API](#api)\n*   [CommonJS vs native ECMAScript modules](#commonjs-vs-native-ecmascript-modules)\n    *   [CommonJS](#commonjs)\n    *   [Native ECMAScript modules](#native-ecmascript-modules)\n*   [Troubleshooting](#troubleshooting)\n    *   [Understanding configuration](#understanding-configuration)\n    *   [Understanding Errors](#understanding-errors)\n        *   [`TSError`](#tserror)\n        *   [`SyntaxError`](#syntaxerror)\n            *   [Unsupported JavaScript syntax](#unsupported-javascript-syntax)\n*   [Make it fast](#make-it-fast)\n    *   [Skip typechecking](#skip-typechecking)\n    *   [With typechecking](#with-typechecking)\n*   [Advanced](#advanced-1)\n    *   [How It Works](#how-it-works)\n        *   [Skipping `node_modules`](#skipping-node_modules)\n    *   [paths and baseUrl\n        ](#paths-and-baseurl)\n        *   [Why is this not built-in to ts-node?](#why-is-this-not-built-in-to-ts-node)\n    *   [Help! My Types Are Missing!](#help-my-types-are-missing)\n    *   [Third-party compilers](#third-party-compilers)\n    *   [Third-party transpilers](#third-party-transpilers)\n        *   [Bundled `swc` integration](#bundled-swc-integration)\n        *   [Writing your own integration](#writing-your-own-integration)\n    *   [Module type overrides](#module-type-overrides)\n        *   [Caveats](#caveats)\n*   [Recipes](#recipes)\n    *   [Watching and Restarting](#watching-and-restarting)\n    *   [AVA](#ava)\n        *   [CommonJS](#commonjs-1)\n        *   [Native ECMAScript modules](#native-ecmascript-modules-1)\n    *   [Gulp](#gulp)\n    *   [IntelliJ and Webstorm](#intellij-and-webstorm)\n    *   [Mocha](#mocha)\n        *   [Mocha 7 and newer](#mocha-7-and-newer)\n        *   [Mocha <=6](#mocha-6)\n    *   [Tape](#tape)\n    *   [Visual Studio Code](#visual-studio-code)\n    *   [Other](#other)\n*   [License](#license)\n\n# Overview\n\nts-node is a TypeScript execution engine and REPL for Node.js.\n\nIt JIT transforms TypeScript into JavaScript, enabling you to directly execute TypeScript on Node.js without precompiling.\nThis is accomplished by hooking node's module loading APIs, enabling it to be used seamlessly alongside other Node.js\ntools and libraries.\n\n## Features\n\n*   Automatic sourcemaps in stack traces\n*   Automatic `tsconfig.json` parsing\n*   Automatic defaults to match your node version\n*   Typechecking (optional)\n*   REPL\n*   Write standalone scripts\n*   Native ESM loader\n*   Use third-party transpilers\n*   Use custom transformers\n*   Integrate with test runners, debuggers, and CLI tools\n*   Compatible with pre-compilation for production\n\n![TypeScript REPL](website/static/img/screenshot.png)\n\n# Installation\n\n```shell\n# Locally in your project.\nnpm install -D typescript\nnpm install -D ts-node\n\n# Or globally with TypeScript.\nnpm install -g typescript\nnpm install -g ts-node\n\n# Depending on configuration, you may also need these\nnpm install -D tslib @types/node\n```\n\n**Tip:** Installing modules locally allows you to control and share the versions through `package.json`. ts-node will always resolve the compiler from `cwd` before checking relative to its own installation.\n\n# Usage\n\n## Shell\n\n```shell\n# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p -e '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho 'console.log(\"Hello, world!\")' | ts-node\n\n# Equivalent to ts-node --transpile-only\nts-node-transpile-only script.ts\n\n# Equivalent to ts-node --cwd-mode\nts-node-cwd script.ts\n```\n\n## Shebang\n\n```typescript\n#!/usr/bin/env ts-node\n\nconsole.log(\"Hello, world!\")\n```\n\nPassing CLI arguments via shebang is allowed on Mac but not Linux.  For example, the following will fail on Linux:\n\n    #!/usr/bin/env ts-node --files\n    // This shebang is not portable.  It only works on Mac\n\nInstead, specify all ts-node options in your `tsconfig.json`.\n\n## Programmatic\n\nYou can require ts-node and register the loader for future requires by using `require('ts-node').register({ /* options */ })`. You can also use file shortcuts - `node -r ts-node/register` or `node -r ts-node/register/transpile-only` - depending on your preferences.\n\n**Note:** If you need to use advanced node.js CLI arguments (e.g. `--inspect`), use them with `node -r ts-node/register` instead of ts-node's CLI.\n\n### Developers\n\nts-node exports a `create()` function that can be used to initialize a TypeScript compiler that isn't registered to `require.extensions`, and it uses the same code as `register`.\n\n# Configuration\n\nts-node supports a variety of options which can be specified via `tsconfig.json`, as CLI flags, as environment variables, or programmatically.\n\nFor a complete list, see [Options](#options).\n\n## CLI flags\n\nts-node CLI flags must come *before* the entrypoint script. For example:\n\n```shell\n$ ts-node --project tsconfig-dev.json say-hello.ts Ronald\nHello, Ronald!\n```\n\n## Via tsconfig.json (recommended)\n\nts-node automatically finds and loads `tsconfig.json`.  Most ts-node options can be specified in a `\"ts-node\"` object using their programmatic, camelCase names. We recommend this because it works even when you cannot pass CLI flags, such as `node --require ts-node/register` and when using shebangs.\n\nUse `--skip-project` to skip loading the `tsconfig.json`.  Use `--project` to explicitly specify the path to a `tsconfig.json`.\n\nWhen searching, it is resolved using [the same search behavior as `tsc`](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html). By default, this search is performed relative to the entrypoint script. In `--cwd-mode` or if no entrypoint is specified -- for example when using the REPL -- the search is performed relative to `--cwd` / `process.cwd()`.\n\nYou can use this sample configuration as a starting point:\n\n```jsonc title=\"tsconfig.json\"\n{\n  // This is an alias to @tsconfig/node12: https://github.com/tsconfig/bases\n  \"extends\": \"ts-node/node12/tsconfig.json\",\n\n  // Most ts-node options can be specified here using their programmatic names.\n  \"ts-node\": {\n    // It is faster to skip typechecking.\n    // Remove if you want ts-node to do typechecking.\n    \"transpileOnly\": true,\n\n    \"files\": true,\n\n    \"compilerOptions\": {\n      // compilerOptions specified here will override those declared below,\n      // but *only* in ts-node.  Useful if you want ts-node and tsc to use\n      // different options with a single tsconfig.json.\n    }\n  },\n  \"compilerOptions\": {\n    // typescript options here\n  }\n}\n```\n\nOur bundled [JSON schema](https://unpkg.com/browse/ts-node@latest/tsconfig.schema.json) lists all compatible options.\n\n### @tsconfig/bases\n\n[@tsconfig/bases](https://github.com/tsconfig/bases) maintains recommended configurations for several node versions.\nAs a convenience, these are bundled with ts-node.\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"extends\": \"ts-node/node16/tsconfig.json\",\n\n  // Or install directly with `npm i -D @tsconfig/node16`\n  \"extends\": \"@tsconfig/node16/tsconfig.json\",\n}\n```\n\n### Default config\n\nIf no `tsconfig.json` is loaded from disk, ts-node will use the newest recommended defaults from\n[@tsconfig/bases](https://github.com/tsconfig/bases/) compatible with your `node` and `typescript` versions.\nWith the latest `node` and `typescript`, this is [`@tsconfig/node16`](https://github.com/tsconfig/bases/blob/master/bases/node16.json).\n\nOlder versions of `typescript` are incompatible with `@tsconfig/node16`.  In those cases we will use an older default configuration.\n\nWhen in doubt, `ts-node --show-config` will log the configuration being used, and `ts-node -vv` will log `node` and `typescript` versions.\n\n## `node` flags\n\n[`node` flags](https://nodejs.org/api/cli.html) must be passed directly to `node`; they cannot be passed to the ts-node binary nor can they be specified in `tsconfig.json`\n\nWe recommend using the [`NODE_OPTIONS`](https://nodejs.org/api/cli.html#cli_node_options_options) environment variable to pass options to `node`.\n\n```shell\nNODE_OPTIONS='--trace-deprecation --abort-on-uncaught-exception' ts-node ./index.ts\n```\n\nAlternatively, you can invoke `node` directly and install ts-node via `--require`/`-r`\n\n```shell\nnode --trace-deprecation --abort-on-uncaught-exception -r ts-node/register ./index.ts\n```\n\n# Options\n\n`ts-node` supports `--print` (`-p`), `--eval` (`-e`), `--require` (`-r`) and `--interactive` (`-i`) similar to the [node.js CLI options](https://nodejs.org/api/cli.html).\n\n*Environment variables, where available, are in `ALL_CAPS`*\n\n## Shell\n\n*   `-h, --help`   Prints the help text\n*   `-v, --version`   Prints the version. `-vv` prints node and typescript compiler versions, too\n*   `-e, --eval`   Evaluate code\n*   `-p, --print`   Print result of `--eval`\n*   `-i, --interactive`   Opens the REPL even if stdin does not appear to be a terminal\n\n## TSConfig\n\n*   `-P, --project [path]`   Path to TypeScript JSON project file <br/>*Environment:* `TS_NODE_PROJECT`\n*   `--skip-project`   Skip project config resolution and loading <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_SKIP_PROJECT`\n*   `-c, --cwd-mode`   Resolve config relative to the current directory instead of the directory of the entrypoint script\n*   `-O, --compiler-options [opts]`   JSON object to merge with compiler options <br/>*Environment:* `TS_NODE_COMPILER_OPTIONS`\n*   `--show-config`   Print resolved `tsconfig.json`, including `ts-node` options, and exit\n\n## Typechecking\n\n*   `-T, --transpile-only`   Use TypeScript's faster `transpileModule` <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_TRANSPILE_ONLY`\n*   `--type-check`   Opposite of `--transpile-only` <br/>*Default:* `true`<br/>*Environment:* `TS_NODE_TYPE_CHECK`\n*   `-H, --compiler-host`   Use TypeScript's compiler host API <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_COMPILER_HOST`\n*   `--files`   Load `files`, `include` and `exclude` from `tsconfig.json` on startup <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_FILES`\n*   `-D, --ignore-diagnostics [code]`   Ignore TypeScript warnings by diagnostic code <br/>*Environment:* `TS_NODE_IGNORE_DIAGNOSTICS`\n\n## Transpilation\n\n*   `-I, --ignore [pattern]`   Override the path patterns to skip compilation <br/>*Default:* `/node_modules/` <br/>*Environment:* `TS_NODE_IGNORE`\n*   `--skip-ignore`   Skip ignore checks <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_SKIP_IGNORE`\n*   `-C, --compiler [name]`   Specify a custom TypeScript compiler <br/>*Default:* `typescript` <br/>*Environment:* `TS_NODE_COMPILER`\n*   `--transpiler [name]`   Specify a third-party, non-typechecking transpiler\n*   `--prefer-ts-exts`   Re-order file extensions so that TypeScript imports are preferred <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_PREFER_TS_EXTS`\n\n## Diagnostics\n\n*   `--log-error`   Logs TypeScript errors to stderr instead of throwing exceptions <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_LOG_ERROR`\n*   `--pretty`   Use pretty diagnostic formatter <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_PRETTY`\n*   `TS_NODE_DEBUG` Enable debug logging<br/>\n\n## Advanced\n\n*   `-r, --require [path]`   Require a node module before execution\n*   `--cwd`   Behave as if invoked in this working directory <br/>*Default:* `process.cwd()`<br/>*Environment:* `TS_NODE_CWD`\n*   `--emit`   Emit output files into `.ts-node` directory <br/>*Default:* `false` <br/>*Environment:* `TS_NODE_EMIT`\n*   `--scope`  Scope compiler to files within `scopeDir`.  Anything outside this directory is ignored. <br/>\\*Default: `false` <br/>*Environment:* `TS_NODE_SCOPE`\n*   `--scopeDir` Directory within which compiler is limited when `scope` is enabled. <br/>*Default:* First of: `tsconfig.json` \"rootDir\" if specified, directory containing `tsconfig.json`, or cwd if no `tsconfig.json` is loaded.<br/>*Environment:* `TS_NODE_SCOPE_DIR`\n*   `moduleType`  Override the module type of certain files, ignoring the `package.json` `\"type\"` field.  See [Module type overrides](#module-type-overrides) for details.<br/>*Default:* obeys `package.json` `\"type\"` and `tsconfig.json` `\"module\"` <br/>*Can only be specified via `tsconfig.json` or API.*\n*   `TS_NODE_HISTORY` Path to history file for REPL <br/>*Default:* `~/.ts_node_repl_history`<br/>\n*   `--no-experimental-repl-await` Disable top-level await in REPL.  Equivalent to node's [`--no-experimental-repl-await`](https://nodejs.org/api/cli.html#cli_no_experimental_repl_await)<br/>*Default:* Enabled if TypeScript version is 3.8 or higher and target is ES2018 or higher.<br/>*Environment:* `TS_NODE_EXPERIMENTAL_REPL_AWAIT` set `false` to disable\n\n## API\n\nThe API includes [additional options](https://typestrong.org/ts-node/api/interfaces/RegisterOptions.html) not shown here.\n\n# CommonJS vs native ECMAScript modules\n\nTypeScript is almost always written using modern `import` syntax, but it is also transformed before being executed by the underlying runtime.  You can choose to either transform to CommonJS or to preserve the native `import` syntax, using node's native ESM support.  Configuration is different for each.\n\nHere is a brief comparison of the two.\n\n| CommonJS | Native ECMAScript modules |\n|---|---|\n| Write native `import` syntax | Write native `import` syntax |\n| Transforms `import` into `require()` | Does not transform `import` |\n| Node executes scripts using the classic [CommonJS loader](https://nodejs.org/dist/latest-v16.x/docs/api/modules.html) | Node executes scripts using the new [ESM loader](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html) |\n| Use any of:<br/>ts-node CLI<br/>`node -r ts-node/register`<br/>`NODE_OPTIONS=\"ts-node/register\" node`<br/>`require('ts-node').register({/* options */})` | Must use the ESM loader via:<br/>`node --loader ts-node/esm`<br/>`NODE_OPTIONS=\"--loader ts-node/esm\" node` |\n\n## CommonJS\n\nTransforming to CommonJS is typically simpler and more widely supported because it is older.  You must remove [`\"type\": \"module\"`](https://nodejs.org/api/packages.html#packages_type) from `package.json` and set [`\"module\": \"CommonJS\"`](https://www.typescriptlang.org/tsconfig/#module) in `tsconfig.json`.\n\n```jsonc title=\"package.json\"\n{\n  // This can be omitted; commonjs is the default\n  \"type\": \"commonjs\"\n}\n```\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"module\": \"CommonJS\"\n  }\n}\n```\n\nIf you must keep `\"module\": \"ESNext\"` for `tsc`, webpack, or another build tool, you can set an override for ts-node.\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\"\n  },\n  \"ts-node\": {\n    \"compilerOptions\": {\n      \"module\": \"CommonJS\"\n    }\n  }\n}\n```\n\n## Native ECMAScript modules\n\n[Node's ESM loader hooks](https://nodejs.org/api/esm.html#esm_experimental_loaders) are [**experimental**](https://nodejs.org/api/documentation.html#documentation_stability_index) and subject to change. ts-node's ESM support is as stable as possible, but it relies on APIs which node can *and will* break in new versions of node.  Thus it is not recommended for production.\n\nFor complete usage, limitations, and to provide feedback, see [#1007](https://github.com/TypeStrong/ts-node/issues/1007).\n\nYou must set [`\"type\": \"module\"`](https://nodejs.org/api/packages.html#packages_type) in `package.json` and [`\"module\": \"ESNext\"`](https://www.typescriptlang.org/tsconfig/#module) in `tsconfig.json`.\n\n```jsonc title=\"package.json\"\n{\n  \"type\": \"module\"\n}\n```\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\" // or ES2015, ES2020\n  }\n}\n```\n\n# Troubleshooting\n\n## Understanding configuration\n\nts-node uses sensible default configurations to reduce boilerplate while still respecting `tsconfig.json` if you\nhave one.  If you are unsure which configuration is used, you can log it with `ts-node --show-config`.  This is similar to\n`tsc --showConfig` but includes `\"ts-node\"` options as well.\n\nts-node also respects your locally-installed `typescript` version, but global installations fallback to the globally-installed\n`typescript`.  If you are unsure which versions are used, `ts-node -vv` will log them.\n\n```shell\n$ ts-node -vv\nts-node v10.0.0\nnode v16.1.0\ncompiler v4.2.2\n\n$ ts-node --show-config\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"lib\": [\n      \"es6\",\n      \"dom\"\n    ],\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./.ts-node\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"declaration\": false,\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n    \"types\": [\n      \"node\"\n    ],\n    \"stripInternal\": true,\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"importsNotUsedAsValues\": \"error\",\n    \"inlineSourceMap\": false,\n    \"noEmit\": false\n  },\n  \"ts-node\": {\n    \"cwd\": \"/d/project\",\n    \"projectSearchDir\": \"/d/project\",\n    \"require\": [],\n    \"project\": \"/d/project/tsconfig.json\"\n  }\n}\n```\n\n## Understanding Errors\n\nIt is important to differentiate between errors from ts-node, errors from the TypeScript compiler, and errors from `node`.  It is also important to understand when errors are caused by a type error in your code, a bug in your code, or a flaw in your configuration.\n\n### `TSError`\n\nType errors from the compiler are thrown as a `TSError`.  These are the same as errors you get from `tsc`.\n\n### `SyntaxError`\n\nAny error that is not a `TSError` is from node.js (e.g. `SyntaxError`), and cannot be fixed by TypeScript or ts-node. These are bugs in your code or configuration.\n\n#### Unsupported JavaScript syntax\n\nYour version of `node` may not support all JavaScript syntax supported by TypeScript.  The compiler must transform this syntax via \"downleveling,\" which is controlled by\nthe [tsconfig `\"target\"` option](https://www.typescriptlang.org/tsconfig#target).  Otherwise your code will compile fine, but node will throw a `SyntaxError`.\n\nFor example, `node` 12 does not understand the `?.` optional chaining operator.  If you use `\"target\": \"esnext\"`, then the following TypeScript syntax:\n\n```typescript\nconst bar: string | undefined = foo?.bar;\n```\n\nwill compile into this JavaScript:\n\n```javascript\nconst a = foo?.bar;\n```\n\nWhen you try to run this code, node 12 will throw a `SyntaxError`.  To fix this, you must switch to `\"target\": \"es2019\"` or lower so TypeScript transforms `?.` into something `node` can understand.\n\n# Make it fast\n\nThese tricks will make ts-node faster.\n\n## Skip typechecking\n\nIt is often better to use `tsc --noEmit` to typecheck once before your tests run or as a lint step. In these cases, ts-node can skip typechecking.\n\n*   Enable [`transpileOnly`](#options) to skip typechecking\n*   Use our [`swc` integration](#bundled-swc-integration)\n    *   This is by far the fastest option\n\n## With typechecking\n\n*   Avoid dynamic `require()` which may trigger repeated typechecking; prefer `import`\n*   Try with and without `--files`; one may be faster depending on your project\n*   Check `tsc --showConfig`; make sure all executed files are included\n*   Enable [`skipLibCheck`](https://www.typescriptlang.org/tsconfig#skipLibCheck)\n*   Set a [`types`](https://www.typescriptlang.org/tsconfig#types) array to avoid loading unnecessary `@types`\n\n# Advanced\n\n## How It Works\n\nts-node works by registering hooks for `.ts`, `.tsx`, `.js`, and/or `.jsx` extensions.\n\nVanilla `node` loads `.js` by reading code from disk and executing it.  Our hook runs in the middle, transforming code from TypeScript to JavaScript and passing the result to `node` for execution.  This transformation will respect your `tsconfig.json` as if you had compiled via `tsc`.\n\n`.js` and `.jsx` are only transformed when [`allowJs`](https://www.typescriptlang.org/docs/handbook/compiler-options.html#compiler-options) is enabled.\n\n`.tsx` and `.jsx` are only transformed when [`jsx`](https://www.typescriptlang.org/docs/handbook/jsx.html) is enabled.\n\n> **Warning:** if a file is ignored or its file extension is not registered, node will either fail to resolve the file or will attempt to execute it as JavaScript without any transformation.  This may cause syntax errors or other failures, because node does not understand TypeScript type syntax nor bleeding-edge ECMAScript features.\n\n> **Warning:** When ts-node is used with `allowJs`, all non-ignored JavaScript files are transformed using the TypeScript compiler.\n\n### Skipping `node_modules`\n\nBy default, **TypeScript Node** avoids compiling files in `/node_modules/` for three reasons:\n\n1.  Modules should always be published in a format node.js can consume\n2.  Transpiling the entire dependency tree will make your project slower\n3.  Differing behaviours between TypeScript and node.js (e.g. ES2015 modules) can result in a project that works until you decide to support a feature natively from node.js\n\n## paths and baseUrl&#xA;\n\nYou can use ts-node together with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths) to load modules according to the `paths` section in `tsconfig.json`.\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"ts-node\": {\n    // Do not forget to `npm i -D tsconfig-paths`\n    \"require\": [\"tsconfig-paths/register\"]\n  }\n}\n```\n\n### Why is this not built-in to ts-node?\n\nThe official TypeScript Handbook explains the intended purpose for `\"paths\"` in [\"Additional module resolution flags\"](https://www.typescriptlang.org/docs/handbook/module-resolution.html#additional-module-resolution-flags).\n\n> The TypeScript compiler has a set of additional flags to *inform* the compiler of transformations that are expected to happen to the sources to generate the final output.\n>\n> It is important to note that the compiler will not perform any of these transformations; it just uses these pieces of information to guide the process of resolving a module import to its definition file.\n\nThis means `\"paths\"` are intended to describe mappings that the build tool or runtime *already* performs, not to tell the build tool or\nruntime how to resolve modules.  In other words, they intend us to write our imports in a way `node` already understands.  For this reason, ts-node does not modify `node`'s module resolution behavior to implement `\"paths\"` mappings.\n\n## Help! My Types Are Missing!\n\nts-node does *not* use `files`, `include` or `exclude`, by default. This is because a large majority projects do not use all of the files in a project directory (e.g. `Gulpfile.ts`, runtime vs tests) and parsing every file for types slows startup time. Instead, ts-node starts with the script file (e.g. `ts-node index.ts`) and TypeScript resolves dependencies based on imports and references.\n\nFor global definitions, you can use the `typeRoots` compiler option.  This requires that your type definitions be structured as type packages (not loose TypeScript definition files). More details on how this works can be found in the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types).\n\nExample `tsconfig.json`:\n\n```jsonc\n{\n  \"compilerOptions\": {\n    \"typeRoots\" : [\"./node_modules/@types\", \"./typings\"]\n  }\n}\n```\n\nExample project structure:\n\n```text\n<project_root>/\n-- tsconfig.json\n-- typings/\n  -- <module_name>/\n    -- index.d.ts\n```\n\nExample module declaration file:\n\n```typescript\ndeclare module '<module_name>' {\n    // module definitions go here\n}\n```\n\nFor module definitions, you can use [`paths`](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping):\n\n```jsonc\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"custom-module-type\": [\"types/custom-module-type\"]\n    }\n  }\n}\n```\n\nAn alternative approach for definitions of third-party libraries are [triple-slash directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html). This may be helpful if you prefer not to change your TypeScript `compilerOptions` or structure your custom type definitions when using `typeRoots`. Below is an example of the triple-slash directive as a relative path within your project:\n\n```typescript\n/// <reference types=\"./types/untyped_js_lib\" />\nimport UntypedJsLib from \"untyped_js_lib\"\n```\n\n**Tip:** If you *must* use `files`, `include`, or `exclude`, enable `--files` flags or set `TS_NODE_FILES=true`.\n\n## Third-party compilers\n\nSome projects require a patched typescript compiler which adds additional features.  For example, [`ttypescript`](https://github.com/cevek/ttypescript/tree/master/packages/ttypescript) and [`ts-patch`](https://github.com/nonara/ts-patch#readme)\nadd the ability to configure custom transformers.  These are drop-in replacements for the vanilla `typescript` module and\nimplement the same API.\n\nFor example, to use `ttypescript` and `ts-transformer-keys`, add this to your `tsconfig.json`:\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"ts-node\": {\n    // This can be omitted when using ts-patch\n    \"compiler\": \"ttypescript\"\n  },\n  \"compilerOptions\": {\n    // plugin configuration is the same for both ts-patch and ttypescript\n    \"plugins\": [\n      { \"transform\": \"ts-transformer-keys/transformer\" }\n    ]\n  }\n}\n```\n\n## Third-party transpilers\n\nIn transpile-only mode, we skip typechecking to speed up execution time.  You can go a step further and use a\nthird-party transpiler to transform TypeScript into JavaScript even faster.  You will still benefit from\nts-node's automatic `tsconfig.json` discovery, sourcemap support, and global ts-node CLI.  Integrations\ncan automatically derive an appropriate configuration from your existing `tsconfig.json` which simplifies project\nboilerplate.\n\n> **What is the difference between a compiler and a transpiler?**\n>\n> For our purposes, a compiler implements TypeScript's API and can perform typechecking.\n> A third-party transpiler does not.  Both transform TypeScript into JavaScript.\n\n### Bundled `swc` integration\n\nWe have bundled an experimental `swc` integration.\n\n[`swc`](https://swc.rs) is a TypeScript-compatible transpiler implemented in Rust.  This makes it an order of magnitude faster\nthan `transpileModule`.\n\nTo use it, first install `@swc/core` or `@swc/wasm`.  If using `importHelpers`, also install `@swc/helpers`.  If `target` is less than \"es2015\" and using either `async`/`await` or generator functions, also install `regenerator-runtime`.\n\n```shell\nnpm i -D @swc/core @swc/helpers regenerator-runtime\n```\n\nThen add the following to your `tsconfig.json`.\n\n```jsonc title=\"tsconfig.json\"\n{\n  \"ts-node\": {\n    \"transpileOnly\": true,\n    \"transpiler\": \"ts-node/transpilers/swc-experimental\"\n  }\n}\n```\n\n> `swc` uses `@swc/helpers` instead of `tslib`.  If you have enabled `importHelpers`, you must also install `@swc/helpers`.\n\n### Writing your own integration\n\nTo write your own transpiler integration, check our [API docs](https://typestrong.org/ts-node/api/interfaces/TranspilerModule.html).\n\nIntegrations are `require()`d, so they can be published to npm.  The module must export a `create` function matching the\n[`TranspilerModule`](https://typestrong.org/ts-node/api/interfaces/TranspilerModule.html) interface.\n\n## Module type overrides\n\nWhen deciding between CommonJS and native ECMAScript modules, ts-node defaults to matching vanilla `node` and `tsc`\nbehavior.  This means TypeScript files are transformed according to your `tsconfig.json` `\"module\"` option and executed\naccording to node's rules for the `package.json` `\"type\"` field.\n\nIn some projects you may need to override this behavior for some files.  For example, in a webpack\nproject, you may have `package.json` configured with `\"type\": \"module\"` and `tsconfig.json` with\n`\"module\": \"esnext\"`.  However, webpack uses our CommonJS hook to execute your `webpack.config.ts`,\nso you need to force your webpack config and any supporting scripts to execute as CommonJS.\n\nIn these situations, our `moduleTypes` option lets you override certain files, forcing execution as\nCommonJS or ESM.  Node supports similar overriding via `.cjs` and `.mjs` file extensions, but `.ts` files cannot use them.\n`moduleTypes` achieves the same effect, and *also* overrides your `tsconfig.json` `\"module\"` config appropriately.\n\nThe following example tells ts-node to execute a webpack config as CommonJS:\n\n```jsonc title=tsconfig.json\n{\n  \"ts-node\": {\n    \"transpileOnly\": true,\n    \"moduleTypes\": {\n      \"webpack.config.ts\": \"cjs\",\n      // Globs are also supported with the same behavior as tsconfig \"include\"\n      \"webpack-config-scripts/**/*\": \"cjs\"\n    }\n  },\n  \"compilerOptions\": {\n    \"module\": \"es2020\",\n    \"target\": \"es2020\"\n  }\n}\n```\n\nEach key is a glob pattern with the same syntax as tsconfig's `\"include\"` array.\nWhen multiple patterns match the same file, the last pattern takes precedence.\n\n*   `cjs` overrides matches files to compile and execute as CommonJS.\n*   `esm` overrides matches files to compile and execute as native ECMAScript modules.\n*   `package` resets either of the above to default behavior, which obeys `package.json` `\"type\"` and `tsconfig.json` `\"module\"` options.\n\n### Caveats\n\nFiles with an overridden module type are transformed with the same limitations as [`isolatedModules`](https://www.typescriptlang.org/tsconfig#isolatedModules).  This will only affect rare cases such as using `const enum`s with [`preserveConstEnums`](https://www.typescriptlang.org/tsconfig#preserveConstEnums) disabled.\n\nThis feature is meant to facilitate scenarios where normal `compilerOptions` and `package.json` configuration is not possible.  For example, a `webpack.config.ts` cannot be given its own `package.json` to override `\"type\"`.  Wherever possible you should favor using traditional `package.json` and `tsconfig.json` configurations.\n\n# Recipes\n\n## Watching and Restarting\n\n**TypeScript Node** compiles source code via `require()`, watching files and code reloads are out of scope for the project. If you want to restart the `ts-node` process on file change, existing node.js tools such as [nodemon](https://github.com/remy/nodemon), [onchange](https://github.com/Qard/onchange) and [node-dev](https://github.com/fgnass/node-dev) work.\n\nThere's also [`ts-node-dev`](https://github.com/whitecolor/ts-node-dev), a modified version of [`node-dev`](https://github.com/fgnass/node-dev) using `ts-node` for compilation that will restart the process on file change.\n\n## AVA\n\nAssuming you are configuring AVA via your `package.json`, add one of the following configurations.\n\n### CommonJS\n\nUse this configuration if your `package.json` does not have `\"type\": \"module\"`.\n\n```jsonc title\"package.json\"\n{\n  \"ava\": {\n    \"extensions\": [\n      \"ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ]\n  }\n}\n```\n\n### Native ECMAScript modules\n\nThis configuration is necessary if your `package.json` has `\"type\": \"module\"`.\n\n```jsonc title\"package.json\"\n{\n  \"ava\": {\n    \"extensions\": {\n      \"ts\": \"module\"\n    },\n    \"nonSemVerExperiments\": {\n      \"configurableModuleFormat\": true\n    },\n    \"nodeArguments\": [\n      \"--loader=ts-node/esm\"\n    ]\n  }\n}\n```\n\n## Gulp\n\nts-node support is built-in to gulp.\n\n```sh\n# Create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\nSee also: https://gulpjs.com/docs/en/getting-started/javascript-and-gulpfiles#transpilation\n\n## IntelliJ and Webstorm\n\nCreate a new Node.js configuration and add `-r ts-node/register` to \"Node parameters.\"\n\n**Note:** If you are using the `--project <tsconfig.json>` command line argument as per the [Configuration Options](#configuration), and want to apply this same behavior when launching in IntelliJ, specify under \"Environment Variables\": `TS_NODE_PROJECT=<tsconfig.json>`.\n\n## Mocha\n\n### Mocha 7 and newer\n\n```shell\nmocha --require ts-node/register --extensions ts,tsx --watch --watch-files src 'tests/**/*.{ts,tsx}' [...args]\n```\n\nOr specify options via your mocha config file.\n\n```jsonc title=\".mocharc.json\"\n{\n  // Specify \"require\" for CommonJS\n  \"require\": \"ts-node/register\",\n  // Specify \"loader\" for native ESM\n  \"loader\": \"ts-node/esm\",\n  \"extensions\": [\"ts\", \"tsx\"],\n  \"spec\": [\n    \"tests/**/*.spec.*\"\n  ],\n  \"watch-files\": [\n    \"src\"\n  ]\n}\n```\n\nSee also: https://mochajs.org/#configuring-mocha-nodejs\n\n### Mocha <=6\n\n```shell\nmocha --require ts-node/register --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\" [...args]\n```\n\n**Note:** `--watch-extensions` is only used in `--watch` mode.\n\n## Tape\n\n```shell\nts-node node_modules/tape/bin/tape [...args]\n```\n\n## Visual Studio Code\n\nCreate a new Node.js debug configuration, add `-r ts-node/register` to node args and move the `program` to the `args` list (so VS Code doesn't look for `outFiles`).\n\n```jsonc title=\".vscode/launch.json\"\n{\n    \"configurations\": [{\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"name\": \"Launch Program\",\n        \"runtimeArgs\": [\n            \"-r\",\n            \"ts-node/register\"\n        ],\n        \"args\": [\n            \"${workspaceFolder}/src/index.ts\"\n        ]\n    }],\n}\n```\n\n**Note:** If you are using the `--project <tsconfig.json>` command line argument as per the [Configuration Options](#configuration), and want to apply this same behavior when launching in VS Code, add an \"env\" key into the launch configuration: `\"env\": { \"TS_NODE_PROJECT\": \"<tsconfig.json>\" }`.\n\n## Other\n\nIn many cases, setting [`NODE_OPTIONS`](https://nodejs.org/api/cli.html#cli_node_options_options) will enable `ts-node` within other node tools, child processes, and worker threads.\n\n```shell\nNODE_OPTIONS=\"-r ts-node/register\"\n```\n\nOr, if you require native ESM support:\n\n```shell\nNODE_OPTIONS=\"--loader ts-node/esm\"\n```\n\nThis tells any node processes which receive this environment variable to install `ts-node`'s hooks before executing other code.\n\n# License\n\nts-node is licensed under the MIT license.  [MIT](https://github.com/TypeStrong/ts-node/blob/main/LICENSE)\n\nts-node includes source code from Node.js which is licensed under the MIT license.  [Node.js license information](https://raw.githubusercontent.com/nodejs/node/master/LICENSE)\n\nts-node includes source code from the TypeScript compiler which is licensed under the Apache License 2.0.  [TypeScript license information](https://github.com/microsoft/TypeScript/blob/master/LICENSE.txt)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Blake Embrey (hello@blakeembrey.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.4.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ts-node/-/ts-node-10.4.0.tgz",
    "hash": "",
    "integrity": "sha512-g0FlPvvCXSIO1JDF6S232P5jPYqBkRL9qly81ZgAOSU7rwI0stphCgd2kLiCrU9DjQCrJMWEqcNSjQL02s6d8A==",
    "registry": "npm",
    "packageName": "ts-node",
    "cacheIntegrity": "sha512-g0FlPvvCXSIO1JDF6S232P5jPYqBkRL9qly81ZgAOSU7rwI0stphCgd2kLiCrU9DjQCrJMWEqcNSjQL02s6d8A== sha1-aA+IlFiF9ObPRQ5/DWIj3UBIlfc="
  },
  "registry": "npm",
  "hash": "8341653efbc25d220ed490c5e92db7d8fe633d8a819112fdaa5cbcd5980039253baf0234b2da610a077690b882ad4f438d00ab24c584a9c3528d02f4dace9df0"
}