{
  "manifest": {
    "name": "trough",
    "version": "2.1.0",
    "description": "Middleware: a channel used to convey a liquid",
    "license": "MIT",
    "keywords": [
      "middleware",
      "ware"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/wooorm/trough.git"
    },
    "bugs": {
      "url": "https://github.com/wooorm/trough/issues"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/wooorm"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.d.ts",
      "index.js"
    ],
    "devDependencies": {
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^10.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.48.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "capitalized-comments": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "#": "some nessecary `any`s",
      "ignoreFiles": [
        "index.js",
        "index.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-trough-2.1.0-0f7b511a4fde65a46f18477ab38849b22c554876-integrity/node_modules/trough/package.json",
    "readmeFilename": "readme.md",
    "readme": "# trough\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\n`trough` is middleware.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`trough()`](#trough-1)\n    *   [`wrap(middleware, callback)(‚Ä¶input)`](#wrapmiddleware-callbackinput)\n    *   [`Trough`](#trough-2)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\n`trough` is like [`ware`][ware] with less sugar.\nMiddleware functions can also change the input of the next.\n\nThe word **trough** (`/tr√¥f/`) means a channel used to convey a liquid.\n\n## When should I use this?\n\nYou can use this package when you‚Äôre building something that accepts ‚Äúplugins‚Äù,\nwhich are functions, that can be sync or async, promises or callbacks.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, or 16.0+), install with [npm][]:\n\n```sh\nnpm install trough\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {trough} from \"https://esm.sh/trough@2\"\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {trough} from \"https://esm.sh/trough@2?bundle\"\n</script>\n```\n\n## Use\n\n```js\nimport process from 'node:process'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {trough} from 'trough'\n\nconst pipeline = trough()\n  .use(function (fileName) {\n    console.log('Checking‚Ä¶ ' + fileName)\n  })\n  .use(function (fileName) {\n    return path.join(process.cwd(), fileName)\n  })\n  .use(function (filePath, next) {\n    fs.stat(filePath, function (error, stats) {\n      next(error, {filePath, stats})\n    })\n  })\n  .use(function (ctx, next) {\n    if (ctx.stats.isFile()) {\n      fs.readFile(ctx.filePath, next)\n    } else {\n      next(new Error('Expected file'))\n    }\n  })\n\npipeline.run('readme.md', console.log)\npipeline.run('node_modules', console.log)\n```\n\nYields:\n\n```txt\nChecking‚Ä¶ readme.md\nChecking‚Ä¶ node_modules\nError: Expected file\n    at ~/example.js:22:12\n    at wrapped (~/node_modules/trough/index.js:111:16)\n    at next (~/node_modules/trough/index.js:62:23)\n    at done (~/node_modules/trough/index.js:145:7)\n    at ~/example.js:15:7\n    at FSReqCallback.oncomplete (node:fs:199:5)\nnull <Buffer 23 20 74 72 6f 75 67 68 0a 0a 5b 21 5b 42 75 69 6c 64 5d 5b 62 75 69 6c 64 2d 62 61 64 67 65 5d 5d 5b 62 75 69 6c 64 5d 0a 5b 21 5b 43 6f 76 65 72 61 ... 7994 more bytes>\n```\n\n## API\n\nThis package exports the identifiers `trough` and `wrap`.\nThere is no default export.\n\n### `trough()`\n\nCreate a new [`Trough`][trough].\n\n### `wrap(middleware, callback)(‚Ä¶input)`\n\nCall `middleware` with all input.\nIf `middleware` accepts more arguments than given in input, an extra `done`\nfunction is passed in after the input when calling it.\nIn that case, `done` must be called.\n\nThe first value in `input` is the main input value.\nAll other input values are the rest input values.\nThe values given to `callback` are the input values, merged with every\nnon-nullish output value.\n\n*   If `middleware` throws an error, returns a promise that is rejected, or\n    calls the given `done` function with an error, `callback` is called with\n    that error\n*   If `middleware` returns a value or returns a promise that is resolved, that\n    value is the main output value\n*   If `middleware` calls `done`, all non-nullish values except for the first\n    one (the error) overwrite the output values\n\n### `Trough`\n\nA pipeline.\n\n#### `Trough#run([input‚Ä¶, ]done)`\n\nRun the pipeline (all [`use()`][use]d middleware).\nCalls [`done`][done] on completion with either an error or the output of the\nlast middleware.\n\n> üëâ **Note**: as the length of input defines whether [async][] functions get a\n> `next` function, it‚Äôs recommended to keep `input` at one value normally.\n\n##### `function done(err?, [output‚Ä¶])`\n\nThe final handler passed to [`run()`][run], called with an error if a\n[middleware function][fn] rejected, passed, or threw one, or the output of the\nlast middleware function.\n\n#### `Trough#use(fn)`\n\nAdd `fn`, a [middleware function][fn], to the pipeline.\n\n##### `function fn([input‚Ä¶, ][next])`\n\nA middleware function called with the output of its predecessor.\n\n###### Synchronous\n\nIf `fn` returns or throws an error, the pipeline fails and `done` is called\nwith that error.\n\nIf `fn` returns a value (neither `null` nor `undefined`), the first `input` of\nthe next function is set to that value (all other `input` is passed through).\n\nThe following example shows how returning an error stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return new Error('Got: ' + thing)\n  })\n  .run('some value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: some value\n    at ~/example.js:5:12\n    ‚Ä¶\n```\n\nThe following example shows how throwing an error stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    throw new Error('Got: ' + thing)\n  })\n  .run('more value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: more value\n    at ~/example.js:5:11\n    ‚Ä¶\n```\n\nThe following example shows how the first output can be modified:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return 'even ' + thing\n  })\n  .run('more value', 'untouched', console.log)\n```\n\nYields:\n\n```txt\nnull 'even more value' 'untouched'\n```\n\n###### Promise\n\nIf `fn` returns a promise, and that promise rejects, the pipeline fails and\n`done` is called with the rejected value.\n\nIf `fn` returns a promise, and that promise resolves with a value (neither\n`null` nor `undefined`), the first `input` of the next function is set to that\nvalue (all other `input` is passed through).\n\nThe following example shows how rejecting a promise stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing) {\n    return new Promise(function (resolve, reject) {\n      reject('Got: ' + thing)\n    })\n  })\n  .run('thing', console.log)\n```\n\nYields:\n\n```txt\nGot: thing\n```\n\nThe following example shows how the input isn‚Äôt touched by resolving to `null`.\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function () {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        resolve(null)\n      }, 100)\n    })\n  })\n  .run('Input', console.log)\n```\n\nYields:\n\n```txt\nnull 'Input'\n```\n\n###### Asynchronous\n\nIf `fn` accepts one more argument than the given `input`, a `next` function is\ngiven (after the input).  `next` must be called, but doesn‚Äôt have to be called\nasync.\n\nIf `next` is given a value (neither `null` nor `undefined`) as its first\nargument, the pipeline fails and `done` is called with that value.\n\nIf `next` is given no value (either `null` or `undefined`) as the first\nargument, all following non-nullish values change the input of the following\nfunction, and all nullish values default to the `input`.\n\nThe following example shows how passing a first argument stops the pipeline:\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing, next) {\n    next(new Error('Got: ' + thing))\n  })\n  .run('thing', console.log)\n```\n\nYields:\n\n```txt\nError: Got: thing\n    at ~/example.js:5:10\n```\n\nThe following example shows how more values than the input are passed.\n\n```js\nimport {trough} from 'trough'\n\ntrough()\n  .use(function (thing, next) {\n    setTimeout(function () {\n      next(null, null, 'values')\n    }, 100)\n  })\n  .run('some', console.log)\n```\n\nYields:\n\n```txt\nnull 'some' 'values'\n```\n\n## Types\n\nThis package is fully typed with [TypeScript][].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, and 16.0+.\nIt also works in Deno and modern browsers.\n\n## Security\n\nThis package is safe.\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] ¬© [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/trough/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/trough/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/trough.svg\n\n[coverage]: https://codecov.io/github/wooorm/trough\n\n[downloads-badge]: https://img.shields.io/npm/dm/trough.svg\n\n[downloads]: https://www.npmjs.com/package/trough\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/trough.svg\n\n[size]: https://bundlephobia.com/result?p=trough\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[ware]: https://github.com/segmentio/ware\n\n[trough]: #trough-1\n\n[use]: #troughusefn\n\n[run]: #troughruninput-done\n\n[fn]: #function-fninput-next\n\n[done]: #function-doneerr-output\n\n[async]: #asynchronous\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/trough/-/trough-2.1.0.tgz#0f7b511a4fde65a46f18477ab38849b22c554876",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/trough/-/trough-2.1.0.tgz",
    "hash": "0f7b511a4fde65a46f18477ab38849b22c554876",
    "integrity": "sha512-AqTiAOLcj85xS7vQ8QkAV41hPDIJ71XJB4RCUrzo/1GM2CQwhkJGaf9Hgr7BOugMRpgGUrqRg/DrBDl4H40+8g==",
    "registry": "npm",
    "packageName": "trough",
    "cacheIntegrity": "sha512-AqTiAOLcj85xS7vQ8QkAV41hPDIJ71XJB4RCUrzo/1GM2CQwhkJGaf9Hgr7BOugMRpgGUrqRg/DrBDl4H40+8g== sha1-D3tRGk/eZaRvGEd6s4hJsixVSHY="
  },
  "registry": "npm",
  "hash": "0f7b511a4fde65a46f18477ab38849b22c554876"
}