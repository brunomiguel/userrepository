{
  "manifest": {
    "name": "micromark",
    "version": "2.11.4",
    "description": "small commonmark compliant markdown parser with positional info and concrete tokens",
    "license": "MIT",
    "keywords": [
      "commonmark",
      "compiler",
      "gfm",
      "html",
      "lexer",
      "markdown",
      "markup",
      "md",
      "unified",
      "parse",
      "parser",
      "plugin",
      "process",
      "remark",
      "render",
      "renderer",
      "token",
      "tokenizer"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/micromark/micromark.git"
    },
    "bugs": {
      "url": "https://github.com/micromark/micromark/issues"
    },
    "funding": [
      {
        "type": "GitHub Sponsors",
        "url": "https://github.com/sponsors/unifiedjs"
      },
      {
        "type": "OpenCollective",
        "url": "https://opencollective.com/unified"
      }
    ],
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      },
      {
        "name": "Bogdan Chadkin",
        "email": "trysound@yandex.ru"
      },
      {
        "name": "Christian Murphy",
        "email": "christian.murphy.42@gmail.com"
      },
      {
        "name": "Marouane Fazouane",
        "email": "fazouanem3@gmail.com"
      },
      {
        "name": "John Otander",
        "email": "johnotander@gmail.com",
        "url": "https://johno.com"
      },
      {
        "name": "Stephan Schneider",
        "email": "stephanschndr@gmail.com"
      },
      {
        "name": "Victor Felder",
        "email": "victor@draft.li",
        "url": "https://draft.li"
      },
      {
        "name": "Mudit Ameta",
        "email": "zeusdeux@gmail.com",
        "url": "https://mudit.xyz"
      },
      {
        "name": "Merlijn Vos",
        "email": "merlijn@soverin.net"
      }
    ],
    "files": [
      "dist/",
      "lib/",
      "buffer.d.ts",
      "buffer.js",
      "buffer.mjs",
      "index.js",
      "index.mjs",
      "index.d.ts",
      "stream.d.ts",
      "stream.js",
      "stream.mjs"
    ],
    "main": "./index.js",
    "types": "index.d.ts",
    "dependencies": {
      "debug": "^4.0.0",
      "parse-entities": "^2.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.0.0",
      "@rollup/plugin-babel": "^5.0.0",
      "@rollup/plugin-commonjs": "^17.0.0",
      "@rollup/plugin-node-resolve": "^11.0.0",
      "@types/events": "^3.0.0",
      "@unicode/unicode-13.0.0": "^1.0.0",
      "babel-plugin-inline-constants": "^1.0.0",
      "babel-plugin-unassert": "^3.0.0",
      "babel-plugin-undebug": "^1.0.0",
      "c8": "^7.0.0",
      "character-entities": "^1.0.0",
      "commonmark.json": "^0.29.0",
      "concat-stream": "^2.0.0",
      "cross-env": "^7.0.0",
      "dtslint": "^4.0.0",
      "eslint-plugin-es": "^4.0.0",
      "eslint-plugin-security": "^1.0.0",
      "esm": "^3.0.0",
      "glob": "^7.0.0",
      "gzip-size-cli": "^4.0.0",
      "jsfuzz": "1.0.14",
      "ms": "^2.0.0",
      "patch-package": "^6.0.0",
      "prettier": "^2.0.0",
      "regenerate": "^1.0.0",
      "remark-cli": "^9.0.0",
      "remark-preset-wooorm": "^8.0.0",
      "resolve-from": "^5.0.0",
      "rollup": "^2.0.0",
      "rollup-plugin-terser": "^7.0.0",
      "tape": "^5.0.0",
      "xo": "^0.37.0"
    },
    "scripts": {
      "generate-lib-types": "node --experimental-modules script/generate-constant-typings.mjs",
      "generate-lib-expressions": "node --experimental-modules script/generate-expressions.mjs",
      "generate-lib-cjs": "rollup -c --silent",
      "generate-lib": "npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs",
      "generate-dist-types": "node --experimental-modules script/copy-dict.mjs",
      "generate-dist-js": "cross-env BUILD=dist rollup -c --silent",
      "generate-dist": "npm run generate-dist-types && npm run generate-dist-js",
      "generate-size": "cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js",
      "generate": "npm run generate-lib && npm run generate-dist && npm run generate-size",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "pretest-fuzz": "patch-package --patch-dir script/patches && node script/generate-fixtures.mjs",
      "test-fuzz": "cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures",
      "test-api": "node --experimental-modules test/index.mjs",
      "test-coverage": "c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs",
      "test-types": "dtslint .",
      "test": "npm run generate && npm run format && npm run test-coverage && npm run test-types"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "esnext": false,
      "extensions": [
        "mjs"
      ],
      "prettier": true,
      "envs": [
        "shared-node-browser"
      ],
      "rules": {
        "import/extensions": [
          "error",
          "always"
        ]
      },
      "overrides": [
        {
          "files": [
            "lib/**/*.{js,mjs}"
          ],
          "plugin": [
            "es"
          ],
          "extends": [
            "plugin:es/no-new-in-es2015",
            "plugin:security/recommended"
          ],
          "rules": {
            "complexity": "off",
            "es/no-array-from": "off",
            "es/no-object-assign": "off",
            "es/no-modules": "off",
            "import/no-mutable-exports": "off",
            "import/no-anonymous-default-export": "off",
            "guard-for-in": "off",
            "max-depth": "off",
            "no-multi-assign": "off",
            "no-unmodified-loop-condition": "off",
            "security/detect-object-injection": "off",
            "unicorn/explicit-length-check": "off",
            "unicorn/prefer-includes": "off",
            "unicorn/prefer-number-properties": "off"
          }
        },
        {
          "files": [
            "**/*.d.ts"
          ],
          "rules": {
            "import/extensions": [
              "error",
              "never"
            ]
          }
        },
        {
          "files": [
            "test/**/*.{js,mjs}"
          ],
          "rules": {
            "import/no-unassigned-import": "off"
          }
        }
      ],
      "ignores": [
        "dist/",
        "lib/**/*.js",
        "micromark.test.ts"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm",
        [
          "lint-no-html",
          false
        ]
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-micromark-2.11.4-d13436138eea826383e822449c9a5c50ee44665a-integrity/node_modules/micromark/package.json",
    "readmeFilename": "readme.md",
    "readme": "<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/9c34547/logo.svg?sanitize=true\" alt=\"micromark\" width=\"400\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** ([GFM][], [directives][], [footnotes][],\n    [frontmatter][], [math][], [MDX.js][mdxjs])\n*   [x] **[safe][security]** (by default)\n*   [x] **[small][size]** (smallest CM parser that exists)\n*   [x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\nIt’s in open beta: up next are [CMSM][] and CSTs.\n\n*   for updates, see [Twitter][]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(doc[, encoding][, options])`](#micromarkdoc-encoding-options)\n    *   [`micromarkStream(options?)`](#micromarkstreamoptions)\n*   [Extensions](#extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [List of extensions](#list-of-extensions)\n*   [Syntax tree](#syntax-tree)\n*   [CommonMark](#commonmark)\n*   [Grammar](#grammar)\n*   [Test](#test)\n*   [Size & debug](#size--debug)\n*   [Comparison](#comparison)\n*   [Version](#version)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [Sponsor](#sponsor)\n*   [Origin story](#origin-story)\n*   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nvar micromark = require('micromark')\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nThe same can be done with ESM (in Node 10+, browsers that support it, or with a\nbundler), in an `example.mjs` file, like so:\n\n```js\nimport micromark from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nvar micromark = require('micromark')\nvar gfmSyntax = require('micromark-extension-gfm')\nvar gfmHtml = require('micromark-extension-gfm/html')\n\nvar doc = '* [x] contact@example.com ~~strikethrough~~'\n\nvar result = micromark(doc, {\n  extensions: [gfmSyntax()],\n  htmlExtensions: [gfmHtml]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nvar fs = require('fs')\nvar micromarkStream = require('micromark/stream')\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(micromarkStream())\n  .pipe(process.stdout)\n\nfunction handleError(err) {\n  // Handle your error here!\n  throw err\n}\n```\n\n## API\n\nThis section documents the API.\nThe parts can be used separately, but this isn’t documented yet.\n\n### `micromark(doc[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `doc`\n\nMarkdown to parse (`string` or `Buffer`)\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `doc` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `doc` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `micromarkStream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nAvailable at `require('micromark/stream')`.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension] and [`HtmlExtension`][html-extension].\nThey can be passed in [`extensions`][option-extensions] or\n[`htmlExtensions`][option-htmlextensions], respectively.\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are the names of hooks, referring\nto where constructs “hook” into.\n`content` (a block of, well, content: definitions and paragraphs), `document`\n(containers such as block quotes and lists), `flow` (block constructs such as\nATX and setext headings, HTML, indented and fenced code, thematic breaks),\n`string` (things that work in a few places such as destinations, fenced code\ninfo, etc: character escapes and -references), or `text` (rich inline text:\nautolinks, character escapes and -references, code, hard breaks, HTML, images,\nlinks, emphasis, strong).\n\nThe fields at such objects are character codes, mapping to constructs as values.\nThe built in [constructs][] are an extension.\nSee it and the [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are either `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\nSee the [existing extensions][extensions] for inspiration.\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-footnote`][footnotes]\n    — support footnotes\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n## Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nvar fromMarkdown = require('mdast-util-from-markdown')\n\nvar result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n## Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s not a [typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Test\n\nmicromark is tested with the \\~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, thus this project has 100% coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check the unit\ntests and their coverage, respectively.\nThe `$ npm run test-types` script checks TypeScript definitions.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install it or remove it from the script.\n\n## Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with GZip and Brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark, which is published\nin the `dist/` folder and has entries in the root.\nWhile developing or debugging, you can switch to use the source, which is\npublished in the `lib/` folder, and comes instrumented with assertions and debug\nmessages.\nTo see debug messages, run your script with a `DEBUG` env variable, such as with\n`DEBUG=\"micromark\" node script.js`.\n\nTo generate the codebase, use `$ npm run generate` after clone and install.\nThe `$ npm run generate-dist` script specifically takes `lib/` and generates\n`dist/`.\nThe `$ npm run generate-size` script checks the bundle size of `dist/`.\n\n## Comparison\n\nThere are many other markdown parsers out there, and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple of ’em in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML pretty\neasily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block.\n\nIf you’re looking for fine grained control, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nIf you’re looking to inspect or transform lots of content, use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, use\n[marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you’re in Node and have CommonMark-compliant (or funky) markdown and want to\nturn it into HTML, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant — but\nthat’s not always true.\nThis list is not supposed to be exhaustive.\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n## Version\n\nThe open beta of micromark starts at version `2.0.0` (there was a different\npackage published on npm as `micromark` before).\nmicromark will adhere to semver at `3.0.0`.\nUse tilde ranges for now: `\"micromark\": \"~2.10.1\"`.\n\n## Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nIt’s safe to compile markdown to HTML if it does not include embedded HTML nor\nuses dangerous protocols in links (such as `javascript:` or `data:`).\nmicromark is safe by default when embedded HTML or dangerous protocols are used\ntoo, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[footnotes]: https://github.com/micromark/micromark-extension-footnote\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: lib/constructs.mjs\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2020 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/micromark/-/micromark-2.11.4.tgz#d13436138eea826383e822449c9a5c50ee44665a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/micromark/-/micromark-2.11.4.tgz",
    "hash": "d13436138eea826383e822449c9a5c50ee44665a",
    "integrity": "sha512-+WoovN/ppKolQOFIAajxi7Lu9kInbPxFuTBVEavFcL8eAfVstoc5MocPmqBeAdBOJV00uaVjegzH4+MA0DN/uA==",
    "registry": "npm",
    "packageName": "micromark",
    "cacheIntegrity": "sha512-+WoovN/ppKolQOFIAajxi7Lu9kInbPxFuTBVEavFcL8eAfVstoc5MocPmqBeAdBOJV00uaVjegzH4+MA0DN/uA== sha1-0TQ2E47qgmOD6CJEnJpcUO5EZlo="
  },
  "registry": "npm",
  "hash": "d13436138eea826383e822449c9a5c50ee44665a"
}