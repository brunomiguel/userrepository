{
  "manifest": {
    "name": "w3c-hr-time",
    "version": "1.0.2",
    "description": "An implementation of the W3C High Resolution Time Level 2 specification.",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/jsdom/w3c-hr-time"
    },
    "author": {
      "name": "Timothy Gu",
      "email": "timothygu99@gmail.com"
    },
    "license": "MIT",
    "private": false,
    "dependencies": {
      "browser-process-hrtime": "^1.0.0"
    },
    "devDependencies": {
      "eslint": "^4.14.0",
      "eslint-plugin-jest": "^21.5.0",
      "jest": "^24.1.0"
    },
    "scripts": {
      "test": "jest",
      "lint": "eslint ."
    },
    "files": [
      "lib",
      "index.js"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-w3c-hr-time-1.0.2-0a89cdf5cc15822df9c360543676963e0cc308cd-integrity/node_modules/w3c-hr-time/package.json",
    "readmeFilename": "README.md",
    "readme": "# w3c-hr-time\n\nThis module implements the W3C [High Resolution Time Level 2][HR-TIME] specification. It provides exactly three exports:\n\n- `Performance` class\n- `getGlobalMonotonicClockMS(): number`\n- `clockIsAccurate: boolean`\n\nIn all APIs, a \"high-resolution timestamp\" means a number in milliseconds that may have a fractional part, if the system clock is accurate enough (see \"Clock accuracy\" section below). It is identical to the [`DOMHighResTimeStamp`][] type in the High Resolution Time spec.\n\nPortability is paramount to this module. It uses only APIs exposed from Node.js core like `Date.now()` and `process.hrtime()` and does not use or require any native modules. It also employs the [browser-process-hrtime][] module for graceful degrades for platforms that do not have `process.hrtime()` (such as browsers).\n\n## `Performance` class\n\n```js\nconst { Performance } = require(\"w3c-hr-time\");\nconst performance = new Performance();\n\nconsole.log(performance.timeOrigin);\n// Prints a number close to Date.now() but that may have fractional parts, like\n// 1514888563819.351.\n\nconsole.log(new Date(performance.timeOrigin));\n// Prints a date close to new Date(), like 2018-01-02T10:22:43.819Z.\n\nsetTimeout(() => {\n  console.log(performance.now());\n  // Prints a number close to 5000, like 5008.023059.\n}, 5000);\n```\n\nPerhaps the most interesting export is the [`Performance`][] class. By constructing the class, you can get an instance quite similar to the `window.performance` object in browsers. Specifically, the following APIs are implemented:\n\n* [`performance.now(): number`][`Performance#now()`] returns the high-resolution duration since the construction of the `Performance` object.\n* [`performance.timeOrigin: number`][`Performance#timeOrigin`] is a high-resolution timestamp of the `Performance` object's construction, expressed in [Unix time][].\n* [`performance.toJSON(): object`][`Performance#toJSON()`] returns an object with `timeOrigin` property set to the corresponding value of this object. This allows serializing the `Performance` object with `JSON.stringify()`. In browsers, the returned object may contain additional properties such as `navigation` and `timing`. However, those properties are specific to browser navigation and are unsuitable for a Node.js implementation. Furthermore, they are specified not in the High Resolution Time spec but in [Navigation Timing][NAVIGATION-TIMING], and are thereby outside the scope of this module.\n\n### Limitations\n\nThis module does not aim for full [Web IDL][WEBIDL] conformance, so things like `performance.toJSON.call({})` will not throw `TypeError`s like it does in browsers. If you need full Web IDL conformance, you may be interested in the [webidl2js][] module.\n\nThe `Performance` class provided also does not have `mark()`, `measure()`, `getEntries()`, and such functions. They are specified in other specs than High Resolution Timing, such as [User Timing][USER-TIMING] (marks and measures) and [Performance Timeline][PERFORMANCE-TIMELINE] (entries management). Those specs extend the definition of the `Performance` class defined in High Resolution Timing, and to implement those specs you can extend the `Performance` class exported by this module.\n\nDue to the limitations of the APIs exposed through Node.js, the construction of a `Performance` object may take up to 1 millisecond to gather information for high-resolution `timeOrigin`.\n\n## Global monotonic clock\n\nThe High Resolution Time spec defines a [global monotonic clock][] that is \"shared by time origin's *[sic]*, is monotonically increasing and not subject to system clock adjustments or system clock skew, and whose reference point is the Unix time.\"\n\nThis module exports a function `getGlobalMonotonicClockMS()` that is the basis of all timing functions used my this module when a monotonic time is required. It returns a high-resolution timestamp whose zero value is at some arbitrary point in the past. (For the current high-resolution timestamp based on the Unix epoch, use `new Performance().timeOrigin` instead.)\n\n```js\nconst { getGlobalMonotonicClockMS } = require(\"w3c-hr-time\");\n\nconst start = getGlobalMonotonicClockMS();\nconsole.log(start);\n// Prints a millisecond timestamp based on an arbitrary point in the past, like\n// 280249733.012151.\n\nsetTimeout(() => {\n  console.log(getGlobalMonotonicClockMS() - a);\n  // Prints a number close to 5000, like 5006.156536.\n}, 5000);\n```\n\nUnlike other functions that return only integer timestamps if the system clock does not provide enough resolution, this function may still return timestamps with fractional parts on those systems with less accurate clocks. See \"Clock accuracy\" section below for more information.\n\n## Clock accuracy\n\nThe High Resolution Time spec [states][HR-TIME ยง4] that\n\n> A [`DOMHighResTimeStamp`][] *SHOULD* represent a time in milliseconds accurate to 5 microseconds - see [8. Privacy and Security][HR-TIME ยง8].\n>\n> If the User Agent is unable to provide a time value accurate to 5 microseconds due to hardware or software constraints, the User Agent can represent a [`DOMHighResTimeStamp`][] as a time in milliseconds accurate to a millisecond.\n\nThis module implements this suggestion faithfully. It executes a test at `require()`-time to determine if the system clock (both `Date.now()` and `process.hrtime()`) is accurate enough to 5 microseconds. The result of this test can be accessed through the exported `clockIsAccurate` boolean value.\n\n```js\nconst { Performance, clockIsAccurate } = require(\"w3c-hr-time\");\n\nconst performance = new Performance();\n\nif (!clockIsAccurate) {\n  console.assert(Number.isInteger(performance.timeOrigin));\n  console.assert(Number.isInteger(performance.now()));\n}\n```\n\nIf `clockIsAccurate` is false, `performance.timeOrigin` and `performance.now()` are always rounded to millisecond accuracy. `getGlobalMonotonicClockMS()` however is exempt from this requirement due to its best-effort nature, and the fact that it is not an API exposed by the High Resolution Time spec.\n\n## Clock drift\n\n[Clock drift][clock drift] can be observed through system or user clock adjustments -- that is, the speed at which `Date.now()` changes may be faster or slower than real time if there is a pending adjustment to the system clock, for example through NTP synchronizing.\n\nIn the spec, the [global monotonic clock][] is defined to be immune to such drifts. Correspondingly, the APIs exposed through this module that are defined using the global monotonic clock such as `performance.now()` and `getGlobalMonotonicClockMS()` are also guaranteed to reflect real time.\n\nFor example, if `performance.now()` returns 1000, it is guaranteed that the time of this call is exactly one second since the construction of the `Performance` object. But the difference in `Date.now()`'s value from the construction of the `Performance` object to when `performance.now()` returns 1000 may not be exactly 1000. You may also see `performance.now() - Date.now()` diverge over time as a result of clock drifts.\n\nOn the other hand, `performance.timeOrigin` returns the *[Unix time][]* at which the `Performance` object is constructed and relies on the current time exposed through `Date.now()`. That means that it is susceptible to clock drifts that has occurred before the `Performance` object was constructed.\n\n## Supporting w3c-hr-time\n\nThe jsdom project (including w3c-hr-time) is a community-driven project maintained by a team of [volunteers](https://github.com/orgs/jsdom/people). You could support us by:\n\n- [Getting professional support for w3c-hr-time](https://tidelift.com/subscription/pkg/npm-w3c-hr-time?utm_source=npm-w3c-hr-time&utm_medium=referral&utm_campaign=readme) as part of a Tidelift subscription. Tidelift helps making open source sustainable for us while giving teams assurances for maintenance, licensing, and security.\n- Contributing directly to the project.\n\n## License\n\nThis software is licensed under the MIT license. See LICENSE.md file for more detail.\n\n[HR-TIME]: https://w3c.github.io/hr-time/\n[NAVIGATION-TIMING]: https://w3c.github.io/navigation-timing/\n[PERFORMANCE-TIMELINE]: https://w3c.github.io/performance-timeline/\n[USER-TIMING]: https://w3c.github.io/user-timing/\n[WEBIDL]: https://heycam.github.io/webidl/\n\n[HR-TIME ยง4]: https://w3c.github.io/hr-time/#dom-domhighrestimestamp\n[HR-TIME ยง8]: https://w3c.github.io/hr-time/#privacy-security\n\n[`DOMHighResTimeStamp`]: https://w3c.github.io/hr-time/#dom-domhighrestimestamp\n[`Performance`]: https://w3c.github.io/hr-time/#dfn-performance\n[`Performance#now()`]: https://w3c.github.io/hr-time/#dom-performance-now\n[`Performance#timeOrigin`]: https://w3c.github.io/hr-time/#dom-performance-timeorigin\n[`Performance#toJSON()`]: https://w3c.github.io/hr-time/#dom-performance-tojson\n[browser-process-hrtime]: https://www.npmjs.com/package/browser-process-hrtime\n[clock drift]: https://en.wikipedia.org/wiki/Clock_drift\n[global monotonic clock]: https://w3c.github.io/hr-time/#dfn-global-monotonic-clock\n[Unix time]: https://en.wikipedia.org/wiki/Unix_time\n[webidl2js]: https://github.com/jsdom/webidl2js\n",
    "licenseText": "# The MIT License (MIT)\n\nCopyright (c) 2017 Tiancheng \"Timothy\" Gu and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz#0a89cdf5cc15822df9c360543676963e0cc308cd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
    "hash": "0a89cdf5cc15822df9c360543676963e0cc308cd",
    "integrity": "sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==",
    "registry": "npm",
    "packageName": "w3c-hr-time",
    "cacheIntegrity": "sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ== sha1-ConN9cwVgi35w2BUNnaWPgzDCM0="
  },
  "registry": "npm",
  "hash": "0a89cdf5cc15822df9c360543676963e0cc308cd"
}