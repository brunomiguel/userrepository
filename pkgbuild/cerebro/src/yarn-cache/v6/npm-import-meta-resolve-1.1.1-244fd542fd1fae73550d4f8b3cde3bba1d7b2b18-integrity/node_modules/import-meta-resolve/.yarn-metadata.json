{
  "manifest": {
    "name": "import-meta-resolve",
    "version": "1.1.1",
    "description": "Resolve things like Node.js — ponyfill for `import.meta.resolve`",
    "license": "MIT",
    "keywords": [
      "resolve",
      "node",
      "esm",
      "module"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/wooorm/import-meta-resolve.git"
    },
    "bugs": {
      "url": "https://github.com/wooorm/import-meta-resolve/issues"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/wooorm"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "lib/",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "builtins": "^4.0.0"
    },
    "devDependencies": {
      "@types/node": "^15.0.0",
      "@types/semver": "^7.0.0",
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^9.0.0",
      "remark-preset-wooorm": "^8.0.0",
      "rimraf": "^3.0.0",
      "tape": "^5.0.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.0.0",
      "xo": "^0.39.0"
    },
    "scripts": {
      "generate": "node script.js",
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{lib/**,test/**,}*.d.ts\" && tsc && type-coverage",
      "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
      "test-api": "node --experimental-import-meta-resolve test/baseline.js && node test/index.js",
      "test-coverage": "node --experimental-import-meta-resolve test/baseline.js && c8 --check-coverage --branches 75 --functions 75 --lines 75 --statements 75 --reporter lcov node test/index.js",
      "test": "npm run generate && npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "complexity": "off",
        "max-depth": "off",
        "max-params": "off",
        "no-constant-condition": "off",
        "no-new": "off",
        "prefer-arrow-callback": "off"
      },
      "ignore": [
        "test/node_modules/"
      ]
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-import-meta-resolve-1.1.1-244fd542fd1fae73550d4f8b3cde3bba1d7b2b18-integrity/node_modules/import-meta-resolve/package.json",
    "readmeFilename": "readme.md",
    "readme": "# import-meta-resolve\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n\nResolve things like Node.js.\nPonyfill for [`import.meta.resolve`][resolve].\nSupports import maps, export maps, loading CJS and ESM projects, all of that!\n\n## Install\n\nThis package is ESM only: Node 12+ is needed to use it and it must be `import`ed\ninstead of `require`d.\n\n[npm][]:\n\n```sh\nnpm install import-meta-resolve\n```\n\n## Use\n\n```js\nimport {resolve} from 'import-meta-resolve'\n\nmain()\n\nasync function main() {\n  // A file:\n  console.log(await resolve('./index.js', import.meta.url))\n  //=> file:///Users/tilde/Projects/oss/import-meta-resolve/index.js\n\n  // A CJS package:\n  console.log(await resolve('builtins', import.meta.url))\n  //=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/builtins/index.js\n\n  // A scoped CJS package:\n  console.log(await resolve('@babel/core', import.meta.url))\n  //=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/@babel/core/lib/index.js\n\n  // A package with an export map:\n  console.log(await resolve('tape/lib/test', import.meta.url))\n  //=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/tape/lib/test.js\n}\n```\n\n## API\n\nThis package exports the following identifiers: `resolve`, `moduleResolve`.\nThere is no default export.\n\n## `resolve(specifier, parent)`\n\nMatch `import.meta.resolve` except that `parent` is required (you should\nprobably pass `import.meta.url`).\n\n###### Parameters\n\n*   `specifier` (`string`)\n    — `/example.js`, `./example.js`, `../example.js`, `some-package`\n*   `parent` (`string`, example: `import.meta.url`)\n    Full URL (to a file) that `specifier` is resolved relative from\n\n###### Returns\n\nReturns a promise that resolves to a full `file:`, `data:`, or `node:` URL to\nthe found thing.\n\n## `moduleResolve(specifier, parent[, conditions])`\n\nThe [“Resolver Algorithm Specification”][algo] as detailed in the Node docs\n(which is sync and slightly lower-level than `resolve`).\n\n###### Parameters\n\n*   `specifier` (`string`)\n    — `/example.js`, `./example.js`, `../example.js`, `some-package`\n*   `parent` (`URL`, example: `import.meta.url`)\n    Full URL (to a file) that `specifier` is resolved relative from\n*   `conditions` (`Set<string>`, default: `new Set('node', 'import')`)\n    Conditions\n\n###### Returns\n\nA URL object to the found thing.\n\n## Algorithm\n\nThe algorithm for `resolve` matches how Node handles `import.meta.resolve`, with\na couple of differences.\n\nThe algorithm for `moduleResolve` matches the [Resolver Algorithm\nSpecification][algo] as detailed in the Node docs (which is sync and slightly\nlower-level than `resolve`).\n\n## Differences to Node\n\n*   `parent` defaulting to `import.meta.url` cannot be ponyfilled: you have to\n    explicitly pass it\n*   No support for CLI flags: `--experimental-specifier-resolution`,\n    `--experimental-json-modules`, `--experimental-wasm-modules`,\n    `--experimental-policy`, `--input-type`, `--preserve-symlinks`,\n    `--preserve-symlinks-main`, nor `--conditions` work\n*   No attempt is made to add a suggestion based on how things used to work in\n    CJS before to not-found errors\n*   Prototypal methods are not guarded: Node protects for example `String#slice`\n    or so from being tampered with, whereas this doesn’t\n\n###### Errors\n\n*   `ERR_INVALID_MODULE_SPECIFIER`\n    — when `specifier` is invalid\n*   `ERR_INVALID_PACKAGE_CONFIG`\n    — when a `package.json` is invalid\n*   `ERR_INVALID_PACKAGE_TARGET`\n    — when a `package.json` `exports` or `imports` is invalid\n*   `ERR_MODULE_NOT_FOUND`\n    — when `specifier` cannot be found in `parent`\n*   `ERR_PACKAGE_IMPORT_NOT_DEFINED`\n    — when a local import is not defined in an import map\n*   `ERR_PACKAGE_PATH_NOT_EXPORTED`\n    — when an export is not defined in an export map\n*   `ERR_UNSUPPORTED_DIR_IMPORT`\n    — when attempting to import a directory\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/import-meta-resolve/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/import-meta-resolve/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/import-meta-resolve.svg\n\n[coverage]: https://codecov.io/github/wooorm/import-meta-resolve\n\n[downloads-badge]: https://img.shields.io/npm/dm/import-meta-resolve.svg\n\n[downloads]: https://www.npmjs.com/package/import-meta-resolve\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[algo]: https://nodejs.org/dist/latest-v14.x/docs/api/esm.html#esm_resolver_algorithm\n\n[resolve]: https://nodejs.org/api/esm.html#esm_import_meta_resolve_specifier_parent\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2021 Titus Wormer <mailto:tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n---\n\nThis is a derivative work based on:\n<https://github.com/nodejs/node>.\nWhich is licensed:\n\n\"\"\"\nCopyright Node.js contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n\nThis license applies to parts of Node.js originating from the\nhttps://github.com/joyent/node repository:\n\n\"\"\"\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/import-meta-resolve/-/import-meta-resolve-1.1.1.tgz#244fd542fd1fae73550d4f8b3cde3bba1d7b2b18",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/import-meta-resolve/-/import-meta-resolve-1.1.1.tgz",
    "hash": "244fd542fd1fae73550d4f8b3cde3bba1d7b2b18",
    "integrity": "sha512-JiTuIvVyPaUg11eTrNDx5bgQ/yMKMZffc7YSjvQeSMXy58DO2SQ8BtAf3xteZvmzvjYh14wnqNjL8XVeDy2o9A==",
    "registry": "npm",
    "packageName": "import-meta-resolve",
    "cacheIntegrity": "sha512-JiTuIvVyPaUg11eTrNDx5bgQ/yMKMZffc7YSjvQeSMXy58DO2SQ8BtAf3xteZvmzvjYh14wnqNjL8XVeDy2o9A== sha1-JE/VQv0frnNVDU+LPN47uh17Kxg="
  },
  "registry": "npm",
  "hash": "244fd542fd1fae73550d4f8b3cde3bba1d7b2b18"
}