{
  "manifest": {
    "name": "postcss-js",
    "version": "3.0.3",
    "description": "PostCSS for React Inline Styles, Radium, Free Style and other CSS-in-JS",
    "keywords": [
      "postcss",
      "postcss-runner",
      "js",
      "inline",
      "react",
      "css",
      "cssinjs"
    ],
    "author": {
      "name": "Andrey Sitnik",
      "email": "andrey@sitnik.ru"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-js.git"
    },
    "engines": {
      "node": ">=10.0"
    },
    "exports": {
      ".": {
        "require": "./index.js",
        "import": "./index.mjs"
      },
      "./": "./"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    "dependencies": {
      "camelcase-css": "^2.0.1",
      "postcss": "^8.1.6"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-js-3.0.3-2f0bd370a2e8599d45439f6970403b5873abda33-integrity/node_modules/postcss-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS JS\n\n<img align=\"right\" width=\"135\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"https://postcss.org/logo-leftp.svg\">\n\n[PostCSS] for React Inline Styles, Radium, JSS and other CSS-in-JS.\n\nFor example, to use [Stylelint], [RTLCSS] or [postcss-write-svg] plugins\nin your workflow.\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-js\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[postcss-write-svg]: https://github.com/jonathantneal/postcss-write-svg\n[Stylelint]:         https://github.com/stylelint/stylelint\n[PostCSS]:           https://github.com/postcss/postcss\n[RTLCSS]:            https://github.com/MohammadYounes/rtlcss\n\n\n## Usage\n\n### Processing\n\n```js\nconst postcssJs = require('postcss-js')\nconst autoprefixer = require('autoprefixer')\n\nconst prefixer = postcssJs.sync([ autoprefixer ])\n\nconst style = prefixer({\n  userSelect: 'none'\n})\n\nstyle //=> {\n      //     WebkitUserSelect: 'none',\n      //        MozUserSelect: 'none',\n      //         msUserSelect: 'none',\n      //           userSelect: 'none'\n      //   }\n```\n\n\n### Compile CSS-in-JS to CSS\n\n```js\nconst postcss = require('postcss')\nconst postcssJs = require('postcss-js')\n\nconst style = {\n  top: 10,\n  '&:hover': {\n    top: 5\n  }\n};\n\npostcss().process(style, { parser: postcssJs }).then( (result) => {\n  result.css //=> top: 10px;\n             //   &:hover { top: 5px; }\n})\n```\n\n\n### Compile CSS to CSS-in-JS\n\n```js\nconst postcss = require('postcss')\nconst postcssJs = require('postcss-js')\n\nconst css  = '--text-color: #DD3A0A; @media screen { z-index: 1; color: var(--text-color) }'\nconst root = postcss.parse(css)\n\npostcssJs.objectify(root) //=> {\n                          //     '--text-color': '#DD3A0A',\n                          //     '@media screen': {\n                          //       zIndex: '1',\n                          //       color: 'var(--text-color)'\n                          //     }\n                          //   }\n```\n\n\n## API\n\n### `sync(plugins): function`\n\nCreate PostCSS processor with simple API, but with only sync PostCSS plugins\nsupport.\n\nProcessor is just a function, which takes one style object and return other.\n\n\n### `async(plugins): function`\n\nSame as `sync`, but also support async plugins.\n\nReturned processor will return Promise.\n\n\n### `parse(obj): Root`\n\nParse CSS-in-JS style object to PostCSS `Root` instance.\n\nIt converts numbers to pixels and parses\n[Free Style] like selectors and at-rules:\n\n```js\n{\n    '@media screen': {\n        '&:hover': {\n            top: 10\n        }\n    }\n}\n```\n\nThis methods use Custom Syntax name convention, so you can use it like this:\n\n```js\npostcss().process(obj, { parser: postcssJs })\n```\n\n\n### `objectify(root): object`\n\nConvert PostCSS `Root` instance to CSS-in-JS style object.\n\n\n## Troubleshoot\n\nWebpack may need some extra config for some PostCSS plugins.\n\n\n### `Module parse failed`\n\nAutoprefixer and some other plugins\nneed a [json-loader](https://github.com/webpack/json-loader) to import data.\n\nSo, please install this loader and add to webpack config:\n\n```js\nloaders: [\n  {\n    test: /\\.json$/,\n    loader: \"json-loader\"\n  }\n]\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2015 Andrey Sitnik <andrey@sitnik.ru>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-js/-/postcss-js-3.0.3.tgz#2f0bd370a2e8599d45439f6970403b5873abda33",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-js/-/postcss-js-3.0.3.tgz",
    "hash": "2f0bd370a2e8599d45439f6970403b5873abda33",
    "integrity": "sha512-gWnoWQXKFw65Hk/mi2+WTQTHdPD5UJdDXZmX073EY/B3BWnYjO4F4t0VneTCnCGQ5E5GsCdMkzPaTXwl3r5dJw==",
    "registry": "npm",
    "packageName": "postcss-js",
    "cacheIntegrity": "sha512-gWnoWQXKFw65Hk/mi2+WTQTHdPD5UJdDXZmX073EY/B3BWnYjO4F4t0VneTCnCGQ5E5GsCdMkzPaTXwl3r5dJw== sha1-LwvTcKLoWZ1FQ59pcEA7WHOr2jM="
  },
  "registry": "npm",
  "hash": "2f0bd370a2e8599d45439f6970403b5873abda33"
}