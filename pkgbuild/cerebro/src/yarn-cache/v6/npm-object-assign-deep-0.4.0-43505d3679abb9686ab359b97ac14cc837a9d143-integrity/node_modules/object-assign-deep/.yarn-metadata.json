{
  "manifest": {
    "repository": {
      "type": "git",
      "url": "https://github.com/saikojosh/Object-Assign-Deep.git"
    },
    "bugs": {
      "url": "https://github.com/saikojosh/Object-Assign-Deep/issues"
    },
    "name": "object-assign-deep",
    "version": "0.4.0",
    "description": "Allows deep cloning of plain objects that contain primitives, nested plain objects, or nested plain arrays.",
    "keywords": [
      "object",
      "assign",
      "deep",
      "extend",
      "clone",
      "copy",
      "merge",
      "object",
      "array"
    ],
    "main": "objectAssignDeep.js",
    "author": {
      "name": "Josh Cole",
      "email": "saikojosh@gmail.com",
      "url": "http://www.JoshuaCole.me"
    },
    "contributors": [
      {
        "name": "Josh Cole",
        "email": "saikojosh@gmail.com"
      }
    ],
    "dependencies": {},
    "devDependencies": {
      "eslint": "latest",
      "eslint-config-recombix": "latest",
      "eslint-config-vue": "latest",
      "eslint-plugin-disable": "latest",
      "eslint-plugin-filenames": "latest",
      "eslint-plugin-html": "latest",
      "eslint-plugin-json": "latest",
      "eslint-plugin-node": "latest",
      "eslint-plugin-promise": "latest",
      "eslint-plugin-vue": "latest"
    },
    "license": "MIT",
    "engines": {
      "node": ">=6"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-object-assign-deep-0.4.0-43505d3679abb9686ab359b97ac14cc837a9d143-integrity/node_modules/object-assign-deep/package.json",
    "readmeFilename": "README.md",
    "readme": "# Object-Assign-Deep\nLike [Object.assign()](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) but deeper. This module is the holy grail of simple object manipulation in JavaScript and it does not resort to using the JSON functions. If you need more power or fine-grained control please take a look at the [Object-Extender](https://npmjs.org/package/object-extender) module.\n\n## Breaking Changes in v0.3!\n* `objectAssignDeep()` now mutates the first argument in the same way `Object.assign()` does.\n* By default, arrays are now replaced instead of merged to preserve backwards compatibility with older versions of this module.\n\n## Caution! Danger of Death!\nThis module is to be used with PLAIN objects that contain primitive values ONLY. Every time you misuse this module a kitten dies.. yes you're a kitten killer.\n\nDo not use this module if:\n* Your objects are (or contain) native objects such as Date (nested Array is fine).\n* Your objects contain circular references (you'll cause a stack overflow).\n* Your objects are instances of some class you've written.\n* You are concerned with prototype chains, property descriptors, unenumerable properties, and any other advanced uses.\n\nIf you need to do something fancy like the above you'll need to write a custom solution for your use case.\n\n## Quick Start\nYou can merge plain objects or clone them:\n\n```javascript\nconst objectAssignDeep = require(`object-assign-deep`);\n\nconst mergedObjects = objectAssignDeep(target, object1, object2, ...objectN);\n\nconst clonedObject = objectAssignDeep({}, originalObject);\n```\n\nSimples!\n\n## Full Example\nSee the `./examples` directory for a few examples, including one example case that demonstrates why you can't get clever with object cloning.\n\n```javascript\nconst objectAssignDeep = require(`object-assign-deep`);\n\nconst objectA = {\n\tprop1: `Hello`,\n\tprop2: `World`,\n\tnested: {\n\t\tbool: true,\n\t\tsuper: 123,\n\t\tstill: `here!`,\n\t},\n\tarray1: [1, 2, 3],\n\tarray2: [4, 5, 6],\n};\n\nconst objectB = {\n\tprop2: `Universe`,\n\tname: `Josh`,\n\tnested: {\n\t\tbool: false,\n\t},\n\tarray1: null,\n};\n\nconst objectC = {\n\tlocation: `United Kingdom`,\n\tname: `Bob`,\n\tnested: {\n\t\tsuper: 999,\n\t},\n\tarray2: [100, 101, 102],\n};\n\nconst result = objectAssignDeep(objectA, objectB, objectC);\n\nconsole.log(`Result:`, result);\n\n/*\n*   {\n*     prop1: 'Hello',\n*     prop2: 'Universe',\n*     nested: { bool: false, super: 999, still: 'here!' },\n*     array1: null,\n*     array2: [100, 101, 102],\n*     name: 'Bob',\n*     location: 'United Kingdom'\n*   }\n*/\n```\n\n## API Overview\n\n### objectAssignDeep(target, object1, object2, ...objectN);\nMerges all the objects together mutating the `target` in the process and returning the result.\n\n### objectAssignDeep.noMutate(object1, object2, ...objectN);\nMerges all the objects together without mutating any of them and returning the entirely new object.\n\n### objectAssignDeep.withOptions(target, objects, options);\nTakes a target, an array of objects to merge in, and an options object which can be used to change the behaviour of the function. The available options are:\n\n| Option         | Default Value | Description |\n|----------------|---------------|-------------|\n| arrayBehaviour | \"replace\"     | By default arrays in later objects will overwrite earlier values, but you can set this to \"merge\" if you want to concatenate the arrays instead. |\n\nIf you need more customisation options please take a look at the [Object-Extender](https://npmjs.org/package/object-extender) module which builds upon Object-Assign-Deep.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/object-assign-deep/-/object-assign-deep-0.4.0.tgz#43505d3679abb9686ab359b97ac14cc837a9d143",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/object-assign-deep/-/object-assign-deep-0.4.0.tgz",
    "hash": "43505d3679abb9686ab359b97ac14cc837a9d143",
    "integrity": "sha512-54Uvn3s+4A/cMWx9tlRez1qtc7pN7pbQ+Yi7mjLjcBpWLlP+XbSHiHbQW6CElDiV4OvuzqnMrBdkgxI1mT8V/Q==",
    "registry": "npm",
    "packageName": "object-assign-deep",
    "cacheIntegrity": "sha512-54Uvn3s+4A/cMWx9tlRez1qtc7pN7pbQ+Yi7mjLjcBpWLlP+XbSHiHbQW6CElDiV4OvuzqnMrBdkgxI1mT8V/Q== sha1-Q1BdNnmruWhqs1m5esFMyDep0UM="
  },
  "registry": "npm",
  "hash": "43505d3679abb9686ab359b97ac14cc837a9d143"
}