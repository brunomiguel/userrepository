{
  "manifest": {
    "author": {
      "name": "Saúl Ibarra Corretgé",
      "email": "s@saghul.net",
      "url": "https://bettercallsaghul.com"
    },
    "scripts": {
      "test": "./node_modules/.bin/mocha --growl --timeout 10000 test/*.test.js",
      "install": "node-gyp rebuild"
    },
    "name": "abstract-socket",
    "version": "2.1.1",
    "description": "Abstract domain socket support for Node",
    "main": "lib/abstract_socket",
    "homepage": "https://github.com/saghul/node-abstractsocket",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/saghul/node-abstractsocket.git"
    },
    "engines": {
      "node": ">=4.0.0"
    },
    "dependencies": {
      "bindings": "^1.2.1",
      "nan": "^2.12.1"
    },
    "devDependencies": {
      "mocha": "3.x",
      "should": "11.x"
    },
    "os": [
      "linux"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-abstract-socket-2.1.1-243a7e6e6ff65bb9eab16a22fa90699b91e528f7-integrity/node_modules/abstract-socket/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-abstractsocket\n\nBecause I like my sockets like my Picasso paintings: abstract.\n\n[![NPM](https://nodei.co/npm/abstract-socket.png)](https://nodei.co/npm/abstract-socket/)\n\n\n## Abstract what?\n\nGo read this: http://man7.org/linux/man-pages/man7/unix.7.html, I'll wait.\n\n\n## Examples\n\nServer:\n\n```js\n// abstract echo server\nconst abs = require('./lib/abstract_socket');\n\nconst server = abs.createServer(function(c) { //'connection' listener\n  console.log('client connected');\n  c.on('end', function() {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n  c.pipe(c);\n});\nserver.listen('\\0foo');\n\n```\n\nClient:\n\n```js\nconst abs = require('./lib/abstract_socket');\n\nvar client = abs.connect('\\0foo', function() { //'connect' listener\n    console.log('client connected');\n});\n\nclient.on('data', function(data) {\n    console.log(data.toString());\n});\n\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', function() {\n    const chunk = process.stdin.read();\n    if (chunk !== null)\n        client.write(chunk);\n});\n\n```\n\n\n## API\n\n### abs.createServer(connectionListener)\n\nReturns a new `AbstractSocketServer` object. `listen` can be called on\nit passing the name of the abstract socket to bind to and listen, it follows\nthe API used for normal Unix domain sockets. NOTE: you must prepend the path with\nthe NULL byte ('\\0') to indicate it's an abstract socket.\n\nEmits an error if the `socket(2)` system call fails.\n\n### AbstractSocketServer.listen(name, [callback]\n\nBinds the server to the specified abstract socket name.\n\nEmits an error if the `bind(2)` system call fails, or the given `name`\nis invalid.\n\nThis function is asynchronous. When the server has been bound, 'listening' event\nwill be emitted. the last parameter callback will be added as an listener for the\n'listening' event.\n\n### abs.connect(name, connectListener)\n\nCreates a connection to the given `path` in the abstract domain. NOTE: you must\nprepend the path with the NULL byte ('\\0') to indicate it's an abstract\nsocket.\n\nReturns a new net.Socket object.\n\nEmits an error if the `socket(2)` or `connect(2)` system calls fail,\nor the given `name` is invalid.\n\n## Tests\n\nRun tests with `npm test`.\n\n## Thanks\n\nI borrowed massive amounts of inspiration/code from node-unix-dgram by @bnoordhuis :-)\n\n@mmalecki taught me how to inherit like a pro.\n@randunel refactored it heavily in v2.\n\n",
    "licenseText": "Copyright (C) 2014-present by Saúl Ibarra Corretgé\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/abstract-socket/-/abstract-socket-2.1.1.tgz#243a7e6e6ff65bb9eab16a22fa90699b91e528f7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/abstract-socket/-/abstract-socket-2.1.1.tgz",
    "hash": "243a7e6e6ff65bb9eab16a22fa90699b91e528f7",
    "integrity": "sha512-YZJizsvS1aBua5Gd01woe4zuyYBGgSMeqDOB6/ChwdTI904KP6QGtJswXl4hcqWxbz86hQBe++HWV0hF1aGUtA==",
    "registry": "npm",
    "packageName": "abstract-socket",
    "cacheIntegrity": "sha512-YZJizsvS1aBua5Gd01woe4zuyYBGgSMeqDOB6/ChwdTI904KP6QGtJswXl4hcqWxbz86hQBe++HWV0hF1aGUtA== sha1-JDp+bm/2W7nqsWoi+pBpm5HlKPc="
  },
  "registry": "npm",
  "hash": "243a7e6e6ff65bb9eab16a22fa90699b91e528f7"
}