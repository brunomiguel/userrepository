'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@capacitor/core');

const FileSync = core.registerPlugin('FileSync', {
    web: () => Promise.resolve().then(function () { return web; }).then(m => new m.FileSyncWeb()),
});

/* eslint-disable @typescript-eslint/no-unused-vars */
class FileSyncWeb extends core.WebPlugin {
    cancelAllRequests(_options) {
        throw new Error('Method not implemented.');
    }
    keygen() {
        throw new Error('Method not implemented.');
    }
    setEnv(_options) {
        throw new Error('Method not implemented.');
    }
    encryptFnames(_options) {
        throw new Error('Method not implemented.');
    }
    decryptFnames(_options) {
        throw new Error('Method not implemented.');
    }
    getLocalFilesMeta(_options) {
        throw new Error('Method not implemented.');
    }
    getLocalAllFilesMeta(_options) {
        throw new Error('Method not implemented.');
    }
    deleteLocalFiles(_options) {
        throw new Error('Method not implemented.');
    }
    updateLocalFiles(_options) {
        throw new Error('Method not implemented.');
    }
    updateLocalVersionFiles(_options) {
        throw new Error('Method not implemented.');
    }
    deleteRemoteFiles(_options) {
        throw new Error('Method not implemented.');
    }
    updateRemoteFiles(_options) {
        throw new Error('Method not implemented.');
    }
    encryptWithPassphrase(_options) {
        throw new Error('Method not implemented.');
    }
    decryptWithPassphrase(_options) {
        throw new Error('Method not implemented.');
    }
}

var web = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FileSyncWeb: FileSyncWeb
});

exports.FileSync = FileSync;
//# sourceMappingURL=plugin.cjs.js.map
