{
  "manifest": {
    "name": "@capacitor/keyboard",
    "version": "4.0.1",
    "description": "The Keyboard API provides keyboard display and visibility control, along with event tracking when the keyboard shows and hides.",
    "main": "dist/plugin.cjs.js",
    "module": "dist/esm/index.js",
    "types": "dist/esm/index.d.ts",
    "unpkg": "dist/plugin.js",
    "files": [
      "android/src/main/",
      "android/build.gradle",
      "dist/",
      "ios/Plugin/",
      "CapacitorKeyboard.podspec"
    ],
    "author": {
      "name": "Ionic",
      "email": "hi@ionicframework.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ionic-team/capacitor-plugins.git"
    },
    "bugs": {
      "url": "https://github.com/ionic-team/capacitor-plugins/issues"
    },
    "keywords": [
      "capacitor",
      "plugin",
      "native"
    ],
    "scripts": {
      "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
      "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin -destination generic/platform=iOS && cd ..",
      "verify:android": "cd android && ./gradlew clean build test && cd ..",
      "verify:web": "npm run build",
      "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
      "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- --fix --format",
      "eslint": "eslint . --ext ts",
      "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
      "swiftlint": "node-swiftlint",
      "docgen": "docgen --api KeyboardPlugin --output-readme README.md --output-json dist/docs.json",
      "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
      "clean": "rimraf ./dist",
      "watch": "tsc --watch",
      "prepublishOnly": "npm run build",
      "publish:cocoapod": "pod trunk push ./CapacitorKeyboard.podspec --allow-warnings"
    },
    "devDependencies": {
      "@capacitor/android": "^4.0.0",
      "@capacitor/cli": "^4.0.0",
      "@capacitor/core": "^4.0.0",
      "@capacitor/docgen": "0.0.18",
      "@capacitor/ios": "^4.0.0",
      "@ionic/eslint-config": "^0.3.0",
      "@ionic/prettier-config": "~1.0.1",
      "@ionic/swiftlint-config": "^1.1.2",
      "eslint": "^7.11.0",
      "prettier": "~2.3.0",
      "prettier-plugin-java": "~1.0.2",
      "rimraf": "^3.0.0",
      "rollup": "^2.29.0",
      "swiftlint": "^1.0.1",
      "typescript": "~4.1.5"
    },
    "peerDependencies": {
      "@capacitor/core": "^4.0.0"
    },
    "prettier": "@ionic/prettier-config",
    "swiftlint": "@ionic/swiftlint-config",
    "eslintConfig": {
      "extends": "@ionic/eslint-config/recommended"
    },
    "capacitor": {
      "ios": {
        "src": "ios"
      },
      "android": {
        "src": "android"
      }
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "42324ec218c8699bc10f914169ac366c8224b259",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@capacitor-keyboard-4.0.1-36cd5f8aa2ef87a722f318e525d1bda12e7811d1-integrity/node_modules/@capacitor/keyboard/package.json",
    "readmeFilename": "README.md",
    "readme": "# @capacitor/keyboard\n\nThe Keyboard API provides keyboard display and visibility control, along with event tracking when the keyboard shows and hides.\n\n## Install\n\n```bash\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n## Example\n\n```typescript\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n## Configuration\n\nOn iOS, the keyboard can be configured with the following options:\n\n| Prop                     | Type                                                      | Description                                                                                                                                                                                                                                                                                                       | Default             | Since |\n| ------------------------ | --------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----- |\n| **`resize`**             | <code><a href=\"#keyboardresize\">KeyboardResize</a></code> | Configure the way the app is resized when the Keyboard appears. Only available on iOS.                                                                                                                                                                                                                            | <code>native</code> | 1.0.0 |\n| **`style`**              | <code><a href=\"#keyboardstyle\">KeyboardStyle</a></code>   | Override the keyboard style if your app doesn't support dark/light theme changes. If not set, the keyboard style will depend on the device appearance. Only available on iOS.                                                                                                                                     |                     | 1.0.0 |\n| **`resizeOnFullScreen`** | <code>boolean</code>                                      | There is an Android bug that prevents the keyboard from resizing the WebView when the app is in full screen (i.e. if StatusBar plugin is used to overlay the status bar). This setting, if set to true, add a workaround that resizes the WebView even when the app is in full screen. Only available for Android |                     | 1.1.0 |\n\n### Examples\n\nIn `capacitor.config.json`:\n\n```json\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"DARK\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\nIn `capacitor.config.ts`:\n\n```ts\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\nimport { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: KeyboardResize.Body,\n      style: KeyboardStyle.Dark,\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n## Compatibility with `cordova-plugin-ionic-keyboard`\n\nTo maintain compatibility with\n[`cordova-plugin-ionic-keyboard`](https://github.com/ionic-team/cordova-plugin-ionic-keyboard),\nthe following events also work with `window.addEventListener`:\n\n- `keyboardWillShow`\n- `keyboardDidShow`\n- `keyboardWillHide`\n- `keyboardDidHide`\n\n## API\n\n<docgen-index>\n\n* [`show()`](#show)\n* [`hide()`](#hide)\n* [`setAccessoryBarVisible(...)`](#setaccessorybarvisible)\n* [`setScroll(...)`](#setscroll)\n* [`setStyle(...)`](#setstyle)\n* [`setResizeMode(...)`](#setresizemode)\n* [`getResizeMode()`](#getresizemode)\n* [`addListener('keyboardWillShow', ...)`](#addlistenerkeyboardwillshow)\n* [`addListener('keyboardDidShow', ...)`](#addlistenerkeyboarddidshow)\n* [`addListener('keyboardWillHide', ...)`](#addlistenerkeyboardwillhide)\n* [`addListener('keyboardDidHide', ...)`](#addlistenerkeyboarddidhide)\n* [`removeAllListeners()`](#removealllisteners)\n* [Interfaces](#interfaces)\n* [Enums](#enums)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### show()\n\n```typescript\nshow() => Promise<void>\n```\n\nShow the keyboard. This method is alpha and may have issues.\n\nThis method is only supported on Android.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### hide()\n\n```typescript\nhide() => Promise<void>\n```\n\nHide the keyboard.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setAccessoryBarVisible(...)\n\n```typescript\nsetAccessoryBarVisible(options: { isVisible: boolean; }) => Promise<void>\n```\n\nSet whether the accessory bar should be visible on the keyboard. We recommend disabling\nthe accessory bar for short forms (login, signup, etc.) to provide a cleaner UI.\n\nThis method is only supported on iPhone devices.\n\n| Param         | Type                                 |\n| ------------- | ------------------------------------ |\n| **`options`** | <code>{ isVisible: boolean; }</code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setScroll(...)\n\n```typescript\nsetScroll(options: { isDisabled: boolean; }) => Promise<void>\n```\n\nProgrammatically enable or disable the WebView scroll.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                  |\n| ------------- | ------------------------------------- |\n| **`options`** | <code>{ isDisabled: boolean; }</code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setStyle(...)\n\n```typescript\nsetStyle(options: KeyboardStyleOptions) => Promise<void>\n```\n\nProgrammatically set the keyboard style.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                                                  |\n| ------------- | --------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#keyboardstyleoptions\">KeyboardStyleOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setResizeMode(...)\n\n```typescript\nsetResizeMode(options: KeyboardResizeOptions) => Promise<void>\n```\n\nProgrammatically set the resize mode.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                                                    |\n| ------------- | ----------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#keyboardresizeoptions\">KeyboardResizeOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### getResizeMode()\n\n```typescript\ngetResizeMode() => Promise<KeyboardResizeOptions>\n```\n\nGet the currently set resize mode.\n\nThis method is only supported on iOS.\n\n**Returns:** <code>Promise&lt;<a href=\"#keyboardresizeoptions\">KeyboardResizeOptions</a>&gt;</code>\n\n**Since:** 4.0.0\n\n--------------------\n\n\n### addListener('keyboardWillShow', ...)\n\n```typescript\naddListener(eventName: 'keyboardWillShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is about to be shown.\n\n| Param              | Type                                                                     |\n| ------------------ | ------------------------------------------------------------------------ |\n| **`eventName`**    | <code>'keyboardWillShow'</code>                                          |\n| **`listenerFunc`** | <code>(info: <a href=\"#keyboardinfo\">KeyboardInfo</a>) =&gt; void</code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardDidShow', ...)\n\n```typescript\naddListener(eventName: 'keyboardDidShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is shown.\n\n| Param              | Type                                                                     |\n| ------------------ | ------------------------------------------------------------------------ |\n| **`eventName`**    | <code>'keyboardDidShow'</code>                                           |\n| **`listenerFunc`** | <code>(info: <a href=\"#keyboardinfo\">KeyboardInfo</a>) =&gt; void</code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardWillHide', ...)\n\n```typescript\naddListener(eventName: 'keyboardWillHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is about to be hidden.\n\n| Param              | Type                            |\n| ------------------ | ------------------------------- |\n| **`eventName`**    | <code>'keyboardWillHide'</code> |\n| **`listenerFunc`** | <code>() =&gt; void</code>      |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardDidHide', ...)\n\n```typescript\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is hidden.\n\n| Param              | Type                           |\n| ------------------ | ------------------------------ |\n| **`eventName`**    | <code>'keyboardDidHide'</code> |\n| **`listenerFunc`** | <code>() =&gt; void</code>     |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### removeAllListeners()\n\n```typescript\nremoveAllListeners() => Promise<void>\n```\n\nRemove all native listeners for this plugin.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### Interfaces\n\n\n#### KeyboardStyleOptions\n\n| Prop        | Type                                                    | Description            | Default                            | Since |\n| ----------- | ------------------------------------------------------- | ---------------------- | ---------------------------------- | ----- |\n| **`style`** | <code><a href=\"#keyboardstyle\">KeyboardStyle</a></code> | Style of the keyboard. | <code>KeyboardStyle.Default</code> | 1.0.0 |\n\n\n#### KeyboardResizeOptions\n\n| Prop       | Type                                                      | Description                                             | Since |\n| ---------- | --------------------------------------------------------- | ------------------------------------------------------- | ----- |\n| **`mode`** | <code><a href=\"#keyboardresize\">KeyboardResize</a></code> | Mode used to resize elements when the keyboard appears. | 1.0.0 |\n\n\n#### PluginListenerHandle\n\n| Prop         | Type                                      |\n| ------------ | ----------------------------------------- |\n| **`remove`** | <code>() =&gt; Promise&lt;void&gt;</code> |\n\n\n#### KeyboardInfo\n\n| Prop                 | Type                | Description             | Since |\n| -------------------- | ------------------- | ----------------------- | ----- |\n| **`keyboardHeight`** | <code>number</code> | Height of the heyboard. | 1.0.0 |\n\n\n### Enums\n\n\n#### KeyboardStyle\n\n| Members       | Value                  | Description                                                                                                                                                                                                                                 | Since |\n| ------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`Dark`**    | <code>'DARK'</code>    | Dark keyboard.                                                                                                                                                                                                                              | 1.0.0 |\n| **`Light`**   | <code>'LIGHT'</code>   | Light keyboard.                                                                                                                                                                                                                             | 1.0.0 |\n| **`Default`** | <code>'DEFAULT'</code> | On iOS 13 and newer the keyboard style is based on the device appearance. If the device is using Dark mode, the keyboard will be dark. If the device is using Light mode, the keyboard will be light. On iOS 12 the keyboard will be light. | 1.0.0 |\n\n\n#### KeyboardResize\n\n| Members      | Value                 | Description                                                                                                          | Since |\n| ------------ | --------------------- | -------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`Body`**   | <code>'body'</code>   | Only the `body` HTML element will be resized. Relative units are not affected, because the viewport does not change. | 1.0.0 |\n| **`Ionic`**  | <code>'ionic'</code>  | Only the `ion-app` HTML element will be resized. Use it only for Ionic Framework apps.                               | 1.0.0 |\n| **`Native`** | <code>'native'</code> | The whole native Web View will be resized when the keyboard shows/hides. This affects the `vh` relative unit.        | 1.0.0 |\n| **`None`**   | <code>'none'</code>   | Neither the app nor the Web View are resized.                                                                        | 1.0.0 |\n\n</docgen-api>\n",
    "licenseText": "Copyright 2020-present Ionic\nhttps://ionic.io\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@capacitor/keyboard/-/keyboard-4.0.1.tgz#36cd5f8aa2ef87a722f318e525d1bda12e7811d1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@capacitor/keyboard/-/keyboard-4.0.1.tgz",
    "hash": "36cd5f8aa2ef87a722f318e525d1bda12e7811d1",
    "integrity": "sha512-JZVci2v9jAKH0sIoNNZzmw/cWGXWf+KneLt0yDr/6YSs/2/tfuH10yOrUOhgrKFkR+fFj/rddTClQXUQ8Rqcrg==",
    "registry": "npm",
    "packageName": "@capacitor/keyboard",
    "cacheIntegrity": "sha512-JZVci2v9jAKH0sIoNNZzmw/cWGXWf+KneLt0yDr/6YSs/2/tfuH10yOrUOhgrKFkR+fFj/rddTClQXUQ8Rqcrg== sha1-Ns1fiqLvh6ci8xjlJdG9oS54EdE="
  },
  "registry": "npm",
  "hash": "36cd5f8aa2ef87a722f318e525d1bda12e7811d1"
}