{
  "manifest": {
    "name": "react-resize-detector",
    "description": "React resize detector",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/maslianok/react-resize-detector.git"
    },
    "scripts": {
      "build": "npm run build:cjs && npm run build:esm",
      "build:cjs": "babel src --out-dir lib",
      "build:esm": "cross-env BABEL_ENV=esm babel src --out-dir lib/esm",
      "clean": "rimraf lib",
      "lint": "eslint -c .eslintrc src",
      "test": "npm run lint && npm run clean && npm run build"
    },
    "dependencies": {
      "lodash": "^4.17.20",
      "prop-types": "^15.7.2",
      "raf-schd": "^4.0.2",
      "resize-observer-polyfill": "^1.5.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.11.5",
      "@babel/core": "^7.11.5",
      "@babel/plugin-proposal-class-properties": "^7.10.4",
      "@babel/preset-env": "^7.11.5",
      "@babel/preset-react": "^7.10.4",
      "babel-eslint": "^10.0.3",
      "babel-plugin-module-resolver": "^4.0.0",
      "babel-plugin-transform-imports": "^2.0.0",
      "babel-plugin-transform-react-remove-prop-types": "^0.4.24",
      "cross-env": "^7.0.2",
      "eslint": "^7.8.1",
      "eslint-config-airbnb": "^18.2.0",
      "eslint-plugin-import": "^2.22.0",
      "eslint-plugin-jsx-a11y": "^6.3.1",
      "eslint-plugin-react": "^7.20.6",
      "react": "^16.9.0",
      "react-dom": "^16.9.0",
      "rimraf": "^3.0.0"
    },
    "peerDependencies": {
      "react": "^16.0.0",
      "react-dom": "^16.0.0"
    },
    "author": {
      "name": "Vitalii Maslianok",
      "email": "maslianok@gmail.com",
      "url": "https://github.com/maslianok"
    },
    "version": "5.2.0",
    "bugs": {
      "url": "https://github.com/maslianok/react-resize-detector/issues"
    },
    "homepage": "https://github.com/maslianok/react-resize-detector",
    "keywords": [
      "react",
      "resize",
      "detector"
    ],
    "license": "MIT",
    "main": "lib/index.js",
    "module": "lib/esm/index.js",
    "sideEffects": false,
    "maintainers": [
      {
        "name": "maslianok",
        "email": "maslianok@gmail.com"
      }
    ],
    "contributors": [
      {
        "name": "James J. Womack",
        "url": "@james_womack"
      },
      {
        "name": "Lam Hieu",
        "email": "lamhieu.vk@gmail.com",
        "url": "https://lamhieu.info"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-react-resize-detector-5.2.0-992083834432308c551a8251a2c52306d9d16718-integrity/node_modules/react-resize-detector/package.json",
    "readmeFilename": "README.md",
    "readme": "# Handle element resizes like it's 2020!\n\n<img src=\"https://img.shields.io/npm/dy/react-resize-detector?style=flat-square\">\n<img src=\"https://img.shields.io/npm/dm/react-resize-detector?style=flat-square\">\n\n#### [Live demo](http://maslianok.github.io/react-resize-detector/)\n\nNowadays browsers have started to support element resize handling natively using [ResizeObservers](https://wicg.github.io/ResizeObserver/). We use this feature (with a [polyfill](https://github.com/que-etc/resize-observer-polyfill)) to help you handle element resizes in React.  \nNo `window.resize` listeners! No timeouts! Just a pure implementation with a lightning-fast polyfill!\n\n## Installation\n\n```\nnpm i react-resize-detector\n// OR\nyarn add react-resize-detector\n```\n\n## Examples\n\nStarting from v5.0.0 there are 2 recommended ways to work with `resize-detector` library:\n\n#### 1. HOC pattern\n\n```jsx\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = ({ width, height }) => <div>{`${width}x${height}`}</div>;\n\nexport default withResizeDetector(CustomComponent);\n```\n\n#### 2. Child Function Pattern\n\n```jsx\nimport ReactResizeDetector from 'react-resize-detector';\n\n// ...\n\n<ReactResizeDetector handleWidth handleHeight>\n  {({ width, height }) => <div>{`${width}x${height}`}</div>}\n</ReactResizeDetector>;\n```\n\n<details><summary>Full example (Class Component)</summary>\n\n```jsx\nimport React, { Component } from 'react';\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst containerStyles = {\n  height: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nclass AdaptiveComponent extends Component {\n  state = {\n    color: 'red'\n  };\n\n  componentDidUpdate(prevProps) {\n    const { width } = this.props;\n\n    if (width !== prevProps.width) {\n      this.setState({\n        color: width > 500 ? 'coral' : 'aqua'\n      });\n    }\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const { color } = this.state;\n    return <div style={{ backgroundColor: color, ...containerStyles }}>{`${width}x${height}`}</div>;\n  }\n}\n\nconst AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\n\nconst App = () => {\n  return (\n    <div>\n      <p>The rectangle changes color based on its width</p>\n      <AdaptiveWithDetector />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n</details>\n\n<details><summary>Full example (Functional Component)</summary>\n\n```jsx\nimport React, { useState, useEffect } from 'react';\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst containerStyles = {\n  height: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nconst AdaptiveComponent = ({ width, height }) => {\n  const [color, setColor] = useState('red');\n\n  useEffect(() => {\n    setColor(width > 500 ? 'coral' : 'aqua');\n  }, [width]);\n\n  return <div style={{ backgroundColor: color, ...containerStyles }}>{`${width}x${height}`}</div>;\n};\n\nconst AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\n\nconst App = () => {\n  return (\n    <div>\n      <p>The rectangle changes color based on its width</p>\n      <AdaptiveWithDetector />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n</details>\n\n<br/>\n\nWe still support [other ways](https://github.com/maslianok/react-resize-detector/tree/v4.2.1#examples) to work with this library, but in the future consider using the ones described above. Please let me know if the examples above don't fit your needs.\n\n## Refs\n\nThe library is trying to be smart and to not add any extra DOM elements to not break your layouts. That's why we use [`findDOMNode`](https://reactjs.org/docs/react-dom.html#finddomnode) method to find and attach listeners to the existing DOM elements. Unfortunately, this method has been deprecated and throws a warning in StrictMode.\n\nFor those who wants to avoid this warning we are introducing an additional property `targetRef`. You have to set this prop as a `ref` of your target DOM element and the library will use this reference instead of serching the DOM element with help of `findDOMNode`\n\n<details><summary>HOC pattern example</summary>\n\n```jsx\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = ({ width, height, targetRef }) => <div ref={targetRef}>{`${width}x${height}`}</div>;\n\nexport default withResizeDetector(CustomComponent);\n```\n\n</details>\n\n<details><summary>Child Function Pattern example</summary>\n\n```jsx\nimport ReactResizeDetector from 'react-resize-detector';\n\n// ...\n\n<ReactResizeDetector handleWidth handleHeight>\n  {({ width, height, targetRef }) => <div ref={targetRef}>{`${width}x${height}`}</div>}\n</ReactResizeDetector>;\n```\n\n</details>\n\n## API\n\n| Prop           | Type   | Description                                                                                                                                                                                    | Default     |\n| -------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| onResize       | Func   | Function that will be invoked with `width` and `height` arguments                                                                                                                              | `undefined` |\n| handleWidth    | Bool   | Trigger `onResize` on width change                                                                                                                                                             | `true`      |\n| handleHeight   | Bool   | Trigger `onResize` on height change                                                                                                                                                            | `true`      |\n| skipOnMount    | Bool   | Do not trigger onResize when a component mounts                                                                                                                                                | `false`     |\n| refreshMode    | String | Possible values: `throttle` and `debounce` See [lodash docs](https://lodash.com/docs#debounce) for more information. `undefined` - callback will be fired for every frame                      | `undefined` |\n| refreshRate    | Number | Use this in conjunction with `refreshMode`. Important! It's a numeric prop so set it accordingly, e.g. `refreshRate={500}`                                                                     | `1000`      |\n| refreshOptions | Object | Use this in conjunction with `refreshMode`. An object in shape of `{ leading: bool, trailing: bool }`. Please refer to [lodash's docs](https://lodash.com/docs/4.17.11#throttle) for more info | `undefined` |\n| targetRef      | Ref    | Use this prop to pass a reference to the element you want to attach resize handlers to. It must be an instance of `React.useRef` or `React.createRef` functions                                | `undefined` |\n\n## License\n\nMIT\n\n## ❤️\n\nShow us some love and STAR ⭐ the project if you find it useful\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Denis Rul\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-resize-detector/-/react-resize-detector-5.2.0.tgz#992083834432308c551a8251a2c52306d9d16718",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-resize-detector/-/react-resize-detector-5.2.0.tgz",
    "hash": "992083834432308c551a8251a2c52306d9d16718",
    "integrity": "sha512-PQAc03J2eyhvaiWgEdQ8+bKbbyGJzLEr70KuivBd1IEmP/iewNakLUMkxm6MWnDqsRPty85pioyg8MvGb0qC8A==",
    "registry": "npm",
    "packageName": "react-resize-detector",
    "cacheIntegrity": "sha512-PQAc03J2eyhvaiWgEdQ8+bKbbyGJzLEr70KuivBd1IEmP/iewNakLUMkxm6MWnDqsRPty85pioyg8MvGb0qC8A== sha1-mSCDg0QyMIxVGoJRosUjBtnRZxg="
  },
  "registry": "npm",
  "hash": "992083834432308c551a8251a2c52306d9d16718"
}