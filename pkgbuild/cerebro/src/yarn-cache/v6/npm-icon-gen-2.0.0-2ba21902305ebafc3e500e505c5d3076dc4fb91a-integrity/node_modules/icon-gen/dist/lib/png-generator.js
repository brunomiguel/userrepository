"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GetRequiredPNGImageSizes = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _svg2png = _interopRequireDefault(require("svg2png"));

var _faviconGenerator = require("./favicon-generator.js");

var _icnsGenerator = require("./icns-generator.js");

var _icoGenerator = require("./ico-generator.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Filter the sizes.
 * @param {Number[]} sizes Original sizes.
 * @param {Number[]} filterSizes Filter sizes. *
 * @return {NUmber[]} Filterd sizes.
 */
const filterSizes = (sizes = [], filterSizes = []) => {
  if (filterSizes.length === 0) {
    return sizes;
  }

  return sizes.filter(size => {
    for (let filterSize of filterSizes) {
      if (size === filterSize) {
        return true;
      }
    }

    return false;
  });
};
/**
 * Generate the PNG file = require(the SVG data.
 * @param {Buffer} svg SVG data that has been parse by svg2png.
 * @param {Number} size The size (width/height) of the image.
 * @param {String} dir Path of the file output directory.
 * @param {Logger} logger Logger.
 * @return {Promise} Image generation task.
 */


const generatePNG = (svg, size, dir, logger) => {
  return new Promise((resolve, reject) => {
    if (!(svg && 0 < size && dir)) {
      reject(new Error('Invalid parameters.'));
      return;
    }

    const dest = _path.default.join(dir, size + '.png');

    logger.log('  Create: ' + dest);

    const buffer = _svg2png.default.sync(svg, {
      width: size,
      height: size
    });

    if (!buffer) {
      reject(new Error('Faild to write the image, ' + size + 'x' + size));
      return;
    }

    _fs.default.writeFile(dest, buffer, err => {
      if (err) {
        reject(err);
        return;
      }

      resolve({
        size: size,
        path: dest
      });
    });
  });
};
/**
 * Gets the size of the images needed to create an icon.
 * @param {CLIOption} options Options from command line.
 * @return {Number[]} The sizes of the image.
 */


const GetRequiredPNGImageSizes = (options = {}) => {
  let sizes = [];

  if (options.icns) {
    sizes = sizes.concat(filterSizes((0, _icnsGenerator.GetRequiredICNSImageSizes)(), options.icns.sizes));
  }

  if (options.ico) {
    sizes = sizes.concat(filterSizes((0, _icoGenerator.GetRequiredICOImageSizes)(), options.ico.sizes));
  }

  if (options.favicon) {
    if (options.favicon.sizes) {
      // Favicon's PNG generates the specified size as it is
      sizes = sizes.concat(options.favicon.sizes);
    } else {
      sizes = sizes.concat((0, _faviconGenerator.GetRequiredFavoriteImageSizes)());
    }
  } // 'all' mode


  if (sizes.length === 0) {
    sizes = (0, _faviconGenerator.GetRequiredFavoriteImageSizes)();
    sizes = sizes.concat(filterSizes((0, _icnsGenerator.GetRequiredICNSImageSizes)(), options.sizes && options.sizes.icns));
    sizes = sizes.concat(filterSizes((0, _icoGenerator.GetRequiredICOImageSizes)(), options.sizes && options.sizes.ico));
  }

  return sizes.filter((value, index, array) => {
    return array.indexOf(value) === index;
  }).sort((a, b) => {
    // Always ensure the ascending order
    return a - b;
  });
};
/**
 * Generate the PNG files = require(the SVG file.
 * @param {String} src SVG file path.
 * @param {String} dir Output destination The path of directory.
 * @param {CLIOption} options Options from command line.
 * @param {Function} cb Callback function.
 * @param {Logger} logger Logger.
 */


exports.GetRequiredPNGImageSizes = GetRequiredPNGImageSizes;

const GeneratePNG = (src, dir, options, cb, logger) => {
  _fs.default.readFile(src, (err, svg) => {
    if (err) {
      cb(err);
      return;
    }

    logger.log('SVG to PNG:');
    const sizes = GetRequiredPNGImageSizes(options);
    Promise.all(sizes.map(size => {
      return generatePNG(svg, size, dir, logger);
    })).then(results => {
      cb(null, results);
    }).catch(err2 => {
      cb(err2);
    });
  });
};

var _default = GeneratePNG;
exports.default = _default;