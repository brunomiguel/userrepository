"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _path = _interopRequireDefault(require("path"));

var _rewire = _interopRequireDefault(require("rewire"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {CLI} */
describe('CLI', () => {
  const Module = (0, _rewire.default)('./cli.js');
  /** @test {parse} */

  describe('parse', () => {
    const parse = Module.__get__('parse');

    it('Empty arguments', () => {
      var _rec = new _powerAssertRecorder();

      const options = parse([]);
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(options, "arguments/0/object").help, "arguments/0"), {
        content: "assert(options.help)",
        filepath: "src/bin/cli.test.js",
        line: 15,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"help\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]}],\"range\":[0,20]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"help\",\"range\":[15,19]},{\"type\":{\"label\":\")\"},\"range\":[19,20]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('parse: -h --help', () => {
      var _rec2 = new _powerAssertRecorder(),
          _rec3 = new _powerAssertRecorder();

      let options = parse(['-h']);
      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(options, "arguments/0/object").help, "arguments/0"), {
        content: "assert(options.help)",
        filepath: "src/bin/cli.test.js",
        line: 20,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"help\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]}],\"range\":[0,20]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"help\",\"range\":[15,19]},{\"type\":{\"label\":\")\"},\"range\":[19,20]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parse(['--help']);
      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(_rec3._capt(options, "arguments/0/object").help, "arguments/0"), {
        content: "assert(options.help)",
        filepath: "src/bin/cli.test.js",
        line: 23,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"help\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]}],\"range\":[0,20]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"help\",\"range\":[15,19]},{\"type\":{\"label\":\")\"},\"range\":[19,20]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('-v --version', () => {
      var _rec4 = new _powerAssertRecorder(),
          _rec5 = new _powerAssertRecorder();

      let options = parse(['-v']);
      (0, _powerAssert.default)(_rec4._expr(_rec4._capt(_rec4._capt(options, "arguments/0/object").version, "arguments/0"), {
        content: "assert(options.version)",
        filepath: "src/bin/cli.test.js",
        line: 28,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"version\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]}],\"range\":[0,23]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"version\",\"range\":[15,22]},{\"type\":{\"label\":\")\"},\"range\":[22,23]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parse(['--version']);
      (0, _powerAssert.default)(_rec5._expr(_rec5._capt(_rec5._capt(options, "arguments/0/object").version, "arguments/0"), {
        content: "assert(options.version)",
        filepath: "src/bin/cli.test.js",
        line: 31,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"version\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]}],\"range\":[0,23]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"version\",\"range\":[15,22]},{\"type\":{\"label\":\")\"},\"range\":[22,23]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('-i SVGFILE -o DESTDIR', () => {
      var _rec6 = new _powerAssertRecorder(),
          _rec7 = new _powerAssertRecorder(),
          _rec8 = new _powerAssertRecorder();

      const argv = ['-i', './test/data/sample.svg', '-o', './test'];
      const options = parse(argv);

      let expected = _path.default.resolve(argv[1]);

      (0, _powerAssert.default)(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(options, "arguments/0/left/object").input, "arguments/0/left") === _rec6._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input === expected)",
        filepath: "src/bin/cli.test.js",
        line: 39,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      expected = _path.default.resolve(argv[3]);
      (0, _powerAssert.default)(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(options, "arguments/0/left/object").output, "arguments/0/left") === _rec7._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output === expected)",
        filepath: "src/bin/cli.test.js",
        line: 42,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(options, "arguments/0/left/object").report, "arguments/0/left") === _rec8._capt(undefined, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.report === undefined)",
        filepath: "src/bin/cli.test.js",
        line: 44,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"report\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[26,35]},\"range\":[7,35]}],\"range\":[0,36]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"report\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[26,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('-i PNGDIR -o DESTDIR -r', () => {
      var _rec9 = new _powerAssertRecorder(),
          _rec10 = new _powerAssertRecorder(),
          _rec11 = new _powerAssertRecorder();

      const argv = ['-i', './test/data', '-o', './test', '-r'];
      const options = parse(argv);

      let expected = _path.default.resolve(argv[1]);

      (0, _powerAssert.default)(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(options, "arguments/0/left/object").input, "arguments/0/left") === _rec9._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input === expected)",
        filepath: "src/bin/cli.test.js",
        line: 52,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      expected = _path.default.resolve(argv[3]);
      (0, _powerAssert.default)(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(options, "arguments/0/left/object").output, "arguments/0/left") === _rec10._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output === expected)",
        filepath: "src/bin/cli.test.js",
        line: 55,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(options, "arguments/0/left/object").report, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.report === true)",
        filepath: "src/bin/cli.test.js",
        line: 57,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"report\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[26,30]},\"range\":[7,30]}],\"range\":[0,31]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"report\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[26,30]},{\"type\":{\"label\":\")\"},\"range\":[30,31]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Default images', () => {
      var _rec12 = new _powerAssertRecorder(),
          _rec13 = new _powerAssertRecorder(),
          _rec14 = new _powerAssertRecorder();

      const argv = ['-i', './test/data', '-o', './test'];
      const options = parse(argv);
      (0, _powerAssert.default)(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(options, "arguments/0/left/object").ico, "arguments/0/left") !== _rec12._capt(undefined, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.ico !== undefined)",
        filepath: "src/bin/cli.test.js",
        line: 64,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[15,18]},\"computed\":false,\"range\":[7,18]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[23,32]},\"range\":[7,32]}],\"range\":[0,33]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[15,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[19,22]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[23,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(options, "arguments/0/left/object").icns, "arguments/0/left") !== _rec13._capt(undefined, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.icns !== undefined)",
        filepath: "src/bin/cli.test.js",
        line: 65,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[24,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[15,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[20,23]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[24,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(options, "arguments/0/left/object").favicon, "arguments/0/left") !== _rec14._capt(undefined, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.favicon !== undefined)",
        filepath: "src/bin/cli.test.js",
        line: 66,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[27,36]},\"range\":[7,36]}],\"range\":[0,37]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[15,22]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[23,26]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[27,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    describe('--ico', () => {
      it('Full options', () => {
        var _rec15 = new _powerAssertRecorder(),
            _rec16 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--ico', 'name=foo', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          name: 'foo',
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec15._expr(_rec15._capt(_rec15._capt(options, "arguments/0/object").ico, "arguments/0"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 74,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec16._expr(_rec16._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 74,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('name', () => {
        var _rec17 = new _powerAssertRecorder(),
            _rec18 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--ico', 'name=foo'];
        const options = parse(argv);
        const expected = {
          name: 'foo'
        };

        _powerAssert.default.deepStrictEqual(_rec17._expr(_rec17._capt(_rec17._capt(options, "arguments/0/object").ico, "arguments/0"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 81,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec18._expr(_rec18._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 81,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('sizes', () => {
        var _rec19 = new _powerAssertRecorder(),
            _rec20 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--ico', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec19._expr(_rec19._capt(_rec19._capt(options, "arguments/0/object").ico, "arguments/0"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 88,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec20._expr(_rec20._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.ico, expected)",
          filepath: "src/bin/cli.test.js",
          line: 88,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[31,34]},\"computed\":false,\"range\":[23,34]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[36,44]}],\"range\":[0,45]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[31,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('Without options', () => {
        var _rec21 = new _powerAssertRecorder(),
            _rec22 = new _powerAssertRecorder(),
            _rec23 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--ico'];
        const options = parse(argv);
        (0, _powerAssert.default)(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(options, "arguments/0/left/object").ico, "arguments/0/left") !== _rec21._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.ico !== undefined)",
          filepath: "src/bin/cli.test.js",
          line: 94,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[15,18]},\"computed\":false,\"range\":[7,18]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[23,32]},\"range\":[7,32]}],\"range\":[0,33]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[15,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[19,22]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[23,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(options, "arguments/0/left/object").icns, "arguments/0/left") === _rec22._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.icns === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 95,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[24,33]},\"range\":[7,33]}],\"range\":[0,34]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[15,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[20,23]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[24,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(options, "arguments/0/left/object").favicon, "arguments/0/left") === _rec23._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.favicon === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 96,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[27,36]},\"range\":[7,36]}],\"range\":[0,37]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[15,22]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[23,26]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[27,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
    });
    describe('--icns', () => {
      it('Full options', () => {
        var _rec24 = new _powerAssertRecorder(),
            _rec25 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--icns', 'name=foo', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          name: 'foo',
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec24._expr(_rec24._capt(_rec24._capt(options, "arguments/0/object").icns, "arguments/0"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 105,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec25._expr(_rec25._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 105,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('name', () => {
        var _rec26 = new _powerAssertRecorder(),
            _rec27 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--icns', 'name=foo'];
        const options = parse(argv);
        const expected = {
          name: 'foo'
        };

        _powerAssert.default.deepStrictEqual(_rec26._expr(_rec26._capt(_rec26._capt(options, "arguments/0/object").icns, "arguments/0"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 112,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec27._expr(_rec27._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 112,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('sizes', () => {
        var _rec28 = new _powerAssertRecorder(),
            _rec29 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--icns', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec28._expr(_rec28._capt(_rec28._capt(options, "arguments/0/object").icns, "arguments/0"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 119,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec29._expr(_rec29._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.icns, expected)",
          filepath: "src/bin/cli.test.js",
          line: 119,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[31,35]},\"computed\":false,\"range\":[23,35]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[37,45]}],\"range\":[0,46]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[31,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('Without options', () => {
        var _rec30 = new _powerAssertRecorder(),
            _rec31 = new _powerAssertRecorder(),
            _rec32 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--icns'];
        const options = parse(argv);
        (0, _powerAssert.default)(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(options, "arguments/0/left/object").ico, "arguments/0/left") === _rec30._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.ico === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 125,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[15,18]},\"computed\":false,\"range\":[7,18]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[23,32]},\"range\":[7,32]}],\"range\":[0,33]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[15,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[23,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(options, "arguments/0/left/object").icns, "arguments/0/left") !== _rec31._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.icns !== undefined)",
          filepath: "src/bin/cli.test.js",
          line: 126,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[24,33]},\"range\":[7,33]}],\"range\":[0,34]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[15,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[20,23]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[24,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(options, "arguments/0/left/object").favicon, "arguments/0/left") === _rec32._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.favicon === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 127,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[27,36]},\"range\":[7,36]}],\"range\":[0,37]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[15,22]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[23,26]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[27,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
    });
    describe('--favicon', () => {
      it('Full options', () => {
        var _rec33 = new _powerAssertRecorder(),
            _rec34 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--favicon', 'ico=24,48', 'name=icon-', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          ico: [24, 48],
          name: 'icon-',
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec33._expr(_rec33._capt(_rec33._capt(options, "arguments/0/object").favicon, "arguments/0"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 136,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec34._expr(_rec34._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 136,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('ico', () => {
        var _rec35 = new _powerAssertRecorder(),
            _rec36 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--favicon', 'ico=24,48'];
        const options = parse(argv);
        const expected = {
          ico: [24, 48]
        };

        _powerAssert.default.deepStrictEqual(_rec35._expr(_rec35._capt(_rec35._capt(options, "arguments/0/object").favicon, "arguments/0"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 143,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec36._expr(_rec36._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 143,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('name', () => {
        var _rec37 = new _powerAssertRecorder(),
            _rec38 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--favicon', 'name=icon-'];
        const options = parse(argv);
        const expected = {
          name: 'icon-'
        };

        _powerAssert.default.deepStrictEqual(_rec37._expr(_rec37._capt(_rec37._capt(options, "arguments/0/object").favicon, "arguments/0"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 150,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec38._expr(_rec38._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 150,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('sizes', () => {
        var _rec39 = new _powerAssertRecorder(),
            _rec40 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--favicon', 'sizes=16,32'];
        const options = parse(argv);
        const expected = {
          sizes: [16, 32]
        };

        _powerAssert.default.deepStrictEqual(_rec39._expr(_rec39._capt(_rec39._capt(options, "arguments/0/object").favicon, "arguments/0"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 157,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }), _rec40._expr(_rec40._capt(expected, "arguments/1"), {
          content: "assert.deepStrictEqual(options.favicon, expected)",
          filepath: "src/bin/cli.test.js",
          line: 157,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[23,30]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[31,38]},\"computed\":false,\"range\":[23,38]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[40,48]}],\"range\":[0,49]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[23,30]},{\"type\":{\"label\":\".\"},\"range\":[30,31]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[31,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[40,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
      it('Without options', () => {
        var _rec41 = new _powerAssertRecorder(),
            _rec42 = new _powerAssertRecorder(),
            _rec43 = new _powerAssertRecorder();

        const argv = ['-i', './test/data', '-o', './test', '--favicon'];
        const options = parse(argv);
        (0, _powerAssert.default)(_rec41._expr(_rec41._capt(_rec41._capt(_rec41._capt(options, "arguments/0/left/object").ico, "arguments/0/left") === _rec41._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.ico === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 163,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"ico\",\"range\":[15,18]},\"computed\":false,\"range\":[7,18]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[23,32]},\"range\":[7,32]}],\"range\":[0,33]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"ico\",\"range\":[15,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[23,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec42._expr(_rec42._capt(_rec42._capt(_rec42._capt(options, "arguments/0/left/object").icns, "arguments/0/left") === _rec42._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.icns === undefined)",
          filepath: "src/bin/cli.test.js",
          line: 164,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"icns\",\"range\":[15,19]},\"computed\":false,\"range\":[7,19]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[24,33]},\"range\":[7,33]}],\"range\":[0,34]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"icns\",\"range\":[15,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[20,23]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[24,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert.default)(_rec43._expr(_rec43._capt(_rec43._capt(_rec43._capt(options, "arguments/0/left/object").favicon, "arguments/0/left") !== _rec43._capt(undefined, "arguments/0/right"), "arguments/0"), {
          content: "assert(options.favicon !== undefined)",
          filepath: "src/bin/cli.test.js",
          line: 165,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"favicon\",\"range\":[15,22]},\"computed\":false,\"range\":[7,22]},\"right\":{\"type\":\"Identifier\",\"name\":\"undefined\",\"range\":[27,36]},\"range\":[7,36]}],\"range\":[0,37]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"favicon\",\"range\":[15,22]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[23,26]},{\"type\":{\"label\":\"name\"},\"value\":\"undefined\",\"range\":[27,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      });
    });
  });
  describe('parseArgOption', () => {
    const parseArgOption = Module.__get__('parseArgOption');

    it('key=value', () => {
      var _rec44 = new _powerAssertRecorder(),
          _rec45 = new _powerAssertRecorder();

      const actual = parseArgOption('name=foo');
      const expected = {
        name: 'name',
        value: 'foo'
      };

      _powerAssert.default.deepStrictEqual(_rec44._expr(_rec44._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/bin/cli.test.js",
        line: 176,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec45._expr(_rec45._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/bin/cli.test.js",
        line: 176,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('value', () => {
      var _rec46 = new _powerAssertRecorder();

      const actual = parseArgOption('value');
      const expected = 'value';
      (0, _powerAssert.default)(_rec46._expr(_rec46._capt(_rec46._capt(actual, "arguments/0/left") === _rec46._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/bin/cli.test.js",
        line: 182,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});