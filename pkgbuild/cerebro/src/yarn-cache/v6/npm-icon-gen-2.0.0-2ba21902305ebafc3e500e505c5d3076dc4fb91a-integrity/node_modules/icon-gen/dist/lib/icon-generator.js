"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _del = _interopRequireDefault(require("del"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _pngGenerator = _interopRequireWildcard(require("./png-generator.js"));

var _icoGenerator = _interopRequireDefault(require("./ico-generator.js"));

var _icnsGenerator = _interopRequireDefault(require("./icns-generator.js"));

var _faviconGenerator = _interopRequireDefault(require("./favicon-generator.js"));

var _util = _interopRequireDefault(require("./util.js"));

var _logger = _interopRequireDefault(require("./logger.js"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generate an icon = require(the image file infromations.
 * @param {ImageInfo[]} images Image file informations.
 * @param {String} dest Destination directory path.
 * @param {Object} options Options.
 * @param {Logger} logger Logger.
 * @param {Function} cb Callback function.
 */
const generateIcon = (images, dest, options, logger, cb) => {
  if (!(images && 0 < images.length)) {
    cb(new Error('Targets is empty.'));
    return;
  }

  const dir = _path.default.resolve(dest);

  _mkdirp.default.sync(dir); // Select output mode


  const tasks = [];

  if (options.icns) {
    tasks.push((0, _icnsGenerator.default)(images, dir, options.icns, logger));
  }

  if (options.ico) {
    tasks.push((0, _icoGenerator.default)(images, dir, options.ico, logger));
  }

  if (options.favicon) {
    tasks.push((0, _faviconGenerator.default)(images, dir, options.favicon, logger));
  }

  Promise.all(tasks).then(results => {
    cb(null, _util.default.flattenValues(results));
  }).catch(err => {
    cb(err);
  });
};
/**
 * Generate an icon from PNG file.
 * @param {String} src Path of the PNG files direcgtory.
 * @param {String} dir Path of the output files directory.
 * @param {Object} options Options.
 * @param {Logger} logger  Logger.
 * @return {Promise} Promise object.
 */


const generateIconFromPNG = (src, dir, options, logger) => {
  return new Promise((resolve, reject) => {
    const pngDirPath = _path.default.resolve(src);

    const destDirPath = _path.default.resolve(dir);

    logger.log('Icon generetor from PNG:');
    logger.log('  src: ' + pngDirPath);
    logger.log('  dir: ' + destDirPath);
    const images = (0, _pngGenerator.GetRequiredPNGImageSizes)(options).map(size => {
      return _path.default.join(pngDirPath, size + '.png');
    }).map(path => {
      const size = Number(_path.default.basename(path, '.png'));
      return {
        path,
        size
      };
    });
    let notExistsFile = null;
    images.some(image => {
      const stat = _fs.default.statSync(image.path);

      if (!(stat && stat.isFile())) {
        notExistsFile = _path.default.basename(image.path);
        return true;
      }

      return false;
    });

    if (notExistsFile) {
      reject(new Error('"' + notExistsFile + '" does not exist.'));
      return;
    }

    generateIcon(images, dir, options, logger, (err, results) => {
      return err ? reject(err) : resolve(results);
    });
  });
};
/**
 * Generate an icon from SVG file.
 * @param {String} src Path of the SVG file.
 * @param {String} dir Path of the output files directory.
 * @param {CLIOption} options Options from command line.
 * @param {Logger} logger  Logger.
 * @return {Promise} Promise object.
 */


const generateIconFromSVG = (src, dir, options, logger) => {
  return new Promise((resolve, reject) => {
    const svgFilePath = _path.default.resolve(src);

    const destDirPath = _path.default.resolve(dir);

    logger.log('Icon generator from SVG:');
    logger.log('  src: ' + svgFilePath);
    logger.log('  dir: ' + destDirPath);

    const workDir = _util.default.createWorkDir();

    if (!workDir) {
      reject(new Error('Failed to create the working directory.'));
      return;
    }

    (0, _pngGenerator.default)(svgFilePath, workDir, options, (err, images) => {
      if (err) {
        _del.default.sync([workDir], {
          force: true
        });

        reject(err);
        return;
      }

      generateIcon(images, destDirPath, options, logger, (err2, results) => {
        _del.default.sync([workDir], {
          force: true
        });

        return err2 ? reject(err2) : resolve(results);
      });
    }, logger);
  });
};
/**
 * Check an option properties.
 * @param {Object} options Output destination the path of directory.
 * @returns {Object} Checked options.
 */


const checkOptions = options => {
  let opt = options;

  if (opt) {
    if (!opt.ico && !opt.icns && !opt.favicon) {
      opt.icns = {};
      opt.ico = {};
      opt.favicon = {};
    }
  } else {
    opt = {
      icns: {},
      ico: {},
      favicon: {}
    };
  }

  return opt;
};
/**
 * Generate an icon from SVG or PNG file.
 * @param {String} src Path of the SVG file.
 * @param {String} dest Path of the output files directory.
 * @param {Object} options Options.
 * @return {Promise} Promise object.
 */


const GenerateIcon = (src, dest, options = {}) => {
  if (!_fs.default.existsSync(src)) {
    return Promise.reject(new Error('Input file or directory is not found.'));
  }

  if (!_fs.default.existsSync(dest)) {
    return Promise.reject(new Error('Output directory is not found.'));
  }

  const logger = new _logger.default(options && options.report);
  const opt = checkOptions(options);

  if (_fs.default.statSync(src).isDirectory()) {
    return generateIconFromPNG(src, dest, opt, logger);
  } else {
    return generateIconFromSVG(src, dest, opt, logger);
  }
};

var _default = GenerateIcon;
exports.default = _default;