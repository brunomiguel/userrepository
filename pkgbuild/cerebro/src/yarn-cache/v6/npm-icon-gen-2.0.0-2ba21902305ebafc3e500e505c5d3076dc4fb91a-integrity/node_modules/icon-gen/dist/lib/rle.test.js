"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _rle = require("./rle.js");

var _rewire = _interopRequireDefault(require("rewire"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {RLE} */
describe('RLE', () => {
  const Module = (0, _rewire.default)('./rle.js');
  /** @test {RLE#packBits} */

  describe('packBits', () => {
    it('Normaly', () => {
      var _rec = new _powerAssertRecorder(),
          _rec2 = new _powerAssertRecorder();

      // Sample data : https://en.wikipedia.org/wiki/PackBits
      const src = [0xaa, 0xaa, 0xaa, 0x80, 0x00, 0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x00, 0x2a, 0x22, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa];
      const expected = [0xfe, 0xaa, 0x02, 0x80, 0x00, 0x2a, 0xfd, 0xaa, 0x03, 0x80, 0x00, 0x2a, 0x22, 0xf7, 0xaa];
      const actual = (0, _rle.PackBits)(src);

      _powerAssert.default.deepStrictEqual(_rec._expr(_rec._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 41,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec2._expr(_rec2._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 41,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {PackICNS} */

  describe('PackICNS', () => {
    it('Normaly', () => {
      var _rec3 = new _powerAssertRecorder(),
          _rec4 = new _powerAssertRecorder();

      const src = [0, 0, 0, 249, 250, 128, 100, 101];
      const actual = (0, _rle.PackICNS)(src);
      const expected = [128, 0, 4, 249, 250, 128, 100, 101];

      _powerAssert.default.deepStrictEqual(_rec3._expr(_rec3._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 51,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec4._expr(_rec4._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 51,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {UnpackBits} */

  describe('UnpackBits', () => {
    it('Normaly', () => {
      var _rec5 = new _powerAssertRecorder(),
          _rec6 = new _powerAssertRecorder();

      // Sample data : https://en.wikipedia.org/wiki/PackBits
      const src = [0xfe, 0xaa, 0x02, 0x80, 0x00, 0x2a, 0xfd, 0xaa, 0x03, 0x80, 0x00, 0x2a, 0x22, 0xf7, 0xaa];
      const expected = [0xaa, 0xaa, 0xaa, 0x80, 0x00, 0x2a, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x00, 0x2a, 0x22, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa];
      const actual = (0, _rle.UnpackBits)(src);

      _powerAssert.default.deepStrictEqual(_rec5._expr(_rec5._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 87,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec6._expr(_rec6._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/rle.test.js",
        line: 87,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {packBitsLiteralToResult} */

  describe('packBitsLiteralToResult', () => {
    const packBitsLiteralToResult = Module.__get__('packBitsLiteralToResult');

    it('Normaly', () => {
      var _rec7 = new _powerAssertRecorder(),
          _rec8 = new _powerAssertRecorder();

      _powerAssert.default.deepStrictEqual(_rec7._expr(_rec7._capt(packBitsLiteralToResult(_rec7._capt([7, 1, 5, 8], "arguments/0/arguments/0")), "arguments/0"), {
        content: "assert.deepStrictEqual(packBitsLiteralToResult([7, 1, 5, 8]), [3, 7, 1, 5, 8])",
        filepath: "src/lib/rle.test.js",
        line: 95,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"packBitsLiteralToResult\",\"range\":[23,46]},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"NumericLiteral\",\"value\":7,\"range\":[48,49]},{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[51,52]},{\"type\":\"NumericLiteral\",\"value\":5,\"range\":[54,55]},{\"type\":\"NumericLiteral\",\"value\":8,\"range\":[57,58]}],\"range\":[47,59]}],\"range\":[23,60]},{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"NumericLiteral\",\"value\":3,\"range\":[63,64]},{\"type\":\"NumericLiteral\",\"value\":7,\"range\":[66,67]},{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[69,70]},{\"type\":\"NumericLiteral\",\"value\":5,\"range\":[72,73]},{\"type\":\"NumericLiteral\",\"value\":8,\"range\":[75,76]}],\"range\":[62,77]}],\"range\":[0,78]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"packBitsLiteralToResult\",\"range\":[23,46]},{\"type\":{\"label\":\"(\"},\"range\":[46,47]},{\"type\":{\"label\":\"[\"},\"range\":[47,48]},{\"type\":{\"label\":\"num\"},\"value\":7,\"range\":[48,49]},{\"type\":{\"label\":\",\"},\"range\":[49,50]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[51,52]},{\"type\":{\"label\":\",\"},\"range\":[52,53]},{\"type\":{\"label\":\"num\"},\"value\":5,\"range\":[54,55]},{\"type\":{\"label\":\",\"},\"range\":[55,56]},{\"type\":{\"label\":\"num\"},\"value\":8,\"range\":[57,58]},{\"type\":{\"label\":\"]\"},\"range\":[58,59]},{\"type\":{\"label\":\")\"},\"range\":[59,60]},{\"type\":{\"label\":\",\"},\"range\":[60,61]},{\"type\":{\"label\":\"[\"},\"range\":[62,63]},{\"type\":{\"label\":\"num\"},\"value\":3,\"range\":[63,64]},{\"type\":{\"label\":\",\"},\"range\":[64,65]},{\"type\":{\"label\":\"num\"},\"value\":7,\"range\":[66,67]},{\"type\":{\"label\":\",\"},\"range\":[67,68]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[69,70]},{\"type\":{\"label\":\",\"},\"range\":[70,71]},{\"type\":{\"label\":\"num\"},\"value\":5,\"range\":[72,73]},{\"type\":{\"label\":\",\"},\"range\":[73,74]},{\"type\":{\"label\":\"num\"},\"value\":8,\"range\":[75,76]},{\"type\":{\"label\":\"]\"},\"range\":[76,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec8._expr(_rec8._capt([3, 7, 1, 5, 8], "arguments/1"), {
        content: "assert.deepStrictEqual(packBitsLiteralToResult([7, 1, 5, 8]), [3, 7, 1, 5, 8])",
        filepath: "src/lib/rle.test.js",
        line: 95,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"packBitsLiteralToResult\",\"range\":[23,46]},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"NumericLiteral\",\"value\":7,\"range\":[48,49]},{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[51,52]},{\"type\":\"NumericLiteral\",\"value\":5,\"range\":[54,55]},{\"type\":\"NumericLiteral\",\"value\":8,\"range\":[57,58]}],\"range\":[47,59]}],\"range\":[23,60]},{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"NumericLiteral\",\"value\":3,\"range\":[63,64]},{\"type\":\"NumericLiteral\",\"value\":7,\"range\":[66,67]},{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[69,70]},{\"type\":\"NumericLiteral\",\"value\":5,\"range\":[72,73]},{\"type\":\"NumericLiteral\",\"value\":8,\"range\":[75,76]}],\"range\":[62,77]}],\"range\":[0,78]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"packBitsLiteralToResult\",\"range\":[23,46]},{\"type\":{\"label\":\"(\"},\"range\":[46,47]},{\"type\":{\"label\":\"[\"},\"range\":[47,48]},{\"type\":{\"label\":\"num\"},\"value\":7,\"range\":[48,49]},{\"type\":{\"label\":\",\"},\"range\":[49,50]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[51,52]},{\"type\":{\"label\":\",\"},\"range\":[52,53]},{\"type\":{\"label\":\"num\"},\"value\":5,\"range\":[54,55]},{\"type\":{\"label\":\",\"},\"range\":[55,56]},{\"type\":{\"label\":\"num\"},\"value\":8,\"range\":[57,58]},{\"type\":{\"label\":\"]\"},\"range\":[58,59]},{\"type\":{\"label\":\")\"},\"range\":[59,60]},{\"type\":{\"label\":\",\"},\"range\":[60,61]},{\"type\":{\"label\":\"[\"},\"range\":[62,63]},{\"type\":{\"label\":\"num\"},\"value\":3,\"range\":[63,64]},{\"type\":{\"label\":\",\"},\"range\":[64,65]},{\"type\":{\"label\":\"num\"},\"value\":7,\"range\":[66,67]},{\"type\":{\"label\":\",\"},\"range\":[67,68]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[69,70]},{\"type\":{\"label\":\",\"},\"range\":[70,71]},{\"type\":{\"label\":\"num\"},\"value\":5,\"range\":[72,73]},{\"type\":{\"label\":\",\"},\"range\":[73,74]},{\"type\":{\"label\":\"num\"},\"value\":8,\"range\":[75,76]},{\"type\":{\"label\":\"]\"},\"range\":[76,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Empty', () => {
      var _rec9 = new _powerAssertRecorder(),
          _rec10 = new _powerAssertRecorder();

      _powerAssert.default.deepStrictEqual(_rec9._expr(_rec9._capt(packBitsLiteralToResult(_rec9._capt([], "arguments/0/arguments/0")), "arguments/0"), {
        content: "assert.deepStrictEqual(packBitsLiteralToResult([]), [])",
        filepath: "src/lib/rle.test.js",
        line: 99,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"packBitsLiteralToResult\",\"range\":[23,46]},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[],\"range\":[47,49]}],\"range\":[23,50]},{\"type\":\"ArrayExpression\",\"elements\":[],\"range\":[52,54]}],\"range\":[0,55]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"packBitsLiteralToResult\",\"range\":[23,46]},{\"type\":{\"label\":\"(\"},\"range\":[46,47]},{\"type\":{\"label\":\"[\"},\"range\":[47,48]},{\"type\":{\"label\":\"]\"},\"range\":[48,49]},{\"type\":{\"label\":\")\"},\"range\":[49,50]},{\"type\":{\"label\":\",\"},\"range\":[50,51]},{\"type\":{\"label\":\"[\"},\"range\":[52,53]},{\"type\":{\"label\":\"]\"},\"range\":[53,54]},{\"type\":{\"label\":\")\"},\"range\":[54,55]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec10._expr(_rec10._capt([], "arguments/1"), {
        content: "assert.deepStrictEqual(packBitsLiteralToResult([]), [])",
        filepath: "src/lib/rle.test.js",
        line: 99,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"packBitsLiteralToResult\",\"range\":[23,46]},\"arguments\":[{\"type\":\"ArrayExpression\",\"elements\":[],\"range\":[47,49]}],\"range\":[23,50]},{\"type\":\"ArrayExpression\",\"elements\":[],\"range\":[52,54]}],\"range\":[0,55]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"packBitsLiteralToResult\",\"range\":[23,46]},{\"type\":{\"label\":\"(\"},\"range\":[46,47]},{\"type\":{\"label\":\"[\"},\"range\":[47,48]},{\"type\":{\"label\":\"]\"},\"range\":[48,49]},{\"type\":{\"label\":\")\"},\"range\":[49,50]},{\"type\":{\"label\":\",\"},\"range\":[50,51]},{\"type\":{\"label\":\"[\"},\"range\":[52,53]},{\"type\":{\"label\":\"]\"},\"range\":[53,54]},{\"type\":{\"label\":\")\"},\"range\":[54,55]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {toUInt8} */

  describe('toUInt8', () => {
    const toUInt8 = Module.__get__('toUInt8');

    it('Normaly', () => {
      var _rec11 = new _powerAssertRecorder(),
          _rec12 = new _powerAssertRecorder(),
          _rec13 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec11._expr(_rec11._capt(_rec11._capt(toUInt8(_rec11._capt(-1, "arguments/0/left/arguments/0")), "arguments/0/left") === 255, "arguments/0"), {
        content: "assert(toUInt8(-1) === 255)",
        filepath: "src/lib/rle.test.js",
        line: 108,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toUInt8\",\"range\":[7,14]},\"arguments\":[{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"type\":\"NumericLiteral\",\"value\":1,\"range\":[16,17]},\"prefix\":true,\"range\":[15,17]}],\"range\":[7,18]},\"right\":{\"type\":\"NumericLiteral\",\"value\":255,\"range\":[23,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toUInt8\",\"range\":[7,14]},{\"type\":{\"label\":\"(\"},\"range\":[14,15]},{\"type\":{\"label\":\"+/-\"},\"value\":\"-\",\"range\":[15,16]},{\"type\":{\"label\":\"num\"},\"value\":1,\"range\":[16,17]},{\"type\":{\"label\":\")\"},\"range\":[17,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"num\"},\"value\":255,\"range\":[23,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec12._expr(_rec12._capt(_rec12._capt(toUInt8(71), "arguments/0/left") === 71, "arguments/0"), {
        content: "assert(toUInt8(71) === 71)",
        filepath: "src/lib/rle.test.js",
        line: 109,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toUInt8\",\"range\":[7,14]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":71,\"range\":[15,17]}],\"range\":[7,18]},\"right\":{\"type\":\"NumericLiteral\",\"value\":71,\"range\":[23,25]},\"range\":[7,25]}],\"range\":[0,26]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toUInt8\",\"range\":[7,14]},{\"type\":{\"label\":\"(\"},\"range\":[14,15]},{\"type\":{\"label\":\"num\"},\"value\":71,\"range\":[15,17]},{\"type\":{\"label\":\")\"},\"range\":[17,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"num\"},\"value\":71,\"range\":[23,25]},{\"type\":{\"label\":\")\"},\"range\":[25,26]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec13._expr(_rec13._capt(_rec13._capt(toUInt8(0xaa), "arguments/0/left") === 0xaa, "arguments/0"), {
        content: "assert(toUInt8(0xaa) === 0xaa)",
        filepath: "src/lib/rle.test.js",
        line: 110,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toUInt8\",\"range\":[7,14]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":170,\"range\":[15,19]}],\"range\":[7,20]},\"right\":{\"type\":\"NumericLiteral\",\"value\":170,\"range\":[25,29]},\"range\":[7,29]}],\"range\":[0,30]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toUInt8\",\"range\":[7,14]},{\"type\":{\"label\":\"(\"},\"range\":[14,15]},{\"type\":{\"label\":\"num\"},\"value\":170,\"range\":[15,19]},{\"type\":{\"label\":\")\"},\"range\":[19,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"num\"},\"value\":170,\"range\":[25,29]},{\"type\":{\"label\":\")\"},\"range\":[29,30]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Out of range', () => {
      var _rec14 = new _powerAssertRecorder(),
          _rec15 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec14._expr(_rec14._capt(_rec14._capt(toUInt8(_rec14._capt(-180, "arguments/0/left/arguments/0")), "arguments/0/left") === 76, "arguments/0"), {
        content: "assert(toUInt8(-180) === 76)",
        filepath: "src/lib/rle.test.js",
        line: 114,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toUInt8\",\"range\":[7,14]},\"arguments\":[{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"type\":\"NumericLiteral\",\"value\":180,\"range\":[16,19]},\"prefix\":true,\"range\":[15,19]}],\"range\":[7,20]},\"right\":{\"type\":\"NumericLiteral\",\"value\":76,\"range\":[25,27]},\"range\":[7,27]}],\"range\":[0,28]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toUInt8\",\"range\":[7,14]},{\"type\":{\"label\":\"(\"},\"range\":[14,15]},{\"type\":{\"label\":\"+/-\"},\"value\":\"-\",\"range\":[15,16]},{\"type\":{\"label\":\"num\"},\"value\":180,\"range\":[16,19]},{\"type\":{\"label\":\")\"},\"range\":[19,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"num\"},\"value\":76,\"range\":[25,27]},{\"type\":{\"label\":\")\"},\"range\":[27,28]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec15._expr(_rec15._capt(_rec15._capt(toUInt8(571), "arguments/0/left") === 59, "arguments/0"), {
        content: "assert(toUInt8(571) === 59)",
        filepath: "src/lib/rle.test.js",
        line: 115,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toUInt8\",\"range\":[7,14]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":571,\"range\":[15,18]}],\"range\":[7,19]},\"right\":{\"type\":\"NumericLiteral\",\"value\":59,\"range\":[24,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toUInt8\",\"range\":[7,14]},{\"type\":{\"label\":\"(\"},\"range\":[14,15]},{\"type\":{\"label\":\"num\"},\"value\":571,\"range\":[15,18]},{\"type\":{\"label\":\")\"},\"range\":[18,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[20,23]},{\"type\":{\"label\":\"num\"},\"value\":59,\"range\":[24,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {toInt8} */

  describe('toInt8', () => {
    const toInt8 = Module.__get__('toInt8');

    it('Normaly', () => {
      var _rec16 = new _powerAssertRecorder(),
          _rec17 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec16._expr(_rec16._capt(_rec16._capt(toInt8(241), "arguments/0/left") === _rec16._capt(-15, "arguments/0/right"), "arguments/0"), {
        content: "assert(toInt8(241) === -15)",
        filepath: "src/lib/rle.test.js",
        line: 123,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toInt8\",\"range\":[7,13]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":241,\"range\":[14,17]}],\"range\":[7,18]},\"right\":{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"type\":\"NumericLiteral\",\"value\":15,\"range\":[24,26]},\"prefix\":true,\"range\":[23,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toInt8\",\"range\":[7,13]},{\"type\":{\"label\":\"(\"},\"range\":[13,14]},{\"type\":{\"label\":\"num\"},\"value\":241,\"range\":[14,17]},{\"type\":{\"label\":\")\"},\"range\":[17,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"+/-\"},\"value\":\"-\",\"range\":[23,24]},{\"type\":{\"label\":\"num\"},\"value\":15,\"range\":[24,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec17._expr(_rec17._capt(_rec17._capt(toInt8(83), "arguments/0/left") === 83, "arguments/0"), {
        content: "assert(toInt8(83) === 83)",
        filepath: "src/lib/rle.test.js",
        line: 124,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toInt8\",\"range\":[7,13]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":83,\"range\":[14,16]}],\"range\":[7,17]},\"right\":{\"type\":\"NumericLiteral\",\"value\":83,\"range\":[22,24]},\"range\":[7,24]}],\"range\":[0,25]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toInt8\",\"range\":[7,13]},{\"type\":{\"label\":\"(\"},\"range\":[13,14]},{\"type\":{\"label\":\"num\"},\"value\":83,\"range\":[14,16]},{\"type\":{\"label\":\")\"},\"range\":[16,17]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[18,21]},{\"type\":{\"label\":\"num\"},\"value\":83,\"range\":[22,24]},{\"type\":{\"label\":\")\"},\"range\":[24,25]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Out of range', () => {
      var _rec18 = new _powerAssertRecorder(),
          _rec19 = new _powerAssertRecorder(),
          _rec20 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec18._expr(_rec18._capt(_rec18._capt(toInt8(_rec18._capt(-129, "arguments/0/left/arguments/0")), "arguments/0/left") === 127, "arguments/0"), {
        content: "assert(toInt8(-129) === 127)",
        filepath: "src/lib/rle.test.js",
        line: 128,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toInt8\",\"range\":[7,13]},\"arguments\":[{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"type\":\"NumericLiteral\",\"value\":129,\"range\":[15,18]},\"prefix\":true,\"range\":[14,18]}],\"range\":[7,19]},\"right\":{\"type\":\"NumericLiteral\",\"value\":127,\"range\":[24,27]},\"range\":[7,27]}],\"range\":[0,28]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toInt8\",\"range\":[7,13]},{\"type\":{\"label\":\"(\"},\"range\":[13,14]},{\"type\":{\"label\":\"+/-\"},\"value\":\"-\",\"range\":[14,15]},{\"type\":{\"label\":\"num\"},\"value\":129,\"range\":[15,18]},{\"type\":{\"label\":\")\"},\"range\":[18,19]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[20,23]},{\"type\":{\"label\":\"num\"},\"value\":127,\"range\":[24,27]},{\"type\":{\"label\":\")\"},\"range\":[27,28]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec19._expr(_rec19._capt(_rec19._capt(toInt8(195), "arguments/0/left") === _rec19._capt(-61, "arguments/0/right"), "arguments/0"), {
        content: "assert(toInt8(195) === -61)",
        filepath: "src/lib/rle.test.js",
        line: 129,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toInt8\",\"range\":[7,13]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":195,\"range\":[14,17]}],\"range\":[7,18]},\"right\":{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"argument\":{\"type\":\"NumericLiteral\",\"value\":61,\"range\":[24,26]},\"prefix\":true,\"range\":[23,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toInt8\",\"range\":[7,13]},{\"type\":{\"label\":\"(\"},\"range\":[13,14]},{\"type\":{\"label\":\"num\"},\"value\":195,\"range\":[14,17]},{\"type\":{\"label\":\")\"},\"range\":[17,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"+/-\"},\"value\":\"-\",\"range\":[23,24]},{\"type\":{\"label\":\"num\"},\"value\":61,\"range\":[24,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec20._expr(_rec20._capt(_rec20._capt(toInt8(571), "arguments/0/left") === 59, "arguments/0"), {
        content: "assert(toInt8(571) === 59)",
        filepath: "src/lib/rle.test.js",
        line: 130,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"toInt8\",\"range\":[7,13]},\"arguments\":[{\"type\":\"NumericLiteral\",\"value\":571,\"range\":[14,17]}],\"range\":[7,18]},\"right\":{\"type\":\"NumericLiteral\",\"value\":59,\"range\":[23,25]},\"range\":[7,25]}],\"range\":[0,26]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"toInt8\",\"range\":[7,13]},{\"type\":{\"label\":\"(\"},\"range\":[13,14]},{\"type\":{\"label\":\"num\"},\"value\":571,\"range\":[14,17]},{\"type\":{\"label\":\")\"},\"range\":[17,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"num\"},\"value\":59,\"range\":[23,25]},{\"type\":{\"label\":\")\"},\"range\":[25,26]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});