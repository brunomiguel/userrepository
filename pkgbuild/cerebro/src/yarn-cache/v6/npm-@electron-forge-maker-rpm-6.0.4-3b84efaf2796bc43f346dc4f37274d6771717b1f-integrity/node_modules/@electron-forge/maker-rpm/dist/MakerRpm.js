"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MakerRpm = exports.rpmArch = void 0;
const path_1 = __importDefault(require("path"));
const maker_base_1 = require("@electron-forge/maker-base");
function rpmArch(nodeArch) {
    switch (nodeArch) {
        case 'ia32':
            return 'i386';
        case 'x64':
            return 'x86_64';
        case 'armv7l':
            return 'armv7hl';
        case 'arm':
            return 'armv6hl';
        default:
            return nodeArch;
    }
}
exports.rpmArch = rpmArch;
class MakerRpm extends maker_base_1.MakerBase {
    constructor() {
        super(...arguments);
        this.name = 'rpm';
        this.defaultPlatforms = ['linux'];
        this.requiredExternalBinaries = ['rpmbuild'];
    }
    isSupportedOnCurrentPlatform() {
        return this.isInstalled('electron-installer-redhat');
    }
    async make({ dir, makeDir, targetArch }) {
        // eslint-disable-next-line node/no-missing-require
        const installer = require('electron-installer-redhat');
        const outDir = path_1.default.resolve(makeDir, 'rpm', targetArch);
        await this.ensureDirectory(outDir);
        const { packagePaths } = await installer({
            ...this.config,
            arch: rpmArch(targetArch),
            src: dir,
            dest: outDir,
            rename: undefined,
        });
        return packagePaths;
    }
}
exports.default = MakerRpm;
exports.MakerRpm = MakerRpm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFrZXJScG0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTWFrZXJScG0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLDJEQUFxRTtBQUtyRSxTQUFnQixPQUFPLENBQUMsUUFBbUI7SUFDekMsUUFBUSxRQUFRLEVBQUU7UUFDaEIsS0FBSyxNQUFNO1lBQ1QsT0FBTyxNQUFNLENBQUM7UUFDaEIsS0FBSyxLQUFLO1lBQ1IsT0FBTyxRQUFRLENBQUM7UUFDbEIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxTQUFTLENBQUM7UUFDbkIsS0FBSyxLQUFLO1lBQ1IsT0FBTyxTQUFTLENBQUM7UUFDbkI7WUFDRSxPQUFPLFFBQVEsQ0FBQztLQUNuQjtBQUNILENBQUM7QUFiRCwwQkFhQztBQUVELE1BQXFCLFFBQVMsU0FBUSxzQkFBeUI7SUFBL0Q7O1FBQ0UsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUViLHFCQUFnQixHQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlDLDZCQUF3QixHQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFzQnBELENBQUM7SUFwQkMsNEJBQTRCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQWdCO1FBQ25ELG1EQUFtRDtRQUNuRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUV2RCxNQUFNLE1BQU0sR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFeEQsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLFNBQVMsQ0FBQztZQUN2QyxHQUFHLElBQUksQ0FBQyxNQUFNO1lBQ2QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDekIsR0FBRyxFQUFFLEdBQUc7WUFDUixJQUFJLEVBQUUsTUFBTTtZQUNaLE1BQU0sRUFBRSxTQUFTO1NBQ2xCLENBQUMsQ0FBQztRQUNILE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FDRjtBQTNCRCwyQkEyQkM7QUFFUSw0QkFBUSJ9