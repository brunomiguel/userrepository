{
  "manifest": {
    "name": "postcss-preset-env",
    "version": "6.7.0",
    "description": "Convert modern CSS into something browsers understand",
    "author": {
      "name": "Jonathan Neal",
      "email": "jonathantneal@hotmail.com"
    },
    "license": "CC0-1.0",
    "repository": {
      "type": "git",
      "url": "https://github.com/csstools/postcss-preset-env.git"
    },
    "homepage": "https://github.com/csstools/postcss-preset-env#readme",
    "bugs": {
      "url": "https://github.com/csstools/postcss-preset-env/issues"
    },
    "main": "index.js",
    "module": "index.mjs",
    "files": [
      "index.js",
      "index.js.map",
      "index.mjs",
      "index.mjs.map"
    ],
    "scripts": {
      "build": "rollup -c .rollup.js --silent",
      "prepublishOnly": "npm test",
      "pretest:tape": "npm run build",
      "test": "npm run test:js && npm run test:tape",
      "test:js": "eslint src/*.js src/lib/*.js src/patch/*.js --cache --ignore-path .gitignore --quiet",
      "test:tape": "postcss-tape"
    },
    "engines": {
      "node": ">=6.0.0"
    },
    "dependencies": {
      "autoprefixer": "^9.6.1",
      "browserslist": "^4.6.4",
      "caniuse-lite": "^1.0.30000981",
      "css-blank-pseudo": "^0.1.4",
      "css-has-pseudo": "^0.10.0",
      "css-prefers-color-scheme": "^3.1.1",
      "cssdb": "^4.4.0",
      "postcss": "^7.0.17",
      "postcss-attribute-case-insensitive": "^4.0.1",
      "postcss-color-functional-notation": "^2.0.1",
      "postcss-color-gray": "^5.0.0",
      "postcss-color-hex-alpha": "^5.0.3",
      "postcss-color-mod-function": "^3.0.3",
      "postcss-color-rebeccapurple": "^4.0.1",
      "postcss-custom-media": "^7.0.8",
      "postcss-custom-properties": "^8.0.11",
      "postcss-custom-selectors": "^5.1.2",
      "postcss-dir-pseudo-class": "^5.0.0",
      "postcss-double-position-gradients": "^1.0.0",
      "postcss-env-function": "^2.0.2",
      "postcss-focus-visible": "^4.0.0",
      "postcss-focus-within": "^3.0.0",
      "postcss-font-variant": "^4.0.0",
      "postcss-gap-properties": "^2.0.0",
      "postcss-image-set-function": "^3.0.1",
      "postcss-initial": "^3.0.0",
      "postcss-lab-function": "^2.0.1",
      "postcss-logical": "^3.0.0",
      "postcss-media-minmax": "^4.0.0",
      "postcss-nesting": "^7.0.0",
      "postcss-overflow-shorthand": "^2.0.0",
      "postcss-page-break": "^2.0.0",
      "postcss-place": "^4.0.1",
      "postcss-pseudo-class-any-link": "^6.0.0",
      "postcss-replace-overflow-wrap": "^3.0.0",
      "postcss-selector-matches": "^4.0.0",
      "postcss-selector-not": "^4.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.5.0",
      "@babel/preset-env": "^7.5.2",
      "babel-eslint": "^10.0.2",
      "eslint": "^5.16.0",
      "eslint-config-dev": "^2.0.0",
      "postcss-simple-vars": "^5.0.2",
      "postcss-tape": "^4.0.0",
      "pre-commit": "^1.2.2",
      "rollup": "^1.16.6",
      "rollup-plugin-babel": "^4.3.3"
    },
    "eslintConfig": {
      "extends": "dev",
      "parser": "babel-eslint"
    },
    "keywords": [
      "postcss",
      "css",
      "postcss-plugin",
      "specifications",
      "specs",
      "features",
      "lists",
      "stages",
      "w3c",
      "csswg",
      "future",
      "next"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-preset-env-6.7.0-c34ddacf8f902383b35ad1e030f178f4cdf118a5-integrity/node_modules/postcss-preset-env/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Preset Env [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS Preset Env] lets you convert modern CSS into something most browsers\ncan understand, determining the polyfills you need based on your targeted\nbrowsers or runtime environments.\n\n```bash\nnpm install postcss-preset-env\n```\n\n```pcss\n@custom-media --viewport-medium (width <= 50rem);\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:root {\n  --mainColor: #12345678;\n}\n\nbody {\n  color: var(--mainColor);\n  font-family: system-ui;\n  overflow-wrap: break-word;\n}\n\n:--heading {\n  background-image: image-set(url(img/heading.png) 1x, url(img/heading@2x.png) 2x);\n\n  @media (--viewport-medium) {\n    margin-block: 0;\n  }\n}\n\na {\n  color: rgb(0 0 100% / 90%);\n\n  &:hover {\n    color: rebeccapurple;\n  }\n}\n\n/* becomes */\n\n:root {\n  --mainColor: rgba(18, 52, 86, 0.47059);\n}\n\nbody {\n  color: rgba(18, 52, 86, 0.47059);\n  color: var(--mainColor);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;\n  word-wrap: break-word;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  background-image: url(img/heading.png);\n}\n\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  h1, h2, h3, h4, h5, h6 {\n    background-image: url(img/heading@2x.png)\n  }\n}\n\n@media (max-width: 50rem) {\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n}\n\na {\n  color: rgba(0, 0, 255, 0.9)\n}\n\na:hover {\n  color: #639;\n}\n```\n\nWithout any configuration options, [PostCSS Preset Env] enables **Stage 2**\nfeatures and supports **all** browsers.\n\n[![Transform with Preset Env][readme-transform-with-preset-env-img]][readme-transform-with-preset-env-url]\n[![Style with Preset Env][readme-style-with-preset-env-img]][readme-style-with-preset-env-url]\n\n## Usage\n\nAdd [PostCSS Preset Env] to your project:\n\n```bash\nnpm install postcss-preset-env --save-dev\n```\n\nUse [PostCSS Preset Env] to process your CSS:\n\n```js\nconst postcssPresetEnv = require('postcss-preset-env');\n\npostcssPresetEnv.process(YOUR_CSS /*, processOptions, pluginOptions */);\n```\n\nOr use it as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssPresetEnv = require('postcss-preset-env');\n\npostcss([\n  postcssPresetEnv(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Preset Env] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |\n| --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### stage\n\nThe `stage` option determines which CSS features to polyfill, based upon their\nstability in the process of becoming implemented web standards.\n\n```js\npostcssPresetEnv({ stage: 0 })\n```\n\nThe `stage` can be `0` (experimental) through `4` (stable), or `false`. Setting\n`stage` to `false` will disable every polyfill. Doing this would only be useful\nif you intended to exclusively use the [`features`](#features) option.\n\nWithout any configuration options, [PostCSS Preset Env] enables **Stage 2**\nfeatures.\n\n### features\n\nThe `features` option enables or disables specific polyfills by ID. Passing\n`true` to a specific feature ID will enable its polyfill, while passing `false`\nwill disable it.\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css nesting rules */\n  stage: 3,\n  features: {\n    'nesting-rules': true\n  }\n})\n```\n\nPassing an object to a specific feature ID will both enable and configure it.\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css color-mod (warning on unresolved) */\n  stage: 3,\n  features: {\n    'color-mod-function': { unresolved: 'warn' }\n  }\n})\n```\n\nAny polyfills not explicitly enabled or disabled through `features` are\ndetermined by the [`stage`](#stage) option.\n\n### browsers\n\nThe `browsers` option determines which polyfills are required based upon the\nbrowsers you are supporting.\n\n[PostCSS Preset Env] supports any standard [browserslist] configuration, which\ncan be a `.browserslistrc` file, a `browserslist` key in `package.json`, or\n`browserslist` environment variables.\n\nThe `browsers` option should only be used when a standard browserslist\nconfiguration is not available.\n\n```js\npostcssPresetEnv({ browsers: 'last 2 versions' })\n```\n\nIf not valid browserslist configuration is specified, the\n[default browserslist query](https://github.com/browserslist/browserslist#queries)\nwill be used.\n\n### insertBefore / insertAfter\n\nThe `insertBefore` and `insertAfter` keys allow you to insert other PostCSS\nplugins into the chain. This is only useful if you are also using sugary\nPostCSS plugins that must execute before or after certain polyfills.\nBoth `insertBefore` and `insertAfter` support chaining one or multiple plugins.\n\n```js\nimport postcssSimpleVars from 'postcss-simple-vars';\n\npostcssPresetEnv({\n  insertBefore: {\n    'all-property': postcssSimpleVars\n  }\n})\n```\n\n### autoprefixer\n\n[PostCSS Preset Env] includes [autoprefixer] and [`browsers`](#browsers) option\nwill be passed to it automatically.\n\nSpecifying the `autoprefixer` option enables passing\n[additional options](https://github.com/postcss/autoprefixer#options)\ninto [autoprefixer].\n\n```js\npostcssPresetEnv({\n  autoprefixer: { grid: true }\n})\n```\n\nPassing `autoprefixer: false` disables autoprefixer.\n\n### preserve\n\nThe `preserve` option determines whether all plugins should receive a\n`preserve` option, which may preserve or remove otherwise-polyfilled CSS. By\ndefault, this option is not configured.\n\n```js\npostcssPresetEnv({\n  preserve: false // instruct all plugins to omit pre-polyfilled CSS\n});\n```\n\n### importFrom\n\nThe `importFrom` option specifies sources where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  importFrom: 'path/to/file.css'\n});\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill use different namespaces to import different kinds of variables.\n\n```js\npostcssPresetEnv({\n  importFrom: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    },\n    () => {\n      const customMedia = { '--small-viewport': '(max-width: 30em)' };\n      const customProperties = { '--color': 'red' };\n      const customSelectors = { ':--heading': 'h1, h2, h3' };\n      const environmentVariables = { '--branding-padding': '20px' };\n\n      return { customMedia, customProperties, customSelectors, environmentVariables };\n    }\n  ]\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  exportTo: 'path/to/file.css'\n});\n```\n\nMultiple destinations can be passed into this option as well, and they will be\nparsed in the order they are received. JavaScript files, JSON files, and\nobjects will use different namespaces to import different kinds of variables.\n\n```js\nconst cachedObject = {};\n\npostcssPresetEnv({\n  exportTo: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    cachedObject,\n    variables => {\n      if ('customProperties' in variables) {\n        // do something special with customProperties\n      }\n\n      Object.assign(cachedObject, variables);\n    }\n  ]\n});\n```\n\n[cli-img]: https://img.shields.io/travis/csstools/postcss-preset-env/master.svg\n[cli-url]: https://travis-ci.org/csstools/postcss-preset-env\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-preset-env.svg\n[npm-url]: https://www.npmjs.com/package/postcss-preset-env\n\n[autoprefixer]: https://github.com/postcss/autoprefixer\n[browserslist]: https://github.com/browserslist/browserslist#readme\n[caniuse]: https://caniuse.com/\n[cssdb]: https://cssdb.org/\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Preset Env]: https://github.com/csstools/postcss-preset-env\n[readme-style-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-style-with-preset-env.svg\n[readme-style-with-preset-env-url]: https://codepen.io/pen?template=OZRovK\n[readme-transform-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-transform-with-preset-env.svg\n[readme-transform-with-preset-env-url]: https://csstools.github.io/postcss-preset-env/\n",
    "licenseText": "# CC0 1.0 Universal\n\n## Statement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an “owner”) of an original work of\nauthorship and/or a database (each, a “Work”).\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific works\n(“Commons”) that the public can reliably and without fear of later claims of\ninfringement build upon, modify, incorporate in other works, reuse and\nredistribute as freely as possible in any form whatsoever and for any purposes,\nincluding without limitation commercial purposes. These owners may contribute\nto the Commons to promote the ideal of a free culture and the further\nproduction of creative, cultural and scientific works, or to gain reputation or\ngreater distribution for their Work in part through the use and efforts of\nothers.\n\nFor these and/or other purposes and motivations, and without any expectation of\nadditional consideration or compensation, the person associating CC0 with a\nWork (the “Affirmer”), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work and\npublicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\n   protected by copyright and related or neighboring rights (“Copyright and\n   Related Rights”). Copyright and Related Rights include, but are not limited\n   to, the following:\n   1. the right to reproduce, adapt, distribute, perform, display, communicate,\n      and translate a Work;\n   2. moral rights retained by the original author(s) and/or performer(s);\n   3. publicity and privacy rights pertaining to a person’s image or likeness\n      depicted in a Work;\n   4. rights protecting against unfair competition in regards to a Work,\n      subject to the limitations in paragraph 4(i), below;\n   5. rights protecting the extraction, dissemination, use and reuse of data in\n      a Work;\n   6. database rights (such as those arising under Directive 96/9/EC of the\n      European Parliament and of the Council of 11 March 1996 on the legal\n      protection of databases, and under any national implementation thereof,\n      including any amended or successor version of such directive); and\n   7. other similar, equivalent or corresponding rights throughout the world\n      based on applicable law or treaty, and any national implementations\n      thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\n   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\n   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright\n   and Related Rights and associated claims and causes of action, whether now\n   known or unknown (including existing as well as future claims and causes of\n   action), in the Work (i) in all territories worldwide, (ii) for the maximum\n   duration provided by applicable law or treaty (including future time\n   extensions), (iii) in any current or future medium and for any number of\n   copies, and (iv) for any purpose whatsoever, including without limitation\n   commercial, advertising or promotional purposes (the “Waiver”). Affirmer\n   makes the Waiver for the benefit of each member of the public at large and\n   to the detriment of Affirmer’s heirs and successors, fully intending that\n   such Waiver shall not be subject to revocation, rescission, cancellation,\n   termination, or any other legal or equitable action to disrupt the quiet\n   enjoyment of the Work by the public as contemplated by Affirmer’s express\n   Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\n   judged legally invalid or ineffective under applicable law, then the Waiver\n   shall be preserved to the maximum extent permitted taking into account\n   Affirmer’s express Statement of Purpose. In addition, to the extent the\n   Waiver is so judged Affirmer hereby grants to each affected person a\n   royalty-free, non transferable, non sublicensable, non exclusive,\n   irrevocable and unconditional license to exercise Affirmer’s Copyright and\n   Related Rights in the Work (i) in all territories worldwide, (ii) for the\n   maximum duration provided by applicable law or treaty (including future time\n   extensions), (iii) in any current or future medium and for any number of\n   copies, and (iv) for any purpose whatsoever, including without limitation\n   commercial, advertising or promotional purposes (the “License”). The License\n   shall be deemed effective as of the date CC0 was applied by Affirmer to the\n   Work. Should any part of the License for any reason be judged legally\n   invalid or ineffective under applicable law, such partial invalidity or\n   ineffectiveness shall not invalidate the remainder of the License, and in\n   such case Affirmer hereby affirms that he or she will not (i) exercise any\n   of his or her remaining Copyright and Related Rights in the Work or (ii)\n   assert any associated claims and causes of action with respect to the Work,\n   in either case contrary to Affirmer’s express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n   1. No trademark or patent rights held by Affirmer are waived, abandoned,\n      surrendered, licensed or otherwise affected by this document.\n   2. Affirmer offers the Work as-is and makes no representations or warranties\n      of any kind concerning the Work, express, implied, statutory or\n      otherwise, including without limitation warranties of title,\n      merchantability, fitness for a particular purpose, non infringement, or\n      the absence of latent or other defects, accuracy, or the present or\n      absence of errors, whether or not discoverable, all to the greatest\n      extent permissible under applicable law.\n   3. Affirmer disclaims responsibility for clearing rights of other persons\n      that may apply to the Work or any use thereof, including without\n      limitation any person’s Copyright and Related Rights in the Work.\n      Further, Affirmer disclaims responsibility for obtaining any necessary\n      consents, permissions or other rights required for any use of the Work.\n   4. Affirmer understands and acknowledges that Creative Commons is not a\n      party to this document and has no duty or obligation with respect to this\n      CC0 or use of the Work.\n\nFor more information, please see\nhttp://creativecommons.org/publicdomain/zero/1.0/.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-preset-env/-/postcss-preset-env-6.7.0.tgz#c34ddacf8f902383b35ad1e030f178f4cdf118a5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-preset-env/-/postcss-preset-env-6.7.0.tgz",
    "hash": "c34ddacf8f902383b35ad1e030f178f4cdf118a5",
    "integrity": "sha512-eU4/K5xzSFwUFJ8hTdTQzo2RBLbDVt83QZrAvI07TULOkmyQlnYlpwep+2yIK+K+0KlZO4BvFcleOCCcUtwchg==",
    "registry": "npm",
    "packageName": "postcss-preset-env",
    "cacheIntegrity": "sha512-eU4/K5xzSFwUFJ8hTdTQzo2RBLbDVt83QZrAvI07TULOkmyQlnYlpwep+2yIK+K+0KlZO4BvFcleOCCcUtwchg== sha1-w03az4+QI4OzWtHgMPF49M3xGKU="
  },
  "registry": "npm",
  "hash": "c34ddacf8f902383b35ad1e030f178f4cdf118a5"
}