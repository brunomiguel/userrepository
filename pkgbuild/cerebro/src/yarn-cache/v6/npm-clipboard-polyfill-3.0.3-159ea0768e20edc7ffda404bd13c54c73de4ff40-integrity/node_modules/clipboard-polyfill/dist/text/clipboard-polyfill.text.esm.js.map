{"version":3,"file":"clipboard-polyfill.text.esm.js","sources":["../../src/ClipboardItem/data-types.ts","../../src/debug.ts","../../src/globals.ts","../../src/strategies/internet-explorer.ts","../../src/strategies/dom.ts","../../src/implementations/write-fallback.ts","../../src/implementations/text.ts"],"sourcesContent":["export const TEXT_PLAIN = \"text/plain\";\nexport const TEXT_HTML = \"text/html\";\n","/******** Debug Logging ********/\n\n// tslint:disable-next-line: no-empty\nlet debugLogImpl = (s: string) => {};\n\nexport function debugLog(s: string) {\n  debugLogImpl(s);\n}\n\nexport function setDebugLog(logFn: (s: string) => void) {\n  debugLogImpl = logFn;\n}\n\n/******** Warnings ********/\n\nlet showWarnings = true;\n\nexport function suppressWarnings() {\n  showWarnings = false;\n}\n\nexport function shouldShowWarnings(): boolean {\n  return showWarnings;\n}\n\n// Workaround for:\n// - IE9 (can't bind console functions directly), and\n// - Edge Issue #14495220 (referencing `console` without F12 Developer Tools can cause an exception)\nfunction warnOrLog() {\n  // tslint:disable-next-line: no-console\n  (console.warn || console.log).apply(console, arguments);\n}\n\nexport const warn = warnOrLog.bind(\"[clipboard-polyfill]\");\n","// We cache the references so that callers can do the following without causing infinite recursion/bugs:\n//\n//     import * as clipboard from \"clipboard-polyfill\";\n//     navigator.clipboard = clipboard;\n//\n//     import { ClipboardItem } from \"clipboard-polyfill\";\n//     window.ClipboardItem = clipboard;\n//\n// Note that per the spec:\n//\n// - is *not* possible to overwrite `navigator.clipboard`. https://www.w3.org/TR/clipboard-apis/#navigator-interface\n// - it *may* be possible to overwrite `window.ClipboardItem`.\n//\n// Chrome 83 and Safari 13.1 match this. We save the original\n// `navigator.clipboard` anyhow, because 1) it doesn't cost more code (in fact,\n// it probably saves code), and 2) just in case an unknown/future implementation\n// allows overwriting `navigator.clipboard` like this.\n\nimport {\n  ClipboardItemConstructor,\n  Clipboard,\n  ClipboardItems,\n} from \"./ClipboardItem/spec\";\n\nconst originalNavigator =\n  typeof navigator === \"undefined\" ? undefined : navigator;\nconst originalNavigatorClipboard:\n  | Clipboard\n  | undefined = originalNavigator?.clipboard as any;\nexport const originalNavigatorClipboardRead:\n  | (() => Promise<ClipboardItems>)\n  | undefined = originalNavigatorClipboard?.read?.bind(\n  originalNavigatorClipboard\n);\nexport const originalNavigatorClipboardReadText:\n  | (() => Promise<string>)\n  | undefined = originalNavigatorClipboard?.readText?.bind(\n  originalNavigatorClipboard\n);\nexport const originalNavigatorClipboardWrite:\n  | ((data: ClipboardItems) => Promise<void>)\n  | undefined = originalNavigatorClipboard?.write?.bind(\n  originalNavigatorClipboard\n);\nexport const originalNavigatorClipboardWriteText:\n  | ((data: string) => Promise<void>)\n  | undefined = originalNavigatorClipboard?.writeText?.bind(\n  originalNavigatorClipboard\n);\n\n// The spec specifies that this goes on `window`, not e.g. `globalThis`. It's not (currently) available in workers.\nexport const originalWindow =\n  typeof window === \"undefined\" ? undefined : window;\nexport const originalWindowClipboardItem: ClipboardItemConstructor | undefined =\n  originalWindow?.ClipboardItem;\n","import { originalWindow } from \"../globals\";\n\ninterface IEWindow extends Window {\n  clipboardData: {\n    setData: (key: string, value: string) => boolean;\n    // Always results in a string: https://msdn.microsoft.com/en-us/library/ms536436(v=vs.85).aspx\n    getData: (key: string) => string;\n  };\n}\n\nconst ieWindow = (originalWindow as unknown) as IEWindow;\n\nexport function seemToBeInIE(): boolean {\n  return (\n    typeof ClipboardEvent === \"undefined\" &&\n    typeof ieWindow.clipboardData !== \"undefined\" &&\n    typeof ieWindow.clipboardData.setData !== \"undefined\"\n  );\n}\n\nexport function writeTextIE(text: string): boolean {\n  // IE supports text or URL, but not HTML: https://msdn.microsoft.com/en-us/library/ms536744(v=vs.85).aspx\n  // TODO: Write URLs to `text/uri-list`? https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types\n  return ieWindow.clipboardData.setData(\"Text\", text);\n}\n\n// Returns \"\" if the read failed, e.g. because the user rejected the permission.\nexport async function readTextIE(): Promise<string> {\n  const text = ieWindow.clipboardData.getData(\"Text\");\n  if (text === \"\") {\n    throw new Error(\n      \"Empty clipboard or could not read plain text from clipboard\"\n    );\n  }\n  return text;\n}\n","import { StringItem } from \"../ClipboardItem/convert\";\nimport { TEXT_PLAIN } from \"../ClipboardItem/data-types\";\nimport { debugLog } from \"../debug\";\n\n/******** Implementations ********/\n\nclass FallbackTracker {\n  public success: boolean = false;\n}\n\nfunction copyListener(\n  tracker: FallbackTracker,\n  data: StringItem,\n  e: ClipboardEvent\n): void {\n  debugLog(\"listener called\");\n  tracker.success = true;\n  // tslint:disable-next-line: forin\n  for (const type in data) {\n    const value = data[type];\n    const clipboardData = e.clipboardData!;\n    clipboardData.setData(type, value);\n    if (type === TEXT_PLAIN && clipboardData.getData(type) !== value) {\n      debugLog(\"setting text/plain failed\");\n      tracker.success = false;\n    }\n  }\n  e.preventDefault();\n}\n\nexport function execCopy(data: StringItem): boolean {\n  const tracker = new FallbackTracker();\n  const listener = copyListener.bind(this, tracker, data);\n\n  document.addEventListener(\"copy\", listener);\n  try {\n    // We ignore the return value, since FallbackTracker tells us whether the\n    // listener was called. It seems that checking the return value here gives\n    // us no extra information in any browser.\n    document.execCommand(\"copy\");\n  } finally {\n    document.removeEventListener(\"copy\", listener);\n  }\n  return tracker.success;\n}\n\n// Temporarily select a DOM element, so that `execCommand()` is not rejected.\nexport function copyUsingTempSelection(\n  e: HTMLElement,\n  data: StringItem\n): boolean {\n  selectionSet(e);\n  const success = execCopy(data);\n  selectionClear();\n  return success;\n}\n\n// Create a temporary DOM element to select, so that `execCommand()` is not\n// rejected.\nexport function copyUsingTempElem(data: StringItem): boolean {\n  const tempElem = document.createElement(\"div\");\n  // Setting an individual property does not support `!important`, so we set the\n  // whole style instead of just the `-webkit-user-select` property.\n  tempElem.setAttribute(\"style\", \"-webkit-user-select: text !important\");\n  // Place some text in the elem so that Safari has something to select.\n  tempElem.textContent = \"temporary element\";\n  document.body.appendChild(tempElem);\n\n  const success = copyUsingTempSelection(tempElem, data);\n\n  document.body.removeChild(tempElem);\n  return success;\n}\n\n// Uses shadow DOM.\nexport function copyTextUsingDOM(str: string): boolean {\n  debugLog(\"copyTextUsingDOM\");\n\n  const tempElem = document.createElement(\"div\");\n  // Setting an individual property does not support `!important`, so we set the\n  // whole style instead of just the `-webkit-user-select` property.\n  tempElem.setAttribute(\"style\", \"-webkit-user-select: text !important\");\n  // Use shadow DOM if available.\n  let spanParent: Node = tempElem;\n  if (tempElem.attachShadow) {\n    debugLog(\"Using shadow DOM.\");\n    spanParent = tempElem.attachShadow({ mode: \"open\" });\n  }\n\n  const span = document.createElement(\"span\");\n  span.innerText = str;\n\n  spanParent.appendChild(span);\n  document.body.appendChild(tempElem);\n  selectionSet(span);\n\n  const result = document.execCommand(\"copy\");\n\n  selectionClear();\n  document.body.removeChild(tempElem);\n\n  return result;\n}\n\n/******** Selection ********/\n\nfunction selectionSet(elem: Element): void {\n  const sel = document.getSelection();\n  if (sel) {\n    const range = document.createRange();\n    range.selectNodeContents(elem);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n\nfunction selectionClear(): void {\n  const sel = document.getSelection();\n  if (sel) {\n    sel.removeAllRanges();\n  }\n}\n","import { StringItem } from \"../ClipboardItem/convert\";\nimport { TEXT_PLAIN } from \"../ClipboardItem/data-types\";\nimport { debugLog } from \"../debug\";\nimport {\n  copyTextUsingDOM,\n  copyUsingTempElem,\n  copyUsingTempSelection,\n  execCopy,\n} from \"../strategies/dom\";\nimport { seemToBeInIE, writeTextIE } from \"../strategies/internet-explorer\";\n\n// Note: the fallback order is carefully tuned for compatibility. It might seem\n// safe to move some of them around, but do not do so without testing all browsers.\nexport async function writeFallback(stringItem: StringItem): Promise<boolean> {\n  const hasTextPlain = TEXT_PLAIN in stringItem;\n\n  // Internet Explorer\n  if (seemToBeInIE()) {\n    if (!hasTextPlain) {\n      throw new Error(\"No `text/plain` value was specified.\");\n    }\n    if (writeTextIE(stringItem[TEXT_PLAIN])) {\n      return true;\n    } else {\n      throw new Error(\"Copying failed, possibly because the user rejected it.\");\n    }\n  }\n\n  if (execCopy(stringItem)) {\n    debugLog(\"regular execCopy worked\");\n    return true;\n  }\n\n  // Success detection on Edge is not possible, due to bugs in all 4\n  // detection mechanisms we could try to use. Assume success.\n  if (navigator.userAgent.indexOf(\"Edge\") > -1) {\n    debugLog('UA \"Edge\" => assuming success');\n    return true;\n  }\n\n  // Fallback 1 for desktop Safari.\n  if (copyUsingTempSelection(document.body, stringItem)) {\n    debugLog(\"copyUsingTempSelection worked\");\n    return true;\n  }\n\n  // Fallback 2 for desktop Safari.\n  if (copyUsingTempElem(stringItem)) {\n    debugLog(\"copyUsingTempElem worked\");\n    return true;\n  }\n\n  // Fallback for iOS Safari.\n  if (copyTextUsingDOM(stringItem[TEXT_PLAIN])) {\n    debugLog(\"copyTextUsingDOM worked\");\n    return true;\n  }\n\n  return false;\n}\n","import { StringItem } from \"../ClipboardItem/convert\";\nimport { TEXT_PLAIN } from \"../ClipboardItem/data-types\";\nimport { debugLog } from \"../debug\";\nimport {\n  originalNavigatorClipboardReadText,\n  originalNavigatorClipboardWriteText,\n} from \"../globals\";\nimport { readTextIE, seemToBeInIE } from \"../strategies/internet-explorer\";\nimport { writeFallback } from \"./write-fallback\";\n\nfunction stringToStringItem(s: string): StringItem {\n  const stringItem: StringItem = {};\n  stringItem[TEXT_PLAIN] = s;\n  return stringItem;\n}\n\nexport async function writeText(s: string): Promise<void> {\n  // Use the browser implementation if it exists.\n  if (originalNavigatorClipboardWriteText) {\n    debugLog(\"Using `navigator.clipboard.writeText()`.\");\n    return originalNavigatorClipboardWriteText(s);\n  }\n\n  if (!writeFallback(stringToStringItem(s))) {\n    throw new Error(\"writeText() failed\");\n  }\n}\n\nexport async function readText(): Promise<string> {\n  // Use the browser implementation if it exists.\n  if (originalNavigatorClipboardReadText) {\n    debugLog(\"Using `navigator.clipboard.readText()`.\");\n    return originalNavigatorClipboardReadText();\n  }\n\n  // Fallback for IE.\n  if (seemToBeInIE()) {\n    debugLog(\"Reading text using IE strategy.\");\n    return readTextIE();\n  }\n\n  throw new Error(\"Read is not supported in your browser.\");\n}\n"],"names":["debugLogImpl","s","debugLog","setDebugLog","logFn","console","warn","log","apply","arguments","bind","originalNavigator","navigator","undefined","originalNavigatorClipboard","clipboard","originalNavigatorClipboardReadText","read","readText","originalNavigatorClipboardWriteText","write","writeText","originalWindow","window","ieWindow","ClipboardItem","seemToBeInIE","ClipboardEvent","clipboardData","setData","readTextIE","text","getData","Error","this","copyListener","tracker","data","e","type","success","value","preventDefault","execCopy","FallbackTracker","listener","document","addEventListener","execCommand","removeEventListener","copyUsingTempSelection","selectionSet","selectionClear","elem","sel","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","writeFallback","stringItem","hasTextPlain","userAgent","indexOf","body","tempElem","createElement","setAttribute","textContent","appendChild","removeChild","copyUsingTempElem","str","spanParent","attachShadow","mode","span","innerText","result","copyTextUsingDOM","stringToStringItem"],"mappings":"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"}