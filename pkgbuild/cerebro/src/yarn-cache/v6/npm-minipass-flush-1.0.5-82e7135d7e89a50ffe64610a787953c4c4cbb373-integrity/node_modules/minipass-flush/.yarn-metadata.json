{
  "manifest": {
    "name": "minipass-flush",
    "version": "1.0.5",
    "description": "A Minipass stream that calls a flush function before emitting 'end'",
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "https://izs.me"
    },
    "license": "ISC",
    "scripts": {
      "test": "tap",
      "snap": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --follow-tags"
    },
    "tap": {
      "check-coverage": true
    },
    "devDependencies": {
      "tap": "^14.6.9"
    },
    "dependencies": {
      "minipass": "^3.0.0"
    },
    "files": [
      "index.js"
    ],
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/isaacs/minipass-flush.git"
    },
    "keywords": [
      "minipass",
      "flush",
      "stream"
    ],
    "engines": {
      "node": ">= 8"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-minipass-flush-1.0.5-82e7135d7e89a50ffe64610a787953c4c4cbb373-integrity/node_modules/minipass-flush/package.json",
    "readmeFilename": "README.md",
    "readme": "# minipass-flush\n\nA Minipass stream that calls a flush function before emitting 'end'\n\n## USAGE\n\n```js\nconst Flush = require('minipass-flush')\ncons f = new Flush({\n  flush (cb) {\n    // call the cb when done, or return a promise\n    // the 'end' event will wait for it, along with\n    // close, finish, and prefinish.\n    // call the cb with an error, or return a rejecting\n    // promise to emit 'error' instead of doing the 'end'\n    return rerouteAllEncryptions().then(() => clearAllChannels())\n  },\n  // all other minipass options accepted as well\n})\n\nsomeDataSource.pipe(f).on('end', () => {\n  // proper flushing has been accomplished\n})\n\n// Or as a subclass implementing a 'flush' method:\nclass MyFlush extends Flush {\n  flush (cb) {\n    // old fashioned callback style!\n    rerouteAllEncryptions(er => {\n      if (er)\n        return cb(er)\n      clearAllChannels(er => {\n        if (er)\n          cb(er)\n        cb()\n      })\n    })\n  }\n}\n```\n\nThat's about it.\n\nIf your `flush` method doesn't have to do anything asynchronous, then it's\nbetter to call the callback right away in this tick, rather than returning\n`Promise.resolve()`, so that the `end` event can happen as soon as\npossible.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/minipass-flush/-/minipass-flush-1.0.5.tgz#82e7135d7e89a50ffe64610a787953c4c4cbb373",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/minipass-flush/-/minipass-flush-1.0.5.tgz",
    "hash": "82e7135d7e89a50ffe64610a787953c4c4cbb373",
    "integrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==",
    "registry": "npm",
    "packageName": "minipass-flush",
    "cacheIntegrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw== sha1-gucTXX6JpQ/+ZGEKeHlTxMTLs3M="
  },
  "registry": "npm",
  "hash": "82e7135d7e89a50ffe64610a787953c4c4cbb373"
}