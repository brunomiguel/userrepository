{
  "manifest": {
    "name": "axios",
    "version": "1.2.2",
    "description": "Promise based HTTP client for the browser and node.js",
    "main": "index.js",
    "exports": {
      ".": {
        "types": {
          "require": "./index.d.cts",
          "default": "./index.d.ts"
        },
        "browser": {
          "require": "./dist/browser/axios.cjs",
          "default": "./index.js"
        },
        "default": {
          "require": "./dist/node/axios.cjs",
          "default": "./index.js"
        }
      },
      "./package.json": "./package.json"
    },
    "type": "module",
    "types": "index.d.ts",
    "scripts": {
      "test": "npm run test:eslint && npm run test:mocha && npm run test:karma && npm run test:dtslint && npm run test:exports",
      "test:eslint": "node bin/ssl_hotfix.js eslint lib/**/*.js",
      "test:dtslint": "node bin/ssl_hotfix.js dtslint",
      "test:mocha": "node bin/ssl_hotfix.js mocha test/unit/**/*.js --timeout 30000 --exit",
      "test:exports": "node bin/ssl_hotfix.js mocha test/module/test.js --timeout 30000 --exit",
      "test:karma": "node bin/ssl_hotfix.js cross-env LISTEN_ADDR=:: karma start karma.conf.cjs --single-run",
      "test:karma:server": "node bin/ssl_hotfix.js cross-env karma start karma.conf.cjs",
      "test:build:version": "node ./bin/check-build-version.js",
      "start": "node ./sandbox/server.js",
      "preversion": "gulp version && npm test",
      "version": "npm run build && git add dist && git add package.json",
      "prepublishOnly": "npm run test:build:version",
      "postpublish": "git push && git push --tags",
      "build": "gulp clear && cross-env NODE_ENV=production rollup -c -m",
      "examples": "node ./examples/server.js",
      "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
      "fix": "eslint --fix lib/**/*.js",
      "prepare": "husky install && npm run prepare:hooks",
      "prepare:hooks": "npx husky set .husky/commit-msg \"npx commitlint --edit $1\"",
      "release:dry": "release-it --dry-run --no-npm",
      "release:info": "release-it --release-version",
      "release:beta:no-npm": "release-it --preRelease=beta --no-npm",
      "release:beta": "release-it --preRelease=beta",
      "release:no-npm": "release-it --no-npm",
      "release:changelog:fix": "node ./bin/injectContributorsList.js",
      "release": "release-it"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/axios/axios.git"
    },
    "keywords": [
      "xhr",
      "http",
      "ajax",
      "promise",
      "node"
    ],
    "author": {
      "name": "Matt Zabriskie"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/axios/axios/issues"
    },
    "homepage": "https://axios-http.com/",
    "devDependencies": {
      "@babel/core": "^7.18.2",
      "@babel/preset-env": "^7.18.2",
      "@commitlint/cli": "^17.3.0",
      "@commitlint/config-conventional": "^17.3.0",
      "@release-it/conventional-changelog": "^5.1.1",
      "@rollup/plugin-babel": "^5.3.1",
      "@rollup/plugin-commonjs": "^15.1.0",
      "@rollup/plugin-json": "^4.1.0",
      "@rollup/plugin-multi-entry": "^4.0.0",
      "@rollup/plugin-node-resolve": "^9.0.0",
      "abortcontroller-polyfill": "^1.7.3",
      "auto-changelog": "^2.4.0",
      "body-parser": "^1.20.0",
      "coveralls": "^3.1.1",
      "cross-env": "^7.0.3",
      "dev-null": "^0.1.1",
      "dtslint": "^4.2.1",
      "es6-promise": "^4.2.8",
      "eslint": "^8.17.0",
      "express": "^4.18.1",
      "formidable": "^2.0.1",
      "fs-extra": "^10.1.0",
      "get-stream": "^3.0.0",
      "gulp": "^4.0.2",
      "handlebars": "^4.7.7",
      "husky": "^8.0.2",
      "istanbul-instrumenter-loader": "^3.0.1",
      "jasmine-core": "^2.4.1",
      "karma": "^6.3.17",
      "karma-chrome-launcher": "^3.1.1",
      "karma-firefox-launcher": "^2.1.2",
      "karma-jasmine": "^1.1.1",
      "karma-jasmine-ajax": "^0.1.13",
      "karma-rollup-preprocessor": "^7.0.8",
      "karma-safari-launcher": "^1.0.0",
      "karma-sauce-launcher": "^4.3.6",
      "karma-sinon": "^1.0.5",
      "karma-sourcemap-loader": "^0.3.8",
      "minimist": "^1.2.7",
      "mocha": "^10.0.0",
      "multer": "^1.4.4",
      "release-it": "^15.5.1",
      "rollup": "^2.67.0",
      "rollup-plugin-auto-external": "^2.0.0",
      "rollup-plugin-bundle-size": "^1.0.3",
      "rollup-plugin-terser": "^7.0.2",
      "sinon": "^4.5.0",
      "stream-throttle": "^0.1.3",
      "string-replace-async": "^3.0.2",
      "terser-webpack-plugin": "^4.2.3",
      "typescript": "^4.8.4",
      "url-search-params": "^0.10.0"
    },
    "browser": {
      "./lib/adapters/http.js": "./lib/helpers/null.js",
      "./lib/platform/node/index.js": "./lib/platform/browser/index.js"
    },
    "jsdelivr": "dist/axios.min.js",
    "unpkg": "dist/axios.min.js",
    "typings": "./index.d.ts",
    "dependencies": {
      "follow-redirects": "^1.15.0",
      "form-data": "^4.0.0",
      "proxy-from-env": "^1.1.0"
    },
    "bundlesize": [
      {
        "path": "./dist/axios.min.js",
        "threshold": "5kB"
      }
    ],
    "contributors": [
      {
        "name": "Matt Zabriskie",
        "url": "https://github.com/mzabriskie"
      },
      {
        "name": "Nick Uraltsev",
        "url": "https://github.com/nickuraltsev"
      },
      {
        "name": "Jay",
        "url": "https://github.com/jasonsaayman"
      },
      {
        "name": "Dmitriy Mozgovoy",
        "url": "https://github.com/DigitalBrainJS"
      },
      {
        "name": "Emily Morehouse",
        "url": "https://github.com/emilyemorehouse"
      },
      {
        "name": "Rubén Norte",
        "url": "https://github.com/rubennorte"
      },
      {
        "name": "Justin Beckwith",
        "url": "https://github.com/JustinBeckwith"
      },
      {
        "name": "Martti Laine",
        "url": "https://github.com/codeclown"
      },
      {
        "name": "Xianming Zhong",
        "url": "https://github.com/chinesedfan"
      },
      {
        "name": "Rikki Gibson",
        "url": "https://github.com/RikkiGibson"
      },
      {
        "name": "Remco Haszing",
        "url": "https://github.com/remcohaszing"
      },
      {
        "name": "Yasu Flores",
        "url": "https://github.com/yasuf"
      },
      {
        "name": "Ben Carp",
        "url": "https://github.com/carpben"
      },
      {
        "name": "Daniel Lopretto",
        "url": "https://github.com/timemachine3030"
      }
    ],
    "sideEffects": false,
    "release-it": {
      "git": {
        "commitMessage": "chore(release): v${version}"
      },
      "github": {
        "release": true
      },
      "npm": {
        "publish": false,
        "ignoreVersion": false
      },
      "plugins": {
        "@release-it/conventional-changelog": {
          "preset": "angular",
          "infile": "CHANGELOG.md",
          "header": "# Changelog"
        }
      },
      "hooks": {
        "before:init": "npm test",
        "after:bump": "gulp version --bump ${version} && npm run build && npm run test:build:version && git add ./dist",
        "before:release": "npm run release:changelog:fix && git add CHANGELOG.md",
        "after:release": "echo Successfully released ${name} v${version} to ${repo.repository}."
      }
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-axios-1.2.2-72681724c6e6a43a9fea860fc558127dbe32f9f1-integrity/node_modules/axios/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">\n   <b>\n        <a href=\"https://axios-http.com\"><img src=\"https://axios-http.com/assets/logo.svg\" /></a><br>\n    </b>\n</h1>\n\n<p align=\"center\">Promise based HTTP client for the browser and node.js</p>\n\n<p align=\"center\">\n    <a href=\"https://axios-http.com/\"><b>Website</b></a> •\n    <a href=\"https://axios-http.com/docs/intro\"><b>Documentation</b></a>\n</p>\n\n<div align=\"center\">\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![CDNJS](https://img.shields.io/cdnjs/v/axios.svg?style=flat-square)](https://cdnjs.com/libraries/axios)\n[![Build status](https://img.shields.io/github/workflow/status/axios/axios/ci?label=CI&logo=github&style=flat-square)](https://github.com/axios/axios/actions/workflows/ci.yml)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&style=flat-square)](https://gitpod.io/#https://github.com/axios/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![install size](https://img.shields.io/badge/dynamic/json?url=https://packagephobia.com/v2/api.json?p=axios&query=$.install.pretty&label=install%20size&style=flat-square)](https://packagephobia.now.sh/result?p=axios)\n[![npm bundle size](https://img.shields.io/bundlephobia/minzip/axios?style=flat-square)](https://bundlephobia.com/package/axios@latest)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](https://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n[![code helpers](https://www.codetriage.com/axios/axios/badges/users.svg)](https://www.codetriage.com/axios/axios)\n[![Known Vulnerabilities](https://snyk.io/test/npm/axios/badge.svg)](https://snyk.io/test/npm/axios)\n\n\n\n\n</div>\n\n## Table of Contents\n\n  - [Features](#features)\n  - [Browser Support](#browser-support)\n  - [Installing](#installing)\n    - [Package manager](#package-manager)\n    - [CDN](#cdn)\n  - [Example](#example)\n  - [Axios API](#axios-api)\n  - [Request method aliases](#request-method-aliases)\n  - [Concurrency 👎](#concurrency-deprecated)\n  - [Creating an instance](#creating-an-instance)\n  - [Instance methods](#instance-methods)\n  - [Request Config](#request-config)\n  - [Response Schema](#response-schema)\n  - [Config Defaults](#config-defaults)\n    - [Global axios defaults](#global-axios-defaults)\n    - [Custom instance defaults](#custom-instance-defaults)\n    - [Config order of precedence](#config-order-of-precedence)\n  - [Interceptors](#interceptors)\n    - [Multiple Interceptors](#multiple-interceptors)\n  - [Handling Errors](#handling-errors)\n  - [Cancellation](#cancellation)\n    - [AbortController](#abortcontroller)\n    - [CancelToken 👎](#canceltoken-deprecated)\n  - [Using application/x-www-form-urlencoded format](#using-applicationx-www-form-urlencoded-format)\n    - [URLSearchParams](#urlsearchparams)\n    - [Query string](#query-string-older-browsers)\n    - [🆕 Automatic serialization](#-automatic-serialization-to-urlsearchparams)\n  - [Using multipart/form-data format](#using-multipartform-data-format)\n    - [FormData](#formdata)\n    - [🆕 Automatic serialization](#-automatic-serialization-to-formdata)\n  - [Files Posting](#files-posting)\n  - [HTML Form Posting](#-html-form-posting-browser)\n  - [🆕 Progress capturing](#-progress-capturing)\n  - [🆕 Rate limiting](#-progress-capturing)\n  - [Semver](#semver)\n  - [Promises](#promises)\n  - [TypeScript](#typescript)\n  - [Resources](#resources)\n  - [Credits](#credits)\n  - [License](#license)\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](https://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for [JSON](https://www.json.org/json-en.html) data\n- 🆕 Automatic data object serialization to `multipart/form-data` and `x-www-form-urlencoded` body encodings\n- Client side support for protecting against [XSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png) | ![Safari](https://raw.githubusercontent.com/alrra/browser-logos/main/src/safari/safari_48x48.png) | ![Opera](https://raw.githubusercontent.com/alrra/browser-logos/main/src/opera/opera_48x48.png) | ![Edge](https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_48x48.png) | ![IE](https://raw.githubusercontent.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 11 ✔ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\n### Package manager\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing yarn:\n\n```bash\n$ yarn add axios\n```\n\nUsing pnpm:\n\n```bash\n$ pnpm add axios\n```\n\nOnce the package is installed, you can import the library using `import` or `require` approach:\n\n```js\nimport axios, {isCancel, AxiosError} from 'axios';\n```\n\nYou can also use the default export, since the named export is just a re-export from the Axios factory:\n\n```js\nimport axios from 'axios';\n\nconsole.log(axios.isCancel('something'));\n````\n\nIf you use `require` for importing, **only default export is available**:\n\n```js\nconst axios = require('axios');\n\nconsole.log(axios.isCancel('something'));\n```\n\nFor cases where something went wrong when trying to import a module into a custom or legacy environment,\nyou can try importing the module package directly:\n\n```js\nconst axios = require('axios/dist/browser/axios.cjs'); // browser commonJS bundle (ES2017)\n// const axios = require('axios/dist/node/axios.cjs'); // node commonJS bundle (ES2017)\n```\n\n### CDN\n\nUsing jsDelivr CDN (ES5 UMD browser module):\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js\"></script>\n```\n\nUsing unpkg CDN:\n\n```html\n<script src=\"https://unpkg.com/axios@1.1.2/dist/axios.min.js\"></script>\n```\n\n## Example\n\n> **Note** CommonJS usage\n> In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with `require()`, use the following approach:\n\n```js\nimport axios from 'axios';\n//const axios = require('axios'); // legacy way\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n> **Note** `async/await` is part of ECMAScript 2017 and is not supported in Internet\n> Explorer and older browsers, so use with caution.\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience, aliases have been provided for all common request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    encode?: (param: string): string => { /* Do custom ops here and return transformed string */ }, // custom encoder function; sends Key/Values in an iterative fashion\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), // mimic pre 1.x behavior and send entire params object to a custom serializer func. Allows consumer to control how params are serialized.\n    indexes: false // array indexes format (null - no brackets, false (default) - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer, FormData (form-data package)\n  data: {\n    firstName: 'Fred'\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser & node.js\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser & node.js\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n    // Do whatever you want with the Axios progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/master/lib/defaults/index.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you need to remove an interceptor later you can.\n\n```js\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can also clear all interceptors for requests or responses.\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\nWhen you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay\nin the execution of your axios request when the main thread is blocked (a promise is created under the hood for\nthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag\nto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.\n\n```js\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });\n```\n\nIf you want to execute a particular interceptor based on a runtime check,\nyou can add a `runWhen` function to the options object. The interceptor will not be executed **if and only if** the return\nof `runWhen` is `false`. The function will be called with the config\nobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an\nasynchronous request interceptor that only needs to run at certain times.\n\n```js\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n### Multiple Interceptors\n\nGiven you add multiple response interceptors\nand when the response was fulfilled\n- then each interceptor is executed\n- then they are executed in the order they were added\n- then only the last interceptor's result is returned\n- then every interceptor receives the result of its predecessor\n- and when the fulfillment-interceptor throws\n    - then the following fulfillment-interceptor is not called\n    - then the following rejection-interceptor is called\n    - once caught, another following fulfill-interceptor is called again (just like in a promise chain).\n\nRead [the interceptor tests](./test/specs/interceptors.spec.js) for seeing all this in code.\n\n## Handling Errors\n\nthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n## Cancellation\n\n### AbortController\n\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n\n```js\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n### CancelToken `👎deprecated`\n\nYou can also cancel a request using a *CancelToken*.\n\n> The axios cancel token API is based on the withdrawn [cancellable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\n> This API is deprecated since v0.22.0 and shouldn't be used in new projects\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> **Note:** you can cancel several requests with the same cancel token/abort controller.\n> If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\n\n> During the transition period, you can use both cancellation APIs, even for the same request:\n\n## Using `application/x-www-form-urlencoded` format\n\n### URLSearchParams\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers,and [ Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n### Query string (Older browsers)\n\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\nOr in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Older Node.js versions\n\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n> **Note**\n> The `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n\n### 🆕 Automatic serialization to URLSearchParams\n\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\n\n```js\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.postForm('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\nThe server will handle it as:\n\n```js\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n````\n\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n\n```js\n  var app = express();\n\n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n\n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n## Using `multipart/form-data` format\n\n### FormData\n\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload.\nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\n\n```js\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)\n```\n\n### 🆕 Automatic serialization to FormData\n\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type`\nheader is set to `multipart/form-data`.\n\nThe following request will submit the data in a FormData format (Browser & Node.js):\n\n```js\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\n\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\n\n```js\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\nAxios FormData serializer supports some special endings to perform the following operations:\n\n- `{}` - serialize the value with JSON.stringify\n- `[]` - unwrap the array-like object as separate fields with the same key\n\n> **Note**\n> unwrap/expand operation will be used by default on arrays and FileList objects\n\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n\n- `visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n\n- `dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n\n- `metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key.\nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n\n- `indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects\n\n    - `null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n    - `false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n    - `true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\n\nLet's say we have an object like this one:\n\n```js\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\nThe following steps will be executed by the Axios serializer internally:\n\n```js\nconst formData = new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n\n## Files Posting\n\nYou can easily submit a single file:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]\n});\n```\n\nor multiple files as `multipart/form-data`:\n\n```js\nawait axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files\n});\n```\n\n`FileList` object can be passed directly:\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\nAll files will be sent with the same field names: `files[]`.\n\n## 🆕 HTML Form Posting (browser)\n\nPass HTML Form element as a payload to submit it as `multipart/form-data` content.\n\n```js\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));\n```\n\n`FormData` and `HTMLForm` objects can also be posted as `JSON` by explicitly setting the `Content-Type` header to `application/json`:\n\n```js\nawait axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\nFor example, the Form\n\n```html\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\nwill be submitted as the following JSON object:\n\n```js\n{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}\n````\n\nSending `Blobs`/`Files` as JSON (`base64`) is not currently supported.\n\n## 🆕 Progress capturing\n\nAxios supports both browser and node environments to capture request upload/download progress.\n\n```js    \nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // in range [0..1]\n      bytes: number; // how many bytes have been transferred since the last trigger (delta)\n      estimated?: number; // estimated time in seconds\n      rate?: number; // upload speed in bytes\n      upload: true; // upload sign\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});  \n```\n\nYou can also track stream upload/download progress in node.js:\n\n```js\nconst {data} = await axios.post(SERVER_URL, readableStream, {\n   onUploadProgress: ({progress}) => {\n     console.log((progress * 100).toFixed(2));\n   },\n  \n   headers: {\n    'Content-Length': contentLength\n   },\n\n   maxRedirects: 0 // avoid buffering the entire stream\n});\n````\n\n> **Note:**\n> Capturing FormData upload progress is currently not currently supported in node.js environments.\n\n> **⚠️ Warning**\n> It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the **node.js** environment,\n> as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm.\n\n\n## 🆕 Rate limiting\n\nDownload and upload rate limits can only be set for the http adapter (node.js):\n\n```js\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\n\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n\n```typescript\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\nBecause axios dual publishes with an ESM default export and a CJS `module.exports`, there are some caveats.\nThe recommended setting is to use `\"moduleResolution\": \"node16\"` (this is implied by `\"module\": \"node16\"`). Note that this requires TypeScript 4.7 or greater.\nIf use ESM, your settings should be fine.\nIf you compile TypeScript to CJS and you can’t use `\"moduleResolution\": \"node 16\"`, you have to enable `esModuleInterop`.\nIf you use TypeScript to type check CJS JavaScript code, your only option is to use `\"moduleResolution\": \"node16\"`.\n\n## Online one-click setup\n\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/v1.x/CHANGELOG.md)\n* [Ecosystem](https://github.com/axios/axios/blob/v1.x/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/v1.x/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "# Copyright (c) 2014-present Matt Zabriskie & Collaborators\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/axios/-/axios-1.2.2.tgz#72681724c6e6a43a9fea860fc558127dbe32f9f1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/axios/-/axios-1.2.2.tgz",
    "hash": "72681724c6e6a43a9fea860fc558127dbe32f9f1",
    "integrity": "sha512-bz/J4gS2S3I7mpN/YZfGFTqhXTYzRho8Ay38w2otuuDR322KzFIWm/4W2K6gIwvWaws5n+mnb7D1lN9uD+QH6Q==",
    "registry": "npm",
    "packageName": "axios",
    "cacheIntegrity": "sha512-bz/J4gS2S3I7mpN/YZfGFTqhXTYzRho8Ay38w2otuuDR322KzFIWm/4W2K6gIwvWaws5n+mnb7D1lN9uD+QH6Q== sha1-cmgXJMbmpDqf6oYPxVgSfb4y+fE="
  },
  "registry": "npm",
  "hash": "72681724c6e6a43a9fea860fc558127dbe32f9f1"
}