{
  "manifest": {
    "name": "electron-packager",
    "version": "17.1.1",
    "description": "Customize and package your Electron app with OS-specific bundles (.app, .exe, etc.) via JS or CLI",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "bin": {
      "electron-packager": "bin/electron-packager.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/electron/electron-packager.git"
    },
    "author": {
      "name": "Mark Lee"
    },
    "license": "BSD-2-Clause",
    "bugs": {
      "url": "https://github.com/electron/electron-packager/issues"
    },
    "homepage": "https://github.com/electron/electron-packager",
    "files": [
      "collaborators.md",
      "bin",
      "docs/*.md",
      "NEWS.md",
      "src",
      "usage.txt"
    ],
    "dependencies": {
      "@electron/asar": "^3.2.1",
      "@electron/get": "^2.0.0",
      "@electron/notarize": "^1.2.3",
      "@electron/osx-sign": "^1.0.1",
      "@electron/universal": "^1.3.2",
      "cross-spawn-windows-exe": "^1.2.0",
      "debug": "^4.0.1",
      "extract-zip": "^2.0.0",
      "filenamify": "^4.1.0",
      "fs-extra": "^10.1.0",
      "galactus": "^0.2.1",
      "get-package-info": "^1.0.0",
      "junk": "^3.1.0",
      "parse-author": "^2.0.0",
      "plist": "^3.0.0",
      "rcedit": "^3.0.1",
      "resolve": "^1.1.6",
      "semver": "^7.1.3",
      "yargs-parser": "^21.1.1"
    },
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "^4.0.1",
      "@typescript-eslint/parser": "^4.0.1",
      "ava": "^3.10.1",
      "buffer-equal": "^1.0.0",
      "codecov": "^3.0.0",
      "eslint": "^7.12.1",
      "eslint-config-standard": "^16.0.0",
      "eslint-plugin-ava": "^12.0.0",
      "eslint-plugin-import": "^2.22.1",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-promise": "^5.1.0",
      "nyc": "^15.0.0",
      "pkg-up": "^3.0.1",
      "sinon": "^14.0.0",
      "tsd": "^0.14.0",
      "typedoc": "^0.19.0",
      "typescript": "^4.0.2"
    },
    "engines": {
      "node": ">= 14.17.5"
    },
    "scripts": {
      "ava": "ava test/index.js",
      "codecov": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
      "coverage": "nyc ava test/index.js",
      "docs:build": "node test/ci/build_docs.js",
      "lint": "npm run lint:js && npm run lint:ts",
      "lint:js": "eslint .",
      "lint:ts": "eslint --config .eslintrc.typescript.js --ext .ts .",
      "test": "npm run lint && npm run tsd && npm run coverage",
      "tsd": "tsd"
    },
    "keywords": [
      "electron",
      "packager",
      "bundler",
      "app"
    ],
    "ava": {
      "timeout": "60s"
    },
    "eslintConfig": {
      "extends": [
        "eslint:recommended",
        "plugin:ava/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:promise/recommended",
        "standard"
      ],
      "parserOptions": {
        "sourceType": "script"
      },
      "plugins": [
        "ava"
      ],
      "rules": {
        "ava/no-import-test-files": 0,
        "ava/no-ignored-test-files": 0,
        "indent": [
          "error",
          2,
          {
            "CallExpression": {
              "arguments": "first"
            },
            "SwitchCase": 1
          }
        ],
        "no-console": 0,
        "strict": "error"
      }
    },
    "eslintIgnore": [
      "typedoc/**/*",
      "**/test/fixtures/**/node_modules/**",
      "**/test/work/*"
    ],
    "tsd": {
      "directory": "test"
    },
    "funding": {
      "url": "https://github.com/electron/electron-packager?sponsor=1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-packager-17.1.1-f156fc63d3a66f4e902e4b42992550a172982d59-integrity/node_modules/electron-packager/package.json",
    "readmeFilename": "README.md",
    "readme": "# Electron Packager\n\nPackage your [Electron](https://electronjs.org) app into OS-specific bundles (`.app`, `.exe`, etc.) via JavaScript or the command line.\n\n[![CircleCI Build Status](https://circleci.com/gh/electron/electron-packager/tree/main.svg?style=svg)](https://circleci.com/gh/electron/electron-packager/tree/main)\n[![Coverage Status](https://codecov.io/gh/electron/electron-packager/branch/main/graph/badge.svg)](https://codecov.io/gh/electron/electron-packager)\n[![NPM](https://badgen.net/npm/v/electron-packager)](https://npm.im/electron-packager)\n[![Discord](https://img.shields.io/discord/745037351163527189?color=blueviolet&logo=discord)](https://discord.com/invite/APGC3k5yaH)\n\n[Supported Platforms](#supported-platforms) |\n[Installation](#installation) |\n[Usage](#usage) |\n[API](https://electron.github.io/electron-packager/main/) |\n[Contributing](https://github.com/electron/electron-packager/blob/main/CONTRIBUTING.md) |\n[Support](https://github.com/electron/electron-packager/blob/main/SUPPORT.md) |\n[Related Apps/Libraries](#related) |\n[FAQ](https://github.com/electron/electron-packager/blob/main/docs/faq.md) |\n[Release Notes](https://github.com/electron/electron-packager/blob/main/NEWS.md)\n\n----\n\n## About\n\nElectron Packager is a command line tool and Node.js library that bundles Electron-based application\nsource code with a renamed Electron executable and supporting files into folders ready for distribution.\n\nFor creating distributables like installers and Linux packages, consider using either [Electron\nForge](https://github.com/electron-userland/electron-forge) (which uses Electron Packager\ninternally), or one of the [related Electron tools](#distributable-creators), which utilizes\nElectron Packager-created folders as a basis.\n\nNote that packaged Electron applications can be relatively large. A zipped, minimal Electron\napplication is approximately the same size as the zipped prebuilt binary for a given target\nplatform, target arch, and [Electron version](https://github.com/electron/electron/releases)\n_(files named `electron-v${version}-${platform}-${arch}.zip`)_.\n\n## Supported Platforms\n\nElectron Packager is known to run on the following **host** platforms:\n\n* Windows (32/64 bit)\n* macOS (formerly known as OS X)\n* Linux (x86/x86_64)\n\nIt generates executables/bundles for the following **target** platforms:\n\n* Windows (also known as `win32`, for x86, x86_64, and arm64 architectures)\n* macOS (also known as `darwin`) / [Mac App Store](https://electronjs.org/docs/tutorial/mac-app-store-submission-guide/) (also known as `mas`)<sup>*</sup> (for x86_64, arm64, and universal architectures)\n* Linux (for x86, x86_64, armv7l, arm64, and mips64el architectures)\n\n<sup>*</sup> *Note for macOS / Mac App Store target bundles: the `.app` bundle can only be signed when building on a host macOS platform.*\n\n## Installation\n\nThis module requires Node.js 10.0 or higher to run.\n\n```sh\nnpm install --save-dev electron-packager\n```\n\nIt is **not** recommended to install `electron-packager` globally.\n\n### Building Windows apps from non-Windows platforms\n\nBuilding an Electron app for the Windows target platform requires editing the `Electron.exe` file.\nCurrently, Electron Packager uses [`node-rcedit`](https://github.com/atom/node-rcedit) to accomplish\nthis. A Windows executable is bundled in that Node package and needs to be run in order for this\nfunctionality to work, so on non-Windows host platforms (not including WSL),\n[Wine](https://www.winehq.org/) 1.6 or later needs to be installed. On macOS, it is installable\nvia [Homebrew](http://brew.sh/).\n\n## Usage\n\nJavaScript API usage can be found in the [API documentation](https://electron.github.io/electron-packager/main/modules/electronpackager.html).\n\n### From the Command Line\n\nRunning Electron Packager from the command line has this basic form:\n\n```\nnpx electron-packager <sourcedir> <appname> --platform=<platform> --arch=<arch> [optional flags...]\n```\n\n**Note**: `npx` can be substituted for `yarn` or `npm exec` depending on what package manager and\nthe version you have installed.\n\nThis will:\n\n- Find or download the correct release of Electron\n- Use that version of Electron to create an app in `<out>/<appname>-<platform>-<arch>` *(this can be customized via an optional flag)*\n\n`--platform` and `--arch` can be omitted, in two cases:\n\n* If you specify `--all` instead, bundles for all valid combinations of target\n  platforms/architectures will be created.\n* Otherwise, a single bundle for the host platform/architecture will be created.\n\nFor an overview of the other optional flags, run `electron-packager --help` or see\n[usage.txt](https://github.com/electron/electron-packager/blob/main/usage.txt). For\ndetailed descriptions, see the [API documentation](https://electron.github.io/electron-packager/main/modules/electronpackager.html).\n\nIf `appname` is omitted, this will use the name specified by \"productName\" or \"name\" in the nearest package.json.\n\n**Characters in the Electron app name which are not allowed in all target platforms' filenames\n(e.g., `/`), will be replaced by hyphens (`-`).**\n\nYou should be able to launch the app on the platform you built for. If not, check your settings and try again.\n\n**Be careful** not to include `node_modules` you don't want into your final app. If you put them in\nthe `devDependencies` section of `package.json`, by default none of the modules related to those\ndependencies will be copied in the app bundles. (This behavior can be turned off with the\n`prune: false` API option or `--no-prune` CLI flag.) In addition, folders like `.git` and\n`node_modules/.bin` will be ignored by default. You can use `--ignore` to ignore files and folders\nvia a regular expression (*not* a [glob pattern](https://en.wikipedia.org/wiki/Glob_%28programming%29)).\nExamples include `--ignore=\\.gitignore` or `--ignore=\"\\.git(ignore|modules)\"`.\n\n#### Example\n\nLet's assume that you have made an app based on the [electron-quick-start](https://github.com/electron/electron-quick-start) repository on a macOS host platform with the following file structure:\n\n```\nfoobar\n├── package.json\n├── index.html\n├── […other files, like the app's LICENSE…]\n└── script.js\n```\n\n…and that the following is true:\n\n* `electron-packager` is installed locally\n* `productName` in `package.json` has been set to `Foo Bar`\n* The `electron` module is in the `devDependencies` section of `package.json`, and set to the exact version of `1.4.15`.\n* `npm install` for the `Foo Bar` app has been run at least once\n\nWhen one runs the following command for the first time in the `foobar` directory:\n\n```\nnpx electron-packager .\n```\n\n`electron-packager` will do the following:\n\n* Use the current directory for the `sourcedir`\n* Infer the `appname` from the `productName` in `package.json`\n* Infer the `appVersion` from the `version` in `package.json`\n* Infer the `platform` and `arch` from the host, in this example, `darwin` platform and `x64` arch.\n* Download the darwin x64 build of Electron 1.4.15 (and cache the downloads in `~/.electron`)\n* Build the macOS `Foo Bar.app`\n* Place `Foo Bar.app` in `foobar/Foo Bar-darwin-x64/` (since an `out` directory was not specified, it used the current working directory)\n\nThe file structure now looks like:\n\n```\nfoobar\n├── Foo Bar-darwin-x64\n│   ├── Foo Bar.app\n│   │   └── […Mac app contents…]\n│   ├── LICENSE [the Electron license]\n│   └── version\n├── […other application bundles, like \"Foo Bar-win32-x64\" (sans quotes)…]\n├── package.json\n├── index.html\n├── […other files, like the app's LICENSE…]\n└── script.js\n```\n\nThe `Foo Bar.app` folder generated can be executed by a system running macOS, which will start the packaged Electron app. This is also true of the Windows x64 build on a system running a new enough version of Windows for a 64-bit system (via `Foo Bar-win32-x64/Foo Bar.exe`), and so on.\n\n## Related\n\n- [Electron Forge](https://github.com/electron-userland/electron-forge) - creates, builds, and distributes modern Electron applications\n- [electron-packager-interactive](https://github.com/Urucas/electron-packager-interactive) - an interactive CLI for electron-packager\n- [grunt-electron](https://github.com/sindresorhus/grunt-electron) - grunt plugin for electron-packager\n\n### Distributable Creators\n\n* [electron-installer-zip](https://github.com/electron-userland/electron-installer-zip) - creates symlink-compatible ZIP files\n\nWindows:\n\n* [electron-winstaller](https://github.com/electron/windows-installer) - Squirrel.Windows-based installer from the Electron maintainers group\n* [electron-windows-store](https://github.com/felixrieseberg/electron-windows-store) - creates an AppX package for the Windows Store\n* [electron-wix-msi](https://github.com/felixrieseberg/electron-wix-msi) - creates traditional MSI installers\n* [electron-installer-windows](https://github.com/electron-userland/electron-installer-windows) - alternative Squirrel.Windows-based installer\n\nmacOS:\n\n* [electron-installer-dmg](https://github.com/electron-userland/electron-installer-dmg) - creates a DMG\n\nLinux:\n\n* [electron-installer-debian](https://github.com/electron-userland/electron-installer-debian) - creates a DEB file\n* [electron-installer-redhat](https://github.com/electron-userland/electron-installer-redhat) - creates an RPM\n* [electron-installer-flatpak](https://github.com/endlessm/electron-installer-flatpak) - creates a Flatpak file\n* [electron-installer-snap](https://github.com/electron-userland/electron-installer-snap) - creates a Snap file\n\n### Plugins\n\nThese Node modules utilize Electron Packager API hooks:\n\n- [electron-packager-languages](https://npm.im/electron-packager-languages) - sets the locales\n  available to Electron when packaged, which is used by the Mac App Store, among other places\n- [electron-packager-plugin-non-proprietary-codecs-ffmpeg](https://www.npmjs.com/package/electron-packager-plugin-non-proprietary-codecs-ffmpeg) - replaces the normal version of FFmpeg in Electron with a version without proprietary codecs\n- [electron-rebuild](https://github.com/electron/electron-rebuild) - rebuilds native Node.js modules\n  against the packaged Electron version\n",
    "licenseText": "Copyright (c) 2015 Max Ogden and other contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-packager/-/electron-packager-17.1.1.tgz#f156fc63d3a66f4e902e4b42992550a172982d59",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-packager/-/electron-packager-17.1.1.tgz",
    "hash": "f156fc63d3a66f4e902e4b42992550a172982d59",
    "integrity": "sha512-r1NDtlajsq7gf2EXgjRfblCVPquvD2yeg+6XGErOKblvxOpDi0iulZLVhgYDP4AEF1P5/HgbX/vwjlkEv7PEIQ==",
    "registry": "npm",
    "packageName": "electron-packager",
    "cacheIntegrity": "sha512-r1NDtlajsq7gf2EXgjRfblCVPquvD2yeg+6XGErOKblvxOpDi0iulZLVhgYDP4AEF1P5/HgbX/vwjlkEv7PEIQ== sha1-8Vb8Y9Omb06QLktCmSVQoXKYLVk="
  },
  "registry": "npm",
  "hash": "f156fc63d3a66f4e902e4b42992550a172982d59"
}