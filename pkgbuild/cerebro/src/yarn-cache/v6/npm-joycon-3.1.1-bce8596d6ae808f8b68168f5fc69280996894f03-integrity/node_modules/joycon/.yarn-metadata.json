{
  "manifest": {
    "name": "joycon",
    "version": "3.1.1",
    "description": "Load config with ease.",
    "repository": {
      "url": "https://github.com/egoist/joycon.git",
      "type": "git"
    },
    "main": "lib/index.js",
    "types": "types/index.d.ts",
    "files": [
      "lib",
      "types/index.d.ts"
    ],
    "scripts": {
      "test": "jest --testPathPattern tests",
      "build": "babel src -d lib --no-comments",
      "prepublishOnly": "npm run build"
    },
    "author": {
      "name": "egoist",
      "email": "0x142857@gmail.com"
    },
    "license": "MIT",
    "jest": {
      "testEnvironment": "node"
    },
    "devDependencies": {
      "@babel/cli": "^7.13.10",
      "@babel/core": "^7.13.10",
      "@babel/preset-env": "^7.13.10",
      "@egoist/prettier-config": "^0.1.0",
      "@types/node": "^14.14.33",
      "babel-jest": "^26.6.3",
      "babel-plugin-sync": "^0.1.0",
      "jest-cli": "^26.6.3",
      "prettier": "^2.2.1"
    },
    "engines": {
      "node": ">=10"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-joycon-3.1.1-bce8596d6ae808f8b68168f5fc69280996894f03-integrity/node_modules/joycon/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# joycon\n\n[![NPM version](https://img.shields.io/npm/v/joycon.svg?style=flat)](https://npmjs.com/package/joycon) [![NPM downloads](https://img.shields.io/npm/dm/joycon.svg?style=flat)](https://npmjs.com/package/joycon) [![install size](https://packagephobia.now.sh/badge?p=joycon@2.0.0)](https://packagephobia.now.sh/result?p=joycon@2.0.0) [![CircleCI](https://circleci.com/gh/egoist/joycon/tree/master.svg?style=shield)](https://circleci.com/gh/egoist/joycon/tree/master)  [![donate](https://img.shields.io/badge/$-donate-ff69b4.svg?maxAge=2592000&style=flat)](https://github.com/egoist/donate) [![chat](https://img.shields.io/badge/chat-on%20discord-7289DA.svg?style=flat)](https://chat.egoist.moe)\n\n## Differences with [cosmiconfig](https://github.com/davidtheclark/cosmiconfig)?\n\nJoyCon is zero-dependency but feature-complete.\n\n## Install\n\n```bash\nyarn add joycon\n```\n\n## Usage\n\n```js\nconst JoyCon = require('joycon')\n\nconst joycon = new JoyCon()\n\njoycon.load(['package-lock.json', 'yarn.lock'])\n.then(result => {\n  // result is {} when files do not exist\n  // otherwise { path, data }\n})\n```\n\nBy default non-js files are parsed as JSON, if you want something different you can add a loader:\n\n```js\nconst joycon = new JoyCon()\n\njoycon.addLoader({\n  test: /\\.toml$/,\n  load(filepath) {\n    return require('toml').parse(filepath)\n  }\n})\n\njoycon.load(['cargo.toml'])\n```\n\n## API\n\n### constructor([options])\n\n#### options\n\n##### files\n\n- Type: `string[]`\n\nThe files to search.\n\n##### cwd\n\nThe directory to search files.\n\n##### stopDir\n\nThe directory to stop searching.\n\n##### packageKey\n\nYou can load config from certain property in a `package.json` file. For example, when you set `packageKey: 'babel'`, it will load the `babel` property in `package.json` instead of the entire data.\n\n##### parseJSON\n\n- Type: `(str: string) => any`\n- Default: `JSON.parse`\n\nThe function used to parse JSON string.\n\n### resolve([files], [cwd], [stopDir])\n### resolve([options])\n\n`files` defaults to `options.files`.\n\n`cwd` defaults to `options.cwd`.\n\n`stopDir` defaults to `options.stopDir` then `path.parse(cwd).root`.\n\nIf using a single object `options`, it will be the same as constructor options.\n\nSearch files and resolve the path of the file we found.\n\nThere's also `.resolveSync` method.\n\n### load(...args)\n\nThe signature is the same as [resolve](#resolvefiles-cwd-stopdir).\n\nSearch files and resolve `{ path, data }` of the file we found.\n\nThere's also `.loadSync` method.\n\n### addLoader(Loader)\n\n```typescript\ninterface Loader {\n  name?: string\n  test: RegExp\n  load(filepath: string)?: Promise<any>\n  loadSync(filepath: string)?: any\n}\n```\n\nAt least one of `load` and `loadSync` is required, depending on whether you're calling the synchonous methods or not.\n\n### removeLoader(name)\n\nRemove loaders by loader name.\n\n### clearCache()\n\nEach JoyCon instance uses its own cache.\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## Author\n\n**joycon** © [egoist](https://github.com/egoist), Released under the [MIT](./LICENSE) License.<br>\nAuthored and maintained by egoist with help from contributors ([list](https://github.com/egoist/joycon/contributors)).\n\n> [github.com/egoist](https://github.com/egoist) · GitHub [@egoist](https://github.com/egoist) · Twitter [@_egoistlily](https://twitter.com/_egoistlily)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) egoist <0x142857@gmail.com> (https://github.com/egoist)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/joycon/-/joycon-3.1.1.tgz#bce8596d6ae808f8b68168f5fc69280996894f03",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/joycon/-/joycon-3.1.1.tgz",
    "hash": "bce8596d6ae808f8b68168f5fc69280996894f03",
    "integrity": "sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==",
    "registry": "npm",
    "packageName": "joycon",
    "cacheIntegrity": "sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw== sha1-vOhZbWroCPi2gWj1/GkoCZaJTwM="
  },
  "registry": "npm",
  "hash": "bce8596d6ae808f8b68168f5fc69280996894f03"
}