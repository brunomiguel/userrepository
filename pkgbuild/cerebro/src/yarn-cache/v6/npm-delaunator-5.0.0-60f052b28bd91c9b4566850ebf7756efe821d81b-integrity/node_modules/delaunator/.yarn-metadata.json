{
  "manifest": {
    "name": "delaunator",
    "version": "5.0.0",
    "description": "An incredibly fast JavaScript library for Delaunay triangulation of 2D points",
    "main": "index.js",
    "module": "index.js",
    "type": "module",
    "jsdelivr": "delaunator.min.js",
    "unpkg": "delaunator.min.js",
    "sideEffects": false,
    "dependencies": {
      "robust-predicates": "^3.0.0"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^11.2.0",
      "c8": "^7.6.0",
      "eslint": "^7.22.0",
      "eslint-config-mourner": "^3.0.0",
      "rollup": "^2.42.4",
      "rollup-plugin-terser": "^7.0.2",
      "tape": "^5.2.2"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mapbox/delaunator.git"
    },
    "scripts": {
      "lint": "eslint index.js test/test.js bench.js rollup.config.js docs/diagrams.js",
      "pretest": "npm run lint",
      "test": "node test/test.js",
      "cov": "c8 node test/test.js && c8 report -r html",
      "bench": "node bench.js",
      "build": "rollup -c",
      "start": "rollup -cw",
      "prepublishOnly": "npm test && npm run build"
    },
    "files": [
      "index.js",
      "delaunator.js",
      "delaunator.min.js"
    ],
    "eslintConfig": {
      "extends": "mourner",
      "rules": {
        "no-sequences": 0
      },
      "parserOptions": {
        "ecmaVersion": 2020
      }
    },
    "keywords": [
      "delaunay triangulation",
      "computational geometry",
      "algorithms"
    ],
    "author": {
      "name": "Vladimir Agafonkin"
    },
    "license": "ISC",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-delaunator-5.0.0-60f052b28bd91c9b4566850ebf7756efe821d81b-integrity/node_modules/delaunator/package.json",
    "readmeFilename": "README.md",
    "readme": "# Delaunator [![Build Status](https://travis-ci.org/mapbox/delaunator.svg?branch=master)](https://travis-ci.org/mapbox/delaunator) [![](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects) [![](https://badgen.net/bundlephobia/minzip/delaunator)](https://unpkg.com/delaunator)\n\nAn incredibly fast JavaScript library for\n[Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation) of 2D points.\n\n- [Interactive Demo](https://mapbox.github.io/delaunator/demo.html)\n- [Guide to data structures](https://mapbox.github.io/delaunator/)\n\n<img src=\"delaunator.png\" alt=\"Delaunay triangulation example\" width=\"600\" />\n\n### Projects based on Delaunator\n\n- [d3-delaunay](https://github.com/d3/d3-delaunay) for Voronoi diagrams, search, traversal and rendering (a part of [D3](https://d3js.org)).\n- [d3-geo-voronoi](https://github.com/Fil/d3-geo-voronoi) for Delaunay triangulations and Voronoi diagrams on a sphere (e.g. for geographic locations).\n\n### Ports to other languages\n\n- [delaunator-rs](https://github.com/mourner/delaunator-rs) (Rust)\n- [fogleman/delaunay](https://github.com/fogleman/delaunay) (Go)\n- [delaunator-cpp](https://github.com/abellgithub/delaunator-cpp) (C++)\n- [delaunator-sharp](https://github.com/nol1fe/delaunator-sharp) (C#)\n- [delaunator-ruby](https://github.com/hendrixfan/delaunator-ruby) (Ruby)\n- [Delaunator-Python](https://github.com/HakanSeven12/Delaunator-Python) (Python)\n- [hx-delaunator](https://github.com/dmitryhryppa/hx-delaunator) (Haxe)\n- [ricardomatias/delaunator](https://github.com/ricardomatias/delaunator) (Kotlin)\n\n## Example\n\n```js\nconst points = [[168, 180], [168, 178], [168, 179], [168, 181], [168, 183], ...];\n\nconst delaunay = Delaunator.from(points);\nconsole.log(delaunay.triangles);\n// [623, 636, 619,  636, 444, 619, ...]\n```\n\n## Install\n\nInstall with NPM (`npm install delaunator`) or Yarn (`yarn add delaunator`), then:\n\n```js\n// import as an ES module\nimport Delaunator from 'delaunator';\n\n// or require in Node / Browserify\nconst Delaunator = require('delaunator');\n```\n\nOr use a browser build directly:\n\n```html\n<script src=\"https://unpkg.com/delaunator@4.0.1/delaunator.min.js\"></script> <!-- minified build -->\n<script src=\"https://unpkg.com/delaunator@4.0.1/delaunator.js\"></script> <!-- dev build -->\n```\n\n## API Reference\n\n#### Delaunator.from(points[, getX, getY])\n\nConstructs a delaunay triangulation object given an array of points (`[x, y]` by default).\n`getX` and `getY` are optional functions of the form `(point) => value` for custom point formats.\nDuplicate points are skipped.\n\n#### new Delaunator(coords)\n\nConstructs a delaunay triangulation object given an array of point coordinates of the form:\n`[x0, y0, x1, y1, ...]` (use a typed array for best performance).\n\n#### delaunay.triangles\n\nA `Uint32Array` array of triangle vertex indices (each group of three numbers forms a triangle).\nAll triangles are directed counterclockwise.\n\nTo get the coordinates of all triangles, use:\n\n```js\nfor (let i = 0; i < triangles.length; i += 3) {\n    coordinates.push([\n        points[triangles[i]],\n        points[triangles[i + 1]],\n        points[triangles[i + 2]]\n    ]);\n}\n```\n\n#### delaunay.halfedges\n\nA `Int32Array` array of triangle half-edge indices that allows you to traverse the triangulation.\n`i`-th half-edge in the array corresponds to vertex `triangles[i]` the half-edge is coming from.\n`halfedges[i]` is the index of a twin half-edge in an adjacent triangle\n(or `-1` for outer half-edges on the convex hull).\n\nThe flat array-based data structures might be counterintuitive,\nbut they're one of the key reasons this library is fast.\n\n#### delaunay.hull\n\nA `Uint32Array` array of indices that reference points on the convex hull of the input data, counter-clockwise.\n\n#### delaunay.coords\n\nAn array of input coordinates in the form `[x0, y0, x1, y1, ....]`,\nof the type provided in the constructor (or `Float64Array` if you used `Delaunator.from`).\n\n#### delaunay.update()\n\nUpdates the triangulation if you modified `delaunay.coords` values in place, avoiding expensive memory allocations.\nUseful for iterative relaxation algorithms such as [Lloyd's](https://en.wikipedia.org/wiki/Lloyd%27s_algorithm).\n\n## Performance\n\nBenchmark results against other Delaunay JS libraries\n(`npm run bench` on Macbook Pro Retina 15\" 2017, Node v10.10.0):\n\n&nbsp; | uniform 100k | gauss 100k | grid 100k | degen 100k | uniform 1&nbsp;million | gauss 1&nbsp;million | grid 1&nbsp;million | degen 1&nbsp;million\n:-- | --: | --: | --: | --: | --: | --: | --: | --:\n**delaunator** | 82ms | 61ms | 66ms | 25ms | 1.07s | 950ms | 830ms | 278ms\n[faster&#8209;delaunay](https://github.com/Bathlamos/delaunay-triangulation) | 473ms | 411ms | 272ms | 68ms | 4.27s | 4.62s | 4.3s | 810ms\n[incremental&#8209;delaunay](https://github.com/mikolalysenko/incremental-delaunay) | 547ms | 505ms | 172ms | 528ms | 5.9s | 6.08s | 2.11s | 6.09s\n[d3&#8209;voronoi](https://github.com/d3/d3-voronoi) | 972ms | 909ms | 358ms | 720ms | 15.04s | 13.86s | 5.55s | 11.13s\n[delaunay&#8209;fast](https://github.com/ironwallaby/delaunay) | 3.8s | 4s | 12.57s | timeout | 132s | 138s | 399s | timeout\n[delaunay](https://github.com/darkskyapp/delaunay) | 4.85s | 5.73s | 15.05s | timeout | 156s | 178s | 326s | timeout\n[delaunay&#8209;triangulate](https://github.com/mikolalysenko/delaunay-triangulate) | 2.24s | 2.04s | OOM | 1.51s | OOM | OOM | OOM | OOM\n[cdt2d](https://github.com/mikolalysenko/cdt2d) | 45s | 51s | 118s | 17s | timeout | timeout | timeout | timeout\n\n## Papers\n\nThe algorithm is based on ideas from the following papers:\n\n- [A simple sweep-line Delaunay triangulation algorithm](http://www.academicpub.org/jao/paperInfo.aspx?paperid=15630), 2013, Liu Yonghe, Feng Jinming and Shao Yuehong\n- [S-hull: a fast radial sweep-hull routine for Delaunay triangulation](http://www.s-hull.org/paper/s_hull.pdf), 2010, David Sinclair\n- [A faster circle-sweep Delaunay triangulation algorithm](http://cglab.ca/~biniaz/papers/Sweep%20Circle.pdf), 2011, Ahmad Biniaz and Gholamhossein Dastghaibyfard\n",
    "licenseText": "ISC License\n\nCopyright (c) 2017, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/delaunator/-/delaunator-5.0.0.tgz#60f052b28bd91c9b4566850ebf7756efe821d81b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/delaunator/-/delaunator-5.0.0.tgz",
    "hash": "60f052b28bd91c9b4566850ebf7756efe821d81b",
    "integrity": "sha512-AyLvtyJdbv/U1GkiS6gUUzclRoAY4Gs75qkMygJJhU75LW4DNuSF2RMzpxs9jw9Oz1BobHjTdkG3zdP55VxAqw==",
    "registry": "npm",
    "packageName": "delaunator",
    "cacheIntegrity": "sha512-AyLvtyJdbv/U1GkiS6gUUzclRoAY4Gs75qkMygJJhU75LW4DNuSF2RMzpxs9jw9Oz1BobHjTdkG3zdP55VxAqw== sha1-YPBSsovZHJtFZoUOv3dW7+gh2Bs="
  },
  "registry": "npm",
  "hash": "60f052b28bd91c9b4566850ebf7756efe821d81b"
}