{
  "manifest": {
    "name": "tapable",
    "version": "0.1.10",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "Just a little module for plugins.",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "http://github.com/webpack/tapable.git"
    },
    "devDependencies": {
      "mocha": "^2.2.4",
      "should": "^5.2.0"
    },
    "engines": {
      "node": ">=0.6"
    },
    "homepage": "https://github.com/webpack/tapable",
    "main": "lib/Tapable.js",
    "scripts": {
      "test": "mocha --reporter spec"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-tapable-0.1.10-29c35707c2b70e50d07482b5d202e8ed446dafd4-integrity/node_modules/tapable/package.json",
    "readmeFilename": "README.md",
    "readme": "# Tapable\n\n``` javascript\nvar Tapable = require(\"tapable\");\n```\n\n`Tapable` is a class for plugin binding and applying.\n\nJust extend it.\n\n``` javascript\nfunction MyClass() {\n\tTapable.call(this);\n}\n\nMyClass.prototype = Object.create(Tapable.prototype);\n\nMyClass.prototype.method = function() {};\n```\n\nOr mix it in.\n\n``` javascript\nfunction MyClass2() {\n\tEventEmitter.call(this);\n\tTapable.call(this);\n}\n\nMyClass2.prototype = Object.create(EventEmitter.prototype);\nTapable.mixin(MyClass2.prototype);\n\nMyClass2.prototype.method = function() {};\n```\n\n## Public functions\n\n### apply\n\n``` javascript\nvoid apply(plugins: Plugin...)\n```\n\nAttaches all plugins passed as arguments to the instance, by calling `apply` on them.\n\n### plugin\n\n``` javascript\nvoid plugin(names: string|string[], handler: Function)\n```\n\n`names` are the names (or a single name) of the plugin interfaces the class provides.\n\n`handler` is a callback function. The signature depends on the class. `this` is the instance of the class.\n\n### restartApplyPlugins\n\n``` javascript\nvoid restartApplyPlugins()\n```\n\nShould only be called from a handler function.\n\nIt restarts the process of applying handers.\n\n## Protected functions\n\n### applyPlugins\n\n``` javascript\nvoid applyPlugins(name: string, args: any...)\n```\n\nSynchronous applies all registered handers for `name`. The handler functions are called with all args.\n\n### applyPluginsWaterfall\n\n``` javascript\nany applyPluginsWaterfall(name: string, init: any, args: any...)\n```\n\nSynchronous applies all registered handers for `name`. The handler functions are called with the return value of the previous handler and all args. For the first handler `init` is used and the return value of the last handler is return by `applyPluginsWaterfall`\n\n### applyPluginsAsync\n\n``` javascript\nvoid applyPluginsAsync(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nAsynchronously applies all registered handers for `name`. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The hander functions are called in order of registration.\n\n`callback` is called after all handlers are called.\n\n### applyPluginsBailResult\n\n``` javascript\nany applyPluginsBailResult(name: string, args: any...)\n```\n\nSynchronous applies all registered handers for `name`. The handler function are called with all args. If a handler function returns something `!== undefined`, the value is returned and no more handers are applied.\n\n### applyPluginsAsyncWaterfall\n\n``` javascript\napplyPluginsAsyncWaterfall(\n\tname: string,\n\tinit: any,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handers for `name`. The hander functions are called with the current value and a callback function with the signature `(err: Error, nextValue: any) -> void`. When called `nextValue` is the current value for the next handler. The current value for the first handler is `init`. After all handlers are applied, `callback` is called with the last value. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsAsyncSeries\n\n``` javascript\napplyPluginsAsyncSeries(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nAsynchronously applies all registered handers for `name`. The hander functions are called with all `args` and a callback function with the signature `(err: Error) -> void`. The handers are called in series, one at a time. After all handlers are applied, `callback` is called. If any handler passes a value for `err`, the `callback` is called with this error and no more handlers are called.\n\n### applyPluginsParallel\n\n``` javascript\napplyPluginsParallel(\n\tname: string,\n\targs: any...,\n\tcallback: (err?: Error) -> void\n)\n```\n\nApplies all registered handlers for `name` parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. The `callback` function is called when all handlers called the callback without `err`. If any handler calls the callback with `err`, `callback` is invoked with this error and the other handlers are ignored.\n\n`restartApplyPlugins` cannot be used.\n\n### applyPluginsParallelBailResult\n\n``` javascript\napplyPluginsParallelBailResult(\n\tname: string,\n\targs: any...,\n\tcallback: (err: Error, result: any) -> void\n)\n```\n\nApplies all registered handlers for `name` parallel. The handler functions are called with all args and a callback function with the signature `(err?: Error) -> void`. Handler functions must call the callback. They can either pass an error, or pass undefined, or pass an value. The first result (either error or value) with is not undefined is passed to the `callback`. The order is defined by registeration not by speed of the handler function. This function compentate this.\n\n`restartApplyPlugins` cannot be used.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tapable/-/tapable-0.1.10.tgz#29c35707c2b70e50d07482b5d202e8ed446dafd4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tapable/-/tapable-0.1.10.tgz",
    "hash": "29c35707c2b70e50d07482b5d202e8ed446dafd4",
    "integrity": "sha512-jX8Et4hHg57mug1/079yitEKWGB3LCwoxByLsNim89LABq8NqgiX+6iYVOsq0vX8uJHkU+DZ5fnq95f800bEsQ==",
    "registry": "npm",
    "packageName": "tapable",
    "cacheIntegrity": "sha512-jX8Et4hHg57mug1/079yitEKWGB3LCwoxByLsNim89LABq8NqgiX+6iYVOsq0vX8uJHkU+DZ5fnq95f800bEsQ== sha1-KcNXB8K3DlDQdIK10gLo7URtr9Q="
  },
  "registry": "npm",
  "hash": "29c35707c2b70e50d07482b5d202e8ed446dafd4"
}