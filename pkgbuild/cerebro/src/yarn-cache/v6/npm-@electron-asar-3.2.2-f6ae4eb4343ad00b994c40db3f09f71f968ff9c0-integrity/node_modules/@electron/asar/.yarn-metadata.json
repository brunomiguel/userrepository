{
  "manifest": {
    "name": "@electron/asar",
    "description": "Creating Electron app packages",
    "version": "3.2.2",
    "main": "./lib/asar.js",
    "types": "./lib/index.d.ts",
    "bin": {
      "asar": "bin/asar.js"
    },
    "files": [
      "bin",
      "lib",
      "lib/index.d.ts"
    ],
    "engines": {
      "node": ">=10.12.0"
    },
    "license": "MIT",
    "homepage": "https://github.com/electron/asar",
    "repository": {
      "type": "git",
      "url": "https://github.com/electron/asar.git"
    },
    "bugs": {
      "url": "https://github.com/electron/asar/issues"
    },
    "scripts": {
      "mocha": "xvfb-maybe electron-mocha --reporter spec && mocha --reporter spec",
      "test": "npm run lint && npm run mocha",
      "lint": "tsd && standard",
      "standard": "standard",
      "tsd": "tsd"
    },
    "standard": {
      "env": {
        "mocha": true
      },
      "globals": [
        "BigInt"
      ]
    },
    "tsd": {
      "directory": "test"
    },
    "dependencies": {
      "chromium-pickle-js": "^0.2.0",
      "commander": "^5.0.0",
      "glob": "^7.1.6",
      "minimatch": "^3.0.4"
    },
    "optionalDependencies": {
      "@types/glob": "^7.1.1"
    },
    "devDependencies": {
      "@continuous-auth/semantic-release-npm": "^2.0.0",
      "@semantic-release/changelog": "^5.0.0",
      "electron": "^5.0.0",
      "electron-mocha": "^8.2.1",
      "lodash": "^4.17.15",
      "mocha": "^7.1.1",
      "rimraf": "^3.0.2",
      "semantic-release": "^17.0.4",
      "standard": "^14.3.3",
      "tsd": "^0.11.0",
      "xvfb-maybe": "^0.2.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@electron-asar-3.2.2-f6ae4eb4343ad00b994c40db3f09f71f968ff9c0-integrity/node_modules/@electron/asar/package.json",
    "readmeFilename": "README.md",
    "readme": "# @electron/asar - Electron Archive\n\n[![CircleCI build status](https://circleci.com/gh/electron/asar/tree/main.svg?style=shield)](https://circleci.com/gh/electron/asar/tree/main)\n[![npm version](http://img.shields.io/npm/v/@electron/asar.svg)](https://npmjs.org/package/@electron/asar)\n\nAsar is a simple extensive archive format, it works like `tar` that concatenates\nall files together without compression, while having random access support.\n\n## Features\n\n* Support random access\n* Use JSON to store files' information\n* Very easy to write a parser\n\n## Command line utility\n\n### Install\n\nThis module requires Node 10 or later.\n\n```bash\n$ npm install --engine-strict @electron/asar\n```\n\n### Usage\n\n```bash\n$ asar --help\n\n  Usage: asar [options] [command]\n\n  Commands:\n\n    pack|p <dir> <output>\n       create asar archive\n\n    list|l <archive>\n       list files of asar archive\n\n    extract-file|ef <archive> <filename>\n       extract one file from archive\n\n    extract|e <archive> <dest>\n       extract archive\n\n\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n\n```\n\n#### Excluding multiple resources from being packed\n\nGiven:\n```\n    app\n(a) ├── x1\n(b) ├── x2\n(c) ├── y3\n(d) │   ├── x1\n(e) │   └── z1\n(f) │       └── x2\n(g) └── z4\n(h)     └── w1\n```\n\nExclude: a, b\n```bash\n$ asar pack app app.asar --unpack-dir \"{x1,x2}\"\n```\n\nExclude: a, b, d, f\n```bash\n$ asar pack app app.asar --unpack-dir \"**/{x1,x2}\"\n```\n\nExclude: a, b, d, f, h\n```bash\n$ asar pack app app.asar --unpack-dir \"{**/x1,**/x2,z4/w1}\"\n```\n\n## Using programatically\n\n### Example\n\n```javascript\nconst asar = require('@electron/asar');\n\nconst src = 'some/path/';\nconst dest = 'name.asar';\n\nawait asar.createPackage(src, dest);\nconsole.log('done.');\n```\n\nPlease note that there is currently **no** error handling provided!\n\n### Transform\nYou can pass in a `transform` option, that is a function, which either returns\nnothing, or a `stream.Transform`. The latter will be used on files that will be\nin the `.asar` file to transform them (e.g. compress).\n\n```javascript\nconst asar = require('@electron/asar');\n\nconst src = 'some/path/';\nconst dest = 'name.asar';\n\nfunction transform (filename) {\n  return new CustomTransformStream()\n}\n\nawait asar.createPackageWithOptions(src, dest, { transform: transform });\nconsole.log('done.');\n```\n\n## Using with grunt\n\nThere is also an unofficial grunt plugin to generate asar archives at [bwin/grunt-asar][grunt-asar].\n\n## Format\n\nAsar uses [Pickle][pickle] to safely serialize binary value to file, there is\nalso a [node.js binding][node-pickle] of `Pickle` class.\n\nThe format of asar is very flat:\n\n```\n| UInt32: header_size | String: header | Bytes: file1 | ... | Bytes: file42 |\n```\n\nThe `header_size` and `header` are serialized with [Pickle][pickle] class, and\n`header_size`'s [Pickle][pickle] object is 8 bytes.\n\nThe `header` is a JSON string, and the `header_size` is the size of `header`'s\n`Pickle` object.\n\nStructure of `header` is something like this:\n\n```json\n{\n   \"files\": {\n      \"tmp\": {\n         \"files\": {}\n      },\n      \"usr\" : {\n         \"files\": {\n           \"bin\": {\n             \"files\": {\n               \"ls\": {\n                 \"offset\": \"0\",\n                 \"size\": 100,\n                 \"executable\": true,\n                 \"integrity\": {\n                   \"algorithm\": \"SHA256\",\n                   \"hash\": \"...\",\n                   \"blockSize\": 1024,\n                   \"blocks\": [\"...\", \"...\"]\n                 }\n               },\n               \"cd\": {\n                 \"offset\": \"100\",\n                 \"size\": 100,\n                 \"executable\": true,\n                 \"integrity\": {\n                   \"algorithm\": \"SHA256\",\n                   \"hash\": \"...\",\n                   \"blockSize\": 1024,\n                   \"blocks\": [\"...\", \"...\"]\n                 }\n               }\n             }\n           }\n         }\n      },\n      \"etc\": {\n         \"files\": {\n           \"hosts\": {\n             \"offset\": \"200\",\n             \"size\": 32,\n             \"integrity\": {\n                \"algorithm\": \"SHA256\",\n                \"hash\": \"...\",\n                \"blockSize\": 1024,\n                \"blocks\": [\"...\", \"...\"]\n              }\n           }\n         }\n      }\n   }\n}\n```\n\n`offset` and `size` records the information to read the file from archive, the\n`offset` starts from 0 so you have to manually add the size of `header_size` and\n`header` to the `offset` to get the real offset of the file.\n\n`offset` is a UINT64 number represented in string, because there is no way to\nprecisely represent UINT64 in JavaScript `Number`. `size` is a JavaScript\n`Number` that is no larger than `Number.MAX_SAFE_INTEGER`, which has a value of\n`9007199254740991` and is about 8PB in size. We didn't store `size` in UINT64\nbecause file size in Node.js is represented as `Number` and it is not safe to\nconvert `Number` to UINT64.\n\n`integrity` is an object consisting of a few keys:\n* A hashing `algorithm`, currently only `SHA256` is supported.\n* A hex encoded `hash` value representing the hash of the entire file.\n* An array of hex encoded hashes for the `blocks` of the file.  i.e. for a blockSize of 4KB this array contains the hash of every block if you split the file into N 4KB blocks.\n* A integer value `blockSize` representing the size in bytes of each block in the `blocks` hashes above\n\n[pickle]: https://chromium.googlesource.com/chromium/src/+/master/base/pickle.h\n[node-pickle]: https://www.npmjs.org/package/chromium-pickle\n[grunt-asar]: https://github.com/bwin/grunt-asar\n",
    "licenseText": "Copyright (c) 2014 GitHub Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@electron/asar/-/asar-3.2.2.tgz#f6ae4eb4343ad00b994c40db3f09f71f968ff9c0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@electron/asar/-/asar-3.2.2.tgz",
    "hash": "f6ae4eb4343ad00b994c40db3f09f71f968ff9c0",
    "integrity": "sha512-32fMU68x8a6zvxtC1IC/BhPDKTh8rQjdmwEplj3CDpnkcwBzZVN9v/8cK0LJqQ0FOQQVZW8BWZ1S6UU53TYR4w==",
    "registry": "npm",
    "packageName": "@electron/asar",
    "cacheIntegrity": "sha512-32fMU68x8a6zvxtC1IC/BhPDKTh8rQjdmwEplj3CDpnkcwBzZVN9v/8cK0LJqQ0FOQQVZW8BWZ1S6UU53TYR4w== sha1-9q5OtDQ60AuZTEDbPwn3H5aP+cA="
  },
  "registry": "npm",
  "hash": "f6ae4eb4343ad00b994c40db3f09f71f968ff9c0"
}