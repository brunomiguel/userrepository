{
  "manifest": {
    "name": "@esbuild-kit/esm-loader",
    "version": "2.5.0",
    "publishConfig": {
      "access": "public"
    },
    "description": "Node.js loader for compiling TypeScript modules to ESM",
    "keywords": [
      "esbuild",
      "loader",
      "node",
      "esm",
      "typescript"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/esbuild-kit/esm-loader.git"
    },
    "author": {
      "name": "Hiroki Osame",
      "email": "hiroki.osame@gmail.com"
    },
    "type": "module",
    "files": [
      "dist"
    ],
    "main": "./dist/index.js",
    "exports": "./dist/index.js",
    "dependencies": {
      "@esbuild-kit/core-utils": "^3.0.0",
      "get-tsconfig": "^4.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@esbuild-kit-esm-loader-2.5.0-af208eb9e0449038e7f35957ec51b7e70135e116-integrity/node_modules/@esbuild-kit/esm-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "# esm-loader\n\nNode.js `import` hook to instantaneously transform TypeScript to ESM on demand using [esbuild](https://esbuild.github.io/).\n\n### Features\n- Transforms TypeScript to ESM on demand\n- Classic Node.js resolution (extensionless & directory imports)\n- Cached for performance boost\n- Supports Node.js v12.20.0+\n- Handles `node:` import prefixes\n- Resolves `tsconfig.json` [`paths`](https://www.typescriptlang.org/tsconfig#paths)\n\n> **Tip:**\n>\n> _esm-loader_ doesn't hook into `require()` calls or transform CommonJS files (`.js` in commonjs package, `.cjs`, `.cts`).\n>\n> Use this with [cjs-loader](https://github.com/esbuild-kit/cjs-loader) for CommonJS support. Alternatively, use [tsx](https://github.com/esbuild-kit/tsx) to handle them both automatically.\n\n## Install\n\n```sh\nnpm install --save-dev @esbuild-kit/esm-loader\n```\n\n## Usage\n\nPass `@esbuild-kit/esm-loader` into the [`--loader`](https://nodejs.org/api/cli.html#--experimental-loadermodule) flag.\n```sh\nnode --loader @esbuild-kit/esm-loader ./file.ts\n```\n\n### TypeScript configuration\nThe following properties are used from `tsconfig.json` in the working directory:\n- `jsxFactory`\n- `jsxFragmentFactory`\n\n#### Custom `tsconfig.json` path\nBy default, `tsconfig.json` will be detected from the current working directory.\n\nTo set a custom path, use the `ESBK_TSCONFIG_PATH` environment variable:\n\n```sh\nESBK_TSCONFIG_PATH=./path/to/tsconfig.custom.json node --loader @esbuild/esm-loader ./file.ts\n```\n\n### Cache\nModules transformations are cached in the system cache directory ([`TMPDIR`](https://en.wikipedia.org/wiki/TMPDIR)). Transforms are cached by content hash so duplicate dependencies are not re-transformed.\n\nSet environment variable `ESBK_DISABLE_CACHE` to a truthy value to disable the cache:\n\n```sh\nESBK_DISABLE_CACHE=1 node --loader @esbuild-kit/esm-loader ./file.ts\n```\n\n## FAQ\n\n### Can it import JSON modules?\nYes. This loader transpiles JSON modules so it's also compatible with named imports.\n\n### Can it import ESM modules over network?\n\nNode.js has built-in support for network imports [behind the `--experimental-network-imports` flag](https://nodejs.org/api/esm.html#network-based-loading-is-not-enabled-by-default).\n\nYou can pass it in with `esm-loader`:\n\n```sh\nnode --loader @esbuild-kit/esm-loader --experimental-network-imports ./file.ts\n```\n\n### Can it resolve files without an extension?\n\nIn ESM, import paths must be explicit (must include file name and extension).\n\nFor backwards compatibility, this loader adds support for classic Node resolution for extensions: `.js`, `.json`, `.ts`, `.tsx`, `.jsx`. Resolving a `index` file by the directory name works too.\n\n```js\nimport file from './file' // -> ./file.js\nimport directory from './directory' // -> ./directory/index.js\n```\n\n### Can it use Node.js's CommonJS resolution algorithm?\n\nESM import resolution expects explicit import paths, whereas CommonJS resolution expects implicit imports (eg. extensionless & directory imports).\n\nAs a result of this change, Node.js changes how it imports a path that matches both a file and directory. In ESM, the directory would be imported, but in CJS, the file would be imported.\n\nTo use to the CommonJS resolution algorithm, use the [`--experimental-specifier-resolution=node`](https://nodejs.org/api/cli.html#--experimental-specifier-resolutionmode) flag.\n\n```sh\nnode --loader @esbuild-kit/esm-loader --experimental-specifier-resolution=node ./file.ts\n```\n\n## Related\n\n- [tsx](https://github.com/esbuild-kit/tsx) - Node.js runtime powered by esbuild using [`@esbuild-kit/cjs-loader`](https://github.com/esbuild-kit/cjs-loader) and [`@esbuild-kit/esm-loader`](https://github.com/esbuild-kit/esm-loader).\n\n- [@esbuild-kit/cjs-loader](https://github.com/esbuild-kit/cjs-loader) - TypeScript & ESM to CJS transpiler using the Node.js loader API.\n",
    "licenseText": "MIT License\n\nCopyright (c) Hiroki Osame <hiroki.osame@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@esbuild-kit/esm-loader/-/esm-loader-2.5.0.tgz#af208eb9e0449038e7f35957ec51b7e70135e116",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@esbuild-kit/esm-loader/-/esm-loader-2.5.0.tgz",
    "hash": "af208eb9e0449038e7f35957ec51b7e70135e116",
    "integrity": "sha512-ySs0qOsiwj+hsgZM9/MniGdvfa9/WzqfFuIia8/5gSUPeIQIX2/tG91QakxPFOR35VFiwTB7wCiHtiS6dc6SkA==",
    "registry": "npm",
    "packageName": "@esbuild-kit/esm-loader",
    "cacheIntegrity": "sha512-ySs0qOsiwj+hsgZM9/MniGdvfa9/WzqfFuIia8/5gSUPeIQIX2/tG91QakxPFOR35VFiwTB7wCiHtiS6dc6SkA== sha1-ryCOueBEkDjn81lX7FG35wE14RY="
  },
  "registry": "npm",
  "hash": "af208eb9e0449038e7f35957ec51b7e70135e116"
}