{
  "manifest": {
    "name": "unist-util-visit-parents",
    "version": "5.1.1",
    "description": "unist utility to recursively walk over nodes, with ancestral information",
    "license": "MIT",
    "keywords": [
      "unist",
      "unist-util",
      "util",
      "utility",
      "tree",
      "ast",
      "visit",
      "traverse",
      "walk",
      "check",
      "parent",
      "parents"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/syntax-tree/unist-util-visit-parents.git"
    },
    "bugs": {
      "url": "https://github.com/syntax-tree/unist-util-visit-parents/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/unified"
    },
    "author": {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    },
    "contributors": [
      {
        "name": "Titus Wormer",
        "email": "tituswormer@gmail.com",
        "url": "https://wooorm.com"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "main": "index.js",
    "browser": {
      "./color.js": "./color.browser.js"
    },
    "react-native": {
      "./color.js": "./color.browser.js"
    },
    "types": "index.d.ts",
    "files": [
      "color.d.ts",
      "color.js",
      "color.browser.d.ts",
      "color.browser.js",
      "complex-types.d.ts",
      "index.d.ts",
      "index.js"
    ],
    "dependencies": {
      "@types/unist": "^2.0.0",
      "unist-util-is": "^5.0.0"
    },
    "devDependencies": {
      "@types/hast": "^2.0.0",
      "@types/mdast": "^3.0.0",
      "@types/tape": "^4.0.0",
      "c8": "^7.0.0",
      "mdast-util-from-markdown": "^1.0.0",
      "mdast-util-gfm": "^2.0.0",
      "micromark-extension-gfm": "^2.0.0",
      "prettier": "^2.0.0",
      "remark-cli": "^11.0.0",
      "remark-preset-wooorm": "^9.0.0",
      "rimraf": "^3.0.0",
      "strip-ansi": "^7.0.0",
      "tape": "^5.0.0",
      "tsd": "^0.22.0",
      "type-coverage": "^2.0.0",
      "typescript": "^4.7.0",
      "xo": "^0.51.0"
    },
    "scripts": {
      "prepack": "npm run build && npm run format",
      "build": "rimraf \"{color,color.browser,index,test}.d.ts\" && tsc && tsd && type-coverage",
      "format": "remark . -qfo && prettier . --write --loglevel warn && xo --fix",
      "test-api": "node test.js",
      "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov node test.js",
      "test": "npm run build && npm run format && npm run test-coverage"
    },
    "prettier": {
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "bracketSpacing": false,
      "semi": false,
      "trailingComma": "none"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "@typescript-eslint/array-type": "off"
      }
    },
    "remarkConfig": {
      "plugins": [
        "preset-wooorm"
      ]
    },
    "typeCoverage": {
      "atLeast": 100,
      "detail": true,
      "strict": true,
      "ignoreCatch": true,
      "#": "needed `any`s",
      "ignoreFiles": [
        "complex-types.d.ts"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-unist-util-visit-parents-5.1.1-868f353e6fce6bf8fa875b251b0f4fec3be709bb-integrity/node_modules/unist-util-visit-parents/package.json",
    "readmeFilename": "readme.md",
    "readme": "# unist-util-visit-parents\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\n[unist][] utility to walk the tree with a stack of parents.\n\n## Contents\n\n*   [What is this?](#what-is-this)\n*   [When should I use this?](#when-should-i-use-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`visitParents(tree[, test], visitor[, reverse])`](#visitparentstree-test-visitor-reverse)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Related](#related)\n*   [Contribute](#contribute)\n*   [License](#license)\n\n## What is this?\n\nThis is a very important utility for working with unist as it lets you walk the\ntree.\n\n## When should I use this?\n\nYou can use this utility when you want to walk the tree and want to know about\nevery parent of each node.\nYou can use [`unist-util-visit`][unist-util-visit] if you donâ€™t care about the\nentire stack of parents.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 12.20+, 14.14+, 16.0+, 18.0+), install with [npm][]:\n\n```sh\nnpm install unist-util-visit-parents\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {visitParents} from \"https://esm.sh/unist-util-visit-parents@5\"\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {visitParents} from \"https://esm.sh/unist-util-visit-parents@5?bundle\"\n</script>\n```\n\n## Use\n\n```js\nimport {visitParents} from 'unist-util-visit-parents'\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\nconst tree = fromMarkdown('Some *emphasis*, **strong**, and `code`.')\n\nvisitParents(tree, 'strong', (node, ancestors) => {\n  console.log(node.type, ancestors.map(ancestor => ancestor.type))\n})\n```\n\nYields:\n\n```js\nstrong ['root', 'paragraph']\n```\n\n## API\n\nThis package exports the identifiers `visitParents`, `SKIP`, `CONTINUE`, and\n`EXIT`.\nThere is no default export.\n\n### `visitParents(tree[, test], visitor[, reverse])`\n\nWalk the `tree` ([`Node`][node]) and visit [*inclusive descendants*][descendant]\nwith ancestral information.\n\nThis algorithm performs *[depth-first][]* *[tree traversal][tree-traversal]* in\n*[preorder][]* (**NLR**), or if `reverse` is given, in *reverse preorder*\n(**NRL**).\n\nYou can choose for which nodes `visitor` is called by passing a `test`.\n\nWalking the tree is an intensive task.\nMake use of the return values of the visitor when possible.\nInstead of walking a tree multiple times with different `test`s, walk it once\nwithout a test, and use [`unist-util-is`][unist-util-is] to check if a node\nmatches a test, and then perform different operations.\n\nYou can change the tree.\nSee `visitor` below for more info.\n\n###### Parameters\n\n*   `tree` ([`Node`][node])\n    â€” tree to traverse\n*   `test` ([`Test`][test], optional)\n    â€” [`unist-util-is`][unist-util-is]-compatible test\n*   `visitor` ([Function][visitor])\n    â€” function called for nodes that pass `test`\n*   `reverse` (`boolean`, default: `false`)\n    â€” traverse in reverse preorder (NRL) instead of preorder (NLR) (default\n\n#### `next? = visitor(node, ancestors)`\n\nCalled when a node (matching `test`, if given) is entered.\n\nVisitors are free to change `node`.\nThey can also transform the [parent][] of node (the last of `ancestors`).\nReplacing `node` itself is okay if `SKIP` is returned.\nWhen adding or removing previous [sibling][]s (or next siblings, in case of\n`reverse`) of `node`, `visitor` must return a new [`index`][index] (`number`)\nto specify the sibling to move to after `node` is traversed.\nAdding or removing next siblings of `node` (or previous siblings, in case of\n`reverse`) is fine without needing to return a new `index`.\nReplacing the `children` of a node is fine, but replacing them on an ancestor\nis not okay and still causes them to be visited.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) â€” found node\n*   `ancestors` (`Array<Node>`) â€” [ancestor][]s of `node`\n\n##### Returns\n\nThe return value can have the following forms:\n\n*   [`index`][index] (`number`) â€” like a tuple of `[CONTINUE, index]`\n*   `action` (`*`) â€” like a tuple of `[action]`\n*   `tuple` (`[action, index?]`) â€” array with one or two values, the first an\n    `action`, the second and `index`.\n\n> ðŸ‘‰ **Note**: yielding a tuple only makes sense if the `action` is `SKIP`.\n> Otherwise, if the `action` is `EXIT`, that action can be returned.\n> Or if the `action` is `CONTINUE`, `index` can be returned.\n\n###### `action`\n\nAn action can have the following values:\n\n*   `EXIT` (`false`) â€” stop traversing immediately\n*   `CONTINUE` (`true`) â€” continue traversing as normal\n*   `SKIP` (`'skip'`) â€” do not traverse this nodeâ€™s children\n\n###### `index`\n\nNext [`index`][index] (`number`).\nDefines that the sibling at `index` should be moved to (after `node` itself is\ncompletely traversed).\nUseful if mutating the tree, such as removing the node the visitor is currently\non, or any of its previous siblings (or next siblings, in case of `reverse`).\nResults less than `0` or greater than or equal to `children.length` stop\ntraversing the parent\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional types `Test`, `Action`, `Index`, `ActionTuple`,\n`VisitorResult`, and `Visitor`.\n\nIt also exports the types `BuildVisitor<Tree extends Node = Node, Check extends\nTest = string>` to properly type visitors from a tree and a test, and\n`Visitor<Visited extends Node = Node, Ancestor extends Parent = Parent>` to\nbuild an arbitrary visitor, from `unist-util-visit-parents/complex-types.d.ts`.\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with all maintained\nversions of Node.js.\nAs of now, that is Node.js 12.20+, 14.14+, 16.0+, and 18.0+.\nOur projects sometimes work with older versions, but this is not guaranteed.\n\n## Related\n\n*   [`unist-util-visit`](https://github.com/syntax-tree/unist-util-visit)\n    â€” walk the tree with one parent\n*   [`unist-util-filter`](https://github.com/syntax-tree/unist-util-filter)\n    â€” create a new tree with all nodes that pass a test\n*   [`unist-util-map`](https://github.com/syntax-tree/unist-util-map)\n    â€” create a new tree with all nodes mapped by a given function\n*   [`unist-util-flatmap`](https://gitlab.com/staltz/unist-util-flatmap)\n    â€” create a new tree by mapping (to an array) with the given function\n*   [`unist-util-remove`](https://github.com/syntax-tree/unist-util-remove)\n    â€” remove nodes from a tree that pass a test\n*   [`unist-util-select`](https://github.com/syntax-tree/unist-util-select)\n    â€” select nodes with CSS-like selectors\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`syntax-tree/.github`][health] for\nways to get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] Â© [Titus Wormer][author]\n\n<!-- Definition -->\n\n[build-badge]: https://github.com/syntax-tree/unist-util-visit-parents/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/unist-util-visit-parents/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/unist-util-visit-parents.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/unist-util-visit-parents\n\n[downloads-badge]: https://img.shields.io/npm/dm/unist-util-visit-parents.svg\n\n[downloads]: https://www.npmjs.com/package/unist-util-visit-parents\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/unist-util-visit-parents.svg\n\n[size]: https://bundlephobia.com/result?p=unist-util-visit-parents\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/syntax-tree/.github\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[unist]: https://github.com/syntax-tree/unist\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[depth-first]: https://github.com/syntax-tree/unist#depth-first-traversal\n\n[tree-traversal]: https://github.com/syntax-tree/unist#tree-traversal\n\n[preorder]: https://github.com/syntax-tree/unist#preorder\n\n[descendant]: https://github.com/syntax-tree/unist#descendant\n\n[parent]: https://github.com/syntax-tree/unist#parent-1\n\n[sibling]: https://github.com/syntax-tree/unist#sibling\n\n[index]: https://github.com/syntax-tree/unist#index\n\n[ancestor]: https://github.com/syntax-tree/unist#ancestor\n\n[unist-util-visit]: https://github.com/syntax-tree/unist-util-visit\n\n[unist-util-is]: https://github.com/syntax-tree/unist-util-is\n\n[test]: https://github.com/syntax-tree/unist-util-is#test\n\n[visitor]: #next--visitornode-ancestors\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2016 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-5.1.1.tgz#868f353e6fce6bf8fa875b251b0f4fec3be709bb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-5.1.1.tgz",
    "hash": "868f353e6fce6bf8fa875b251b0f4fec3be709bb",
    "integrity": "sha512-gks4baapT/kNRaWxuGkl5BIhoanZo7sC/cUT/JToSRNL1dYoXRFl75d++NkjYk4TAu2uv2Px+l8guMajogeuiw==",
    "registry": "npm",
    "packageName": "unist-util-visit-parents",
    "cacheIntegrity": "sha512-gks4baapT/kNRaWxuGkl5BIhoanZo7sC/cUT/JToSRNL1dYoXRFl75d++NkjYk4TAu2uv2Px+l8guMajogeuiw== sha1-ho81Pm/Oa/j6h1slGw9P7DvnCbs="
  },
  "registry": "npm",
  "hash": "868f353e6fce6bf8fa875b251b0f4fec3be709bb"
}