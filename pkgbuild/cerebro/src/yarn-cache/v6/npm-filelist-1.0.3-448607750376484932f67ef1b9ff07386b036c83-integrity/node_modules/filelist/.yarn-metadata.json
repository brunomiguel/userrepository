{
  "manifest": {
    "name": "filelist",
    "version": "1.0.3",
    "description": "Lazy-evaluating list of files, based on globs or regex patterns",
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "test": "jake test"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mde/filelist.git"
    },
    "keywords": [
      "file",
      "utility",
      "glob"
    ],
    "author": {
      "name": "Matthew Eernisse",
      "email": "mde@fleegix.org",
      "url": "http://fleegix.org"
    },
    "license": "Apache-2.0",
    "bugs": {
      "url": "https://github.com/mde/filelist/issues"
    },
    "homepage": "https://github.com/mde/filelist",
    "dependencies": {
      "minimatch": "^5.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-filelist-1.0.3-448607750376484932f67ef1b9ff07386b036c83-integrity/node_modules/filelist/package.json",
    "readmeFilename": "README.md",
    "readme": "## FileList\n\nA FileList is a lazy-evaluated list of files. When given a list\nof glob patterns for possible files to be included in the file\nlist, instead of searching the file structures to find the files,\na FileList holds the pattern for latter use.\n\nThis allows you to define a FileList to match any number of\nfiles, but only search out the actual files when then FileList\nitself is actually used. The key is that the first time an\nelement of the FileList/Array is requested, the pending patterns\nare resolved into a real list of file names.\n\n### Usage\n\nAdd files to the list with the `include` method. You can add glob\npatterns, individual files, or RegExp objects. When the Array\nmethods are invoked on the FileList, these items are resolved to\nan actual list of files.\n\n```javascript\nvar fl = new FileList();\nfl.include('test/*.js');\nfl.exclude('test/helpers.js');\n```\n\nUse the `exclude` method to override inclusions. You can use this\nwhen your inclusions are too broad.\n\n### Array methods\n\nFileList has lazy-evaluated versions of most of the array\nmethods, including the following:\n\n* join\n* pop\n* push\n* concat\n* reverse\n* shift\n* unshift\n* slice\n* splice\n* sort\n* filter\n* forEach\n* some\n* every\n* map\n* indexOf\n* lastIndexOf\n* reduce\n* reduceRight\n\nWhen you call one of these methods, the items in the FileList\nwill be resolved to the full list of files, and the method will\nbe invoked on that result.\n\n### Special `length` method\n\n`length`: FileList includes a length *method* (instead of a\nproperty) which returns the number of actual files in the list\nonce it's been resolved.\n\n### FileList-specific methods\n\n`include`: Add a filename/glob/regex to the list\n\n`exclude`: Override inclusions by excluding a filename/glob/regex\n\n`resolve`: Resolve the items in the FileList to the full list of\nfiles. This method is invoked automatically when one of the array\nmethods is called.\n\n`toArray`: Immediately resolves the list of items, and returns an\nactual array of filepaths.\n\n`clearInclusions`: Clears any pending items -- must be used\nbefore resolving the list.\n\n`clearExclusions`: Clears the list of exclusions rules.\n\n\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/filelist/-/filelist-1.0.3.tgz#448607750376484932f67ef1b9ff07386b036c83",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/filelist/-/filelist-1.0.3.tgz",
    "hash": "448607750376484932f67ef1b9ff07386b036c83",
    "integrity": "sha512-LwjCsruLWQULGYKy7TX0OPtrL9kLpojOFKc5VCTxdFTV7w5zbsgqVKfnkKG7Qgjtq50gKfO56hJv88OfcGb70Q==",
    "registry": "npm",
    "packageName": "filelist",
    "cacheIntegrity": "sha512-LwjCsruLWQULGYKy7TX0OPtrL9kLpojOFKc5VCTxdFTV7w5zbsgqVKfnkKG7Qgjtq50gKfO56hJv88OfcGb70Q== sha1-RIYHdQN2SEky9n7xuf8HOGsDbIM="
  },
  "registry": "npm",
  "hash": "448607750376484932f67ef1b9ff07386b036c83"
}