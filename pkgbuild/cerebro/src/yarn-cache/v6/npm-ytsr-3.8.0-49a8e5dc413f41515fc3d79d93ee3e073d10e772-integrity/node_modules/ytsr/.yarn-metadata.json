{
  "manifest": {
    "name": "ytsr",
    "version": "3.8.0",
    "description": "Simple package to search YouTube - no strings attached.",
    "keywords": [
      "youtube",
      "search",
      "yt",
      "ytsearcher",
      "api",
      "playlist",
      "channel",
      "video",
      "scrape",
      "pagination",
      "promise"
    ],
    "homepage": "https://github.com/TimeForANinja/node-ytsr#readme",
    "bugs": {
      "url": "https://github.com/TimeForANinja/node-ytsr/issues"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/TimeForANinja/node-ytsr.git"
    },
    "license": "MIT",
    "author": {
      "name": "Tobias Kutscha",
      "url": "https://github.com/TimeForANinja"
    },
    "main": "./lib/main.js",
    "types": "./typings/index.d.ts",
    "files": [
      "lib",
      "typings"
    ],
    "scripts": {
      "lint": "eslint ./",
      "lint:fix": "eslint --fix ./",
      "lint:typings": "tslint typings/index.d.ts",
      "lint:typings:fix": "tslint --fix typings/index.d.ts",
      "mocha": "mocha -- -t 16000 test/*-test.js",
      "mocha:coverage": "mocha -- -t 16000 test/*-test.js --exclude test/e2e-test.js",
      "nyc": "nyc --reporter=lcov npm run-script mocha",
      "nyc:coverage": "nyc --reporter=lcov npm run-script mocha:coverage",
      "test": "npm run-script nyc",
      "test:coverage": "npm run-script nyc:coverage && codecov"
    },
    "dependencies": {
      "miniget": "^4.2.2"
    },
    "devDependencies": {
      "assert-diff": "^3.0.2",
      "codecov": "^3.8.1",
      "dtslint": "^4.0.8",
      "eslint": "^7.23.0",
      "mocha": "^8.3.2",
      "nock": "^13.0.11",
      "nyc": "^15.1.0",
      "typescript": "^4.2.3"
    },
    "engines": {
      "node": ">=8"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-ytsr-3.8.0-49a8e5dc413f41515fc3d79d93ee3e073d10e772-integrity/node_modules/ytsr/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-ytsr\n[![NPM version](https://img.shields.io/npm/v/ytsr.svg?maxAge=3600)](https://www.npmjs.com/package/ytsr)\n[![NPM downloads](https://img.shields.io/npm/dt/ytsr.svg?maxAge=3600)](https://www.npmjs.com/package/ytsr)\n[![codecov](https://codecov.io/gh/timeforaninja/node-ytsr/branch/master/graph/badge.svg)](https://codecov.io/gh/timeforaninja/node-ytsr)\n[![Known Vulnerabilities](https://snyk.io/test/github/timeforaninja/node-ytsr/badge.svg)](https://snyk.io/test/github/timeforaninja/node-ytsr)\n[![Discord](https://img.shields.io/discord/484464227067887645.svg)](https://discord.gg/V3vSCs7)\n\nSimple js only package to search for Youtube for Videos, Playlists and many more.\nDoes not require any login or Google-API-Key.\n\n# Support\nYou can contact us for support on our [chat server](https://discord.gg/V3vSCs7)\n\n# Usage\n\n```js\nconst ytsr = require('ytsr');\n\nconst searchResults = await ytsr('github');\n```\n\n\n# API\n### ytsr(searchString, [options])\n\nSearches for the given string\n\n* `searchString`\n    * search string or url (from getFilters) to search from\n* `options`\n    * object with options\n    * possible settings:\n    * gl[String] -> 2-Digit Code of a Country, defaults to `US` - Allows for localisation of the request\n    * hl[String] -> 2-Digit Code for a Language, defaults to `en` - Allows for localisation of the request\n    * safeSearch[Boolean] -> pull items in youtube restriction mode.\n    * limit[integer] -> limits the pulled items, defaults to 100, set to Infinity to get the whole list of search results - numbers <1 result in the default being used\n    * pages[Number] -> limits the pulled pages, pages contain 20-30 items, set to Infinity to get the whole list of search results - numbers <1 result in the default limit being used - overwrites limit\n    * requestOptions[Object] -> Additional parameters to passed to [miniget](https://github.com/fent/node-miniget), which is used to do the https requests\n\n* returns a Promise\n* [Example response](https://github.com/timeforaninja/node-ytsr/blob/master/example/example_search_output.txt)\n\n\n### ytsr.getFilters(searchString, options)\n\nPulls avaible filters for the given string or link\n\n#### Usage\n\n```js\nconst ytsr = require('ytsr');\n\nconst filters1 = await ytsr.getFilters('github');\nconst filter1 = filters1.get('Type').get('Video');\nconst filters2 = await ytsr.getFilters(filter1.url);\nconst filter2 = filters2.get('Features').get('Live');\nconst options = {\n  pages: 2,\n}\nconst searchResults = await ytsr(filter2.url, options);\n```\n\n* `searchString`\n    * string to search for\n    * or previously optained filter ref\n* `options`\n    * gl[String] -> 2-Digit Code of a Country, defaults to `US` - Allows for localisation of the request\n    * hl[String] -> 2-Digit Code for a Language, defaults to `en` - Allows for localisation of the request\n    * requestOptions[Object] -> Additional parameters to passed to [miniget](https://github.com/fent/node-miniget), which is used to do the https requests\n* returns a Promise resulting in a `Map<String, Map<String, Filter>>`\n* [Example response](https://github.com/timeforaninja/node-ytsr/blob/master/example/example_filters_output.txt)\n\n### ytsr.continueReq(continuationData)\nContinues a previous request by pulling yet another page.  \nThe previous request had to be done using `pages` limitation.\n\n#### Usage\n```js\nconst ytsr = require('ytsr');\n\nconst firstResultBatch = await ytsr('github', { pages: 1 });\nconst secondResultBatch = ytsr.continueReq(firstResultBatch.continuation);\nconst thirdResultBatch = ytsr.continueReq(secondResultBatch.continuation);\n\n// You can now use the .items property of all result batches e.g.:\nconsole.log(firstResultBatch.items);\nconsole.log(secondResultBatch.items);\nconsole.log(thirdResultBatch.items);\n```\n\n* returns a Promise resolving into `{ continuation, items }`\n\n# Related / Works well with\n\n* [node-ytdl-core](https://github.com/fent/node-ytdl-core)\n* [node-ytpl](https://github.com/TimeForANinja/node-ytpl)\n\n\n# Install\n\n    npm install --save ytsr\n\n# License\nMIT\n",
    "licenseText": "Copyright (C) 2017 by Tobias Kutscha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ytsr/-/ytsr-3.8.0.tgz#49a8e5dc413f41515fc3d79d93ee3e073d10e772",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ytsr/-/ytsr-3.8.0.tgz",
    "hash": "49a8e5dc413f41515fc3d79d93ee3e073d10e772",
    "integrity": "sha512-R+RfYXvBBMAr2e4OxrQ5SBv5x/Mdhmcj1Q8TH0f2HK5d2jbhHOtK4BdzPvLriA6MDoMwqqX04GD8Rpf9UNtSTg==",
    "registry": "npm",
    "packageName": "ytsr",
    "cacheIntegrity": "sha512-R+RfYXvBBMAr2e4OxrQ5SBv5x/Mdhmcj1Q8TH0f2HK5d2jbhHOtK4BdzPvLriA6MDoMwqqX04GD8Rpf9UNtSTg== sha1-Sajl3EE/QVFfw9edk+4+Bz0Q53I="
  },
  "registry": "npm",
  "hash": "49a8e5dc413f41515fc3d79d93ee3e073d10e772"
}