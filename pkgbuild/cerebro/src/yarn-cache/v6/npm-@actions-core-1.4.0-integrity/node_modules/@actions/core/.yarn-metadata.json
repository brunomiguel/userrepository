{
  "manifest": {
    "name": "@actions/core",
    "version": "1.4.0",
    "description": "Actions core lib",
    "keywords": [
      "github",
      "actions",
      "core"
    ],
    "homepage": "https://github.com/actions/toolkit/tree/main/packages/core",
    "license": "MIT",
    "main": "lib/core.js",
    "types": "lib/core.d.ts",
    "files": [
      "lib",
      "!.DS_Store"
    ],
    "publishConfig": {
      "access": "public"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/actions/toolkit.git",
      "directory": "packages/core"
    },
    "scripts": {
      "audit-moderate": "npm install && npm audit --json --audit-level=moderate > audit.json",
      "test": "echo \"Error: run tests from root\" && exit 1",
      "tsc": "tsc"
    },
    "bugs": {
      "url": "https://github.com/actions/toolkit/issues"
    },
    "devDependencies": {
      "@types/node": "^12.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@actions-core-1.4.0-integrity/node_modules/@actions/core/package.json",
    "readmeFilename": "README.md",
    "readme": "# `@actions/core`\n\n> Core functions for setting results, logging, registering secrets and exporting variables across actions\n\n## Usage\n\n### Import the package\n\n```js\n// javascript\nconst core = require('@actions/core');\n\n// typescript\nimport * as core from '@actions/core';\n```\n\n#### Inputs/Outputs\n\nAction inputs can be read with `getInput` which returns a `string` or `getBooleanInput` which parses a boolean based on the [yaml 1.2 specification](https://yaml.org/spec/1.2/spec.html#id2804923). If `required` set to be false, the input should have a default value in `action.yml`.\n\nOutputs can be set with `setOutput` which makes them available to be mapped into inputs of other actions to ensure they are decoupled.\n\n```js\nconst myInput = core.getInput('inputName', { required: true });\nconst myBooleanInput = core.getBooleanInput('booleanInputName', { required: true });\nconst myMultilineInput = core.getMultilineInput('multilineInputName', { required: true });\ncore.setOutput('outputKey', 'outputVal');\n```\n\n#### Exporting variables\n\nSince each step runs in a separate process, you can use `exportVariable` to add it to this step and future steps environment blocks.\n\n```js\ncore.exportVariable('envVar', 'Val');\n```\n\n#### Setting a secret\n\nSetting a secret registers the secret with the runner to ensure it is masked in logs.\n\n```js\ncore.setSecret('myPassword');\n```\n\n#### PATH Manipulation\n\nTo make a tool's path available in the path for the remainder of the job (without altering the machine or containers state), use `addPath`.  The runner will prepend the path given to the jobs PATH.\n\n```js\ncore.addPath('/path/to/mytool');\n```\n\n#### Exit codes\n\nYou should use this library to set the failing exit code for your action.  If status is not set and the script runs to completion, that will lead to a success.\n\n```js\nconst core = require('@actions/core');\n\ntry {\n  // Do stuff\n}\ncatch (err) {\n  // setFailed logs the message and sets a failing exit code\n  core.setFailed(`Action failed with error ${err}`);\n}\n```\n\nNote that `setNeutral` is not yet implemented in actions V2 but equivalent functionality is being planned.\n\n#### Logging\n\nFinally, this library provides some utilities for logging. Note that debug logging is hidden from the logs by default. This behavior can be toggled by enabling the [Step Debug Logs](../../docs/action-debugging.md#step-debug-logs).\n\n```js\nconst core = require('@actions/core');\n\nconst myInput = core.getInput('input');\ntry {\n  core.debug('Inside try block');\n  \n  if (!myInput) {\n    core.warning('myInput was not set');\n  }\n  \n  if (core.isDebug()) {\n    // curl -v https://github.com\n  } else {\n    // curl https://github.com\n  }\n\n  // Do stuff\n  core.info('Output to the actions build log')\n}\ncatch (err) {\n  core.error(`Error ${err}, action may still succeed though`);\n}\n```\n\nThis library can also wrap chunks of output in foldable groups.\n\n```js\nconst core = require('@actions/core')\n\n// Manually wrap output\ncore.startGroup('Do some function')\ndoSomeFunction()\ncore.endGroup()\n\n// Wrap an asynchronous function call\nconst result = await core.group('Do something async', async () => {\n  const response = await doSomeHTTPRequest()\n  return response\n})\n```\n\n#### Styling output\n\nColored output is supported in the Action logs via standard [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). 3/4 bit, 8 bit and 24 bit colors are all supported.\n\nForeground colors:\n\n```js\n// 3/4 bit\ncore.info('\\u001b[35mThis foreground will be magenta')\n\n// 8 bit\ncore.info('\\u001b[38;5;6mThis foreground will be cyan')\n\n// 24 bit\ncore.info('\\u001b[38;2;255;0;0mThis foreground will be bright red')\n```\n\nBackground colors:\n\n```js\n// 3/4 bit\ncore.info('\\u001b[43mThis background will be yellow');\n\n// 8 bit\ncore.info('\\u001b[48;5;6mThis background will be cyan')\n\n// 24 bit\ncore.info('\\u001b[48;2;255;0;0mThis background will be bright red')\n```\n\nSpecial styles:\n\n```js\ncore.info('\\u001b[1mBold text')\ncore.info('\\u001b[3mItalic text')\ncore.info('\\u001b[4mUnderlined text')\n```\n\nANSI escape codes can be combined with one another:\n\n```js\ncore.info('\\u001b[31;46mRed foreground with a cyan background and \\u001b[1mbold text at the end');\n```\n\n> Note: Escape codes reset at the start of each line\n\n```js\ncore.info('\\u001b[35mThis foreground will be magenta')\ncore.info('This foreground will reset to the default')\n```\n\nManually typing escape codes can be a little difficult, but you can use third party modules such as [ansi-styles](https://github.com/chalk/ansi-styles).\n\n```js\nconst style = require('ansi-styles');\ncore.info(style.color.ansi16m.hex('#abcdef') + 'Hello world!')\n```\n\n#### Action state\n\nYou can use this library to save state and get state for sharing information between a given wrapper action:\n\n**action.yml**:\n\n```yaml\nname: 'Wrapper action sample'\ninputs:\n  name:\n    default: 'GitHub'\nruns:\n  using: 'node12'\n  main: 'main.js'\n  post: 'cleanup.js'\n```\n\nIn action's `main.js`:\n\n```js\nconst core = require('@actions/core');\n\ncore.saveState(\"pidToKill\", 12345);\n```\n\nIn action's `cleanup.js`:\n\n```js\nconst core = require('@actions/core');\n\nvar pid = core.getState(\"pidToKill\");\n\nprocess.kill(pid);\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2019 GitHub\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@actions/core/-/core-1.4.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@actions/core/-/core-1.4.0.tgz",
    "hash": "",
    "integrity": "sha512-CGx2ilGq5i7zSLgiiGUtBCxhRRxibJYU6Fim0Q1Wg2aQL2LTnF27zbqZOrxfvFQ55eSBW0L8uVStgtKMpa0Qlg==",
    "registry": "npm",
    "packageName": "@actions/core",
    "cacheIntegrity": "sha512-CGx2ilGq5i7zSLgiiGUtBCxhRRxibJYU6Fim0Q1Wg2aQL2LTnF27zbqZOrxfvFQ55eSBW0L8uVStgtKMpa0Qlg== sha1-zy5u4xfjFLA4hq3+sg5EjVDW5SQ="
  },
  "registry": "npm",
  "hash": "086c768a51aae62ef348b82288652d042c61451c626c9614e858a6d10d568366902f62d39c5dbbcdba993abc5fbc5439e5e4815b42fcb954ad82d28ca5ad1096"
}