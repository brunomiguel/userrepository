{
  "manifest": {
    "name": "@capacitor/app",
    "version": "4.0.1",
    "description": "The App API handles high level App state and events.For example, this API emits events when the app enters and leaves the foreground, handles deeplinks, opens other apps, and manages persisted plugin state.",
    "main": "dist/plugin.cjs.js",
    "module": "dist/esm/index.js",
    "types": "dist/esm/index.d.ts",
    "unpkg": "dist/plugin.js",
    "files": [
      "android/src/main/",
      "android/build.gradle",
      "dist/",
      "ios/Plugin/",
      "CapacitorApp.podspec"
    ],
    "author": {
      "name": "Ionic",
      "email": "hi@ionicframework.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ionic-team/capacitor-plugins.git"
    },
    "bugs": {
      "url": "https://github.com/ionic-team/capacitor-plugins/issues"
    },
    "keywords": [
      "capacitor",
      "plugin",
      "native"
    ],
    "scripts": {
      "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
      "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin -destination generic/platform=iOS && cd ..",
      "verify:android": "cd android && ./gradlew clean build test && cd ..",
      "verify:web": "npm run build",
      "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
      "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- --fix --format",
      "eslint": "eslint . --ext ts",
      "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
      "swiftlint": "node-swiftlint",
      "docgen": "docgen --api AppPlugin --output-readme README.md",
      "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
      "clean": "rimraf ./dist",
      "watch": "tsc --watch",
      "prepublishOnly": "npm run build",
      "publish:cocoapod": "pod trunk push ./CapacitorApp.podspec --allow-warnings"
    },
    "devDependencies": {
      "@capacitor/android": "^4.0.0",
      "@capacitor/core": "^4.0.0",
      "@capacitor/docgen": "0.0.18",
      "@capacitor/ios": "^4.0.0",
      "@ionic/eslint-config": "^0.3.0",
      "@ionic/prettier-config": "~1.0.1",
      "@ionic/swiftlint-config": "^1.1.2",
      "eslint": "^7.11.0",
      "prettier": "~2.3.0",
      "prettier-plugin-java": "~1.0.2",
      "rimraf": "^3.0.0",
      "rollup": "^2.29.0",
      "swiftlint": "^1.0.1",
      "typescript": "~4.1.5"
    },
    "peerDependencies": {
      "@capacitor/core": "^4.0.0"
    },
    "prettier": "@ionic/prettier-config",
    "swiftlint": "@ionic/swiftlint-config",
    "eslintConfig": {
      "extends": "@ionic/eslint-config/recommended"
    },
    "capacitor": {
      "ios": {
        "src": "ios"
      },
      "android": {
        "src": "android"
      }
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "42324ec218c8699bc10f914169ac366c8224b259",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@capacitor-app-4.0.1-05c60541c427ef30f4762d8f786e70d0ed32fe01-integrity/node_modules/@capacitor/app/package.json",
    "readmeFilename": "README.md",
    "readme": "# @capacitor/app\n\nThe App API handles high level App state and events. For example, this API emits events when the app enters and leaves the foreground, handles deeplinks, opens other apps, and manages persisted plugin state.\n\n## Install\n\n```bash\nnpm install @capacitor/app\nnpx cap sync\n```\n\n## iOS\n\nFor being able to open the app from a custom scheme you need to register the scheme first. You can do it by editing the [`Info.plist`](https://capacitorjs.com/docs/ios/configuration#configuring-infoplist) file and adding this lines.\n\n\n```xml\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>com.getcapacitor.capacitor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>mycustomscheme</string>\n    </array>\n  </dict>\n</array>\n```\n\n## Android\n\nFor being able to open the app from a custom scheme you need to register the scheme first. You can do it by adding this lines inside the `activity` section of the `AndroidManifest.xml`.\n\n```xml\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n`custom_url_scheme` value is stored in `strings.xml`. When the Android platform is added, `@capacitor/cli` adds the app's package name as default value, but can be replaced by editing the `strings.xml` file.\n\n## Example\n\n```typescript\nimport { App } from '@capacitor/app';\n\nApp.addListener('appStateChange', ({ isActive }) => {\n  console.log('App state changed. Is active?', isActive);\n});\n\nApp.addListener('appUrlOpen', data => {\n  console.log('App opened with URL:', data);\n});\n\nApp.addListener('appRestoredResult', data => {\n  console.log('Restored state:', data);\n});\n\nconst checkAppLaunchUrl = async () => {\n  const { url } = await App.getLaunchUrl();\n\n  console.log('App opened with URL: ' + url);\n};\n```\n\n## API\n\n<docgen-index>\n\n* [`exitApp()`](#exitapp)\n* [`getInfo()`](#getinfo)\n* [`getState()`](#getstate)\n* [`getLaunchUrl()`](#getlaunchurl)\n* [`minimizeApp()`](#minimizeapp)\n* [`addListener('appStateChange', ...)`](#addlistenerappstatechange)\n* [`addListener('appUrlOpen', ...)`](#addlistenerappurlopen)\n* [`addListener('appRestoredResult', ...)`](#addlistenerapprestoredresult)\n* [`addListener('backButton', ...)`](#addlistenerbackbutton)\n* [`removeAllListeners()`](#removealllisteners)\n* [Interfaces](#interfaces)\n* [Type Aliases](#type-aliases)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### exitApp()\n\n```typescript\nexitApp() => Promise<void>\n```\n\nForce exit the app. This should only be used in conjunction with the `backButton` handler for Android to\nexit the app when navigation is complete.\n\nIonic handles this itself so you shouldn't need to call this if using Ionic.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### getInfo()\n\n```typescript\ngetInfo() => Promise<AppInfo>\n```\n\nReturn information about the app.\n\n**Returns:** <code>Promise&lt;<a href=\"#appinfo\">AppInfo</a>&gt;</code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### getState()\n\n```typescript\ngetState() => Promise<AppState>\n```\n\nGets the current app state.\n\n**Returns:** <code>Promise&lt;<a href=\"#appstate\">AppState</a>&gt;</code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### getLaunchUrl()\n\n```typescript\ngetLaunchUrl() => Promise<AppLaunchUrl | undefined>\n```\n\nGet the URL the app was launched with, if any.\n\n**Returns:** <code>Promise&lt;<a href=\"#applaunchurl\">AppLaunchUrl</a>&gt;</code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### minimizeApp()\n\n```typescript\nminimizeApp() => Promise<void>\n```\n\nMinimizes the application.\n\nOnly available for Android.\n\n**Since:** 1.1.0\n\n--------------------\n\n\n### addListener('appStateChange', ...)\n\n```typescript\naddListener(eventName: 'appStateChange', listenerFunc: StateChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for changes in the App's active state (whether the app is in the foreground or background)\n\n| Param              | Type                                                                |\n| ------------------ | ------------------------------------------------------------------- |\n| **`eventName`**    | <code>'appStateChange'</code>                                       |\n| **`listenerFunc`** | <code><a href=\"#statechangelistener\">StateChangeListener</a></code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('appUrlOpen', ...)\n\n```typescript\naddListener(eventName: 'appUrlOpen', listenerFunc: URLOpenListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for url open events for the app. This handles both custom URL scheme links as well\nas URLs your app handles (Universal Links on iOS and App Links on Android)\n\n| Param              | Type                                                        |\n| ------------------ | ----------------------------------------------------------- |\n| **`eventName`**    | <code>'appUrlOpen'</code>                                   |\n| **`listenerFunc`** | <code><a href=\"#urlopenlistener\">URLOpenListener</a></code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('appRestoredResult', ...)\n\n```typescript\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nIf the app was launched with previously persisted plugin call data, such as on Android\nwhen an activity returns to an app that was closed, this call will return any data\nthe app was launched with, converted into the form of a result from a plugin call.\n\nOn Android, due to memory constraints on low-end devices, it's possible\nthat, if your app launches a new activity, your app will be terminated by\nthe operating system in order to reduce memory consumption.\n\nFor example, that means the Camera API, which launches a new Activity to\ntake a photo, may not be able to return data back to your app.\n\nTo avoid this, Capacitor stores all restored activity results on launch.\nYou should add a listener for `appRestoredResult` in order to handle any\nplugin call results that were delivered when your app was not running.\n\nOnce you have that result (if any), you can update the UI to restore a\nlogical experience for the user, such as navigating or selecting the\nproper tab.\n\nWe recommend every Android app using plugins that rely on external\nActivities (for example, Camera) to have this event and process handled.\n\n| Param              | Type                                                          |\n| ------------------ | ------------------------------------------------------------- |\n| **`eventName`**    | <code>'appRestoredResult'</code>                              |\n| **`listenerFunc`** | <code><a href=\"#restoredlistener\">RestoredListener</a></code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('backButton', ...)\n\n```typescript\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for the hardware back button event (Android only). Listening for this event will disable the\ndefault back button behaviour, so you might want to call `window.history.back()` manually.\nIf you want to close the app, call `App.exitApp()`.\n\n| Param              | Type                                                              |\n| ------------------ | ----------------------------------------------------------------- |\n| **`eventName`**    | <code>'backButton'</code>                                         |\n| **`listenerFunc`** | <code><a href=\"#backbuttonlistener\">BackButtonListener</a></code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### removeAllListeners()\n\n```typescript\nremoveAllListeners() => Promise<void>\n```\n\nRemove all native listeners for this plugin\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### Interfaces\n\n\n#### AppInfo\n\n| Prop          | Type                | Description                                                                                         | Since |\n| ------------- | ------------------- | --------------------------------------------------------------------------------------------------- | ----- |\n| **`name`**    | <code>string</code> | The name of the app.                                                                                | 1.0.0 |\n| **`id`**      | <code>string</code> | The identifier of the app. On iOS it's the Bundle Identifier. On Android it's the Application ID    | 1.0.0 |\n| **`build`**   | <code>string</code> | The build version. On iOS it's the CFBundleVersion. On Android it's the versionCode.                | 1.0.0 |\n| **`version`** | <code>string</code> | The app version. On iOS it's the CFBundleShortVersionString. On Android it's package's versionName. | 1.0.0 |\n\n\n#### AppState\n\n| Prop           | Type                 | Description                       | Since |\n| -------------- | -------------------- | --------------------------------- | ----- |\n| **`isActive`** | <code>boolean</code> | Whether the app is active or not. | 1.0.0 |\n\n\n#### AppLaunchUrl\n\n| Prop      | Type                | Description                   | Since |\n| --------- | ------------------- | ----------------------------- | ----- |\n| **`url`** | <code>string</code> | The url used to open the app. | 1.0.0 |\n\n\n#### PluginListenerHandle\n\n| Prop         | Type                                      |\n| ------------ | ----------------------------------------- |\n| **`remove`** | <code>() =&gt; Promise&lt;void&gt;</code> |\n\n\n#### URLOpenListenerEvent\n\n| Prop                       | Type                 | Description                                                                                                                                                                        | Since |\n| -------------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`url`**                  | <code>string</code>  | The URL the app was opened with.                                                                                                                                                   | 1.0.0 |\n| **`iosSourceApplication`** | <code>any</code>     | The source application opening the app (iOS only) https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionskey/1623128-sourceapplication                         | 1.0.0 |\n| **`iosOpenInPlace`**       | <code>boolean</code> | Whether the app should open the passed document in-place or must copy it first. https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionskey/1623123-openinplace | 1.0.0 |\n\n\n#### RestoredListenerEvent\n\n| Prop             | Type                              | Description                                                                                                                                       | Since |\n| ---------------- | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`pluginId`**   | <code>string</code>               | The pluginId this result corresponds to. For example, `Camera`.                                                                                   | 1.0.0 |\n| **`methodName`** | <code>string</code>               | The methodName this result corresponds to. For example, `getPhoto`                                                                                | 1.0.0 |\n| **`data`**       | <code>any</code>                  | The result data passed from the plugin. This would be the result you'd expect from normally calling the plugin method. For example, `CameraPhoto` | 1.0.0 |\n| **`success`**    | <code>boolean</code>              | Boolean indicating if the plugin call succeeded.                                                                                                  | 1.0.0 |\n| **`error`**      | <code>{ message: string; }</code> | If the plugin call didn't succeed, it will contain the error message.                                                                             | 1.0.0 |\n\n\n#### BackButtonListenerEvent\n\n| Prop            | Type                 | Description                                                                                               | Since |\n| --------------- | -------------------- | --------------------------------------------------------------------------------------------------------- | ----- |\n| **`canGoBack`** | <code>boolean</code> | Indicates whether the browser can go back in history. False when the history stack is on the first entry. | 1.0.0 |\n\n\n### Type Aliases\n\n\n#### StateChangeListener\n\n<code>(state: <a href=\"#appstate\">AppState</a>): void</code>\n\n\n#### URLOpenListener\n\n<code>(event: <a href=\"#urlopenlistenerevent\">URLOpenListenerEvent</a>): void</code>\n\n\n#### RestoredListener\n\n<code>(event: <a href=\"#restoredlistenerevent\">RestoredListenerEvent</a>): void</code>\n\n\n#### BackButtonListener\n\n<code>(event: <a href=\"#backbuttonlistenerevent\">BackButtonListenerEvent</a>): void</code>\n\n</docgen-api>\n",
    "licenseText": "Copyright 2020-present Ionic\nhttps://ionic.io\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@capacitor/app/-/app-4.0.1.tgz#05c60541c427ef30f4762d8f786e70d0ed32fe01",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@capacitor/app/-/app-4.0.1.tgz",
    "hash": "05c60541c427ef30f4762d8f786e70d0ed32fe01",
    "integrity": "sha512-frPft9TMJL70jWq5jmxwGSBddZVvsWxX5Agj2i19WJerk37aTgljB05HRr/YLg6mF1G/NIXmmFJZDY8MEgirDg==",
    "registry": "npm",
    "packageName": "@capacitor/app",
    "cacheIntegrity": "sha512-frPft9TMJL70jWq5jmxwGSBddZVvsWxX5Agj2i19WJerk37aTgljB05HRr/YLg6mF1G/NIXmmFJZDY8MEgirDg== sha1-BcYFQcQn7zD0di2PeG5w0O0y/gE="
  },
  "registry": "npm",
  "hash": "05c60541c427ef30f4762d8f786e70d0ed32fe01"
}