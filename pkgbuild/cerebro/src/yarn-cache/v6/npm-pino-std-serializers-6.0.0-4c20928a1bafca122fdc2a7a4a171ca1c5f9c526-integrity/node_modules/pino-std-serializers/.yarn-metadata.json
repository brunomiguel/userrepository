{
  "manifest": {
    "name": "pino-std-serializers",
    "version": "6.0.0",
    "description": "A collection of standard object serializers for Pino",
    "main": "index.js",
    "type": "commonjs",
    "types": "index.d.ts",
    "scripts": {
      "lint": "standard | snazzy",
      "lint-ci": "standard",
      "test": "tap --no-cov",
      "test-ci": "tap --cov --no-check-coverage --coverage-report=text",
      "test-types": "tsc && tsd"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/pinojs/pino-std-serializers.git"
    },
    "keywords": [
      "pino",
      "logging"
    ],
    "author": {
      "name": "James Sumners",
      "email": "james.sumners@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/pino-std-serializers/issues"
    },
    "homepage": "https://github.com/pinojs/pino-std-serializers#readme",
    "precommit": [
      "lint",
      "test",
      "test-types"
    ],
    "devDependencies": {
      "@types/node": "^17.0.0",
      "pre-commit": "^1.2.2",
      "snazzy": "^9.0.0",
      "standard": "^17.0.0",
      "tap": "^15.0.10",
      "tsd": "^0.21.0",
      "typescript": "^4.2.4"
    },
    "tsd": {
      "directory": "test/types"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pino-std-serializers-6.0.0-4c20928a1bafca122fdc2a7a4a171ca1c5f9c526-integrity/node_modules/pino-std-serializers/package.json",
    "readmeFilename": "Readme.md",
    "readme": "# pino-std-serializers&nbsp;&nbsp;[![CI](https://github.com/pinojs/pino-std-serializers/workflows/CI/badge.svg)](https://github.com/pinojs/pino-std-serializers/actions?query=workflow%3ACI)\n\nThis module provides a set of standard object serializers for the\n[Pino](https://getpino.io) logger.\n\n## Serializers\n\n### `exports.err(error)`\nSerializes an `Error` like object. Returns an object:\n\n```js\n{\n  type: 'string', // The name of the object's constructor.\n  message: 'string', // The supplied error message.\n  stack: 'string', // The stack when the error was generated.\n  raw: Error  // Non-enumerable, i.e. will not be in the output, original\n              // Error object. This is available for subsequent serializers\n              // to use.\n}\n```\n\nAny other extra properties, e.g. `statusCode`, that have been attached to the\nobject will also be present on the serialized object.\n\n### `exports.mapHttpResponse(response)`\nUsed internally by Pino for general response logging. Returns an object:\n\n```js\n{\n  res: {}\n}\n```\n\nWhere `res` is the `response` as serialized by the standard response serializer.\n\n### `exports.mapHttpRequest(request)`\nUsed internall by Pino for general request logging. Returns an object:\n\n```js\n{\n  req: {}\n}\n```\n\nWhere `req` is the `request` as serialized by the standard request serializer.\n\n### `exports.req(request)`\nThe default `request` serializer. Returns an object:\n\n```js\n{\n  id: 'string', // Defaults to `undefined`, unless there is an `id` property \n                // already attached to the `request` object or to the `request.info`\n                // object. Attach a synchronous function\n                // to the `request.id` that returns an identifier to have\n                // the value filled.\n  method: 'string',\n  url: 'string', // the request pathname (as per req.url in core HTTP)\n  query: 'object', // the request query (as per req.query in express or hapi)\n  params: 'object', // the request params (as per req.params in express or hapi)\n  headers: Object, // a reference to the `headers` object from the request\n                   // (as per req.headers in core HTTP)\n  remoteAddress: 'string',\n  remotePort: Number,\n  raw: Object // Non-enumerable, i.e. will not be in the output, original\n              // request object. This is available for subsequent serializers\n              // to use. In cases where the `request` input already has \n              // a `raw` property this will replace the original `request.raw`\n              // property\n}\n```\n\n### `exports.res(response)`\nThe default `response` serializer. Returns an object:\n\n```js\n{\n  statusCode: Number, // Response status code, will be null before headers are flushed\n  headers: Object, // The headers to be sent in the response.\n  raw: Object // Non-enumerable, i.e. will not be in the output, original\n              // response object. This is available for subsequent serializers\n              // to use.\n}\n```\n\n### `exports.wrapErrorSerializer(customSerializer)`\nA utility method for wrapping the default error serializer. This allows\ncustom serializers to work with the already serialized object.\n\nThe `customSerializer` accepts one parameter — the newly serialized error\nobject — and returns the new (or updated) error object.\n\n### `exports.wrapRequestSerializer(customSerializer)`\nA utility method for wrapping the default request serializer. This allows\ncustom serializers to work with the already serialized object.\n\nThe `customSerializer` accepts one parameter — the newly serialized request\nobject — and returns the new (or updated) request object.\n\n### `exports.wrapResponseSerializer(customSerializer)`\nA utility method for wrapping the default response serializer. This allows\ncustom serializers to work with the already serialized object.\n\nThe `customSerializer` accepts one parameter — the newly serialized response\nobject — and returns the new (or updated) response object.\n\n## License\n\nMIT License\n",
    "licenseText": "Copyright Mateo Collina, David Mark Clements, James Sumners\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pino-std-serializers/-/pino-std-serializers-6.0.0.tgz#4c20928a1bafca122fdc2a7a4a171ca1c5f9c526",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pino-std-serializers/-/pino-std-serializers-6.0.0.tgz",
    "hash": "4c20928a1bafca122fdc2a7a4a171ca1c5f9c526",
    "integrity": "sha512-mMMOwSKrmyl+Y12Ri2xhH1lbzQxwwpuru9VjyJpgFIH4asSj88F2csdMwN6+M5g1Ll4rmsYghHLQJw81tgZ7LQ==",
    "registry": "npm",
    "packageName": "pino-std-serializers",
    "cacheIntegrity": "sha512-mMMOwSKrmyl+Y12Ri2xhH1lbzQxwwpuru9VjyJpgFIH4asSj88F2csdMwN6+M5g1Ll4rmsYghHLQJw81tgZ7LQ== sha1-TCCSihuvyhIv3Cp6ShccocX5xSY="
  },
  "registry": "npm",
  "hash": "4c20928a1bafca122fdc2a7a4a171ca1c5f9c526"
}