{
  "manifest": {
    "name": "postcss-load-config",
    "version": "3.1.4",
    "description": "Autoload Config for PostCSS",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "files": [
      "src"
    ],
    "engines": {
      "node": ">= 10"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    "dependencies": {
      "lilconfig": "^2.0.5",
      "yaml": "^1.10.2"
    },
    "peerDependencies": {
      "postcss": ">=8.0.9",
      "ts-node": ">=9.0.0"
    },
    "peerDependenciesMeta": {
      "ts-node": {
        "optional": true
      },
      "postcss": {
        "optional": true
      }
    },
    "keywords": [
      "postcss",
      "postcssrc",
      "postcss.config.js"
    ],
    "author": {
      "name": "Michael Ciniawky",
      "email": "michael.ciniawsky@gmail.com"
    },
    "contributors": [
      {
        "name": "Ryan Dunckel"
      },
      {
        "name": "Mateusz Derks"
      },
      {
        "name": "Dalton Santos"
      },
      {
        "name": "Patrick Gilday"
      },
      {
        "name": "François Wouts"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/postcss/postcss-load-config.git"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-load-config-3.1.4-1ab2571faf84bb078877e1d07905eabe9ebda855-integrity/node_modules/postcss-load-config/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![test][test]][test-url]\n[![coverage][cover]][cover-url]\n[![code style][style]][style-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"100\" height=\"100\" title=\"Load Options\" src=\"http://michael-ciniawsky.github.io/postcss-load-options/logo.svg\">\n  <a href=\"https://github.com/postcss/postcss\">\n    <img width=\"110\" height=\"110\" title=\"PostCSS\"           src=\"http://postcss.github.io/postcss/logo.svg\" hspace=\"10\">\n  </a>\n  <img width=\"100\" height=\"100\" title=\"Load Plugins\" src=\"http://michael-ciniawsky.github.io/postcss-load-plugins/logo.svg\">\n  <h1>Load Config</h1>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D postcss-load-config\n```\n\n<h2 align=\"center\">Usage</h2>\n\n```bash\nnpm i -S|-D postcss-plugin\n```\n\nInstall all required PostCSS plugins and save them to your **package.json** `dependencies`/`devDependencies`\n\nThen create a PostCSS config file by choosing one of the following formats\n\n### `package.json`\n\nCreate a **`postcss`** section in your project's **`package.json`**\n\n```\nProject (Root)\n  |– client\n  |– public\n  |\n  |- package.json\n```\n\n```json\n{\n  \"postcss\": {\n    \"parser\": \"sugarss\",\n    \"map\": false,\n    \"plugins\": {\n      \"postcss-plugin\": {}\n    }\n  }\n}\n```\n\n### `.postcssrc`\n\nCreate a **`.postcssrc`** file in JSON or YAML format\n\n> ℹ️ It's recommended to use an extension (e.g **`.postcssrc.json`** or **`.postcssrc.yml`**) instead of `.postcssrc`\n\n```\nProject (Root)\n  |– client\n  |– public\n  |\n  |- (.postcssrc|.postcssrc.json|.postcssrc.yml)\n  |- package.json\n```\n\n**`.postcssrc.json`**\n```json\n{\n  \"parser\": \"sugarss\",\n  \"map\": false,\n  \"plugins\": {\n    \"postcss-plugin\": {}\n  }\n}\n```\n\n**`.postcssrc.yml`**\n```yaml\nparser: sugarss\nmap: false\nplugins:\n  postcss-plugin: {}\n```\n\n### `.postcssrc.js` or `postcss.config.js`\n\nYou may need some logic within your config. In this case create JS file named **`.postcssrc.js`** or **`postcss.config.js`**\n\n```\nProject (Root)\n  |– client\n  |– public\n  |\n  |- (.postcssrc.js|postcss.config.js)\n  |- package.json\n```\n\nYou can export the config as an `{Object}`\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  parser: 'sugarss',\n  map: false,\n  plugins: {\n    'postcss-plugin': {}\n  }\n}\n```\n\nOr export a `{Function}` that returns the config (more about the `ctx` param below)\n\n**.postcssrc.js**\n```js\nmodule.exports = (ctx) => ({\n  parser: ctx.parser ? 'sugarss' : false,\n  map: ctx.env === 'development' ? ctx.map : false,\n  plugins: {\n    'postcss-plugin': ctx.options.plugin\n  }\n})\n```\n\nPlugins can be loaded either using an `{Object}` or an `{Array}`\n\n#### `{Object}`\n\n**.postcssrc.js**\n```js\nmodule.exports = ({ env }) => ({\n  ...options,\n  plugins: {\n    'postcss-plugin': env === 'production' ? {} : false\n  }\n})\n```\n\n> ℹ️ When using an `{Object}`, the key can be a Node.js module name, a path to a JavaScript file that is relative to the directory of the PostCSS config file, or an absolute path to a JavaScript file.\n\n#### `{Array}`\n\n**.postcssrc.js**\n```js\nmodule.exports = ({ env }) => ({\n  ...options,\n  plugins: [\n    env === 'production' ? require('postcss-plugin')() : false\n  ]\n})\n```\n> :warning: When using an `{Array}`, make sure to `require()` each plugin\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[**`to`**](#to)|`{String}`|`undefined`|Destination File Path|\n|[**`map`**](#map)|`{String\\|Object}`|`false`|Enable/Disable Source Maps|\n|[**`from`**](#from)|`{String}`|`undefined`|Source File Path|\n|[**`parser`**](#parser)|`{String\\|Function}`|`false`|Custom PostCSS Parser|\n|[**`syntax`**](#syntax)|`{String\\|Function}`|`false`|Custom PostCSS Syntax|\n|[**`stringifier`**](#stringifier)|`{String\\|Function}`|`false`|Custom PostCSS Stringifier|\n\n### `parser`\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  parser: 'sugarss'\n}\n```\n\n### `syntax`\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  syntax: 'postcss-scss'\n}\n```\n\n### `stringifier`\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  stringifier: 'midas'\n}\n```\n\n### [**`map`**](https://github.com/postcss/postcss/blob/master/docs/source-maps.md)\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  map: 'inline'\n}\n```\n\n> :warning: In most cases `options.from` && `options.to` are set by the third-party which integrates this package (CLI, gulp, webpack). It's unlikely one needs to set/use `options.from` && `options.to` within a config file. Unless you're a third-party plugin author using this module and its Node API directly **dont't set `options.from` && `options.to` yourself**\n\n### `to`\n\n```js\nmodule.exports = {\n  to: 'path/to/dest.css'\n}\n```\n\n### `from`\n\n```js\nmodule.exports = {\n  from: 'path/to/src.css'\n}\n```\n\n<h2 align=\"center\">Plugins</h2>\n\n### `{} || null`\n\nThe plugin will be loaded with defaults\n\n```js\n'postcss-plugin': {} || null\n```\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  plugins: {\n    'postcss-plugin': {} || null\n  }\n}\n```\n\n> :warning: `{}` must be an **empty** `{Object}` literal\n\n### `{Object}`\n\nThe plugin will be loaded with given options\n\n```js\n'postcss-plugin': { option: '', option: '' }\n```\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  plugins: {\n    'postcss-plugin': { option: '', option: '' }\n  }\n}\n```\n\n### `false`\n\nThe plugin will not be loaded\n\n```js\n'postcss-plugin': false\n```\n\n**.postcssrc.js**\n```js\nmodule.exports = {\n  plugins: {\n    'postcss-plugin': false\n  }\n}\n```\n\n### `Ordering`\n\nPlugin **execution order** is determined by declaration in the plugins section (**top-down**)\n\n```js\n{\n  plugins: {\n    'postcss-plugin': {}, // [0]\n    'postcss-plugin': {}, // [1]\n    'postcss-plugin': {}  // [2]\n  }\n}\n```\n\n<h2 align=\"center\">Context</h2>\n\nWhen using a `{Function}` (`postcss.config.js` or `.postcssrc.js`), it's possible to pass context to `postcss-load-config`, which will be evaluated while loading your config. By default `ctx.env (process.env.NODE_ENV)` and `ctx.cwd (process.cwd())` are available on the `ctx` `{Object}`\n\n> ℹ️ Most third-party integrations add additional properties to the `ctx` (e.g `postcss-loader`). Check the specific module's README for more information about what is available on the respective `ctx`\n\n<h2 align=\"center\">Examples</h2>\n\n**postcss.config.js**\n\n```js\nmodule.exports = (ctx) => ({\n  parser: ctx.parser ? 'sugarss' : false,\n  map: ctx.env === 'development' ? ctx.map : false,\n  plugins: {\n    'postcss-import': {},\n    'postcss-nested': {},\n    cssnano: ctx.env === 'production' ? {} : false\n  }\n})\n```\n\n<div align=\"center\">\n  <img width=\"80\" height=\"80\" src=\"https://worldvectorlogo.com/logos/nodejs-icon.svg\">\n</div>\n\n```json\n\"scripts\": {\n  \"build\": \"NODE_ENV=production node postcss\",\n  \"start\": \"NODE_ENV=development node postcss\"\n}\n```\n\n### `Async`\n\n```js\nconst { readFileSync } = require('fs')\n\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\n\nconst css = readFileSync('index.sss', 'utf8')\n\nconst ctx = { parser: true, map: 'inline' }\n\npostcssrc(ctx).then(({ plugins, options }) => {\n  postcss(plugins)\n    .process(css, options)\n    .then((result) => console.log(result.css))\n})\n```\n\n### `Sync`\n\n```js\nconst { readFileSync } = require('fs')\n\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\n\nconst css = readFileSync('index.sss', 'utf8')\n\nconst ctx = { parser: true, map: 'inline' }\n\nconst { plugins, options } = postcssrc.sync(ctx)\n```\n\n<div align=\"center\">\n  <img width=\"80\" height=\"80\" halign=\"10\" src=\"https://worldvectorlogo.com/logos/gulp.svg\">\n</div>\n\n```json\n\"scripts\": {\n  \"build\": \"NODE_ENV=production gulp\",\n  \"start\": \"NODE_ENV=development gulp\"\n}\n```\n\n```js\nconst { task, src, dest, series, watch } = require('gulp')\n\nconst postcss = require('gulp-postcssrc')\n\nconst css = () => {\n  src('src/*.css')\n    .pipe(postcss())\n    .pipe(dest('dest'))\n})\n\ntask('watch', () => {\n  watch(['src/*.css', 'postcss.config.js'], css)\n})\n\ntask('default', series(css, 'watch'))\n```\n\n<div align=\"center\">\n  <img width=\"80\" height=\"80\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\n</div>\n\n```json\n\"scripts\": {\n  \"build\": \"NODE_ENV=production webpack\",\n  \"start\": \"NODE_ENV=development webpack-dev-server\"\n}\n```\n\n**webpack.config.js**\n```js\nmodule.exports = (env) => ({\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          'postcss-loader'\n        ]\n      }\n    ]\n  }\n})\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n   <tr>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/michael-ciniawsky\">Michael Ciniawsky</a>\n    </td>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/ertrzyiks.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/ertrzyiks\">Mateusz Derks</a>\n    </td>\n  </tr>\n  <tbody>\n</table>\n\n<h2 align=\"center\">Contributors</h2>\n\n<table>\n  <tbody>\n   <tr>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/sparty02.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/sparty02\">Ryan Dunckel</a>\n    </td>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/pcgilday.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/pcgilday\">Patrick Gilday</a>\n    </td>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/daltones.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/daltones\">Dalton Santos</a>\n    </td>\n    <td align=\"center\">\n      <img width=\"150\" height=\"150\"\n        src=\"https://github.com/fwouts.png?v=3&s=150\">\n      <br />\n      <a href=\"https://github.com/fwouts\">François Wouts</a>\n    </td>\n  </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/postcss-load-config.svg\n[npm-url]: https://npmjs.com/package/postcss-load-config\n\n[node]: https://img.shields.io/node/v/postcss-load-plugins.svg\n[node-url]: https://nodejs.org/\n\n[deps]: https://david-dm.org/michael-ciniawsky/postcss-load-config.svg\n[deps-url]: https://david-dm.org/michael-ciniawsky/postcss-load-config\n\n[test]: http://img.shields.io/travis/michael-ciniawsky/postcss-load-config.svg\n[test-url]: https://travis-ci.org/michael-ciniawsky/postcss-load-config\n\n[cover]: https://coveralls.io/repos/github/michael-ciniawsky/postcss-load-config/badge.svg\n[cover-url]: https://coveralls.io/github/michael-ciniawsky/postcss-load-config\n\n[style]: https://img.shields.io/badge/code%20style-standard-yellow.svg\n[style-url]: http://standardjs.com/\n\n[chat]: https://img.shields.io/gitter/room/postcss/postcss.svg\n[chat-url]: https://gitter.im/postcss/postcss\n\n## Security Contact\n\nTo report a security vulnerability, please use the [Tidelift security contact].\nTidelift will coordinate the fix and disclosure.\n\n[Tidelift security contact]: https://tidelift.com/security\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright Michael Ciniawsky <michael.ciniawsky@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-load-config/-/postcss-load-config-3.1.4.tgz#1ab2571faf84bb078877e1d07905eabe9ebda855",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
    "hash": "1ab2571faf84bb078877e1d07905eabe9ebda855",
    "integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
    "registry": "npm",
    "packageName": "postcss-load-config",
    "cacheIntegrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg== sha1-GrJXH6+EuweId+HQeQXqvp69qFU="
  },
  "registry": "npm",
  "hash": "1ab2571faf84bb078877e1d07905eabe9ebda855"
}