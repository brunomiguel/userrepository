{
  "manifest": {
    "name": "cjs-module-lexer",
    "version": "0.6.0",
    "description": "Lexes CommonJS modules, returning their named exports metadata",
    "main": "lexer.js",
    "exports": {
      "import": "./dist/lexer.mjs",
      "default": "./lexer.js"
    },
    "types": "lexer.d.ts",
    "scripts": {
      "test-js": "mocha -b -u tdd test/*.js",
      "test-wasm": "WASM=1 mocha -b -u tdd test/*.js",
      "test": "npm run test-wasm && npm run test-js",
      "bench": "node --expose-gc bench/index.mjs",
      "build": "node build.js && babel dist/lexer.mjs | terser -o dist/lexer.js",
      "build-wasm": "make lib/lexer.wasm && node build.js",
      "prepublishOnly": "make && npm run build",
      "footprint": "npm run build && cat dist/lexer.js | gzip -9f | wc -c"
    },
    "author": {
      "name": "Guy Bedford"
    },
    "license": "MIT",
    "devDependencies": {
      "@babel/cli": "^7.5.5",
      "@babel/core": "^7.5.5",
      "@babel/plugin-transform-modules-commonjs": "^7.5.0",
      "kleur": "^2.0.2",
      "mocha": "^5.2.0",
      "terser": "^4.1.4"
    },
    "files": [
      "dist",
      "lexer.d.ts"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/guybedford/cjs-module-lexer.git"
    },
    "bugs": {
      "url": "https://github.com/guybedford/cjs-module-lexer/issues"
    },
    "homepage": "https://github.com/guybedford/cjs-module-lexer#readme",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-cjs-module-lexer-0.6.0-4186fcca0eae175970aee870b9fe2d6cf8d5655f-integrity/node_modules/cjs-module-lexer/package.json",
    "readmeFilename": "README.md",
    "readme": "# CJS Module Lexer\n\n[![Build Status][travis-image]][travis-url]\n\nA [very fast](#benchmarks) JS CommonJS module syntax lexer used to detect the most likely list of named exports of a CommonJS module.\n\nOutputs the list of named exports (`exports.name = ...`) and possible module reexports (`module.exports = require('...')`), including the common transpiler variations of these cases.\n\nForked from https://github.com/guybedford/es-module-lexer.\n\n_Comprehensively handles the JS language grammar while remaining small and fast. - ~90ms per MB of JS cold and ~15ms per MB of JS warm, [see benchmarks](#benchmarks) for more info._\n\n### Usage\n\n```\nnpm install cjs-module-lexer\n```\n\nFor use in CommonJS:\n\n```js\nconst { parse } = require('cjs-module-lexer');\n\n// `init` return a promise for parity with the ESM API, but you do not have to call it\n\nconst { exports, reexports } = parse(`\n  // named exports detection\n  module.exports.a = 'a';\n  (function () {\n    exports.b = 'b';\n  })();\n  Object.defineProperty(exports, 'c', { value: 'c' });\n  /* exports.d = 'not detected'; */\n\n  // reexports detection\n  if (maybe) module.exports = require('./dep1.js');\n  if (another) module.exports = require('./dep2.js');\n\n  // literal exports assignments\n  module.exports = { a, b: c, d, 'e': f }\n\n  // __esModule detection\n  Object.defineProperty(module.exports, '__esModule', { value: true })\n`);\n\n// exports === ['a', 'b', 'c', '__esModule']\n// reexports === ['./dep1.js', './dep2.js']\n```\n\nWhen using the ESM version, Wasm is supported instead:\n\n```js\nimport { parse, init } from 'cjs-module-lexer';\n// init needs to be called and waited upon\nawait init();\nconst { exports, reexports } = parse(source);\n```\n\nThe Wasm build is around 1.5x faster and without a cold start.\n\n### Grammar\n\nCommonJS exports matches are run against the source token stream.\n\nThe token grammar is:\n\n```\nIDENTIFIER: As defined by ECMA-262, without support for identifier `\\` escapes, filtered to remove strict reserved words:\n            \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"enum\"\n\nSTRING_LITERAL: A `\"` or `'` bounded ECMA-262 string literal.\n\nIDENTIFIER_STRING: ( `\"` IDENTIFIER `\"` | `'` IDENTIFIER `'` )\n\nMODULE_EXPORTS: `module` `.` `exports`\n\nEXPORTS_IDENTIFIER: MODULE_EXPORTS_IDENTIFIER | `exports`\n\nEXPORTS_DOT_ASSIGN: EXPORTS_IDENTIFIER `.` IDENTIFIER `=`\n\nEXPORTS_LITERAL_COMPUTED_ASSIGN: EXPORTS_IDENTIFIER `[` IDENTIFIER_STRING `]` `=`\n\nEXPORTS_LITERAL_PROP: (IDENTIFIER  `:` IDENTIFIER)?) | (IDENTIFIER_STRING `:` IDENTIFIER)\n\nEXPORTS_SPREAD: `...` (IDENTIFIER | REQUIRE)\n\nEXPORTS_MEMBER: EXPORTS_DOT_ASSIGN | EXPORTS_LITERAL_COMPUTED_ASSIGN\n\nEXPORTS_DEFINE: `Object` `.` `defineProperty `(` IDENTIFIER_STRING `, {`\n  (`enumerable: true,`)?\n  (\n    `value:` |\n    `get` (`: function` IDENTIFIER? )?  `()` {` return IDENTIFIER (`.` IDENTIFIER | `[` IDENTIFIER_STRING `]`)? `;`? `}`\n  )\n  `})`\n\nEXPORTS_LITERAL: MODULE_EXPORTS `=` `{` (EXPORTS_LITERAL_PROP | EXPORTS_SPREAD) `,`)+ `}`\n\nREQUIRE: `require` `(` STRING_LITERAL `)`\n\nEXPORTS_ASSIGN: (`var` | `const` | `let`) IDENTIFIER `=` REQUIRE\n\nMODULE_EXPORTS_ASSIGN: MODULE_EXPORTS `=` REQUIRE\n\nEXPORT_STAR: (`__export` | `__exportStar`) `(` REQUIRE\n\nEXPORT_STAR_LIB: `Object.keys(` IDENTIFIER$1 `).forEach(function (` IDENTIFIER$2 `) {`\n  (\n    `if (` IDENTIFIER$2 `===` ( `'default'` | `\"default\"` ) `||` IDENTIFIER$2 `===` ( '__esModule' | `\"__esModule\"` ) `) return` `;`? |\n    `if (` IDENTIFIER$2 `!==` ( `'default'` | `\"default\"` ) `)`\n  )\n  (\n    `if (` IDENTIFIER$2 `in` EXPORTS_IDENTIFIER `&&` EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] ===` IDENTIFIER$1 `[` IDENTIFIER$2 `]) return` `;`?\n  )?\n  (\n    EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] =` IDENTIFIER$1 `[` IDENTIFIER$2 `]` `;`? |\n    `Object.defineProperty(` EXPORTS_IDENTIFIER `, ` IDENTIFIER$2 `, { enumerable: true, get: function () { return ` IDENTIFIER$1 `[` IDENTIFIER$2 `]` `;`? } })` `;`?\n  )\n  `})`\n```\n\nSpacing between tokens is taken to be any ECMA-262 whitespace, ECMA-262 block comment or ECMA-262 line comment.\n\n* The returned export names are taken to be the combination of the `IDENTIFIER` and `IDENTIFIER_STRING` slots for all `EXPORTS_MEMBER`, `EXPORTS_LITERAL` and `EXPORTS_DEFINE` matches.\n* The reexport specifiers are taken to be the the combination of:\n  1. The `REQUIRE` matches of the last matched of either `MODULE_EXPORTS_ASSIGN` or `EXPORTS_LITERAL`.\n  2. All _top-level_ `EXPORT_STAR` `REQUIRE` matches and `EXPORTS_ASSIGN` matches whose `IDENTIFIER` also matches the first `IDENTIFIER` in `EXPORT_STAR_LIB`.\n\n### Parsing Examples\n\n#### Named Exports Parsing\n\nThe basic matching rules for named exports are `exports.name`, `exports['name']` or `Object.defineProperty(exports, 'name', ...)`. This matching is done without scope analysis and regardless of the expression position:\n\n```js\n// DETECTS EXPORTS: a, b\n(function (exports) {\n  exports.a = 'a'; \n  exports['b'] = 'b';\n})(exports);\n```\n\nBecause there is no scope analysis, the above detection may overclassify:\n\n```js\n// DETECTS EXPORTS: a, b, c\n(function (exports, Object) {\n  exports.a = 'a';\n  exports['b'] = 'b';\n  if (false)\n    exports.c = 'c';\n})(NOT_EXPORTS, NOT_OBJECT);\n```\n\nIt will in turn underclassify in cases where the identifiers are renamed:\n\n```js\n// DETECTS: NO EXPORTS\n(function (e) {\n  e.a = 'a';\n  e['b'] = 'b';\n})(exports);\n```\n\n`Object.defineProperty` is detected for specifically value and getter forms returning an identifier or member expression:\n\n```js\n// DETECTS: a, b, c, d, __esModule\nObject.defineProperty(exports, 'a', {\n  enumerable: true,\n  get: function () {\n    return q.p;\n  }\n});\nObject.defineProperty(exports, 'b', {\n  enumerable: true,\n  get: function () {\n    return q['p'];\n  }\n});\nObject.defineProperty(exports, 'c', {\n  enumerable: true,\n  get () {\n    return b;\n  }\n});\nObject.defineProperty(exports, 'd', { value: 'd' });\nObject.defineProperty(exports, '__esModule', { value: true });\n```\n\nAlternative object definition structures or getter function bodies are not detected:\n\n```js\n// DETECTS: NO EXPORTS\nObject.defineProperty(exports, 'a', {\n  enumerable: false,\n  get () {\n    return p;\n  }\n});\nObject.defineProperty(exports, 'b', {\n  configurable: true,\n  get () {\n    return p;\n  }\n});\nObject.defineProperty(exports, 'c', {\n  get: () => p\n});\nObject.defineProperty(exports, 'd', {\n  enumerable: true,\n  get: function () {\n    return dynamic();\n  }\n});\nObject.defineProperty(exports, 'e', {\n  enumerable: true,\n  get () {\n    return 'str';\n  }\n});\n```\n\n`Object.defineProperties` is also not supported.\n\n#### Exports Object Assignment\n\nA best-effort is made to detect `module.exports` object assignments, but because this is not a full parser, arbitrary expressions are not handled in the\nobject parsing process.\n\nSimple object definitions are supported:\n\n```js\n// DETECTS EXPORTS: a, b, c\nmodule.exports = {\n  a,\n  'b': b,\n  c: c,\n  ...d\n};\n```\n\nObject properties that are not identifiers or string expressions will bail out of the object detection, while spreads are ignored:\n\n```js\n// DETECTS EXPORTS: a, b\nmodule.exports = {\n  a,\n  ...d,\n  b: require('c'),\n  c: \"not detected since require('c') above bails the object detection\"\n}\n```\n\n`Object.defineProperties` is not currently supported either.\n\n#### module.exports reexport assignment\n\nAny `module.exports = require('mod')` assignment is detected as a reexport, but only the last one is returned:\n\n```js\n// DETECTS REEXPORTS: c\nmodule.exports = require('a');\n(module => module.exports = require('b'))(NOT_MODULE);\nif (false) module.exports = require('c');\n```\n\nThis is to avoid over-classification in Webpack bundles with externals which include `module.exports = require('external')` in their source for every external dependency.\n\nIn exports object assignment, any spread of `require()` are detected as multiple separate reexports:\n\n```js\n// DETECTS REEXPORTS: a, b\nmodule.exports = require('ignored');\nmodule.exports = {\n  ...require('a'),\n  ...require('b')\n};\n```\n\n#### Transpiler Re-exports\n\nFor named exports, transpiler output works well with the rules described above.\n\nBut for star re-exports, special care is taken to support common patterns of transpiler outputs from Babel and TypeScript as well as bundlers like RollupJS.\nThese reexport and star reexport patterns are restricted to only be detected at the top-level as provided by the direct output of these tools.\n\nFor example, `export * from 'external'` is output by Babel as:\n\n```js\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _external = require(\"external\");\n\nObject.keys(_external).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  exports[key] = _external[key];\n});\n```\n\nWhere the `var _external = require(\"external\")` is specifically detected as well as the `Object.keys(_external)` statement, down to the exact\nfor of that entire expression including minor variations of the output. The `_external` and `key` identifiers are carefully matched in this\ndetection.\n\nSimilarly for TypeScript, `export * from 'external'` is output as:\n\n```js\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"external\"));\n```\n\nWhere the `__export(require(\"external\"))` statement is explicitly detected as a reexport, including variations `tslib.__export` and `__exportStar`.\n\n### Environment Support\n\nNode.js 10+, and [all browsers with Web Assembly support](https://caniuse.com/#feat=wasm).\n\n### JS Grammar Support\n\n* Token state parses all line comments, block comments, strings, template strings, blocks, parens and punctuators.\n* Division operator / regex token ambiguity is handled via backtracking checks against punctuator prefixes, including closing brace or paren backtracking.\n* Always correctly parses valid JS source, but may parse invalid JS source without errors.\n\n### Benchmarks\n\nBenchmarks can be run with `npm run bench`.\n\nCurrent results:\n\nJS Build:\n\n```\nModule load time\n> 5ms\nCold Run, All Samples\ntest/samples/*.js (3635 KiB)\n> 323ms\n\nWarm Runs (average of 25 runs)\ntest/samples/angular.js (1410 KiB)\n> 14.84ms\ntest/samples/angular.min.js (303 KiB)\n> 4.8ms\ntest/samples/d3.js (553 KiB)\n> 7.84ms\ntest/samples/d3.min.js (250 KiB)\n> 4ms\ntest/samples/magic-string.js (34 KiB)\n> 0.72ms\ntest/samples/magic-string.min.js (20 KiB)\n> 0.4ms\ntest/samples/rollup.js (698 KiB)\n> 9.32ms\ntest/samples/rollup.min.js (367 KiB)\n> 6.52ms\n\nWarm Runs, All Samples (average of 25 runs)\ntest/samples/*.js (3635 KiB)\n> 44ms\n```\n\nWasm Build:\n```\nModule load time\n> 11ms\nCold Run, All Samples\ntest/samples/*.js (3635 KiB)\n> 42ms\n\nWarm Runs (average of 25 runs)\ntest/samples/angular.js (1410 KiB)\n> 9.92ms\ntest/samples/angular.min.js (303 KiB)\n> 3.2ms\ntest/samples/d3.js (553 KiB)\n> 5.2ms\ntest/samples/d3.min.js (250 KiB)\n> 2.52ms\ntest/samples/magic-string.js (34 KiB)\n> 0.16ms\ntest/samples/magic-string.min.js (20 KiB)\n> 0.04ms\ntest/samples/rollup.js (698 KiB)\n> 6.44ms\ntest/samples/rollup.min.js (367 KiB)\n> 3.96ms\n\nWarm Runs, All Samples (average of 25 runs)\ntest/samples/*.js (3635 KiB)\n> 30.48ms\n```\n\n### Wasm Build Steps\n\nTo build download the WASI SDK from https://github.com/WebAssembly/wasi-sdk/releases.\n\nThe Makefile assumes the existence of \"wasi-sdk-11.0\" and \"wabt\" (optional) as sibling folders to this project.\n\nThe build through the Makefile is then run via `make lib/lexer.wasm`, which can also be triggered via `npm run build-wasm` to create `dist/lexer.js`.\n\nOn Windows it may be preferable to use the Linux subsystem.\n\nAfter the Web Assembly build, the CJS build can be triggered via `npm run build`.\n\nOptimization passes are run with [Binaryen](https://github.com/WebAssembly/binaryen) prior to publish to reduce the Web Assembly footprint.\n\n### License\n\nMIT\n\n[travis-url]: https://travis-ci.org/guybedford/es-module-lexer\n[travis-image]: https://travis-ci.org/guybedford/es-module-lexer.svg?branch=master\n",
    "licenseText": "MIT License\n-----------\n\nCopyright (C) 2018-2020 Guy Bedford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-0.6.0.tgz#4186fcca0eae175970aee870b9fe2d6cf8d5655f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-0.6.0.tgz",
    "hash": "4186fcca0eae175970aee870b9fe2d6cf8d5655f",
    "integrity": "sha512-uc2Vix1frTfnuzxxu1Hp4ktSvM3QaI4oXl4ZUqL1wjTu/BGki9TrCWoqLTg/drR1KwAEarXuRFCG2Svr1GxPFw==",
    "registry": "npm",
    "packageName": "cjs-module-lexer",
    "cacheIntegrity": "sha512-uc2Vix1frTfnuzxxu1Hp4ktSvM3QaI4oXl4ZUqL1wjTu/BGki9TrCWoqLTg/drR1KwAEarXuRFCG2Svr1GxPFw== sha1-QYb8yg6uF1lwruhwuf4tbPjVZV8="
  },
  "registry": "npm",
  "hash": "4186fcca0eae175970aee870b9fe2d6cf8d5655f"
}