{
  "manifest": {
    "name": "memfs",
    "version": "3.4.1",
    "description": "In-memory file-system with Node's fs API.",
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "lib"
    ],
    "scripts": {
      "clean": "rimraf lib types",
      "build": "tsc -p . && cpy src/*.js lib",
      "test": "jest --maxWorkers 2",
      "test:coverage": "jest --coverage",
      "test:watch": "jest --watch",
      "watch": "watch \"npm run build\" ./src",
      "prettier": "prettier --ignore-path .gitignore --write \"src/**/*.{ts,js}\"",
      "prettier:diff": "prettier -l \"src/**/*.{ts,js}\"",
      "tslint": "tslint \"src/**/*.ts\" -t verbose"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/streamich/memfs.git"
    },
    "dependencies": {
      "fs-monkey": "1.0.3"
    },
    "devDependencies": {
      "@types/jest": "27.0.3",
      "@types/node": "10.17.60",
      "cpy-cli": "3.1.1",
      "husky": "7.0.4",
      "jest": "27.4.5",
      "prettier": "2.5.1",
      "pretty-quick": "3.1.3",
      "rimraf": "3.0.2",
      "ts-jest": "27.1.2",
      "ts-node": "10.4.0",
      "tslint": "5.20.1",
      "tslint-config-common": "1.6.0",
      "typescript": "4.5.4",
      "semantic-release": "18.0.1",
      "@semantic-release/changelog": "6.0.1",
      "@semantic-release/git": "10.0.1",
      "@semantic-release/npm": "8.0.3"
    },
    "config": {
      "commitizen": {
        "path": "git-cz"
      }
    },
    "jest": {
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "jsx"
      ],
      "testEnvironment": "node",
      "transform": {
        "^.+\\.tsx?$": "ts-jest"
      },
      "testRegex": ".*/__tests__/.*\\.(test|spec)\\.(jsx?|tsx?)$"
    },
    "engines": {
      "node": ">= 4.0.0"
    },
    "release": {
      "verifyConditions": [
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/git"
      ],
      "prepare": [
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/git"
      ]
    },
    "license": "Unlicense",
    "keywords": [
      "fs",
      "filesystem",
      "fs.js",
      "memory-fs",
      "memfs",
      "file",
      "file system",
      "mount",
      "memory",
      "in-memory",
      "virtual",
      "test",
      "testing",
      "mock"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-memfs-3.4.1-b78092f466a0dce054d63d39275b24c71d3f1305-integrity/node_modules/memfs/package.json",
    "readmeFilename": "README.md",
    "readme": "# memfs\n\n[![][chat-badge]][chat] [![][npm-badge]][npm-url] [![][travis-badge]][travis-url]\n\nIn-memory file-system with [Node's `fs` API](https://nodejs.org/api/fs.html).\n\n- Node's `fs` API implemented, see [_API Status_](./docs/api-status.md)\n- Stores files in memory, in `Buffer`s\n- Throws sameish\\* errors as Node.js\n- Has concept of _i-nodes_\n- Implements _hard links_\n- Implements _soft links_ (aka symlinks, symbolic links)\n- Permissions may\\* be implemented in the future\n- Can be used in browser, see [`memfs-webpack`](https://github.com/streamich/memfs-webpack)\n\n### Install\n\n```shell\nnpm install --save memfs\n```\n\n## Usage\n\n```js\nimport { fs } from 'memfs';\n\nfs.writeFileSync('/hello.txt', 'World!');\nfs.readFileSync('/hello.txt', 'utf8'); // World!\n```\n\nCreate a file system from a plain JSON:\n\n```js\nimport { fs, vol } from 'memfs';\n\nconst json = {\n  './README.md': '1',\n  './src/index.js': '2',\n  './node_modules/debug/index.js': '3',\n};\nvol.fromJSON(json, '/app');\n\nfs.readFileSync('/app/README.md', 'utf8'); // 1\nvol.readFileSync('/app/src/index.js', 'utf8'); // 2\n```\n\nExport to JSON:\n\n```js\nvol.writeFileSync('/script.sh', 'sudo rm -rf *');\nvol.toJSON(); // {\"/script.sh\": \"sudo rm -rf *\"}\n```\n\nUse it for testing:\n\n```js\nvol.writeFileSync('/foo', 'bar');\nexpect(vol.toJSON()).toEqual({ '/foo': 'bar' });\n```\n\nCreate as many filesystem volumes as you need:\n\n```js\nimport { Volume } from 'memfs';\n\nconst vol = Volume.fromJSON({ '/foo': 'bar' });\nvol.readFileSync('/foo'); // bar\n\nconst vol2 = Volume.fromJSON({ '/foo': 'bar 2' });\nvol2.readFileSync('/foo'); // bar 2\n```\n\nUse `memfs` together with [`unionfs`][unionfs] to create one filesystem\nfrom your in-memory volumes and the real disk filesystem:\n\n```js\nimport * as fs from 'fs';\nimport { ufs } from 'unionfs';\n\nufs.use(fs).use(vol);\n\nufs.readFileSync('/foo'); // bar\n```\n\nUse [`fs-monkey`][fs-monkey] to monkey-patch Node's `require` function:\n\n```js\nimport { patchRequire } from 'fs-monkey';\n\nvol.writeFileSync('/index.js', 'console.log(\"hi world\")');\npatchRequire(vol);\nrequire('/index'); // hi world\n```\n\n## Docs\n\n- [Reference](./docs/reference.md)\n- [Relative paths](./docs/relative-paths.md)\n- [API status](./docs/api-status.md)\n- [Dependencies](./docs/dependencies.md)\n\n## See also\n\n- [`spyfs`][spyfs] - spies on filesystem actions\n- [`unionfs`][unionfs] - creates a union of multiple filesystem volumes\n- [`linkfs`][linkfs] - redirects filesystem paths\n- [`fs-monkey`][fs-monkey] - monkey-patches Node's `fs` module and `require` function\n- [`libfs`](https://github.com/streamich/full-js/blob/master/src/lib/fs.ts) - real filesystem (that executes UNIX system calls) implemented in JavaScript\n\n[chat]: https://onp4.com/@vadim/~memfs\n[chat-badge]: https://img.shields.io/badge/Chat-%F0%9F%92%AC-green?style=flat&logo=chat&link=https://onp4.com/@vadim/~memfs\n[npm-url]: https://www.npmjs.com/package/memfs\n[npm-badge]: https://img.shields.io/npm/v/memfs.svg\n[travis-url]: https://travis-ci.org/streamich/memfs\n[travis-badge]: https://travis-ci.org/streamich/memfs.svg?branch=master\n[memfs]: https://github.com/streamich/memfs\n[unionfs]: https://github.com/streamich/unionfs\n[linkfs]: https://github.com/streamich/linkfs\n[spyfs]: https://github.com/streamich/spyfs\n[fs-monkey]: https://github.com/streamich/fs-monkey\n\n## License\n\n[Unlicense](./LICENSE) - public domain.\n",
    "licenseText": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/memfs/-/memfs-3.4.1.tgz#b78092f466a0dce054d63d39275b24c71d3f1305",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/memfs/-/memfs-3.4.1.tgz",
    "hash": "b78092f466a0dce054d63d39275b24c71d3f1305",
    "integrity": "sha512-1c9VPVvW5P7I85c35zAdEr1TD5+F11IToIHIlrVIcflfnzPkJa0ZoYEoEdYDP8KgPFoSZ/opDrUsAoZWym3mtw==",
    "registry": "npm",
    "packageName": "memfs",
    "cacheIntegrity": "sha512-1c9VPVvW5P7I85c35zAdEr1TD5+F11IToIHIlrVIcflfnzPkJa0ZoYEoEdYDP8KgPFoSZ/opDrUsAoZWym3mtw== sha1-t4CS9Gag3OBU1j05J1skxx0/EwU="
  },
  "registry": "npm",
  "hash": "b78092f466a0dce054d63d39275b24c71d3f1305"
}