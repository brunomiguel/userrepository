{
  "manifest": {
    "name": "node-stream-zip",
    "version": "1.15.0",
    "description": "node.js library for reading and extraction of ZIP archives",
    "keywords": [
      "zip",
      "archive",
      "unzip",
      "stream"
    ],
    "homepage": "https://github.com/antelle/node-stream-zip",
    "author": {
      "name": "Antelle",
      "email": "antelle.net@gmail.com",
      "url": "https://github.com/antelle"
    },
    "bugs": {
      "email": "antelle.net@gmail.com",
      "url": "https://github.com/antelle/node-stream-zip/issues"
    },
    "license": "MIT",
    "files": [
      "LICENSE",
      "node_stream_zip.js",
      "node_stream_zip.d.ts"
    ],
    "scripts": {
      "lint": "eslint node_stream_zip.js test/tests.js",
      "check-types": "tsc node_stream_zip.d.ts",
      "test": "nodeunit test/tests.js"
    },
    "main": "node_stream_zip.js",
    "types": "node_stream_zip.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/antelle/node-stream-zip.git"
    },
    "engines": {
      "node": ">=0.12.0"
    },
    "devDependencies": {
      "@types/node": "^14.14.6",
      "eslint": "^7.19.0",
      "nodeunit": "^0.11.3",
      "prettier": "^2.2.1"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/antelle"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-node-stream-zip-1.15.0-158adb88ed8004c6c49a396b50a6a5de3bca33ea-integrity/node_modules/node-stream-zip/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-stream-zip ![CI Checks](https://github.com/antelle/node-stream-zip/workflows/CI%20Checks/badge.svg)\n\nnode.js library for reading and extraction of ZIP archives.  \nFeatures:\n\n- it never loads entire archive into memory, everything is read by chunks\n- large archives support\n- all operations are non-blocking, no sync i/o\n- fast initialization\n- no dependencies, no binary addons\n- decompression with built-in zlib module\n- deflate, sfx, macosx/windows built-in archives\n- ZIP64 support\n\n## Installation\n\n```sh\nnpm i node-stream-zip\n```\n\n## Usage\n\nThere are two APIs provided:\n1. [promise-based / async](#async-api) \n2. [callbacks](#callback-api)\n\nIt's recommended to use the new, promise API, however the legacy callback API \nmay be more flexible for certain operations.\n\n### Async API\n\nOpen a zip file\n```javascript\nconst StreamZip = require('node-stream-zip');\nconst zip = new StreamZip.async({ file: 'archive.zip' });\n```\n\nStream one entry to stdout\n```javascript\nconst stm = await zip.stream('path/inside/zip.txt');\nstm.pipe(process.stdout);\nstm.on('end', () => zip.close());\n```\n\nRead a file as buffer\n```javascript\nconst data = await zip.entryData('path/inside/zip.txt');\nawait zip.close();\n```\n\nExtract one file to disk\n```javascript\nawait zip.extract('path/inside/zip.txt', './extracted.txt');\nawait zip.close();\n```\n\nList entries\n```javascript\nconst entriesCount = await zip.entriesCount;\nconsole.log(`Entries read: ${entriesCount}`);\n\nconst entries = await zip.entries();\nfor (const entry of Object.values(entries)) {\n    const desc = entry.isDirectory ? 'directory' : `${entry.size} bytes`;\n    console.log(`Entry ${entry.name}: ${desc}`);\n}\n\n// Do not forget to close the file once you're done\nawait zip.close();\n```\n\nExtract a folder from archive to disk\n```javascript\nfs.mkdirSync('extracted');\nawait zip.extract('path/inside/zip/', './extracted');\nawait zip.close();\n```\n\nExtract everything\n```javascript\nfs.mkdirSync('extracted');\nconst count = await zip.extract(null, './extracted');\nconsole.log(`Extracted ${count} entries`);\nawait zip.close();\n```\n\nWhen extracting a folder, you can listen to `extract` event\n```javascript\nzip.on('extract', (entry, file) => {\n    console.log(`Extracted ${entry.name} to ${file}`);\n});\n```\n\n`entry` event is generated for every entry during loading\n```javascript\nzip.on('entry', entry => {\n    // you can already stream this entry,\n    // without waiting until all entry descriptions are read (suitable for very large archives)\n    console.log(`Read entry ${entry.name}`);\n});\n```\n\n### Callback API\n\nOpen a zip file\n```javascript\nconst StreamZip = require('node-stream-zip');\nconst zip = new StreamZip({ file: 'archive.zip' });\n\n// Handle errors\nzip.on('error', err => { /*...*/ });\n```\n\nList entries\n```javascript\nzip.on('ready', () => {\n    console.log('Entries read: ' + zip.entriesCount);\n    for (const entry of Object.values(zip.entries())) {\n        const desc = entry.isDirectory ? 'directory' : `${entry.size} bytes`;\n        console.log(`Entry ${entry.name}: ${desc}`);\n    }\n    // Do not forget to close the file once you're done\n    zip.close();\n});\n```\n\nStream one entry to stdout\n```javascript\nzip.on('ready', () => {\n    zip.stream('path/inside/zip.txt', (err, stm) => {\n        stm.pipe(process.stdout);\n        stm.on('end', () => zip.close());\n    });\n});\n```\n\nExtract one file to disk\n```javascript\nzip.on('ready', () => {\n    zip.extract('path/inside/zip.txt', './extracted.txt', err => {\n        console.log(err ? 'Extract error' : 'Extracted');\n        zip.close();\n    });\n});\n```\n\nExtract a folder from archive to disk\n```javascript\nzip.on('ready', () => {\n    fs.mkdirSync('extracted');\n    zip.extract('path/inside/zip/', './extracted', err => {\n        console.log(err ? 'Extract error' : 'Extracted');\n        zip.close();\n    });\n});\n```\n\nExtract everything\n```javascript\nzip.on('ready', () => {\n    fs.mkdirSync('extracted');\n    zip.extract(null, './extracted', (err, count) => {\n        console.log(err ? 'Extract error' : `Extracted ${count} entries`);\n        zip.close();\n    });\n});\n```\n\nRead a file as buffer in sync way\n```javascript\nzip.on('ready', () => {\n    const data = zip.entryDataSync('path/inside/zip.txt');\n    zip.close();\n});\n```\n\nWhen extracting a folder, you can listen to `extract` event\n```javascript\nzip.on('extract', (entry, file) => {\n    console.log(`Extracted ${entry.name} to ${file}`);\n});\n```\n\n`entry` event is generated for every entry during loading\n```javascript\nzip.on('entry', entry => {\n    // you can already stream this entry,\n    // without waiting until all entry descriptions are read (suitable for very large archives)\n    console.log(`Read entry ${entry.name}`);\n});\n```\n\n## Options\n\nYou can pass these options to the constructor\n- `storeEntries: true` - you will be able to work with entries inside zip archive, otherwise the only way to access them is `entry` event\n- `skipEntryNameValidation: true` - by default, entry name is checked for malicious characters, like `../` or `c:\\123`, pass this flag to disable validation errors\n\n## Methods\n\n- `zip.entries()` - get all entries description\n- `zip.entry(name)` - get entry description by name\n- `zip.stream(entry, function(err, stm) { })` - get entry data reader stream\n- `zip.entryDataSync(entry)` - get entry data in sync way\n- `zip.close()` - cleanup after all entries have been read, streamed, extracted, and you don't need the archive\n\n## Building\n\nThe project doesn't require building. To run unit tests with [nodeunit](https://github.com/caolan/nodeunit):  \n```sh\nnpm test\n```\n\n## Known issues\n\n- [utf8](https://github.com/rubyzip/rubyzip/wiki/Files-with-non-ascii-filenames) file names\n\n## Out of scope\n\n- AES encrypted files: the library will throw an error if you try to open it\n\n## Contributors\n\nZIP parsing code has been partially forked from [cthackers/adm-zip](https://github.com/cthackers/adm-zip) (MIT license).\n",
    "licenseText": "Copyright (c) 2021 Antelle https://github.com/antelle\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n== dependency license: adm-zip ==\n\nCopyright (c) 2012 Another-D-Mention Software and other contributors, \nhttp://www.another-d-mention.ro/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-stream-zip/-/node-stream-zip-1.15.0.tgz#158adb88ed8004c6c49a396b50a6a5de3bca33ea",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-stream-zip/-/node-stream-zip-1.15.0.tgz",
    "hash": "158adb88ed8004c6c49a396b50a6a5de3bca33ea",
    "integrity": "sha512-LN4fydt9TqhZhThkZIVQnF9cwjU3qmUH9h78Mx/K7d3VvfRqqwthLwJEUOEL0QPZ0XQmNN7be5Ggit5+4dq3Bw==",
    "registry": "npm",
    "packageName": "node-stream-zip",
    "cacheIntegrity": "sha512-LN4fydt9TqhZhThkZIVQnF9cwjU3qmUH9h78Mx/K7d3VvfRqqwthLwJEUOEL0QPZ0XQmNN7be5Ggit5+4dq3Bw== sha1-FYrbiO2ABMbEmjlrUKal3jvKM+o="
  },
  "registry": "npm",
  "hash": "158adb88ed8004c6c49a396b50a6a5de3bca33ea"
}