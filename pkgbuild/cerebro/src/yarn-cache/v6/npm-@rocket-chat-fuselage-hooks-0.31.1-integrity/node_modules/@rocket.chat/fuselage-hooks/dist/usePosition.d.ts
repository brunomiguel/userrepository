import { RefObject } from 'react';
export declare type Positions = 'top' | 'left' | 'bottom' | 'right';
export declare type Placements = 'top-start' | 'top-middle' | 'top-end' | 'bottom-start' | 'bottom-middle' | 'bottom-end' | 'left-start' | 'left-middle' | 'left-end' | 'right-start' | 'right-middle' | 'right-end' | Positions;
export declare type PositionOptions = {
    margin?: number;
    container?: Element;
    placement?: Placements;
    watch?: boolean;
};
export declare type PositionFlipOrder = {
    top: string;
    right: string;
    bottom: string;
    left: string;
};
declare type Boundaries = {
    t: number;
    b: number;
    r: number;
    l: number;
};
declare type VariantBoundaries = {
    vm: number;
    vs: number;
    ve: number;
    hs: number;
    he: number;
    hm: number;
};
declare type PositionStyle = {
    top: string;
    left: string;
    position?: 'fixed';
    ZIndex: '9999';
    transition: 'none !important';
    bottom?: 0;
    display: 'flex';
};
declare type PositionEmptyResult = {
    visibility: 'hidden';
    top: '-9999px';
    left: '-9999px';
    position: 'fixed';
};
declare type PositionResult = {
    style: PositionStyle | PositionEmptyResult;
    placement?: Placements;
};
export declare const getPositionStyle: ({ placement, container, targetBoundaries, variantStore, target, margin, }: {
    placement: Placements;
    target: DOMRect;
    container: DOMRect;
    targetBoundaries: Boundaries;
    variantStore?: VariantBoundaries;
    margin?: number;
}) => PositionResult;
export declare const getTargetBoundaries: ({ referenceBox, target, margin, }: {
    referenceBox?: DOMRect;
    target?: DOMRect;
    margin?: number;
}) => Boundaries | null;
export declare const getVariantBoundaries: ({ referenceBox, target, }: {
    referenceBox?: DOMRect;
    target?: DOMRect;
}) => VariantBoundaries | null;
/**
 * Hook to deal and position an element using an anchor
 * @param reference - the anchor
 * @param targetEl - the element to be positioned
 * @param options - options to position
 * @returns The style containing top and left position
 * @public
 */
export declare const usePosition: <T extends Element, R extends Element>(reference: RefObject<R>, target: RefObject<T>, options: PositionOptions) => PositionResult;
export {};
