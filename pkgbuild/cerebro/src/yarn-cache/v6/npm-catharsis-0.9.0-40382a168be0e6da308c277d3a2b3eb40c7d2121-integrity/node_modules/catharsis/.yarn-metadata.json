{
  "manifest": {
    "version": "0.9.0",
    "name": "catharsis",
    "description": "A JavaScript parser for Google Closure Compiler and JSDoc type expressions.",
    "author": {
      "name": "Jeff Williams",
      "email": "jeffrey.l.williams@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/hegemonic/catharsis"
    },
    "bugs": {
      "url": "https://github.com/hegemonic/catharsis/issues"
    },
    "main": "catharsis.js",
    "dependencies": {
      "lodash": "^4.17.15"
    },
    "devDependencies": {
      "ajv": "^6.12.2",
      "mocha": "^8.0.1",
      "pegjs": "^0.10.0",
      "should": "^13.2.3",
      "should-equal": "^2.0.0"
    },
    "engines": {
      "node": ">= 10"
    },
    "scripts": {
      "prepare": "./node_modules/pegjs/bin/pegjs ./lib/parser.pegjs",
      "test": "./node_modules/mocha/bin/mocha"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-catharsis-0.9.0-40382a168be0e6da308c277d3a2b3eb40c7d2121-integrity/node_modules/catharsis/package.json",
    "readmeFilename": "README.md",
    "readme": "# Catharsis\n\n[![Build Status][travis-img]][travis-url]\n\n[travis-img]: https://travis-ci.com/hegemonic/catharsis.svg?branch=master\n[travis-url]: https://travis-ci.com/hegemonic/catharsis\n\nA JavaScript parser for\n[Google Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-expressions)\nand [JSDoc](https://github.com/jsdoc/jsdoc) type expressions.\n\nCatharsis is designed to be:\n\n+ **Accurate**. Catharsis is based on a [PEG.js](https://pegjs.org/) grammar\nthat's designed to handle any valid type expression. It uses a thorough test\nsuite to verify the parser's accuracy.\n+ **Fast**. Parse results are cached, so the parser is invoked only when\nnecessary.\n+ **Flexible**. Catharsis can convert a parse result back into a type\nexpression, or into a description of the type expression. In addition, Catharsis\ncan parse [JSDoc](https://github.com/jsdoc/jsdoc)-style type expressions.\n\n\n## Example\n\n```js\nconst catharsis = require('catharsis');\n\n// Closure Compiler parsing\nconst type = '!Object';\nlet parsedType;\ntry {\n    parsedType = catharsis.parse(type); // {\"type\":\"NameExpression,\"name\":\"Object\",\"nullable\":false}\n} catch(e) {\n    console.error('unable to parse %s: %s', type, e);\n}\n\n// JSDoc-style type expressions enabled\nconst jsdocType = 'string[]';  // Closure Compiler expects Array.<string>\nlet parsedJsdocType;\ntry {\n    parsedJsdocType = catharsis.parse(jsdocType, {jsdoc: true});\n} catch (e) {\n    console.error('unable to parse %s: %s', jsdocType, e);\n}\n\n// Converting parse results back to type expressions\ncatharsis.stringify(parsedType);                              // !Object\ncatharsis.stringify(parsedJsdocType);                         // string[]\ncatharsis.stringify(parsedJsdocType, {restringify: true});    // Array.<string>\n\n// Converting parse results to descriptions of the type expression\ncatharsis.describe(parsedType).simple;                        // non-null Object\ncatharsis.describe(parsedJsdocType).simple;                   // Array of string\n```\n\nSee the\n[`test/specs` directory](https://github.com/hegemonic/catharsis/tree/master/test/specs)\nfor more examples of Catharsis' parse results.\n\n## Methods\n\n### `parse(typeExpression, options)`\n\nParse a type expression, and return the parse results. Throws an error if the\ntype expression cannot be parsed.\n\nWhen called without options, Catharsis attempts to parse type expressions in the\nsame way as Closure Compiler. When the `jsdoc` option is enabled, Catharsis can\nalso parse several kinds of type expressions that are permitted in\n[JSDoc](https://github.com/jsdoc/jsdoc):\n\n+ The string `function` is treated as a function type with no parameters.\n+ You can omit the period from type applications. For example,\n`Array.<string>` and `Array<string>` are parsed in the same way.\n+ If can append `[]` to a name expression (for example, `string[]`), it is\ninterpreted as a type application with the expression `Array` (for example,\n`Array.<string>`).\n+ Name expressions can contain the characters `#`, `~`, `:`, and `/`.\n+ Name expressions can contain a suffix that is similar to a function signature\n(for example, `MyClass(foo, bar)`).\n+ Name expressions can contain a reserved word.\n+ Record types can use types other than name expressions for keys.\n\n#### Parameters\n\n+ `type`: A string containing a Closure Compiler type expression.\n+ `options`: Options for parsing the type expression.\n    + `options.jsdoc`: Specifies whether to enable parsing of JSDoc-style type\n    expressions. Defaults to `false`.\n    + `options.useCache`: Specifies whether to use the cache of parsed types.\n    Defaults to `true`.\n\n#### Returns\n\nAn object containing the parse results. See the\n[`test/specs` directory](https://github.com/hegemonic/catharsis/tree/master/test/specs)\nfor examples of the parse results for different type expressions.\n\nThe object also includes two non-enumerable properties:\n\n+ `jsdoc`: A boolean that indicates whether the type expression was parsed with\nJSDoc support enabled.\n+ `typeExpression`: A string that contains the type expression that was parsed.\n\n### `stringify(parsedType, options)`\n\nStringify `parsedType`, and return the type expression. If validation is\nenabled, throws an error if the stringified type expression cannot be parsed.\n\n#### Parameters ####\n+ `parsedType`: An object containing a parsed Closure Compiler type expression.\n+ `options`: Options for stringifying the parse results.\n    + `options.cssClass`: Synonym for `options.linkClass`. Deprecated in version\n    0.8.0; will be removed in a future version.\n    + `options.htmlSafe`: Specifies whether to return an HTML-safe string that\n    replaces left angle brackets (`<`) with the corresponding entity (`&lt;`).\n    **Note**: Characters in name expressions are not escaped.\n    + `options.linkClass`: A CSS class to add to HTML links. Used only if\n    `options.links` is provided. By default, no CSS class is added.\n    + `options.links`: An object or map whose keys are name expressions and\n    whose values are URIs. If a name expression matches a key in\n    `options.links`, the name expression will be wrapped in an HTML `<a>` tag\n    that links to the URI. If you also specify `options.linkClass`, the `<a>`\n    tag includes a `class` attribute. **Note**: When using this option, parsed\n    types are always restringified, and the resulting string is not cached.\n    + `options.restringify`: Forces Catharsis to restringify the parsed type. If\n    this option is not specified, and the parsed type object includes a\n    `typeExpression` property, Catharsis returns the `typeExpression` property\n    without modification when possible. Defaults to `false`.\n    + `options.useCache`: Specifies whether to use the cache of stringified type\n    expressions. Defaults to `true`.\n    + `options.validate`: Specifies whether to validate the stringified parse\n    results by attempting to parse them as a type expression. If the stringified\n    results are not parsable with the default options, you must also provide the\n    appropriate options to pass to the `parse()` method. Defaults to `false`.\n\n#### Returns\n\nA string containing the type expression.\n\n### `describe(parsedType, options)`\n\nConvert a parsed type to a description of the type expression. This method is\nespecially useful if your users are not familiar with the syntax for type\nexpressions.\n\nThe `describe()` method returns the description in two formats:\n\n+ **Simple format**. A string that provides a complete description of the type\nexpression.\n+ **Extended format**. An object that separates out some of the details about\nthe outermost type expression, such as whether the type is optional, nullable,\nor repeatable.\n\nFor example, when you call `describe('?function(new:MyObject, string)=')`, the\nmethod returns the following data:\n\n```js\n{\n  simple: 'optional nullable function(constructs MyObject, string)',\n  extended: {\n    description: 'function(string)',\n    modifiers: {\n      functionNew: 'Returns MyObject when called with new.',\n      functionThis: '',\n      optional: 'Optional.',\n      nullable: 'May be null.',\n      repeatable: ''\n    },\n    returns: ''\n  }\n}\n```\n\n#### Parameters\n\n+ `parsedType`: An object containing a parsed Closure Compiler type expression.\n+ `options`: Options for creating the description.\n    + `options.codeClass`: A CSS class to add to the tag that is wrapped around\n    type names. Used only if you specify `options.codeTag`. By default, no CSS\n    class is added.\n    + `options.codeTag`: The name of an HTML tag (for example, `code`) to wrap\n    around type names. For example, if this option is set to `code`, the type\n    expression `Array.<string>` would have the simple description\n    `<code>Array</code> of <code>string</code>`.\n    + `options.language`: A string identifying the language in which to generate\n    the description. The identifier should be an\n    [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n    (for example, `en`). It can optionally be followed by a hyphen and an\n    [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n    (for example, `en-US`). If you use values other than `en`, you must provide\n    translation resources in `options.resources`. Defaults to `en`.\n    + `options.linkClass`: A CSS class to add to HTML links. Used only if\n    `options.links` is provided. By default, no CSS class is added.\n    + `options.links`: An object or map whose keys are name expressions and\n    whose values are URIs. If a name expression matches a key in\n    `options.links`, the name expression will be wrapped in an HTML `<a>` tag\n    that links to the URI. If you also specify `options.linkClass`, the `<a>`\n    tag includes a `class` attribute. **Note**: When you use this option, the\n    description is not cached.\n    + `options.resources`: An object that specifies how to describe type\n    expressions for a given language. The object's property names should use the\n    same format as `options.language`. Each property should contain an object in\n    the same format as the translation resources in\n    [`res/en.json`](https://github.com/hegemonic/catharsis/blob/master/res/en.json).\n    If you specify a value for `options.resources.en`, that value overrides the\n    defaults in `res/en.json`.\n    + `options.useCache`: Specifies whether to use the cache of descriptions.\n    Defaults to `true`.\n\n### Returns\n\nAn object with the following properties:\n\n+ `simple`: A string that provides a complete description of the type\nexpression.\n+ `extended`: An object containing details about the outermost type expression.\n    + `extended.description`: A string that provides a basic description of the\n    type expression, excluding the information contained in other properties.\n    + `extended.modifiers`: Information about modifiers that apply to the type\n    expression.\n        + `extended.modifiers.functionNew`: A string that describes what a\n        function returns when called with `new`. Returned only for function\n        types.\n        + `extended.modifiers.functionThis`: A string that describes what the\n        keyword `this` refers to within a function. Returned only for function\n        types.\n        + `extended.modifiers.nullable`: A string that indicates whether the\n        type is nullable or non-nullable.\n        + `extended.modifiers.optional`: A string that indicates whether the\n        type is optional.\n        + `extended.modifiers.repeatable`: A string that indicates whether the\n        type can be repeated.\n    + `extended.returns`: A string that describes the function's return value.\n    Returned only for function types.\n\n## Changelog\n\n+ 0.9.0 (June 2020):\n    + For the `describe()` and `stringify()` methods, the `options.links`\n    parameter now accepts either a map or an object.\n    + Catharsis now requires Node.js 10 or later.\n+ 0.8.11 (July 2019): Updated dependencies.\n+ 0.8.10 (May 2019): Updated dependencies.\n+ 0.8.9 (July 2017): Type expressions that include an `@` sign (for example,\n`module:@prefix/mymodule~myCallback`) are now supported.\n+ 0.8.8 (April 2016): Corrected the description of type applications other than\narrays that contain a single type (for example, `Promise.<string>`).\n+ 0.8.7 (June 2015):\n    + Record types that use numeric literals as property names (for example,\n    `{0: string}`) are now parsed correctly.\n    + Record types with a property that contains a function, with no space after\n    the preceding colon (for example, `{foo:function()}`), are now parsed\n    correctly.\n    + Repeatable function parameters are no longer required to be enclosed in\n    brackets, regardless of whether JSDoc-style type expressions are enabled. In\n    addition, the brackets are omitted when stringifying a parsed type\n    expression.\n+ 0.8.6 (December 2014): Improved the description of the unknown type.\n+ 0.8.5 (December 2014): Added support for postfix nullable/non-nullable\noperators combined with the optional operator (for example, `foo?=`).\n+ 0.8.4 (December 2014): JSDoc-style nested arrays (for example, `number[][]`)\nare now parsed correctly when JSDoc-style type expressions are enabled.\n+ 0.8.3 (October 2014):\n    + Type applications are no longer required to include a period (`.`) as a\n    separator, regardless of whether JSDoc-style type expressions are enabled.\n    + Type unions that are not enclosed in parentheses can now include the\n    repeatable (`...`) modifier when JSDoc-style type expressions are enabled.\n    + Name expressions may now be enclosed in single or double quotation marks\n    when JSDoc-style type expressions are enabled.\n+ 0.8.2 (June 2014): Fixed a compatibility issue with the JSDoc fork of Mozilla\nRhino.\n+ 0.8.1 (June 2014): Added support for type unions that are not enclosed in\nparentheses, and that contain nullable or non-nullable modifiers (for example,\n`!string|!number`).\n+ 0.8.0 (May 2014):\n    + Added a `describe()` method, which converts a parsed type to a description\n    of the type.\n    + Added a `linkClass` option to the `stringify()` method, and deprecated the\n    existing `cssClass` option. The `cssClass` option will be removed in a\n    future release.\n    + Clarified and corrected several sections in the `README`.\n+ 0.7.1 (April 2014): In record types, property names that begin with a keyword\n(for example, `undefinedHTML`) are now parsed correctly when JSDoc-style type\nexpressions are enabled.\n+ 0.7.0 (October 2013):\n    + Repeatable type expressions other than name expressions (for example,\n    `...function()`) are now parsed and stringified correctly.\n    + Type expressions that are both repeatable and either nullable or\n    non-nullable (for example, `...!number`) are now parsed and stringified\n    correctly.\n    + Name expressions are now parsed correctly when they match a property name\n    in an object instance (for example, `constructor`).\n+ 0.6.0 (September 2013): Added support for the type expression `function[]`\nwhen JSDoc-style type expressions are enabled.\n+ 0.5.6 (April 2013):\n    + For consistency with Closure Compiler, parentheses are no longer required\n    around type unions, regardless of whether JSDoc-style type expressions are\n    enabled.\n    + For consistency with Closure Compiler, you can now use postfix notation\n    for the `?` (nullable) and `!` (non-nullable) modifiers. For example,\n    `?string` and `string?` are now treated as equivalent.\n    + String literals and numeric literals are now allowed as property names\n    within name expressions. For example, the name expression `Foo.\"bar\"` is now\n    parsed correctly.\n+ 0.5.5 (April 2013): Corrected a parsing issue with name expressions that end\nwith a value enclosed in parentheses.\n+ 0.5.4 (April 2013):\n    + Repeatable literals (for example, `...*`) are now parsed correctly.\n    + When JSDoc-style type expressions are enabled, a name expression can now\n    contain a value enclosed in parentheses at the end of the name expression\n    (for example, `MyClass(2)`).\n+ 0.5.3 (March 2013): The `parse()` method now correctly parses name expressions\nthat contain hyphens.\n+ 0.5.2 (March 2013): The `parse()` method now correctly parses function types\nwhen JSDoc-style type expressions are enabled.\n+ 0.5.1 (March 2013): Newlines and extra spaces are now removed from type\nexpressions before they are parsed.\n+ 0.5.0 (March 2013):\n    + The `parse()` method's `lenient` option has been renamed to `jsdoc`.\n    **Note**: This change is not backwards-compatible with previous versions.\n    + The `stringify()` method now accepts `cssClass` and `links` options, which\n    you can use to add HTML links to a type expression.\n+ 0.4.3 (March 2013):\n    + The `stringify()` method no longer caches HTML-safe type expressions as if\n    they were normal type expressions.\n    + The `stringify()` method's options parameter may now include an\n    `options.restringify` property, and the behavior of the `options.useCache`\n    property has changed.\n+ 0.4.2 (March 2013):\n    + When lenient parsing is enabled, name expressions can now contain the\n    characters `:` and `/`.\n    + When lenient parsing is enabled, a name expression followed by `[]` (for\n    example, `string[]`) will be interpreted as a type application with the\n    expression `Array` (for example, `Array.<string>`).\n+ 0.4.1 (March 2013):\n    + The `parse()` and `stringify()` methods now honor all of the specified\n    options.\n    + When lenient parsing is enabled, name expressions can now contain a\n    reserved word.\n+ 0.4.0 (March 2013):\n    + Catharsis now supports a lenient parsing option that can parse several\n    kinds of malformed type expressions. See the documentation for details.\n    + The objects containing parse results are now frozen.\n    + The objects containing parse results now have two non-enumerable\n    properties:\n        + `lenient`: A boolean indicating whether the type expression was parsed\n        in lenient mode.\n        + `typeExpression`: A string containing the original type expression.\n    + The `stringify()` method now honors the `useCache` option. If a parsed\n    type includes a `typeExpression` property, and `useCache` is not set to\n    `false`, the stringified type will be identical to the original type\n    expression.\n+ 0.3.1 (March 2013): Type expressions that begin with a reserved word, such as\n`integer`, are now parsed correctly.\n+ 0.3.0 (March 2013):\n    + The `parse()` and `stringify()` methods are now synchronous, and the\n    `parseSync()` and `stringifySync()` methods have been removed. **Note**:\n    This change is not backwards-compatible with previous versions.\n    + The parse results now use a significantly different format from previous\n    versions. The new format is more expressive and is similar, but not\n    identical, to the format used by the\n    [doctrine](https://github.com/eslint/doctrine) parser. **Note**: This change\n    is not backwards-compatible with previous versions.\n    + Name expressions that contain a reserved word now include a\n    `reservedWord: true` property.\n    + Union types that are optional or nullable, or that can be repeated, are\n    now parsed and stringified correctly.\n    + Optional function types and record types are now parsed and stringified\n    correctly.\n    + Function types now longer include `new` or `this` properties unless the\n    properties are defined in the type expression. In addition, the `new` and\n    `this` properties can now use any type expression.\n    + In record types, the key for a field type can now use any type expression.\n    + Standalone single-character literals, such as ALL (`*`), are now parsed\n    and stringified correctly.\n    + `null` and `undefined` literals with additional properties, such as\n    `repeatable`, are now stringified correctly.\n+ 0.2.0 (November 2012):\n    + Added `stringify()` and `stringifySync()` methods, which convert a parsed\n    type to a type expression.\n    + Simplified the parse results for function signatures. **Note**: This\n    change is not backwards-compatible with previous versions.\n    + Corrected minor errors in README.md.\n+ 0.1.1 (November 2012): Added `opts` argument to `parse()` and `parseSync()`\nmethods. **Note**: The change to `parse()` is not backwards-compatible with\nprevious versions.\n+ 0.1.0 (November 2012): Initial release.\n\n## License\n\n[MIT license](https://github.com/hegemonic/catharsis/blob/master/LICENSE).\n",
    "licenseText": "Copyright (c) 2014 Google Inc.\nCopyright (c) 2012-2014 Jeff Williams\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/catharsis/-/catharsis-0.9.0.tgz#40382a168be0e6da308c277d3a2b3eb40c7d2121",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/catharsis/-/catharsis-0.9.0.tgz",
    "hash": "40382a168be0e6da308c277d3a2b3eb40c7d2121",
    "integrity": "sha512-prMTQVpcns/tzFgFVkVp6ak6RykZyWb3gu8ckUpd6YkTlacOd3DXGJjIpD4Q6zJirizvaiAjSSHlOsA+6sNh2A==",
    "registry": "npm",
    "packageName": "catharsis",
    "cacheIntegrity": "sha512-prMTQVpcns/tzFgFVkVp6ak6RykZyWb3gu8ckUpd6YkTlacOd3DXGJjIpD4Q6zJirizvaiAjSSHlOsA+6sNh2A== sha1-QDgqFovg5towjCd9Ois+tAx9ISE="
  },
  "registry": "npm",
  "hash": "40382a168be0e6da308c277d3a2b3eb40c7d2121"
}