{"version":3,"file":"accessibility.min.js","sources":["../../src/accessibleTarget.ts","../../src/AccessibilityManager.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: AbstractRenderer|Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        self.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        self.document.addEventListener('mousemove', this._onMouseMove, true);\n        self.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        self.document.removeEventListener('mousemove', this._onMouseMove, true);\n        self.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        const { left, top, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'click', eventData);\n        interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n        interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        self.document.removeEventListener('mousemove', this._onMouseMove, true);\n        self.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"],"names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","renderId","mixin","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","renderer","this","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","_onKeyDown","bind","_onMouseMove","self","addEventListener","Object","AccessibilityManager","_isActive","_isMobileAccessibility","hookDiv","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","backgroundColor","title","_this","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","off","displayObject","visible","interactive","addChild","children","i","length","updateAccessibleObjects","now","performance","android","device","androidUpdateCount","androidUpdateFrequency","renderingToScreen","_lastObjectRendered","_a","getBoundingClientRect","_b","viewWidth","viewHeight","resolution","sx","sy","child","removeItems","pool","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","debug","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","e","interactionManager","plugins","interaction","target","eventData","dispatchEvent","keyCode","movementX","movementY","deactivate"],"mappings":"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"}