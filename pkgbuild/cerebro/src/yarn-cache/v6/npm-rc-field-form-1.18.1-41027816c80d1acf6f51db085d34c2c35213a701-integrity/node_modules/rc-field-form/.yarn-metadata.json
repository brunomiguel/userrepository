{
  "manifest": {
    "name": "rc-field-form",
    "version": "1.18.1",
    "description": "React Form Component",
    "typings": "es/index.d.ts",
    "engines": {
      "node": ">=8.x"
    },
    "keywords": [
      "react",
      "react-component",
      "react-form",
      "form"
    ],
    "homepage": "https://github.com/react-component/field-form",
    "author": {
      "name": "smith3816@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/react-component/field-form.git"
    },
    "bugs": {
      "url": "https://github.com/react-component/field-form/issues"
    },
    "files": [
      "lib",
      "es",
      "dist",
      "assets/*.css"
    ],
    "license": "MIT",
    "main": "./lib/index",
    "module": "./es/index",
    "scripts": {
      "start": "dumi dev",
      "docs:build": "dumi build",
      "docs:deploy": "gh-pages -d docs-dist",
      "compile": "father-build",
      "deploy": "npm run docs:build && npm run docs:deploy",
      "prettier": "prettier --write \"**/*.{js,jsx,tsx,ts,less,md,json}\"",
      "test": "father test",
      "test:coverage": "umi-test --coverage",
      "prepublishOnly": "npm run compile && np --no-cleanup --yolo --no-publish",
      "lint": "eslint src/ --ext .tsx,.ts",
      "lint:tsc": "tsc -p tsconfig.json --noEmit",
      "now-build": "npm run docs:build"
    },
    "peerDependencies": {
      "react": ">= 16.9.0",
      "react-dom": ">= 16.9.0"
    },
    "dependencies": {
      "@babel/runtime": "^7.8.4",
      "async-validator": "^3.0.3",
      "rc-util": "^5.0.0"
    },
    "devDependencies": {
      "@types/enzyme": "^3.10.5",
      "@types/jest": "^26.0.20",
      "@types/lodash": "^4.14.135",
      "@types/react": "^16.8.19",
      "@types/react-dom": "^16.8.4",
      "@umijs/fabric": "^2.5.2",
      "@umijs/test": "^3.2.27",
      "dumi": "^1.1.0",
      "enzyme": "^3.1.0",
      "enzyme-adapter-react-16": "^1.0.2",
      "enzyme-to-json": "^3.1.4",
      "eslint": "^7.18.0",
      "father": "^2.13.6",
      "father-build": "^1.18.6",
      "gh-pages": "^3.1.0",
      "np": "^5.0.3",
      "prettier": "^2.1.2",
      "react": "^16.14.0",
      "react-dnd": "^8.0.3",
      "react-dnd-html5-backend": "^8.0.3",
      "react-dom": "^16.14.0",
      "react-redux": "^4.4.10",
      "react-router": "^3.0.0",
      "redux": "^3.7.2",
      "typescript": "^3.5.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-rc-field-form-1.18.1-41027816c80d1acf6f51db085d34c2c35213a701-integrity/node_modules/rc-field-form/package.json",
    "readmeFilename": "README.md",
    "readme": "# rc-field-form\n\nReact Performance First Form Component.\n\n[![NPM version][npm-image]][npm-url] [![dumi](https://img.shields.io/badge/docs%20by-dumi-blue?style=flat-square)](https://github.com/umijs/dumi) [![build status][github-actions-image]][github-actions-url] [![Codecov][codecov-image]][codecov-url] [![npm download][download-image]][download-url]\n\n[npm-image]: http://img.shields.io/npm/v/rc-field-form.svg?style=flat-square\n[npm-url]: http://npmjs.org/package/rc-field-form\n[github-actions-image]: https://github.com/react-component/field-form/workflows/CI/badge.svg\n[github-actions-url]: https://github.com/react-component/field-form/actions\n[codecov-image]: https://img.shields.io/codecov/c/github/react-component/field-form/master.svg?style=flat-square\n[codecov-url]: https://codecov.io/gh/react-component/field-form/branch/master\n[download-image]: https://img.shields.io/npm/dm/rc-field-form.svg?style=flat-square\n[download-url]: https://npmjs.org/package/rc-field-form\n\n## Development\n\n```bash\nnpm install\nnpm start\nopen http://localhost:8000\n```\n\n## Feature\n\n- Support react.js and even react-native\n- Validate fields with [async-validator](https://github.com/yiminghe/async-validator/)\n\n## Install\n\n[![rc-field-form](https://nodei.co/npm/rc-field-form.png)](https://npmjs.org/package/rc-field-form)\n\n## Usage\n\n```js | pure\nimport Form, { Field } from 'rc-field-form';\n\n<Form\n  onFinish={values => {\n    console.log('Finish:', values);\n  }}\n>\n  <Field name=\"username\">\n    <Input placeholder=\"Username\" />\n  </Field>\n  <Field name=\"password\">\n    <Input placeholder=\"Password\" />\n  </Field>\n\n  <button>Submit</button>\n</Form>;\n\nexport default Demo;\n```\n\n## ðŸ”¥ API\n\nWe use typescript to create the Type definition. You can view directly in IDE. But you can still check the type definition [here](https://github.com/react-component/field-form/blob/master/src/interface.ts).\n\n### Form\n\n| Prop             | Description                                        | Type                                         | Default          |\n| ---------------- | -------------------------------------------------- | -------------------------------------------- | ---------------- |\n| component        | Customize Form render component                    | string \\| Component \\| false                 | form             |\n| fields           | Control Form fields status. Only use when in Redux | [FieldData](#fielddata)[]                    | -                |\n| form             | Set form instance created by `useForm`             | [FormInstance](#useform)                     | `Form.useForm()` |\n| initialValues    | Initial value of Form                              | Object                                       | -                |\n| name             | Config name with [FormProvider](#formprovider)     | string                                       | -                |\n| preserve         | Preserve value when field removed                  | boolean                                      | false            |\n| validateMessages | Set validate message template                      | [ValidateMessages](#validatemessages)        | -                |\n| onFieldsChange   | Trigger when any value of Field changed            | (changedFields, allFields) => void           | -                |\n| onFinish         | Trigger when form submit and success               | (values) => void                             | -                |\n| onFinishFailed   | Trigger when form submit and failed                | ({ values, errorFields, outOfDate }) => void | -                |\n| onValuesChange   | Trigger when any value of Field changed            | (changedValues, values) => void              | -                |\n\n### Field\n\n| Prop              | Description                                                                   | Type                                        | Default  |\n| ----------------- | ----------------------------------------------------------------------------- | ------------------------------------------- | -------- |\n| dependencies      | Will re-render if dependencies changed                                        | [NamePath](#namepath)[]                     | -        |\n| getValueFromEvent | Specify how to get value from event                                           | (..args: any[]) => any                      | -        |\n| getValueProps     | Customize additional props with value. This prop will disable `valuePropName` | (value) => any                              | -        |\n| initialValue      | Field initial value                                                           | any                                         | -        |\n| name              | Field name path                                                               | [NamePath](#namepath)                       | -        |\n| normalize         | Normalize value before update                                                 | (value, prevValue, prevValues) => any       | -        |\n| preserve          | Preserve value when field removed                                             | boolean                                     | false    |\n| rules             | Validate rules                                                                | [Rule](#rule)[]                             | -        |\n| shouldUpdate      | Check if Field should update                                                  | boolean \\| (prevValues, nextValues) => boolean | -        |\n| trigger           | Collect value update by event trigger                                         | string                                      | onChange |\n| validateTrigger   | Config trigger point with rule validate                                       | string \\| string[]                          | onChange |\n| valuePropName     | Config value mapping prop with element                                        | string                                      | value    |\n\n### List\n\n| Prop     | Description                     | Type                                                                                                    | Default |\n| -------- | ------------------------------- | ------------------------------------------------------------------------------------------------------- | ------- |\n| name     | List field name path            | [NamePath](#namepath)[]                                                                                 | -       |\n| children | Render props for listing fields | (fields: { name: [NamePath](#namepath) }[], operations: [ListOperations](#listoperations)) => ReactNode | -       |\n\n### useForm\n\nForm component default create an form instance by `Form.useForm`. But you can create it and pass to Form also. This allow you to call some function on the form instance.\n\n```jsx | pure\nconst Demo = () => {\n  const [form] = Form.useForm();\n  return <Form form={form} />;\n};\n```\n\nFor class component user, you can use `ref` to get form instance:\n\n```jsx | pure\nclass Demo extends React.Component {\n  setRef = form => {\n    // Form instance here\n  };\n\n  render() {\n    return <Form ref={this.setRef} />;\n  }\n}\n```\n\n| Prop              | Description                                | Type                                                                       |\n| ----------------- | ------------------------------------------ | -------------------------------------------------------------------------- |\n| getFieldValue     | Get field value by name path               | (name: [NamePath](#namepath)) => any                                       |\n| getFieldsValue    | Get list of field values by name path list | (nameList?: ([NamePath](#namepath)[]) => any) \\| true                      |\n| getFieldError     | Get field errors by name path              | (name: [NamePath](#namepath)) => string[]                                  |\n| getFieldsError    | Get list of field errors by name path list | (nameList?: [NamePath](#namepath)[]) => FieldError[]                       |\n| isFieldsTouched   | Check if list of fields are touched        | (nameList?: [NamePath](#namepath)[], allTouched?: boolean) => boolean      |\n| isFieldTouched    | Check if a field is touched                | (name: [NamePath](#namepath)) => boolean                                   |\n| isFieldValidating | Check if a field is validating             | (name: [NamePath](#namepath)) => boolean                                   |\n| resetFields       | Reset fields status                        | (fields?: [NamePath](#namepath)[]) => void                                 |\n| setFields         | Set fields status                          | (fields: FieldData[]) => void                                              |\n| setFieldsValue    | Set fields value                           | (values) => void                                                           |\n| submit            | Trigger form submit                        | () => void                                                                 |\n| validateFields    | Trigger fields to validate                 | (nameList?: [NamePath](#namepath)[], options?: ValidateOptions) => Promise |\n\n### FormProvider\n\n| Prop             | Description                               | Type                                     | Default |\n| ---------------- | ----------------------------------------- | ---------------------------------------- | ------- |\n| validateMessages | Config global `validateMessages` template | [ValidateMessages](#validatemessages)    | -       |\n| onFormChange     | Trigger by named form fields change       | (name, { changedFields, forms }) => void | -       |\n| onFormFinish     | Trigger by named form fields finish       | (name, { values, forms }) => void        | -       |\n\n## ðŸ“‹ Interface\n\n### NamePath\n\n| Type                                     |\n| ---------------------------------------- |\n| string \\| number \\| (string \\| number)[] |\n\n### FieldData\n\n| Prop       | Type                                     |\n| ---------- | ---------------------------------------- |\n| touched    | boolean                                  |\n| validating | boolean                                  |\n| errors     | string[]                                 |\n| name       | string \\| number \\| (string \\| number)[] |\n| value      | any                                      |\n\n### Rule\n\n| Prop            | Type                                                                                            |\n| --------------- | ----------------------------------------------------------------------------------------------- |\n| enum            | any[]                                                                                           |\n| len             | number                                                                                          |\n| max             | number                                                                                          |\n| message         | string                                                                                          |\n| min             | number                                                                                          |\n| pattern         | RegExp                                                                                          |\n| required        | boolean                                                                                         |\n| transform       | (value) => any                                                                                  |\n| type            | string                                                                                          |\n| validator       | ([rule](#rule), value, callback: (error?: string) => void, [form](#useform)) => Promise \\| void |\n| whitespace      | boolean                                                                                         |\n| validateTrigger | string \\| string[]                                                                              |\n\n#### validator\n\nTo keep sync with `rc-form` legacy usage of `validator`, we still provides `callback` to trigger validate finished. But in `rc-field-form`, we strongly recommend to return a Promise instead.\n\n### ListOperations\n\n| Prop   | Type                     |\n| ------ | ------------------------ |\n| add    | (initValue: any) => void |\n| remove | (index: number) => void  |\n\n### ValidateMessages\n\nValidate Messages provides a list of error template. You can ref [here](https://github.com/react-component/field-form/blob/master/src/utils/messages.ts) for fully default templates.\n\n| Prop    | Description         |\n| ------- | ------------------- |\n| enum    | Rule `enum` prop    |\n| len     | Rule `len` prop     |\n| max     | Rule `max` prop     |\n| min     | Rule `min` prop     |\n| name    | Field name          |\n| pattern | Rule `pattern` prop |\n| type    | Rule `type` prop    |\n\n## Different with `rc-form`\n\n`rc-field-form` is try to keep sync with `rc-form` in api level, but there still have something to change:\n\n### 1. Field will not keep snyc with `initialValues` when un-touched\n\nIn `rc-form`, field value will get from `initialValues` if user not operate on it.\nIt's a bug but user use as a feature which makes fixing will be a breaking change and we have to keep it.\nIn Field Form, this bug will not exist anymore. If you want to change a field value, use `setFieldsValue` instead.\n\n### 2. Remove Field will not clean up related value\n\nWe do lots of logic to clean up the value when Field removed before. But with user feedback, remove exist value increase the additional work to keep value back with conditional field.\n\n### 3. Nest name use array instead of string\n\nIn `rc-form`, we support like `user.name` to be a name and convert value to `{ user: { name: 'Bamboo' } }`. This makes '.' always be the route of variable, this makes developer have to do additional work if name is real contains a point like `app.config.start` to be `app_config_start` and parse back to point when submit.\n\nField Form will only trade `['user', 'name']` to be `{ user: { name: 'Bamboo' } }`, and `user.name` to be `{ ['user.name']: 'Bamboo' }`.\n\n### 4. Remove `validateFieldsAndScroll`\n\nSince `findDomNode` is marked as warning in [StrictMode](https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage). It seems over control of Form component.\nWe decide to remove `validateFieldsAndScroll` method and you should handle it with you own logic:\n\n```jsx | pure\n<Form>\n  <Field name=\"username\">\n    <input ref={this.inputRef} />\n  </Field>\n</Form>\n```\n\n### 5. `getFieldsError` always return array\n\n`rc-form` returns `null` when no error happen. This makes user have to do some additional code like:\n\n```js | pure\n(form.getFieldsError('fieldName') || []).forEach(() => {\n  // Do something...\n});\n```\n\nNow `getFieldsError` will return `[]` if no errors.\n\n### 6. Remove `callback` with `validateFields`\n\nSince ES8 is support `async/await`, that's no reason not to use it. Now you can easily handle your validate logic:\n\n```js | pure\nasync function() {\n  try {\n    const values = await form.validateFields();\n    console.log(values);\n  } catch (errorList) {\n    errorList.forEach(({ name, errors }) => {\n      // Do something...\n    });\n  }\n}\n```\n\n**Notice: Now if your validator return an `Error(message)`, not need to get error by `e => e.message`. FieldForm will handle this.**\n\n### 7. `preserve` is default to false\n\nIn `rc-form` you should use `preserve` to keep a value cause Form will auto remove a value from Field removed. Field Form will always keep the value in the Form whatever Field removed. But you can still use `preserve=false` to disable value keeping since `1.5.0`.\n\n### 8. `setFields` not trigger `onFieldsChange` and `setFieldsValue` not trigger `onValuesChange`\n\nIn `rc-form`, we hope to help user auto trigger change event by setting to make redux dispatch easier, but it's not good design since it makes code logic couping.\n\nAdditionally, user control update trigger `onFieldsChange` & `onValuesChange` event has potential dead loop risk.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019-present react-component\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rc-field-form/-/rc-field-form-1.18.1.tgz#41027816c80d1acf6f51db085d34c2c35213a701",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rc-field-form/-/rc-field-form-1.18.1.tgz",
    "hash": "41027816c80d1acf6f51db085d34c2c35213a701",
    "integrity": "sha512-/YRnelnHLxygl/ROGhFqfCT+uAZ5xLvu3qjtlETOneb7fXKk7tqp+RGfYqZ4uNViXlsfxox3qqMMTVet6wYfEA==",
    "registry": "npm",
    "packageName": "rc-field-form",
    "cacheIntegrity": "sha512-/YRnelnHLxygl/ROGhFqfCT+uAZ5xLvu3qjtlETOneb7fXKk7tqp+RGfYqZ4uNViXlsfxox3qqMMTVet6wYfEA== sha1-QQJ4FsgNGs9vUdsIXTTCw1ITpwE="
  },
  "registry": "npm",
  "hash": "41027816c80d1acf6f51db085d34c2c35213a701"
}