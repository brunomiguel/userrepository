{
  "manifest": {
    "name": "async-limiter",
    "version": "1.0.1",
    "description": "asynchronous function queue with adjustable concurrency",
    "keywords": [
      "throttle",
      "async",
      "limiter",
      "asynchronous",
      "job",
      "task",
      "concurrency",
      "concurrent"
    ],
    "dependencies": {},
    "devDependencies": {
      "coveralls": "^3.0.3",
      "eslint": "^5.16.0",
      "eslint-plugin-mocha": "^5.3.0",
      "intelli-espower-loader": "^1.0.1",
      "mocha": "^6.1.4",
      "nyc": "^14.1.1",
      "power-assert": "^1.6.1"
    },
    "scripts": {
      "test": "mocha --require intelli-espower-loader test/",
      "travis": "npm run lint && npm run test",
      "coverage": "nyc npm test && nyc report --reporter=text-lcov | coveralls",
      "example": "node example",
      "lint": "eslint ."
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/strml/async-limiter.git"
    },
    "author": {
      "name": "Samuel Reed"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-async-limiter-1.0.1-dd379e94f0db8310b08291f9d64c3209766617fd-integrity/node_modules/async-limiter/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Async-Limiter\n\nA module for limiting concurrent asynchronous actions in flight. Forked from [queue](https://github.com/jessetane/queue).\n\n[![npm](http://img.shields.io/npm/v/async-limiter.svg?style=flat-square)](http://www.npmjs.org/async-limiter)\n[![tests](https://img.shields.io/travis/STRML/async-limiter.svg?style=flat-square&branch=master)](https://travis-ci.org/STRML/async-limiter)\n[![coverage](https://img.shields.io/coveralls/STRML/async-limiter.svg?style=flat-square&branch=master)](https://coveralls.io/r/STRML/async-limiter)\n\nThis module exports a class `Limiter` that implements some of the `Array` API.\nPass async functions (ones that accept a callback or return a promise) to an instance's additive array methods.\n\n## Motivation\n\nCertain functions, like `zlib`, have [undesirable behavior](https://github.com/nodejs/node/issues/8871#issuecomment-250915913) when\nrun at infinite concurrency.\n\nIn this case, it is actually faster, and takes far less memory, to limit concurrency.\n\nThis module should do the absolute minimum work necessary to queue up functions. PRs are welcome that would\nmake this module faster or lighter, but new functionality is not desired.\n\nStyle should confirm to nodejs/node style.\n\n## Example\n\n``` javascript\nvar Limiter = require('async-limiter')\n\nvar t = new Limiter({concurrency: 2});\nvar results = []\n\n// add jobs using the familiar Array API\nt.push(function (cb) {\n  results.push('two')\n  cb()\n})\n\nt.push(\n  function (cb) {\n    results.push('four')\n    cb()\n  },\n  function (cb) {\n    results.push('five')\n    cb()\n  }\n)\n\nt.unshift(function (cb) {\n  results.push('one')\n  cb()\n})\n\nt.splice(2, 0, function (cb) {\n  results.push('three')\n  cb()\n})\n\n// Jobs run automatically. If you want a callback when all are done,\n// call 'onDone()'.\nt.onDone(function () {\n  console.log('all done:', results)\n})\n```\n\n## Zlib Example\n\n```js\nconst zlib = require('zlib');\nconst Limiter = require('async-limiter');\n\nconst message = {some: \"data\"};\nconst payload = new Buffer(JSON.stringify(message));\n\n// Try with different concurrency values to see how this actually\n// slows significantly with higher concurrency!\n//\n// 5:        1398.607ms\n// 10:       1375.668ms\n// Infinity: 4423.300ms\n//\nconst t = new Limiter({concurrency: 5});\nfunction deflate(payload, cb) {\n  t.push(function(done) {\n    zlib.deflate(payload, function(err, buffer) {\n      done();\n      cb(err, buffer);\n    });\n  });\n}\n\nconsole.time('deflate');\nfor(let i = 0; i < 30000; ++i) {\n  deflate(payload, function (err, buffer) {});\n}\nt.onDone(function() {\n  console.timeEnd('deflate');\n});\n```\n\n## Install\n\n`npm install async-limiter`\n\n## Test\n\n`npm test`\n\n## API\n\n### `var t = new Limiter([opts])`\nConstructor. `opts` may contain inital values for:\n* `t.concurrency`\n\n## Instance methods\n\n### `t.onDone(fn)`\n`fn` will be called once and only once, when the queue is empty.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n### `t.push(element1, ..., elementN)`\n### `t.unshift(element1, ..., elementN)`\n### `t.splice(index , howMany[, element1[, ...[, elementN]]])`\n\n## Properties\n### `t.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n### `t.length`\nJobs pending + jobs to process (readonly).\n\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2017 Samuel Reed <samuel.trace.reed@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/async-limiter/-/async-limiter-1.0.1.tgz#dd379e94f0db8310b08291f9d64c3209766617fd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/async-limiter/-/async-limiter-1.0.1.tgz",
    "hash": "dd379e94f0db8310b08291f9d64c3209766617fd",
    "integrity": "sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ==",
    "registry": "npm",
    "packageName": "async-limiter",
    "cacheIntegrity": "sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ== sha1-3TeelPDbgxCwgpH51kwyCXZmF/0="
  },
  "registry": "npm",
  "hash": "dd379e94f0db8310b08291f9d64c3209766617fd"
}