{
  "manifest": {
    "name": "@octokit/graphql",
    "description": "GitHub GraphQL API client for browsers and Node",
    "version": "4.6.4",
    "license": "MIT",
    "files": [
      "dist-*/",
      "bin/"
    ],
    "pika": true,
    "sideEffects": false,
    "keywords": [
      "octokit",
      "github",
      "api",
      "graphql"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/octokit/graphql.js.git"
    },
    "dependencies": {
      "@octokit/request": "^5.6.0",
      "@octokit/types": "^6.0.3",
      "universal-user-agent": "^6.0.0"
    },
    "devDependencies": {
      "@pika/pack": "^0.5.0",
      "@pika/plugin-build-node": "^0.9.0",
      "@pika/plugin-build-web": "^0.9.0",
      "@pika/plugin-ts-standard-pkg": "^0.9.0",
      "@types/fetch-mock": "^7.2.5",
      "@types/jest": "^26.0.0",
      "@types/node": "^14.0.4",
      "fetch-mock": "^9.0.0",
      "jest": "^27.0.0",
      "prettier": "2.3.1",
      "semantic-release": "^17.0.0",
      "semantic-release-plugin-update-version-in-files": "^1.0.0",
      "ts-jest": "^27.0.0-next.12",
      "typescript": "^4.0.0"
    },
    "publishConfig": {
      "access": "public"
    },
    "source": "dist-src/index.js",
    "types": "dist-types/index.d.ts",
    "main": "dist-node/index.js",
    "module": "dist-web/index.js",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@octokit-graphql-4.6.4-integrity/node_modules/@octokit/graphql/package.json",
    "readmeFilename": "README.md",
    "readme": "# graphql.js\n\n> GitHub GraphQL API client for browsers and Node\n\n[![@latest](https://img.shields.io/npm/v/@octokit/graphql.svg)](https://www.npmjs.com/package/@octokit/graphql)\n[![Build Status](https://github.com/octokit/graphql.js/workflows/Test/badge.svg)](https://github.com/octokit/graphql.js/actions?query=workflow%3ATest+branch%3Amaster)\n\n<!-- toc -->\n\n- [Usage](#usage)\n  - [Send a simple query](#send-a-simple-query)\n  - [Authentication](#authentication)\n  - [Variables](#variables)\n  - [Pass query together with headers and variables](#pass-query-together-with-headers-and-variables)\n  - [Use with GitHub Enterprise](#use-with-github-enterprise)\n  - [Use custom `@octokit/request` instance](#use-custom-octokitrequest-instance)\n- [TypeScript](#typescript)\n  - [Additional Types](#additional-types)\n- [Errors](#errors)\n- [Partial responses](#partial-responses)\n- [Writing tests](#writing-tests)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Usage\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nBrowsers\n</th><td width=100%>\n\nLoad `@octokit/graphql` directly from [cdn.skypack.dev](https://cdn.skypack.dev)\n\n```html\n<script type=\"module\">\n  import { graphql } from \"https://cdn.skypack.dev/@octokit/graphql\";\n</script>\n```\n\n</td></tr>\n<tr><th>\nNode\n</th><td>\n\nInstall with <code>npm install @octokit/graphql</code>\n\n```js\nconst { graphql } = require(\"@octokit/graphql\");\n// or: import { graphql } from \"@octokit/graphql\";\n```\n\n</td></tr>\n</tbody>\n</table>\n\n### Send a simple query\n\n```js\nconst { repository } = await graphql(\n  `\n    {\n      repository(owner: \"octokit\", name: \"graphql.js\") {\n        issues(last: 3) {\n          edges {\n            node {\n              title\n            }\n          }\n        }\n      }\n    }\n  `,\n  {\n    headers: {\n      authorization: `token secret123`,\n    },\n  }\n);\n```\n\n### Authentication\n\nThe simplest way to authenticate a request is to set the `Authorization` header, e.g. to a [personal access token](https://github.com/settings/tokens/).\n\n```js\nconst graphqlWithAuth = graphql.defaults({\n  headers: {\n    authorization: `token secret123`,\n  },\n});\nconst { repository } = await graphqlWithAuth(`\n  {\n    repository(owner: \"octokit\", name: \"graphql.js\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n```\n\nFor more complex authentication strategies such as GitHub Apps or Basic, we recommend the according authentication library exported by [`@octokit/auth`](https://github.com/octokit/auth.js).\n\n```js\nconst { createAppAuth } = require(\"@octokit/auth-app\");\nconst auth = createAppAuth({\n  id: process.env.APP_ID,\n  privateKey: process.env.PRIVATE_KEY,\n  installationId: 123,\n});\nconst graphqlWithAuth = graphql.defaults({\n  request: {\n    hook: auth.hook,\n  },\n});\n\nconst { repository } = await graphqlWithAuth(\n  `{\n    repository(owner: \"octokit\", name: \"graphql.js\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }`\n);\n```\n\n### Variables\n\n⚠️ Do not use [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) in the query strings as they make your code vulnerable to query injection attacks (see [#2](https://github.com/octokit/graphql.js/issues/2)). Use variables instead:\n\n```js\nconst { lastIssues } = await graphql(\n  `\n    query lastIssues($owner: String!, $repo: String!, $num: Int = 3) {\n      repository(owner: $owner, name: $repo) {\n        issues(last: $num) {\n          edges {\n            node {\n              title\n            }\n          }\n        }\n      }\n    }\n  `,\n  {\n    owner: \"octokit\",\n    repo: \"graphql.js\",\n    headers: {\n      authorization: `token secret123`,\n    },\n  }\n);\n```\n\n### Pass query together with headers and variables\n\n```js\nconst { graphql } = require(\"@octokit/graphql\");\nconst { lastIssues } = await graphql({\n  query: `query lastIssues($owner: String!, $repo: String!, $num: Int = 3) {\n    repository(owner:$owner, name:$repo) {\n      issues(last:$num) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }`,\n  owner: \"octokit\",\n  repo: \"graphql.js\",\n  headers: {\n    authorization: `token secret123`,\n  },\n});\n```\n\n### Use with GitHub Enterprise\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphql = graphql.defaults({\n  baseUrl: \"https://github-enterprise.acme-inc.com/api\",\n  headers: {\n    authorization: `token secret123`,\n  },\n});\nconst { repository } = await graphql(`\n  {\n    repository(owner: \"acme-project\", name: \"acme-repo\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n```\n\n### Use custom `@octokit/request` instance\n\n```js\nconst { request } = require(\"@octokit/request\");\nconst { withCustomRequest } = require(\"@octokit/graphql\");\n\nlet requestCounter = 0;\nconst myRequest = request.defaults({\n  headers: {\n    authentication: \"token secret123\",\n  },\n  request: {\n    hook(request, options) {\n      requestCounter++;\n      return request(options);\n    },\n  },\n});\nconst myGraphql = withCustomRequest(myRequest);\nawait request(\"/\");\nawait myGraphql(`\n  {\n    repository(owner: \"acme-project\", name: \"acme-repo\") {\n      issues(last: 3) {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n    }\n  }\n`);\n// requestCounter is now 2\n```\n\n## TypeScript\n\n`@octokit/graphql` is exposing proper types for its usage with TypeScript projects.\n\n### Additional Types\n\nAdditionally, `GraphQlQueryResponseData` has been exposed to users:\n\n```ts\nimport type { GraphQlQueryResponseData } from \"@octokit/graphql\";\n```\n\n## Errors\n\nIn case of a GraphQL error, `error.message` is set to the first error from the response’s `errors` array. All errors can be accessed at `error.errors`. `error.request` has the request options such as query, variables and headers set for easier debugging.\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphqlt = graphql.defaults({\n  headers: {\n    authorization: `token secret123`,\n  },\n});\nconst query = `{\n  viewer {\n    bioHtml\n  }\n}`;\n\ntry {\n  const result = await graphql(query);\n} catch (error) {\n  // server responds with\n  // {\n  //  \"data\": null,\n  //  \"errors\": [{\n  //   \"message\": \"Field 'bioHtml' doesn't exist on type 'User'\",\n  //   \"locations\": [{\n  //    \"line\": 3,\n  //    \"column\": 5\n  //   }]\n  //  }]\n  // }\n\n  console.log(\"Request failed:\", error.request); // { query, variables: {}, headers: { authorization: 'token secret123' } }\n  console.log(error.message); // Field 'bioHtml' doesn't exist on type 'User'\n}\n```\n\n## Partial responses\n\nA GraphQL query may respond with partial data accompanied by errors. In this case we will throw an error but the partial data will still be accessible through `error.data`\n\n```js\nlet { graphql } = require(\"@octokit/graphql\");\ngraphql = graphql.defaults({\n  headers: {\n    authorization: `token secret123`,\n  },\n});\nconst query = `{\n  repository(name: \"probot\", owner: \"probot\") {\n    name\n    ref(qualifiedName: \"master\") {\n      target {\n        ... on Commit {\n          history(first: 25, after: \"invalid cursor\") {\n            nodes {\n              message\n            }\n          }\n        }\n      }\n    }\n  }\n}`;\n\ntry {\n  const result = await graphql(query);\n} catch (error) {\n  // server responds with\n  // {\n  //   \"data\": {\n  //     \"repository\": {\n  //       \"name\": \"probot\",\n  //       \"ref\": null\n  //     }\n  //   },\n  //   \"errors\": [\n  //     {\n  //       \"type\": \"INVALID_CURSOR_ARGUMENTS\",\n  //       \"path\": [\n  //         \"repository\",\n  //         \"ref\",\n  //         \"target\",\n  //         \"history\"\n  //       ],\n  //       \"locations\": [\n  //         {\n  //           \"line\": 7,\n  //           \"column\": 11\n  //         }\n  //       ],\n  //       \"message\": \"`invalid cursor` does not appear to be a valid cursor.\"\n  //     }\n  //   ]\n  // }\n\n  console.log(\"Request failed:\", error.request); // { query, variables: {}, headers: { authorization: 'token secret123' } }\n  console.log(error.message); // `invalid cursor` does not appear to be a valid cursor.\n  console.log(error.data); // { repository: { name: 'probot', ref: null } }\n}\n```\n\n## Writing tests\n\nYou can pass a replacement for [the built-in fetch implementation](https://github.com/bitinn/node-fetch) as `request.fetch` option. For example, using [fetch-mock](http://www.wheresrhys.co.uk/fetch-mock/) works great to write tests\n\n```js\nconst assert = require(\"assert\");\nconst fetchMock = require(\"fetch-mock/es5/server\");\n\nconst { graphql } = require(\"@octokit/graphql\");\n\ngraphql(\"{ viewer { login } }\", {\n  headers: {\n    authorization: \"token secret123\",\n  },\n  request: {\n    fetch: fetchMock\n      .sandbox()\n      .post(\"https://api.github.com/graphql\", (url, options) => {\n        assert.strictEqual(options.headers.authorization, \"token secret123\");\n        assert.strictEqual(\n          options.body,\n          '{\"query\":\"{ viewer { login } }\"}',\n          \"Sends correct query\"\n        );\n        return { data: {} };\n      }),\n  },\n});\n```\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2018 Octokit contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@octokit/graphql/-/graphql-4.6.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@octokit/graphql/-/graphql-4.6.4.tgz",
    "hash": "",
    "integrity": "sha512-SWTdXsVheRmlotWNjKzPOb6Js6tjSqA2a8z9+glDJng0Aqjzti8MEWOtuT8ZSu6wHnci7LZNuarE87+WJBG4vg==",
    "registry": "npm",
    "packageName": "@octokit/graphql",
    "cacheIntegrity": "sha512-SWTdXsVheRmlotWNjKzPOb6Js6tjSqA2a8z9+glDJng0Aqjzti8MEWOtuT8ZSu6wHnci7LZNuarE87+WJBG4vg== sha1-DD9b7UQIIhgulyMXEirLZdMRpe0="
  },
  "registry": "npm",
  "hash": "4964dd5ec5617919a5a2d58d8caccf39be89b3ab634aa0366bccfdfa094326783402a8f3b62f0c1163adb93f194aeeb01e7722ecb64db9aac4f3bf962411b8be"
}