{
  "manifest": {
    "name": "light-my-request",
    "version": "5.8.0",
    "description": "Fake HTTP injection library",
    "main": "index.js",
    "types": "types/index.d.ts",
    "dependencies": {
      "cookie": "^0.5.0",
      "process-warning": "^2.0.0",
      "set-cookie-parser": "^2.4.1"
    },
    "devDependencies": {
      "@fastify/ajv-compiler": "^3.1.0",
      "@fastify/pre-commit": "^2.0.2",
      "@types/node": "^18.0.0",
      "benchmark": "^2.1.4",
      "end-of-stream": "^1.4.4",
      "express": "^4.17.1",
      "form-auto-content": "^3.0.0",
      "form-data": "^4.0.0",
      "semver": "^7.3.5",
      "standard": "^17.0.0",
      "tap": "^16.0.0",
      "tsd": "^0.24.1"
    },
    "scripts": {
      "benchmark": "node test/benchmark.js",
      "coverage": "npm run unit -- --cov --coverage-report=html",
      "lint": "standard",
      "test": "npm run lint && npm run test:unit && npm run test:typescript",
      "test:typescript": "tsd",
      "test:unit": "tap"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/fastify/light-my-request.git"
    },
    "keywords": [
      "http",
      "inject",
      "fake",
      "request",
      "server"
    ],
    "author": {
      "name": "Tomas Della Vedova - @delvedor",
      "url": "http://delved.org"
    },
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/fastify/light-my-request/issues"
    },
    "homepage": "https://github.com/fastify/light-my-request/blob/master/README.md",
    "standard": {
      "ignore": [
        "test/benchmark.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-light-my-request-5.8.0-93b28615d4cd134b4e2370bcf2ff7e35b51c8d29-integrity/node_modules/light-my-request/package.json",
    "readmeFilename": "README.md",
    "readme": "# Light my Request\n\n![CI](https://github.com/fastify/light-my-request/workflows/CI/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/light-my-request.svg?style=flat)](https://www.npmjs.com/package/light-my-request)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)\n\nInjects a fake HTTP request/response into a node HTTP server for simulating server logic, writing tests, or debugging.\nDoes not use a socket connection so can be run against an inactive server (server not in listen mode).\n\n## Example\n\n```javascript\nconst http = require('http')\nconst inject = require('light-my-request')\n\nconst dispatch = function (req, res) {\n  const reply = 'Hello World'\n  res.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Length': reply.length })\n  res.end(reply)\n}\n\nconst server = http.createServer(dispatch)\n\ninject(dispatch, { method: 'get', url: '/' }, (err, res) => {\n  console.log(res.payload)\n})\n```\nNote how `server.listen` is never called.\n\nAsync await and promises are supported as well!\n```javascript\n// promises\ninject(dispatch, { method: 'get', url: '/' })\n  .then(res => console.log(res.payload))\n  .catch(console.log)\n\n// async-await\ntry {\n  const res = await inject(dispatch, { method: 'get', url: '/' })\n  console.log(res.payload)\n} catch (err) {\n  console.log(err)\n}\n```\n\nYou can also use chaining methods if you do not pass the callback function. Check [here](#method-chaining) for details.\n\n```js\n// chaining methods\ninject(dispatch)\n  .get('/')                   // set the request method to GET, and request URL to '/'\n  .headers({ foo: 'bar' })    // set the request headers\n  .query({ foo: 'bar' })      // set the query parameters\n  .end((err, res) => {\n    console.log(res.payload)\n  })\n\ninject(dispatch)\n  .post('/')                  // set the request method to POST, and request URL to '/'\n  .payload('request payload') // set the request payload\n  .body('request body')       // alias for payload\n  .end((err, res) => {\n    console.log(res.payload)\n  })\n\n// async-await is also supported\ntry {\n  const chain = inject(dispatch).get('/')\n  const res = await chain.end()\n  console.log(res.payload)\n} catch (err) {\n  console.log(err)\n}\n```\n\nFile uploads (`multipart/form-data`) or form submit (`x-www-form-urlencoded`) can be achieved by using [form-auto-content](https://github.com/Eomm/form-auto-content) package as shown below:\n\n```js\nconst formAutoContent = require('form-auto-content')\nconst fs = require('fs')\n\ntry {\n  const form = formAutoContent({\n    myField: 'hello',\n    myFile: fs.createReadStream(`./path/to/file`)\n  })\n\n  const res = await inject(dispatch, {\n    method: 'post',\n    url: '/upload',\n    ...form\n  })\n  console.log(res.payload)\n} catch (err) {\n  console.log(err)\n}\n```\n\nThis module ships with a handwritten TypeScript declaration file for TS support. The declaration exports a single namespace `LightMyRequest`. You can import it one of two ways:\n```typescript\nimport * as LightMyRequest from 'light-my-request'\n\nconst dispatch: LightMyRequest.DispatchFunc = function (req, res) {\n  const reply = 'Hello World'\n  res.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Length': reply.length })\n  res.end(reply)\n}\n\nLightMyRequest.inject(dispatch, { method: 'get', url: '/' }, (err, res) => {\n  console.log(res.payload)\n})\n\n// or\nimport { inject, DistpatchFunc } from 'light-my-request'\n\nconst dispatch: DispatchFunc = function (req, res) {\n  const reply = 'Hello World'\n  res.writeHead(200, { 'Content-Type': 'text/plain', 'Content-Length': reply.length })\n  res.end(reply)\n}\n\ninject(dispatch, { method: 'get', url: '/' }, (err, res) => {\n  console.log(res.payload)\n})\n```\nThe declaration file exports types for the following parts of the API:\n- `inject` - standard light-my-request `inject` method\n- `DispatchFunc` - the fake HTTP dispatch function\n- `InjectPayload` - a union type for valid payload types\n- `isInjection` - standard light-my-request `isInjection` method\n- `InjectOptions` - options object for `inject` method\n- `Request` - custom light-my-request `request` object interface. Extends\n  Node.js `stream.Readable` type by default. This behavior can be changed by\n  setting the `Request` option in the `inject` method's options\n- `Response` - custom light-my-request `response` object interface. Extends Node.js `http.ServerResponse` type\n\n## API\n\n#### `inject(dispatchFunc[, options, callback])`\n\nInjects a fake request into an HTTP server.\n\n- `dispatchFunc` - listener function. The same as you would pass to `Http.createServer` when making a node HTTP server. Has the signature `function (req, res)` where:\n    - `req` - a simulated request object. Inherits from `Stream.Readable` by\n      default. Optionally inherits from another class, set in\n      `options.Request`\n    - `res` - a simulated response object. Inherits from node's `Http.ServerResponse`.\n- `options` - request options object where:\n  - `url` | `path` - a string specifying the request URL.\n  - `method` - a string specifying the HTTP request method, defaulting to `'GET'`.\n  - `authority` - a string specifying the HTTP HOST header value to be used if no header is provided, and the `url`\n    does not include an authority component. Defaults to `'localhost'`.\n  - `headers` - an optional object containing request headers.\n  - `cookies` - an optional object containing key-value pairs that will be encoded and added to `cookie` header. If the header is already set, the data will be appended.\n  - `remoteAddress` - an optional string specifying the client remote address. Defaults to `'127.0.0.1'`.\n  - `payload` - an optional request payload. Can be a string, Buffer, Stream or object. If the payload is string, Buffer or Stream is used as is as the request payload. Oherwise it is serialized with `JSON.stringify` forcing the request to have the `Content-type` equal to `application/json`\n  - `query` - an optional object or string containing query parameters.\n  - `body` - alias for payload.\n  - `simulate` - an object containing flags to simulate various conditions:\n    - `end` - indicates whether the request will fire an `end` event. Defaults to `undefined`, meaning an `end` event will fire.\n    - `split` - indicates whether the request payload will be split into chunks. Defaults to `undefined`, meaning payload will not be chunked.\n    - `error` - whether the request will emit an `error` event. Defaults to `undefined`, meaning no `error` event will be emitted. If set to `true`, the emitted error will have a message of `'Simulated'`.\n    - `close` - whether the request will emit a `close` event. Defaults to `undefined`, meaning no `close` event will be emitted.\n  - `validate` - Optional flag to validate this options object. Defaults to `true`.\n  - `server` - Optional http server. It is used for binding the `dispatchFunc`.\n  - `autoStart` - Automatically start the request as soon as the method\n    is called. It is only valid when not passing a callback. Defaults to `true`.\n  - `signal` - An `AbortSignal` that may be used to abort an ongoing request. Requires Node v16+.\n  - `Request` - Optional type from which the `request` object should inherit\n    instead of `stream.Readable`\n- `callback` - the callback function using the signature `function (err, res)` where:\n  - `err` - error object\n  - `res` - a response object where:\n    - `raw` - an object containing the raw request and response objects where:\n      - `req` - the simulated request object.\n      - `res` - the simulated response object.\n    - `headers` - an object containing the response headers.\n    - `statusCode` - the HTTP status code.\n    - `statusMessage` - the HTTP status message.\n    - `payload` - the payload as a UTF-8 encoded string.\n    - `body` - alias for payload.\n    - `rawPayload` - the raw payload as a Buffer.\n    - `trailers` - an object containing the response trailers.\n    - `json` - a function that parses a json response payload and returns an object.\n    - `cookies` - a getter that parses the `set-cookie` response header and returns an array with all the cookies and their metadata.\n\nNotes:\n\n- You can also pass a string in place of the `options` object as a shorthand\n  for `{url: string, method: 'GET'}`.\n- Beware when using the `Request` option. That might make _light-my-request_\n  slower. Sample benchmark result run on an i5-8600K CPU with `Request` set to\n  `http.IncomingMessage`:\n\n```\nRequest x 155,018 ops/sec ±0.47% (94 runs sampled)\nCustom Request x 30,373 ops/sec ±0.64% (90 runs sampled)\nRequest With Cookies x 125,696 ops/sec ±0.29% (96 runs sampled)\nRequest With Cookies n payload x 114,391 ops/sec ±0.33% (97 runs sampled)\nParseUrl x 255,790 ops/sec ±0.23% (99 runs sampled)\nParseUrl and query x 194,479 ops/sec ±0.16% (99 runs sampled)\n```\n\n#### `inject.isInjection(obj)`\n\nChecks if given object `obj` is a *light-my-request* `Request` object.\n\n#### Method chaining\n\nThere are following methods you can used as chaining:\n- `delete`, `get`, `head`, `options`, `patch`, `post`, `put`, `trace`. They will set the HTTP request method and the request URL.\n- `body`, `headers`, `payload`, `query`, `cookies`. They can be used to set the request options object.\n\nAnd finally you need to call `end`. It has the signature `function (callback)`.\nIf you invoke `end` without a callback function, the method will return a promise, thus you can:\n\n```js\nconst chain = inject(dispatch).get('/')\n\ntry {\n  const res = await chain.end()\n  console.log(res.payload)\n} catch (err) {\n  // handle error\n}\n\n// or\nchain.end()\n  .then(res => {\n    console.log(res.payload)\n  })\n  .catch(err => {\n    // handle error\n  })\n```\n\nBy the way, you can also use promises without calling `end`!\n\n```js\ninject(dispatch)\n  .get('/')\n  .then(res => {\n    console.log(res.payload)\n  })\n  .catch(err => {\n    // handle error\n  })\n```\n\nNote: The application would not respond multiple times. If you try to invoking any method after the application has responded, the application would throw an error.\n\n## Acknowledgements\nThis project has been forked from [`hapi/shot`](https://github.com/hapijs/shot) because we wanted to support *Node ≥ v4* and not only *Node ≥ v8*.\nAll the credits before the commit [00a2a82](https://github.com/fastify/light-my-request/commit/00a2a82eb773b765003b6085788cc3564cd08326) goes to the `hapi/shot` project [contributors](https://github.com/hapijs/shot/graphs/contributors).\nSince the commit [db8bced](https://github.com/fastify/light-my-request/commit/db8bced10b4367731688c8738621d42f39680efc) the project will be maintained by the Fastify team.\n\n## License\n\nLicensed under [BSD-3-Clause](./LICENSE).\n",
    "licenseText": "Copyright (c) 2017 The Fastify Team\nCopyright (c) 2012-2017, Project contributors\nCopyright (c) 2012-2014, Walmart\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * The names of any contributors may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n                                  *   *   *\n\nThe complete list of contributors can be found at:\n- https://github.com/hapijs/shot/graphs/contributors\n- https://github.com/fastify/light-my-request/graphs/contributors\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/light-my-request/-/light-my-request-5.8.0.tgz#93b28615d4cd134b4e2370bcf2ff7e35b51c8d29",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/light-my-request/-/light-my-request-5.8.0.tgz",
    "hash": "93b28615d4cd134b4e2370bcf2ff7e35b51c8d29",
    "integrity": "sha512-4BtD5C+VmyTpzlDPCZbsatZMJVgUIciSOwYhJDCbLffPZ35KoDkDj4zubLeHDEb35b4kkPeEv5imbh+RJxK/Pg==",
    "registry": "npm",
    "packageName": "light-my-request",
    "cacheIntegrity": "sha512-4BtD5C+VmyTpzlDPCZbsatZMJVgUIciSOwYhJDCbLffPZ35KoDkDj4zubLeHDEb35b4kkPeEv5imbh+RJxK/Pg== sha1-k7KGFdTNE0tOI3C88v9+NbUcjSk="
  },
  "registry": "npm",
  "hash": "93b28615d4cd134b4e2370bcf2ff7e35b51c8d29"
}