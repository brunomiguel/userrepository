{
  "manifest": {
    "name": "@electron-forge/cli",
    "version": "6.0.0-beta.66",
    "description": "A complete tool for building modern Electron applications",
    "repository": {
      "type": "git",
      "url": "https://github.com/electron-userland/electron-forge"
    },
    "author": {
      "name": "Samuel Attard"
    },
    "license": "MIT",
    "bin": {
      "electron-forge": "dist/electron-forge.js",
      "electron-forge-vscode-nix": "script/vscode.sh",
      "electron-forge-vscode-win": "script/vscode.cmd"
    },
    "devDependencies": {
      "@malept/cross-spawn-promise": "^2.0.0",
      "chai": "^4.3.3",
      "chai-as-promised": "^7.0.0",
      "mocha": "^9.0.1"
    },
    "dependencies": {
      "@electron-forge/async-ora": "6.0.0-beta.66",
      "@electron-forge/core": "6.0.0-beta.66",
      "@electron-forge/shared-types": "6.0.0-beta.66",
      "@electron/get": "^2.0.0",
      "chalk": "^4.0.0",
      "commander": "^4.1.1",
      "debug": "^4.3.1",
      "fs-extra": "^10.0.0",
      "inquirer": "^8.0.0",
      "semver": "^7.2.1"
    },
    "engines": {
      "node": ">= 14.17.5"
    },
    "funding": [
      {
        "type": "individual",
        "url": "https://github.com/sponsors/malept"
      },
      {
        "type": "tidelift",
        "url": "https://tidelift.com/subscription/pkg/npm-.electron-forge-cli?utm_medium=referral&utm_source=npm_fund"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@electron-forge-cli-6.0.0-beta.66-0f3860c1239a359d315a02b1aa189e429b44ab52-integrity/node_modules/@electron-forge/cli/package.json",
    "readmeFilename": "README.md",
    "readme": "---\ndescription: How to use the command line interface (CLI) for Electron Forge\n---\n\n# CLI\n\n## Installation\n\nElectron forge's command line interface \\(CLI\\) is separate from the core module. To use it you will have to install the `@electron-forge/cli` module from NPM into your project.\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```bash\nyarn add --dev @electron-forge/cli\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\nnpm install --save-dev @electron-forge/cli\n```\n{% endtab %}\n{% endtabs %}\n\n## Overview\n\nAt a high level the CLI module is just a proxy to the raw [API](https://js.electronforge.io/classes/_electron_forge_core.ForgeAPI.html) commands.  Almost all the configuration is still done in your [Forge configuration](configuration.md), the CLI just provides a handy way to trigger all the core functionality of Electron Forge.\n\n## Commands\n\n\n--------\n\nℹ️ These commands are sorted in alphabetical order. The most commonly used are [start](cli.md#start), [package](cli.md#package), [make](cli.md#make), and [publish](cli.md#publish). \n\n--------\n\n### Import\n\nMaps to `electronForge.import`. It will attempt to take an existing Electron app and make it Forge compatible. Normally this just creates a base Electron Forge configuration and adds the required dependencies.\n\n> There are no flags for the Import command\n\n### Init\n\nMaps to `electronForge.init`, will initialize a new Forge powered application in the given directory \\(defaults to `.`, the current directory\\).\n\nPlease note if you want to use a non-built-in template, it must be installed globally before running the `init` command.\n\n| Flag | Value | Required | Description |\n| :--- | :--- | :--- | :--- |\n| `--template` | Template Name | No | Name of the template to use to make this new app |\n| `--copy-ci-files` | N/A | No | Set if you want to copy templated CI files for Travis CI and Appveyor |\n\nExample:\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```bash\nyarn electron-forge init --template=webpack\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\nnpx electron-forge init --template=webpack\n```\n{% endtab %}\n{% endtabs %}\n\n### Install\n\nMaps to `electronForge.install`, will attempt to install the Electron app that is published at the given GitHub repository. This command is just a helper for installing other applications quickly.  For example:\n\n```bash\nnpx electron-forge install atom/atom\n```\n\n### Lint\n\nMaps to `electronForge.lint`, will run the `lint` command that your `package.json` exposes. If the exit code is `0`, no output is shown, otherwise the error output will be displayed.\n\n> There are no flags for the Lint command\n\n### Make\n\nMaps to `electronForge.make`, will make distributables for your application based on your Forge config and the parameters you pass in.\n\n| Flag | Value | Required | Description |\n| :--- | :--- | :--- | :--- |\n| `--arch` | Architecture, e.g. `x64` | No | Target architecture to make for. Defaults to the arch that you're running on \\(the \"host\" arch\\). |\n| `--platform` | Platform, e.g. `mas` | No | Target platform to make for, please note you normally can only target platform X from platform X. This defaults to the platform you're running on \\(the \"host\" platform\\). |\n| `--targets` | Comma separated list of maker names | No | Override your make targets for this run. The maker name is the full node module name, e.g. `@electron-forge/maker-deb`. By default, the make targets used are the ones available and configured for the given platform. |\n| `--skip-package` | N/A | No | Set if you want to skip the packaging step, useful if you are running sequential makes and want to save time. By default, packaging is **not** skipped. |\n\nExample:\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```bash\n# By default, the make command corresponds to a make npm script:\nyarn make --arch=ia32\n# If there is no make script:\nyarn electron-forge make --arch=ia32\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\n# By default, the make command corresponds to a make npm script:\nnpm run make -- --arch=ia32\n# If there is no make script:\nnpx electron-forge make --arch=ia32\n```\n{% endtab %}\n{% endtabs %}\n\n### Package\n\nMaps to `electronForge.package`, will package your application into a platform specific format and put the result in a folder. Please note that this does not make a distributable format. To make proper distributables, please use the [make](cli.md#make) command.\n\n| Flag | Value | Required | Description |\n| :--- | :--- | :--- | :--- |\n| `--arch` | Architecture, e.g. `x64` | No | Target architecture to package for. Defaults to the host arch. |\n| `--platform` | Platform, e.g. `mas` | No | Target platform to package for. Defaults to the host platform. |\n\nExample:\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```bash\n# By default, the package command corresponds to a package npm script:\nyarn package --arch=ia32\n# If there is no make script:\nyarn electron-forge package --arch=ia32\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\n# By default, the package command corresponds to a package npm script:\nnpm run package -- --arch=ia32\n# If there is no make script:\nnpx electron-forge package --arch=ia32\n```\n{% endtab %}\n{% endtabs %}\n\n### Publish\n\nMaps to `electronForge.publish`, will attempt to make the forge application and then publish it to the publish targets defined in your forge config.\n\nIf you want to publish previously created `make` artifacts you will have to use the `dry-run` options explained below.\n\n| Flag | Value | Required | Description |\n| :--- | :--- | :--- | :--- |\n| `--target` | Comma separated list of publisher names | No | Override your publish targets for this run |\n| `--dry-run` | N/A | No | Triggers a publish dry run which saves state and doesn't upload anything |\n| `--from-dry-run` | N/A | No | Attempts to publish artifacts from any dry runs saved on disk |\n\nExample:\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```bash\n# By default, the package command corresponds to a package npm script:\nyarn run publish --from-dry-run\n# If there is no make script:\nyarn electron-forge publish --from-dry-run\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\n# By default, the package command corresponds to a package npm script:\nnpm run publish -- --from-dry-run\n# If there is no make script:\nnpx electron-forge package --arch=ia32\n```\n{% endtab %}\n{% endtabs %}\n\n### Start\n\nMaps to `electronForge.start`, will launch the Forge powered application in the given directory \\(defaults to `.`\\).\n\nIf you type `rs` \\(and hit enter\\) in the same terminal where you ran the start command, the running app will be terminated and restarted.\n\n| Flag | Value | Required | Description |\n| :--- | :--- | :--- | :--- |\n| `--app-path` | Path to your app from CWD | No | Override the path to the Electron app to launch \\(defaults to `.`\\) |\n| `--enable-logging` | N/A | No | Enable advanced logging. This will log internal Electron things |\n| `--run-as-node` | N/A | No | Run the Electron app as a Node.JS script |\n| `--inspect-electron` | N/A | No | Triggers inspect mode on Electron to allow debugging the main process |\n| `--` | extra arguments | No | Any additional arguments to pass to Electron or the app itself. For example: `-- --my-app-argument` |\n\nExample:\n\n{% tabs %}\n{% tab title=\"Yarn\" %}\n```\nyarn start --enable-logging\n```\n{% endtab %}\n\n{% tab title=\"NPM\" %}\n```bash\nnpm start -- --enable-logging\n```\n{% endtab %}\n{% endtabs %}\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@electron-forge/cli/-/cli-6.0.0-beta.66.tgz#0f3860c1239a359d315a02b1aa189e429b44ab52",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@electron-forge/cli/-/cli-6.0.0-beta.66.tgz",
    "hash": "0f3860c1239a359d315a02b1aa189e429b44ab52",
    "integrity": "sha512-oCl8SjPSEq6WAeXvXsG4OSNQut2TqX0KSsRqcP3wOTrj+ygqsf0LVP9b0IDLh8PnOIZSnOm/kh114Sx/3WXoWA==",
    "registry": "npm",
    "packageName": "@electron-forge/cli",
    "cacheIntegrity": "sha512-oCl8SjPSEq6WAeXvXsG4OSNQut2TqX0KSsRqcP3wOTrj+ygqsf0LVP9b0IDLh8PnOIZSnOm/kh114Sx/3WXoWA== sha1-DzhgwSOaNZ0xWgKxqhieQptEq1I="
  },
  "registry": "npm",
  "hash": "0f3860c1239a359d315a02b1aa189e429b44ab52"
}