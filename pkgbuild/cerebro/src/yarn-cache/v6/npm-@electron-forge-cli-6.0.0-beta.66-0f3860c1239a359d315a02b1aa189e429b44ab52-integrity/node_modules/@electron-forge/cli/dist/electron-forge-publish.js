"use strict";
var _core = require("@electron-forge/core");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _get = require("@electron/get");
var _commander = _interopRequireDefault(require("commander"));
var _path = _interopRequireDefault(require("path"));
require("./util/terminate");
var _workingDir = _interopRequireDefault(require("./util/working-dir"));
var _electronForgeMake = require("./electron-forge-make");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
(async ()=>{
    let dir = process.cwd();
    _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--target [target[,target...]]', 'The comma-separated deployment targets, defaults to "github"').option('--dry-run', "Triggers a publish dry run which saves state and doesn't upload anything").option('--from-dry-run', 'Attempts to publish artifacts from the last saved dry run').allowUnknownOption(true).action((cwd)=>{
        dir = (0, _workingDir).default(dir, cwd);
    }).parse(process.argv);
    (0, _get).initializeProxy();
    const publishOpts = {
        dir,
        interactive: true,
        dryRun: _commander.default.dryRun,
        dryRunResume: _commander.default.fromDryRun
    };
    if (_commander.default.target) publishOpts.publishTargets = _commander.default.target.split(',');
    publishOpts.makeOptions = await (0, _electronForgeMake).getMakeOptions();
    await _core.api.publish(publishOpts);
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1wdWJsaXNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSwgUHVibGlzaE9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvY29yZSc7XG5cbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBpbml0aWFsaXplUHJveHkgfSBmcm9tICdAZWxlY3Ryb24vZ2V0JztcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcbmltcG9ydCB3b3JraW5nRGlyIGZyb20gJy4vdXRpbC93b3JraW5nLWRpcic7XG5pbXBvcnQgeyBnZXRNYWtlT3B0aW9ucyB9IGZyb20gJy4vZWxlY3Ryb24tZm9yZ2UtbWFrZSc7XG5cbihhc3luYyAoKSA9PiB7XG4gIGxldCBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuICBwcm9ncmFtXG4gICAgLnZlcnNpb24oKGF3YWl0IGZzLnJlYWRKc29uKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9wYWNrYWdlLmpzb24nKSkpLnZlcnNpb24pXG4gICAgLmFyZ3VtZW50cygnW2N3ZF0nKVxuICAgIC5vcHRpb24oJy0tdGFyZ2V0IFt0YXJnZXRbLHRhcmdldC4uLl1dJywgJ1RoZSBjb21tYS1zZXBhcmF0ZWQgZGVwbG95bWVudCB0YXJnZXRzLCBkZWZhdWx0cyB0byBcImdpdGh1YlwiJylcbiAgICAub3B0aW9uKCctLWRyeS1ydW4nLCBcIlRyaWdnZXJzIGEgcHVibGlzaCBkcnkgcnVuIHdoaWNoIHNhdmVzIHN0YXRlIGFuZCBkb2Vzbid0IHVwbG9hZCBhbnl0aGluZ1wiKVxuICAgIC5vcHRpb24oJy0tZnJvbS1kcnktcnVuJywgJ0F0dGVtcHRzIHRvIHB1Ymxpc2ggYXJ0aWZhY3RzIGZyb20gdGhlIGxhc3Qgc2F2ZWQgZHJ5IHJ1bicpXG4gICAgLmFsbG93VW5rbm93bk9wdGlvbih0cnVlKVxuICAgIC5hY3Rpb24oKGN3ZCkgPT4ge1xuICAgICAgZGlyID0gd29ya2luZ0RpcihkaXIsIGN3ZCk7XG4gICAgfSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICBpbml0aWFsaXplUHJveHkoKTtcblxuICBjb25zdCBwdWJsaXNoT3B0czogUHVibGlzaE9wdGlvbnMgPSB7XG4gICAgZGlyLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIGRyeVJ1bjogcHJvZ3JhbS5kcnlSdW4sXG4gICAgZHJ5UnVuUmVzdW1lOiBwcm9ncmFtLmZyb21EcnlSdW4sXG4gIH07XG4gIGlmIChwcm9ncmFtLnRhcmdldCkgcHVibGlzaE9wdHMucHVibGlzaFRhcmdldHMgPSBwcm9ncmFtLnRhcmdldC5zcGxpdCgnLCcpO1xuXG4gIHB1Ymxpc2hPcHRzLm1ha2VPcHRpb25zID0gYXdhaXQgZ2V0TWFrZU9wdGlvbnMoKTtcblxuICBhd2FpdCBhcGkucHVibGlzaChwdWJsaXNoT3B0cyk7XG59KSgpO1xuIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsImZzIiwicmVhZEpzb24iLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFsbG93VW5rbm93bk9wdGlvbiIsImFjdGlvbiIsIndvcmtpbmdEaXIiLCJwYXJzZSIsImFyZ3YiLCJpbml0aWFsaXplUHJveHkiLCJwdWJsaXNoT3B0cyIsImludGVyYWN0aXZlIiwiZHJ5UnVuIiwiZHJ5UnVuUmVzdW1lIiwiZnJvbURyeVJ1biIsInRhcmdldCIsInB1Ymxpc2hUYXJnZXRzIiwic3BsaXQiLCJtYWtlT3B0aW9ucyIsImdldE1ha2VPcHRpb25zIiwiYXBpIiwicHVibGlzaCJdLCJtYXBwaW5ncyI6IjtBQUFvQyxHQUFzQixDQUF0QixLQUFzQjtBQUUzQyxHQUFVLENBQVYsUUFBVTtBQUNPLEdBQWUsQ0FBZixJQUFlO0FBQzNCLEdBQVcsQ0FBWCxVQUFXO0FBQ2QsR0FBTSxDQUFOLEtBQU07O0FBR0EsR0FBb0IsQ0FBcEIsV0FBb0I7QUFDWixHQUF1QixDQUF2QixrQkFBdUI7Ozs7OztXQUV6QyxDQUFDO0lBQ1osR0FBRyxDQUFDQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRztJQUNyQkMsVUFBTyxTQUNKQyxPQUFPLEVBQUUsS0FBSyxDQUFDQyxRQUFFLFNBQUNDLFFBQVEsQ0FBQ0MsS0FBSSxTQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxDQUFpQixvQkFBSUwsT0FBTyxFQUMvRU0sU0FBUyxDQUFDLENBQU8sUUFDakJDLE1BQU0sQ0FBQyxDQUErQixnQ0FBRSxDQUE4RCwrREFDdEdBLE1BQU0sQ0FBQyxDQUFXLFlBQUUsQ0FBMEUsMkVBQzlGQSxNQUFNLENBQUMsQ0FBZ0IsaUJBQUUsQ0FBMkQsNERBQ3BGQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQ3ZCQyxNQUFNLEVBQUVYLEdBQUcsR0FBSyxDQUFDO1FBQ2hCRixHQUFHLE9BQUdjLFdBQVUsVUFBQ2QsR0FBRyxFQUFFRSxHQUFHO0lBQzNCLENBQUMsRUFDQWEsS0FBSyxDQUFDZCxPQUFPLENBQUNlLElBQUk7UUFFckJDLElBQWU7SUFFZixLQUFLLENBQUNDLFdBQVcsR0FBbUIsQ0FBQztRQUNuQ2xCLEdBQUc7UUFDSG1CLFdBQVcsRUFBRSxJQUFJO1FBQ2pCQyxNQUFNLEVBQUVqQixVQUFPLFNBQUNpQixNQUFNO1FBQ3RCQyxZQUFZLEVBQUVsQixVQUFPLFNBQUNtQixVQUFVO0lBQ2xDLENBQUM7SUFDRCxFQUFFLEVBQUVuQixVQUFPLFNBQUNvQixNQUFNLEVBQUVMLFdBQVcsQ0FBQ00sY0FBYyxHQUFHckIsVUFBTyxTQUFDb0IsTUFBTSxDQUFDRSxLQUFLLENBQUMsQ0FBRztJQUV6RVAsV0FBVyxDQUFDUSxXQUFXLEdBQUcsS0FBSyxLQUFDQyxrQkFBYztJQUU5QyxLQUFLLENBQUNDLEtBQUcsS0FBQ0MsT0FBTyxDQUFDWCxXQUFXO0FBQy9CLENBQUMifQ==