"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getMakeOptions = getMakeOptions;
var _core = require("@electron-forge/core");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _get = require("@electron/get");
var _commander = _interopRequireDefault(require("commander"));
var _path = _interopRequireDefault(require("path"));
require("./util/terminate");
var _workingDir = _interopRequireDefault(require("./util/working-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function getMakeOptions() {
    let dir = process.cwd();
    _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action((cwd)=>{
        dir = (0, _workingDir).default(dir, cwd);
    }).parse(process.argv);
    const makeOpts = {
        dir,
        interactive: true,
        skipPackage: _commander.default.skipPackage
    };
    if (_commander.default.targets) makeOpts.overrideTargets = _commander.default.targets.split(',');
    if (_commander.default.arch) makeOpts.arch = _commander.default.arch;
    if (_commander.default.platform) makeOpts.platform = _commander.default.platform;
    return makeOpts;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any, no-underscore-dangle
if (require.main === module || global.__LINKED_FORGE__) {
    (async ()=>{
        const makeOpts = await getMakeOptions();
        (0, _get).initializeProxy();
        await _core.api.make(makeOpts);
    })();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1tYWtlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSwgTWFrZU9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvY29yZSc7XG5cbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBpbml0aWFsaXplUHJveHkgfSBmcm9tICdAZWxlY3Ryb24vZ2V0JztcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcbmltcG9ydCB3b3JraW5nRGlyIGZyb20gJy4vdXRpbC93b3JraW5nLWRpcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFrZU9wdGlvbnMoKTogUHJvbWlzZTxNYWtlT3B0aW9ucz4ge1xuICBsZXQgZGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgcHJvZ3JhbVxuICAgIC52ZXJzaW9uKChhd2FpdCBmcy5yZWFkSnNvbihwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vcGFja2FnZS5qc29uJykpKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tjd2RdJylcbiAgICAub3B0aW9uKCctLXNraXAtcGFja2FnZScsICdBc3N1bWUgdGhlIGFwcCBpcyBhbHJlYWR5IHBhY2thZ2VkJylcbiAgICAub3B0aW9uKCctYSwgLS1hcmNoIFthcmNoXScsICdUYXJnZXQgYXJjaGl0ZWN0dXJlJylcbiAgICAub3B0aW9uKCctcCwgLS1wbGF0Zm9ybSBbcGxhdGZvcm1dJywgJ1RhcmdldCBidWlsZCBwbGF0Zm9ybScpXG4gICAgLm9wdGlvbignLS10YXJnZXRzIFt0YXJnZXRzXScsICdPdmVycmlkZSB5b3VyIG1ha2UgdGFyZ2V0cyBmb3IgdGhpcyBydW4nKVxuICAgIC5hbGxvd1Vua25vd25PcHRpb24odHJ1ZSlcbiAgICAuYWN0aW9uKChjd2QpID0+IHtcbiAgICAgIGRpciA9IHdvcmtpbmdEaXIoZGlyLCBjd2QpO1xuICAgIH0pXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbiAgY29uc3QgbWFrZU9wdHM6IE1ha2VPcHRpb25zID0ge1xuICAgIGRpcixcbiAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICBza2lwUGFja2FnZTogcHJvZ3JhbS5za2lwUGFja2FnZSxcbiAgfTtcbiAgaWYgKHByb2dyYW0udGFyZ2V0cykgbWFrZU9wdHMub3ZlcnJpZGVUYXJnZXRzID0gcHJvZ3JhbS50YXJnZXRzLnNwbGl0KCcsJyk7XG4gIGlmIChwcm9ncmFtLmFyY2gpIG1ha2VPcHRzLmFyY2ggPSBwcm9ncmFtLmFyY2g7XG4gIGlmIChwcm9ncmFtLnBsYXRmb3JtKSBtYWtlT3B0cy5wbGF0Zm9ybSA9IHByb2dyYW0ucGxhdGZvcm07XG5cbiAgcmV0dXJuIG1ha2VPcHRzO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgbm8tdW5kZXJzY29yZS1kYW5nbGVcbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSB8fCAoZ2xvYmFsIGFzIGFueSkuX19MSU5LRURfRk9SR0VfXykge1xuICAoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1ha2VPcHRzID0gYXdhaXQgZ2V0TWFrZU9wdGlvbnMoKTtcblxuICAgIGluaXRpYWxpemVQcm94eSgpO1xuXG4gICAgYXdhaXQgYXBpLm1ha2UobWFrZU9wdHMpO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbImdldE1ha2VPcHRpb25zIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsInByb2dyYW0iLCJ2ZXJzaW9uIiwiZnMiLCJyZWFkSnNvbiIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiYXJndW1lbnRzIiwib3B0aW9uIiwiYWxsb3dVbmtub3duT3B0aW9uIiwiYWN0aW9uIiwid29ya2luZ0RpciIsInBhcnNlIiwiYXJndiIsIm1ha2VPcHRzIiwiaW50ZXJhY3RpdmUiLCJza2lwUGFja2FnZSIsInRhcmdldHMiLCJvdmVycmlkZVRhcmdldHMiLCJzcGxpdCIsImFyY2giLCJwbGF0Zm9ybSIsInJlcXVpcmUiLCJtYWluIiwibW9kdWxlIiwiZ2xvYmFsIiwiX19MSU5LRURfRk9SR0VfXyIsImluaXRpYWxpemVQcm94eSIsImFwaSIsIm1ha2UiXSwibWFwcGluZ3MiOiI7Ozs7UUFXc0JBLGNBQWMsR0FBZEEsY0FBYztBQVhILEdBQXNCLENBQXRCLEtBQXNCO0FBRXhDLEdBQVUsQ0FBVixRQUFVO0FBQ08sR0FBZSxDQUFmLElBQWU7QUFDM0IsR0FBVyxDQUFYLFVBQVc7QUFDZCxHQUFNLENBQU4sS0FBTTs7QUFHQSxHQUFvQixDQUFwQixXQUFvQjs7Ozs7O2VBR3JCQSxjQUFjLEdBQXlCLENBQUM7SUFDNUQsR0FBRyxDQUFDQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRztJQUNyQkMsVUFBTyxTQUNKQyxPQUFPLEVBQUUsS0FBSyxDQUFDQyxRQUFFLFNBQUNDLFFBQVEsQ0FBQ0MsS0FBSSxTQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxDQUFpQixvQkFBSUwsT0FBTyxFQUMvRU0sU0FBUyxDQUFDLENBQU8sUUFDakJDLE1BQU0sQ0FBQyxDQUFnQixpQkFBRSxDQUFvQyxxQ0FDN0RBLE1BQU0sQ0FBQyxDQUFtQixvQkFBRSxDQUFxQixzQkFDakRBLE1BQU0sQ0FBQyxDQUEyQiw0QkFBRSxDQUF1Qix3QkFDM0RBLE1BQU0sQ0FBQyxDQUFxQixzQkFBRSxDQUF5QywwQ0FDdkVDLGtCQUFrQixDQUFDLElBQUksRUFDdkJDLE1BQU0sRUFBRVgsR0FBRyxHQUFLLENBQUM7UUFDaEJGLEdBQUcsT0FBR2MsV0FBVSxVQUFDZCxHQUFHLEVBQUVFLEdBQUc7SUFDM0IsQ0FBQyxFQUNBYSxLQUFLLENBQUNkLE9BQU8sQ0FBQ2UsSUFBSTtJQUVyQixLQUFLLENBQUNDLFFBQVEsR0FBZ0IsQ0FBQztRQUM3QmpCLEdBQUc7UUFDSGtCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCQyxXQUFXLEVBQUVoQixVQUFPLFNBQUNnQixXQUFXO0lBQ2xDLENBQUM7SUFDRCxFQUFFLEVBQUVoQixVQUFPLFNBQUNpQixPQUFPLEVBQUVILFFBQVEsQ0FBQ0ksZUFBZSxHQUFHbEIsVUFBTyxTQUFDaUIsT0FBTyxDQUFDRSxLQUFLLENBQUMsQ0FBRztJQUN6RSxFQUFFLEVBQUVuQixVQUFPLFNBQUNvQixJQUFJLEVBQUVOLFFBQVEsQ0FBQ00sSUFBSSxHQUFHcEIsVUFBTyxTQUFDb0IsSUFBSTtJQUM5QyxFQUFFLEVBQUVwQixVQUFPLFNBQUNxQixRQUFRLEVBQUVQLFFBQVEsQ0FBQ08sUUFBUSxHQUFHckIsVUFBTyxTQUFDcUIsUUFBUTtJQUUxRCxNQUFNLENBQUNQLFFBQVE7QUFDakIsQ0FBQztBQUVELEVBQW9GLEFBQXBGLGtGQUFvRjtBQUNwRixFQUFFLEVBQUVRLE9BQU8sQ0FBQ0MsSUFBSSxLQUFLQyxNQUFNLElBQUtDLE1BQU0sQ0FBU0MsZ0JBQWdCLEVBQUUsQ0FBQztlQUNuRCxDQUFDO1FBQ1osS0FBSyxDQUFDWixRQUFRLEdBQUcsS0FBSyxDQUFDbEIsY0FBYztZQUVyQytCLElBQWU7UUFFZixLQUFLLENBQUNDLEtBQUcsS0FBQ0MsSUFBSSxDQUFDZixRQUFRO0lBQ3pCLENBQUM7QUFDSCxDQUFDIn0=