"use strict";
var _core = require("@electron-forge/core");
var _chalk = _interopRequireDefault(require("chalk"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _inquirer = _interopRequireDefault(require("inquirer"));
var _commander = _interopRequireDefault(require("commander"));
var _path = _interopRequireDefault(require("path"));
require("./util/terminate");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
(async ()=>{
    let repo;
    _commander.default.version((await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../package.json'))).version).arguments('[repository]').option('--prerelease', 'Fetch prerelease versions').action((repository)=>{
        repo = repository;
    }).parse(process.argv);
    const chooseAsset = async (assets)=>{
        const choices = [];
        assets.forEach((asset)=>{
            choices.push({
                name: asset.name,
                value: asset.id
            });
        });
        const { assetID  } = await _inquirer.default.createPromptModule()({
            choices,
            type: 'list',
            name: 'assetID',
            message: _chalk.default.cyan('Multiple potential assets found, please choose one from the list below:')
        });
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return assets.find((asset)=>asset.id === assetID
        );
    };
    await _core.api.install({
        chooseAsset,
        repo,
        interactive: true,
        prerelease: _commander.default.prerelease
    });
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1pbnN0YWxsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSwgSW5zdGFsbEFzc2V0IH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBpbnF1aXJlciBmcm9tICdpbnF1aXJlcic7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5cbihhc3luYyAoKSA9PiB7XG4gIGxldCByZXBvITogc3RyaW5nO1xuXG4gIHByb2dyYW1cbiAgICAudmVyc2lvbigoYXdhaXQgZnMucmVhZEpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKSkudmVyc2lvbilcbiAgICAuYXJndW1lbnRzKCdbcmVwb3NpdG9yeV0nKVxuICAgIC5vcHRpb24oJy0tcHJlcmVsZWFzZScsICdGZXRjaCBwcmVyZWxlYXNlIHZlcnNpb25zJylcbiAgICAuYWN0aW9uKChyZXBvc2l0b3J5KSA9PiB7XG4gICAgICByZXBvID0gcmVwb3NpdG9yeTtcbiAgICB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IGNob29zZUFzc2V0ID0gYXN5bmMgKGFzc2V0czogSW5zdGFsbEFzc2V0W10pID0+IHtcbiAgICBjb25zdCBjaG9pY2VzOiB7IG5hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W10gPSBbXTtcbiAgICBhc3NldHMuZm9yRWFjaCgoYXNzZXQpID0+IHtcbiAgICAgIGNob2ljZXMucHVzaCh7IG5hbWU6IGFzc2V0Lm5hbWUsIHZhbHVlOiBhc3NldC5pZCB9KTtcbiAgICB9KTtcbiAgICBjb25zdCB7IGFzc2V0SUQgfSA9IGF3YWl0IGlucXVpcmVyLmNyZWF0ZVByb21wdE1vZHVsZSgpPHsgYXNzZXRJRDogc3RyaW5nIH0+KHtcbiAgICAgIGNob2ljZXMsXG4gICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICBuYW1lOiAnYXNzZXRJRCcsXG4gICAgICBtZXNzYWdlOiBjaGFsay5jeWFuKCdNdWx0aXBsZSBwb3RlbnRpYWwgYXNzZXRzIGZvdW5kLCBwbGVhc2UgY2hvb3NlIG9uZSBmcm9tIHRoZSBsaXN0IGJlbG93OicpLFxuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICByZXR1cm4gYXNzZXRzLmZpbmQoKGFzc2V0KSA9PiBhc3NldC5pZCA9PT0gYXNzZXRJRCkhO1xuICB9O1xuXG4gIGF3YWl0IGFwaS5pbnN0YWxsKHtcbiAgICBjaG9vc2VBc3NldCxcbiAgICByZXBvLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIHByZXJlbGVhc2U6IHByb2dyYW0ucHJlcmVsZWFzZSxcbiAgfSk7XG59KSgpO1xuIl0sIm5hbWVzIjpbInJlcG8iLCJwcm9ncmFtIiwidmVyc2lvbiIsImZzIiwicmVhZEpzb24iLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFjdGlvbiIsInJlcG9zaXRvcnkiLCJwYXJzZSIsInByb2Nlc3MiLCJhcmd2IiwiY2hvb3NlQXNzZXQiLCJhc3NldHMiLCJjaG9pY2VzIiwiZm9yRWFjaCIsImFzc2V0IiwicHVzaCIsIm5hbWUiLCJ2YWx1ZSIsImlkIiwiYXNzZXRJRCIsImlucXVpcmVyIiwiY3JlYXRlUHJvbXB0TW9kdWxlIiwidHlwZSIsIm1lc3NhZ2UiLCJjaGFsayIsImN5YW4iLCJmaW5kIiwiYXBpIiwiaW5zdGFsbCIsImludGVyYWN0aXZlIiwicHJlcmVsZWFzZSJdLCJtYXBwaW5ncyI6IjtBQUFrQyxHQUFzQixDQUF0QixLQUFzQjtBQUV0QyxHQUFPLENBQVAsTUFBTztBQUNWLEdBQVUsQ0FBVixRQUFVO0FBQ0osR0FBVSxDQUFWLFNBQVU7QUFDWCxHQUFXLENBQVgsVUFBVztBQUNkLEdBQU0sQ0FBTixLQUFNOzs7Ozs7O1dBSVYsQ0FBQztJQUNaLEdBQUcsQ0FBQ0EsSUFBSTtJQUVSQyxVQUFPLFNBQ0pDLE9BQU8sRUFBRSxLQUFLLENBQUNDLFFBQUUsU0FBQ0MsUUFBUSxDQUFDQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFLENBQWlCLG9CQUFJTCxPQUFPLEVBQy9FTSxTQUFTLENBQUMsQ0FBYyxlQUN4QkMsTUFBTSxDQUFDLENBQWMsZUFBRSxDQUEyQiw0QkFDbERDLE1BQU0sRUFBRUMsVUFBVSxHQUFLLENBQUM7UUFDdkJYLElBQUksR0FBR1csVUFBVTtJQUNuQixDQUFDLEVBQ0FDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJO0lBRXJCLEtBQUssQ0FBQ0MsV0FBVyxVQUFVQyxNQUFzQixHQUFLLENBQUM7UUFDckQsS0FBSyxDQUFDQyxPQUFPLEdBQXNDLENBQUMsQ0FBQztRQUNyREQsTUFBTSxDQUFDRSxPQUFPLEVBQUVDLEtBQUssR0FBSyxDQUFDO1lBQ3pCRixPQUFPLENBQUNHLElBQUksQ0FBQyxDQUFDO2dCQUFDQyxJQUFJLEVBQUVGLEtBQUssQ0FBQ0UsSUFBSTtnQkFBRUMsS0FBSyxFQUFFSCxLQUFLLENBQUNJLEVBQUU7WUFBQyxDQUFDO1FBQ3BELENBQUM7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDQyxPQUFPLEVBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQ0MsU0FBUSxTQUFDQyxrQkFBa0IsR0FBd0IsQ0FBQztZQUM1RVQsT0FBTztZQUNQVSxJQUFJLEVBQUUsQ0FBTTtZQUNaTixJQUFJLEVBQUUsQ0FBUztZQUNmTyxPQUFPLEVBQUVDLE1BQUssU0FBQ0MsSUFBSSxDQUFDLENBQXlFO1FBQy9GLENBQUM7UUFFRCxFQUFvRSxBQUFwRSxrRUFBb0U7UUFDcEUsTUFBTSxDQUFDZCxNQUFNLENBQUNlLElBQUksRUFBRVosS0FBSyxHQUFLQSxLQUFLLENBQUNJLEVBQUUsS0FBS0MsT0FBTzs7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQ1EsS0FBRyxLQUFDQyxPQUFPLENBQUMsQ0FBQztRQUNqQmxCLFdBQVc7UUFDWGYsSUFBSTtRQUNKa0MsV0FBVyxFQUFFLElBQUk7UUFDakJDLFVBQVUsRUFBRWxDLFVBQU8sU0FBQ2tDLFVBQVU7SUFDaEMsQ0FBQztBQUNILENBQUMifQ==