"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = checkSystem;
exports.validPackageManagerVersion = validPackageManagerVersion;
var _childProcess = require("child_process");
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _semver = _interopRequireDefault(require("semver"));
var _core = require("@electron-forge/core");
async function checkSystem(ora) {
    if (!await _fsExtra.default.pathExists(SKIP_SYSTEM_CHECK)) {
        d('checking system, create ~/.skip-forge-system-check to stop doing this');
        return (await Promise.all([
            checkGitExists(),
            checkNodeVersion(ora),
            checkPackageManagerVersion(ora)
        ])).every((check)=>check
        );
    }
    d('skipping system check');
    return true;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:check-system');
async function checkGitExists() {
    return new Promise((resolve)=>{
        (0, _childProcess).exec('git --version', (err)=>resolve(!err)
        );
    });
}
async function checkNodeVersion(ora) {
    const { engines  } = await _fsExtra.default.readJson(_path.default.resolve(__dirname, '..', '..', 'package.json'));
    const versionSatisified = _semver.default.satisfies(process.versions.node, engines.node);
    if (!versionSatisified) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        ora.warn(`You are running Node.js version ${process.versions.node}, but Electron Forge requires Node.js ${engines.node}.`);
    }
    return versionSatisified;
}
const NPM_WHITELISTED_VERSIONS = {
    all: '^3.0.0 || ^4.0.0 || ~5.1.0 || ~5.2.0 || >= 5.4.2',
    darwin: '>= 5.4.0',
    linux: '>= 5.4.0'
};
const YARN_WHITELISTED_VERSIONS = {
    all: '0.23.3 || 0.24.6 || >= 1.0.0',
    darwin: '0.27.5',
    linux: '0.27.5'
};
function validPackageManagerVersion(packageManager, version, whitelistedVersions, ora) {
    try {
        return _semver.default.satisfies(version, whitelistedVersions);
    } catch (e) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        ora.warn(`Could not check ${packageManager} version "${version}", assuming incompatible`);
        d(`Exception while checking version: ${e}`);
        return false;
    }
}
function warnIfPackageManagerIsntAKnownGoodVersion(packageManager, version, whitelistedVersions, ora) {
    const osVersions = whitelistedVersions[process.platform];
    const versions = osVersions ? `${whitelistedVersions.all} || ${osVersions}` : whitelistedVersions.all;
    const versionString = version.toString();
    if (!validPackageManagerVersion(packageManager, versionString, versions, ora)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        ora.warn(`You are using ${packageManager}, but not a known good version.
The known versions that work with Electron Forge are: ${versions}`);
    }
}
async function checkPackageManagerVersion(ora) {
    const version = await _core.utils.yarnOrNpmSpawn([
        '--version'
    ]);
    const versionString = version.toString();
    if (_core.utils.hasYarn()) {
        warnIfPackageManagerIsntAKnownGoodVersion('Yarn', versionString, YARN_WHITELISTED_VERSIONS, ora);
    } else {
        warnIfPackageManagerIsntAKnownGoodVersion('NPM', versionString, NPM_WHITELISTED_VERSIONS, ora);
    }
    return true;
}
/**
 * Some people know their system is OK and don't appreciate the 800ms lag in
 * start up that these checks (in particular the package manager check) costs.
 *
 * Simply creating this flag file in your home directory will skip these checks
 * and shave ~800ms off your forge start time.
 *
 * This is specifically not documented or everyone would make it.
 */ const SKIP_SYSTEM_CHECK = _path.default.resolve(_os.default.homedir(), '.skip-forge-system-check');

//# sourceMappingURL=data:application/json;base64,