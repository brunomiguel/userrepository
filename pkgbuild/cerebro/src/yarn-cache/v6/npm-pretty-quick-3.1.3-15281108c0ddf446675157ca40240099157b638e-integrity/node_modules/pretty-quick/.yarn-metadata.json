{
  "manifest": {
    "name": "pretty-quick",
    "version": "3.1.3",
    "description": "Get Pretty Quick",
    "repository": {
      "type": "git",
      "url": "https://github.com/azz/pretty-quick.git"
    },
    "author": {
      "name": "Lucas Azzola",
      "email": "@azz"
    },
    "main": "./dist",
    "bin": {
      "pretty-quick": "bin/pretty-quick.js"
    },
    "license": "MIT",
    "engines": {
      "node": ">=10.13"
    },
    "keywords": [
      "git",
      "mercurial",
      "hg",
      "prettier",
      "pretty-quick",
      "formatting",
      "code",
      "vcs",
      "precommit"
    ],
    "files": [
      "bin",
      "dist",
      "img"
    ],
    "dependencies": {
      "chalk": "^3.0.0",
      "execa": "^4.0.0",
      "find-up": "^4.1.0",
      "ignore": "^5.1.4",
      "mri": "^1.1.5",
      "multimatch": "^4.0.0"
    },
    "scripts": {
      "prepublishOnly": "yarn build",
      "pretty-quick": "./bin/pretty-quick.js",
      "build": "babel src -d dist --copy-files --no-copy-ignored --ignore '**/__tests__/*.js'",
      "test": "jest",
      "lint": "eslint . --ignore-path=.gitignore",
      "semantic-release": "semantic-release"
    },
    "husky": {
      "hooks": {
        "pre-commit": "./bin/pretty-quick.js --staged"
      }
    },
    "prettier": "@azz/prettier-config",
    "peerDependencies": {
      "prettier": ">=2.0.0"
    },
    "devDependencies": {
      "@azz/prettier-config": "^1.0.0",
      "@babel/cli": "^7.8.4",
      "@babel/core": "^7.9.0",
      "@babel/preset-env": "^7.9.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.1",
      "eslint-plugin-jest": "^23.8.2",
      "eslint-plugin-prettier": "^3.1.2",
      "husky": "^4.2.3",
      "jest": "^25.2.3",
      "mock-fs": "^4.11.0",
      "prettier": "2.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-pretty-quick-3.1.3-15281108c0ddf446675157ca40240099157b638e-integrity/node_modules/pretty-quick/package.json",
    "readmeFilename": "README.md",
    "readme": "# `pretty-quick`\n\n[![Travis](https://img.shields.io/travis/com/azz/pretty-quick.svg?style=flat-square)](https://travis-ci.com/github/azz/pretty-quick)\n[![Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![npm](https://img.shields.io/npm/v/pretty-quick.svg?style=flat-square)](https://npmjs.org/pretty-quick)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n\n> Get Pretty Quick\n\nRuns [Prettier](https://prettier.io) on your changed files.\n\n![demo](./img/demo.gif)\n\nSupported source control managers:\n\n- Git\n- Mercurial\n\n## Install\n\nWith `yarn`:\n\n```shellsession\nyarn add --dev prettier pretty-quick\n```\n\nWith `npm`:\n\n```shellsession\nnpm install --save-dev prettier pretty-quick\n```\n\n## Usage\n\nWith `yarn`:\n\n```shellsession\nyarn pretty-quick\n```\n\nWith [`npx`](https://npm.im/npx):\n\n```shellsession\nnpx -p prettier@latest -p pretty-quick pretty-quick\n```\n\n> Note: You can (_should_) change `latest` to a specific version of Prettier.\n\nWith `npm`:\n\n1. Add `\"pretty-quick\": \"pretty-quick\"` to the `\"scripts\"` section of `package.json`.\n2. `npm run pretty-quick`\n\n## Pre-Commit Hook\n\nYou can run `pretty-quick` as a pre-commit hook using [`husky`](https://github.com/typicode/husky).\n\n> For Mercurial have a look at [`husky-hg`](https://github.com/TobiasTimm/husky-hg)\n\n```shellstream\nyarn add --dev husky\n```\n\nIn `package.json`, add:\n\n```json\n\"husky\": {\n  \"hooks\": {\n    \"pre-commit\": \"pretty-quick --staged\"\n  }\n}\n```\n\n![demo](./img/precommit.gif)\n\n## CLI Flags\n\n### `--staged` (only git)\n\nPre-commit mode. Under this flag only staged files will be formatted, and they will be re-staged after formatting.\n\nPartially staged files will not be re-staged after formatting and pretty-quick will exit with a non-zero exit code. The intent is to abort the git commit and allow the user to amend their selective staging to include formatting fixes.\n\n### `--no-restage` (only git)\n\nUse with the `--staged` flag to skip re-staging files after formatting.\n\n### `--branch`\n\nWhen not in `staged` pre-commit mode, use this flag to compare changes with the specified branch. Defaults to `master` (git) / `default` (hg) branch.\n\n### `--pattern`\n\nFilters the files for the given [minimatch](https://github.com/isaacs/minimatch) pattern.  \nFor example `pretty-quick --pattern \"**/*.*(js|jsx)\"` or `pretty-quick --pattern \"**/*.js\" --pattern \"**/*.jsx\"`\n\n### `--verbose`\n\nOutputs the name of each file right before it is proccessed. This can be useful if Prettier throws an error and you can't identify which file is causing the problem.\n\n### `--bail`\n\nPrevent `git commit` if any files are fixed.\n\n### `--check`\n\nCheck that files are correctly formatted, but don't format them. This is useful on CI to verify that all changed files in the current branch were correctly formatted.\n\n### `--no-resolve-config`\n\nDo not resolve prettier config when determining which files to format, just use standard set of supported file types & extensions prettier supports. This may be useful if you do not need any customization and see performance issues.\n\nBy default, pretty-quick will check your prettier configuration file for any overrides you define to support formatting of additional file extensions.\n\nExample `.prettierrc` file to support formatting files with `.cmp` or `.page` extensions as html.\n\n```\n{\n    \"printWidth\": 120,\n    \"bracketSpacing\": false,\n    \"overrides\": [\n        {\n            \"files\": \"*.{cmp,page}\",\n            \"options\": {\"parser\": \"html\"}\n        }\n    ],\n}\n```\n\n<!-- Undocumented = Unsupported :D\n\n### `--config`\n\nPath to a `.prettierrc` file.\n\n### `--since`\n\nA SCM revision such as a git commit hash or ref.\n\nFor example `pretty-quick --since HEAD` will format only staged files.\n\n-->\n\n### `--ignore-path`\n\nCheck an alternative file for ignoring files with the same format as [`.prettierignore`](https://prettier.io/docs/en/ignore#ignoring-files).\nFor example `pretty-quick --ignore-path .gitignore`\n\n## Configuration and Ignore Files\n\n`pretty-quick` will respect your [`.prettierrc`](https://prettier.io/docs/en/configuration), [`.prettierignore`](https://prettier.io/docs/en/ignore#ignoring-files), and [`.editorconfig`](http://editorconfig.org/) files if you don't use `--ignore-path` . Configuration files will be found by searching up the file system. `.prettierignore` files are only found from the repository root and the working directory that the command was executed from.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017- Lucas Azzola\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pretty-quick/-/pretty-quick-3.1.3.tgz#15281108c0ddf446675157ca40240099157b638e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pretty-quick/-/pretty-quick-3.1.3.tgz",
    "hash": "15281108c0ddf446675157ca40240099157b638e",
    "integrity": "sha512-kOCi2FJabvuh1as9enxYmrnBC6tVMoVOenMaBqRfsvBHB0cbpYHjdQEpSglpASDFEXVwplpcGR4CLEaisYAFcA==",
    "registry": "npm",
    "packageName": "pretty-quick",
    "cacheIntegrity": "sha512-kOCi2FJabvuh1as9enxYmrnBC6tVMoVOenMaBqRfsvBHB0cbpYHjdQEpSglpASDFEXVwplpcGR4CLEaisYAFcA== sha1-FSgRCMDd9EZnUVfKQCQAmRV7Y44="
  },
  "registry": "npm",
  "hash": "15281108c0ddf446675157ca40240099157b638e"
}