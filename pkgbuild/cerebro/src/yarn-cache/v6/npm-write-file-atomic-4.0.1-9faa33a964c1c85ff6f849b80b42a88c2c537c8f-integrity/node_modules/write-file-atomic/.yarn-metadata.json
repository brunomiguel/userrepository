{
  "manifest": {
    "name": "write-file-atomic",
    "version": "4.0.1",
    "description": "Write files in an atomic fashion w/configurable ownership",
    "main": "./lib/index.js",
    "scripts": {
      "test": "tap",
      "posttest": "npm run lint",
      "lint": "eslint '**/*.js'",
      "postlint": "npm-template-check",
      "preversion": "npm test",
      "postversion": "npm publish",
      "prepublishOnly": "git push origin --follow-tags",
      "lintfix": "npm run lint -- --fix",
      "snap": "tap",
      "template-copy": "npm-template-copy --force"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/npm/write-file-atomic.git"
    },
    "keywords": [
      "writeFile",
      "atomic"
    ],
    "author": {
      "name": "GitHub Inc."
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/npm/write-file-atomic/issues"
    },
    "homepage": "https://github.com/npm/write-file-atomic",
    "dependencies": {
      "imurmurhash": "^0.1.4",
      "signal-exit": "^3.0.7"
    },
    "devDependencies": {
      "@npmcli/template-oss": "^2.7.1",
      "mkdirp": "^1.0.4",
      "rimraf": "^3.0.2",
      "tap": "^15.1.6"
    },
    "files": [
      "bin",
      "lib"
    ],
    "engines": {
      "node": "^12.13.0 || ^14.15.0 || >=16"
    },
    "templateOSS": {
      "windowsCI": false,
      "version": "2.7.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-write-file-atomic-4.0.1-9faa33a964c1c85ff6f849b80b42a88c2c537c8f-integrity/node_modules/write-file-atomic/package.json",
    "readmeFilename": "README.md",
    "readme": "write-file-atomic\n-----------------\n\nThis is an extension for node's `fs.writeFile` that makes its operation\natomic and allows you set ownership (uid/gid of the file).\n\n### `writeFileAtomic(filename, data, [options], [callback])`\n\n#### Description:\n\nAtomically and asynchronously writes data to a file, replacing the file if it already\nexists.  data can be a string or a buffer.\n\n#### Options:\n* filename **String**\n* data **String** | **Buffer**\n* options **Object** | **String**\n  * chown **Object** default, uid & gid of existing file, if any\n    * uid **Number**\n    * gid **Number**\n  * encoding **String** | **Null** default = 'utf8'\n  * fsync **Boolean** default = true\n  * mode **Number** default, from existing file, if any\n  * tmpfileCreated **Function** called when the tmpfile is created\n* callback **Function**\n\n#### Usage:\n\n```js\nvar writeFileAtomic = require('write-file-atomic')\nwriteFileAtomic(filename, data, [options], [callback])\n```\n\nThe file is initially named `filename + \".\" + murmurhex(__filename, process.pid, ++invocations)`.\nNote that `require('worker_threads').threadId` is used in addition to `process.pid` if running inside of a worker thread.\nIf writeFile completes successfully then, if passed the **chown** option it will change\nthe ownership of the file. Finally it renames the file back to the filename you specified. If\nit encounters errors at any of these steps it will attempt to unlink the temporary file and then\npass the error back to the caller.\nIf multiple writes are concurrently issued to the same file, the write operations are put into a queue and serialized in the order they were called, using Promises. Writes to different files are still executed in parallel.\n\nIf provided, the **chown** option requires both **uid** and **gid** properties or else\nyou'll get an error.  If **chown** is not specified it will default to using\nthe owner of the previous file.  To prevent chown from being ran you can\nalso pass `false`, in which case the file will be created with the current user's credentials.\n\nIf **mode** is not specified, it will default to using the permissions from\nan existing file, if any.  Expicitly setting this to `false` remove this default, resulting\nin a file created with the system default permissions.\n\nIf options is a String, it's assumed to be the **encoding** option. The **encoding** option is ignored if **data** is a buffer. It defaults to 'utf8'.\n\nIf the **fsync** option is **false**, writeFile will skip the final fsync call.\n\nIf the **tmpfileCreated** option is specified it will be called with the name of the tmpfile when created.\n\nExample:\n\n```javascript\nwriteFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}}, function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n```\n\nThis function also supports async/await:\n\n```javascript\n(async () => {\n  try {\n    await writeFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}});\n    console.log('It\\'s saved!');\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n})();\n```\n\n### `writeFileAtomicSync(filename, data, [options])`\n\n#### Description:\n\nThe synchronous version of **writeFileAtomic**.\n\n#### Usage:\n```js\nvar writeFileAtomicSync = require('write-file-atomic').sync\nwriteFileAtomicSync(filename, data, [options])\n```\n\n",
    "licenseText": "Copyright (c) 2015, Rebecca Turner\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-4.0.1.tgz#9faa33a964c1c85ff6f849b80b42a88c2c537c8f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-4.0.1.tgz",
    "hash": "9faa33a964c1c85ff6f849b80b42a88c2c537c8f",
    "integrity": "sha512-nSKUxgAbyioruk6hU87QzVbY279oYT6uiwgDoujth2ju4mJ+TZau7SQBhtbTmUyuNYTuXnSyRn66FV0+eCgcrQ==",
    "registry": "npm",
    "packageName": "write-file-atomic",
    "cacheIntegrity": "sha512-nSKUxgAbyioruk6hU87QzVbY279oYT6uiwgDoujth2ju4mJ+TZau7SQBhtbTmUyuNYTuXnSyRn66FV0+eCgcrQ== sha1-n6ozqWTByF/2+Em4C0KojCxTfI8="
  },
  "registry": "npm",
  "hash": "9faa33a964c1c85ff6f849b80b42a88c2c537c8f"
}