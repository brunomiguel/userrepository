{
  "manifest": {
    "name": "hex-color-regex",
    "version": "1.1.0",
    "description": "The best regular expression (regex) for matching hex color values from string.",
    "repository": {
      "type": "git",
      "url": "https://github.com/regexps/hex-color-regex.git"
    },
    "author": {
      "name": "Charlike Mike Reagent",
      "email": "@tunnckoCore",
      "url": "http://www.tunnckocore.tk"
    },
    "main": "index.js",
    "license": "MIT",
    "scripts": {
      "test": "standard && node test.js"
    },
    "dependencies": {},
    "devDependencies": {
      "mukla": "^0.4.9"
    },
    "keywords": [
      "color",
      "colors",
      "css",
      "expr",
      "expression",
      "expressions",
      "hex",
      "match",
      "matching",
      "regex",
      "regexp",
      "regexps",
      "regular",
      "web"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-hex-color-regex-1.1.0-4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e-integrity/node_modules/hex-color-regex/package.json",
    "readmeFilename": "README.md",
    "readme": "# [hex-color-regex][author-www-url] [![npmjs.com][npmjs-img]][npmjs-url] [![The MIT License][license-img]][license-url] \n\n> The best regular expression (regex) for matching hex color values from string.\n\n[![code climate][codeclimate-img]][codeclimate-url] [![standard code style][standard-img]][standard-url] [![travis build status][travis-img]][travis-url] [![coverage status][coverage-img]][coverage-url] [![dependency status][david-img]][david-url]\n\n\n## Install\n```\nnpm i hex-color-regex --save\nnpm test\n```\n\n\n## Usage\n> For more use-cases see the [tests](./test.js)\n\n- `[opts]` **{Object}** pass `strict: true` for strict mode\n- `return` **{RegExp}**\n\n**Example**\n\n```js\nvar hexColorRegex = require('hex-color-regex')\n\nhexColorRegex().test('#f3f}') //=> true\nhexColorRegex({strict: true}).test('#f3f}') //=> false\n\nhexColorRegex().test('foo #f3f bar') //=> true\nhexColorRegex({strict: true}).test('foo #f3f bar') //=> false\n\nhexColorRegex().test('#a54f2c}') //=> true\nhexColorRegex({strict: true}).test('#a54f2c}') //=> false\n\nhexColorRegex().test('foo #a54f2c bar') //=> true\nhexColorRegex({strict: true}).test('foo #a54f2c bar') //=> false\n\nhexColorRegex().test('#ffff') //=> false\nhexColorRegex().test('ffff') //=> false\n\nhexColorRegex().test('#fff') //=> true\nhexColorRegex().test('fff') //=> false\n\nhexColorRegex().test('#4g1') //=> false\nhexColorRegex().test('4g1') //=> false\nhexColorRegex().test('#zY1') //=> false\nhexColorRegex().test('zY1') //=> false\nhexColorRegex().test('#7f68ZY') //=> false\nhexColorRegex().test('7f68ZY') //=> false\nhexColorRegex().test('ffffff') //=> false\n\nhexColorRegex().test('#afebe3') //=> true\nhexColorRegex().test('#AFEBE3') //=> true\nhexColorRegex().test('#3cb371') //=> true\nhexColorRegex().test('#3CB371') //=> true\nhexColorRegex().test('#556b2f') //=> true\nhexColorRegex().test('#556B2F') //=> true\nhexColorRegex().test('#708090') //=> true\nhexColorRegex().test('#7b68ee') //=> true\nhexColorRegex().test('#7B68EE') //=> true\nhexColorRegex().test('#eeeeee') //=> true\nhexColorRegex().test('#ffffff') //=> true\nhexColorRegex().test('#111111') //=> true\n\nhexColorRegex().test('#afe') //=> true\nhexColorRegex().test('#AF3') //=> true\nhexColorRegex().test('#3cb') //=> true\nhexColorRegex().test('#3CB') //=> true\nhexColorRegex().test('#b2f') //=> true\nhexColorRegex().test('#5B2') //=> true\nhexColorRegex().test('#708') //=> true\nhexColorRegex().test('#68e') //=> true\nhexColorRegex().test('#7AF') //=> true\nhexColorRegex().test('#777') //=> true\nhexColorRegex().test('#FFF') //=> true\nhexColorRegex().test('#fff') //=> true\n```\n\n\n## Matching groups\n\n- `match[0]` hex value with hash - `#f3f3f3`\n- `match[1]` hex value without the hash - `f3f3f3`\n\n**Example**\n\n```js\nhexColorRegex().exec('foo #fff bar')\n//=> [ '#fff', 'fff', index: 4, input: 'foo #fff bar' ]\n\nhexColorRegex({strict: true}).exec('foo #fff bar')\n//=> null\n\nhexColorRegex().exec('foo #f3f3f3 bar')\n//=> [ '#f3f3f3', 'f3f3f3', index: 4, input: 'foo #f3f3f3 bar' ]\n\nhexColorRegex({strict: true}).exec('foo #f3f3f3 bar')\n//=> null\n```\n\n\n## Related\n- [benz](https://github.com/tunnckocore/benz): Compose your control flow with absolute elegance. Support async/await, callbacks, thunks, generators, promises, observables, child… [more](https://github.com/tunnckocore/benz)\n- [is-hexcolor](https://github.com/tunnckocore/is-hexcolor): Check that given value is valid hex color, using `hex-color-regex` - the best regex for… [more](https://github.com/tunnckocore/is-hexcolor)\n- [is-ansi](https://github.com/tunnckocore/is-ansi): Check that given string contain ANSI color codes, without CLI\n- [is-missing](https://github.com/tunnckocore/is-missing): Check that given `name` or `user/repo` exists in npm registry or in github as user… [more](https://github.com/tunnckocore/is-missing)\n- [is-kindof](https://github.com/tunnckocore/is-kindof): Check type of given javascript value. Support promises, generators, streams, and native types. Thin wrapper… [more](https://github.com/tunnckocore/is-kindof)\n- [is-typeof-error](https://github.com/tunnckocore/is-typeof-error): Check that given value is any type of error and instanceof Error\n- [is-async-function](https://github.com/tunnckocore/is-async-function): Check that given function is async (callback) function or not. Trying to guess that based… [more](https://github.com/tunnckocore/is-async-function)\n- [kind-error](https://github.com/tunnckocore/kind-error): Correct inheriting from `Error`. Supports constructing from an object of properties - focused on assertion.\n- [kind-of-extra](https://github.com/tunnckocore/kind-of-extra): Extends `kind-of` type check utility with support for promises, generators, streams and errors. Like `kindof(Promise.resolve(1))… [more](https://github.com/tunnckocore/kind-of-extra)\n- [vez](https://github.com/tunnckocore/vez): Middleware composition at new level. Ultimate alternative to `ware`, `plugins`, `koa-compose` and `composition` packages. Allows… [more](https://github.com/tunnckocore/vez)\n\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/regexhq/hex-color-regex/issues/new).  \nBut before doing anything, please read the [CONTRIBUTING.md](./CONTRIBUTING.md) guidelines.\n\n\n## [Charlike Make Reagent](http://j.mp/1stW47C) [![new message to charlike][new-message-img]][new-message-url] [![freenode #charlike][freenode-img]][freenode-url]\n\n[![tunnckocore.tk][author-www-img]][author-www-url] [![keybase tunnckocore][keybase-img]][keybase-url] [![tunnckoCore npm][author-npm-img]][author-npm-url] [![tunnckoCore twitter][author-twitter-img]][author-twitter-url] [![tunnckoCore github][author-github-img]][author-github-url]\n\n\n[npmjs-url]: https://www.npmjs.com/package/hex-color-regex\n[npmjs-img]: https://img.shields.io/npm/v/hex-color-regex.svg?label=hex-color-regex\n\n[license-url]: https://github.com/regexhq/hex-color-regex/blob/master/LICENSE.md\n[license-img]: https://img.shields.io/badge/license-MIT-blue.svg\n\n\n[codeclimate-url]: https://codeclimate.com/github/regexps/hex-color-regex\n[codeclimate-img]: https://img.shields.io/codeclimate/github/regexps/hex-color-regex.svg\n\n[coverage-url]: https://codeclimate.com/github/regexps/hex-color-regex\n[coverage-img]: https://img.shields.io/codeclimate/coverage/github/regexps/hex-color-regex.svg\n\n[travis-url]: https://travis-ci.org/regexhq/hex-color-regex\n[travis-img]: https://img.shields.io/travis/regexhq/hex-color-regex.svg\n\n[coveralls-url]: https://coveralls.io/r/regexhq/hex-color-regex\n[coveralls-img]: https://img.shields.io/coveralls/regexhq/hex-color-regex.svg\n\n[david-url]: https://david-dm.org/regexhq/hex-color-regex\n[david-img]: https://img.shields.io/david/dev/regexhq/hex-color-regex.svg\n\n[standard-url]: https://github.com/feross/standard\n[standard-img]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n\n\n[author-www-url]: http://www.tunnckocore.tk\n[author-www-img]: https://img.shields.io/badge/www-tunnckocore.tk-fe7d37.svg\n\n[keybase-url]: https://keybase.io/tunnckocore\n[keybase-img]: https://img.shields.io/badge/keybase-tunnckocore-8a7967.svg\n\n[author-npm-url]: https://www.npmjs.com/~tunnckocore\n[author-npm-img]: https://img.shields.io/badge/npm-~tunnckocore-cb3837.svg\n\n[author-twitter-url]: https://twitter.com/tunnckoCore\n[author-twitter-img]: https://img.shields.io/badge/twitter-@tunnckoCore-55acee.svg\n\n[author-github-url]: https://github.com/tunnckoCore\n[author-github-img]: https://img.shields.io/badge/github-@tunnckoCore-4183c4.svg\n\n[freenode-url]: http://webchat.freenode.net/?channels=charlike\n[freenode-img]: https://img.shields.io/badge/freenode-%23charlike-5654a4.svg\n\n[new-message-url]: https://github.com/tunnckoCore/messages\n[new-message-img]: https://img.shields.io/badge/send%20me-message-green.svg\n",
    "licenseText": "# The MIT License\n\nCopyright (c) 2015 [Charlike Make Reagent](http://j.mp/1stW47C)\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hex-color-regex/-/hex-color-regex-1.1.0.tgz#4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hex-color-regex/-/hex-color-regex-1.1.0.tgz",
    "hash": "4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e",
    "integrity": "sha512-l9sfDFsuqtOqKDsQdqrMRk0U85RZc0RtOR9yPI7mRVOa4FsR/BVnZ0shmQRM96Ji99kYZP/7hn1cedc1+ApsTQ==",
    "registry": "npm",
    "packageName": "hex-color-regex",
    "cacheIntegrity": "sha512-l9sfDFsuqtOqKDsQdqrMRk0U85RZc0RtOR9yPI7mRVOa4FsR/BVnZ0shmQRM96Ji99kYZP/7hn1cedc1+ApsTQ== sha1-TAb8y0YC/iYCs8k9+C1+fb8aio4="
  },
  "registry": "npm",
  "hash": "4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e"
}