{
  "manifest": {
    "name": "enquirer",
    "description": "Stylish, intuitive and user-friendly prompt system. Fast and lightweight enough for small projects, powerful and extensible enough for the most advanced use cases.",
    "version": "2.3.6",
    "homepage": "https://github.com/enquirer/enquirer",
    "author": {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    },
    "contributors": [
      {
        "name": "Brian Woodward",
        "url": "https://twitter.com/doowb"
      },
      {
        "name": "Jon Schlinkert",
        "url": "http://twitter.com/jonschlinkert"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/enquirer/enquirer.git"
    },
    "bugs": {
      "url": "https://github.com/enquirer/enquirer/issues"
    },
    "license": "MIT",
    "files": [
      "index.js",
      "index.d.ts",
      "lib"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=8.6"
    },
    "scripts": {
      "test": "mocha && tsc -p ./test/types",
      "cover": "nyc --reporter=text --reporter=html mocha"
    },
    "dependencies": {
      "ansi-colors": "^4.1.1"
    },
    "devDependencies": {
      "@types/node": "^8",
      "gulp-format-md": "^2.0.0",
      "inquirer": "^6.2.0",
      "mocha": "^5.2.0",
      "nyc": "^13.1.0",
      "prompts": "^1.2.1",
      "time-require": "github:jonschlinkert/time-require",
      "typescript": "^3.1.6"
    },
    "keywords": [
      "answer",
      "answers",
      "ask",
      "base",
      "cli",
      "command",
      "command-line",
      "confirm",
      "enquirer",
      "generator",
      "generate",
      "hyper",
      "input",
      "inquire",
      "inquirer",
      "interface",
      "iterm",
      "javascript",
      "node",
      "nodejs",
      "prompt",
      "prompts",
      "promptly",
      "question",
      "readline",
      "scaffold",
      "scaffolding",
      "scaffolder",
      "stdin",
      "stdout",
      "terminal",
      "tty",
      "ui",
      "yeoman",
      "yo",
      "zsh"
    ],
    "lintDeps": {
      "devDependencies": {
        "files": {
          "patterns": [
            "examples/**/*.js",
            "perf/*.js",
            "recipes/*.js"
          ]
        }
      }
    },
    "verb": {
      "toc": false,
      "layout": false,
      "tasks": [
        "readme"
      ],
      "plugins": [
        "gulp-format-md"
      ],
      "helpers": [
        "./docs/helpers.js"
      ],
      "lint": {
        "reflinks": true
      },
      "reflinks": [
        "inquirer",
        "prompt-skeleton"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-enquirer-2.3.6-2a7fe5dd634a1e4125a975ec994ff5456dc3734d-integrity/node_modules/enquirer/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">Enquirer</h1>\n\n<p align=\"center\">\n<a href=\"https://npmjs.org/package/enquirer\">\n<img src=\"https://img.shields.io/npm/v/enquirer.svg\" alt=\"version\">\n</a>\n<a href=\"https://travis-ci.org/enquirer/enquirer\">\n<img src=\"https://img.shields.io/travis/enquirer/enquirer.svg\" alt=\"travis\">\n</a>\n<a href=\"https://npmjs.org/package/enquirer\">\n<img src=\"https://img.shields.io/npm/dm/enquirer.svg\" alt=\"downloads\">\n</a>\n</p>\n\n<br>\n<br>\n\n<p align=\"center\">\n<b>Stylish CLI prompts that are user-friendly, intuitive and easy to create.</b><br>\n<sub>>_ Prompts should be more like conversations than inquisitions▌</sub>\n</p>\n\n<br>\n\n<p align=\"center\">\n<sub>(Example shows Enquirer's <a href=\"#survey-prompt\">Survey Prompt</a>)</a></sub>\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/survey-prompt.gif\" alt=\"Enquirer Survey Prompt\" width=\"750\"><br>\n<sub>The terminal in all examples is <a href=\"https://hyper.is/\">Hyper</a>, theme is <a href=\"https://github.com/jonschlinkert/hyper-monokai-extended\">hyper-monokai-extended</a>.</sub><br><br>\n<a href=\"#built-in-prompts\"><strong>See more prompt examples</strong></a>\n</p>\n\n<br>\n<br>\n\nCreated by [jonschlinkert](https://github.com/jonschlinkert) and [doowb](https://github.com/doowb), Enquirer is fast, easy to use, and lightweight enough for small projects, while also being powerful and customizable enough for the most advanced use cases.\n\n* **Fast** - [Loads in ~4ms](#-performance) (that's about _3-4 times faster than a [single frame of a HD movie](http://www.endmemo.com/sconvert/framespersecondframespermillisecond.php) at 60fps_)\n* **Lightweight** - Only one dependency, the excellent [ansi-colors](https://github.com/doowb/ansi-colors) by [Brian Woodward](https://github.com/doowb).\n* **Easy to implement** - Uses promises and async/await and sensible defaults to make prompts easy to create and implement.\n* **Easy to use** - Thrill your users with a better experience! Navigating around input and choices is a breeze. You can even create [quizzes](examples/fun/countdown.js), or [record](examples/fun/record.js) and [playback](examples/fun/play.js) key bindings to aid with tutorials and videos.\n* **Intuitive** - Keypress combos are available to simplify usage.\n* **Flexible** - All prompts can be used standalone or chained together.\n* **Stylish** - Easily override semantic styles and symbols for any part of the prompt.\n* **Extensible** - Easily create and use custom prompts by extending Enquirer's built-in [prompts](#-prompts).\n* **Pluggable** - Add advanced features to Enquirer using plugins.\n* **Validation** - Optionally validate user input with any prompt.\n* **Well tested** - All prompts are well-tested, and tests are easy to create without having to use brittle, hacky solutions to spy on prompts or \"inject\" values.\n* **Examples** - There are numerous [examples](examples) available to help you get started.\n\nIf you like Enquirer, please consider starring or tweeting about this project to show your support. Thanks!\n\n<br>\n\n<p align=\"center\">\n<b>>_ Ready to start making prompts your users will love? ▌</b><br>\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/heartbeat.gif\" alt=\"Enquirer Select Prompt with heartbeat example\" width=\"750\">\n</p>\n\n<br>\n<br>\n\n## ❯ Getting started\n\nGet started with Enquirer, the most powerful and easy-to-use Node.js library for creating interactive CLI prompts.\n\n* [Install](#-install)\n* [Usage](#-usage)\n* [Enquirer](#-enquirer)\n* [Prompts](#-prompts)\n  - [Built-in Prompts](#-prompts)\n  - [Custom Prompts](#-custom-prompts)\n* [Key Bindings](#-key-bindings)\n* [Options](#-options)\n* [Release History](#-release-history)\n* [Performance](#-performance)\n* [About](#-about)\n\n<br>\n\n## ❯ Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install enquirer --save\n```\nInstall with [yarn](https://yarnpkg.com/en/):\n\n```sh\n$ yarn add enquirer\n```\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/npm-install.gif\" alt=\"Install Enquirer with NPM\" width=\"750\">\n</p>\n\n_(Requires Node.js 8.6 or higher. Please let us know if you need support for an earlier version by creating an [issue](../../issues/new).)_\n\n<br>\n\n## ❯ Usage\n\n### Single prompt\n\nThe easiest way to get started with enquirer is to pass a [question object](#prompt-options) to the `prompt` method.\n\n```js\nconst { prompt } = require('enquirer');\n\nconst response = await prompt({\n  type: 'input',\n  name: 'username',\n  message: 'What is your username?'\n});\n\nconsole.log(response); // { username: 'jonschlinkert' }\n```\n\n_(Examples with `await` need to be run inside an `async` function)_\n\n### Multiple prompts\n\nPass an array of [\"question\" objects](#prompt-options) to run a series of prompts.\n\n```js\nconst response = await prompt([\n  {\n    type: 'input',\n    name: 'name',\n    message: 'What is your name?'\n  },\n  {\n    type: 'input',\n    name: 'username',\n    message: 'What is your username?'\n  }\n]);\n\nconsole.log(response); // { name: 'Edward Chan', username: 'edwardmchan' }\n```\n\n### Different ways to run enquirer\n\n#### 1. By importing the specific `built-in prompt`\n\n```js\nconst { Confirm } = require('enquirer');\n\nconst prompt = new Confirm({\n  name: 'question',\n  message: 'Did you like enquirer?'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer));\n```\n\n#### 2. By passing the options to `prompt`\n\n```js\nconst { prompt } = require('enquirer');\n\nprompt({\n  type: 'confirm',\n  name: 'question',\n  message: 'Did you like enquirer?'\n})\n  .then(answer => console.log('Answer:', answer));\n```\n\n**Jump to**: [Getting Started](#-getting-started) · [Prompts](#-prompts) · [Options](#-options) · [Key Bindings](#-key-bindings)\n\n<br>\n\n## ❯ Enquirer\n\n**Enquirer is a prompt runner**\n\nAdd Enquirer to your JavaScript project with following line of code.\n\n```js\nconst Enquirer = require('enquirer');\n```\n\nThe main export of this library is the `Enquirer` class, which has methods and features designed to simplify running prompts.\n\n```js\nconst { prompt } = require('enquirer');\nconst question = [\n  {\n    type: 'input',\n    name: 'username',\n    message: 'What is your username?'\n  },\n  {\n    type: 'password',\n    name: 'password',\n    message: 'What is your password?'\n  }\n];\n\nlet answers = await prompt(question);\nconsole.log(answers);\n```\n\n**Prompts control how values are rendered and returned**\n\nEach individual prompt is a class with special features and functionality for rendering the types of values you want to show users in the terminal, and subsequently returning the types of values you need to use in your application.\n\n**How can I customize prompts?**\n\nBelow in this guide you will find information about creating [custom prompts](#-custom-prompts). For now, we'll focus on how to customize an existing prompt.\n\nAll of the individual [prompt classes](#built-in-prompts) in this library are exposed as static properties on Enquirer. This allows them to be used directly without using `enquirer.prompt()`.\n\nUse this approach if you need to modify a prompt instance, or listen for events on the prompt.\n\n**Example**\n\n```js\nconst { Input } = require('enquirer');\nconst prompt = new Input({\n  name: 'username',\n  message: 'What is your username?'\n});\n\nprompt.run()\n  .then(answer => console.log('Username:', answer))\n  .catch(console.error);\n```\n\n### [Enquirer](index.js#L20)\n\nCreate an instance of `Enquirer`.\n\n**Params**\n\n* `options` **{Object}**: (optional) Options to use with all prompts.\n* `answers` **{Object}**: (optional) Answers object to initialize with.\n\n**Example**\n\n```js\nconst Enquirer = require('enquirer');\nconst enquirer = new Enquirer();\n```\n\n### [register()](index.js#L42)\n\nRegister a custom prompt type.\n\n**Params**\n\n* `type` **{String}**\n* `fn` **{Function|Prompt}**: `Prompt` class, or a function that returns a `Prompt` class.\n* `returns` **{Object}**: Returns the Enquirer instance\n\n**Example**\n\n```js\nconst Enquirer = require('enquirer');\nconst enquirer = new Enquirer();\nenquirer.register('customType', require('./custom-prompt'));\n```\n\n### [prompt()](index.js#L78)\n\nPrompt function that takes a \"question\" object or array of question objects, and returns an object with responses from the user.\n\n**Params**\n\n* `questions` **{Array|Object}**: Options objects for one or more prompts to run.\n* `returns` **{Promise}**: Promise that returns an \"answers\" object with the user's responses.\n\n**Example**\n\n```js\nconst Enquirer = require('enquirer');\nconst enquirer = new Enquirer();\n\nconst response = await enquirer.prompt({\n  type: 'input',\n  name: 'username',\n  message: 'What is your username?'\n});\nconsole.log(response);\n```\n\n### [use()](index.js#L160)\n\nUse an enquirer plugin.\n\n**Params**\n\n* `plugin` **{Function}**: Plugin function that takes an instance of Enquirer.\n* `returns` **{Object}**: Returns the Enquirer instance.\n\n**Example**\n\n```js\nconst Enquirer = require('enquirer');\nconst enquirer = new Enquirer();\nconst plugin = enquirer => {\n  // do stuff to enquire instance\n};\nenquirer.use(plugin);\n```\n\n### [Enquirer#prompt](index.js#L210)\n\nPrompt function that takes a \"question\" object or array of question objects, and returns an object with responses from the user.\n\n**Params**\n\n* `questions` **{Array|Object}**: Options objects for one or more prompts to run.\n* `returns` **{Promise}**: Promise that returns an \"answers\" object with the user's responses.\n\n**Example**\n\n```js\nconst { prompt } = require('enquirer');\nconst response = await prompt({\n  type: 'input',\n  name: 'username',\n  message: 'What is your username?'\n});\nconsole.log(response);\n```\n\n<br>\n\n## ❯ Prompts\n\nThis section is about Enquirer's prompts: what they look like, how they work, how to run them, available options, and how to customize the prompts or create your own prompt concept.\n\n**Getting started with Enquirer's prompts**\n\n* [Prompt](#prompt) - The base `Prompt` class used by other prompts\n  - [Prompt Options](#prompt-options)\n* [Built-in prompts](#built-in-prompts)\n* [Prompt Types](#prompt-types) - The base `Prompt` class used by other prompts\n* [Custom prompts](#%E2%9D%AF-custom-prompts) - Enquirer 2.0 introduced the concept of prompt \"types\", with the goal of making custom prompts easier than ever to create and use.\n\n### Prompt\n\nThe base `Prompt` class is used to create all other prompts.\n\n```js\nconst { Prompt } = require('enquirer');\nclass MyCustomPrompt extends Prompt {}\n```\n\nSee the documentation for [creating custom prompts](#-custom-prompts) to learn more about how this works.\n\n#### Prompt Options\n\nEach prompt takes an options object (aka \"question\" object), that implements the following interface:\n\n```js\n{\n  // required\n  type: string | function,\n  name: string | function,\n  message: string | function | async function,\n\n  // optional\n  skip: boolean | function | async function,\n  initial: string | function | async function,\n  format: function | async function,\n  result: function | async function,\n  validate: function | async function,\n}\n```\nEach property of the options object is described below:\n\n| **Property** | **Required?** | **Type**           | **Description**                                                                                                                                                                         |\n| ------------ | ------------- | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `type`       | yes           | `string\\|function`  | Enquirer uses this value to determine the type of prompt to run, but it's optional when prompts are run directly.                                                                       |\n| `name`       | yes           | `string\\|function`  | Used as the key for the answer on the returned values (answers) object.                                                                                                                 |\n| `message`    | yes           | `string\\|function`  | The message to display when the prompt is rendered in the terminal.                                                                                                                     |\n| `skip`       | no            | `boolean\\|function` | If `true` it will not ask that prompt.                                                                                                                                                  |\n| `initial`    | no            | `string\\|function`  | The default value to return if the user does not supply a value.                                                                                                                        |\n| `format`     | no            | `function`         | Function to format user input in the terminal.                                                                                                                                          |\n| `result`     | no            | `function`         | Function to format the final submitted value before it's returned.                                                                                                                      |\n| `validate`   | no            | `function`         | Function to validate the submitted value before it's returned. This function may return a boolean or a string. If a string is returned it will be used as the validation error message. |\n\n**Example usage**\n\n```js\nconst { prompt } = require('enquirer');\n\nconst question = {\n  type: 'input',\n  name: 'username',\n  message: 'What is your username?'\n};\n\nprompt(question)\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n<br>\n\n### Built-in prompts\n\n* [AutoComplete Prompt](#autocomplete-prompt)\n* [BasicAuth Prompt](#basicauth-prompt)\n* [Confirm Prompt](#confirm-prompt)\n* [Form Prompt](#form-prompt)\n* [Input Prompt](#input-prompt)\n* [Invisible Prompt](#invisible-prompt)\n* [List Prompt](#list-prompt)\n* [MultiSelect Prompt](#multiselect-prompt)\n* [Numeral Prompt](#numeral-prompt)\n* [Password Prompt](#password-prompt)\n* [Quiz Prompt](#quiz-prompt)\n* [Survey Prompt](#survey-prompt)\n* [Scale Prompt](#scale-prompt)\n* [Select Prompt](#select-prompt)\n* [Sort Prompt](#sort-prompt)\n* [Snippet Prompt](#snippet-prompt)\n* [Toggle Prompt](#toggle-prompt)\n\n### AutoComplete Prompt\n\nPrompt that auto-completes as the user types, and returns the selected value as a string.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/autocomplete-prompt.gif\" alt=\"Enquirer AutoComplete Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { AutoComplete } = require('enquirer');\n\nconst prompt = new AutoComplete({\n  name: 'flavor',\n  message: 'Pick your favorite flavor',\n  limit: 10,\n  initial: 2,\n  choices: [\n    'Almond',\n    'Apple',\n    'Banana',\n    'Blackberry',\n    'Blueberry',\n    'Cherry',\n    'Chocolate',\n    'Cinnamon',\n    'Coconut',\n    'Cranberry',\n    'Grape',\n    'Nougat',\n    'Orange',\n    'Pear',\n    'Pineapple',\n    'Raspberry',\n    'Strawberry',\n    'Vanilla',\n    'Watermelon',\n    'Wintergreen'\n  ]\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**AutoComplete Options**\n\n| Option      | Type       | Default                                                             | Description                                                                                                  |\n| ----------- | ---------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| `highlight` | `function` | `dim` version of primary style                                      | The color to use when \"highlighting\" characters in the list that match user input.                           |\n| `multiple`  | `boolean`  | `false`                                                             | Allow multiple choices to be selected.                                                                       |\n| `suggest`   | `function` | Greedy match, returns true if choice message contains input string. | Function that filters choices. Takes user input and a choices array, and returns a list of matching choices. |\n| `initial`   | `number` | 0 | Preselected item in the list of choices. |\n| `footer`   | `function` | None | Function that displays [footer text](https://github.com/enquirer/enquirer/blob/6c2819518a1e2ed284242a99a685655fbaabfa28/examples/autocomplete/option-footer.js#L10) |\n\n**Related prompts**\n\n* [Select](#select-prompt)\n* [MultiSelect](#multiselect-prompt)\n* [Survey](#survey-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### BasicAuth Prompt\n\nPrompt that asks for username and password to authenticate the user. The default implementation of `authenticate` function in `BasicAuth` prompt is to compare the username and password with the values supplied while running the prompt. The implementer is expected to override the `authenticate` function with a custom logic such as making an API request to a server to authenticate the username and password entered and expect a token back.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/13731210/61570485-7ffd9c00-aaaa-11e9-857a-d47dc7008284.gif\" alt=\"Enquirer BasicAuth Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { BasicAuth } = require('enquirer');\n\n const prompt = new BasicAuth({\n  name: 'password',\n  message: 'Please enter your password',\n  username: 'rajat-sr',\n  password: '123',\n  showPassword: true\n});\n\n prompt\n  .run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Confirm Prompt\n\nPrompt that returns `true` or `false`.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/confirm-prompt.gif\" alt=\"Enquirer Confirm Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Confirm } = require('enquirer');\n\nconst prompt = new Confirm({\n  name: 'question',\n  message: 'Want to answer?'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Input](#input-prompt)\n* [Numeral](#numeral-prompt)\n* [Password](#password-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Form Prompt\n\nPrompt that allows the user to enter and submit multiple values on a single terminal screen.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/form-prompt.gif\" alt=\"Enquirer Form Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Form } = require('enquirer');\n\nconst prompt = new Form({\n  name: 'user',\n  message: 'Please provide the following information:',\n  choices: [\n    { name: 'firstname', message: 'First Name', initial: 'Jon' },\n    { name: 'lastname', message: 'Last Name', initial: 'Schlinkert' },\n    { name: 'username', message: 'GitHub username', initial: 'jonschlinkert' }\n  ]\n});\n\nprompt.run()\n  .then(value => console.log('Answer:', value))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Input](#input-prompt)\n* [Survey](#survey-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Input Prompt\n\nPrompt that takes user input and returns a string.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/input-prompt.gif\" alt=\"Enquirer Input Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Input } = require('enquirer');\nconst prompt = new Input({\n  message: 'What is your username?',\n  initial: 'jonschlinkert'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.log);\n```\n\nYou can use [data-store](https://github.com/jonschlinkert/data-store) to store [input history](https://github.com/enquirer/enquirer/blob/master/examples/input/option-history.js) that the user can cycle through (see [source](https://github.com/enquirer/enquirer/blob/8407dc3579123df5e6e20215078e33bb605b0c37/lib/prompts/input.js)).\n\n**Related prompts**\n\n* [Confirm](#confirm-prompt)\n* [Numeral](#numeral-prompt)\n* [Password](#password-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Invisible Prompt\n\nPrompt that takes user input, hides it from the terminal, and returns a string.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/invisible-prompt.gif\" alt=\"Enquirer Invisible Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Invisible } = require('enquirer');\nconst prompt = new Invisible({\n  name: 'secret',\n  message: 'What is your secret?'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', { secret: answer }))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Password](#password-prompt)\n* [Input](#input-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### List Prompt\n\nPrompt that returns a list of values, created by splitting the user input. The default split character is `,` with optional trailing whitespace.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/list-prompt.gif\" alt=\"Enquirer List Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { List } = require('enquirer');\nconst prompt = new List({\n  name: 'keywords',\n  message: 'Type comma-separated keywords'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Sort](#sort-prompt)\n* [Select](#select-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### MultiSelect Prompt\n\nPrompt that allows the user to select multiple items from a list of options.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/multiselect-prompt.gif\" alt=\"Enquirer MultiSelect Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { MultiSelect } = require('enquirer');\n\nconst prompt = new MultiSelect({\n  name: 'value',\n  message: 'Pick your favorite colors',\n  limit: 7,\n  choices: [\n    { name: 'aqua', value: '#00ffff' },\n    { name: 'black', value: '#000000' },\n    { name: 'blue', value: '#0000ff' },\n    { name: 'fuchsia', value: '#ff00ff' },\n    { name: 'gray', value: '#808080' },\n    { name: 'green', value: '#008000' },\n    { name: 'lime', value: '#00ff00' },\n    { name: 'maroon', value: '#800000' },\n    { name: 'navy', value: '#000080' },\n    { name: 'olive', value: '#808000' },\n    { name: 'purple', value: '#800080' },\n    { name: 'red', value: '#ff0000' },\n    { name: 'silver', value: '#c0c0c0' },\n    { name: 'teal', value: '#008080' },\n    { name: 'white', value: '#ffffff' },\n    { name: 'yellow', value: '#ffff00' }\n  ]\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n\n// Answer: ['aqua', 'blue', 'fuchsia']\n```\n\n**Example key-value pairs**\n\nOptionally, pass a `result` function and use the `.map` method to return an object of key-value pairs of the selected names and values: [example](./examples/multiselect/option-result.js)\n\n```js\nconst { MultiSelect } = require('enquirer');\n\nconst prompt = new MultiSelect({\n  name: 'value',\n  message: 'Pick your favorite colors',\n  limit: 7,\n  choices: [\n    { name: 'aqua', value: '#00ffff' },\n    { name: 'black', value: '#000000' },\n    { name: 'blue', value: '#0000ff' },\n    { name: 'fuchsia', value: '#ff00ff' },\n    { name: 'gray', value: '#808080' },\n    { name: 'green', value: '#008000' },\n    { name: 'lime', value: '#00ff00' },\n    { name: 'maroon', value: '#800000' },\n    { name: 'navy', value: '#000080' },\n    { name: 'olive', value: '#808000' },\n    { name: 'purple', value: '#800080' },\n    { name: 'red', value: '#ff0000' },\n    { name: 'silver', value: '#c0c0c0' },\n    { name: 'teal', value: '#008080' },\n    { name: 'white', value: '#ffffff' },\n    { name: 'yellow', value: '#ffff00' }\n  ],\n  result(names) {\n   return this.map(names);\n  }\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n\n// Answer: { aqua: '#00ffff', blue: '#0000ff', fuchsia: '#ff00ff' }\n```\n\n**Related prompts**\n\n* [AutoComplete](#autocomplete-prompt)\n* [Select](#select-prompt)\n* [Survey](#survey-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Numeral Prompt\n\nPrompt that takes a number as input.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/numeral-prompt.gif\" alt=\"Enquirer Numeral Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { NumberPrompt } = require('enquirer');\n\nconst prompt = new NumberPrompt({\n  name: 'number',\n  message: 'Please enter a number'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Input](#input-prompt)\n* [Confirm](#confirm-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Password Prompt\n\nPrompt that takes user input and masks it in the terminal. Also see the [invisible prompt](#invisible-prompt)\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/password-prompt.gif\" alt=\"Enquirer Password Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Password } = require('enquirer');\n\nconst prompt = new Password({\n  name: 'password',\n  message: 'What is your password?'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Input](#input-prompt)\n* [Invisible](#invisible-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Quiz Prompt\n\nPrompt that allows the user to play multiple-choice quiz questions.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/13731210/61567561-891d4780-aa6f-11e9-9b09-3d504abd24ed.gif\" alt=\"Enquirer Quiz Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Quiz } = require('enquirer');\n\n const prompt = new Quiz({\n  name: 'countries',\n  message: 'How many countries are there in the world?',\n  choices: ['165', '175', '185', '195', '205'],\n  correctChoice: 3\n});\n\n prompt\n  .run()\n  .then(answer => {\n    if (answer.correct) {\n      console.log('Correct!');\n    } else {\n      console.log(`Wrong! Correct answer is ${answer.correctAnswer}`);\n    }\n  })\n  .catch(console.error);\n```\n\n**Quiz Options**\n\n| Option         | Type        | Required    | Description                                                                                                  |\n| -----------    | ----------  | ----------  | ------------------------------------------------------------------------------------------------------------ |\n| `choices`      | `array`     | Yes         | The list of possible answers to the quiz question.                                                           |\n| `correctChoice`| `number`    | Yes         | Index of the correct choice from the `choices` array.                                                        |\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Survey Prompt\n\nPrompt that allows the user to provide feedback for a list of questions.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/survey-prompt.gif\" alt=\"Enquirer Survey Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Survey } = require('enquirer');\n\nconst prompt = new Survey({\n  name: 'experience',\n  message: 'Please rate your experience',\n   scale: [\n    { name: '1', message: 'Strongly Disagree' },\n    { name: '2', message: 'Disagree' },\n    { name: '3', message: 'Neutral' },\n    { name: '4', message: 'Agree' },\n    { name: '5', message: 'Strongly Agree' }\n  ],\n  margin: [0, 0, 2, 1],\n  choices: [\n    {\n      name: 'interface',\n      message: 'The website has a friendly interface.'\n    },\n    {\n      name: 'navigation',\n      message: 'The website is easy to navigate.'\n    },\n    {\n      name: 'images',\n      message: 'The website usually has good images.'\n    },\n    {\n      name: 'upload',\n      message: 'The website makes it easy to upload images.'\n    },\n    {\n      name: 'colors',\n      message: 'The website has a pleasing color palette.'\n    }\n  ]\n});\n\nprompt.run()\n  .then(value => console.log('ANSWERS:', value))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Scale](#scale-prompt)\n* [Snippet](#snippet-prompt)\n* [Select](#select-prompt)\n\n***\n\n### Scale Prompt\n\nA more compact version of the [Survey prompt](#survey-prompt), the Scale prompt allows the user to quickly provide feedback using a [Likert Scale](https://en.wikipedia.org/wiki/Likert_scale).\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/scale-prompt.gif\" alt=\"Enquirer Scale Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Scale } = require('enquirer');\nconst prompt = new Scale({\n  name: 'experience',\n  message: 'Please rate your experience',\n  scale: [\n    { name: '1', message: 'Strongly Disagree' },\n    { name: '2', message: 'Disagree' },\n    { name: '3', message: 'Neutral' },\n    { name: '4', message: 'Agree' },\n    { name: '5', message: 'Strongly Agree' }\n  ],\n  margin: [0, 0, 2, 1],\n  choices: [\n    {\n      name: 'interface',\n      message: 'The website has a friendly interface.',\n      initial: 2\n    },\n    {\n      name: 'navigation',\n      message: 'The website is easy to navigate.',\n      initial: 2\n    },\n    {\n      name: 'images',\n      message: 'The website usually has good images.',\n      initial: 2\n    },\n    {\n      name: 'upload',\n      message: 'The website makes it easy to upload images.',\n      initial: 2\n    },\n    {\n      name: 'colors',\n      message: 'The website has a pleasing color palette.',\n      initial: 2\n    }\n  ]\n});\n\nprompt.run()\n  .then(value => console.log('ANSWERS:', value))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [AutoComplete](#autocomplete-prompt)\n* [Select](#select-prompt)\n* [Survey](#survey-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Select Prompt\n\nPrompt that allows the user to select from a list of options.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/select-prompt.gif\" alt=\"Enquirer Select Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Select } = require('enquirer');\n\nconst prompt = new Select({\n  name: 'color',\n  message: 'Pick a flavor',\n  choices: ['apple', 'grape', 'watermelon', 'cherry', 'orange']\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [AutoComplete](#autocomplete-prompt)\n* [MultiSelect](#multiselect-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Sort Prompt\n\nPrompt that allows the user to sort items in a list.\n\n**Example**\n\nIn this [example](https://github.com/enquirer/enquirer/raw/master/examples/sort/prompt.js), custom styling is applied to the returned values to make it easier to see what's happening.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/sort-prompt.gif\" alt=\"Enquirer Sort Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst colors = require('ansi-colors');\nconst { Sort } = require('enquirer');\nconst prompt = new Sort({\n  name: 'colors',\n  message: 'Sort the colors in order of preference',\n  hint: 'Top is best, bottom is worst',\n  numbered: true,\n  choices: ['red', 'white', 'green', 'cyan', 'yellow'].map(n => ({\n    name: n,\n    message: colors[n](n)\n  }))\n});\n\nprompt.run()\n  .then(function(answer = []) {\n    console.log(answer);\n    console.log('Your preferred order of colors is:');\n    console.log(answer.map(key => colors[key](key)).join('\\n'));\n  })\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [List](#list-prompt)\n* [Select](#select-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Snippet Prompt\n\nPrompt that allows the user to replace placeholders in a snippet of code or text.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/snippet-prompt.gif\" alt=\"Prompts\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst semver = require('semver');\nconst { Snippet } = require('enquirer');\nconst prompt = new Snippet({\n  name: 'username',\n  message: 'Fill out the fields in package.json',\n  required: true,\n  fields: [\n    {\n      name: 'author_name',\n      message: 'Author Name'\n    },\n    {\n      name: 'version',\n      validate(value, state, item, index) {\n        if (item && item.name === 'version' && !semver.valid(value)) {\n          return prompt.styles.danger('version should be a valid semver value');\n        }\n        return true;\n      }\n    }\n  ],\n  template: `{\n  \"name\": \"\\${name}\",\n  \"description\": \"\\${description}\",\n  \"version\": \"\\${version}\",\n  \"homepage\": \"https://github.com/\\${username}/\\${name}\",\n  \"author\": \"\\${author_name} (https://github.com/\\${username})\",\n  \"repository\": \"\\${username}/\\${name}\",\n  \"license\": \"\\${license:ISC}\"\n}\n`\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer.result))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Survey](#survey-prompt)\n* [AutoComplete](#autocomplete-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Toggle Prompt\n\nPrompt that allows the user to toggle between two values then returns `true` or `false`.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/enquirer/enquirer/master/media/toggle-prompt.gif\" alt=\"Enquirer Toggle Prompt\" width=\"750\">\n</p>\n\n**Example Usage**\n\n```js\nconst { Toggle } = require('enquirer');\n\nconst prompt = new Toggle({\n  message: 'Want to answer?',\n  enabled: 'Yep',\n  disabled: 'Nope'\n});\n\nprompt.run()\n  .then(answer => console.log('Answer:', answer))\n  .catch(console.error);\n```\n\n**Related prompts**\n\n* [Confirm](#confirm-prompt)\n* [Input](#input-prompt)\n* [Sort](#sort-prompt)\n\n**↑ back to:** [Getting Started](#-getting-started) · [Prompts](#-prompts)\n\n***\n\n### Prompt Types\n\nThere are 5 (soon to be 6!) type classes:\n\n* [ArrayPrompt](#arrayprompt)\n  - [Options](#options)\n  - [Properties](#properties)\n  - [Methods](#methods)\n  - [Choices](#choices)\n  - [Defining choices](#defining-choices)\n  - [Choice properties](#choice-properties)\n  - [Related prompts](#related-prompts)\n* [AuthPrompt](#authprompt)\n* [BooleanPrompt](#booleanprompt)\n* DatePrompt (Coming Soon!)\n* [NumberPrompt](#numberprompt)\n* [StringPrompt](#stringprompt)\n\nEach type is a low-level class that may be used as a starting point for creating higher level prompts. Continue reading to learn how.\n\n### ArrayPrompt\n\nThe `ArrayPrompt` class is used for creating prompts that display a list of choices in the terminal. For example, Enquirer uses this class as the basis for the [Select](#select) and [Survey](#survey) prompts.\n\n#### Options\n\nIn addition to the [options](#options) available to all prompts, Array prompts also support the following options.\n\n| **Option**  | **Required?** | **Type**        | **Description**                                                                                                         |\n| ----------- | ------------- | --------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| `autofocus` | `no`          | `string\\|number` | The index or name of the choice that should have focus when the prompt loads. Only one choice may have focus at a time. |  |\n| `stdin`     | `no`          | `stream`        | The input stream to use for emitting keypress events. Defaults to `process.stdin`.                                      |\n| `stdout`    | `no`          | `stream`        | The output stream to use for writing the prompt to the terminal. Defaults to `process.stdout`.                          |\n|             |\n\n#### Properties\n\nArray prompts have the following instance properties and getters.\n\n| **Property name** | **Type**                                                                          | **Description**                                                                                                                                                                                                                                                                                                                                    |\n| ----------------- | --------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `choices`         | `array`                                                                           | Array of choices that have been normalized from choices passed on the prompt options.                                                                                                                                                                                                                                                              |\n| `cursor`          | `number`                                                                          | Position of the cursor relative to the _user input (string)_.                                                                                                                                                                                                                                                                                      |\n| `enabled`         | `array`                                                                           | Returns an array of enabled choices.                                                                                                                                                                                                                                                                                                               |\n| `focused`         | `array`                                                                           | Returns the currently selected choice in the visible list of choices. This is similar to the concept of focus in HTML and CSS. Focused choices are always visible (on-screen). When a list of choices is longer than the list of visible choices, and an off-screen choice is _focused_, the list will scroll to the focused choice and re-render. |\n| `focused`         | Gets the currently selected choice. Equivalent to `prompt.choices[prompt.index]`. |\n| `index`           | `number`                                                                          | Position of the pointer in the _visible list (array) of choices_.                                                                                                                                                                                                                                                                                  |\n| `limit`           | `number`                                                                          | The number of choices to display on-screen.                                                                                                                                                                                                                                                                                                        |\n| `selected`        | `array`                                                                           | Either a list of enabled choices (when `options.multiple` is true) or the currently focused choice.                                                                                                                                                                                                                                                |\n| `visible`         | `string`                                                                          |                                                                                                                                                                                                                                                                                                                                                    |\n\n#### Methods\n\n| **Method**    | **Description**                                                                                                                                                                                |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `pointer()`   | Returns the visual symbol to use to identify the choice that currently has focus. The `❯` symbol is often used for this. The pointer is not always visible, as with the `autocomplete` prompt. |\n| `indicator()` | Returns the visual symbol that indicates whether or not a choice is checked/enabled.                                                                                                           |\n| `focus()`     | Sets focus on a choice, if it can be focused.                                                                                                                                                  |\n\n#### Choices\n\nArray prompts support the `choices` option, which is the array of choices users will be able to select from when rendered in the terminal.\n\n**Type**: `string|object`\n\n**Example**\n\n```js\nconst { prompt } = require('enquirer');\n\nconst questions = [{\n  type: 'select',\n  name: 'color',\n  message: 'Favorite color?',\n  initial: 1,\n  choices: [\n    { name: 'red',   message: 'Red',   value: '#ff0000' }, //<= choice object\n    { name: 'green', message: 'Green', value: '#00ff00' }, //<= choice object\n    { name: 'blue',  message: 'Blue',  value: '#0000ff' }  //<= choice object\n  ]\n}];\n\nlet answers = await prompt(questions);\nconsole.log('Answer:', answers.color);\n```\n\n#### Defining choices\n\nWhether defined as a string or object, choices are normalized to the following interface:\n\n```js\n{\n  name: string;\n  message: string | undefined;\n  value: string | undefined;\n  hint: string | undefined;\n  disabled: boolean | string | undefined;\n}\n```\n\n**Example**\n\n```js\nconst question = {\n  name: 'fruit',\n  message: 'Favorite fruit?',\n  choices: ['Apple', 'Orange', 'Raspberry']\n};\n```\n\nNormalizes to the following when the prompt is run:\n\n```js\nconst question = {\n  name: 'fruit',\n  message: 'Favorite fruit?',\n  choices: [\n    { name: 'Apple', message: 'Apple', value: 'Apple' },\n    { name: 'Orange', message: 'Orange', value: 'Orange' },\n    { name: 'Raspberry', message: 'Raspberry', value: 'Raspberry' }\n  ]\n};\n```\n\n#### Choice properties\n\nThe following properties are supported on `choice` objects.\n\n| **Option**  | **Type**          | **Description**                                                                                                                                                                                     |\n| ----------- | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`      | `string`          | The unique key to identify a choice                                                                                                                                                                 |\n| `message`   | `string`          | The message to display in the terminal. `name` is used when this is undefined.                                                                                                                      |\n| `value`     | `string`          | Value to associate with the choice. Useful for creating key-value pairs from user choices. `name` is used when this is undefined.                                                                   |\n| `choices`   | `array`           | Array of \"child\" choices.                                                                                                                                                                           |\n| `hint`      | `string`          | Help message to display next to a choice.                                                                                                                                                           |\n| `role`      | `string`          | Determines how the choice will be displayed. Currently the only role supported is `separator`. Additional roles may be added in the future (like `heading`, etc). Please create a [feature request] |\n| `enabled`   | `boolean`         | Enabled a choice by default. This is only supported when `options.multiple` is true or on prompts that support multiple choices, like [MultiSelect](#-multiselect).                                 |\n| `disabled`  | `boolean\\|string`  | Disable a choice so that it cannot be selected. This value may either be `true`, `false`, or a message to display.                                                                                  |\n| `indicator` | `string\\|function` | Custom indicator to render for a choice (like a check or radio button).                                                                                                                             |\n\n#### Related prompts\n\n* [AutoComplete](#autocomplete-prompt)\n* [Form](#form-prompt)\n* [MultiSelect](#multiselect-prompt)\n* [Select](#select-prompt)\n* [Survey](#survey-prompt)\n\n***\n\n### AuthPrompt\n\nThe `AuthPrompt` is used to create prompts to log in user using any authentication method. For example, Enquirer uses this class as the basis for the [BasicAuth Prompt](#basicauth-prompt). You can also find prompt examples in `examples/auth/` folder that utilizes `AuthPrompt` to create OAuth based authentication prompt or a prompt that authenticates using time-based OTP, among others.\n\n`AuthPrompt` has a factory function that creates an instance of `AuthPrompt` class and it expects an `authenticate` function, as an argument, which overrides the `authenticate` function of the `AuthPrompt` class.\n\n#### Methods\n\n| **Method**         | **Description**                                                                                                                                                                                          |\n| -------------      | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `authenticate()`   | Contain all the authentication logic. This function should be overridden to implement custom authentication logic. The default `authenticate` function throws an error if no other function is provided. |\n\n#### Choices\n\nAuth prompt supports the `choices` option, which is the similar to the choices used in [Form Prompt](#form-prompt).\n\n**Example**\n\n```js\nconst { AuthPrompt } = require('enquirer');\n\nfunction authenticate(value, state) {\n  if (value.username === this.options.username && value.password === this.options.password) {\n    return true;\n  }\n  return false;\n}\n\nconst CustomAuthPrompt = AuthPrompt.create(authenticate);\n\nconst prompt = new CustomAuthPrompt({\n  name: 'password',\n  message: 'Please enter your password',\n  username: 'rajat-sr',\n  password: '1234567',\n  choices: [\n    { name: 'username', message: 'username' },\n    { name: 'password', message: 'password' }\n  ]\n});\n\nprompt\n  .run()\n  .then(answer => console.log('Authenticated?', answer))\n  .catch(console.error);\n```\n\n#### Related prompts\n\n* [BasicAuth Prompt](#basicauth-prompt)\n\n***\n\n### BooleanPrompt\n\nThe `BooleanPrompt` class is used for creating prompts that display and return a boolean value.\n\n```js\nconst { BooleanPrompt } = require('enquirer');\n\nconst  prompt = new  BooleanPrompt({\n  header:  '========================',\n  message:  'Do you love enquirer?',\n  footer:  '========================',\n});\n\nprompt.run()\n  .then(answer  =>  console.log('Selected:', answer))\n  .catch(console.error);\n```\n\n**Returns**: `boolean`\n\n***\n\n### NumberPrompt\n\nThe `NumberPrompt` class is used for creating prompts that display and return a numerical value.\n\n```js\nconst { NumberPrompt } = require('enquirer');\n\nconst  prompt = new  NumberPrompt({\n  header:  '************************',\n  message:  'Input the Numbers:',\n  footer:  '************************',\n});\n\nprompt.run()\n  .then(answer  =>  console.log('Numbers are:', answer))\n  .catch(console.error);\n```\n\n**Returns**: `string|number` (number, or number formatted as a string)\n\n***\n\n### StringPrompt\n\nThe `StringPrompt` class is used for creating prompts that display and return a string value.\n\n```js\nconst { StringPrompt } = require('enquirer');\n\nconst prompt = new StringPrompt({\n  header: '************************',\n  message: 'Input the String:',\n  footer: '************************'\n});\n\nprompt.run()\n  .then(answer => console.log('String is:', answer))\n  .catch(console.error);\n```\n\n**Returns**: `string`\n\n<br>\n\n## ❯ Custom prompts\n\nWith Enquirer 2.0, custom prompts are easier than ever to create and use.\n\n**How do I create a custom prompt?**\n\nCustom prompts are created by extending either:\n\n* Enquirer's `Prompt` class\n* one of the built-in [prompts](#-prompts), or\n* low-level [types](#-types).\n\n<!-- Example: HaiKarate Custom Prompt -->\n\n```js\nconst { Prompt } = require('enquirer');\n\nclass HaiKarate extends Prompt {\n  constructor(options = {}) {\n    super(options);\n    this.value = options.initial || 0;\n    this.cursorHide();\n  }\n  up() {\n    this.value++;\n    this.render();\n  }\n  down() {\n    this.value--;\n    this.render();\n  }\n  render() {\n    this.clear(); // clear previously rendered prompt from the terminal\n    this.write(`${this.state.message}: ${this.value}`);\n  }\n}\n\n// Use the prompt by creating an instance of your custom prompt class.\nconst prompt = new HaiKarate({\n  message: 'How many sprays do you want?',\n  initial: 10\n});\n\nprompt.run()\n  .then(answer => console.log('Sprays:', answer))\n  .catch(console.error);\n```\n\nIf you want to be able to specify your prompt by `type` so that it may be used alongside other prompts, you will need to first create an instance of `Enquirer`.\n\n```js\nconst Enquirer = require('enquirer');\nconst enquirer = new Enquirer();\n```\n\nThen use the `.register()` method to add your custom prompt.\n\n```js\nenquirer.register('haikarate', HaiKarate);\n```\n\nNow you can do the following when defining \"questions\".\n\n```js\nlet spritzer = require('cologne-drone');\nlet answers = await enquirer.prompt([\n  {\n    type: 'haikarate',\n    name: 'cologne',\n    message: 'How many sprays do you need?',\n    initial: 10,\n    async onSubmit(name, value) {\n      await spritzer.activate(value); //<= activate drone\n      return value;\n    }\n  }\n]);\n```\n\n<br>\n\n## ❯ Key Bindings\n\n### All prompts\n\nThese key combinations may be used with all prompts.\n\n| **command**                      | **description**                        |\n| -------------------------------- | -------------------------------------- |\n| <kbd>ctrl</kbd>  +  <kbd>c</kbd> | Cancel the prompt.                     |\n| <kbd>ctrl</kbd> + <kbd>g</kbd>   | Reset the prompt to its initial state. |\n\n<br>\n\n### Move cursor\n\nThese combinations may be used on prompts that support user input (eg. [input prompt](#input-prompt), [password prompt](#password-prompt), and [invisible prompt](#invisible-prompt)).\n\n| **command**                    | **description**                          |\n| ------------------------------ | ---------------------------------------- |\n| <kbd>left</kbd>                | Move the cursor back one character.      |\n| <kbd>right</kbd>               | Move the cursor forward one character.   |\n| <kbd>ctrl</kbd> + <kbd>a</kbd> | Move cursor to the start of the line     |\n| <kbd>ctrl</kbd> + <kbd>e</kbd> | Move cursor to the end of the line       |\n| <kbd>ctrl</kbd> + <kbd>b</kbd> | Move cursor back one character           |\n| <kbd>ctrl</kbd> + <kbd>f</kbd> | Move cursor forward one character        |\n| <kbd>ctrl</kbd> + <kbd>x</kbd> | Toggle between first and cursor position |\n\n<br>\n\n### Edit Input\n\nThese key combinations may be used on prompts that support user input (eg. [input prompt](#input-prompt), [password prompt](#password-prompt), and [invisible prompt](#invisible-prompt)).\n\n| **command**                    | **description**                          |\n| ------------------------------ | ---------------------------------------- |\n| <kbd>ctrl</kbd> + <kbd>a</kbd> | Move cursor to the start of the line     |\n| <kbd>ctrl</kbd> + <kbd>e</kbd> | Move cursor to the end of the line       |\n| <kbd>ctrl</kbd> + <kbd>b</kbd> | Move cursor back one character           |\n| <kbd>ctrl</kbd> + <kbd>f</kbd> | Move cursor forward one character        |\n| <kbd>ctrl</kbd> + <kbd>x</kbd> | Toggle between first and cursor position |\n\n<br>\n\n| **command (Mac)**                   | **command (Windows)**            | **description**                                                                                                                           |\n| ----------------------------------- | -------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| <kbd>delete</kbd>                   | <kbd>backspace</kbd>             | Delete one character to the left.                                                                                                         |\n| <kbd>fn</kbd> + <kbd>delete</kbd>   | <kbd>delete</kbd>                | Delete one character to the right.                                                                                                        |\n| <kbd>option</kbd> + <kbd>up</kbd>   | <kbd>alt</kbd> + <kbd>up</kbd>   | Scroll to the previous item in history ([Input prompt](#input-prompt) only, when [history is enabled](examples/input/option-history.js)). |\n| <kbd>option</kbd> + <kbd>down</kbd> | <kbd>alt</kbd> + <kbd>down</kbd> | Scroll to the next item in history ([Input prompt](#input-prompt) only, when [history is enabled](examples/input/option-history.js)).     |\n\n### Select choices\n\nThese key combinations may be used on prompts that support _multiple_ choices, such as the [multiselect prompt](#multiselect-prompt), or the [select prompt](#select-prompt) when the `multiple` options is true.\n\n| **command**       | **description**                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------- |\n| <kbd>space</kbd>  | Toggle the currently selected choice when `options.multiple` is true.                                                |\n| <kbd>number</kbd> | Move the pointer to the choice at the given index. Also toggles the selected choice when `options.multiple` is true. |\n| <kbd>a</kbd>      | Toggle all choices to be enabled or disabled.                                                                        |\n| <kbd>i</kbd>      | Invert the current selection of choices.                                                                             |\n| <kbd>g</kbd>      | Toggle the current choice group.                                                                                     |\n\n<br>\n\n### Hide/show choices\n\n| **command**                     | **description**                                |\n| ------------------------------- | ---------------------------------------------- |\n| <kbd>fn</kbd> + <kbd>up</kbd>   | Decrease the number of visible choices by one. |\n| <kbd>fn</kbd> + <kbd>down</kbd> | Increase the number of visible choices by one. |\n\n<br>\n\n### Move/lock Pointer\n\n| **command**                        | **description**                                                                                                      |\n| ---------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| <kbd>number</kbd>                  | Move the pointer to the choice at the given index. Also toggles the selected choice when `options.multiple` is true. |\n| <kbd>up</kbd>                      | Move the pointer up.                                                                                                 |\n| <kbd>down</kbd>                    | Move the pointer down.                                                                                               |\n| <kbd>ctrl</kbd> + <kbd>a</kbd>     | Move the pointer to the first _visible_ choice.                                                                      |\n| <kbd>ctrl</kbd> + <kbd>e</kbd>     | Move the pointer to the last _visible_ choice.                                                                       |\n| <kbd>shift</kbd> + <kbd>up</kbd>   | Scroll up one choice without changing pointer position (locks the pointer while scrolling).                          |\n| <kbd>shift</kbd> + <kbd>down</kbd> | Scroll down one choice without changing pointer position (locks the pointer while scrolling).                        |\n\n<br>\n\n| **command (Mac)**                | **command (Windows)** | **description**                                            |\n| -------------------------------- | --------------------- | ---------------------------------------------------------- |\n| <kbd>fn</kbd> + <kbd>left</kbd>  | <kbd>home</kbd>       | Move the pointer to the first choice in the choices array. |\n| <kbd>fn</kbd> + <kbd>right</kbd> | <kbd>end</kbd>        | Move the pointer to the last choice in the choices array.  |\n\n<br>\n\n## ❯ Release History\n\nPlease see [CHANGELOG.md](CHANGELOG.md).\n\n## ❯ Performance\n\n### System specs\n\nMacBook Pro, Intel Core i7, 2.5 GHz, 16 GB.\n\n### Load time\n\nTime it takes for the module to load the first time (average of 3 runs):\n\n```\nenquirer: 4.013ms\ninquirer: 286.717ms\n```\n\n<br>\n\n## ❯ About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Todo\n\nWe're currently working on documentation for the following items. Please star and watch the repository for updates!\n\n* [ ] Customizing symbols\n* [ ] Customizing styles (palette)\n* [ ] Customizing rendered input\n* [ ] Customizing returned values\n* [ ] Customizing key bindings\n* [ ] Question validation\n* [ ] Choice validation\n* [ ] Skipping questions\n* [ ] Async choices\n* [ ] Async timers: loaders, spinners and other animations\n* [ ] Links to examples\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n```sh\n$ yarn && yarn test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n#### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 283 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 82  | [doowb](https://github.com/doowb) |  \n| 32  | [rajat-sr](https://github.com/rajat-sr) |  \n| 20  | [318097](https://github.com/318097) |  \n| 15  | [g-plane](https://github.com/g-plane) |  \n| 12  | [pixelass](https://github.com/pixelass) |  \n| 5   | [adityavyas611](https://github.com/adityavyas611) |  \n| 5   | [satotake](https://github.com/satotake) |  \n| 3   | [tunnckoCore](https://github.com/tunnckoCore) |  \n| 3   | [Ovyerus](https://github.com/Ovyerus) |  \n| 3   | [sw-yx](https://github.com/sw-yx) |  \n| 2   | [DanielRuf](https://github.com/DanielRuf) |  \n| 2   | [GabeL7r](https://github.com/GabeL7r) |  \n| 1   | [AlCalzone](https://github.com/AlCalzone) |  \n| 1   | [hipstersmoothie](https://github.com/hipstersmoothie) |  \n| 1   | [danieldelcore](https://github.com/danieldelcore) |  \n| 1   | [ImgBotApp](https://github.com/ImgBotApp) |  \n| 1   | [jsonkao](https://github.com/jsonkao) |  \n| 1   | [knpwrs](https://github.com/knpwrs) |  \n| 1   | [yeskunall](https://github.com/yeskunall) |  \n| 1   | [mischah](https://github.com/mischah) |  \n| 1   | [renarsvilnis](https://github.com/renarsvilnis) |  \n| 1   | [sbugert](https://github.com/sbugert) |  \n| 1   | [stephencweiss](https://github.com/stephencweiss) |  \n| 1   | [skellock](https://github.com/skellock) |  \n| 1   | [whxaxes](https://github.com/whxaxes) |  \n\n#### Author\n\n**Jon Schlinkert**\n\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n#### Credit\n\nThanks to [derhuerst](https://github.com/derhuerst), creator of prompt libraries such as [prompt-skeleton](https://github.com/derhuerst/prompt-skeleton), which influenced some of the concepts we used in our prompts.\n\n#### License\n\nCopyright © 2018-present, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016-present, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/enquirer/-/enquirer-2.3.6.tgz#2a7fe5dd634a1e4125a975ec994ff5456dc3734d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/enquirer/-/enquirer-2.3.6.tgz",
    "hash": "2a7fe5dd634a1e4125a975ec994ff5456dc3734d",
    "integrity": "sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg==",
    "registry": "npm",
    "packageName": "enquirer",
    "cacheIntegrity": "sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg== sha1-Kn/l3WNKHkElqXXsmU/1RW3Dc00="
  },
  "registry": "npm",
  "hash": "2a7fe5dd634a1e4125a975ec994ff5456dc3734d"
}