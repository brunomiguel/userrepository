{
  "manifest": {
    "name": "blueimp-load-image",
    "version": "5.16.0",
    "title": "JavaScript Load Image",
    "description": "JavaScript Load Image is a library to load images provided as File or Blob objects or via URL. It returns an optionally scaled, cropped or rotated HTML img or canvas element. It also provides methods to parse image metadata to extract IPTC and Exif tags as well as embedded thumbnail images, to overwrite the Exif Orientation value and to restore the complete image header after resizing.",
    "keywords": [
      "javascript",
      "load",
      "loading",
      "image",
      "file",
      "blob",
      "url",
      "scale",
      "crop",
      "rotate",
      "img",
      "canvas",
      "meta",
      "exif",
      "orientation",
      "thumbnail",
      "iptc"
    ],
    "homepage": "https://github.com/blueimp/JavaScript-Load-Image",
    "author": {
      "name": "Sebastian Tschan",
      "url": "https://blueimp.net"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/blueimp/JavaScript-Load-Image.git"
    },
    "license": "MIT",
    "devDependencies": {
      "blueimp-canvas-to-blob": "3",
      "chai": "4",
      "eslint": "7",
      "eslint-config-blueimp": "2",
      "eslint-config-prettier": "8",
      "eslint-plugin-jsdoc": "36",
      "eslint-plugin-prettier": "4",
      "jquery": "1",
      "mocha": "9",
      "prettier": "2",
      "promise-polyfill": "8",
      "uglify-js": "3"
    },
    "eslintConfig": {
      "extends": [
        "blueimp",
        "plugin:jsdoc/recommended",
        "plugin:prettier/recommended"
      ],
      "env": {
        "browser": true
      }
    },
    "eslintIgnore": [
      "js/*.min.js",
      "js/vendor",
      "test/vendor"
    ],
    "prettier": {
      "arrowParens": "avoid",
      "proseWrap": "always",
      "semi": false,
      "singleQuote": true,
      "trailingComma": "none"
    },
    "scripts": {
      "lint": "eslint .",
      "preunit": "bin/sync-vendor-libs.sh",
      "unit": "docker-compose run --rm mocha",
      "test": "npm run lint && npm run unit",
      "posttest": "docker-compose down -v",
      "build": "cd js && uglifyjs load-image.js load-image-scale.js load-image-meta.js load-image-fetch.js load-image-orientation.js load-image-exif.js load-image-exif-map.js load-image-iptc.js load-image-iptc-map.js --ie8 -c -m -o load-image.all.min.js --source-map url=load-image.all.min.js.map",
      "preversion": "npm test",
      "version": "npm run build && git add -A js",
      "postversion": "git push --tags origin master master:gh-pages && npm publish"
    },
    "files": [
      "js/*.js",
      "js/*.js.map"
    ],
    "main": "js/index.js",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-blueimp-load-image-5.16.0-16b763f57e6725f8865517bca8eb7c3dc7d41e09-integrity/node_modules/blueimp-load-image/package.json",
    "readmeFilename": "README.md",
    "readme": "# JavaScript Load Image\n\n> A JavaScript library to load and transform image files.\n\n## Contents\n\n- [Demo](https://blueimp.github.io/JavaScript-Load-Image/)\n- [Description](#description)\n- [Setup](#setup)\n- [Usage](#usage)\n  - [Image loading](#image-loading)\n  - [Image scaling](#image-scaling)\n- [Requirements](#requirements)\n- [Browser support](#browser-support)\n- [API](#api)\n  - [Callback](#callback)\n    - [Function signature](#function-signature)\n    - [Cancel image loading](#cancel-image-loading)\n    - [Callback arguments](#callback-arguments)\n    - [Error handling](#error-handling)\n  - [Promise](#promise)\n- [Options](#options)\n  - [maxWidth](#maxwidth)\n  - [maxHeight](#maxheight)\n  - [minWidth](#minwidth)\n  - [minHeight](#minheight)\n  - [sourceWidth](#sourcewidth)\n  - [sourceHeight](#sourceheight)\n  - [top](#top)\n  - [right](#right)\n  - [bottom](#bottom)\n  - [left](#left)\n  - [contain](#contain)\n  - [cover](#cover)\n  - [aspectRatio](#aspectratio)\n  - [pixelRatio](#pixelratio)\n  - [downsamplingRatio](#downsamplingratio)\n  - [imageSmoothingEnabled](#imagesmoothingenabled)\n  - [imageSmoothingQuality](#imagesmoothingquality)\n  - [crop](#crop)\n  - [orientation](#orientation)\n  - [meta](#meta)\n  - [canvas](#canvas)\n  - [crossOrigin](#crossorigin)\n  - [noRevoke](#norevoke)\n- [Metadata parsing](#metadata-parsing)\n  - [Image head](#image-head)\n  - [Exif parser](#exif-parser)\n    - [Exif Thumbnail](#exif-thumbnail)\n    - [Exif IFD](#exif-ifd)\n    - [GPSInfo IFD](#gpsinfo-ifd)\n    - [Interoperability IFD](#interoperability-ifd)\n    - [Exif parser options](#exif-parser-options)\n  - [Exif writer](#exif-writer)\n  - [IPTC parser](#iptc-parser)\n    - [IPTC parser options](#iptc-parser-options)\n- [License](#license)\n- [Credits](#credits)\n\n## Description\n\nJavaScript Load Image is a library to load images provided as `File` or `Blob`\nobjects or via `URL`. It returns an optionally **scaled**, **cropped** or\n**rotated** HTML `img` or `canvas` element.\n\nIt also provides methods to parse image metadata to extract\n[IPTC](https://iptc.org/standards/photo-metadata/) and\n[Exif](https://en.wikipedia.org/wiki/Exif) tags as well as embedded thumbnail\nimages, to overwrite the Exif Orientation value and to restore the complete\nimage header after resizing.\n\n## Setup\n\nInstall via [NPM](https://www.npmjs.com/package/blueimp-load-image):\n\n```sh\nnpm install blueimp-load-image\n```\n\nThis will install the JavaScript files inside\n`./node_modules/blueimp-load-image/js/` relative to your current directory, from\nwhere you can copy them into a folder that is served by your web server.\n\nNext include the combined and minified JavaScript Load Image script in your HTML\nmarkup:\n\n```html\n<script src=\"js/load-image.all.min.js\"></script>\n```\n\nOr alternatively, choose which components you want to include:\n\n```html\n<!-- required for all operations -->\n<script src=\"js/load-image.js\"></script>\n\n<!-- required for scaling, cropping and as dependency for rotation -->\n<script src=\"js/load-image-scale.js\"></script>\n\n<!-- required to parse meta data and to restore the complete image head -->\n<script src=\"js/load-image-meta.js\"></script>\n\n<!-- required to parse meta data from images loaded via URL -->\n<script src=\"js/load-image-fetch.js\"></script>\n\n<!-- required for rotation and cross-browser image orientation -->\n<script src=\"js/load-image-orientation.js\"></script>\n\n<!-- required to parse Exif tags and cross-browser image orientation -->\n<script src=\"js/load-image-exif.js\"></script>\n\n<!-- required to display text mappings for Exif tags -->\n<script src=\"js/load-image-exif-map.js\"></script>\n\n<!-- required to parse IPTC tags -->\n<script src=\"js/load-image-iptc.js\"></script>\n\n<!-- required to display text mappings for IPTC tags -->\n<script src=\"js/load-image-iptc-map.js\"></script>\n```\n\n## Usage\n\n### Image loading\n\nIn your application code, use the `loadImage()` function with\n[callback](#callback) style:\n\n```js\ndocument.getElementById('file-input').onchange = function () {\n  loadImage(\n    this.files[0],\n    function (img) {\n      document.body.appendChild(img)\n    },\n    { maxWidth: 600 } // Options\n  )\n}\n```\n\nOr use the [Promise](#promise) based API like this ([requires](#requirements) a\npolyfill for older browsers):\n\n```js\ndocument.getElementById('file-input').onchange = function () {\n  loadImage(this.files[0], { maxWidth: 600 }).then(function (data) {\n    document.body.appendChild(data.image)\n  })\n}\n```\n\nWith\n[async/await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n(requires a modern browser or a code transpiler like\n[Babel](https://babeljs.io/) or [TypeScript](https://www.typescriptlang.org/)):\n\n```js\ndocument.getElementById('file-input').onchange = async function () {\n  let data = await loadImage(this.files[0], { maxWidth: 600 })\n  document.body.appendChild(data.image)\n}\n```\n\n### Image scaling\n\nIt is also possible to use the image scaling functionality directly with an\nexisting image:\n\n```js\nvar scaledImage = loadImage.scale(\n  img, // img or canvas element\n  { maxWidth: 600 }\n)\n```\n\n## Requirements\n\nThe JavaScript Load Image library has zero dependencies, but benefits from the\nfollowing two\n[polyfills](https://developer.mozilla.org/en-US/docs/Glossary/Polyfill):\n\n- [blueimp-canvas-to-blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob)\n  for browsers without native\n  [HTMLCanvasElement.toBlob](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n  support, to create `Blob` objects out of `canvas` elements.\n- [promise-polyfill](https://github.com/taylorhakes/promise-polyfill) to be able\n  to use the\n  [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  based `loadImage` API in Browsers without native `Promise` support.\n\n## Browser support\n\nBrowsers which implement the following APIs support all options:\n\n- Loading images from File and Blob objects:\n  - [URL.createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL)\n    or\n    [FileReader.readAsDataURL](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL)\n- Parsing meta data:\n  - [FileReader.readAsArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer)\n  - [Blob.slice](https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice)\n  - [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)\n    (no [BigInt](https://developer.mozilla.org/en-US/docs/Glossary/BigInt)\n    support required)\n- Parsing meta data from images loaded via URL:\n  - [fetch Response.blob](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob)\n    or\n    [XMLHttpRequest.responseType blob](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType#blob)\n- Promise based API:\n  - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\nThis includes (but is not limited to) the following browsers:\n\n- Chrome 32+\n- Firefox 29+\n- Safari 8+\n- Mobile Chrome 42+ (Android)\n- Mobile Firefox 50+ (Android)\n- Mobile Safari 8+ (iOS)\n- Edge 74+\n- Edge Legacy 12+\n- Internet Explorer 10+ `*`\n\n`*` Internet Explorer [requires](#requirements) a polyfill for the `Promise`\nbased API.\n\nLoading an image from a URL and applying transformations (scaling, cropping and\nrotating - except `orientation:true`, which requires reading meta data) is\nsupported by all browsers which implement the\n[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)\ninterface.\n\nLoading an image from a URL and scaling it in size is supported by all browsers\nwhich implement the\n[img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) element and\nhas been tested successfully with browser engines as old as Internet Explorer 5\n(via\n[IE11's emulation mode](<https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/samples/dn255001(v=vs.85)>)).\n\nThe `loadImage()` function applies options using\n[progressive enhancement](https://en.wikipedia.org/wiki/Progressive_enhancement)\nand falls back to a configuration that is supported by the browser, e.g. if the\n`canvas` element is not supported, an equivalent `img` element is returned.\n\n## API\n\n### Callback\n\n#### Function signature\n\nThe `loadImage()` function accepts a\n[File](https://developer.mozilla.org/en-US/docs/Web/API/File) or\n[Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object or an image\nURL as first argument.\n\nIf a [File](https://developer.mozilla.org/en-US/docs/Web/API/File) or\n[Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) is passed as\nparameter, it returns an HTML `img` element if the browser supports the\n[URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) API, alternatively a\n[FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) object\nif the `FileReader` API is supported, or `false`.\n\nIt always returns an HTML\n[img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img) element\nwhen passing an image URL:\n\n```js\nvar loadingImage = loadImage(\n  'https://example.org/image.png',\n  function (img) {\n    document.body.appendChild(img)\n  },\n  { maxWidth: 600 }\n)\n```\n\n#### Cancel image loading\n\nSome browsers (e.g. Chrome) will cancel the image loading process if the `src`\nproperty of an `img` element is changed.  \nTo avoid unnecessary requests, we can use the\n[data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\nof a 1x1 pixel transparent GIF image as `src` target to cancel the original\nimage download.\n\nTo disable callback handling, we can also unset the image event handlers and for\nmaximum browser compatibility, cancel the file reading process if the returned\nobject is a\n[FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\ninstance:\n\n```js\nvar loadingImage = loadImage(\n  'https://example.org/image.png',\n  function (img) {\n    document.body.appendChild(img)\n  },\n  { maxWidth: 600 }\n)\n\nif (loadingImage) {\n  // Unset event handling for the loading image:\n  loadingImage.onload = loadingImage.onerror = null\n\n  // Cancel image loading process:\n  if (loadingImage.abort) {\n    // FileReader instance, stop the file reading process:\n    loadingImage.abort()\n  } else {\n    // HTMLImageElement element, cancel the original image request by changing\n    // the target source to the data URL of a 1x1 pixel transparent image GIF:\n    loadingImage.src =\n      'data:image/gif;base64,' +\n      'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7'\n  }\n}\n```\n\n**Please note:**  \nThe `img` element (or `FileReader` instance) for the loading image is only\nreturned when using the callback style API and not available with the\n[Promise](#promise) based API.\n\n#### Callback arguments\n\nFor the callback style API, the second argument to `loadImage()` must be a\n`callback` function, which is called when the image has been loaded or an error\noccurred while loading the image.\n\nThe callback function is passed two arguments:\n\n1. An HTML [img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\n   element or\n   [canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)\n   element, or an\n   [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) object of\n   type `error`.\n2. An object with the original image dimensions as properties and potentially\n   additional [metadata](#metadata-parsing).\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    document.body.appendChild(img)\n    console.log('Original image width: ', data.originalWidth)\n    console.log('Original image height: ', data.originalHeight)\n  },\n  { maxWidth: 600, meta: true }\n)\n```\n\n**Please note:**  \nThe original image dimensions reflect the natural width and height of the loaded\nimage before applying any transformation.  \nFor consistent values across browsers, [metadata](#metadata-parsing) parsing has\nto be enabled via `meta:true`, so `loadImage` can detect automatic image\norientation and normalize the dimensions.\n\n#### Error handling\n\nExample code implementing error handling:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    if (img.type === 'error') {\n      console.error('Error loading image file')\n    } else {\n      document.body.appendChild(img)\n    }\n  },\n  { maxWidth: 600 }\n)\n```\n\n### Promise\n\nIf the `loadImage()` function is called without a `callback` function as second\nargument and the\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nAPI is available, it returns a `Promise` object:\n\n```js\nloadImage(fileOrBlobOrUrl, { maxWidth: 600, meta: true })\n  .then(function (data) {\n    document.body.appendChild(data.image)\n    console.log('Original image width: ', data.originalWidth)\n    console.log('Original image height: ', data.originalHeight)\n  })\n  .catch(function (err) {\n    // Handling image loading errors\n    console.log(err)\n  })\n```\n\nThe `Promise` resolves with an object with the following properties:\n\n- `image`: An HTML\n  [img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) or\n  [canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) element.\n- `originalWidth`: The original width of the image.\n- `originalHeight`: The original height of the image.\n\nPlease also read the note about original image dimensions normalization in the\n[callback arguments](#callback-arguments) section.\n\nIf [metadata](#metadata-parsing) has been parsed, additional properties might be\npresent on the object.\n\nIf image loading fails, the `Promise` rejects with an\n[Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) object of type\n`error`.\n\n## Options\n\nThe optional options argument to `loadImage()` allows to configure the image\nloading.\n\nIt can be used the following way with the callback style:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img) {\n    document.body.appendChild(img)\n  },\n  {\n    maxWidth: 600,\n    maxHeight: 300,\n    minWidth: 100,\n    minHeight: 50,\n    canvas: true\n  }\n)\n```\n\nOr the following way with the `Promise` based API:\n\n```js\nloadImage(fileOrBlobOrUrl, {\n  maxWidth: 600,\n  maxHeight: 300,\n  minWidth: 100,\n  minHeight: 50,\n  canvas: true\n}).then(function (data) {\n  document.body.appendChild(data.image)\n})\n```\n\nAll settings are optional. By default, the image is returned as HTML `img`\nelement without any image size restrictions.\n\n### maxWidth\n\nDefines the maximum width of the `img`/`canvas` element.\n\n### maxHeight\n\nDefines the maximum height of the `img`/`canvas` element.\n\n### minWidth\n\nDefines the minimum width of the `img`/`canvas` element.\n\n### minHeight\n\nDefines the minimum height of the `img`/`canvas` element.\n\n### sourceWidth\n\nThe width of the sub-rectangle of the source image to draw into the destination\ncanvas.  \nDefaults to the source image width and requires `canvas: true`.\n\n### sourceHeight\n\nThe height of the sub-rectangle of the source image to draw into the destination\ncanvas.  \nDefaults to the source image height and requires `canvas: true`.\n\n### top\n\nThe top margin of the sub-rectangle of the source image.  \nDefaults to `0` and requires `canvas: true`.\n\n### right\n\nThe right margin of the sub-rectangle of the source image.  \nDefaults to `0` and requires `canvas: true`.\n\n### bottom\n\nThe bottom margin of the sub-rectangle of the source image.  \nDefaults to `0` and requires `canvas: true`.\n\n### left\n\nThe left margin of the sub-rectangle of the source image.  \nDefaults to `0` and requires `canvas: true`.\n\n### contain\n\nScales the image up/down to contain it in the max dimensions if set to `true`.  \nThis emulates the CSS feature\n[background-image: contain](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Resizing_background_images#contain).\n\n### cover\n\nScales the image up/down to cover the max dimensions with the image dimensions\nif set to `true`.  \nThis emulates the CSS feature\n[background-image: cover](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Resizing_background_images#cover).\n\n### aspectRatio\n\nCrops the image to the given aspect ratio (e.g. `16/9`).  \nSetting the `aspectRatio` also enables the `crop` option.\n\n### pixelRatio\n\nDefines the ratio of the canvas pixels to the physical image pixels on the\nscreen.  \nShould be set to\n[window.devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\nunless the scaled image is not rendered on screen.  \nDefaults to `1` and requires `canvas: true`.\n\n### downsamplingRatio\n\nDefines the ratio in which the image is downsampled (scaled down in steps).  \nBy default, images are downsampled in one step.  \nWith a ratio of `0.5`, each step scales the image to half the size, before\nreaching the target dimensions.  \nRequires `canvas: true`.\n\n### imageSmoothingEnabled\n\nIf set to `false`,\n[disables image smoothing](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled).  \nDefaults to `true` and requires `canvas: true`.\n\n### imageSmoothingQuality\n\nSets the\n[quality of image smoothing](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality).  \nPossible values: `'low'`, `'medium'`, `'high'`  \nDefaults to `'low'` and requires `canvas: true`.\n\n### crop\n\nCrops the image to the `maxWidth`/`maxHeight` constraints if set to `true`.  \nEnabling the `crop` option also enables the `canvas` option.\n\n### orientation\n\nTransform the canvas according to the specified Exif orientation, which can be\nan `integer` in the range of `1` to `8` or the boolean value `true`.\n\nWhen set to `true`, it will set the orientation value based on the Exif data of\nthe image, which will be parsed automatically if the Exif extension is\navailable.\n\nExif orientation values to correctly display the letter F:\n\n```\n    1             2\n  ██████        ██████\n  ██                ██\n  ████            ████\n  ██                ██\n  ██                ██\n\n    3             4\n      ██        ██\n      ██        ██\n    ████        ████\n      ██        ██\n  ██████        ██████\n\n    5             6\n██████████    ██\n██  ██        ██  ██\n██            ██████████\n\n    7             8\n        ██    ██████████\n    ██  ██        ██  ██\n██████████            ██\n```\n\nSetting `orientation` to `true` enables the `canvas` and `meta` options, unless\nthe browser supports automatic image orientation (see\n[browser support for image-orientation](https://caniuse.com/#feat=css-image-orientation)).\n\nSetting `orientation` to `1` enables the `canvas` and `meta` options if the\nbrowser does support automatic image orientation (to allow reset of the\norientation).\n\nSetting `orientation` to an integer in the range of `2` to `8` always enables\nthe `canvas` option and also enables the `meta` option if the browser supports\nautomatic image orientation (again to allow reset).\n\n### meta\n\nAutomatically parses the image metadata if set to `true`.\n\nIf metadata has been found, the data object passed as second argument to the\ncallback function has additional properties (see\n[metadata parsing](#metadata-parsing)).\n\nIf the file is given as URL and the browser supports the\n[fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or the\nXHR\n[responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType)\n`blob`, fetches the file as `Blob` to be able to parse the metadata.\n\n### canvas\n\nReturns the image as\n[canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) element if\nset to `true`.\n\n### crossOrigin\n\nSets the `crossOrigin` property on the `img` element for loading\n[CORS enabled images](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image).\n\n### noRevoke\n\nBy default, the\n[created object URL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL)\nis revoked after the image has been loaded, except when this option is set to\n`true`.\n\n## Metadata parsing\n\nIf the Load Image Meta extension is included, it is possible to parse image meta\ndata automatically with the `meta` option:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    console.log('Original image head: ', data.imageHead)\n    console.log('Exif data: ', data.exif) // requires exif extension\n    console.log('IPTC data: ', data.iptc) // requires iptc extension\n  },\n  { meta: true }\n)\n```\n\nOr alternatively via `loadImage.parseMetaData`, which can be used with an\navailable `File` or `Blob` object as first argument:\n\n```js\nloadImage.parseMetaData(\n  fileOrBlob,\n  function (data) {\n    console.log('Original image head: ', data.imageHead)\n    console.log('Exif data: ', data.exif) // requires exif extension\n    console.log('IPTC data: ', data.iptc) // requires iptc extension\n  },\n  {\n    maxMetaDataSize: 262144\n  }\n)\n```\n\nOr using the\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nbased API:\n\n```js\nloadImage\n  .parseMetaData(fileOrBlob, {\n    maxMetaDataSize: 262144\n  })\n  .then(function (data) {\n    console.log('Original image head: ', data.imageHead)\n    console.log('Exif data: ', data.exif) // requires exif extension\n    console.log('IPTC data: ', data.iptc) // requires iptc extension\n  })\n```\n\nThe Metadata extension adds additional options used for the `parseMetaData`\nmethod:\n\n- `maxMetaDataSize`: Maximum number of bytes of metadata to parse.\n- `disableImageHead`: Disable parsing the original image head.\n- `disableMetaDataParsers`: Disable parsing metadata (image head only)\n\n### Image head\n\nResized JPEG images can be combined with their original image head via\n`loadImage.replaceHead`, which requires the resized image as `Blob` object as\nfirst argument and an `ArrayBuffer` image head as second argument.\n\nWith callback style, the third argument must be a `callback` function, which is\ncalled with the new `Blob` object:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    if (data.imageHead) {\n      img.toBlob(function (blob) {\n        loadImage.replaceHead(blob, data.imageHead, function (newBlob) {\n          // do something with the new Blob object\n        })\n      }, 'image/jpeg')\n    }\n  },\n  { meta: true, canvas: true, maxWidth: 800 }\n)\n```\n\nOr using the\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nbased API like this:\n\n```js\nloadImage(fileOrBlobOrUrl, { meta: true, canvas: true, maxWidth: 800 })\n  .then(function (data) {\n    if (!data.imageHead) throw new Error('Could not parse image metadata')\n    return new Promise(function (resolve) {\n      data.image.toBlob(function (blob) {\n        data.blob = blob\n        resolve(data)\n      }, 'image/jpeg')\n    })\n  })\n  .then(function (data) {\n    return loadImage.replaceHead(data.blob, data.imageHead)\n  })\n  .then(function (blob) {\n    // do something with the new Blob object\n  })\n  .catch(function (err) {\n    console.error(err)\n  })\n```\n\n**Please note:**  \n`Blob` objects of resized images can be created via\n[HTMLCanvasElement.toBlob](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob).  \n[blueimp-canvas-to-blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob)\nprovides a polyfill for browsers without native `canvas.toBlob()` support.\n\n### Exif parser\n\nIf you include the Load Image Exif Parser extension, the argument passed to the\ncallback for `parseMetaData` will contain the following additional properties if\nExif data could be found in the given image:\n\n- `exif`: The parsed Exif tags\n- `exifOffsets`: The parsed Exif tag offsets\n- `exifTiffOffset`: TIFF header offset (used for offset pointers)\n- `exifLittleEndian`: little endian order if true, big endian if false\n\nThe `exif` object stores the parsed Exif tags:\n\n```js\nvar orientation = data.exif[0x0112] // Orientation\n```\n\nThe `exif` and `exifOffsets` objects also provide a `get()` method to retrieve\nthe tag value/offset via the tag's mapped name:\n\n```js\nvar orientation = data.exif.get('Orientation')\nvar orientationOffset = data.exifOffsets.get('Orientation')\n```\n\nBy default, only the following names are mapped:\n\n- `Orientation`\n- `Thumbnail` (see [Exif Thumbnail](#exif-thumbnail))\n- `Exif` (see [Exif IFD](#exif-ifd))\n- `GPSInfo` (see [GPSInfo IFD](#gpsinfo-ifd))\n- `Interoperability` (see [Interoperability IFD](#interoperability-ifd))\n\nIf you also include the Load Image Exif Map library, additional tag mappings\nbecome available, as well as three additional methods:\n\n- `exif.getText()`\n- `exif.getName()`\n- `exif.getAll()`\n\n```js\nvar orientationText = data.exif.getText('Orientation') // e.g. \"Rotate 90° CW\"\n\nvar name = data.exif.getName(0x0112) // \"Orientation\"\n\n// A map of all parsed tags with their mapped names/text as keys/values:\nvar allTags = data.exif.getAll()\n```\n\n#### Exif Thumbnail\n\nExample code displaying a thumbnail image embedded into the Exif metadata:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    var exif = data.exif\n    var thumbnail = exif && exif.get('Thumbnail')\n    var blob = thumbnail && thumbnail.get('Blob')\n    if (blob) {\n      loadImage(\n        blob,\n        function (thumbImage) {\n          document.body.appendChild(thumbImage)\n        },\n        { orientation: exif.get('Orientation') }\n      )\n    }\n  },\n  { meta: true }\n)\n```\n\n#### Exif IFD\n\nExample code displaying data from the Exif IFD (Image File Directory) that\ncontains Exif specified TIFF tags:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    var exifIFD = data.exif && data.exif.get('Exif')\n    if (exifIFD) {\n      // Map of all Exif IFD tags with their mapped names/text as keys/values:\n      console.log(exifIFD.getAll())\n      // A specific Exif IFD tag value:\n      console.log(exifIFD.get('UserComment'))\n    }\n  },\n  { meta: true }\n)\n```\n\n#### GPSInfo IFD\n\nExample code displaying data from the Exif IFD (Image File Directory) that\ncontains [GPS](https://en.wikipedia.org/wiki/Global_Positioning_System) info:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    var gpsInfo = data.exif && data.exif.get('GPSInfo')\n    if (gpsInfo) {\n      // Map of all GPSInfo tags with their mapped names/text as keys/values:\n      console.log(gpsInfo.getAll())\n      // A specific GPSInfo tag value:\n      console.log(gpsInfo.get('GPSLatitude'))\n    }\n  },\n  { meta: true }\n)\n```\n\n#### Interoperability IFD\n\nExample code displaying data from the Exif IFD (Image File Directory) that\ncontains Interoperability data:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    var interoperabilityData = data.exif && data.exif.get('Interoperability')\n    if (interoperabilityData) {\n      // The InteroperabilityIndex tag value:\n      console.log(interoperabilityData.get('InteroperabilityIndex'))\n    }\n  },\n  { meta: true }\n)\n```\n\n#### Exif parser options\n\nThe Exif parser adds additional options:\n\n- `disableExif`: Disables Exif parsing when `true`.\n- `disableExifOffsets`: Disables storing Exif tag offsets when `true`.\n- `includeExifTags`: A map of Exif tags to include for parsing (includes all but\n  the excluded tags by default).\n- `excludeExifTags`: A map of Exif tags to exclude from parsing (defaults to\n  exclude `Exif` `MakerNote`).\n\nAn example parsing only Orientation, Thumbnail and ExifVersion tags:\n\n```js\nloadImage.parseMetaData(\n  fileOrBlob,\n  function (data) {\n    console.log('Exif data: ', data.exif)\n  },\n  {\n    includeExifTags: {\n      0x0112: true, // Orientation\n      ifd1: {\n        0x0201: true, // JPEGInterchangeFormat (Thumbnail data offset)\n        0x0202: true // JPEGInterchangeFormatLength (Thumbnail data length)\n      },\n      0x8769: {\n        // ExifIFDPointer\n        0x9000: true // ExifVersion\n      }\n    }\n  }\n)\n```\n\nAn example excluding `Exif` `MakerNote` and `GPSInfo`:\n\n```js\nloadImage.parseMetaData(\n  fileOrBlob,\n  function (data) {\n    console.log('Exif data: ', data.exif)\n  },\n  {\n    excludeExifTags: {\n      0x8769: {\n        // ExifIFDPointer\n        0x927c: true // MakerNote\n      },\n      0x8825: true // GPSInfoIFDPointer\n    }\n  }\n)\n```\n\n### Exif writer\n\nThe Exif parser extension also includes a minimal writer that allows to override\nthe Exif `Orientation` value in the parsed `imageHead` `ArrayBuffer`:\n\n```js\nloadImage(\n  fileOrBlobOrUrl,\n  function (img, data) {\n    if (data.imageHead && data.exif) {\n      // Reset Exif Orientation data:\n      loadImage.writeExifData(data.imageHead, data, 'Orientation', 1)\n      img.toBlob(function (blob) {\n        loadImage.replaceHead(blob, data.imageHead, function (newBlob) {\n          // do something with newBlob\n        })\n      }, 'image/jpeg')\n    }\n  },\n  { meta: true, orientation: true, canvas: true, maxWidth: 800 }\n)\n```\n\n**Please note:**  \nThe Exif writer relies on the Exif tag offsets being available as\n`data.exifOffsets` property, which requires that Exif data has been parsed from\nthe image.  \nThe Exif writer can only change existing values, not add new tags, e.g. it\ncannot add an Exif `Orientation` tag for an image that does not have one.\n\n### IPTC parser\n\nIf you include the Load Image IPTC Parser extension, the argument passed to the\ncallback for `parseMetaData` will contain the following additional properties if\nIPTC data could be found in the given image:\n\n- `iptc`: The parsed IPTC tags\n- `iptcOffsets`: The parsed IPTC tag offsets\n\nThe `iptc` object stores the parsed IPTC tags:\n\n```js\nvar objectname = data.iptc[5]\n```\n\nThe `iptc` and `iptcOffsets` objects also provide a `get()` method to retrieve\nthe tag value/offset via the tag's mapped name:\n\n```js\nvar objectname = data.iptc.get('ObjectName')\n```\n\nBy default, only the following names are mapped:\n\n- `ObjectName`\n\nIf you also include the Load Image IPTC Map library, additional tag mappings\nbecome available, as well as three additional methods:\n\n- `iptc.getText()`\n- `iptc.getName()`\n- `iptc.getAll()`\n\n```js\nvar keywords = data.iptc.getText('Keywords') // e.g.: ['Weather','Sky']\n\nvar name = data.iptc.getName(5) // ObjectName\n\n// A map of all parsed tags with their mapped names/text as keys/values:\nvar allTags = data.iptc.getAll()\n```\n\n#### IPTC parser options\n\nThe IPTC parser adds additional options:\n\n- `disableIptc`: Disables IPTC parsing when true.\n- `disableIptcOffsets`: Disables storing IPTC tag offsets when `true`.\n- `includeIptcTags`: A map of IPTC tags to include for parsing (includes all but\n  the excluded tags by default).\n- `excludeIptcTags`: A map of IPTC tags to exclude from parsing (defaults to\n  exclude `ObjectPreviewData`).\n\nAn example parsing only the `ObjectName` tag:\n\n```js\nloadImage.parseMetaData(\n  fileOrBlob,\n  function (data) {\n    console.log('IPTC data: ', data.iptc)\n  },\n  {\n    includeIptcTags: {\n      5: true // ObjectName\n    }\n  }\n)\n```\n\nAn example excluding `ApplicationRecordVersion` and `ObjectPreviewData`:\n\n```js\nloadImage.parseMetaData(\n  fileOrBlob,\n  function (data) {\n    console.log('IPTC data: ', data.iptc)\n  },\n  {\n    excludeIptcTags: {\n      0: true, // ApplicationRecordVersion\n      202: true // ObjectPreviewData\n    }\n  }\n)\n```\n\n## License\n\nThe JavaScript Load Image library is released under the\n[MIT license](https://opensource.org/licenses/MIT).\n\n## Credits\n\n- Original image metadata handling implemented with the help and contribution of\n  Achim Stöhr.\n- Original Exif tags mapping based on Jacob Seidelin's\n  [exif-js](https://github.com/exif-js/exif-js) library.\n- Original IPTC parser implementation by\n  [Dave Bevan](https://github.com/bevand10).\n",
    "licenseText": "MIT License\n\nCopyright © 2011 Sebastian Tschan, https://blueimp.net\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/blueimp-load-image/-/blueimp-load-image-5.16.0.tgz#16b763f57e6725f8865517bca8eb7c3dc7d41e09",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/blueimp-load-image/-/blueimp-load-image-5.16.0.tgz",
    "hash": "16b763f57e6725f8865517bca8eb7c3dc7d41e09",
    "integrity": "sha512-3DUSVdOtlfNRk7moRZuTwDmA3NnG8KIJuLcq3c0J7/BIr6X3Vb/EpX3kUH1joxUhmoVF4uCpDfz7wHkz8pQajA==",
    "registry": "npm",
    "packageName": "blueimp-load-image",
    "cacheIntegrity": "sha512-3DUSVdOtlfNRk7moRZuTwDmA3NnG8KIJuLcq3c0J7/BIr6X3Vb/EpX3kUH1joxUhmoVF4uCpDfz7wHkz8pQajA== sha1-Frdj9X5nJfiGVRe8qOt8PcfUHgk="
  },
  "registry": "npm",
  "hash": "16b763f57e6725f8865517bca8eb7c3dc7d41e09"
}