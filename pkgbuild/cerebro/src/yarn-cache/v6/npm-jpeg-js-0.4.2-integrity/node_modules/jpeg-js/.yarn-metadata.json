{
  "manifest": {
    "name": "jpeg-js",
    "version": "0.4.2",
    "description": "A pure javascript JPEG encoder and decoder",
    "main": "index.js",
    "scripts": {
      "test": "jest --testMatch=**/test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/eugeneware/jpeg-js"
    },
    "keywords": [
      "jpeg",
      "jpg",
      "encoder",
      "decoder",
      "codec",
      "image",
      "javascript",
      "js"
    ],
    "author": {
      "name": "Eugene Ware",
      "email": "eugene@noblesamurai.com"
    },
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/eugeneware/jpeg-js/issues"
    },
    "dependencies": {},
    "devDependencies": {
      "jest": "^25.4.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-jpeg-js-0.4.2-integrity/node_modules/jpeg-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# jpeg-js\n\nA pure javascript JPEG encoder and decoder for node.js\n\n**NOTE:** this is a _synchronous_ (i.e. CPU-blocking) library that is much slower than native alternatives. If you don't need a _pure javascript_ implementation, consider using async alternatives like [sharp](http://npmjs.com/package/sharp) in node or the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) in the browser.\n\n[![build status](https://secure.travis-ci.org/eugeneware/jpeg-js.png)](http://travis-ci.org/eugeneware/jpeg-js)\n\n## Installation\n\nThis module is installed via npm:\n\n```bash\n$ npm install jpeg-js\n```\n\n## Example Usage\n\n### Decoding JPEGs\n\nWill decode a buffer or typed array into a `Buffer`;\n\n```js\nvar jpeg = require('jpeg-js');\nvar jpegData = fs.readFileSync('grumpycat.jpg');\nvar rawImageData = jpeg.decode(jpegData);\nconsole.log(rawImageData);\n/*\n{ width: 320,\n  height: 180,\n  data: <Buffer 5b 40 29 ff 59 3e 29 ff 54 3c 26 ff 55 3a 27 ff 5a 3e 2f ff 5c 3c 31 ff 58 35 2d ff 5b 36 2f ff 55 35 32 ff 5a 3a 37 ff 54 36 32 ff 4b 32 2c ff 4b 36 ... > }\n*/\n```\n\nTo decode directly into a `Uint8Array`, pass `useTArray: true` in options\n`decode`:\n\n```js\nvar jpeg = require('jpeg-js');\nvar jpegData = fs.readFileSync('grumpycat.jpg');\nvar rawImageData = jpeg.decode(jpegData, {useTArray: true}); // return as Uint8Array\nconsole.log(rawImageData);\n/*\n{ width: 320,\n  height: 180,\n  data: { '0': 91, '1': 64, ... } } // typed array\n*/\n```\n\n#### Decode Options\n\n| Option               | Description                                                                                                                                                                                       | Default     |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `colorTransform`     | Transform alternate colorspaces like YCbCr. `undefined` means respect the default behavior encoded in metadata.                                                                                   | `undefined` |\n| `useTArray`          | Decode pixels into a typed `Uint8Array` instead of a `Buffer`.                                                                                                                                    | `false`     |\n| `formatAsRGBA`       | Decode pixels into RGBA vs. RGB.                                                                                                                                                                  | `true`      |\n| `tolerantDecoding`   | Be more tolerant when encountering technically invalid JPEGs.                                                                                                                                     | `true`      |\n| `maxResolutionInMP`  | The maximum resolution image that `jpeg-js` should attempt to decode in megapixels. Images larger than this resolution will throw an error instead of decoding.                                   | `100`       |\n| `maxMemoryUsageInMB` | The (approximate) maximum memory that `jpeg-js` should allocate while attempting to decode the image in mebibyte. Images requiring more memory than this will throw an error instead of decoding. | `512`       |\n\n### Encoding JPEGs\n\n```js\nvar jpeg = require('jpeg-js');\nvar width = 320,\n  height = 180;\nvar frameData = new Buffer(width * height * 4);\nvar i = 0;\nwhile (i < frameData.length) {\n  frameData[i++] = 0xff; // red\n  frameData[i++] = 0x00; // green\n  frameData[i++] = 0x00; // blue\n  frameData[i++] = 0xff; // alpha - ignored in JPEGs\n}\nvar rawImageData = {\n  data: frameData,\n  width: width,\n  height: height,\n};\nvar jpegImageData = jpeg.encode(rawImageData, 50);\nconsole.log(jpegImageData);\n/*\n{ width: 320,\n  height: 180,\n  data: <Buffer 5b 40 29 ff 59 3e 29 ff 54 3c 26 ff 55 3a 27 ff 5a 3e 2f ff 5c 3c 31 ff 58 35 2d ff 5b 36 2f ff 55 35 32 ff 5a 3a 37 ff 54 36 32 ff 4b 32 2c ff 4b 36 ... > }\n*/\n// write to file\nfs.writeFileSync('image.jpg', jpegImageData.data);\n```\n\n## License\n\n### Decoding\n\nThis library builds on the work of two other JPEG javascript libraries,\nnamely [jpgjs](https://github.com/notmasteryet/jpgjs) for the decoding\nwhich is licensed under the Apache 2.0 License below:\n\nCopyright 2011 notmasteryet\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n### Encoding\n\nThe encoding is based off a port of the JPEG encoder in [as3corelib](https://code.google.com/p/as3corelib/source/browse/trunk/src/com/adobe/images/JPGEncoder.as).\n\nThe port to Javascript was done by by Andreas Ritter, www.bytestrom.eu, 11/2009.\n\nThe Adobe License for the encoder is:\n\n**Adobe**\n\nCopyright (c) 2008, Adobe Systems Incorporated\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n- Neither the name of Adobe Systems Incorporated nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n## Contributing\n\njpeg-js is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/eugeneware/jpeg-js/blob/master/CONTRIBUTING.md) file for more details.\n\n### Contributors\n\njpeg-js is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Adobe</th><td><a href=\"https://github.com/adobe\">GitHub/adobe</a></td></tr>\n<tr><th align=\"left\">Yury Delendik</th><td><a href=\"https://github.com/notmasteryet/\">GitHub/notmasteryet</a></td></tr>\n<tr><th align=\"left\">Eugene Ware</th><td><a href=\"https://github.com/eugeneware\">GitHub/eugeneware</a></td></tr>\n<tr><th align=\"left\">Michael Kelly</th><td><a href=\"https://github.com/mrkelly\">GitHub/mrkelly</a></td></tr>\n<tr><th align=\"left\">Peter Liljenberg</th><td><a href=\"https://github.com/petli\">GitHub/petli</a></td></tr>\n<tr><th align=\"left\">XadillaX</th><td><a href=\"https://github.com/XadillaX\">GitHub/XadillaX</a></td></tr>\n<tr><th align=\"left\">strandedcity</th><td><a href=\"https://github.com/strandedcity\">GitHub/strandedcity</a></td></tr>\n<tr><th align=\"left\">wmossman</th><td><a href=\"https://github.com/wmossman\">GitHub/wmossman</a></td></tr>\n<tr><th align=\"left\">Patrick Hulce</th><td><a href=\"https://github.com/patrickhulce\">GitHub/patrickhulce</a></td></tr>\n<tr><th align=\"left\">Ben Wiley</th><td><a href=\"https://github.com/benwiley4000\">GitHub/benwiley4000</a></td></tr>\n</tbody></table>\n",
    "licenseText": "Copyright (c) 2014, Eugene Ware\nAll rights reserved.\n  \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:  \n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.  \n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.  \n3. Neither the name of Eugene Ware nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.  \n  \nTHIS SOFTWARE IS PROVIDED BY EUGENE WARE ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL EUGENE WARE BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/jpeg-js/-/jpeg-js-0.4.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/jpeg-js/-/jpeg-js-0.4.2.tgz",
    "hash": "",
    "integrity": "sha512-+az2gi/hvex7eLTMTlbRLOhH6P6WFdk2ITI8HJsaH2VqYO0I594zXSYEP+tf4FW+8Cy68ScDXoAsQdyQanv3sw==",
    "registry": "npm",
    "packageName": "jpeg-js",
    "cacheIntegrity": "sha512-+az2gi/hvex7eLTMTlbRLOhH6P6WFdk2ITI8HJsaH2VqYO0I594zXSYEP+tf4FW+8Cy68ScDXoAsQdyQanv3sw== sha1-izRbGuSr3mTC2i/mfqIWoRSsJ50="
  },
  "registry": "npm",
  "hash": "f9acf6822fe1bdec7b78b4cc4e56d12ce847e8fe9615d93621323c1c9b1a1f656a60ed08e7de335d26043feb5fe055bef02cbaf127035e802c41dc906a7bf7b3"
}