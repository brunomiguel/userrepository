{
  "manifest": {
    "name": "klaw-sync",
    "version": "6.0.0",
    "description": "Recursive, synchronous, and fast file system walker",
    "main": "klaw-sync.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/manidlou/node-klaw-sync.git"
    },
    "keywords": [
      "fs",
      "walk",
      "walker",
      "walk-sync",
      "klaw",
      "readdir-sync"
    ],
    "author": {
      "name": "Mani Maghsoudlou"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/manidlou/node-klaw-sync/issues"
    },
    "homepage": "https://github.com/manidlou/node-klaw-sync#readme",
    "dependencies": {
      "graceful-fs": "^4.1.11"
    },
    "devDependencies": {
      "benchmark": "^2.1.4",
      "fs-extra": "^5.0.0",
      "memory-fs": "^0.4.1",
      "mkp": "^1.0.1",
      "mocha": "^5.1.1",
      "standard": "^11.0.1",
      "walk-sync": "^0.3.3"
    },
    "standard": {
      "env": [
        "mocha"
      ]
    },
    "scripts": {
      "lint": "standard",
      "unit": "mocha",
      "test": "npm run lint && npm run unit",
      "benchmark": "node ./benchmark/bm.js"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-klaw-sync-6.0.0-1fd2cfd56ebb6250181114f0a581167099c2b28c-integrity/node_modules/klaw-sync/package.json",
    "readmeFilename": "README.md",
    "readme": "node-klaw-sync\n==============\n\n[![npm Package](https://img.shields.io/npm/v/klaw-sync.svg?style=flat-square)](https://www.npmjs.com/package/klaw-sync)\n[![Build Status](https://travis-ci.org/manidlou/node-klaw-sync.svg?branch=master)](https://travis-ci.org/manidlou/node-klaw-sync)\n[![windows Build status](https://ci.appveyor.com/api/projects/status/braios34k6qw4h5p/branch/master?svg=true)](https://ci.appveyor.com/project/manidlou/node-klaw-sync/branch/master)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg?style=flat-square)](https://standardjs.com)\n[![Known Vulnerabilities](https://snyk.io/test/npm/klaw-sync/badge.svg?style=flat-square)](https://snyk.io/test/npm/klaw-sync)\n\n`klaw-sync` is a Node.js recursive and fast file system walker, which is the synchronous counterpart of [klaw](https://github.com/jprichardson/node-klaw). It lists all files and directories inside a directory recursively and returns an array of objects that each object has two properties: `path` and `stats`. `path` is the full path of the file or directory and `stats` is an instance of [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats).\n\nInstall\n-------\n\n    npm i klaw-sync\n\nUsage\n-----\n\n### klawSync(directory[, options])\n\n- `directory` `<String>`\n- `options` `<Object>` (optional) _all options are `false` by default_\n  - `nodir` `<Boolean>`\n    - return only files (ignore directories).\n  - `nofile` `<Boolean>`\n    - return only directories (ignore files).\n  - `depthLimit`: `<Number>`\n    - the number of times to recurse before stopping. `-1` for unlimited.\n  - `fs`: `<Object>`\n    - custom `fs`, useful when mocking `fs` object.\n  - `filter` `<Function>`\n    - function that gets one argument `fn({path: '', stats: {}})` and returns true to include or false to exclude the item.\n  - `traverseAll` `<Boolean>`\n    - traverse all subdirectories, regardless of `filter` option. (When set to `true`, `traverseAll` produces similar behavior to the default behavior prior to v4.0.0. The current default of  `traverseAll: false` is equivalent to the old `noRecurseOnFailedFilter: true`).\n- **Return:** `<Array<Object>>` `[{path: '', stats: {}}]`\n\nExamples\n--------\n\n```js\nconst klawSync = require('klaw-sync')\n\nconst paths = klawSync('/some/dir')\n// paths = [{path: '/some/dir/dir1', stats: {}}, {path: '/some/dir/file1', stats: {}}]\n```\n\n_**catch error**_\n\n```js\nconst klawSync = require('klaw-sync')\n\nlet paths\ntry {\n  paths = klawSync('/some/dir')\n} catch (er) {\n  console.error(er)\n}\nconsole.dir(paths)\n```\n\n_**files only**_\n\n```js\nconst klawSync = require('klaw-sync')\n\nconst files = klawSync('/some/dir', {nodir: true})\n// files = [{path: '/some/dir/file1', stats: {}}, {path: '/some/dir/file2', stats: {}}]\n```\n\n_**directories only**_\n\n```js\nconst klawSync = require('klaw-sync')\n\nconst dirs = klawSync('/some/dir', {nofile: true})\n// dirs = [{path: '/some/dir/dir1', stats: {}}, {path: '/some/dir/dir2', stats: {}}]\n```\n\n_**ignore hidden directories**_\n\n\n```js\nconst path = require('path')\nconst klawSync = require('klaw-sync')\n\nconst filterFn = item => {\n  const basename = path.basename(item.path)\n  return basename === '.' || basename[0] !== '.'\n}\n\nconst paths = klawSync('/some/dir', { filter: filterFn})\n```\n\n_**filter based on stats**_\n\nHere `traverseAll` option is required since we still want to read all directories even if they don't pass the `filter` function, to see if their contents do pass the `filter` function.\n\n```js\nconst klawSync = require('klaw-sync')\n\nconst refTime = new Date(2017, 3, 24).getTime()\nconst filterFn = item => item.stats.mtime.getTime() > refTime\n\nconst paths = klawSync('/some/dir', { filter: filterFn })\n```\n\nRun tests\n---------\n\nlint: `npm run lint`\n\nunit test: `npm run unit`\n\nlint & unit: `npm test`\n\nbenchmark: `npm run benchmark`\n\nPerformance compare to other similar modules\n-----------------------------------------------\n\nRunning some [benchmark](https://github.com/bestiejs/benchmark.js) tests on these modules:\n\n- `klaw-sync`\n- [walk-sync](https://github.com/joliss/node-walk-sync)\n\n(as of Jan 25, 2017) `klaw-sync` is the fastest module!\n\n##### results (tested on Ubuntu 18.04, Intel(R) Core(TM) i7-2630QM CPU @ 2.00GHz, 8 CPUs, 8g RAM, node v10.9.0)\n\n```bash\nRunning benchmark tests..\n\nroot dir length: 1110\nwalk-sync x 139 ops/sec ±2.48% (76 runs sampled)\nklaw-sync x 163 ops/sec ±1.20% (80 runs sampled)\nFastest is klaw-sync\n\nroot dir length: 11110\nwalk-sync x 13.23 ops/sec ±1.10% (37 runs sampled)\nklaw-sync x 15.10 ops/sec ±1.06% (41 runs sampled)\nFastest is klaw-sync\n\nroot dir length: 111110\nwalk-sync x 1.17 ops/sec ±2.06% (7 runs sampled)\nklaw-sync x 1.25 ops/sec ±2.10% (8 runs sampled)\nFastest is klaw-sync\n```\n\nCredit\n------\n\nSpecial thanks to:\n\n- [agnivade](https://github.com/agnivade)\n- [jprichardson](https://github.com/jprichardson)\n- [RyanZim](https://github.com/RyanZim)\n\nfor their contribution and support.\n\nLicense\n-------\n\nLicensed under MIT\n",
    "licenseText": "The MIT license\n\nCopyright (c) 2017 Mani Maghsoudlou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/klaw-sync/-/klaw-sync-6.0.0.tgz#1fd2cfd56ebb6250181114f0a581167099c2b28c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/klaw-sync/-/klaw-sync-6.0.0.tgz",
    "hash": "1fd2cfd56ebb6250181114f0a581167099c2b28c",
    "integrity": "sha512-nIeuVSzdCCs6TDPTqI8w1Yre34sSq7AkZ4B3sfOBbI2CgVSB4Du4aLQijFU2+lhAFCwt9+42Hel6lQNIv6AntQ==",
    "registry": "npm",
    "packageName": "klaw-sync",
    "cacheIntegrity": "sha512-nIeuVSzdCCs6TDPTqI8w1Yre34sSq7AkZ4B3sfOBbI2CgVSB4Du4aLQijFU2+lhAFCwt9+42Hel6lQNIv6AntQ== sha1-H9LP1W67YlAYERTwpYEWcJnCsow="
  },
  "registry": "npm",
  "hash": "1fd2cfd56ebb6250181114f0a581167099c2b28c"
}