{
  "manifest": {
    "name": "raf-schd",
    "version": "4.0.2",
    "description": "A scheduler based on requestAnimationFrame",
    "main": "dist/raf-schd.cjs.js",
    "module": "dist/raf-schd.esm.js",
    "sideEffects": false,
    "files": [
      "/dist",
      "/src"
    ],
    "author": {
      "name": "Alex Reardon",
      "email": "alexreardon@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/alexreardon/raf-schd.git"
    },
    "keywords": [
      "performance",
      "raf",
      "requestAnimationFrame",
      "cancelAnimationFrame"
    ],
    "config": {
      "prettier_target": "*.{js,md,json} src/**/*.{js,md,json} test/**/*.{js,md,json}"
    },
    "scripts": {
      "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
      "test": "jest",
      "validate": "yarn run prettier:check && yarn run typecheck",
      "prettier:check": "prettier --debug-check $npm_package_config_prettier_target",
      "prettier:write": "prettier --write $npm_package_config_prettier_target",
      "typecheck": "flow check",
      "build:clean": "rimraf dist",
      "build:dist": "rollup -c",
      "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/raf-schd.cjs.js.flow",
      "prepublish": "yarn run build"
    },
    "devDependencies": {
      "@babel/core": "^7.5.0",
      "@babel/preset-env": "^7.5.2",
      "@babel/preset-flow": "^7.0.0",
      "babel-eslint": "10.0.2",
      "babel-jest": "^24.8.0",
      "cross-env": "^5.2.0",
      "flow-bin": "0.102.0",
      "jest": "24.8.0",
      "prettier": "^1.18.2",
      "raf-stub": "3.0.0",
      "rimraf": "^2.6.3",
      "rollup": "^1.16.6",
      "rollup-plugin-babel": "^4.3.3",
      "rollup-plugin-replace": "^2.2.0",
      "rollup-plugin-terser": "^5.1.1"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-raf-schd-4.0.2-bd44c708188f2e84c810bf55fcea9231bcaed8a0-integrity/node_modules/raf-schd/package.json",
    "readmeFilename": "README.md",
    "readme": "# raf-schd\n\nA `throttle` function that uses [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) to limit the rate at which a function is called.\n\n[![Build Status](https://travis-ci.org/alexreardon/raf-schd.svg?branch=master)](https://travis-ci.org/alexreardon/raf-schd) [![dependencies](https://david-dm.org/alexreardon/raf-schd.svg)](https://david-dm.org/alexreardon/raf-schd) [![npm](https://img.shields.io/npm/v/raf-schd.svg)](https://www.npmjs.com/package/raf-schd) [![SemVer](https://img.shields.io/badge/SemVer-2.0.0-brightgreen.svg)](http://semver.org/spec/v2.0.0.html)\n\n> For background information on rate limiting functions, see [Rate limiting functions from scratch](https://www.youtube.com/watch?v=g_3e_bNU2e0)\n\n```js\nimport rafSchd from 'raf-schd';\n\nconst expensiveFn = arg => {\n  //...\n  console.log(arg);\n};\n\nconst schedule = rafSchd(expensiveFn);\n\nschedule('foo');\nschedule('bar');\nschedule('baz');\n\n// animation frame fires\n\n// => 'baz'\n```\n\n## Why?\n\n`raf-schd` supports the use case where you want to limit the rate at which your functions are called based on `requestAnimationFrame`. Unlike a standard `throttle` function, `raf-schd` uses `requestAnimationFrame` to rate limit, rather than waiting a fixed amount of time. Using `requestAnimationFrame` for throttling is powerful because the browser will automatically reduce the amount of frames provided based on the available resources. So if the browser only provides 30fps then your throttled function will only be called 30 times.\n\n`raf-schd` is an **extremely** useful performance utility.\n\n### Without `raf-schd`\n\n> Optimised scroll listener example taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\n\n```js\nvar last_known_scroll_position = 0;\nvar ticking = false;\n\nfunction doSomething(scroll_pos) {\n  // do something with the scroll position\n}\n\nwindow.addEventListener('scroll', function(e) {\n  last_known_scroll_position = window.scrollY;\n  if (!ticking) {\n    window.requestAnimationFrame(function() {\n      doSomething(last_known_scroll_position);\n      ticking = false;\n    });\n  }\n  ticking = true;\n});\n```\n\n### With `raf-schd`\n\n```js\nimport rafSchd from 'raf-schd';\n\nfunction doSomething(scroll_pos) {\n  // do something with the scroll position\n}\n\nconst schedule = rafSchd(doSomething);\n\nwindow.addEventListener('scroll', function() {\n  schedule(window.scrollY);\n});\n```\n\nAt the top level `raf-schd` accepts any function a returns a new `ResultFn` (a function that wraps your original function).\n\nThe `ResultFn` will execute your function with the **latest arguments** provided to it on the next animation frame.\n\n### Throttled with latest argument\n\n```js\nimport rafSchd from 'raf-schd';\n\nconst doSomething = () => {...};\n\nconst schedule = rafSchd(doSomething);\n\nschedule(1, 2);\nschedule(3, 4);\nschedule(5, 6);\n\n// animation frame fires\n\n// do something called with => '5, 6'\n```\n\n### Cancelling a frame with `.cancel`\n\n`raf-schd` adds a `.cancel` property to the `ResultFn` so that it can be easily cancelled. The frame will only be cancelled if it has not yet executed.\n\n```js\nconst schedule = rafSchd(doSomething);\n\nschedule('foo');\n\nschedule.cancel();\n\n// now doSomething will not be executed in the next animation frame\n```\n\n## Types\n\n### `rafSchedule`\n\n```js\ntype rafSchedule = (fn: Function) => ResultFn;\n\n// Adding a .cancel property to the WrapperFn\n\ntype WrapperFn = (...arg: mixed[]) => void;\ntype CancelFn = {|\n  cancel: () => void,\n|};\ntype ResultFn = WrapperFn & CancelFn;\n```\n\n## Testing your code\n\nIf you want to really ensure that your code is working how you intend it to - use [`raf-stub`](https://github.com/alexreardon/raf-stub) to test your animation frame logic.\n\n## Installation\n\n```bash\n# yarn\nyarn add raf-schd\n\n# npm\nnpm install raf-schd --save\n```\n\n## Module usage\n\n### ES6 module\n\n```js\nimport rafSchd from 'raf-schd';\n```\n\n### CommonJS\n\nIf you are in a CommonJS environment (eg [Node](https://nodejs.org)), then **you will need add `.default` to your import**:\n\n```js\nconst rafSchd = require('raf-schd').default;\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/raf-schd/-/raf-schd-4.0.2.tgz#bd44c708188f2e84c810bf55fcea9231bcaed8a0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/raf-schd/-/raf-schd-4.0.2.tgz",
    "hash": "bd44c708188f2e84c810bf55fcea9231bcaed8a0",
    "integrity": "sha512-VhlMZmGy6A6hrkJWHLNTGl5gtgMUm+xfGza6wbwnE914yeQ5Ybm18vgM734RZhMgfw4tacUrWseGZlpUrrakEQ==",
    "registry": "npm",
    "packageName": "raf-schd",
    "cacheIntegrity": "sha512-VhlMZmGy6A6hrkJWHLNTGl5gtgMUm+xfGza6wbwnE914yeQ5Ybm18vgM734RZhMgfw4tacUrWseGZlpUrrakEQ== sha1-vUTHCBiPLoTIEL9V/OqSMbyu2KA="
  },
  "registry": "npm",
  "hash": "bd44c708188f2e84c810bf55fcea9231bcaed8a0"
}