{"version":3,"file":"sprite.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/Sprite.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BLEND_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { ObservablePoint, Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { sign } from '@pixi/utils';\n\nimport type { IBaseTextureOptions, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource|Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n*\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = PIXI.Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     *\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     *\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     *\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     *\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     *\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     *\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     *\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     *\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     *\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     *\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param rect - Optional output rectangle.\n     * @return The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param point - the point to test\n     * @return The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     *\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","tempPoint","Point","indices","Uint16Array","texture","_super","_this","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","Sprite","scale","sign","orig","width","height","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","c","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","RESOLUTION","i","length","Math","round","renderer","calculateVertices","batch","setObjectRenderer","plugins","render","_bounds","addQuad","calculateTrimmedVertices","rect","children","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","getLocalBounds","call","point","applyInverse","x1","y1","options","destroy","off","_onTextureUpdate","destroyBaseTexture","baseTexture","source","from","value","abs","s","copyFrom","valid","once","Container"],"mappings":"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"}