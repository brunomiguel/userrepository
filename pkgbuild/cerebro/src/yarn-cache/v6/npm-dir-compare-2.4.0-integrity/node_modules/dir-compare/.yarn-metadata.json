{
  "manifest": {
    "name": "dir-compare",
    "version": "2.4.0",
    "description": "Node JS directory compare",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/gliviu/dir-compare"
    },
    "keywords": [
      "compare",
      "directory",
      "folder"
    ],
    "files": [
      "src"
    ],
    "scripts": {
      "clean": "rm -rf build && rm -rf .nyc_output && rm -rf coverage",
      "copydeps": "copyfiles \"test/expected/**\" test/testdir.tar \"test/extended/res/**\" package.json build",
      "build": "tsc && npm run copydeps",
      "lint": "tslint -p tsconfig.json",
      "pretest": "npm install && npm run build",
      "test": "node build/test/runTests.js",
      "extest": "npm run pretest && ./test/extended/init.sh && test/extended/runall.sh",
      "coverage": "npx nyc --exclude \"build/test/**\" --reporter=lcov npm test && npx nyc report",
      "toc": "npx markdown-toc README.md; echo \n",
      "docs": "typedoc --includeVersion --includeDeclarations --excludeExternals --theme minimal --mode file --readme none --gitRevision master --toc compare,compareSync,fileCompareHandlers,Options,Result --out docs ./src/index.d.ts"
    },
    "dependencies": {
      "buffer-equal": "1.0.0",
      "colors": "1.0.3",
      "commander": "2.9.0",
      "minimatch": "3.0.4"
    },
    "devDependencies": {
      "@types/node": "^12.11.7",
      "copyfiles": "^1.2.0",
      "memory-streams": "0.1.0",
      "semver": "5.6.0",
      "shelljs": "0.3.0",
      "tar-fs": "2.1.1",
      "temp": "0.9.0",
      "ts-node": "^8.5.4",
      "tslint": "^5.20.0",
      "tslint-config-prettier": "^1.13.0",
      "typedoc": "0.19.2",
      "typescript": "^3.7.4"
    },
    "bin": {
      "dircompare": "src/cli/dircompare.js"
    },
    "author": {
      "name": "Liviu Grigorescu"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/gliviu/dir-compare/issues"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dir-compare-2.4.0-integrity/node_modules/dir-compare/package.json",
    "readmeFilename": "README.md",
    "readme": "dir-compare\n==========\nNode JS directory compare\n\n[![Build Status](https://api.travis-ci.org/gliviu/dir-compare.svg?branch=master)](https://travis-ci.org/gliviu/dir-compare)\n[![Build status](https://ci.appveyor.com/api/projects/status/fpnqkr2gfg7pwkxk/branch/master?svg=true)](https://ci.appveyor.com/project/gliviu/dir-compare)\n[![codecov.io](http://codecov.io/github/gliviu/dir-compare/coverage.svg?branch=master)](http://codecov.io/github/gliviu/dir-compare?branch=master)\n\n- [Installation](#installation)\n- [Library](#library)\n  * [Use](#use)\n  * [Api](#api)\n  * [Glob patterns](#glob-patterns)\n  * [Custom file content comparators](#custom-file-content-comparators)\n    + [Ignore line endings and white spaces](#ignore-line-endings-and-white-spaces)\n  * [Custom name comparators](#custom-name-comparators)\n  * [Custom result builder](#custom-result-builder)\n  * [Symbolic links](#symbolic-links)\n- [Command line](#command-line)\n- [Changelog](#changelog)\n\n# Installation\n```shell\n$ npm install dir-compare\n```\nor\n```shell\n$ npm install -g dir-compare\n```\nfor command line utility.\n\n# Library\n\n## Use\n```javascript\nconst dircompare = require('dir-compare');\n\nconst options = { compareSize: true };\n// Multiple compare strategy can be used simultaneously - compareSize, compareContent, compareDate, compareSymlink.\n// If one comparison fails for a pair of files, they are considered distinct.\nconst path1 = '...';\nconst path2 = '...';\n\n// Synchronous\nconst res = dircompare.compareSync(path1, path2, options)\nprint(res)\n\n// Asynchronous\ndircompare.compare(path1, path2, options)\n  .then(res => print(res))\n  .catch(error => console.error(error));\n\n\nfunction print(result) {\n  console.log('Directories are %s', result.same ? 'identical' : 'different')\n\n  console.log('Statistics - equal entries: %s, distinct entries: %s, left only entries: %s, right only entries: %s, differences: %s',\n    result.equal, result.distinct, result.left, result.right, result.differences)\n\n  result.diffSet.forEach(dif => console.log('Difference - name1: %s, type1: %s, name2: %s, type2: %s, state: %s',\n    dif.name1, dif.type1, dif.name2, dif.type2, dif.state))\n}\n```\n\nTypescript\n```typescript\nimport { compare, compareSync, Options, Result } from \"dir-compare\";\nconst path1 = '...';\nconst path2 = '...';\nconst options: Options = { compareSize: true };\n\nconst res: Result = compareSync(path1, path2, options);\nconsole.log(res)\n\ncompare(path1, path2, options)\n  .then(res => console.log(res))\n  .catch(error => console.error(error));\n```\n\n## Api\n\n\nBelow is a quick recap of the api. For more details check the [reference documentation](https://gliviu.github.io/dc-api/).\n```typescript\ncompare(path1: string, path2: string, options?: Options): Promise<Result>\ncompareSync(path1: string, path2: string, options?: Options): Result\n```\n\n```Options```\n* **compareSize**: true/false - Compares files by size. Defaults to 'false'.\n* **compareContent**: true/false - Compares files by content. Defaults to 'false'.\n* **compareFileSync**, **compareFileAsync**: Callbacks for file comparison. See [Custom file content comparators](#custom-file-content-comparators).\n* **compareDate**: true/false - Compares files by date of modification (stat.mtime). Defaults to 'false'.\n* **compareNameHandler**: Callback for name comparison. See [Custom name comparators](#custom-name-comparators).\n* **dateTolerance**: milliseconds - Two files are considered to have the same date if the difference between their modification dates fits within date tolerance. Defaults to 1000 ms.\n* **compareSymlink**: true/false - Compares entries by symlink. Defaults to 'false'.\n* **skipSymlinks**: true/false - Ignore symbolic links. Defaults to 'false'.\n* **skipSubdirs**: true/false - Skips sub directories. Defaults to 'false'.\n* **ignoreCase**: true/false - Ignores case when comparing names. Defaults to 'false'.\n* **noDiffSet**: true/false - Toggles presence of diffSet in output. If true, only statistics are provided. Use this when comparing large number of files to avoid out of memory situations. Defaults to 'false'.\n* **includeFilter**: File name filter. Comma separated [minimatch](https://www.npmjs.com/package/minimatch) patterns. See [Glob patterns](#glob-patterns) below.\n* **excludeFilter**: File/directory name exclude filter. Comma separated [minimatch](https://www.npmjs.com/package/minimatch) patterns.  See [Glob patterns](#glob-patterns) below.\n* **resultBuilder**: Callback for constructing result. Called for each compared entry pair. Updates `statistics` and `diffSet`. More details in [Custom result builder](#custom-result-builder).\n\n```Result```\n* **same**: true if directories are identical\n* **distinct**: number of distinct entries\n* **equal**: number of equal entries\n* **left**: number of entries only in path1\n* **right**: number of entries only in path2\n* **differences**: total number of differences (distinct+left+right)\n* **total**: total number of entries (differences+equal)\n* **distinctFiles**: number of distinct files\n* **equalFiles**: number of equal files\n* **leftFiles**: number of files only in path1\n* **rightFiles**: number of files only in path2\n* **differencesFiles**: total number of different files (distinctFiles+leftFiles+rightFiles)\n* **totalFiles**: total number of files (differencesFiles+equalFiles)\n* **distinctDirs**: number of distinct directories\n* **equalDirs**: number of equal directories\n* **leftDirs**: number of directories only in path1\n* **rightDirs**: number of directories only in path2\n* **differencesDirs**: total number of different directories (distinctDirs+leftDirs+rightDirs)\n* **totalDirs**: total number of directories (differencesDirs+equalDirs)\n* **brokenLinks**:\n    * **leftBrokenLinks**: number of broken links only in path1\n    * **rightBrokenLinks**: number of broken links only in path2\n    * **distinctBrokenLinks**: number of broken links with same name appearing in both path1 and path2\n    * **totalBrokenLinks**: total number of broken links (leftBrokenLinks+rightBrokenLinks+distinctBrokenLinks)\n* **symlinks**: Statistics available if `compareSymlink` options is used\n    * **distinctSymlinks**: number of distinct links\n    * **equalSymlinks**: number of equal links\n    * **leftSymlinks**: number of links only in path1\n    * **rightSymlinks**: number of links only in path2\n    * **differencesSymlinks**: total number of different links (distinctSymlinks+leftSymlinks+rightSymlinks)\n    * **totalSymlinks**: total number of links (differencesSymlinks+equalSymlinks)\n* **diffSet** - List of changes (present if `options.noDiffSet` is false)\n    * **path1**: path not including file/directory name; can be relative or absolute depending on call to compare(),\n    * **path2**: path not including file/directory name; can be relative or absolute depending on call to compare(),\n    * **relativePath**: path relative to root,\n    * **name1**: file/directory name\n    * **name2**: file/directory name\n    * **state**: one of equal, left, right, distinct,\n    * **type1**: one of missing, file, directory, broken-link\n    * **type2**: one of missing, file, directory, broken-link\n    * **size1**: file size\n    * **size2**: file size\n    * **date1**: modification date (stat.mtime)\n    * **date2**: modification date (stat.mtime)\n    * **level**: depth\n    * **reason**: Provides reason when two identically named entries are distinct.  \n      Not available if entries are equal.  \n      One of \"different-size\", \"different-date\", \"different-content\", \"broken-link\", \"different-symlink\".\n\n##  Glob patterns\n[Minimatch](https://www.npmjs.com/package/minimatch) patterns are used to include/exclude files to be compared.\n\nThe pattern is matched against the relative path of the entry being compared.\n\nFollowing examples assume we are comparing two [dir-compare](https://github.com/gliviu/dir-compare) code bases.\n\n\n```\ndircompare -x \".git,node_modules\" dir1 dir2')    exclude git and node modules directories\ndircompare -x \"expected\" dir1 dir2')             exclude '/tests/expected' directory\ndircompare -x \"/tests/expected\" dir1 dir2')      exclude '/tests/expected' directory\ndircompare -x \"**/expected\" dir1 dir2')          exclude '/tests/expected' directory\ndircompare -x \"**/tests/**/*.js\" dir1 dir2')     exclude all js files in '/tests' directory and subdirectories\ndircompare -f \"*.js,*.yml\" dir1 dir2')           include js and yaml files\ndircompare -f \"/tests/**/*.js\" dir1 dir2')       include all js files in '/tests' directory and subdirectories\ndircompare -f \"**/tests/**/*.ts\" dir1 dir2')     include all js files in '/tests' directory and subdirectories\n```\n\n## Custom file content comparators\nBy default file content is binary compared. As of version 1.5.0 custom file comparison handlers may be specified.\n\nCustom handlers are specified by `compareFileSync` and `compareFileAsync` options which correspond to `dircompare.compareSync()` or `dircompare.compare()` methods.\n\nA couple of handlers are included in the library:\n* binary sync compare - `dircompare.fileCompareHandlers.defaultFileCompare.compareSync`\n* binary async compare - `dircompare.fileCompareHandlers.defaultFileCompare.compareAsync`\n* text sync compare - `dircompare.fileCompareHandlers.lineBasedFileCompare.compareSync`\n* text async compare - `dircompare.fileCompareHandlers.lineBasedFileCompare.compareAsync`\n\nUse [defaultFileCompare.js](https://github.com/gliviu/dir-compare/blob/master/src/fileCompareHandler/defaultFileCompare.js) as an example to create your own.\n\n### Ignore line endings and white spaces\nLine based comparator can be used to ignore line ending and white space differences. This comparator is not available in [CLI](#command-line) mode.\n```javascript\nvar dircompare = require('dir-compare');\n\nvar options = {\n  compareContent: true,\n  compareFileSync: dircompare.fileCompareHandlers.lineBasedFileCompare.compareSync,\n  compareFileAsync: dircompare.fileCompareHandlers.lineBasedFileCompare.compareAsync,\n  ignoreLineEnding: true,\n  ignoreWhiteSpaces: true\n};\n\nvar path1 = '...';\nvar path2 = '...';\nvar res = dircompare.compareSync(path1, path2, options);\nconsole.log(res)\n\ndircompare.compare(path1, path2, options)\n.then(res => console.log(res))\n```\n## Custom name comparators\nIf [default](https://github.com/gliviu/dir-compare/blob/master/src/nameCompare/defaultNameCompare.js) name comparison is not enough, custom behavior can be specified with [compareNameHandler](https://gliviu.github.io/dc-api/index.html#comparenamehandler) option.\nFollowing example adds the possibility to ignore file extensions.\n```typescript\nimport { Options, compare } from 'dir-compare'\nimport path from 'path'\n\nvar options: Options = {\n    compareSize: false,                    // compare only name by disabling size and content criteria\n    compareContent: false,\n    compareNameHandler: customNameCompare, // new name comparator used to ignore extensions\n    ignoreExtension: true,                 // supported by the custom name compare below\n};\n\nfunction customNameCompare(name1: string, name2: string, options: Options) {\n    if (options.ignoreCase) {\n        name1 = name1.toLowerCase()\n        name2 = name2.toLowerCase()\n    }\n    if (options.ignoreExtension) {\n        name1 = path.basename(name1, path.extname(name1))\n        name2 = path.basename(name2, path.extname(name2))\n    }\n    return ((name1 === name2) ? 0 : ((name1 > name2) ? 1 : -1))\n}\n\nvar path1 = '/tmp/a';\nvar path2 = '/tmp/b';\n\nvar res = compare(path1, path2, options).then(res => {\n    console.log(`Same: ${res.same}`)\n    if (!res.diffSet) {\n        return\n    }\n    res.diffSet.forEach(dif => console.log(`${dif.name1} ${dif.name2} ${dif.state}`))\n})\n\n// Outputs\n// icon.svg icon.png equal\n// logo.svg logo.jpg equal\n```\n\n## Custom result builder\n[Result builder](https://gliviu.github.io/dc-api/index.html#resultbuilder) is called for each pair of entries encountered during comparison. Its purpose is to append entries in `diffSet` and eventually update `statistics` object with new stats.\n\nIf needed it can be replaced with custom implementation.\n\n```javascript\nvar dircompare = require(\"dircompare\")\n\nvar customResultBuilder = function (entry1, entry2, state, level, relativePath, options, statistics, diffSet, reason) {\n    ...\n}\n\nvar options = {\n    compareSize: true,\n    resultBuilder: customResultBuilder\n}\nvar res = dircompare.compareSync('...', '...', options)\n\n```\n\nThe [default](https://github.com/gliviu/dir-compare/blob/master/src/resultBuilder/defaultResultBuilderCallback.js) builder can be used as an example.\n\n## Symbolic links\nUnless `compareSymlink` option is used, symbolic links are resolved and any comparison is applied to the file/directory they point to.\n\nCircular loops are handled by breaking the loop as soon as it is detected.\n\nVersion `1.x` treats broken links as `ENOENT: no such file or directory`.  \nSince `2.0` they are treated as a special type of entry - `broken-link` - and are available as stats (`totalBrokenLinks`, `distinctBrokenLinks`, ...).\n\nUsing `compareSymlink` option causes `dircompare` to check symlink values for equality.\nIn this mode two entries with identical name are considered different if\n* one is symlink, the other is not\n* both are symlinks but point to different locations\n\nThese rules are applied in addition to the other comparison modes; ie. by content, by size...\n\nIf entries are different because of symlinks, `reason` will be `different-symlink`. Also statistics summarizes differences caused by symbolik links.\n\n# Command line\n```\n  Usage: dircompare [options] leftdir rightdir\n\n  Options:\n\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -c, --compare-content    compare files by content\n    -D, --compare-date       compare files by date\n    --date-tolerance [type]  tolerance to be used in date comparison (milliseconds)\n    --compare-symlink        compare files and directories by symlink\n    -f, --filter [type]      file name filter\n    -x, --exclude [type]     file/directory name exclude filter\n    -S, --skip-subdirs       do not recurse into subdirectories\n    -L, --skip-symlinks      ignore symlinks\n    -i, --ignore-case        ignores case when comparing file names\n    -l, --show-left          report - show entries occurring in left dir\n    -r, --show-right         report - show entries occurring in right dir\n    -e, --show-equal         report - show identic entries occurring in both dirs\n    -d, --show-distinct      report - show distinct entries occurring in both dirs\n    -a, --show-all           report - show all entries\n    -w, --whole-report       report - include directories in detailed report\n    --reason                 report - show reason when entries are distinct\n    --csv                    report - print details as csv\n    --nocolors               don't use console colors\n    --async                  Make use of multiple cores\n\n  By default files are compared by size.\n  --date-tolerance defaults to 1000 ms. Two files are considered to have\n  the same date if the difference between their modification dates fits\n  within date tolerance.\n\n  Exit codes:\n    0 - entries are identical\n    1 - entries are different\n    2 - error occurred\n\n  Examples:\n  compare by content         dircompare -c dir1 dir2\n  show only different files  dircompare -d dir1 dir2\n\n  exclude filter             dircompare -x \".git,node_modules\" dir1 dir2\n                             dircompare -x \"/tests/expected\" dir1 dir2\n                             dircompare -x \"**/expected\" dir1 dir2\n                             dircompare -x \"**/tests/**/*.ts\" dir1 dir2\n  \n  include filter             dircompare -f \"*.js,*.yml\" dir1 dir2\n                             dircompare -f \"/tests/**/*.js\" dir1 dir2\n                             dircompare -f \"**/tests/**/*.ts\" dir1 dir2\n```\n\n# Changelog\n* v2.4.0 New option to customize file/folder name comparison\n* v2.3.0 Fixes\n* v2.1.0 Removed [bluebird](https://github.com/petkaantonov/bluebird/#note) dependency\n* v2.0.0\n  * New option to compare symlinks.\n  * New field indicating reason for two entries being distinct.\n  * Improved command line output format.\n  * Tests are no longer part of published package.\n  * Generated [Api](#api) documentation.\n  \n  Breaking changes:\n  * Broken links are no longer treated as errors. As a result there are new statistics (leftBrokenLinks, rightBrokenLinks, distinctBrokenLinks, totalBrokenLinks) and new entry type - broken-link.\n    Details in [Symbolic links](#symbolic-links).\n  * Typescript correction: new interface `Result` replaced `Statistics`.\n* v1.8.0 \n    * globstar patterns\n    * typescript corrections\n    * removed support for node 0.11, 0.12, iojs\n* v1.7.0 performance improvements\n* v1.6.0 typescript support\n* v1.5.0 added option to ignore line endings and white space differences\n* v1.3.0 added date tolerance option\n* v1.2.0 added compare by date option\n* v1.1.0\n    * detect symlink loops\n    * improved color scheme for command line utility\n* v1.0.0\n    * asynchronous processing\n    * new library options: noDiffSet, resultBuilder\n    * new statistics: distinctFiles, equalFiles, leftFiles, rightFiles, distinctDirs, equalDirs, leftDirs, rightDirs\n    * new --async command line option\n    * Fix for https://github.com/tj/commander.js/issues/125\n* v0.0.3 Fix fille ordering issue for newer node versions\n",
    "licenseText": "Copyright 2014 Liviu Grigorescu (grigoresculiviu@gmail.com)\n\nThis project is free software released under the MIT license:\nhttp://www.opensource.org/licenses/mit-license.php \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/dir-compare/-/dir-compare-2.4.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/dir-compare/-/dir-compare-2.4.0.tgz",
    "hash": "",
    "integrity": "sha512-l9hmu8x/rjVC9Z2zmGzkhOEowZvW7pmYws5CWHutg8u1JgvsKWMx7Q/UODeu4djLZ4FgW5besw5yvMQnBHzuCA==",
    "registry": "npm",
    "packageName": "dir-compare",
    "cacheIntegrity": "sha512-l9hmu8x/rjVC9Z2zmGzkhOEowZvW7pmYws5CWHutg8u1JgvsKWMx7Q/UODeu4djLZ4FgW5besw5yvMQnBHzuCA== sha1-eFxB3F9kWzQ0Ok6vxQt5usfxFjE="
  },
  "registry": "npm",
  "hash": "97d866bbcc7fae3542f59db3986ce484e128c19bd6ee9998c2ce42587bad83cbb5260bec296331ed0fd43837aee1d8cb6781605b96deb30e72bcc427047cee08"
}