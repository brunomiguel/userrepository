{
  "manifest": {
    "name": "rbush",
    "version": "3.0.1",
    "description": "High-performance 2D spatial index for rectangles (based on R*-tree with bulk loading and bulk insertion algorithms)",
    "homepage": "https://github.com/mourner/rbush",
    "repository": {
      "type": "git",
      "url": "git://github.com/mourner/rbush.git"
    },
    "keywords": [
      "spatial",
      "tree",
      "search",
      "rectangle",
      "index",
      "math"
    ],
    "author": {
      "name": "Vladimir Agafonkin"
    },
    "license": "MIT",
    "main": "rbush.js",
    "module": "index.js",
    "browser": "rbush.min.js",
    "jsdelivr": "rbush.min.js",
    "unpkg": "rbush.min.js",
    "devDependencies": {
      "benchmark": "^2.1.4",
      "c8": "^5.0.1",
      "eslint": "^6.1.0",
      "eslint-config-mourner": "^3.0.0",
      "esm": "^3.2.25",
      "rollup": "^1.17.0",
      "rollup-plugin-buble": "^0.19.8",
      "rollup-plugin-node-resolve": "^5.2.0",
      "rollup-plugin-terser": "^5.1.1",
      "tape": "^4.11.0"
    },
    "scripts": {
      "pretest": "eslint index.js test/test.js bench/*.js",
      "test": "tape -r esm test/test.js",
      "perf": "node -r esm ./bench/perf.js",
      "cov": "c8 npm run test",
      "build": "rollup -c",
      "prepublishOnly": "npm run build"
    },
    "files": [
      "index.js",
      "rbush.js",
      "rbush.min.js"
    ],
    "eslintConfig": {
      "extends": "mourner"
    },
    "dependencies": {
      "quickselect": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-rbush-3.0.1-5fafa8a79b3b9afdfe5008403a720cc1de882ecf-integrity/node_modules/rbush/package.json",
    "readmeFilename": "README.md",
    "readme": "RBush\n=====\n\nRBush is a high-performance JavaScript library for 2D **spatial indexing** of points and rectangles.\nIt's based on an optimized **R-tree** data structure with **bulk insertion** support.\n\n*Spatial index* is a special data structure for points and rectangles\nthat allows you to perform queries like \"all items within this bounding box\" very efficiently\n(e.g. hundreds of times faster than looping over all items).\nIt's most commonly used in maps and data visualizations.\n\n[![Build Status](https://travis-ci.org/mourner/rbush.svg?branch=master)](https://travis-ci.org/mourner/rbush)\n[![](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\n## Demos\n\nThe demos contain visualization of trees generated from 50k bulk-loaded random points.\nOpen web console to see benchmarks;\nclick on buttons to insert or remove items;\nclick to perform search under the cursor.\n\n* [randomly clustered data](http://mourner.github.io/rbush/viz/viz-cluster.html)\n* [uniformly distributed random data](http://mourner.github.io/rbush/viz/viz-uniform.html)\n\n## Install\n\nInstall with NPM (`npm install rbush`), or use CDN links for browsers:\n[rbush.js](https://unpkg.com/rbush@2.0.1/rbush.js),\n[rbush.min.js](https://unpkg.com/rbush@2.0.1/rbush.min.js)\n\n## Usage\n\n### Creating a Tree\n\n```js\nconst tree = new RBush();\n```\n\nAn optional argument to `RBush` defines the maximum number of entries in a tree node.\n`9` (used by default) is a reasonable choice for most applications.\nHigher value means faster insertion and slower search, and vice versa.\n\n```js\nconst tree = new RBush(16);\n```\n\n### Adding Data\n\nInsert an item:\n\n```js\nconst item = {\n    minX: 20,\n    minY: 40,\n    maxX: 30,\n    maxY: 50,\n    foo: 'bar'\n};\ntree.insert(item);\n```\n\n### Removing Data\n\nRemove a previously inserted item:\n\n```js\ntree.remove(item);\n```\n\nBy default, RBush removes objects by reference.\nHowever, you can pass a custom `equals` function to compare by value for removal,\nwhich is useful when you only have a copy of the object you need removed (e.g. loaded from server):\n\n```js\ntree.remove(itemCopy, (a, b) => {\n    return a.id === b.id;\n});\n```\n\nRemove all items:\n\n```js\ntree.clear();\n```\n\n### Data Format\n\nBy default, RBush assumes the format of data points to be an object\nwith `minX`, `minY`, `maxX` and `maxY` properties.\nYou can customize this by overriding `toBBox`, `compareMinX` and `compareMinY` methods like this:\n\n```js\nclass MyRBush extends RBush {\n    toBBox([x, y]) { return {minX: x, minY: y, maxX: x, maxY: y}; }\n    compareMinX(a, b) { return a.x - b.x; }\n    compareMinY(a, b) { return a.y - b.y; }\n}\nconst tree = new MyRBush();\ntree.insert([20, 50]); // accepts [x, y] points\n```\n\nIf you're indexing a static list of points (you don't need to add/remove points after indexing), you should use [kdbush](https://github.com/mourner/kdbush) which performs point indexing 5-8x faster than RBush.\n\n### Bulk-Inserting Data\n\nBulk-insert the given data into the tree:\n\n```js\ntree.load([item1, item2, ...]);\n```\n\nBulk insertion is usually ~2-3 times faster than inserting items one by one.\nAfter bulk loading (bulk insertion into an empty tree),\nsubsequent query performance is also ~20-30% better.\n\nNote that when you do bulk insertion into an existing tree,\nit bulk-loads the given data into a separate tree\nand inserts the smaller tree into the larger tree.\nThis means that bulk insertion works very well for clustered data\n(where items in one update are close to each other),\nbut makes query performance worse if the data is scattered.\n\n### Search\n\n```js\nconst result = tree.search({\n    minX: 40,\n    minY: 20,\n    maxX: 80,\n    maxY: 70\n});\n```\n\nReturns an array of data items (points or rectangles) that the given bounding box intersects.\n\nNote that the `search` method accepts a bounding box in `{minX, minY, maxX, maxY}` format\nregardless of the data format.\n\n```js\nconst allItems = tree.all();\n```\n\nReturns all items of the tree.\n\n### Collisions\n\n```js\nconst result = tree.collides({minX: 40, minY: 20, maxX: 80, maxY: 70});\n```\n\nReturns `true` if there are any items intersecting the given bounding box, otherwise `false`.\n\n\n### Export and Import\n\n```js\n// export data as JSON object\nconst treeData = tree.toJSON();\n\n// import previously exported data\nconst tree = rbush(9).fromJSON(treeData);\n```\n\nImporting and exporting as JSON allows you to use RBush on both the server (using Node.js) and the browser combined,\ne.g. first indexing the data on the server and and then importing the resulting tree data on the client for searching.\n\nNote that the `nodeSize` option passed to the constructor must be the same in both trees for export/import to work properly.\n\n### K-Nearest Neighbors\n\nFor \"_k_ nearest neighbors around a point\" type of queries for RBush,\ncheck out [rbush-knn](https://github.com/mourner/rbush-knn).\n\n## Performance\n\nThe following sample performance test was done by generating\nrandom uniformly distributed rectangles of ~0.01% area and setting `maxEntries` to `16`\n(see `debug/perf.js` script).\nPerformed with Node.js v6.2.2 on a Retina Macbook Pro 15 (mid-2012).\n\nTest                         | RBush  | [old RTree](https://github.com/imbcmdth/RTree) | Improvement\n---------------------------- | ------ | ------ | ----\ninsert 1M items one by one   | 3.18s  | 7.83s  | 2.5x\n1000 searches of 0.01% area  | 0.03s  | 0.93s  | 30x\n1000 searches of 1% area     | 0.35s  | 2.27s  | 6.5x\n1000 searches of 10% area    | 2.18s  | 9.53s  | 4.4x\nremove 1000 items one by one | 0.02s  | 1.18s  | 50x\nbulk-insert 1M items         | 1.25s  | n/a    | 6.7x\n\n## Algorithms Used\n\n* single insertion: non-recursive R-tree insertion with overlap minimizing split routine from R\\*-tree (split is very effective in JS, while other R\\*-tree modifications like reinsertion on overflow and overlap minimizing subtree search are too slow and not worth it)\n* single deletion: non-recursive R-tree deletion using depth-first tree traversal with free-at-empty strategy (entries in underflowed nodes are not reinserted, instead underflowed nodes are kept in the tree and deleted only when empty, which is a good compromise of query vs removal performance)\n* bulk loading: OMT algorithm (Overlap Minimizing Top-down Bulk Loading) combined with Floydâ€“Rivest selection algorithm\n* bulk insertion: STLT algorithm (Small-Tree-Large-Tree)\n* search: standard non-recursive R-tree search\n\n## Papers\n\n* [R-trees: a Dynamic Index Structure For Spatial Searching](http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf)\n* [The R*-tree: An Efficient and Robust Access Method for Points and Rectangles+](http://dbs.mathematik.uni-marburg.de/publications/myPapers/1990/BKSS90.pdf)\n* [OMT: Overlap Minimizing Top-down Bulk Loading Algorithm for R-tree](http://ftp.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-74/files/FORUM_18.pdf)\n* [Bulk Insertions into R-Trees Using the Small-Tree-Large-Tree Approach](http://www.cs.arizona.edu/~bkmoon/papers/dke06-bulk.pdf)\n* [R-Trees: Theory and Applications (book)](http://www.apress.com/9781852339777)\n\n## Development\n\n```bash\nnpm install  # install dependencies\n\nnpm test     # lint the code and run tests\nnpm run perf # run performance benchmarks\nnpm run cov  # report test coverage\n```\n\n## Compatibility\n\nRBush should run on Node and all major browsers that support ES5.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Vladimir Agafonkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rbush/-/rbush-3.0.1.tgz#5fafa8a79b3b9afdfe5008403a720cc1de882ecf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rbush/-/rbush-3.0.1.tgz",
    "hash": "5fafa8a79b3b9afdfe5008403a720cc1de882ecf",
    "integrity": "sha512-XRaVO0YecOpEuIvbhbpTrZgoiI6xBlz6hnlr6EHhd+0x9ase6EmeN+hdwwUaJvLcsFFQ8iWVF1GAK1yB0BWi0w==",
    "registry": "npm",
    "packageName": "rbush",
    "cacheIntegrity": "sha512-XRaVO0YecOpEuIvbhbpTrZgoiI6xBlz6hnlr6EHhd+0x9ase6EmeN+hdwwUaJvLcsFFQ8iWVF1GAK1yB0BWi0w== sha1-X6+op5s7mv3+UAhAOnIMwd6ILs8="
  },
  "registry": "npm",
  "hash": "5fafa8a79b3b9afdfe5008403a720cc1de882ecf"
}