"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createI18n = void 0;
var key_1 = require("./key");
var parseValue = function (value) {
    if (typeof value === "string") {
        return { key: value };
    }
    else if (typeof value === "object") {
        if (!value.key && value.path) {
            value.key = value.path;
            delete value.path;
        }
        if (!value.key) {
            throw new Error("no key in value");
        }
        return value;
    }
    else {
        throw new Error();
    }
};
var createI18n = function (i18next) { return ({
    install: function (app, options) {
        if (options === void 0) { options = {}; }
        options.bindI18n = options.bindI18n || "languageChanged loaded";
        options.bindStore = options.bindStore || "added removed";
        app.mixin({
            created: function () {
                var _this = this;
                if (options.bindI18n) {
                    i18next.on(options.bindI18n, function () { return _this.$forceUpdate(); });
                }
                if (options.bindStore && i18next.store) {
                    i18next.store.on(options.bindStore, function () { return _this.$forceUpdate(); });
                }
            },
        });
        app.config.globalProperties.$i18n = i18next;
        app.config.globalProperties.$t = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return i18next.t.apply(i18next, args);
        };
        var bind = function (el, _a) {
            var value = _a.value;
            var parsedValue = parseValue(value);
            el.textContent = i18next.t(parsedValue.key, parsedValue);
        };
        app.directive("t", {
            beforeMount: bind,
            beforeUpdate: bind,
        });
        app.provide(key_1.i18nextKey, i18next);
    },
}); };
exports.createI18n = createI18n;
