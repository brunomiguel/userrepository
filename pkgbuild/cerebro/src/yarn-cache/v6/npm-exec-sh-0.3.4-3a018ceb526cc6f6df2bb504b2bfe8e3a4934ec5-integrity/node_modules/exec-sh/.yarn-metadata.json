{
  "manifest": {
    "name": "exec-sh",
    "version": "0.3.4",
    "description": "Execute shell command forwarding all stdio.",
    "main": "lib/exec-sh.js",
    "scripts": {
      "test": "npm run lint && npm run cover-test",
      "cover-test": "nyc --reporter=html --report-dir=artifacts/coverage mocha",
      "lint": "standard --verbose **/*.js",
      "dev": "mocha --reporter spec --watch",
      "jsdoc": "jsdoc --private --destination artifacts/jsdoc lib/"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:tsertkov/exec-sh.git"
    },
    "keywords": [
      "exec",
      "spawn",
      "terminal",
      "console",
      "shell",
      "command",
      "child_process"
    ],
    "author": {
      "name": "Aleksandr Tsertkov",
      "email": "tsertkov@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/tsertkov/exec-sh/issues"
    },
    "dependencies": {},
    "devDependencies": {
      "coveralls": "^3.0.7",
      "jsdoc": "^3.6.3",
      "jshint": "^2.10.3",
      "mocha": "^6.2.2",
      "nyc": "^14.1.1",
      "sinon": "^7.5.0",
      "standard": "^14.3.1"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-exec-sh-0.3.4-3a018ceb526cc6f6df2bb504b2bfe8e3a4934ec5-integrity/node_modules/exec-sh/package.json",
    "readmeFilename": "README.md",
    "readme": "# exec-sh\n\n[![NPM](https://nodei.co/npm/exec-sh.png)](https://nodei.co/npm/exec-sh/)\n\n[![NPM Downloads](https://img.shields.io/npm/dm/exec-sh.svg)](https://www.npmjs.com/package/exec-sh)\n[![Build Status](https://travis-ci.org/tsertkov/exec-sh.svg?branch=master)](https://travis-ci.org/tsertkov/exec-sh)\n[![Coverage Status](https://img.shields.io/coveralls/tsertkov/exec-sh.svg)](https://coveralls.io/r/tsertkov/exec-sh?branch=master)\n[![David Status](https://david-dm.org/tsertkov/exec-sh.png)](https://david-dm.org/tsertkov/exec-sh)\n\n> Execute shell command forwarding all stdio streams.\n\n## Features\n\nexec-sh is a wrapper for [`child_process.spawn`](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) with some improvements:\n\n- Cross platform command execution:\n  - Windows: `cmd /C COMMAND`\n  - others: `sh -c COMMAND`\n- Fowrards all stdio streams to current terminal (by default):\n  - `execSh(\"bash\")`\n  - `execsh(\"echo -n Say: && read i && echo Said:$i\")`\n- stdout and stderr are passed to callback when available\n  - `execSh(\"pwd\", console.log)`\n\n## Showcase\n```javascript\n// JavaScript\n\nexecSh(\"echo hello exec-sh && bash\", { cwd: \"/home\" }, function(err){\n  if (err) {\n    console.log(\"Exit code: \", err.code);\n  }\n});\n```\n\n```sh\n# Terminal output: interactive bash session\n\nhello exec-sh\nbash-3.2$ pwd\n/home\nbash-3.2$ exit 99\nexit\nExit code:  99\n```\n\n## Usage\n\n```javascript\nvar execSh = require(\"../\");\n\n// run interactive bash shell\nexecSh(\"echo lorem && bash\", { cwd: \"/home\" }, function(err){\n  if (err) {\n    console.log(\"Exit code: \", err.code);\n    return;\n  }\n\n  // collect streams output\n  var child = execSh([\"bash -c id\", \"echo lorem >&2\"], true,\n    function(err, stdout, stderr){\n      console.log(\"error: \", err);\n      console.log(\"stdout: \", stdout);\n      console.log(\"stderr: \", stderr);\n    });\n});\n```\n\n## Promise Interface\n\n```javascript\nvar execShPromise = require(\"exec-sh\").promise;\n\n// run interactive bash shell\nconst run = async () => {\n  let out;\n\n  try {\n    out = await execShPromise('pwd', true);\n  } catch (e) {\n    console.log('Error: ', e);\n    console.log('Stderr: ', e.stderr);\n    console.log('Stdout: ', e.stdout);\n\n    return e;\n  }\n\n  console.log('out: ', out.stdout, out.stderr);\n}\n\nrun();\n```\n\n## Public API\n\n### `execSh(command, [options], [callback])`\n\nExecute shell command forwarding all stdio.\n\n**Parameters:**\n\n- `command {String|Array}` - The command to run, or array of commands\n- `[options] {Object|TRUE}` - Options object passed directly to [`child_process.spawn`](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options), when `TRUE` then `{ stdio: null }` used\n- `[callback] {Function}` - `callback(err, stdout, stderr)`\n - `err {Error|NULL}` - Error object. Has `code` property containing last command exit code when available\n - `stdout {String|NULL}` - aggregated stdout or `NULL` if not available\n - `stderr {String|NULL}` - aggregated stderr or `NULL` if not available\n\n**Return Values:**\n\nReturns [ChildProcess](http://nodejs.org/api/child_process.html#child_process_class_childprocess) object.\n\n## Private API\nComplete API Documentation including private and public methods is generated from source code by JSDoc tool and is [available here](https://s3.eu-central-1.amazonaws.com/tsertkov-artifacts/exec-sh/master/jsdoc/index.html).\n\n## Code Coverage\nCode coverage report for all files is [available here](https://s3.eu-central-1.amazonaws.com/tsertkov-artifacts/exec-sh/master/coverage/index.html).\n\n## Scripts\n\n- `npm test` - run tests\n- `npm run jsdoc` - build jsdoc\n- `npm run dev` - run tests continuously\n\n## License\n\nThe MIT License (MIT)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Aleksandr Tsertkov <tsertkov@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.3.4.tgz#3a018ceb526cc6f6df2bb504b2bfe8e3a4934ec5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.3.4.tgz",
    "hash": "3a018ceb526cc6f6df2bb504b2bfe8e3a4934ec5",
    "integrity": "sha512-sEFIkc61v75sWeOe72qyrqg2Qg0OuLESziUDk/O/z2qgS15y2gWVFrI6f2Qn/qw/0/NCfCEsmNA4zOjkwEZT1A==",
    "registry": "npm",
    "packageName": "exec-sh",
    "cacheIntegrity": "sha512-sEFIkc61v75sWeOe72qyrqg2Qg0OuLESziUDk/O/z2qgS15y2gWVFrI6f2Qn/qw/0/NCfCEsmNA4zOjkwEZT1A== sha1-OgGM61JsxvbfK7UEsr/o46STTsU="
  },
  "registry": "npm",
  "hash": "3a018ceb526cc6f6df2bb504b2bfe8e3a4934ec5"
}