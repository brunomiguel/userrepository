{
  "manifest": {
    "name": "postcss-media-query-parser",
    "version": "0.2.3",
    "description": "A tool for parsing media query lists.",
    "main": "dist/index.js",
    "keywords": [
      "postcss",
      "postcss tool",
      "media query",
      "media query parsing"
    ],
    "author": {
      "name": "dryoma"
    },
    "license": "MIT",
    "homepage": "https://github.com/dryoma/postcss-media-query-parser",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dryoma/postcss-media-query-parser.git"
    },
    "bugs": {
      "url": "https://github.com/dryoma/postcss-media-query-parser/issues"
    },
    "devDependencies": {
      "babel-cli": "^6.14.0",
      "babel-preset-es2015": "^6.14.0",
      "babel-register": "^6.14.0",
      "eslint": "^2.5.1",
      "eslint-config-airbnb": "^6.0.2",
      "eslint-plugin-react": "^4.2.3",
      "tap-spec": "^4.1.1",
      "tape": "^4.6.0"
    },
    "scripts": {
      "lint": "eslint . --ignore-path .gitignore",
      "test": "tape -r babel-register \"src/**/__tests__/*.js\" | tap-spec",
      "pretest": "npm run lint",
      "prebuild": "rimraf dist",
      "prepublish": "npm run build",
      "build": "babel src --out-dir dist"
    },
    "eslintConfig": {
      "extends": "airbnb",
      "rules": {
        "max-len": [
          2,
          80,
          4
        ],
        "func-names": 0
      }
    },
    "babel": {
      "presets": [
        "es2015"
      ]
    },
    "files": [
      "dist",
      "!**/__tests__"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-postcss-media-query-parser-0.2.3-27b39c6f4d94f81b1a73b8f76351c609e5cef244-integrity/node_modules/postcss-media-query-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# postcss-media-query-parser\n\n[![NPM version](http://img.shields.io/npm/v/postcss-media-query-parser.svg)](https://www.npmjs.com/package/postcss-media-query-parser) [![Build Status](https://travis-ci.org/dryoma/postcss-media-query-parser.svg?branch=master)](https://travis-ci.org/dryoma/postcss-media-query-parser)\n\nMedia query parser with very simple traversing functionality.\n\n## Installation and usage\n\nFirst install it via NPM:\n\n```\nnpm install postcss-media-query-parser\n```\n\nThen in your Node.js application:\n\n```js\nimport mediaParser from \"postcss-media-query-parser\";\n\nconst mediaQueryString = \"(max-width: 100px), not print\";\nconst result = mediaParser(mediaQueryString);\n```\n\nThe `result` will be this object:\n\n```js\n{\n  type: 'media-query-list',\n  value: '(max-width: 100px), not print',\n  after: '',\n  before: '',\n  sourceIndex: 0,\n\n  // the first media query\n  nodes: [{\n    type: 'media-query',\n    value: '(max-width: 100px)',\n    before: '',\n    after: '',\n    sourceIndex: 0,\n    parent: <link to parent 'media-query-list' node>,\n    nodes: [{\n      type: 'media-feature-expression',\n      value: '(max-width: 100px)',\n      before: '',\n      after: '',\n      sourceIndex: 0,\n      parent: <link to parent 'media-query' node>,\n      nodes: [{\n        type: 'media-feature',\n        value: 'max-width',\n        before: '',\n        after: '',\n        sourceIndex: 1,\n        parent: <link to parent 'media-feature-expression' node>,\n      }, {\n        type: 'colon',\n        value: ':',\n        before: '',\n        after: ' ',\n        sourceIndex: 10,\n        parent: <link to parent 'media-feature-expression' node>,\n      }, {\n        type: 'value',\n        value: '100px',\n        before: ' ',\n        after: '',\n        sourceIndex: 12,\n        parent: <link to parent 'media-feature-expression' node>,\n      }]\n    }]\n  },\n  // the second media query\n  {\n    type: 'media-query',\n    value: 'not print',\n    before: ' ',\n    after: '',\n    sourceIndex: 20,\n    parent: <link to parent 'media-query-list' node>,\n    nodes: [{\n      type: 'keyword',\n      value: 'not',\n      before: ' ',\n      after: ' ',\n      sourceIndex: 20,\n      parent: <link to parent 'media-query' node>,\n    }, {\n      type: 'media-type',\n      value: 'print',\n      before: ' ',\n      after: '',\n      sourceIndex: 24,\n      parent: <link to parent 'media-query' node>,\n    }]\n  }]\n}\n```\n\nOne of the likely sources of a string to parse would be traversing [a PostCSS container node](http://api.postcss.org/Root.html) and getting the `params` property of nodes with the name of \"atRule\":\n\n```js\nimport postcss from \"postcss\";\nimport mediaParser from \"postcss-media-query-parser\";\n\nconst root = postcss.parse(<contents>);\n// ... or any other way to get sucn container\n\nroot.walkAtRules(\"media\", (atRule) => {\n  const mediaParsed = mediaParser(atRule.params);\n  // Do something with \"mediaParsed\" object\n});\n```\n\n## Nodes\n\nNode is a very generic item in terms of this parser. It's is pretty much everything that ends up in the parsed result. Each node has these properties:\n\n* `type`: the type of the node (see below);\n* `value`: the node's value stripped of trailing whitespaces;\n* `sourceIndex`: 0-based index of the node start relative to the source start (excluding trailing whitespaces);\n* `before`: a string that contain a whitespace between the node start and the previous node end/source start;\n* `after`: a string that contain a whitespace between the node end and the next node start/source end;\n* `parent`: a link to this node's parent node (a container).\n\nA node can have one of these types (according to [the 2012 CSS3 standard](https://www.w3.org/TR/2012/REC-css3-mediaqueries-20120619/)):\n\n* `media-query-list`: that is the root level node of the parsing result. A [container](#containers); its children can have types of `url` and `media-query`.\n* `url`: if a source is taken from a CSS `@import` rule, it will have a `url(...)` function call. The value of such node will be `url(http://uri-address)`, it is to be parsed separately.\n* `media-query`: such nodes correspond to each media query in a comma separated list. In the exapmle above there are two. Nodes of this type are [containers](#containers).\n* `media-type`: `screen`, `tv` and other media types.\n* `keyword`: `only`, `not` or `and` keyword.\n* `media-feature-expression`: an expression in parentheses that checks for a condition of a particular media feature. The value would be like this: `(max-width: 1000px)`. Such nodes are [containers](#containers). They always have a `media-feature` child node, but might not have a `value` child node (like in `screen and (color)`).\n* `media-feature`: a media feature, e.g. `max-width`.\n* `colon`: present if a media feature expression has a colon (e.g. `(min-width: 1000px)`, compared to `(color)`).\n* `value`: a media feature expression value, e.g. `100px` in `(max-width: 1000px)`.\n\n### Parsing details\n\npostcss-media-query-parser allows for cases of some **non-standard syntaxes** and tries its best to work them around. For example, in a media query from a code with SCSS syntax:\n\n```scss\n@media #{$media-type} and ( #{\"max-width\" + \": 10px\"} ) { ... }\n```\n\n`#{$media-type}` will be the node of type `media-type`, alghough `$media-type`'s value can be `only screen`. And inside `media-feature-expression` there will only be a `media-feature` type node with the value of `#{\"max-width\" + \": 10px\"}` (this example doesn't make much sense, it's for demo purpose).\n\nBut the result of parsing **malformed media queries** (such as with incorrect amount of closing parens, curly braces, etc.) can be unexpected. For exapmle, parsing:\n\n```scss\n@media ((min-width: -100px)\n```\n\nwould return a media query list with the single `media-query` node that has no child nodes.\n\n## Containers\n\nContainers are [nodes](#nodes) that have other nodes as children. Container nodes have an additional property `nodes` which is an array of their child nodes. And also these methods:\n\n* `each(callback)` - traverses the direct child nodes of a container, calling `callback` function for each of them. Returns `false` if traversing has stopped by means of `callback` returning `false`, and `true` otherwise.\n* `walk([filter, ]callback)` - traverses ALL descendant nodes of a container, calling `callback` function for each of them. Returns `false` if traversing has stopped by means of `callback` returning `false`, and `true` otherwise.\n\nIn both cases `callback` takes these parameters:\n\n- `node` - the current node (one of the container's descendats, that the callback has been called against).\n- `i` - 0-based index of the `node` in an array of its parent's children.\n- `nodes` - array of child nodes of `node`'s parent.\n\nIf `callback` returns `false`, the traversing stops.\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-media-query-parser/-/postcss-media-query-parser-0.2.3.tgz#27b39c6f4d94f81b1a73b8f76351c609e5cef244",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-media-query-parser/-/postcss-media-query-parser-0.2.3.tgz",
    "hash": "27b39c6f4d94f81b1a73b8f76351c609e5cef244",
    "integrity": "sha512-3sOlxmbKcSHMjlUXQZKQ06jOswE7oVkXPxmZdoB1r5l0q6gTFTQSHxNxOrCccElbW7dxNytifNEo8qidX2Vsig==",
    "registry": "npm",
    "packageName": "postcss-media-query-parser",
    "cacheIntegrity": "sha512-3sOlxmbKcSHMjlUXQZKQ06jOswE7oVkXPxmZdoB1r5l0q6gTFTQSHxNxOrCccElbW7dxNytifNEo8qidX2Vsig== sha1-J7Ocb02U+Bsac7j3Y1HGCeXO8kQ="
  },
  "registry": "npm",
  "hash": "27b39c6f4d94f81b1a73b8f76351c609e5cef244"
}