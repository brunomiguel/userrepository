{
  "manifest": {
    "name": "@octokit/auth-token",
    "description": "GitHub API token authentication for browsers and Node.js",
    "version": "2.4.5",
    "license": "MIT",
    "files": [
      "dist-*/",
      "bin/"
    ],
    "pika": true,
    "sideEffects": false,
    "keywords": [
      "github",
      "octokit",
      "authentication",
      "api"
    ],
    "homepage": "https://github.com/octokit/auth-token.js#readme",
    "bugs": {
      "url": "https://github.com/octokit/auth-token.js/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/octokit/auth-token.js"
    },
    "dependencies": {
      "@octokit/types": "^6.0.3"
    },
    "devDependencies": {
      "@octokit/core": "^3.0.0",
      "@octokit/request": "^5.3.0",
      "@pika/pack": "^0.5.0",
      "@pika/plugin-build-node": "^0.9.0",
      "@pika/plugin-build-web": "^0.9.0",
      "@pika/plugin-ts-standard-pkg": "^0.9.0",
      "@types/fetch-mock": "^7.3.1",
      "@types/jest": "^26.0.0",
      "fetch-mock": "^9.0.0",
      "jest": "^26.0.0",
      "semantic-release": "^17.0.0",
      "ts-jest": "^26.0.0",
      "typescript": "^4.0.0"
    },
    "publishConfig": {
      "access": "public"
    },
    "source": "dist-src/index.js",
    "types": "dist-types/index.d.ts",
    "main": "dist-node/index.js",
    "module": "dist-web/index.js",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@octokit-auth-token-2.4.5-integrity/node_modules/@octokit/auth-token/package.json",
    "readmeFilename": "README.md",
    "readme": "# auth-token.js\n\n> GitHub API token authentication for browsers and Node.js\n\n[![@latest](https://img.shields.io/npm/v/@octokit/auth-token.svg)](https://www.npmjs.com/package/@octokit/auth-token)\n[![Build Status](https://github.com/octokit/auth-token.js/workflows/Test/badge.svg)](https://github.com/octokit/auth-token.js/actions?query=workflow%3ATest)\n\n`@octokit/auth-token` is the simplest of [GitHub’s authentication strategies](https://github.com/octokit/auth.js).\n\nIt is useful if you want to support multiple authentication strategies, as it’s API is compatible with its sibling packages for [basic](https://github.com/octokit/auth-basic.js), [GitHub App](https://github.com/octokit/auth-app.js) and [OAuth app](https://github.com/octokit/auth.js) authentication.\n\n<!-- toc -->\n\n- [Usage](#usage)\n- [`createTokenAuth(token) options`](#createtokenauthtoken-options)\n- [`auth()`](#auth)\n- [Authentication object](#authentication-object)\n- [`auth.hook(request, route, options)` or `auth.hook(request, options)`](#authhookrequest-route-options-or-authhookrequest-options)\n- [Find more information](#find-more-information)\n  - [Find out what scopes are enabled for oauth tokens](#find-out-what-scopes-are-enabled-for-oauth-tokens)\n  - [Find out if token is a personal access token or if it belongs to an OAuth app](#find-out-if-token-is-a-personal-access-token-or-if-it-belongs-to-an-oauth-app)\n  - [Find out what permissions are enabled for a repository](#find-out-what-permissions-are-enabled-for-a-repository)\n  - [Use token for git operations](#use-token-for-git-operations)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Usage\n\n<table>\n<tbody valign=top align=left>\n<tr><th>\nBrowsers\n</th><td width=100%>\n\nLoad `@octokit/auth-token` directly from [cdn.skypack.dev](https://cdn.skypack.dev)\n\n```html\n<script type=\"module\">\n  import { createTokenAuth } from \"https://cdn.skypack.dev/@octokit/auth-token\";\n</script>\n```\n\n</td></tr>\n<tr><th>\nNode\n</th><td>\n\nInstall with <code>npm install @octokit/auth-token</code>\n\n```js\nconst { createTokenAuth } = require(\"@octokit/auth-token\");\n// or: import { createTokenAuth } from \"@octokit/auth-token\";\n```\n\n</td></tr>\n</tbody>\n</table>\n\n```js\nconst auth = createTokenAuth(\"1234567890abcdef1234567890abcdef12345678\");\nconst authentication = await auth();\n// {\n//   type: 'token',\n//   token: '1234567890abcdef1234567890abcdef12345678',\n//   tokenType: 'oauth'\n// }\n```\n\n## `createTokenAuth(token) options`\n\nThe `createTokenAuth` method accepts a single argument of type string, which is the token. The passed token can be one of the following:\n\n- [Personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line)\n- [OAuth access token](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/)\n- Installation access token ([GitHub App Installation](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation))\n- [GITHUB_TOKEN provided to GitHub Actions](https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables)\n\nExamples\n\n```js\n// Personal access token or OAuth access token\ncreateTokenAuth(\"1234567890abcdef1234567890abcdef12345678\");\n\n// Installation access token or GitHub Action token\ncreateTokenAuth(\"v1.d3d433526f780fbcc3129004e2731b3904ad0b86\");\n```\n\n## `auth()`\n\nThe `auth()` method has no options. It returns a promise which resolves with the the authentication object.\n\n## Authentication object\n\n<table width=\"100%\">\n  <thead align=left>\n    <tr>\n      <th width=150>\n        name\n      </th>\n      <th width=70>\n        type\n      </th>\n      <th>\n        description\n      </th>\n    </tr>\n  </thead>\n  <tbody align=left valign=top>\n    <tr>\n      <th>\n        <code>type</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        <code>\"token\"</code>\n      </td>\n    </tr>\n    <tr>\n      <th>\n        <code>token</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        The provided token.\n      </td>\n    </tr>\n    <tr>\n      <th>\n        <code>tokenType</code>\n      </th>\n      <th>\n        <code>string</code>\n      </th>\n      <td>\n        Can be either <code>\"oauth\"</code> for personal access tokens and OAuth tokens, or <code>\"installation\"</code> for installation access tokens (includes <code>GITHUB_TOKEN</code> provided to GitHub Actions)\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## `auth.hook(request, route, options)` or `auth.hook(request, options)`\n\n`auth.hook()` hooks directly into the request life cycle. It authenticates the request using the provided token.\n\nThe `request` option is an instance of [`@octokit/request`](https://github.com/octokit/request.js#readme). The `route`/`options` parameters are the same as for the [`request()` method](https://github.com/octokit/request.js#request).\n\n`auth.hook()` can be called directly to send an authenticated request\n\n```js\nconst { data: authorizations } = await auth.hook(\n  request,\n  \"GET /authorizations\"\n);\n```\n\nOr it can be passed as option to [`request()`](https://github.com/octokit/request.js#request).\n\n```js\nconst requestWithAuth = request.defaults({\n  request: {\n    hook: auth.hook,\n  },\n});\n\nconst { data: authorizations } = await requestWithAuth(\"GET /authorizations\");\n```\n\n## Find more information\n\n`auth()` does not send any requests, it only transforms the provided token string into an authentication object.\n\nHere is a list of things you can do to retrieve further information\n\n### Find out what scopes are enabled for oauth tokens\n\nNote that this does not work for installations. There is no way to retrieve permissions based on an installation access tokens.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"HEAD /\", {\n  headers: authentication.headers,\n});\nconst scopes = response.headers[\"x-oauth-scopes\"].split(/,\\s+/);\n\nif (scopes.length) {\n  console.log(\n    `\"${TOKEN}\" has ${scopes.length} scopes enabled: ${scopes.join(\", \")}`\n  );\n} else {\n  console.log(`\"${TOKEN}\" has no scopes enabled`);\n}\n```\n\n### Find out if token is a personal access token or if it belongs to an OAuth app\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"HEAD /\", {\n  headers: authentication.headers,\n});\nconst clientId = response.headers[\"x-oauth-client-id\"];\n\nif (clientId) {\n  console.log(\n    `\"${token}\" is an OAuth token, its app’s client_id is ${clientId}.`\n  );\n} else {\n  console.log(`\"${token}\" is a personal access token`);\n}\n```\n\n### Find out what permissions are enabled for a repository\n\nNote that the `permissions` key is not set when authenticated using an installation access token.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst authentication = await auth();\n\nconst response = await request(\"GET /repos/{owner}/{repo}\", {\n  owner: 'octocat',\n  repo: 'hello-world'\n  headers: authentication.headers\n});\n\nconsole.log(response.data.permissions)\n// {\n//   admin: true,\n//   push: true,\n//   pull: true\n// }\n```\n\n### Use token for git operations\n\nBoth OAuth and installation access tokens can be used for git operations. However, when using with an installation, [the token must be prefixed with `x-access-token`](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#http-based-git-access-by-an-installation).\n\nThis example is using the [`execa`](https://github.com/sindresorhus/execa) package to run a `git push` command.\n\n```js\nconst TOKEN = \"1234567890abcdef1234567890abcdef12345678\";\n\nconst auth = createTokenAuth(TOKEN);\nconst { token, tokenType } = await auth();\nconst tokenWithPrefix =\n  tokenType === \"installation\" ? `x-access-token:${token}` : token;\n\nconst repositoryUrl = `https://${tokenWithPrefix}@github.com/octocat/hello-world.git`;\n\nconst { stdout } = await execa(\"git\", [\"push\", repositoryUrl]);\nconsole.log(stdout);\n```\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2019 Octokit contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.4.5.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.4.5.tgz",
    "hash": "",
    "integrity": "sha512-BpGYsPgJt05M7/L/5FoE1PiAbdxXFZkX/3kDYcsvd1v6UhlnE5e96dTDr0ezX/EFwciQxf3cNV0loipsURU+WA==",
    "registry": "npm",
    "packageName": "@octokit/auth-token",
    "cacheIntegrity": "sha512-BpGYsPgJt05M7/L/5FoE1PiAbdxXFZkX/3kDYcsvd1v6UhlnE5e96dTDr0ezX/EFwciQxf3cNV0loipsURU+WA== sha1-VozPuMtG82RB+sCUzjT3qHWxl/M="
  },
  "registry": "npm",
  "hash": "069198b0f809b74e4ceff2ffe45a04d4f8806ddc57159917ff790361cb2f775bfa5219671397bde9d4c3af47b35ff105c1c890c5fddc355d25a22a6c51153e58"
}