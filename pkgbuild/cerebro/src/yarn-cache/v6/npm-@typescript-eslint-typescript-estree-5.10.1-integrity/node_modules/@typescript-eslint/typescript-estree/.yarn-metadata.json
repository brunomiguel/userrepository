{
  "manifest": {
    "name": "@typescript-eslint/typescript-estree",
    "version": "5.10.1",
    "description": "A parser that converts TypeScript source code into an ESTree compatible form",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist",
      "README.md",
      "LICENSE"
    ],
    "engines": {
      "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/typescript-eslint/typescript-eslint.git",
      "directory": "packages/typescript-estree"
    },
    "bugs": {
      "url": "https://github.com/typescript-eslint/typescript-eslint/issues"
    },
    "license": "BSD-2-Clause",
    "keywords": [
      "ast",
      "estree",
      "ecmascript",
      "javascript",
      "typescript",
      "parser",
      "syntax"
    ],
    "scripts": {
      "build": "tsc -b tsconfig.build.json",
      "postbuild": "downlevel-dts dist _ts3.4/dist",
      "clean": "tsc -b tsconfig.build.json --clean",
      "postclean": "rimraf dist && rimraf _ts3.4 && rimraf coverage",
      "format": "prettier --write \"./**/*.{ts,js,json,md}\" --ignore-path ../../.prettierignore",
      "lint": "eslint . --ext .js,.ts --ignore-path='../../.eslintignore'",
      "test": "jest --coverage",
      "typecheck": "tsc -p tsconfig.json --noEmit"
    },
    "dependencies": {
      "@typescript-eslint/types": "5.10.1",
      "@typescript-eslint/visitor-keys": "5.10.1",
      "debug": "^4.3.2",
      "globby": "^11.0.4",
      "is-glob": "^4.0.3",
      "semver": "^7.3.5",
      "tsutils": "^3.21.0"
    },
    "devDependencies": {
      "@babel/code-frame": "*",
      "@babel/parser": "*",
      "@babel/types": "*",
      "@types/babel__code-frame": "*",
      "@types/debug": "*",
      "@types/glob": "*",
      "@types/is-glob": "*",
      "@types/semver": "*",
      "@types/tmp": "*",
      "@typescript-eslint/shared-fixtures": "5.10.1",
      "glob": "*",
      "jest-specific-snapshot": "*",
      "make-dir": "*",
      "tmp": "*",
      "typescript": "*"
    },
    "peerDependenciesMeta": {
      "typescript": {
        "optional": true
      }
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/typescript-eslint"
    },
    "typesVersions": {
      "<3.8": {
        "*": [
          "_ts3.4/*"
        ]
      }
    },
    "gitHead": "3e1ebcad557fc3c13f24dcd632ca423b63e5f9dd",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@typescript-eslint-typescript-estree-5.10.1-integrity/node_modules/@typescript-eslint/typescript-estree/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">TypeScript ESTree</h1>\n\n<p align=\"center\">A parser that converts TypeScript source code into an <a href=\"https://github.com/estree/estree\">ESTree</a>-compatible form</p>\n\n<p align=\"center\">\n    <img src=\"https://github.com/typescript-eslint/typescript-eslint/workflows/CI/badge.svg\" alt=\"CI\" />\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/v/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/dm/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Downloads\" /></a>\n</p>\n\n## Getting Started\n\n**[You can find our Getting Started docs here](https://typescript-eslint.io/docs/linting)**\n\n## About\n\nThis parser is somewhat generic and robust, and could be used to power any use-case which requires taking TypeScript source code and producing an ESTree-compatible AST.\n\nIn fact, it is already used within these hyper-popular open-source projects to power their TypeScript support:\n\n- [ESLint](https://eslint.org), the pluggable linting utility for JavaScript and JSX\n- [Prettier](https://prettier.io), an opinionated code formatter\n\n## Installation\n\n```sh\nyarn add -D @typescript-eslint/typescript-estree\n```\n\n## API\n\n### Parsing\n\n#### `parse(code, options)`\n\nParses the given string of code with the options provided and returns an ESTree-compatible AST.\n\n```ts\ninterface ParseOptions {\n  /**\n   * create a top-level comments array containing all comments\n   */\n  comment?: boolean;\n\n  /**\n   * An array of modules to turn explicit debugging on for.\n   * - 'typescript-eslint' is the same as setting the env var `DEBUG=typescript-eslint:*`\n   * - 'eslint' is the same as setting the env var `DEBUG=eslint:*`\n   * - 'typescript' is the same as setting `extendedDiagnostics: true` in your tsconfig compilerOptions\n   *\n   * For convenience, also supports a boolean:\n   * - true === ['typescript-eslint']\n   * - false === []\n   */\n  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];\n\n  /**\n   * Cause the parser to error if it encounters an unknown AST node type (useful for testing).\n   * This case only usually occurs when TypeScript releases new features.\n   */\n  errorOnUnknownASTType?: boolean;\n\n  /**\n   * Absolute (or relative to `cwd`) path to the file being parsed.\n   */\n  filePath?: string;\n\n  /**\n   * Enable parsing of JSX.\n   * For more details, see https://www.typescriptlang.org/docs/handbook/jsx.html\n   *\n   * NOTE: this setting does not effect known file types (.js, .jsx, .ts, .tsx, .json) because the\n   * TypeScript compiler has its own internal handling for known file extensions.\n   *\n   * For the exact behavior, see https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser#parseroptionsecmafeaturesjsx\n   */\n  jsx?: boolean;\n\n  /**\n   * Controls whether the `loc` information to each node.\n   * The `loc` property is an object which contains the exact line/column the node starts/ends on.\n   * This is similar to the `range` property, except it is line/column relative.\n   */\n  loc?: boolean;\n\n  /*\n   * Allows overriding of function used for logging.\n   * When value is `false`, no logging will occur.\n   * When value is not provided, `console.log()` will be used.\n   */\n  loggerFn?: Function | false;\n\n  /**\n   * Controls whether the `range` property is included on AST nodes.\n   * The `range` property is a [number, number] which indicates the start/end index of the node in the file contents.\n   * This is similar to the `loc` property, except this is the absolute index.\n   */\n  range?: boolean;\n\n  /**\n   * Set to true to create a top-level array containing all tokens from the file.\n   */\n  tokens?: boolean;\n}\n\nconst PARSE_DEFAULT_OPTIONS: ParseOptions = {\n  comment: false,\n  errorOnUnknownASTType: false,\n  filePath: 'estree.ts', // or 'estree.tsx', if you pass jsx: true\n  jsx: false,\n  loc: false,\n  loggerFn: undefined,\n  range: false,\n  tokens: false,\n};\n\ndeclare function parse(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): TSESTree.Program;\n```\n\nExample usage:\n\n```js\nimport { parse } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst ast = parse(code, {\n  loc: true,\n  range: true,\n});\n```\n\n#### `parseAndGenerateServices(code, options)`\n\nParses the given string of code with the options provided and returns an ESTree-compatible AST. Accepts additional options which can be used to generate type information along with the AST.\n\n```ts\ninterface ParseAndGenerateServicesOptions extends ParseOptions {\n  /**\n   * Causes the parser to error if the TypeScript compiler returns any unexpected syntax/semantic errors.\n   */\n  errorOnTypeScriptSyntacticAndSemanticIssues?: boolean;\n\n  /**\n   * ***EXPERIMENTAL FLAG*** - Use this at your own risk.\n   *\n   * Causes TS to use the source files for referenced projects instead of the compiled .d.ts files.\n   * This feature is not yet optimized, and is likely to cause OOMs for medium to large projects.\n   *\n   * This flag REQUIRES at least TS v3.9, otherwise it does nothing.\n   *\n   * See: https://github.com/typescript-eslint/typescript-eslint/issues/2094\n   */\n  EXPERIMENTAL_useSourceOfProjectReferenceRedirect?: boolean;\n\n  /**\n   * When `project` is provided, this controls the non-standard file extensions which will be parsed.\n   * It accepts an array of file extensions, each preceded by a `.`.\n   */\n  extraFileExtensions?: string[];\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) path to the file being parsed.\n   * When `project` is provided, this is required, as it is used to fetch the file from the TypeScript compiler's cache.\n   */\n  filePath?: string;\n\n  /**\n   * Allows the user to control whether or not two-way AST node maps are preserved\n   * during the AST conversion process.\n   *\n   * By default: the AST node maps are NOT preserved, unless `project` has been specified,\n   * in which case the maps are made available on the returned `parserServices`.\n   *\n   * NOTE: If `preserveNodeMaps` is explicitly set by the user, it will be respected,\n   * regardless of whether or not `project` is in use.\n   */\n  preserveNodeMaps?: boolean;\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) paths to the tsconfig(s).\n   * If this is provided, type information will be returned.\n   */\n  project?: string | string[];\n\n  /**\n   * If you provide a glob (or globs) to the project option, you can use this option to ignore certain folders from\n   * being matched by the globs.\n   * This accepts an array of globs to ignore.\n   *\n   * By default, this is set to [\"/node_modules/\"]\n   */\n  projectFolderIgnoreList?: string[];\n\n  /**\n   * The absolute path to the root directory for all provided `project`s.\n   */\n  tsconfigRootDir?: string;\n\n  /**\n   * An array of one or more instances of TypeScript Program objects to be used for type information.\n   * This overrides any program or programs that would have been computed from the `project` option.\n   * All linted files must be part of the provided program(s).\n   */\n  programs?: Program[];\n\n  /**\n   ***************************************************************************************\n   * IT IS RECOMMENDED THAT YOU DO NOT USE THIS OPTION, AS IT CAUSES PERFORMANCE ISSUES. *\n   ***************************************************************************************\n   *\n   * When passed with `project`, this allows the parser to create a catch-all, default program.\n   * This means that if the parser encounters a file not included in any of the provided `project`s,\n   * it will not error, but will instead parse the file and its dependencies in a new program.\n   */\n  createDefaultProgram?: boolean;\n\n  /**\n   * ESLint (and therefore typescript-eslint) is used in both \"single run\"/one-time contexts,\n   * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback\n   * on a file in an IDE).\n   *\n   * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction\n   * is important because there is significant overhead to managing the so called Watch Programs\n   * needed for the long-running use-case.\n   *\n   * When allowAutomaticSingleRunInference is enabled, we will use common heuristics to infer\n   * whether or not ESLint is being used as part of a single run.\n   */\n  allowAutomaticSingleRunInference?: boolean;\n\n  /**\n   * Path to a file exporting a custom ModuleResolver.\n   */\n  moduleResolver?: string;\n}\n\ninterface ParserServices {\n  program: ts.Program;\n  esTreeNodeToTSNodeMap: WeakMap<TSESTree.Node, ts.Node | ts.Token>;\n  tsNodeToESTreeNodeMap: WeakMap<ts.Node | ts.Token, TSESTree.Node>;\n  hasFullTypeInformation: boolean;\n}\n\ninterface ParseAndGenerateServicesResult<T extends TSESTreeOptions> {\n  ast: TSESTree.Program;\n  services: ParserServices;\n}\n\nconst PARSE_AND_GENERATE_SERVICES_DEFAULT_OPTIONS: ParseOptions = {\n  ...PARSE_DEFAULT_OPTIONS,\n  errorOnTypeScriptSyntacticAndSemanticIssues: false,\n  extraFileExtensions: [],\n  preserveNodeMaps: false, // or true, if you do not set this, but pass `project`\n  project: undefined,\n  projectFolderIgnoreList: ['/node_modules/'],\n  tsconfigRootDir: process.cwd(),\n};\n\ndeclare function parseAndGenerateServices(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): ParseAndGenerateServicesResult;\n```\n\nExample usage:\n\n```js\nimport { parseAndGenerateServices } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst { ast, services } = parseAndGenerateServices(code, {\n  filePath: '/some/path/to/file/foo.ts',\n  loc: true,\n  project: './tsconfig.json',\n  range: true,\n});\n```\n\n#### `parseWithNodeMaps(code, options)`\n\nParses the given string of code with the options provided and returns both the ESTree-compatible AST as well as the node maps.\nThis allows you to work with both ASTs without the overhead of types that may come with `parseAndGenerateServices`.\n\n```ts\ninterface ParseWithNodeMapsResult<T extends TSESTreeOptions> {\n  ast: TSESTree.Program;\n  esTreeNodeToTSNodeMap: ParserServices['esTreeNodeToTSNodeMap'];\n  tsNodeToESTreeNodeMap: ParserServices['tsNodeToESTreeNodeMap'];\n}\n\ndeclare function parseWithNodeMaps(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): ParseWithNodeMapsResult;\n```\n\nExample usage:\n\n```js\nimport { parseWithNodeMaps } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst { ast, esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap } = parseWithNodeMaps(\n  code,\n  {\n    loc: true,\n    range: true,\n  },\n);\n```\n\n### `TSESTree`, `AST_NODE_TYPES` and `AST_TOKEN_TYPES`\n\nTypes for the AST produced by the parse functions.\n\n- `TSESTree` is a namespace which contains object types representing all of the AST Nodes produced by the parser.\n- `AST_NODE_TYPES` is an enum which provides the values for every single AST node's `type` property.\n- `AST_TOKEN_TYPES` is an enum which provides the values for every single AST token's `type` property.\n\n### Utilities\n\n#### `createProgram(configFile, projectDirectory)`\n\nThis serves as a utility method for users of the `ParseOptions.programs` feature to create a TypeScript program instance from a config file.\n\n```ts\ndeclare function createProgram(\n  configFile: string,\n  projectDirectory: string = process.cwd(),\n): import('typescript').Program;\n```\n\nExample usage:\n\n```js\nconst tsESTree = require('@typescript-eslint/typescript-estree');\n\nconst program = tsESTree.createProgram('tsconfig.json');\nconst code = `const hello: string = 'world';`;\nconst { ast, services } = parseAndGenerateServices(code, {\n  filePath: '/some/path/to/file/foo.ts',\n  loc: true,\n  program,\n  range: true,\n});\n```\n\n## Supported TypeScript Version\n\nSee the [Supported TypeScript Version](../../README.md#supported-typescript-version) section in the project root.\n\nIf you use a non-supported version of TypeScript, the parser will log a warning to the console.\n\n**Please ensure that you are using a supported version before submitting any issues/bug reports.**\n\n## Reporting Issues\n\nPlease check the current list of open and known issues and ensure the issue has not been reported before. When creating a new issue provide as much information about your environment as possible. This includes:\n\n- TypeScript version\n- The `typescript-estree` version\n\n## AST Alignment Tests\n\nA couple of years after work on this parser began, the TypeScript Team at Microsoft began [officially supporting TypeScript parsing via Babel](https://blogs.msdn.microsoft.com/typescript/2018/08/27/typescript-and-babel-7/).\n\nI work closely with the TypeScript Team and we are gradually aligning the AST of this project with the one produced by Babel's parser. To that end, I have created a full test harness to compare the ASTs of the two projects which runs on every PR, please see [the code](https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/typescript-estree/tests/ast-alignment) for more details.\n\n## Debugging\n\nIf you encounter a bug with the parser that you want to investigate, you can turn on the debug logging via setting the environment variable: `DEBUG=typescript-eslint:*`.\nI.e. in this repo you can run: `DEBUG=typescript-eslint:* yarn lint`.\n\n## License\n\nTypeScript ESTree inherits from the the original TypeScript ESLint Parser license, as the majority of the work began there. It is licensed under a permissive BSD 2-clause license.\n\n## Contributing\n\n[See the contributing guide here](../../CONTRIBUTING.md)\n",
    "licenseText": "TypeScript ESTree\n\nOriginally extracted from:\n\nTypeScript ESLint Parser\nCopyright JS Foundation and other contributors, https://js.foundation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.10.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.10.1.tgz",
    "hash": "",
    "integrity": "sha512-PwIGnH7jIueXv4opcwEbVGDATjGPO1dx9RkUl5LlHDSe+FXxPwFL5W/qYd5/NHr7f6lo/vvTrAzd0KlQtRusJQ==",
    "registry": "npm",
    "packageName": "@typescript-eslint/typescript-estree",
    "cacheIntegrity": "sha512-PwIGnH7jIueXv4opcwEbVGDATjGPO1dx9RkUl5LlHDSe+FXxPwFL5W/qYd5/NHr7f6lo/vvTrAzd0KlQtRusJQ== sha1-smjme+BVP4eQuj/ocRMoKXet2hU="
  },
  "registry": "npm",
  "hash": "3f02069c7ee322e797bf8a2973011b5460c04e318f3b5771f519149792e51c349ef855f13f014be56fea61de7f347afb7fa968fefbd3ac0cddd0a950b51bac25"
}