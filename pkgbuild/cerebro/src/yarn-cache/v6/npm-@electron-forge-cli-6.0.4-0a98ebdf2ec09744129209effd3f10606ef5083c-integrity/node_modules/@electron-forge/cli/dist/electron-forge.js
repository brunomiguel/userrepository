#!/usr/bin/env node
"use strict";
// This file requires a shebang above. If it is missing, this is an error.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const listr2_1 = require("listr2");
require("./util/terminate");
const check_system_1 = require("./util/check-system");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const metadata = require('../package.json');
const originalSC = commander_1.default.executeSubCommand.bind(commander_1.default);
commander_1.default.executeSubCommand = (argv, args, unknown) => {
    let indexOfDoubleDash = process.argv.indexOf('--');
    indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;
    const passThroughArgs = args.filter((arg) => process.argv.indexOf(arg) > indexOfDoubleDash);
    const normalArgs = args.filter((arg) => process.argv.indexOf(arg) <= indexOfDoubleDash);
    let newArgs = args;
    let newUnknown = unknown;
    if (passThroughArgs.length > 0) {
        newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
        newUnknown = [];
    }
    return originalSC(argv, newArgs, newUnknown);
};
commander_1.default
    .version(metadata.version)
    .option('--verbose', 'Enables verbose mode')
    .command('init', 'Initialize a new Electron application')
    .command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"')
    .command('lint', 'Lints the current Electron application')
    .command('package', 'Package the current Electron application')
    .command('make', 'Generate distributables for the current Electron application')
    .command('start', 'Start the current Electron application')
    .command('publish', 'Publish the current Electron application to GitHub')
    .command('install', 'Install an Electron application from GitHub')
    .on('command:*', (commands) => {
    if (!commander_1.default._execs.has(commands[0])) {
        console.error();
        console.error(chalk_1.default.red(`Unknown command "${commander_1.default.args.join(' ')}".`));
        console.error('See --help for a list of available commands.');
        process.exit(1);
    }
});
(async () => {
    const runner = new listr2_1.Listr([
        {
            title: 'Checking your system',
            task: async (_, task) => {
                return await (0, check_system_1.checkSystem)(task);
            },
        },
    ], {
        concurrent: false,
        exitOnError: false,
    });
    await runner.run();
    if (runner.err.length) {
        console.error(chalk_1.default.red(`\nIt looks like you are missing some dependencies you need to get Electron running.
Make sure you have git installed and Node.js version ${metadata.engines.node}`));
        process.exit(1);
    }
    commander_1.default.parse(process.argv);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlY3Ryb24tZm9yZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZWxlY3Ryb24tZm9yZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwwRUFBMEU7Ozs7O0FBRTFFLGtEQUEwQjtBQUMxQiwwREFBZ0M7QUFDaEMsbUNBQStCO0FBRS9CLDRCQUEwQjtBQUUxQixzREFBa0Q7QUFFbEQsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sVUFBVSxHQUFHLG1CQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLG1CQUFPLENBQUMsQ0FBQztBQUMzRCxtQkFBTyxDQUFDLGlCQUFpQixHQUFHLENBQUMsSUFBYyxFQUFFLElBQWMsRUFBRSxPQUFpQixFQUFFLEVBQUU7SUFDaEYsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRCxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFeEYsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztJQUM1RixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXhGLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUM7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