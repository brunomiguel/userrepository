{
  "manifest": {
    "name": "async-exit-hook",
    "version": "2.0.1",
    "description": "Run some code when the process exits (supports async hooks and pm2 clustering)",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/tapppi/async-exit-hook.git"
    },
    "author": {
      "name": "Tapani Moilanen",
      "email": "moilanen.tapani@gmail.com",
      "url": "https://github.com/tapppi"
    },
    "contributors": [
      {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "http://sindresorhus.com"
      }
    ],
    "engines": {
      "node": ">=0.12.0"
    },
    "scripts": {
      "test": "xo && nyc ava",
      "release": "standard-version"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "exit",
      "quit",
      "process",
      "hook",
      "graceful",
      "handler",
      "shutdown",
      "sigterm",
      "sigint",
      "sighup",
      "pm2",
      "cluster",
      "child",
      "reload",
      "async",
      "terminate",
      "kill",
      "stop",
      "event"
    ],
    "devDependencies": {
      "ava": "^0.21.0",
      "coveralls": "^2.11.14",
      "nyc": "^10.3.2",
      "standard-version": "^4.2.0",
      "xo": "^0.18.2"
    },
    "ava": {
      "files": [
        "test/*.js",
        "!tests/cases/*"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-async-exit-hook-2.0.1-integrity/node_modules/async-exit-hook/package.json",
    "readmeFilename": "readme.md",
    "readme": "# async-exit-hook\n[![Build Status](https://api.travis-ci.org/Tapppi/async-exit-hook.svg)](https://travis-ci.org/Tapppi/async-exit-hook)\n[![Coverage Status](https://coveralls.io/repos/github/Tapppi/async-exit-hook/badge.svg?branch=master)](https://coveralls.io/github/Tapppi/async-exit-hook?branch=master)\n\n> Run some code when the process exits\n\nThe `process.on('exit')` event doesn't catch all the ways a process can exit. This module catches:\n\n* process SIGINT, SIGTERM and SIGHUP, SIGBREAK signals  \n* process beforeExit and exit events  \n* PM2 clustering process shutdown message ([PM2 graceful reload](http://pm2.keymetrics.io/docs/usage/cluster-mode/#graceful-reload))  \n\nUseful for cleaning up. You can also include async handlers, and add custom events to hook and exit on.\n\nForked and pretty much rewritten from [exit-hook](https://npmjs.com/package/exit-hook).\n\n\n## Install\n\n```\n$ npm install --save async-exit-hook\n```\n\n## Usage\n\n### Considerations and warning\n#### On `process.exit()` and asynchronous code\n**If you use asynchronous exit hooks, DO NOT use `process.exit()` to exit.\nThe `exit` event DOES NOT support asynchronous code.**\n>['beforeExit' is not emitted for conditions causing explicit termination, such as process.exit()]\n(https://nodejs.org/api/process.html#process_event_beforeexit)\n\n#### Windows and `process.kill(signal)`\nOn windows `process.kill(signal)` immediately kills the process, and does not fire signal events, \nand as such, cannot be used to gracefully exit. See *Clustering and child processes* for a\nworkaround when killing child processes. I'm planning to support gracefully exiting \nwith async support on windows soon.\n\n### Clustering and child processes\nIf you use custom clustering / child processes, you can gracefully shutdown your child process\nby sending a shutdown message (`childProc.send('shutdown')`).\n\n### Example\n```js\nconst exitHook = require('async-exit-hook');\n\nexitHook(() => {\n    console.log('exiting');\n});\n\n// you can add multiple hooks, even across files\nexitHook(() => {\n    console.log('exiting 2');\n});\n\n// you can add async hooks by accepting a callback\nexitHook(callback => {\n    setTimeout(() => {\n        console.log('exiting 3');\n        callback();\n    }, 1000);\n});\n\n// You can hook uncaught errors with uncaughtExceptionHandler(), consequently adding \n// async support to uncaught errors (normally uncaught errors result in a synchronous exit).\nexitHook.uncaughtExceptionHandler(err => {\n    console.error(err);\n});\n\n// You can hook unhandled rejections with unhandledRejectionHandler()\nexitHook.unhandledRejectionHandler(err => {\n    console.error(err);\n});\n\n// You can add multiple uncaught error handlers\n// Add the second parameter (callback) to indicate async hooks\nexitHook.uncaughtExceptionHandler((err, callback) => {\n    sendErrorToCloudOrWhatever(err) // Returns promise\n        .then(() => { \n             console.log('Sent err to cloud'); \n         });\n        .catch(sendError => {\n             console.error('Error sending to cloud: ', err.stack));\n        })\n        .then(() => callback);\n    });\n});\n\n// Add exit hooks for a signal or custom message:\n\n// Custom signal\n// Arguments are `signal, exitCode` (SIGBREAK is already handled, this is an example)\nexitHook.hookEvent('SIGBREAK', 21);\n\n// process event: `message` with a filter\n// filter gets all arguments passed to *handler*: `process.on(message, *handler*)`\n// Exits on process event `message` with msg `customShutdownMessage` only\nexitHook.hookEvent('message', 0, msg => msg !== 'customShutdownMessage');\n\n// All async hooks will work with uncaught errors when you have specified an uncaughtExceptionHandler\nthrow new Error('awesome');\n\n//=> // Sync uncaughtExcpetion hooks called and retun\n//=> '[Error: awesome]'\n//=> // Sync hooks called and retun\n//=> 'exiting'\n//=> 'exiting 2'\n//=> // Async uncaughtException hooks return\n//=> 'Sent error to cloud'\n//=> // Sync uncaughtException hooks return\n//=> 'exiting 3'\n```\n\n\n## License\n\nMIT © Tapani Moilanen  \nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/async-exit-hook/-/async-exit-hook-2.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/async-exit-hook/-/async-exit-hook-2.0.1.tgz",
    "hash": "",
    "integrity": "sha512-NW2cX8m1Q7KPA7a5M2ULQeZ2wR5qI5PAbw5L0UOMxdioVk9PMZ0h1TmyZEkPYrCvYjDlFICusOu1dlEKAAeXBw==",
    "registry": "npm",
    "packageName": "async-exit-hook",
    "cacheIntegrity": "sha512-NW2cX8m1Q7KPA7a5M2ULQeZ2wR5qI5PAbw5L0UOMxdioVk9PMZ0h1TmyZEkPYrCvYjDlFICusOu1dlEKAAeXBw== sha1-i9iwJLDsmxwBzMua+dspvXF9+vM="
  },
  "registry": "npm",
  "hash": "356d9c5fc9b543b28f03b6b933650b41e676c11e6a2393c06f0e4bd1438cc5d8a8564f4f319d21d539b264490f62b0af6230e51480aeb0ebb576510a00079707"
}