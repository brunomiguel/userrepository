"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class TypeScriptTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory) {
        await super.initializeTemplate(directory, {});
        await (0, _asyncOra).asyncOra('Setting up Forge configuration', async ()=>{
            const packageJSONPath = _path.default.resolve(directory, 'package.json');
            const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
            // Configure scripts for TS template
            packageJSON.scripts.lint = 'eslint --ext .ts .';
            packageJSON.scripts.start = 'tsc && electron-forge start';
            packageJSON.main = 'dist/index.js';
            await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
                spaces: 2
            });
        });
        await (0, _asyncOra).asyncOra('Setting up TypeScript configuration', async ()=>{
            const filePath = (fileName)=>_path.default.join(directory, 'src', fileName)
            ;
            // Copy tsconfig with a small set of presets
            await this.copyTemplateFile(directory, 'tsconfig.json');
            // Copy eslint config with recommended settings
            await this.copyTemplateFile(directory, '.eslintrc.json');
            // Remove index.js and replace with index.ts
            await _fsExtra.default.remove(filePath('index.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.ts');
        });
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new TypeScriptTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0VGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCB7IEJhc2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS1iYXNlJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY2xhc3MgVHlwZVNjcmlwdFRlbXBsYXRlIGV4dGVuZHMgQmFzZVRlbXBsYXRlIHtcbiAgcHVibGljIHRlbXBsYXRlRGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3RtcGwnKTtcblxuICBhc3luYyBpbml0aWFsaXplVGVtcGxhdGUoZGlyZWN0b3J5OiBzdHJpbmcpIHtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVGVtcGxhdGUoZGlyZWN0b3J5LCB7fSk7XG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgRm9yZ2UgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OUGF0aCA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OID0gYXdhaXQgZnMucmVhZEpzb24ocGFja2FnZUpTT05QYXRoKTtcblxuICAgICAgLy8gQ29uZmlndXJlIHNjcmlwdHMgZm9yIFRTIHRlbXBsYXRlXG4gICAgICBwYWNrYWdlSlNPTi5zY3JpcHRzLmxpbnQgPSAnZXNsaW50IC0tZXh0IC50cyAuJztcbiAgICAgIHBhY2thZ2VKU09OLnNjcmlwdHMuc3RhcnQgPSAndHNjICYmIGVsZWN0cm9uLWZvcmdlIHN0YXJ0JztcbiAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnZGlzdC9pbmRleC5qcyc7XG5cbiAgICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYWNrYWdlSlNPTlBhdGgsIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIFR5cGVTY3JpcHQgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gKGZpbGVOYW1lOiBzdHJpbmcpID0+IHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnLCBmaWxlTmFtZSk7XG5cbiAgICAgIC8vIENvcHkgdHNjb25maWcgd2l0aCBhIHNtYWxsIHNldCBvZiBwcmVzZXRzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAndHNjb25maWcuanNvbicpO1xuXG4gICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJy5lc2xpbnRyYy5qc29uJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmRleC5qcyBhbmQgcmVwbGFjZSB3aXRoIGluZGV4LnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ2luZGV4LnRzJyk7XG5cbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdwcmVsb2FkLnRzJyk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFR5cGVTY3JpcHRUZW1wbGF0ZSgpO1xuIl0sIm5hbWVzIjpbIlR5cGVTY3JpcHRUZW1wbGF0ZSIsIkJhc2VUZW1wbGF0ZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsImFzeW5jT3JhIiwicGFja2FnZUpTT05QYXRoIiwicGF0aCIsInJlc29sdmUiLCJwYWNrYWdlSlNPTiIsImZzIiwicmVhZEpzb24iLCJzY3JpcHRzIiwibGludCIsInN0YXJ0IiwibWFpbiIsIndyaXRlSnNvbiIsInNwYWNlcyIsImZpbGVQYXRoIiwiZmlsZU5hbWUiLCJqb2luIiwiY29weVRlbXBsYXRlRmlsZSIsInJlbW92ZSIsInRlbXBsYXRlRGlyIiwiX19kaXJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUF5QixHQUEyQixDQUEzQixTQUEyQjtBQUN2QixHQUErQixDQUEvQixhQUErQjtBQUM3QyxHQUFVLENBQVYsUUFBVTtBQUNSLEdBQU0sQ0FBTixLQUFNOzs7Ozs7TUFFakJBLGtCQUFrQixTQUFTQyxhQUFZO1VBR3JDQyxrQkFBa0IsQ0FBQ0MsU0FBaUIsRUFBRSxDQUFDO1FBQzNDLEtBQUssQ0FBQyxLQUFLLENBQUNELGtCQUFrQixDQUFDQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLEtBQUssS0FBQ0MsU0FBUSxXQUFDLENBQWdDLDJDQUFjLENBQUM7WUFDNUQsS0FBSyxDQUFDQyxlQUFlLEdBQUdDLEtBQUksU0FBQ0MsT0FBTyxDQUFDSixTQUFTLEVBQUUsQ0FBYztZQUM5RCxLQUFLLENBQUNLLFdBQVcsR0FBRyxLQUFLLENBQUNDLFFBQUUsU0FBQ0MsUUFBUSxDQUFDTCxlQUFlO1lBRXJELEVBQW9DLEFBQXBDLGtDQUFvQztZQUNwQ0csV0FBVyxDQUFDRyxPQUFPLENBQUNDLElBQUksR0FBRyxDQUFvQjtZQUMvQ0osV0FBVyxDQUFDRyxPQUFPLENBQUNFLEtBQUssR0FBRyxDQUE2QjtZQUN6REwsV0FBVyxDQUFDTSxJQUFJLEdBQUcsQ0FBZTtZQUVsQyxLQUFLLENBQUNMLFFBQUUsU0FBQ00sU0FBUyxDQUFDVixlQUFlLEVBQUVHLFdBQVcsRUFBRSxDQUFDO2dCQUFDUSxNQUFNLEVBQUUsQ0FBQztZQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELEtBQUssS0FBQ1osU0FBUSxXQUFDLENBQXFDLGdEQUFjLENBQUM7WUFDakUsS0FBSyxDQUFDYSxRQUFRLElBQUlDLFFBQWdCLEdBQUtaLEtBQUksU0FBQ2EsSUFBSSxDQUFDaEIsU0FBUyxFQUFFLENBQUssTUFBRWUsUUFBUTs7WUFFM0UsRUFBNEMsQUFBNUMsMENBQTRDO1lBQzVDLEtBQUssQ0FBQyxJQUFJLENBQUNFLGdCQUFnQixDQUFDakIsU0FBUyxFQUFFLENBQWU7WUFFdEQsRUFBK0MsQUFBL0MsNkNBQStDO1lBQy9DLEtBQUssQ0FBQyxJQUFJLENBQUNpQixnQkFBZ0IsQ0FBQ2pCLFNBQVMsRUFBRSxDQUFnQjtZQUV2RCxFQUE0QyxBQUE1QywwQ0FBNEM7WUFDNUMsS0FBSyxDQUFDTSxRQUFFLFNBQUNZLE1BQU0sQ0FBQ0osUUFBUSxDQUFDLENBQVU7WUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQ0csZ0JBQWdCLENBQUNkLEtBQUksU0FBQ2EsSUFBSSxDQUFDaEIsU0FBUyxFQUFFLENBQUssT0FBRyxDQUFVO1lBRW5FLEtBQUssQ0FBQyxJQUFJLENBQUNpQixnQkFBZ0IsQ0FBQ2QsS0FBSSxTQUFDYSxJQUFJLENBQUNoQixTQUFTLEVBQUUsQ0FBSyxPQUFHLENBQVk7UUFDdkUsQ0FBQztJQUNILENBQUM7OztRQWhDSCxJQWlDQyxDQWhDUW1CLFdBQVcsR0FBR2hCLEtBQUksU0FBQ0MsT0FBTyxDQUFDZ0IsU0FBUyxFQUFFLENBQUksS0FBRSxDQUFNOzs7ZUFrQzVDLEdBQUcsQ0FBQ3ZCLGtCQUFrQiJ9