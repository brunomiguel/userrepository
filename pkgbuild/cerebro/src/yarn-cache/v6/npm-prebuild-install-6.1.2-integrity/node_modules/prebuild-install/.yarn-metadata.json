{
  "manifest": {
    "name": "prebuild-install",
    "version": "6.1.2",
    "description": "A command line tool to easily install prebuilt binaries for multiple version of node/iojs on a specific platform",
    "scripts": {
      "test": "tape test/*-test.js && npm run lint",
      "lint": "standard && hallmark",
      "hallmark": "hallmark --fix"
    },
    "keywords": [
      "prebuilt",
      "binaries",
      "native",
      "addon",
      "module",
      "c",
      "c++",
      "bindings",
      "devops",
      "napi"
    ],
    "dependencies": {
      "detect-libc": "^1.0.3",
      "expand-template": "^2.0.3",
      "github-from-package": "0.0.0",
      "minimist": "^1.2.3",
      "mkdirp-classic": "^0.5.3",
      "napi-build-utils": "^1.0.1",
      "node-abi": "^2.21.0",
      "noop-logger": "^0.1.1",
      "npmlog": "^4.0.1",
      "pump": "^3.0.0",
      "rc": "^1.2.7",
      "simple-get": "^3.0.3",
      "tar-fs": "^2.0.0",
      "tunnel-agent": "^0.6.0"
    },
    "devDependencies": {
      "a-native-module": "^1.0.0",
      "hallmark": "^3.0.0",
      "nock": "^10.0.6",
      "rimraf": "^2.5.2",
      "standard": "^13.0.2",
      "tape": "^4.5.1",
      "tempy": "0.2.1"
    },
    "bin": {
      "prebuild-install": "bin.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/prebuild/prebuild-install.git"
    },
    "author": {
      "name": "Mathias Buus",
      "url": "@mafintosh"
    },
    "contributors": [
      {
        "name": "Julian Gruber",
        "email": "julian@juliangruber.com",
        "url": "https://github.com/juliangruber"
      },
      {
        "name": "Brett Lawson",
        "email": "brett19@gmail.com",
        "url": "https://github.com/brett19"
      },
      {
        "name": "Pieter Hintjens",
        "email": "ph@imatix.com",
        "url": "https://github.com/hintjens"
      },
      {
        "name": "Lars-Magnus Skog",
        "email": "ralphtheninja@riseup.net",
        "url": "https://github.com/ralphtheninja"
      },
      {
        "name": "Jesús Leganés Combarro",
        "email": "piranna@gmail.com",
        "url": "https://github.com/piranna"
      },
      {
        "name": "Mathias Küsel",
        "email": "mathiask@hotmail.de",
        "url": "https://github.com/mathiask88"
      },
      {
        "name": "Lukas Geiger",
        "email": "lukas.geiger94@gmail.com",
        "url": "https://github.com/lgeiger"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/prebuild/prebuild-install/issues"
    },
    "homepage": "https://github.com/prebuild/prebuild-install",
    "engines": {
      "node": ">=6"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-prebuild-install-6.1.2-integrity/node_modules/prebuild-install/package.json",
    "readmeFilename": "README.md",
    "readme": "# prebuild-install\n\n> A command line tool to easily install prebuilt binaries for multiple version of node/iojs on a specific platform.\n\n[![npm](https://img.shields.io/npm/v/prebuild-install.svg)](https://www.npmjs.com/package/prebuild-install)\n![Node version](https://img.shields.io/node/v/prebuild-install.svg)\n[![Test](https://github.com/prebuild/prebuild-install/actions/workflows/test.yml/badge.svg)](https://github.com/prebuild/prebuild-install/actions/workflows/test.yml)\n[![david](https://david-dm.org/prebuild/prebuild-install.svg)](https://david-dm.org/prebuild/prebuild-install)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n`prebuild-install` supports installing prebuilt binaries from GitHub by default.\n\n## Usage\n\nChange your package.json install script to:\n\n```json\n{\n  \"scripts\": {\n    \"install\": \"prebuild-install || node-gyp rebuild\"\n  }\n}\n```\n\n### Requirements\n\nYou need to provide prebuilds made by [`prebuild`](https://github.com/prebuild/prebuild).\n\n### Help\n\n```\nprebuild-install [options]\n\n  --download    -d  [url]       (download prebuilds, no url means github)\n  --target      -t  version     (version to install for)\n  --runtime     -r  runtime     (Node runtime [node, napi or electron] to build or install for, default is node)\n  --path        -p  path        (make a prebuild-install here)\n  --token       -T  gh-token    (github token for private repos)\n  --arch            arch        (target CPU architecture, see Node OS module docs, default is current arch)\n  --platform        platform    (target platform, see Node OS module docs, default is current platform)\n  --tag-prefix <prefix>         (github tag prefix, default is \"v\")\n  --build-from-source           (skip prebuild download)\n  --verbose                     (log verbosely)\n  --libc                        (use provided libc rather than system default)\n  --debug                       (set Debug or Release configuration)\n  --version                     (print prebuild-install version and exit)\n```\n\nWhen `prebuild-install` is run via an `npm` script, options\n`--build-from-source`, `--debug`, `--download`, `--target`, `--runtime`, `--arch` and `--platform` may be passed through via\narguments given to the `npm` command. Alternatively you can set environment variables `npm_config_build_from_source=true`, `npm_config_platform`, `npm_config_arch`, `npm_config_target` and `npm_config_runtime`.\n\n### Private Repositories\n\n`prebuild-install` supports downloading prebuilds from private GitHub repositories using the `-T <github-token>`:\n\n```\n$ prebuild-install -T <github-token>\n```\n\nIf you don't want to use the token on cli you can put it in `~/.prebuild-installrc`:\n\n```\ntoken=<github-token>\n```\n\nAlternatively you can specify it in the `prebuild-install_token` environment variable.\n\nNote that using a GitHub token uses the API to resolve the correct release meaning that you are subject to the ([GitHub Rate Limit](https://developer.github.com/v3/rate_limit/)).\n\n### Create GitHub Token\n\nTo create a token:\n\n- Go to [this page](https://github.com/settings/tokens)\n- Click the `Generate new token` button\n- Give the token a name and click the `Generate token` button, see below\n\n![prebuild-token](https://cloud.githubusercontent.com/assets/13285808/20844584/d0b85268-b8c0-11e6-8b08-2b19522165a9.png)\n\nThe default scopes should be fine.\n\n### Custom binaries\n\nThe end user can override binary download location through environment variables in their .npmrc file.\nThe variable needs to meet the mask `% your package name %_binary_host` or `% your package name %_binary_host_mirror`. For example:\n\n```\nleveldown_binary_host=http://overriden-host.com/overriden-path\n```\n\nNote that the package version subpath and file name will still be appended.\nSo if you are installing `leveldown@1.2.3` the resulting url will be:\n\n```\nhttp://overriden-host.com/overriden-path/v1.2.3/leveldown-v1.2.3-node-v57-win32-x64.tar.gz\n```\n\n#### Local prebuilds\n\nIf you want to use prebuilds from your local filesystem, you can use the `% your package name %_local_prebuilds` .npmrc variable to set a path to the folder containing prebuilds. For example:\n\n```\nleveldown_local_prebuilds=/path/to/prebuilds\n```\n\nThis option will look directly in that folder for bundles created with `prebuild`, for example:\n\n```\n/path/to/prebuilds/leveldown-v1.2.3-node-v57-win32-x64.tar.gz\n```\n\nNon-absolute paths resolve relative to the directory of the package invoking prebuild-install, e.g. for nested dependencies.\n\n### Cache\n\nAll prebuilt binaries are cached to minimize traffic. So first `prebuild-install` picks binaries from the cache and if no binary could be found, it will be downloaded. Depending on the environment, the cache folder is determined in the following order:\n\n- `${npm_config_cache}/_prebuilds`\n- `${APP_DATA}/npm-cache/_prebuilds`\n- `${HOME}/.npm/_prebuilds`\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Mathias Buus\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-6.1.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-6.1.2.tgz",
    "hash": "",
    "integrity": "sha512-PzYWIKZeP+967WuKYXlTOhYBgGOvTRSfaKI89XnfJ0ansRAH7hDU45X+K+FZeI1Wb/7p/NnuctPH3g0IqKUuSQ==",
    "registry": "npm",
    "packageName": "prebuild-install",
    "cacheIntegrity": "sha512-PzYWIKZeP+967WuKYXlTOhYBgGOvTRSfaKI89XnfJ0ansRAH7hDU45X+K+FZeI1Wb/7p/NnuctPH3g0IqKUuSQ== sha1-bOX8WXj+ul08v/7coGgrE2oLW/8="
  },
  "registry": "npm",
  "hash": "3f361620a65e3fef7aed6b8a6179533a16018063af4d149f68a23cf579df2746a7b11007ee10d4e395fe2be159788d566ffee9fcd9ee72d3c7de0d08a8a52e49"
}