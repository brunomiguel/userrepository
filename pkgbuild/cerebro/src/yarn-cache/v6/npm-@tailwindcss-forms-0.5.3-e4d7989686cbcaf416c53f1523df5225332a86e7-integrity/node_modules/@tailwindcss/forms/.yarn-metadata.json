{
  "manifest": {
    "name": "@tailwindcss/forms",
    "version": "0.5.3",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/tailwindlabs/tailwindcss-forms"
    },
    "publishConfig": {
      "access": "public"
    },
    "prettier": {
      "printWidth": 100,
      "semi": false,
      "singleQuote": true,
      "trailingComma": "es5"
    },
    "scripts": {
      "dev": "concurrently \"npm run serve\" \"npm run watch\"",
      "serve": "live-server .",
      "watch": "npm run build -- -w",
      "build": "tailwindcss -o dist/tailwind.css"
    },
    "peerDependencies": {
      "tailwindcss": ">=3.0.0 || >= 3.0.0-alpha.1"
    },
    "devDependencies": {
      "autoprefixer": "^10.4.6",
      "concurrently": "^5.3.0",
      "live-server": "^1.2.2",
      "postcss": "^8.4.13",
      "tailwindcss": "^3.0.24"
    },
    "dependencies": {
      "mini-svg-data-uri": "^1.2.3"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@tailwindcss-forms-0.5.3-e4d7989686cbcaf416c53f1523df5225332a86e7-integrity/node_modules/@tailwindcss/forms/package.json",
    "readmeFilename": "README.md",
    "readme": "# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n",
    "description": "A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.",
    "licenseText": "MIT License\n\nCopyright (c) Tailwind Labs, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@tailwindcss/forms/-/forms-0.5.3.tgz#e4d7989686cbcaf416c53f1523df5225332a86e7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@tailwindcss/forms/-/forms-0.5.3.tgz",
    "hash": "e4d7989686cbcaf416c53f1523df5225332a86e7",
    "integrity": "sha512-y5mb86JUoiUgBjY/o6FJSFZSEttfb3Q5gllE4xoKjAAD+vBrnIhE4dViwUuow3va8mpH4s9jyUbUbrRGoRdc2Q==",
    "registry": "npm",
    "packageName": "@tailwindcss/forms",
    "cacheIntegrity": "sha512-y5mb86JUoiUgBjY/o6FJSFZSEttfb3Q5gllE4xoKjAAD+vBrnIhE4dViwUuow3va8mpH4s9jyUbUbrRGoRdc2Q== sha1-5NeYlobLyvQWxT8VI99SJTMqhuc="
  },
  "registry": "npm",
  "hash": "e4d7989686cbcaf416c53f1523df5225332a86e7"
}