{
  "manifest": {
    "name": "async-validator",
    "description": "validate form asynchronous",
    "version": "3.5.1",
    "license": "MIT",
    "files": [
      "dist-*/",
      "bin/"
    ],
    "pika": true,
    "sideEffects": false,
    "keywords": [
      "validator",
      "validate",
      "async"
    ],
    "homepage": "https://github.com/yiminghe/async-validator",
    "bugs": {
      "url": "https://github.com/yiminghe/async-validator/issues"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:yiminghe/async-validator.git"
    },
    "dependencies": {},
    "devDependencies": {
      "@babel/preset-env": "^7.8.7",
      "@pika/pack": "^0.5.0",
      "@pika/plugin-build-types": "^0.6.0",
      "@pika/plugin-standard-pkg": "^0.6.0",
      "@pika/types": "^0.6.0",
      "babel-jest": "^24.8.0",
      "coveralls": "^2.13.1",
      "jest": "^24.8.0",
      "lint-staged": "^7.2.0",
      "np": "^5.0.3",
      "pika-plugin-build-web-babel": "^0.8.0",
      "pika-plugin-clean-dist-src": "^0.1.1",
      "pre-commit": "^1.2.2",
      "prettier": "^1.11.1"
    },
    "main": "dist-node/index.js",
    "module": "dist-web/index.js",
    "types": "dist-types/index.d.ts",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-async-validator-3.5.1-cd62b9688b2465f48420e27adb47760ab1b5559f-integrity/node_modules/async-validator/package.json",
    "readmeFilename": "README.md",
    "readme": "# async-validator\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n[![npm bundle size (minified + gzip)][bundlesize-image]][bundlesize-url]\n\n[npm-image]: https://img.shields.io/npm/v/async-validator.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/async-validator\n[travis-image]: https://img.shields.io/travis/yiminghe/async-validator.svg?style=flat-square\n[travis-url]: https://travis-ci.org/yiminghe/async-validator\n[coveralls-image]: https://img.shields.io/coveralls/yiminghe/async-validator.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/yiminghe/async-validator?branch=master\n[node-image]: https://img.shields.io/badge/node.js-%3E=4.0.0-green.svg?style=flat-square\n[node-url]: https://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/async-validator.svg?style=flat-square\n[download-url]: https://npmjs.org/package/async-validator\n[bundlesize-image]: https://img.shields.io/bundlephobia/minzip/async-validator.svg?label=gzip%20size\n[bundlesize-url]: https://bundlephobia.com/result?p=async-validator\n\nValidate form asynchronous. A variation of https://github.com/freeformsystems/async-validate\n\n## Install\n\n```bash\nnpm i async-validator\n```\n\n## Usage\n\nBasic usage involves defining a descriptor, assigning it to a schema and passing the object to be validated and a callback function to the `validate` method of the schema:\n\n```js\nimport Schema from 'async-validator';\nconst descriptor = {\n  name: {\n    type: 'string',\n    required: true,\n    validator: (rule, value) => value === 'muji',\n  },\n  age: {\n    type: 'number',\n    asyncValidator: (rule, value) => {\n      return new Promise((resolve, reject) => {\n        if (value < 18) {\n          reject('too young');  // reject with error message\n        } else {\n          resolve();\n        }\n      });\n    },\n  },\n};\nconst validator = new Schema(descriptor);\nvalidator.validate({ name: 'muji' }, (errors, fields) => {\n  if (errors) {\n    // validation failed, errors is an array of all errors\n    // fields is an object keyed by field name with an array of\n    // errors per field\n    return handleErrors(errors, fields);\n  }\n  // validation passed\n});\n\n// PROMISE USAGE\nvalidator.validate({ name: 'muji', age: 16 }).then(() => {\n  // validation passed or without error message\n}).catch(({ errors, fields }) => {\n  return handleErrors(errors, fields);\n});\n```\n\n## API\n\n### Validate\n\n```js\nfunction(source, [options], callback): Promise\n```\n\n* `source`: The object to validate (required).\n* `options`: An object describing processing options for the validation (optional).\n* `callback`: A callback function to invoke when validation completes (required).\n\nThe method will return a Promise object like:\n* `then()`，validation passed\n* `catch({ errors, fields })`，validation failed, errors is an array of all errors, fields is an object keyed by field name with an array of\n\n### Options\n\n* `suppressWarning`: Boolean, whether to suppress internal warning about invalid value.\n\n* `first`: Boolean, Invoke `callback` when the first validation rule generates an error,\nno more validation rules are processed.\nIf your validation involves multiple asynchronous calls (for example, database queries) and you only need the first error use this option.\n\n* `firstFields`: Boolean|String[], Invoke `callback` when the first validation rule of the specified field generates an error,\nno more validation rules of the same field are processed.  `true` means all fields.\n\n### Rules\n\nRules may be functions that perform validation.\n\n```js\nfunction(rule, value, callback, source, options)\n```\n\n* `rule`: The validation rule in the source descriptor that corresponds to the field name being validated. It is always assigned a `field` property with the name of the field being validated.\n* `value`: The value of the source object property being validated.\n* `callback`: A callback function to invoke once validation is complete. It expects to be passed an array of `Error` instances to indicate validation failure. If the check is synchronous, you can directly return a ` false ` or ` Error ` or ` Error Array `.\n* `source`: The source object that was passed to the `validate` method.\n* `options`: Additional options.\n* `options.messages`: The object containing validation error messages, will be deep merged with defaultMessages.\n\nThe options passed to `validate` or `asyncValidate` are passed on to the validation functions so that you may reference transient data (such as model references) in validation functions. However, some option names are reserved; if you use these properties of the options object they are overwritten. The reserved properties are `messages`, `exception` and `error`.\n\n```js\nimport Schema from 'async-validator';\nconst descriptor = {\n  name(rule, value, callback, source, options) {\n    const errors = [];\n    if (!/^[a-z0-9]+$/.test(value)) {\n      errors.push(new Error(\n        util.format('%s must be lowercase alphanumeric characters', rule.field),\n      ));\n    }\n    return errors;\n  },\n};\nconst validator = new Schema(descriptor);\nvalidator.validate({ name: 'Firstname' }, (errors, fields) => {\n  if (errors) {\n    return handleErrors(errors, fields);\n  }\n  // validation passed\n});\n```\n\nIt is often useful to test against multiple validation rules for a single field, to do so make the rule an array of objects, for example:\n\n```js\nconst descriptor = {\n  email: [\n    { type: 'string', required: true, pattern: Schema.pattern.email },\n    { \n      validator(rule, value, callback, source, options) {\n        const errors = [];\n        // test if email address already exists in a database\n        // and add a validation error to the errors array if it does\n        return errors;\n      },\n    },\n  ],\n};\n```\n\n#### Type\n\nIndicates the `type` of validator to use. Recognised type values are:\n\n* `string`: Must be of type `string`. `This is the default type.`\n* `number`: Must be of type `number`.\n* `boolean`: Must be of type `boolean`.\n* `method`: Must be of type `function`.\n* `regexp`: Must be an instance of `RegExp` or a string that does not generate an exception when creating a new `RegExp`.\n* `integer`: Must be of type `number` and an integer.\n* `float`: Must be of type `number` and a floating point number.\n* `array`: Must be an array as determined by `Array.isArray`.\n* `object`: Must be of type `object` and not `Array.isArray`.\n* `enum`: Value must exist in the `enum`.\n* `date`: Value must be valid as determined by `Date`\n* `url`: Must be of type `url`.\n* `hex`: Must be of type `hex`.\n* `email`: Must be of type `email`.\n* `any`: Can be any type.\n\n#### Required\n\nThe `required` rule property indicates that the field must exist on the source object being validated.\n\n#### Pattern\n\nThe `pattern` rule property indicates a regular expression that the value must match to pass validation.\n\n#### Range\n\nA range is defined using the `min` and `max` properties. For `string` and `array` types comparison is performed against the `length`, for `number` types the number must not be less than `min` nor greater than `max`.\n\n#### Length\n\nTo validate an exact length of a field specify the `len` property. For `string` and `array` types comparison is performed on the `length` property, for the `number` type this property indicates an exact match for the `number`, ie, it may only be strictly equal to `len`.\n\nIf the `len` property is combined with the `min` and `max` range properties, `len` takes precedence.\n\n#### Enumerable\n\n> Since version 3.0.0 if you want to validate the values `0` or `false` inside `enum` types, you have to include them explicitly.\n\nTo validate a value from a list of possible values use the `enum` type with a `enum` property listing the valid values for the field, for example:\n\n```js\nconst descriptor = {\n  role: { type: 'enum', enum: ['admin', 'user', 'guest'] },\n};\n```\n\n#### Whitespace\n\nIt is typical to treat required fields that only contain whitespace as errors. To add an additional test for a string that consists solely of whitespace add a `whitespace` property to a rule with a value of `true`. The rule must be a `string` type.\n\nYou may wish to sanitize user input instead of testing for whitespace, see [transform](#transform) for an example that would allow you to strip whitespace.\n\n\n#### Deep Rules\n\nIf you need to validate deep object properties you may do so for validation rules that are of the `object` or `array` type by assigning nested rules to a `fields` property of the rule.\n\n```js\nconst descriptor = {\n  address: {\n    type: 'object',\n    required: true,\n    fields: {\n      street: { type: 'string', required: true },\n      city: { type: 'string', required: true },\n      zip: { type: 'string', required: true, len: 8, message: 'invalid zip' },\n    },\n  },\n  name: { type: 'string', required: true },\n};\nconst validator = new Schema(descriptor);\nvalidator.validate({ address: {} }, (errors, fields) => {\n  // errors for address.street, address.city, address.zip\n});\n```\n\nNote that if you do not specify the `required` property on the parent rule it is perfectly valid for the field not to be declared on the source object and the deep validation rules will not be executed as there is nothing to validate against.\n\nDeep rule validation creates a schema for the nested rules so you can also specify the `options` passed to the `schema.validate()` method.\n\n```js\nconst descriptor = {\n  address: {\n    type: 'object',\n    required: true,\n    options: { first: true },\n    fields: {\n      street: { type: 'string', required: true },\n      city: { type: 'string', required: true },\n      zip: { type: 'string', required: true, len: 8, message: 'invalid zip' },\n    },\n  },\n  name: { type: 'string', required: true },\n};\nconst validator = new Schema(descriptor);\n\nvalidator.validate({ address: {} })\n  .catch(({ errors, fields }) => {\n    // now only errors for street and name    \n  });\n```\n\nThe parent rule is also validated so if you have a set of rules such as:\n\n```js\nconst descriptor = {\n  roles: {\n    type: 'array',\n    required: true,\n    len: 3,\n    fields: {\n      0: { type: 'string', required: true },\n      1: { type: 'string', required: true },\n      2: { type: 'string', required: true },\n    },\n  },\n};\n```\n\nAnd supply a source object of `{ roles: ['admin', 'user'] }` then two errors will be created. One for the array length mismatch and one for the missing required array entry at index 2.\n\n#### defaultField\n\nThe `defaultField` property can be used with the `array` or `object` type for validating all values of the container.\nIt may be an `object` or `array` containing validation rules. For example:\n\n```js\nconst descriptor = {\n  urls: {\n    type: 'array',\n    required: true,\n    defaultField: { type: 'url' },\n  },\n};\n```\n\nNote that `defaultField` is expanded to `fields`, see [deep rules](#deep-rules).\n\n#### Transform\n\nSometimes it is necessary to transform a value before validation, possibly to coerce the value or to sanitize it in some way. To do this add a `transform` function to the validation rule. The property is transformed prior to validation and re-assigned to the source object to mutate the value of the property in place.\n\n```js\nimport Schema from 'async-validator';\nconst descriptor = {\n  name: {\n    type: 'string',\n    required: true,\n    pattern: /^[a-z]+$/,\n    transform(value) {\n      return value.trim();\n    },\n  },\n};\nconst validator = new Schema(descriptor);\nconst source = { name: ' user  ' };\nvalidator.validate(source)\n  .then(() => assert.equal(source.name, 'user'));\n```\n\nWithout the `transform` function validation would fail due to the pattern not matching as the input contains leading and trailing whitespace, but by adding the transform function validation passes and the field value is sanitized at the same time.\n\n\n#### Messages\n\nDepending upon your application requirements, you may need i18n support or you may prefer different validation error messages.\n\nThe easiest way to achieve this is to assign a `message` to a rule:\n\n```js\n{ name: { type: 'string', required: true, message: 'Name is required' } }\n```\n\nMessage can be any type, such as jsx format.\n\n```js\n{ name: { type: 'string', required: true, message: '<b>Name is required</b>' } }\n```\n\nMessage can also be a function, e.g. if you use vue-i18n:\n```js\n{ name: { type: 'string', required: true, message: () => this.$t( 'name is required' ) } }\n```\n\nPotentially you may require the same schema validation rules for different languages, in which case duplicating the schema rules for each language does not make sense.\n\nIn this scenario you could just provide your own messages for the language and assign it to the schema:\n\n```js\nimport Schema from 'async-validator';\nconst cn = {\n  required: '%s 必填',\n};\nconst descriptor = { name: { type: 'string', required: true } };\nconst validator = new Schema(descriptor);\n// deep merge with defaultMessages\nvalidator.messages(cn);\n...\n```\n\nIf you are defining your own validation functions it is better practice to assign the message strings to a messages object and then access the messages via the `options.messages` property within the validation function.\n\n#### asyncValidator\n\nYou can customize the asynchronous validation function for the specified field:\n\n```js\nconst fields = {\n  asyncField: {\n    asyncValidator(rule, value, callback) {\n      ajax({\n        url: 'xx',\n        value: value,\n      }).then(function(data) {\n        callback();\n      }, function(error) {\n        callback(new Error(error));\n      });\n    },\n  },\n\n  promiseField: {\n    asyncValidator(rule, value) {\n      return ajax({\n        url: 'xx',\n        value: value,\n      });\n    },\n  },\n};\n```\n\n#### validator\n\nYou can custom validate function for specified field:\n\n```js\nconst fields = {\n  field: {\n    validator(rule, value, callback) {\n      return value === 'test';\n    },\n    message: 'Value is not equal to \"test\".',\n  },\n\n  field2: {\n    validator(rule, value, callback) {\n      return new Error(`${value} is not equal to 'test'.`);\n    },\n  },\n \n  arrField: {\n    validator(rule, value) {\n      return [\n        new Error('Message 1'),\n        new Error('Message 2'),\n      ];\n    },\n  },\n};\n```\n\n## FAQ\n\n### How to avoid warning\n\n```js\nimport Schema from 'async-validator';\nSchema.warning = function(){};\n```\n\n### How to check if it is `true`\n\nUse `enum` type passing `true` as option.\n\n```js\n{\n  type: 'enum',\n  enum: [true],\n  message: '',\n}\n```\n\n## Test Case\n\n```bash\nnpm test\n```\n\n## Coverage\n\n```bash\nnpm run coverage\n```\n\nOpen coverage/ dir\n\n## License\n\nEverything is [MIT](https://en.wikipedia.org/wiki/MIT_License).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-present yiminghe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/async-validator/-/async-validator-3.5.1.tgz#cd62b9688b2465f48420e27adb47760ab1b5559f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/async-validator/-/async-validator-3.5.1.tgz",
    "hash": "cd62b9688b2465f48420e27adb47760ab1b5559f",
    "integrity": "sha512-DDmKA7sdSAJtTVeNZHrnr2yojfFaoeW8MfQN8CeuXg8DDQHTqKk9Fdv38dSvnesHoO8MUwMI2HphOeSyIF+wmQ==",
    "registry": "npm",
    "packageName": "async-validator",
    "cacheIntegrity": "sha512-DDmKA7sdSAJtTVeNZHrnr2yojfFaoeW8MfQN8CeuXg8DDQHTqKk9Fdv38dSvnesHoO8MUwMI2HphOeSyIF+wmQ== sha1-zWK5aIskZfSEIOJ620d2CrG1VZ8="
  },
  "registry": "npm",
  "hash": "cd62b9688b2465f48420e27adb47760ab1b5559f"
}