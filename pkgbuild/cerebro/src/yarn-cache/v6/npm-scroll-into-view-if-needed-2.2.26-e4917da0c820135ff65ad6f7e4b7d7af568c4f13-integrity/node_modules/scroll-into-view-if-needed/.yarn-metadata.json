{
  "manifest": {
    "name": "scroll-into-view-if-needed",
    "description": "Ponyfill for upcoming Element.scrollIntoView() APIs like scrollMode: if-needed, behavior: smooth and block: center",
    "license": "MIT",
    "author": {
      "name": "Cody Olsen"
    },
    "homepage": "https://scroll-into-view-if-needed.netlify.com/",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/stipsan/scroll-into-view-if-needed.git"
    },
    "version": "2.2.26",
    "main": "index.js",
    "module": "es/index.js",
    "files": [
      "es",
      "typings",
      "umd"
    ],
    "scripts": {
      "prebuild": "yarn clean",
      "build": "yarn build:d.ts && yarn build:cjs && yarn build:es && yarn build:umd && yarn build:umd.min",
      "build:cjs": "BABEL_ENV=cjs babel src -d . --extensions '.ts'",
      "build:d.ts": "tsc --emitDeclarationOnly",
      "build:es": "BABEL_ENV=es babel src -d es --extensions '.ts'",
      "build:umd": "BABEL_ENV=umd NODE_ENV=development rollup -c -f umd -o umd/scroll-into-view-if-needed.js",
      "build:umd.min": "BABEL_ENV=umd NODE_ENV=production rollup -c -f umd -o umd/scroll-into-view-if-needed.min.js",
      "clean": "rimraf 'umd' 'es' 'typings'",
      "precommit": "lint-staged",
      "dev": "concurrently 'tsc --noEmit --watch' 'tsc --noEmit -p tests/typescript --watch' 'yarn build:cjs --watch' 'yarn build:es --watch' 'yarn build:umd --watch' 'yarn build:umd.min --watch'",
      "lint": "eslint ./integration-examples",
      "prepublishOnly": "unset npm_config_cafile && yarn build",
      "typecheck": "tsc --noEmit && tsc --noEmit -p tests/typescript"
    },
    "sideEffects": false,
    "typings": "typings/index.d.ts",
    "dependencies": {
      "compute-scroll-into-view": "^1.0.16"
    },
    "devDependencies": {
      "@babel/cli": "7.10.5",
      "@babel/core": "7.11.4",
      "@babel/plugin-external-helpers": "7.10.4",
      "@babel/preset-env": "7.11.0",
      "@babel/preset-typescript": "7.10.4",
      "babel-eslint": "10.1.0",
      "babel-plugin-add-module-exports": "1.0.2",
      "babel-plugin-dev-expression": "0.2.2",
      "concurrently": "5.3.0",
      "eslint": "4.19.1",
      "eslint-config-prettier": "4.0.0",
      "eslint-plugin-import": "2.22.0",
      "eslint-plugin-react": "7.20.6",
      "flowgen": "1.11.0",
      "husky": "4.2.5",
      "lint-staged": "10.2.13",
      "prettier": "2.1.1",
      "prettier-package-json": "2.1.3",
      "rimraf": "3.0.2",
      "rollup": "2.26.8",
      "rollup-plugin-babel": "4.4.0",
      "rollup-plugin-commonjs": "10.1.0",
      "rollup-plugin-node-resolve": "5.2.0",
      "rollup-plugin-replace": "2.2.0",
      "rollup-plugin-terser": "6.1.0",
      "semantic-release": "17.1.1",
      "tslint": "5.20.1",
      "tslint-config-prettier": "1.18.0",
      "typescript": "3.9.7"
    },
    "keywords": [
      "behavior-smooth",
      "if-needed",
      "polyfill",
      "ponyfill",
      "scroll",
      "scroll-into-view",
      "scrollIntoView",
      "scrollIntoViewIfNeeded",
      "scrollMode",
      "smooth",
      "smoothscroll",
      "typescript"
    ],
    "browserify": {
      "transform": [
        "loose-envify"
      ]
    },
    "bundlesize": [
      {
        "path": "./umd/scroll-into-view-if-needed.min.js",
        "maxSize": "3.2 kB",
        "compression": "none"
      }
    ],
    "lint-staged": {
      "*.js": [
        "prettier --write",
        "git add"
      ],
      "*.{ts,tsx}": [
        "prettier --write",
        "git add"
      ],
      "*.json": [
        "prettier --write",
        "git add"
      ],
      "*.css": [
        "prettier --write",
        "git add"
      ],
      "*.md": [
        "prettier --write",
        "git add"
      ],
      "**/package.json": [
        "prettier-package-json --write",
        "git add"
      ],
      "**/.babelrc": [
        "prettier --write",
        "git add"
      ]
    },
    "prettier": {
      "semi": false,
      "singleQuote": true,
      "trailingComma": "es5",
      "overrides": [
        {
          "files": ".babelrc",
          "options": {
            "parser": "json"
          }
        }
      ]
    },
    "release": {
      "prepare": [
        "@semantic-release/npm"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-scroll-into-view-if-needed-2.2.26-e4917da0c820135ff65ad6f7e4b7d7af568c4f13-integrity/node_modules/scroll-into-view-if-needed/package.json",
    "readmeFilename": "README.md",
    "readme": "[![CircleCI Status](https://img.shields.io/circleci/project/github/stipsan/scroll-into-view-if-needed.svg?style=flat-square)](https://circleci.com/gh/stipsan/scroll-into-view-if-needed)\n[![npm stat](https://img.shields.io/npm/dm/scroll-into-view-if-needed.svg?style=flat-square)](https://npm-stat.com/charts.html?package=scroll-into-view-if-needed)\n[![npm version](https://img.shields.io/npm/v/scroll-into-view-if-needed.svg?style=flat-square)](https://www.npmjs.com/package/scroll-into-view-if-needed)\n[![gzip size][gzip-badge]][unpkg-dist]\n[![size][size-badge]][unpkg-dist]\n[![module formats: umd, cjs, and es][module-formats-badge]][unpkg-dist]\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n[![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?style=flat-square&badge_key=ejZ6OUtTaS9rZFFOYzlkeHlwTzMwSWxpR0FzWFcwOW5TS3ROTmlSdXMrVT0tLVhrVk9La2lCb1o4Y05mcmNXVnAvdkE9PQ==--d17668b8aba5091e4ef3a58927b8209e50b0a788)](https://www.browserstack.com/automate/public-build/ejZ6OUtTaS9rZFFOYzlkeHlwTzMwSWxpR0FzWFcwOW5TS3ROTmlSdXMrVT0tLVhrVk9La2lCb1o4Y05mcmNXVnAvdkE9PQ==--d17668b8aba5091e4ef3a58927b8209e50b0a788)\n\n![scroll-into-view-if-needed](https://user-images.githubusercontent.com/81981/39476436-34a4f3ae-4d5c-11e8-9d1c-7fa2fa6288a0.png)\n\nThis used to be a [ponyfill](https://ponyfill.com) for\n`Element.scrollIntoViewIfNeeded`. Since then the CSS working group have decided to implement its features in `Element.scrollIntoView` as the option `scrollMode: \"if-needed\"`. Thus this library got rewritten to implement that spec instead of the soon to be deprecated one.\n\n## [Demo](https://scroll-into-view-if-needed.netlify.com)\n\n## Install\n\n```bash\nyarn add scroll-into-view-if-needed\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com/scroll-into-view-if-needed/umd/):\n\n```html\n<script src=\"https://unpkg.com/scroll-into-view-if-needed/umd/scroll-into-view-if-needed.min.js\"></script>\n```\n\nYou can find the library on `window.scrollIntoView`.\n\n## Usage\n\n```js\n// es6 import\nimport scrollIntoView from 'scroll-into-view-if-needed'\n// or es5\nconst scrollIntoView = require('scroll-into-view-if-needed')\n\nconst node = document.getElementById('hero')\n\n// similar behavior as Element.scrollIntoView({block: \"nearest\", inline: \"nearest\"})\n// only that it is a no-op if `node` is already visible\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n// same behavior as Element.scrollIntoViewIfNeeded()\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded\nscrollIntoView(node, {\n  scrollMode: 'if-needed',\n  block: 'nearest',\n  inline: 'nearest',\n})\n\n// same behavior as Element.scrollIntoViewIfNeeded(true) without the \"IfNeeded\" behavior\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded\nscrollIntoView(node, { block: 'center', inline: 'center' })\n// scrollMode is \"always\" by default\n\n// smooth scroll if the browser supports it and if the element isn't visible\nscrollIntoView(node, { behavior: 'smooth', scrollMode: 'if-needed' })\n```\n\n### Ponyfill smooth scrolling\n\nWhat does ponyfilling smooth scrolling mean, and why is it implemented in [`smooth-scroll-into-view-if-needed`](https://github.com/stipsan/smooth-scroll-into-view-if-needed) instead?\nThe answer is bundlesize. If this package adds smooth scrolling to browsers that's missing it then the overall bundlesize increases regardless of wether you use this feature or not.\n\nPut it this way:\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\n// Even if all you do is this\nscrollIntoView(node, { scrollMode: 'if-needed' })\n// You would end up with the same bundlesize as people who need\n// smooth scrolling to work in browsers that don't support it natively\nscrollIntoView(node, { behavior: 'smooth', scrollMode: 'if-needed' })\n```\n\nThat's why only native smooth scrolling is supported out of the box. There are two common ways you can smooth scroll browsers that don't support it natively. Below is all three, which one is best for you depends on what is the most important to your use case:: load time, consistency or quality.\n\n##### Load time\n\nIn many scenarios smooth scrolling can be used as a progressive enhancement. If the user is on a browser that don't implement smooth scrolling it'll simply scroll instantly and your bundlesize is only as large as it has to be.\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nscrollIntoView(node, { behavior: 'smooth' })\n```\n\n##### Consistency\n\nIf a consistent smooth scrolling experience is a priority and you really don't want any surprises between different browsers and enviroments. In other words don't want to be affected by how a vendor might implement native smooth scrolling, then [`smooth-scroll-into-view-if-needed`](https://github.com/stipsan/smooth-scroll-into-view-if-needed) is your best option. It ensures the same smooth scrolling experience for every browser.\n\n```js\nimport smoothScrollIntoView from 'smooth-scroll-into-view-if-needed'\n\nsmoothScrollIntoView(node, { behavior: 'smooth' })\n```\n\n##### Quality\n\nIf you want to use native smooth scrolling when it's available, and fallback to the smooth scrolling ponyfill:\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\nimport smoothScrollIntoView from 'smooth-scroll-into-view-if-needed'\n\nconst scrollIntoViewSmoothly =\n  'scrollBehavior' in document.documentElement.style\n    ? scrollIntoView\n    : smoothScrollIntoView\n\nscrollIntoViewSmoothly(node, { behavior: 'smooth' })\n```\n\n## API\n\n### scrollIntoView(target, [options])\n\n> New API introduced in `v1.3.0`\n\n### options\n\nType: `Object`\n\n#### behavior\n\nType: `'auto' | 'smooth' | Function`<br> Default: `'auto'`\n\n> Introduced in `v2.1.0`\n\n##### `'auto'`\n\nThe auto option unlocks a few interesting opportunities.\nThe browser will decide based on user preferences wether it should smooth scroll or not.\nOn top of that you can control/override scrolling behavior through the [`scroll-behavior`](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior) CSS property.\n\nSome people get [motion sick from animations](https://css-tricks.com/smooth-scrolling-accessibility/#article-header-id-5). You can use CSS to turn off smooth scrolling in those cases to avoid making them dizzy:\n\n```css\nhtml,\n.scroll-container {\n  overflow: scroll;\n}\n\nhtml,\n.scroll-container {\n  scroll-behavior: smooth;\n}\n@media (prefers-reduced-motion) {\n  html,\n  .scroll-container {\n    scroll-behavior: auto;\n  }\n}\n```\n\n##### `'smooth'`\n\nUsing `behavior: 'smooth'` is the easiest way to smooth scroll an element as it does not require any CSS, just a browser that implements it. [More information.](#ponyfill-smooth-scrolling)\n\n##### `Function`\n\nWhen given a function then this library will only calculate what should be scrolled and leave it up to you to perform the actual scrolling.\n\nThe callback is given an array over actions. Each action contain a reference to an element that should be scrolled, with its top and left scrolling coordinates.\nWhat you return is passed through, allowing you to implement a Promise interface if you want to (check [`smooth-scroll-into-view-if-needed`](https://github.com/stipsan/smooth-scroll-into-view-if-needed) to see an example of that).\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\nconst node = document.getElementById('hero')\n\nscrollIntoView(node, {\n  // Your scroll actions will always be an array, even if there is nothing to scroll\n  behavior: actions =>\n    // list is sorted from innermost (closest parent to your target) to outermost (often the document.body or viewport)\n    actions.forEach(({ el, top, left }) => {\n      // implement the scroll anyway you want\n      el.scrollTop = top\n      el.scrollLeft = left\n\n      // If you need the relative scroll coordinates, for things like window.scrollBy style logic or whatever, just do the math\n      const offsetTop = el.scrollTop - top\n      const offsetLeft = el.scrollLeft - left\n    }),\n  // all the other options (scrollMode, block, inline) still work, so you don't need to reimplement them (unless you really really want to)\n})\n```\n\nCheck the demo to see an [example with popmotion and a spring transition](https://scroll-into-view-if-needed.netlify.com/#custom-transition).\n\n> If you only need the custom behavior you might be better off by using the compute library directly: https://github.com/stipsan/compute-scroll-into-view\n\n#### [block](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'center'`\n\n> Introduced in `v2.1.0`\n\n[More info.](https://github.com/stipsan/compute-scroll-into-view#block)\n\n#### [inline](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'nearest'`\n\n> Introduced in `v2.1.0`\n\n[More info.](https://github.com/stipsan/compute-scroll-into-view#inline)\n\n#### [scrollMode](https://scroll-into-view-if-needed.netlify.com/#scrolling-if-needed)\n\nType: `'always' | 'if-needed'`<br> Default: `'always'`\n\n> Introduced in `v2.1.0`\n\n[More info.](https://github.com/stipsan/compute-scroll-into-view#scrollmode)\n\n#### [boundary](https://scroll-into-view-if-needed.netlify.com/#limit-propagation)\n\nType: `Element | Function`\n\n> `Function` introduced in `v2.1.0`, `Element` introduced in `v1.1.0`\n\n[More info.](https://github.com/stipsan/compute-scroll-into-view#boundary)\n\n#### skipOverflowHiddenElements\n\nType: `Boolean`<br> Default: `false`\n\n> Introduced in `v2.2.0`\n\n[More info.](https://github.com/stipsan/compute-scroll-into-view#skipoverflowhiddenelements)\n\n# TypeScript support\n\nWhen the library itself is built on TypeScript there's no excuse for not publishing great library definitions!\n\nThis goes beyond just checking if you misspelled `behavior: 'smoooth'` to the return type of a custom behavior:\n\n```typescript\nconst scrolling = scrollIntoView(document.body, {\n  behavior: actions => {\n    return new Promise(\n      ...\n    )\n  },\n})\n// TypeScript understands that scrolling is a Promise, you can safely await on it\nscrolling.then(() => console.log('done scrolling'))\n```\n\nYou can optionally use a generic to ensure that `options.behavior` is the expected type.\nIt can be useful if the custom behavior is implemented in another module:\n\n```typescript\nconst customBehavior = actions => {\n    return new Promise(\n      ...\n    )\n  }\n\nconst scrolling = scrollIntoView<Promise<any>>(document.body, {\n  behavior: customBehavior\n})\n// throws if customBehavior does not return a promise\n```\n\nThe options are available for you if you are wrapping this libary in another abstraction (like a React component):\n\n```typescript\nimport scrollIntoView, { Options } from 'scroll-into-view-if-needed'\n\ninterface CustomOptions extends Options {\n  useBoundary?: boolean\n}\n\nfunction scrollToTarget(selector, options: Options = {}) {\n  const { useBoundary = false, ...scrollOptions } = options\n  return scrollIntoView(document.querySelector(selector), scrollOptions)\n}\n```\n\n# Breaking API changes from v1\n\nSince v1 ponyfilled Element.scrollIntoViewIfNeeded, while v2 ponyfills Element.scrollIntoView, there are breaking changes from the differences in their APIs.\n\nThe biggest difference is that the new behavior follows the spec, so the \"if-needed\" behavior is **not enabled by default:**\n\n##### v1\n\n```js\nimport scrollIntoViewIfNeeded from 'scroll-into-view-if-needed'\n\n// Only scrolls into view if needed, and to the nearest edge\nscrollIntoViewIfNeeded(target)\n```\n\n##### v2\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\n// Must provide these options to behave the same way as v1 default\nscrollIntoView(target, { block: 'nearest', scrollMode: 'if-needed' })\n```\n\n#### centerIfNeeded\n\nThe old `Element.scrollIntoView` api only had two settings, align to top or bottom. [`Element.scrollIntoViewIfNeeded`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded) had two more, align to the center or nearest edge.\nThe `Element.scrollIntoView` spec now supports these two modes as `block: 'center'` and `block: 'nearest'`.\nBreaking changes sucks, but on the plus side your code is now more portable and will make this library easier to delete from your codebase on the glorious day browser support is good enough.\n\n##### v1\n\n```js\nimport scrollIntoViewIfNeeded from 'scroll-into-view-if-needed'\n\n// v1.3.x and later\nscrollIntoViewIfNeeded(target, { centerIfNeeded: true })\nscrollIntoViewIfNeeded(target, { centerIfNeeded: false })\n// v1.2.x and earlier\nscrollIntoViewIfNeeded(target, true)\nscrollIntoViewIfNeeded(target, false)\n```\n\n##### v2\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nscrollIntoView(target, { block: 'center' })\nscrollIntoView(target, { block: 'nearest' })\n```\n\n#### duration\n\n[More information.](#ponyfill-smooth-scrolling)\n\n##### v1\n\n```js\nimport scrollIntoViewIfNeeded from 'scroll-into-view-if-needed'\n\nscrollIntoViewIfNeeded(target, { duration: 300 })\n```\n\n##### v2\n\n```js\nimport scrollIntoView from 'scroll-into-view-if-needed'\n// or\nimport scrollIntoView from 'smooth-scroll-into-view-if-needed'\n\nscrollIntoView(target, { behavior: 'smooth' })\n```\n\n#### easing\n\nThis feature is removed, but you can achieve the same thing by implementing [`behavior: Function`](#function).\n\n#### handleScroll\n\nThis is replaced with [`behavior: Function`](#function) with one key difference. Instead of firing once per element that should be scrolled, the new API only fire once and instead give you an array so you can much easier batch and scroll multiple elements at the same time. Or sync scrolling with another element if that's the kind of stuff you're into, I don't judge.\n\n```diff\n-import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed'\n+import scrollIntoView from 'scroll-into-view-if-needed'\n\n-scrollIntoViewIfNeeded(node, {handleScroll: (el, {scrollTop, scrollLeft}) => {\n-  el.scrollTop = scrollTop\n-  el.scrollLeft = scrollLeft\n-}})\n+scrollIntoView(node, {behavior: actions.forEach(({el, top, left}) => {\n+  el.scrollTop = top\n+  el.scrollLeft = left\n+})})\n```\n\n#### offset\n\nThis was always a buggy feature and warned against using in v1 as it might get dropped.\nIt's much safer to use CSS wrapper elements for this kind of thing.\n\n### scrollIntoViewIfNeeded(target, [centerIfNeeded], [animateOptions], [finalElement], [offsetOptions])\n\nThis API signature were warned to be dropped in `v2.0.0`, and it was.\n\n# Related packages\n\n- [compute-scroll-into-view](https://www.npmjs.com/package/compute-scroll-into-view) - the engine used by this library.\n- [smooth-scroll-into-view-if-needed](https://www.npmjs.com/package/smooth-scroll-into-view-if-needed) – ponyfills smooth scrolling.\n- [react-scroll-into-view-if-needed](https://www.npmjs.com/package/react-scroll-into-view-if-needed) – A thin wrapper to scroll your component into view.\n- [scroll-polyfill](https://www.npmjs.com/package/scroll-polyfill) – polyfills smooth scrolling.\n- [Don't be shy, add yours!](https://github.com/stipsan/scroll-into-view-if-needed/edit/master/README.md)\n\n# Who's using this\n\n- [zeit.co/docs](https://github.com/zeit/docs) – Documentation of ZEIT Now and other services.\n- [Selenium IDE](https://github.com/SeleniumHQ/selenium-ide) – An integrated development environment for Selenium scripts.\n- [Box UI Elements](https://github.com/box/box-ui-elements) – Box UI Elements are pre-built UI components that allow developers to add elements of the main Box web application into their own applications.\n- [react-responsive-ui](https://github.com/catamphetamine/react-responsive-ui) – Responsive React UI components.\n- [Mineral UI](https://github.com/mineral-ui/mineral-ui) –\n  A design system and React component library for the web that lets you quickly build high-quality, accessible apps.\n- [Covalent](https://github.com/Teradata/covalent) – Teradata UI Platform built on Angular Material.\n- [docs.expo.io](https://github.com/expo/expo-docs) – Documentation for Expo, its SDK, client and services.\n- [Add yourself to the list 😉](https://github.com/stipsan/scroll-into-view-if-needed/edit/master/README.md)\n\n[gzip-badge]: http://img.badgesize.io/https://unpkg.com/scroll-into-view-if-needed/umd/scroll-into-view-if-needed.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[size-badge]: http://img.badgesize.io/https://unpkg.com/scroll-into-view-if-needed/umd/scroll-into-view-if-needed.min.js?label=size&style=flat-square\n[unpkg-dist]: https://unpkg.com/scroll-into-view-if-needed/umd/\n[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs%2C%20es-green.svg?style=flat-square\n\n## Sponsors\n\nThanks to [BrowserStack](https://www.browserstack.com) for sponsoring cross browser and device testing 😄\n\n<a href=\"https://www.browserstack.com\" target=\"_blank\"><img src=\"https://www.browserstack.com/images/layout/logo.svg\"></a>\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Stian Didriksen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/scroll-into-view-if-needed/-/scroll-into-view-if-needed-2.2.26.tgz#e4917da0c820135ff65ad6f7e4b7d7af568c4f13",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/scroll-into-view-if-needed/-/scroll-into-view-if-needed-2.2.26.tgz",
    "hash": "e4917da0c820135ff65ad6f7e4b7d7af568c4f13",
    "integrity": "sha512-SQ6AOKfABaSchokAmmaxVnL9IArxEnLEX9j4wAZw+x4iUTb40q7irtHG3z4GtAWz5veVZcCnubXDBRyLVQaohw==",
    "registry": "npm",
    "packageName": "scroll-into-view-if-needed",
    "cacheIntegrity": "sha512-SQ6AOKfABaSchokAmmaxVnL9IArxEnLEX9j4wAZw+x4iUTb40q7irtHG3z4GtAWz5veVZcCnubXDBRyLVQaohw== sha1-5JF9oMggE1/2Wtb35LfXr1aMTxM="
  },
  "registry": "npm",
  "hash": "e4917da0c820135ff65ad6f7e4b7d7af568c4f13"
}