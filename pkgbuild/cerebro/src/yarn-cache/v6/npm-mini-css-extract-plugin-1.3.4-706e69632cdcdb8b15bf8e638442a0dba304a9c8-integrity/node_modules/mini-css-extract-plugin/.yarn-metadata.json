{
  "manifest": {
    "name": "mini-css-extract-plugin",
    "version": "1.3.4",
    "description": "extracts CSS into separate files",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/mini-css-extract-plugin.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/mini-css-extract-plugin",
    "bugs": {
      "url": "https://github.com/webpack-contrib/mini-css-extract-plugin/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --ignore \"src/**/*.test.js\" --copy-files",
      "postbuild": "es-check es5 dist/hmr/hotModuleReplacement.js",
      "clean": "del-cli dist",
      "commitlint": "commitlint --from=master",
      "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "prepare": "npm run build",
      "release": "standard-version",
      "security": "npm audit",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "test:manual": "npm run build && webpack-dev-server test/manual/src/index.js --open --config test/manual/webpack.config.js",
      "pretest": "npm run lint",
      "test": "cross-env NODE_ENV=test npm run test:coverage",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.4.0 || ^5.0.0"
    },
    "dependencies": {
      "loader-utils": "^2.0.0",
      "schema-utils": "^3.0.0",
      "webpack-sources": "^1.1.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.10",
      "@babel/core": "^7.12.10",
      "@babel/preset-env": "^7.12.11",
      "@commitlint/cli": "^11.0.0",
      "@commitlint/config-conventional": "^11.0.0",
      "@webpack-contrib/defaults": "^6.3.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^26.6.3",
      "bootstrap": "^4.5.3",
      "cross-env": "^7.0.3",
      "css-loader": "^5.0.1",
      "del": "^6.0.0",
      "del-cli": "^3.0.1",
      "es-check": "^5.2.0",
      "eslint": "^7.17.0",
      "eslint-config-prettier": "^7.1.0",
      "eslint-plugin-import": "^2.22.1",
      "file-loader": "^6.2.0",
      "husky": "^4.3.7",
      "jest": "^26.6.3",
      "jsdom": "^16.4.0",
      "lint-staged": "^10.5.3",
      "memfs": "^3.0.2",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.2.1",
      "standard-version": "^9.1.0",
      "webpack": "^5.9.0",
      "webpack-cli": "^4.3.1",
      "webpack-dev-server": "^3.7.2"
    },
    "keywords": [
      "webpack",
      "css",
      "extract",
      "hmr"
    ],
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-mini-css-extract-plugin-1.3.4-706e69632cdcdb8b15bf8e638442a0dba304a9c8-integrity/node_modules/mini-css-extract-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\" src=\"https://cdn.worldvectorlogo.com/logos/javascript.svg\">\n  <a href=\"https://webpack.js.org/\">\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon-square-big.svg\">\n  </a>\n  <h1>mini-css-extract-plugin</h1>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# mini-css-extract-plugin\n\nThis plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.\n\nIt builds on top of a new webpack v4 feature (module types) and requires webpack 4 to work.\n\nCompared to the extract-text-webpack-plugin:\n\n- Async loading\n- No duplicate compilation (performance)\n- Easier to use\n- Specific to CSS\n\n## Getting Started\n\nTo begin, you'll need to install `mini-css-extract-plugin`:\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\nIt's recommended to combine `mini-css-extract-plugin` with the [`css-loader`](https://github.com/webpack-contrib/css-loader)\n\nThen add the loader and the plugin to your `webpack` config. For example:\n\n**style.css**\n\n```css\nbody {\n  background: green;\n}\n```\n\n**component.js**\n\n```js\nimport './style.css';\n```\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n## Options\n\n### Plugin Options\n\n|                 Name                  |         Type         |                Default                | Description                                                |\n| :-----------------------------------: | :------------------: | :-----------------------------------: | :--------------------------------------------------------- |\n|      **[`filename`](#filename)**      | `{String\\|Function}` |             `[name].css`              | This option determines the name of each output CSS file    |\n| **[`chunkFilename`](#chunkFilename)** | `{String\\|Function}` |          `based on filename`          | This option determines the name of non-entry chunk files   |\n|   **[`ignoreOrder`](#ignoreOrder)**   |     `{Boolean}`      |                `false`                | Remove Order Warnings                                      |\n|        **[`insert`](#insert)**        | `{String\\|Function}` | `document.head.appendChild(linkTag);` | Inserts `<link>` at the given position                     |\n|    **[`attributes`](#attributes)**    |      `{Object}`      |                 `{}`                  | Adds custom attributes to tag                              |\n|      **[`linkType`](#linkType)**      | `{String\\|Boolean}`  |              `text/css`               | Allows loading asynchronous chunks with a custom link type |\n\n#### `filename`\n\nType: `String|Function`\nDefault: `[name].css`\n\nThis option determines the name of each output CSS file.\n\nWorks like [`output.filename`](https://webpack.js.org/configuration/output/#outputfilename)\n\n#### `chunkFilename`\n\nType: `String|Function`\nDefault: `based on filename`\n\n> i Specifying `chunkFilename` as a `function` is only available in webpack@5\n\nThis option determines the name of non-entry chunk files.\n\nWorks like [`output.chunkFilename`](https://webpack.js.org/configuration/output/#outputchunkfilename)\n\n#### `ignoreOrder`\n\nType: `Boolean`\nDefault: `false`\n\nRemove Order Warnings.\nSee [examples](#remove-order-warnings) below for details.\n\n#### `insert`\n\nType: `String|Function`\nDefault: `document.head.appendChild(linkTag);`\n\nBy default, the `extract-css-chunks-plugin` appends styles (`<link>` elements) to `document.head` of the current `window`.\n\nHowever in some circumstances it might be necessary to have finer control over the append target or even delay `link` elements instertion.\nFor example this is the case when you asynchronously load styles for an application that runs inside of an iframe.\nIn such cases `insert` can be configured to be a function or a custom selector.\n\nIf you target an [iframe](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) make sure that the parent document has sufficient access rights to reach into the frame document and append elements to it.\n\n##### `String`\n\nAllows to setup custom [query selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector).\nA new `<link>` element will be inserted after the found item.\n\n**webpack.config.js**\n\n```js\nnew MiniCssExtractPlugin({\n  insert: '#some-element',\n});\n```\n\nA new `<link>` element will be inserted after the element with id `some-element`.\n\n##### `Function`\n\nAllows to override default behavior and insert styles at any position.\n\n> ⚠ Do not forget that this code will run in the browser alongside your application. Since not all browsers support latest ECMA features like `let`, `const`, `arrow function expression` and etc we recommend you to use only ECMA 5 features and syntax.\n\n> > ⚠ The `insert` function is serialized to string and passed to the plugin. This means that it won't have access to the scope of the webpack configuration module.\n\n**webpack.config.js**\n\n```js\nnew MiniCssExtractPlugin({\n  insert: function (linkTag) {\n    var reference = document.querySelector('#some-element');\n    if (reference) {\n      reference.parentNode.insertBefore(linkTag, reference);\n    }\n  },\n});\n```\n\nA new `<link>` element will be inserted before the element with id `some-element`.\n\n#### `attributes`\n\nType: `Object`\nDefault: `{}`\n\nIf defined, the `mini-css-extract-plugin` will attach given attributes with their values on <link> element.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      attributes: {\n        id: 'target',\n        'data-target': 'example',\n      },\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\nNote: It's only applied to dynamically loaded css chunks, if you want to modify link attributes inside html file, please using [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin)\n\n#### `linkType`\n\nType: `String|Boolean`\nDefault: `text/css`\n\nThis option allows loading asynchronous chunks with a custom link type, such as <link type=\"text/css\" ...>.\n\n##### `String`\n\nPossible values: `text/css`\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      linkType: 'text/css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n##### `Boolean`\n\n`false` disables the link `type` attribute\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      linkType: false,\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Loader Options\n\n|              Name               |         Type         |              Default               | Description                                                                       |\n| :-----------------------------: | :------------------: | :--------------------------------: | :-------------------------------------------------------------------------------- |\n| **[`publicPath`](#publicPath)** | `{String\\|Function}` | `webpackOptions.output.publicPath` | Specifies a custom public path for the external resources like images, files, etc |\n|   **[`esModule`](#esModule)**   |     `{Boolean}`      |               `true`               | Use ES modules syntax                                                             |\n|    **[`modules`](#modules)**    |      `{Object}`      |            `undefined`             | Configuration CSS Modules                                                         |\n\n#### `publicPath`\n\nType: `String|Function`\nDefault: the `publicPath` in `webpackOptions.output`\n\nSpecifies a custom public path for the external resources like images, files, etc inside `CSS`.\nWorks like [`output.publicPath`](https://webpack.js.org/configuration/output/#outputpublicpath)\n\n##### `String`\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              publicPath: '/public/path/to/',\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n##### `Function`\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              publicPath: (resourcePath, context) => {\n                return path.relative(path.dirname(resourcePath), context) + '/';\n              },\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `esModule`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, `mini-css-extract-plugin` generates JS modules that use the ES modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\n\nYou can enable a CommonJS syntax using:\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              esModule: false,\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `modules`\n\nType: `Object`\nDefault: `undefined`\n\nConfiguration CSS Modules.\n\n##### `namedExport`\n\nType: `Boolean`\nDefault: `false`\n\nEnables/disables ES modules named export for locals.\n\n> ⚠ Names of locals are converted to `camelCase`.\n\n> ⚠ It is not allowed to use JavaScript reserved words in css class names.\n\n> ⚠ Options `esModule` and `modules.namedExport` in `css-loader` and `MiniCssExtractPlugin.loader` should be enabled.\n\n**styles.css**\n\n```css\n.foo-baz {\n  color: red;\n}\n.bar {\n  color: blue;\n}\n```\n\n**index.js**\n\n```js\nimport { fooBaz, bar } from './styles.css';\n\nconsole.log(fooBaz, bar);\n```\n\nYou can enable a ES module named export using:\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [new MiniCssExtractPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              esModule: true,\n              modules: {\n                namedExport: true,\n              },\n            },\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              esModule: true,\n              modules: {\n                namedExport: true,\n                localIdentName: 'foo__[name]__[local]',\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Minimal example\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // all options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n      ignoreOrder: false, // Enable to remove warnings about conflicting order\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              // you can specify a publicPath here\n              // by default it uses publicPath in webpackOptions.output\n              publicPath: '../',\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Common use case\n\n`mini-css-extract-plugin` is more often used in `production` mode to get separate css files.\nFor `development` mode (including `webpack-dev-server`) you can use `style-loader`, because it injects CSS into the DOM using multiple <style></style> and works faster.\n\n> i Do not use together `style-loader` and `mini-css-extract-plugin`.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst devMode = process.env.NODE_ENV !== 'production';\n\nconst plugins = [];\nif (!devMode) {\n  // enable in production only\n  plugins.push(new MiniCssExtractPlugin());\n}\n\nmodule.exports = {\n  plugins,\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          devMode ? 'style-loader' : MiniCssExtractPlugin.loader,\n          'css-loader',\n          'postcss-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### The `publicPath` option as function\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              publicPath: (resourcePath, context) => {\n                // publicPath is the relative path of the resource to the context\n                // e.g. for ./css/admin/main.css the publicPath will be ../../\n                // while for ./css/main.css the publicPath will be ../\n                return path.relative(path.dirname(resourcePath), context) + '/';\n              },\n            },\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Advanced configuration example\n\nThis plugin should not be used with `style-loader` in the loaders chain.\n\nHere is an example to have both HMR in `development` and your styles extracted in a file for `production` builds.\n\n(Loaders options left out for clarity, adapt accordingly to your needs.)\n\nYou should not use `HotModuleReplacementPlugin` plugin if you are using a `webpack-dev-server`.\n`webpack-dev-server` enables / disables HMR using `hot` option.\n\n**webpack.config.js**\n\n```js\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst devMode = process.env.NODE_ENV !== 'production';\n\nconst plugins = [\n  new MiniCssExtractPlugin({\n    // Options similar to the same options in webpackOptions.output\n    // both options are optional\n    filename: devMode ? '[name].css' : '[name].[contenthash].css',\n    chunkFilename: devMode ? '[id].css' : '[id].[contenthash].css',\n  }),\n];\nif (devMode) {\n  // only enable hot in development\n  plugins.push(new webpack.HotModuleReplacementPlugin());\n}\n\nmodule.exports = {\n  plugins,\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          'postcss-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Hot Module Reloading (HMR)\n\nNote: HMR is automatically supported in webpack 5. No need to configure it. Skip the following:\n\nThe `mini-css-extract-plugin` supports hot reloading of actual css files in development.\nSome options are provided to enable HMR of both standard stylesheets and locally scoped CSS or CSS modules.\nBelow is an example configuration of mini-css for HMR use with CSS modules.\n\nYou should not use `HotModuleReplacementPlugin` plugin if you are using a `webpack-dev-server`.\n`webpack-dev-server` enables / disables HMR using `hot` option.\n\n**webpack.config.js**\n\n```js\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nconst plugins = [\n  new MiniCssExtractPlugin({\n    // Options similar to the same options in webpackOptions.output\n    // both options are optional\n    filename: devMode ? '[name].css' : '[name].[contenthash].css',\n    chunkFilename: devMode ? '[id].css' : '[id].[contenthash].css',\n  }),\n];\nif (devMode) {\n  // only enable hot in development\n  plugins.push(new webpack.HotModuleReplacementPlugin());\n}\n\nmodule.exports = {\n  plugins,\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {},\n          },\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Minimizing For Production\n\nTo minify the output, use a plugin like [css-minimizer-webpack-plugin](https://github.com/webpack-contrib/css-minimizer-webpack-plugin).\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n  optimization: {\n    minimizer: [\n      // For webpack@5 you can use the `...` syntax to extend existing minimizers (i.e. `terser-webpack-plugin`), uncomment the next line\n      // `...`,\n      new CssMinimizerPlugin(),\n    ],\n  },\n};\n```\n\nThis will enable CSS optimization only in production mode. If you want to run it also in development set the `optimization.minimize` option to true.\n\n### Using preloaded or inlined CSS\n\nThe runtime code detects already added CSS via `<link>` or `<style>` tag.\nThis can be useful when injecting CSS on server-side for Server-Side-Rendering.\nThe `href` of the `<link>` tag has to match the URL that will be used for loading the CSS chunk.\nThe `data-href` attribute can be used for `<link>` and `<style>` too.\nWhen inlining CSS `data-href` must be used.\n\n### Extracting all CSS in a single file\n\nThe CSS can be extracted in one CSS file using `optimization.splitChunks.cacheGroups`.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        styles: {\n          name: 'styles',\n          test: /\\.css$/,\n          chunks: 'all',\n          enforce: true,\n        },\n      },\n    },\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Extracting CSS based on entry\n\nYou may also extract the CSS based on the webpack entry name.\nThis is especially useful if you import routes dynamically but want to keep your CSS bundled according to entry.\nThis also prevents the CSS duplication issue one had with the ExtractTextPlugin.\n\n```js\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nfunction recursiveIssuer(m, c) {\n  const issuer = c.moduleGraph.getIssuer(m);\n  // For webpack@4 chunks = m.issuer\n\n  if (issuer) {\n    return recursiveIssuer(issuer, c);\n  }\n\n  const chunks = c.chunkGraph.getModuleChunks(m);\n  // For webpack@4 chunks = m._chunks\n\n  for (const chunk of chunks) {\n    return chunk.name;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  entry: {\n    foo: path.resolve(__dirname, 'src/foo'),\n    bar: path.resolve(__dirname, 'src/bar'),\n  },\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        fooStyles: {\n          name: 'styles_foo',\n          test: (m, c, entry = 'foo') =>\n            m.constructor.name === 'CssModule' &&\n            recursiveIssuer(m, c) === entry,\n          chunks: 'all',\n          enforce: true,\n        },\n        barStyles: {\n          name: 'styles_bar',\n          test: (m, c, entry = 'bar') =>\n            m.constructor.name === 'CssModule' &&\n            recursiveIssuer(m, c) === entry,\n          chunks: 'all',\n          enforce: true,\n        },\n      },\n    },\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Filename Option as function\n\nWith the `filename` option you can use chunk data to customize the filename.\nThis is particularly useful when dealing with multiple entry points and wanting to get more control out of the filename for a given entry point/chunk.\nIn the example below, we'll use `filename` to output the generated css into a different directory.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: ({ chunk }) => `${chunk.name.replace('/js/', '/css/')}.css`,\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Long Term Caching\n\nFor long term caching use `filename: \"[contenthash].css\"`. Optionally add `[name]`.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css',\n      chunkFilename: '[id].[contenthash].css',\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Remove Order Warnings\n\nFor projects where css ordering has been mitigated through consistent use of scoping or naming conventions, the css order warnings can be disabled by setting the ignoreOrder flag to true for the plugin.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      ignoreOrder: true,\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\n### Media Query Plugin\n\nIf you'd like to extract the media queries from the extracted CSS (so mobile users don't need to load desktop or tablet specific CSS anymore) you should use one of the following plugins:\n\n- [Media Query Plugin](https://github.com/SassNinja/media-query-plugin)\n- [Media Query Splitting Plugin](https://github.com/mike-diamond/media-query-splitting-plugin)\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/mini-css-extract-plugin.svg\n[npm-url]: https://npmjs.com/package/mini-css-extract-plugin\n[node]: https://img.shields.io/node/v/mini-css-extract-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin\n[tests]: https://github.com/webpack-contrib/mini-css-extract-plugin/workflows/mini-css-extract-plugin/badge.svg\n[tests-url]: https://github.com/webpack-contrib/mini-css-extract-plugin/actions\n[cover]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=mini-css-extract-plugin\n[size-url]: https://packagephobia.now.sh/result?p=mini-css-extract-plugin\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mini-css-extract-plugin/-/mini-css-extract-plugin-1.3.4.tgz#706e69632cdcdb8b15bf8e638442a0dba304a9c8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mini-css-extract-plugin/-/mini-css-extract-plugin-1.3.4.tgz",
    "hash": "706e69632cdcdb8b15bf8e638442a0dba304a9c8",
    "integrity": "sha512-dNjqyeogUd8ucUgw5sxm1ahvSfSUgef7smbmATRSbDm4EmNx5kQA6VdUEhEeCKSjX6CTYjb5vxgMUvRjqP3uHg==",
    "registry": "npm",
    "packageName": "mini-css-extract-plugin",
    "cacheIntegrity": "sha512-dNjqyeogUd8ucUgw5sxm1ahvSfSUgef7smbmATRSbDm4EmNx5kQA6VdUEhEeCKSjX6CTYjb5vxgMUvRjqP3uHg== sha1-cG5pYyzc24sVv45jhEKg26MEqcg="
  },
  "registry": "npm",
  "hash": "706e69632cdcdb8b15bf8e638442a0dba304a9c8"
}