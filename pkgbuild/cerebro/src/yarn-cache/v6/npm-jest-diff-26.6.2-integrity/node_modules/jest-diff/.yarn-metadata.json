{
  "manifest": {
    "name": "jest-diff",
    "version": "26.6.2",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/jest.git",
      "directory": "packages/jest-diff"
    },
    "license": "MIT",
    "main": "build/index.js",
    "types": "build/index.d.ts",
    "dependencies": {
      "chalk": "^4.0.0",
      "diff-sequences": "^26.6.2",
      "jest-get-type": "^26.3.0",
      "pretty-format": "^26.6.2"
    },
    "devDependencies": {
      "@jest/test-utils": "^26.6.2",
      "strip-ansi": "^6.0.0"
    },
    "engines": {
      "node": ">= 10.14.2"
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "4c46930615602cbf983fb7e8e82884c282a624d5",
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-jest-diff-26.6.2-integrity/node_modules/jest-diff/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-diff\n\nDisplay differences clearly so people can review changes confidently.\n\nThe default export serializes JavaScript **values**, compares them line-by-line, and returns a string which includes comparison lines.\n\nTwo named exports compare **strings** character-by-character:\n\n- `diffStringsUnified` returns a string.\n- `diffStringsRaw` returns an array of `Diff` objects.\n\nThree named exports compare **arrays of strings** line-by-line:\n\n- `diffLinesUnified` and `diffLinesUnified2` return a string.\n- `diffLinesRaw` returns an array of `Diff` objects.\n\n## Installation\n\nTo add this package as a dependency of a project, run either of the following commands:\n\n- `npm install jest-diff`\n- `yarn add jest-diff`\n\n## Usage of default export\n\nGiven JavaScript **values**, `diffDefault(a, b, options?)` does the following:\n\n1. **serialize** the values as strings using the `pretty-format` package\n2. **compare** the strings line-by-line using the `diff-sequences` package\n3. **format** the changed or common lines using the `chalk` package\n\nTo use this function, write either of the following:\n\n- `const diffDefault = require('jest-diff').default;` in CommonJS modules\n- `import diffDefault from 'jest-diff';` in ECMAScript modules\n\n### Example of default export\n\n```js\nconst a = ['delete', 'common', 'changed from'];\nconst b = ['common', 'changed to', 'insert'];\n\nconst difference = diffDefault(a, b);\n```\n\nThe returned **string** consists of:\n\n- annotation lines: describe the two change indicators with labels, and a blank line\n- comparison lines: similar to “unified” view on GitHub, but `Expected` lines are green, `Received` lines are red, and common lines are dim (by default, see Options)\n\n```diff\n- Expected\n+ Received\n\n  Array [\n-   \"delete\",\n    \"common\",\n-   \"changed from\",\n+   \"changed to\",\n+   \"insert\",\n  ]\n```\n\n### Edge cases of default export\n\nHere are edge cases for the return value:\n\n- `' Comparing two different types of values. …'` if the arguments have **different types** according to the `jest-get-type` package (instances of different classes have the same `'object'` type)\n- `'Compared values have no visual difference.'` if the arguments have either **referential identity** according to `Object.is` method or **same serialization** according to the `pretty-format` package\n- `null` if either argument is a so-called **asymmetric matcher** in Jasmine or Jest\n\n## Usage of diffStringsUnified\n\nGiven **strings**, `diffStringsUnified(a, b, options?)` does the following:\n\n1. **compare** the strings character-by-character using the `diff-sequences` package\n2. **clean up** small (often coincidental) common substrings, also known as chaff\n3. **format** the changed or common lines using the `chalk` package\n\nAlthough the function is mainly for **multiline** strings, it compares any strings.\n\nWrite either of the following:\n\n- `const {diffStringsUnified} = require('jest-diff');` in CommonJS modules\n- `import {diffStringsUnified} from 'jest-diff';` in ECMAScript modules\n\n### Example of diffStringsUnified\n\n```js\nconst a = 'common\\nchanged from';\nconst b = 'common\\nchanged to';\n\nconst difference = diffStringsUnified(a, b);\n```\n\nThe returned **string** consists of:\n\n- annotation lines: describe the two change indicators with labels, and a blank line\n- comparison lines: similar to “unified” view on GitHub, and **changed substrings** have **inverse** foreground and background colors (that is, `from` has white-on-green and `to` has white-on-red, which the following example does not show)\n\n```diff\n- Expected\n+ Received\n\n  common\n- changed from\n+ changed to\n```\n\n### Performance of diffStringsUnified\n\nTo get the benefit of **changed substrings** within the comparison lines, a character-by-character comparison has a higher computational cost (in time and space) than a line-by-line comparison.\n\nIf the input strings can have **arbitrary length**, we recommend that the calling code set a limit, beyond which splits the strings, and then calls `diffLinesUnified` instead. For example, Jest falls back to line-by-line comparison if either string has length greater than 20K characters.\n\n## Usage of diffLinesUnified\n\nGiven **arrays of strings**, `diffLinesUnified(aLines, bLines, options?)` does the following:\n\n1. **compare** the arrays line-by-line using the `diff-sequences` package\n2. **format** the changed or common lines using the `chalk` package\n\nYou might call this function when strings have been split into lines and you do not need to see changed substrings within lines.\n\n### Example of diffLinesUnified\n\n```js\nconst aLines = ['delete', 'common', 'changed from'];\nconst bLines = ['common', 'changed to', 'insert'];\n\nconst difference = diffLinesUnified(aLines, bLines);\n```\n\n```diff\n- Expected\n+ Received\n\n- delete\n  common\n- changed from\n+ changed to\n+ insert\n```\n\n### Edge cases of diffLinesUnified or diffStringsUnified\n\nHere are edge cases for arguments and return values:\n\n- both `a` and `b` are empty strings: no comparison lines\n- only `a` is empty string: all comparison lines have `bColor` and `bIndicator` (see Options)\n- only `b` is empty string: all comparison lines have `aColor` and `aIndicator` (see Options)\n- `a` and `b` are equal non-empty strings: all comparison lines have `commonColor` and `commonIndicator` (see Options)\n\n## Usage of diffLinesUnified2\n\nGiven two **pairs** of arrays of strings, `diffLinesUnified2(aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options?)` does the following:\n\n1. **compare** the pair of `Compare` arrays line-by-line using the `diff-sequences` package\n2. **format** the corresponding lines in the pair of `Display` arrays using the `chalk` package\n\nJest calls this function to consider lines as common instead of changed if the only difference is indentation.\n\nYou might call this function for case insensitive or Unicode equivalence comparison of lines.\n\n### Example of diffLinesUnified2\n\n```js\nimport format from 'pretty-format';\n\nconst a = {\n  text: 'Ignore indentation in serialized object',\n  time: '2019-09-19T12:34:56.000Z',\n  type: 'CREATE_ITEM',\n};\nconst b = {\n  payload: {\n    text: 'Ignore indentation in serialized object',\n    time: '2019-09-19T12:34:56.000Z',\n  },\n  type: 'CREATE_ITEM',\n};\n\nconst difference = diffLinesUnified2(\n  // serialize with indentation to display lines\n  format(a).split('\\n'),\n  format(b).split('\\n'),\n  // serialize without indentation to compare lines\n  format(a, {indent: 0}).split('\\n'),\n  format(b, {indent: 0}).split('\\n'),\n);\n```\n\nThe `text` and `time` properties are common, because their only difference is indentation:\n\n```diff\n- Expected\n+ Received\n\n  Object {\n+   payload: Object {\n      text: 'Ignore indentation in serialized object',\n      time: '2019-09-19T12:34:56.000Z',\n+   },\n    type: 'CREATE_ITEM',\n  }\n```\n\nThe preceding example illustrates why (at least for indentation) it seems more intuitive that the function returns the common line from the `bLinesDisplay` array instead of from the `aLinesDisplay` array.\n\n## Usage of diffStringsRaw\n\nGiven **strings** and a boolean option, `diffStringsRaw(a, b, cleanup)` does the following:\n\n1. **compare** the strings character-by-character using the `diff-sequences` package\n2. optionally **clean up** small (often coincidental) common substrings, also known as chaff\n\nBecause `diffStringsRaw` returns the difference as **data** instead of a string, you can format it as your application requires (for example, enclosed in HTML markup for browser instead of escape sequences for console).\n\nThe returned **array** describes substrings as instances of the `Diff` class, which calling code can access like array tuples:\n\nThe value at index `0` is one of the following:\n\n| value | named export  | description           |\n| ----: | :------------ | :-------------------- |\n|   `0` | `DIFF_EQUAL`  | in `a` and in `b`     |\n|  `-1` | `DIFF_DELETE` | in `a` but not in `b` |\n|   `1` | `DIFF_INSERT` | in `b` but not in `a` |\n\nThe value at index `1` is a substring of `a` or `b` or both.\n\n### Example of diffStringsRaw with cleanup\n\n```js\nconst diffs = diffStringsRaw('changed from', 'changed to', true);\n```\n\n| `i` | `diffs[i][0]` | `diffs[i][1]` |\n| --: | ------------: | :------------ |\n| `0` |           `0` | `'changed '`  |\n| `1` |          `-1` | `'from'`      |\n| `2` |           `1` | `'to'`        |\n\n### Example of diffStringsRaw without cleanup\n\n```js\nconst diffs = diffStringsRaw('changed from', 'changed to', false);\n```\n\n| `i` | `diffs[i][0]` | `diffs[i][1]` |\n| --: | ------------: | :------------ |\n| `0` |           `0` | `'changed '`  |\n| `1` |          `-1` | `'fr'`        |\n| `2` |           `1` | `'t'`         |\n| `3` |           `0` | `'o'`         |\n| `4` |          `-1` | `'m'`         |\n\n### Advanced import for diffStringsRaw\n\nHere are all the named imports that you might need for the `diffStringsRaw` function:\n\n- `const {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, Diff, diffStringsRaw} = require('jest-diff');` in CommonJS modules\n- `import {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, Diff, diffStringsRaw} from 'jest-diff';` in ECMAScript modules\n\nTo write a **formatting** function, you might need the named constants (and `Diff` in TypeScript annotations).\n\nIf you write an application-specific **cleanup** algorithm, then you might need to call the `Diff` constructor:\n\n```js\nconst diffCommon = new Diff(DIFF_EQUAL, 'changed ');\nconst diffDelete = new Diff(DIFF_DELETE, 'from');\nconst diffInsert = new Diff(DIFF_INSERT, 'to');\n```\n\n## Usage of diffLinesRaw\n\nGiven **arrays of strings**, `diffLinesRaw(aLines, bLines)` does the following:\n\n- **compare** the arrays line-by-line using the `diff-sequences` package\n\nBecause `diffLinesRaw` returns the difference as **data** instead of a string, you can format it as your application requires.\n\n### Example of diffLinesRaw\n\n```js\nconst aLines = ['delete', 'common', 'changed from'];\nconst bLines = ['common', 'changed to', 'insert'];\n\nconst diffs = diffLinesRaw(aLines, bLines);\n```\n\n| `i` | `diffs[i][0]` | `diffs[i][1]`    |\n| --: | ------------: | :--------------- |\n| `0` |          `-1` | `'delete'`       |\n| `1` |           `0` | `'common'`       |\n| `2` |          `-1` | `'changed from'` |\n| `3` |           `1` | `'changed to'`   |\n| `4` |           `1` | `'insert'`       |\n\n### Edge case of diffLinesRaw\n\nIf you call `string.split('\\n')` for an empty string:\n\n- the result is `['']` an array which contains an empty string\n- instead of `[]` an empty array\n\nDepending of your application, you might call `diffLinesRaw` with either array.\n\n### Example of split method\n\n```js\nimport {diffLinesRaw} from 'jest-diff';\n\nconst a = 'non-empty string';\nconst b = '';\n\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n| `i` | `diffs[i][0]` | `diffs[i][1]`        |\n| --: | ------------: | :------------------- |\n| `0` |          `-1` | `'non-empty string'` |\n| `1` |           `1` | `''`                 |\n\nWhich you might format as follows:\n\n```diff\n- Expected  - 1\n+ Received  + 1\n\n- non-empty string\n+\n```\n\n### Example of splitLines0 function\n\nFor edge case behavior like the `diffLinesUnified` function, you might define a `splitLines0` function, which given an empty string, returns `[]` an empty array:\n\n```js\nexport const splitLines0 = string =>\n  string.length === 0 ? [] : string.split('\\n');\n```\n\n```js\nimport {diffLinesRaw} from 'jest-diff';\n\nconst a = '';\nconst b = 'line 1\\nline 2\\nline 3';\n\nconst diffs = diffLinesRaw(a.split('\\n'), b.split('\\n'));\n```\n\n| `i` | `diffs[i][0]` | `diffs[i][1]` |\n| --: | ------------: | :------------ |\n| `0` |           `1` | `'line 1'`    |\n| `1` |           `1` | `'line 2'`    |\n| `2` |           `1` | `'line 3'`    |\n\nWhich you might format as follows:\n\n```diff\n- Expected  - 0\n+ Received  + 3\n\n+ line 1\n+ line 2\n+ line 3\n```\n\nIn contrast to the `diffLinesRaw` function, the `diffLinesUnified` and `diffLinesUnified2` functions **automatically** convert array arguments computed by string `split` method, so callers do **not** need a `splitLine0` function.\n\n## Options\n\nThe default options are for the report when an assertion fails from the `expect` package used by Jest.\n\nFor other applications, you can provide an options object as a third argument:\n\n- `diffDefault(a, b, options)`\n- `diffStringsUnified(a, b, options)`\n- `diffLinesUnified(aLines, bLines, options)`\n- `diffLinesUnified2(aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options)`\n\n### Properties of options object\n\n| name                              | default            |\n| :-------------------------------- | :----------------- |\n| `aAnnotation`                     | `'Expected'`       |\n| `aColor`                          | `chalk.green`      |\n| `aIndicator`                      | `'-'`              |\n| `bAnnotation`                     | `'Received'`       |\n| `bColor`                          | `chalk.red`        |\n| `bIndicator`                      | `'+'`              |\n| `changeColor`                     | `chalk.inverse`    |\n| `changeLineTrailingSpaceColor`    | `string => string` |\n| `commonColor`                     | `chalk.dim`        |\n| `commonIndicator`                 | `' '`              |\n| `commonLineTrailingSpaceColor`    | `string => string` |\n| `contextLines`                    | `5`                |\n| `emptyFirstOrLastLinePlaceholder` | `''`               |\n| `expand`                          | `true`             |\n| `includeChangeCounts`             | `false`            |\n| `omitAnnotationLines`             | `false`            |\n| `patchColor`                      | `chalk.yellow`     |\n\nFor more information about the options, see the following examples.\n\n### Example of options for labels\n\nIf the application is code modification, you might replace the labels:\n\n```js\nconst options = {\n  aAnnotation: 'Original',\n  bAnnotation: 'Modified',\n};\n```\n\n```diff\n- Original\n+ Modified\n\n  common\n- changed from\n+ changed to\n```\n\nThe `jest-diff` package does not assume that the 2 labels have equal length.\n\n### Example of options for colors of changed lines\n\nFor consistency with most diff tools, you might exchange the colors:\n\n```ts\nimport chalk = require('chalk');\n\nconst options = {\n  aColor: chalk.red,\n  bColor: chalk.green,\n};\n```\n\n### Example of option for color of changed substrings\n\nAlthough the default inverse of foreground and background colors is hard to beat for changed substrings **within lines**, especially because it highlights spaces, if you want bold font weight on yellow background color:\n\n```ts\nimport chalk = require('chalk');\n\nconst options = {\n  changeColor: chalk.bold.bgYellowBright,\n};\n```\n\n### Example of option to format trailing spaces\n\nBecause the default export does not display substring differences within lines, formatting can help you see when lines differ by the presence or absence of trailing spaces found by `/\\s+$/` regular expression.\n\n- If change lines have a background color, then you can see trailing spaces.\n- If common lines have default dim color, then you cannot see trailing spaces. You might want yellowish background color to see them.\n\n```js\nconst options = {\n  aColor: chalk.rgb(128, 0, 128).bgRgb(255, 215, 255), // magenta\n  bColor: chalk.rgb(0, 95, 0).bgRgb(215, 255, 215), // green\n  commonLineTrailingSpaceColor: chalk.bgYellow,\n};\n```\n\nThe value of a Color option is a function, which given a string, returns a string.\n\nIf you want to replace trailing spaces with middle dot characters:\n\n```js\nconst replaceSpacesWithMiddleDot = string => '·'.repeat(string.length);\n\nconst options = {\n  changeLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\n  commonLineTrailingSpaceColor: replaceSpacesWithMiddleDot,\n};\n```\n\nIf you need the TypeScript type of a Color option:\n\n```ts\nimport {DiffOptionsColor} from 'jest-diff';\n```\n\n### Example of options for no colors\n\nTo store the difference in a file without escape codes for colors, provide an identity function:\n\n```js\nconst noColor = string => string;\n\nconst options = {\n  aColor: noColor,\n  bColor: noColor,\n  changeColor: noColor,\n  commonColor: noColor,\n  patchColor: noColor,\n};\n```\n\n### Example of options for indicators\n\nFor consistency with the `diff` command, you might replace the indicators:\n\n```js\nconst options = {\n  aIndicator: '<',\n  bIndicator: '>',\n};\n```\n\nThe `jest-diff` package assumes (but does not enforce) that the 3 indicators have equal length.\n\n### Example of options to limit common lines\n\nBy default, the output includes all common lines.\n\nTo emphasize the changes, you might limit the number of common “context” lines:\n\n```js\nconst options = {\n  contextLines: 1,\n  expand: false,\n};\n```\n\nA patch mark like `@@ -12,7 +12,9 @@` accounts for omitted common lines.\n\n### Example of option for color of patch marks\n\nIf you want patch marks to have the same dim color as common lines:\n\n```ts\nimport chalk = require('chalk');\n\nconst options = {\n  expand: false,\n  patchColor: chalk.dim,\n};\n```\n\n### Example of option to include change counts\n\nTo display the number of changed lines at the right of annotation lines:\n\n```js\nconst a = ['common', 'changed from'];\nconst b = ['common', 'changed to', 'insert'];\n\nconst options = {\n  includeChangeCounts: true,\n};\n\nconst difference = diffDefault(a, b, options);\n```\n\n```diff\n- Expected  - 1\n+ Received  + 2\n\n  Array [\n    \"common\",\n-   \"changed from\",\n+   \"changed to\",\n+   \"insert\",\n  ]\n```\n\n### Example of option to omit annotation lines\n\nTo display only the comparison lines:\n\n```js\nconst a = 'common\\nchanged from';\nconst b = 'common\\nchanged to';\n\nconst options = {\n  omitAnnotationLines: true,\n};\n\nconst difference = diffStringsUnified(a, b, options);\n```\n\n```diff\n  common\n- changed from\n+ changed to\n```\n\n### Example of option for empty first or last lines\n\nIf the **first** or **last** comparison line is **empty**, because the content is empty and the indicator is a space, you might not notice it.\n\nThe replacement option is a string whose default value is `''` empty string.\n\nBecause Jest trims the report when a matcher fails, it deletes an empty last line.\n\nTherefore, Jest uses as placeholder the downwards arrow with corner leftwards:\n\n```js\nconst options = {\n  emptyFirstOrLastLinePlaceholder: '↵', // U+21B5\n};\n```\n\nIf a content line is empty, then the corresponding comparison line is automatically trimmed to remove the margin space (represented as a middle dot below) for the default indicators:\n\n|         Indicator | untrimmed | trimmed |\n| ----------------: | :-------- | :------ |\n|      `aIndicator` | `'-·'`    | `'-'`   |\n|      `bIndicator` | `'+·'`    | `'+'`   |\n| `commonIndicator` | `' ·'`    | `''`    |\n",
    "description": "Display differences clearly so people can review changes confidently.",
    "licenseText": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-26.6.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/jest-diff/-/jest-diff-26.6.2.tgz",
    "hash": "",
    "integrity": "sha512-6m+9Z3Gv9wN0WFVasqjCL/06+EFCMTqDEUl/b87HYK2rAPTyfz4ZIuSlPhY51PIQRWx5TaxeF1qmXKe9gfN3sA==",
    "registry": "npm",
    "packageName": "jest-diff",
    "cacheIntegrity": "sha512-6m+9Z3Gv9wN0WFVasqjCL/06+EFCMTqDEUl/b87HYK2rAPTyfz4ZIuSlPhY51PIQRWx5TaxeF1qmXKe9gfN3sA== sha1-GqdGi1LDpo19XF/c381eSb0WQ5Q="
  },
  "registry": "npm",
  "hash": "ea6fbd6771aff7037458555ab2a8c22ffd3af84142313a8311497f6fcec760adab00f4f27f3e1922e4a53e1639d4f210456c794dac5e175aa65ca7bd81f377b0"
}