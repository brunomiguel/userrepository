{
  "manifest": {
    "name": "d3-color",
    "version": "2.0.0",
    "description": "Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).",
    "keywords": [
      "d3",
      "d3-module",
      "color",
      "rgb",
      "hsl",
      "lab",
      "hcl",
      "lch",
      "cubehelix"
    ],
    "homepage": "https://d3js.org/d3-color/",
    "license": "BSD-3-Clause",
    "author": {
      "name": "Mike Bostock",
      "url": "http://bost.ocks.org/mike"
    },
    "main": "dist/d3-color.js",
    "unpkg": "dist/d3-color.min.js",
    "jsdelivr": "dist/d3-color.min.js",
    "module": "src/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/d3/d3-color.git"
    },
    "files": [
      "dist/**/*.js",
      "src/**/*.js"
    ],
    "scripts": {
      "pretest": "rollup -c",
      "test": "tape 'test/**/*-test.js' && eslint src test",
      "prepublishOnly": "rm -rf dist && yarn test",
      "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../${npm_package_name}/dist/${npm_package_name}.js ${npm_package_name}.v${npm_package_version%%.*}.js && cp ../${npm_package_name}/dist/${npm_package_name}.min.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git add ${npm_package_name}.v${npm_package_version%%.*}.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git commit -m \"${npm_package_name} ${npm_package_version}\" && git push && cd - && zip -j dist/${npm_package_name}.zip -- LICENSE README.md dist/${npm_package_name}.js dist/${npm_package_name}.min.js"
    },
    "sideEffects": false,
    "devDependencies": {
      "eslint": "6",
      "rollup": "1",
      "rollup-plugin-terser": "5",
      "tape": "4"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-d3-color-2.0.0-8d625cab42ed9b8f601a1760a389f7ea9189d62e-integrity/node_modules/d3-color/package.json",
    "readmeFilename": "README.md",
    "readme": "# d3-color\n\nEven though your browser understands a lot about colors, it doesn’t offer much help in manipulating colors through JavaScript. The d3-color module therefore provides representations for various color spaces, allowing specification, conversion and manipulation. (Also see [d3-interpolate](https://github.com/d3/d3-interpolate) for color interpolation.)\n\nFor example, take the color named “steelblue”:\n\n```js\nvar c = d3.color(\"steelblue\"); // {r: 70, g: 130, b: 180, opacity: 1}\n```\n\nLet’s try converting it to HSL:\n\n```js\nvar c = d3.hsl(\"steelblue\"); // {h: 207.27…, s: 0.44, l: 0.4902…, opacity: 1}\n```\n\nNow rotate the hue by 90°, bump up the saturation, and format as a string for CSS:\n\n```js\nc.h += 90;\nc.s += 0.2;\nc + \"\"; // rgb(198, 45, 205)\n```\n\nTo fade the color slightly:\n\n```js\nc.opacity = 0.8;\nc + \"\"; // rgba(198, 45, 205, 0.8)\n```\n\nIn addition to the ubiquitous and machine-friendly [RGB](#rgb) and [HSL](#hsl) color space, d3-color supports color spaces that are designed for humans:\n\n* [CIELAB](#lab) (*a.k.a.* “Lab”)\n* [CIELCh<sub>ab</sub>](#lch) (*a.k.a.* “LCh” or “HCL”)\n* Dave Green’s [Cubehelix](#cubehelix)\n\nCubehelix features monotonic lightness, while CIELAB and its polar form CIELCh<sub>ab</sub> are perceptually uniform.\n\n## Extensions\n\nFor additional color spaces, see:\n\n* [d3-cam16](https://github.com/d3/d3-cam16)\n* [d3-cam02](https://github.com/connorgr/d3-cam02)\n* [d3-hsv](https://github.com/d3/d3-hsv)\n* [d3-hcg](https://github.com/d3/d3-hcg)\n* [d3-hsluv](https://github.com/petulla/d3-hsluv)\n\nTo measure color differences, see:\n\n* [d3-color-difference](https://github.com/Evercoder/d3-color-difference)\n\n## Installing\n\nIf you use NPM, `npm install d3-color`. Otherwise, download the [latest release](https://github.com/d3/d3-color/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-color.v2.min.js) or as part of [D3](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-color.v2.min.js\"></script>\n<script>\n\nvar steelblue = d3.rgb(\"steelblue\");\n\n</script>\n```\n\n[Try d3-color in your browser.](https://observablehq.com/collection/@d3/d3-color)\n\n## API Reference\n\n<a name=\"color\" href=\"#color\">#</a> d3.<b>color</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nParses the specified [CSS Color Module Level 3](http://www.w3.org/TR/css3-color/#colorunits) *specifier* string, returning an [RGB](#rgb) or [HSL](#hsl) color, along with [CSS Color Module Level 4 hex](https://www.w3.org/TR/css-color-4/#hex-notation) *specifier* strings. If the specifier was not valid, null is returned. Some examples:\n\n* `rgb(255, 255, 255)`\n* `rgb(10%, 20%, 30%)`\n* `rgba(255, 255, 255, 0.4)`\n* `rgba(10%, 20%, 30%, 0.4)`\n* `hsl(120, 50%, 20%)`\n* `hsla(120, 50%, 20%, 0.4)`\n* `#ffeeaa`\n* `#fea`\n* `#ffeeaa22`\n* `#fea2`\n* `steelblue`\n\nThe list of supported [named colors](http://www.w3.org/TR/SVG/types.html#ColorKeywords) is specified by CSS.\n\nNote: this function may also be used with `instanceof` to test if an object is a color instance. The same is true of color subclasses, allowing you to test whether a color is in a particular color space.\n\n<a name=\"color_opacity\" href=\"#color_opacity\">#</a> *color*.<b>opacity</b>\n\nThis color’s opacity, typically in the range [0, 1].\n\n<a name=\"color_rgb\" href=\"#color_rgb\">#</a> *color*.<b>rgb</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns the [RGB equivalent](#rgb) of this color. For RGB colors, that’s `this`.\n\n<a name=\"color_copy\" href=\"#color_copy\">#</a> <i>color</i>.<b>copy</b>([<i>values</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a copy of this color. If *values* is specified, any enumerable own properties of *values* are assigned to the new returned color. For example, to derive a copy of a *color* with opacity 0.5, say\n\n```js\ncolor.copy({opacity: 0.5})\n```\n\n<a name=\"color_brighter\" href=\"#color_brighter\">#</a> *color*.<b>brighter</b>([<i>k</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a brighter copy of this color. If *k* is specified, it controls how much brighter the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n<a name=\"color_darker\" href=\"#color_darker\">#</a> *color*.<b>darker</b>([<i>k</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a darker copy of this color. If *k* is specified, it controls how much darker the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n<a name=\"color_displayable\" href=\"#color_displayable\">#</a> *color*.<b>displayable</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns true if and only if the color is displayable on standard hardware. For example, this returns false for an RGB color if any channel value is less than zero or greater than 255 when rounded, or if the opacity is not in the range [0, 1].\n\n<a name=\"color_formatHex\" href=\"#color_formatHex\">#</a> *color*.<b>formatHex</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a hexadecimal string representing this color in RGB space, such as `#f7eaba`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.\n\n<a name=\"color_formatHsl\" href=\"#color_formatHsl\">#</a> *color*.<b>formatHsl</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a string representing this color according to the [CSS Color Module Level 3 specification](https://www.w3.org/TR/css-color-3/#hsl-color), such as `hsl(257, 50%, 80%)` or `hsla(257, 50%, 80%, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping S and L channel values to the interval [0, 100].\n\n<a name=\"color_formatRgb\" href=\"#color_formatRgb\">#</a> *color*.<b>formatRgb</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nReturns a string representing this color according to the [CSS Object Model specification](https://drafts.csswg.org/cssom/#serialize-a-css-component-value), such as `rgb(247, 234, 186)` or `rgba(247, 234, 186, 0.2)`. If this color is not displayable, a suitable displayable color is returned instead by clamping RGB channel values to the interval [0, 255].\n\n<a name=\"color_toString\" href=\"#color_toString\">#</a> *color*.<b>toString</b>() [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")\n\nAn alias for [*color*.formatRgb](#color_formatRgb).\n\n<a name=\"rgb\" href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>r</i>, <i>g</i>, <i>b</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")<br>\n<a href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>specifier</i>)<br>\n<a href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>color</i>)<br>\n\nConstructs a new [RGB](https://en.wikipedia.org/wiki/RGB_color_model) color. The channel values are exposed as `r`, `g` and `b` properties on the returned instance. Use the [RGB color picker](http://bl.ocks.org/mbostock/78d64ca7ef013b4dcf8f) to explore this color space.\n\nIf *r*, *g* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the RGB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb). Note that unlike [*color*.rgb](#color_rgb) this method *always* returns a new instance, even if *color* is already an RGB color.\n\n<a name=\"hsl\" href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>h</i>, <i>s</i>, <i>l</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/color.js \"Source\")<br>\n<a href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>specifier</i>)<br>\n<a href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>color</i>)<br>\n\nConstructs a new [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [HSL color picker](http://bl.ocks.org/mbostock/debaad4fcce9bcee14cf) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSL color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to HSL. (Colors already in the HSL color space skip the conversion to RGB.)\n\n<a name=\"lab\" href=\"#lab\">#</a> d3.<b>lab</b>(<i>l</i>, <i>a</i>, <i>b</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/lab.js \"Source\")<br>\n<a href=\"#lab\">#</a> d3.<b>lab</b>(<i>specifier</i>)<br>\n<a href=\"#lab\">#</a> d3.<b>lab</b>(<i>color</i>)<br>\n\nConstructs a new [CIELAB](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) color. The channel values are exposed as `l`, `a` and `b` properties on the returned instance. Use the [CIELAB color picker](http://bl.ocks.org/mbostock/9f37cc207c0cb166921b) to explore this color space. The value of *l* is typically in the range [0, 100], while *a* and *b* are typically in [-160, +160].\n\nIf *l*, *a* and *b* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the CIELAB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELAB. (Colors already in the CIELAB color space skip the conversion to RGB, and colors in the HCL color space are converted directly to CIELAB.)\n\n<a name=\"gray\" href=\"#gray\">#</a> d3.<b>gray</b>(<i>l</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/lab.js \"Source\")<br>\n\nConstructs a new [CIELAB](#lab) color with the specified *l* value and *a* = *b* = 0.\n\n<a name=\"hcl\" href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>h</i>, <i>c</i>, <i>l</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/lab.js \"Source\")<br>\n<a href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>specifier</i>)<br>\n<a href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>color</i>)<br>\n\nEquivalent to [d3.lch](#lch), but with reversed argument order.\n\n<a name=\"lch\" href=\"#lch\">#</a> d3.<b>lch</b>(<i>l</i>, <i>c</i>, <i>h</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/lab.js \"Source\")<br>\n<a href=\"#lch\">#</a> d3.<b>lch</b>(<i>specifier</i>)<br>\n<a href=\"#lch\">#</a> d3.<b>lch</b>(<i>color</i>)<br>\n\nConstructs a new [CIELCh<sub>ab</sub>](https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC) color. The channel values are exposed as `l`, `c` and `h` properties on the returned instance. Use the [CIELCh<sub>ab</sub> color picker](http://bl.ocks.org/mbostock/3e115519a1b495e0bd95) to explore this color space. The value of *l* is typically in the range [0, 100], *c* is typically in [0, 230], and *h* is typically in [0, 360).\n\nIf *l*, *c*, and *h* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to CIELCh<sub>ab</sub> color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to CIELCh<sub>ab</sub>. (Colors already in CIELCh<sub>ab</sub> color space skip the conversion to RGB, and colors in CIELAB color space are converted directly to CIELCh<sub>ab</sub>.)\n\n<a name=\"cubehelix\" href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>h</i>, <i>s</i>, <i>l</i>[, <i>opacity</i>]) [<>](https://github.com/d3/d3-color/blob/master/src/cubehelix.js \"Source\")<br>\n<a href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>specifier</i>)<br>\n<a href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>color</i>)<br>\n\nConstructs a new [Cubehelix](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [Cubehelix color picker](http://bl.ocks.org/mbostock/ba8d75e45794c27168b5) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color; an *opacity* may also be specified. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the Cubehelix color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to Cubehelix. (Colors already in the Cubehelix color space skip the conversion to RGB.)\n",
    "licenseText": "Copyright 2010-2016 Mike Bostock\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the author nor the names of contributors may be used to\n  endorse or promote products derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/d3-color/-/d3-color-2.0.0.tgz#8d625cab42ed9b8f601a1760a389f7ea9189d62e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/d3-color/-/d3-color-2.0.0.tgz",
    "hash": "8d625cab42ed9b8f601a1760a389f7ea9189d62e",
    "integrity": "sha512-SPXi0TSKPD4g9tw0NMZFnR95XVgUZiBH+uUTqQuDu1OsE2zomHU7ho0FISciaPvosimixwHFl3WHLGabv6dDgQ==",
    "registry": "npm",
    "packageName": "d3-color",
    "cacheIntegrity": "sha512-SPXi0TSKPD4g9tw0NMZFnR95XVgUZiBH+uUTqQuDu1OsE2zomHU7ho0FISciaPvosimixwHFl3WHLGabv6dDgQ== sha1-jWJcq0Ltm49gGhdgo4n36pGJ1i4="
  },
  "registry": "npm",
  "hash": "8d625cab42ed9b8f601a1760a389f7ea9189d62e"
}