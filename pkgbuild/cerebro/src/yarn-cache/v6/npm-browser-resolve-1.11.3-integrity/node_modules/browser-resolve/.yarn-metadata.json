{
  "manifest": {
    "name": "browser-resolve",
    "version": "1.11.3",
    "description": "resolve which handles browser field support in package.json",
    "main": "index.js",
    "files": [
      "index.js",
      "empty.js"
    ],
    "scripts": {
      "test": "mocha --reporter list test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/shtylman/node-browser-resolve.git"
    },
    "keywords": [
      "resolve",
      "browser"
    ],
    "author": {
      "name": "Roman Shtylman",
      "email": "shtylman@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "resolve": "1.1.7"
    },
    "devDependencies": {
      "mocha": "1.14.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-browser-resolve-1.11.3-integrity/node_modules/browser-resolve/package.json",
    "readmeFilename": "README.md",
    "readme": "# browser-resolve [![Build Status](https://travis-ci.org/defunctzombie/node-browser-resolve.png?branch=master)](https://travis-ci.org/defunctzombie/node-browser-resolve)\n\nnode.js resolve algorithm with [browser field](https://github.com/defunctzombie/package-browser-field-spec) support.\n\n## api\n\n### resolve(id, opts={}, cb)\n\nResolve a module path and call `cb(err, path [, pkg])`\n\nOptions:\n\n* `basedir` - directory to begin resolving from\n* `browser` - the 'browser' property to use from package.json (defaults to 'browser')\n* `filename` - the calling filename where the `require()` call originated (in the source)\n* `modules` - object with module id/name -> path mappings to consult before doing manual resolution (use to provide core modules)\n* `packageFilter` - transform the parsed `package.json` contents before looking at the `main` field\n* `paths` - `require.paths` array to use if nothing is found on the normal `node_modules` recursive walk\n\nOptions supported by [node-resolve](https://github.com/substack/node-resolve#resolveid-opts-cb) can be used.\n\n### resolve.sync(id, opts={})\n\nSame as the async resolve, just uses sync methods.\n\nOptions supported by [node-resolve](https://github.com/substack/node-resolve#resolvesyncid-opts) `sync` can be used.\n\n## basic usage\n\nyou can resolve files like `require.resolve()`:\n``` js\nvar resolve = require('browser-resolve');\nresolve('../', { filename: __filename }, function(err, path) {\n    console.log(path);\n});\n```\n\n```\n$ node example/resolve.js\n/home/substack/projects/node-browser-resolve/index.js\n```\n\n## core modules\n\nBy default, core modules (http, dgram, etc) will return their same name as the path. If you want to have specific paths returned, specify a `modules` property in the options object.\n\n``` js\nvar shims = {\n    http: '/your/path/to/http.js'\n};\n\nvar resolve = require('browser-resolve');\nresolve('fs', { modules: shims }, function(err, path) {\n    console.log(path);\n});\n```\n\n```\n$ node example/builtin.js\n/home/substack/projects/node-browser-resolve/builtin/fs.js\n```\n\n## browser field\nbrowser-specific versions of modules\n\n``` js\n{\n  \"name\": \"custom\",\n  \"version\": \"0.0.0\",\n  \"browser\": {\n    \"./main.js\": \"custom.js\"\n  },\n  \"chromeapp\": {\n    \"./main.js\": \"custom-chromeapp.js\"\n  }\n}\n```\n\n``` js\nvar resolve = require('browser-resolve');\nvar parent = { filename: __dirname + '/custom/file.js' /*, browser: 'chromeapp' */ };\nresolve('./main.js', parent, function(err, path) {\n    console.log(path);\n});\n```\n\n```\n$ node example/custom.js\n/home/substack/projects/node-browser-resolve/example/custom/custom.js\n```\n\n## skip\n\nYou can skip over dependencies by setting a\n[browser field](https://gist.github.com/defunctzombie/4339901)\nvalue to `false`:\n\n``` json\n{\n  \"name\": \"skip\",\n  \"version\": \"0.0.0\",\n  \"browser\": {\n    \"tar\": false\n  }\n}\n```\n\nThis is handy if you have code like:\n\n``` js\nvar tar = require('tar');\n\nexports.add = function (a, b) {\n    return a + b;\n};\n\nexports.parse = function () {\n    return tar.Parse();\n};\n```\n\nso that `require('tar')` will just return `{}` in the browser because you don't\nintend to support the `.parse()` export in a browser environment.\n\n``` js\nvar resolve = require('browser-resolve');\nvar parent = { filename: __dirname + '/skip/main.js' };\nresolve('tar', parent, function(err, path) {\n    console.log(path);\n});\n```\n\n```\n$ node example/skip.js\n/home/substack/projects/node-browser-resolve/empty.js\n```\n\n# license\n\nMIT\n\n# upgrade notes\n\nPrior to v1.x this library provided shims for node core modules. These have since been removed. If you want to have alternative core modules provided, use the `modules` option when calling resolve.\n\nThis was done to allow package managers to choose which shims they want to use without browser-resolve being the central point of update.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013-2015 Roman Shtylman <shtylman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/browser-resolve/-/browser-resolve-1.11.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/browser-resolve/-/browser-resolve-1.11.3.tgz",
    "hash": "",
    "integrity": "sha512-exDi1BYWB/6raKHmDTCicQfTkqwN5fioMFV4j8BsfMU4R2DK/QfZfK7kOVkmWCNANf0snkBzqGqAJBao9gZMdQ==",
    "registry": "npm",
    "packageName": "browser-resolve",
    "cacheIntegrity": "sha512-exDi1BYWB/6raKHmDTCicQfTkqwN5fioMFV4j8BsfMU4R2DK/QfZfK7kOVkmWCNANf0snkBzqGqAJBao9gZMdQ== sha1-m3y7PQ9RDky4a9vXlhJNKLWJCvY="
  },
  "registry": "npm",
  "hash": "7b10e2d4161607feab68a1e60d30a27107d392ac0de5f8a83055788fc06c7cc5384760cafd07d97caee439592658234035fd2c9e4073a86a802416a8f6064c75"
}