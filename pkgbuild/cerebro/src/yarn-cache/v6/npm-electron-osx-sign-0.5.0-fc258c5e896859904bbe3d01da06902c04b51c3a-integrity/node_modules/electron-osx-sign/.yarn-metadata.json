{
  "manifest": {
    "name": "electron-osx-sign",
    "version": "0.5.0",
    "description": "Codesign Electron macOS apps",
    "main": "index.js",
    "bin": {
      "electron-osx-flat": "bin/electron-osx-flat.js",
      "electron-osx-sign": "bin/electron-osx-sign.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/electron-userland/electron-osx-sign.git"
    },
    "author": {
      "name": "sethlu"
    },
    "license": "BSD-2-Clause",
    "bugs": {
      "url": "https://github.com/electron-userland/electron-osx-sign/issues"
    },
    "homepage": "https://github.com/electron-userland/electron-osx-sign",
    "dependencies": {
      "bluebird": "^3.5.0",
      "compare-version": "^0.1.2",
      "debug": "^2.6.8",
      "isbinaryfile": "^3.0.2",
      "minimist": "^1.2.0",
      "plist": "^3.0.1"
    },
    "devDependencies": {
      "electron-download": "^4.1.0",
      "eslint": "^4.2.0",
      "eslint-config-eslint": "^4.0.0",
      "extract-zip": "^1.6.5",
      "mkdirp": "^0.5.1",
      "rimraf": "^2.6.1",
      "run-series": "^1.1.4",
      "run-waterfall": "^1.1.3",
      "standard": "^10.0.2",
      "tape": "^4.7.0"
    },
    "scripts": {
      "code-standard": "standard",
      "pretest": "rimraf test/work",
      "test": "standard && tape test"
    },
    "standard": {
      "ignore": [
        "test/work"
      ]
    },
    "engines": {
      "node": ">=4.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-osx-sign-0.5.0-fc258c5e896859904bbe3d01da06902c04b51c3a-integrity/node_modules/electron-osx-sign/package.json",
    "readmeFilename": "README.md",
    "readme": "# electron-osx-sign [![npm][npm_img]][npm_url] [![Build Status][circleci_img]][circleci_url]\n\nCodesign Electron macOS apps\n\n## About\n\n[`electron-osx-sign`][electron-osx-sign] minimizes the extra work needed to eventually prepare your apps for shipping, providing the most basic tools and assets. Note that the bare necessities here are sufficient for enabling app sandbox, yet other configurations for network access etc. require additional work.\n\nCheck out [`electron-osx-sign` guide](https://mintkit.net/electron-userland/electron-osx-sign/guide/) for suggestions on setting up your environment and workflow for distribution or development.\n\nPlease visit our [wiki](https://github.com/electron-userland/electron-osx-sign/wiki) for walk-throughs, notes and [frequently asked questions](https://github.com/electron-userland/electron-osx-sign/wiki/FAQ) from past projects shipped with [`electron-packager`][electron-packager] and [`electron-osx-sign`][electron-osx-sign].\n\n*NB: Since [`electron-osx-sign`][electron-osx-sign] injects the entry `com.apple.security.application-groups` into the entitlements file as part of the pre-signing process, this would reportedly limit app transfer on iTunes Connect (see [#150](https://github.com/electron-userland/electron-osx-sign/issues/150)). However, opting out entitlements automation `opts['pre-auto-entitlements'] === false` may result in worse graphics performance.*\n\n*The signing procedure implemented in this package is based on what described in [Mac App Store Submission Guide](https://github.com/atom/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md).*\n\n### [Electron]\n\nIt is worth noting as well that starting from [Electron] v1.1.1, a new mechanism was introduced to allow IPC in App Sandbox (see [electron#5601](https://github.com/electron/electron/pull/5601)); wish to have full support of legacy Electron versions, please utilize `opts.version`, which option brings less hassle with making default settings among Electron builds.\n\nWe are trying to keep updated to the latest [Electron] specs; please [file us an issue](https://github.com/electron-userland/electron-osx-sign/issues/new) if having any suggestions or experiencing difficulties code signing your products.\n\n### An [OPEN Open Source Project](http://openopensource.org/)\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\n### Collaborators\n\nThanks to [seanchas116](https://github.com/seanchas116), [jasonhinkle](https://github.com/jasonhinkle), and [develar](https://github.com/develar) for improving the usability of this project implementation.\n\n## Installation\n\n```sh\n# For use in npm scripts\nnpm install --save electron-osx-sign\n```\n\n```sh\n# For use from CLI\nnpm install -g electron-osx-sign\n```\n\n*Note: `electron-osx-sign` is a dependency of `electron-packager` as of 6.0.0 for signing apps on macOS. However, feel free to install this package globally for more customization beyond specifying identity and entitlements.*\n\n## Usage\n\n### electron-osx-sign\n\n#### From the Command Line\n\n```sh\nelectron-osx-sign app [embedded-binary ...] [options ...]\n```\n\n##### Examples\n\nSince `electron-osx-sign` adds the entry `com.apple.developer.team-identifier` to a temporary copy of the specified entitlements file (with the default option `--pre-auto-entitlements`) distribution builds can no longer be run directly. To run the app codesigned for distribution locally after codesigning, you may manually add `ElectronTeamID` in your `Info.plist` and `com.apple.security.application-groups` in the entitlements file, and provide the flag `--no-pre-auto-entitlements` for `electron-osx-sign` to avoid this extra bit. Note that \"certain features are only allowed across apps whose team-identifier value match\" ([Technical Note TN2415](https://developer.apple.com/library/content/technotes/tn2415/_index.html#//apple_ref/doc/uid/DTS40016427-CH1-ENTITLEMENTSLIST)).\n\nThe examples below assume that `--pre-auto-entitlements` is enabled.\n\n- To sign a distribution version by default:\n  ```sh\n  electron-osx-sign path/to/my.app\n  ```\n  For distribution in the Mac App Store: Have the provisioning profile for distribution placed in the current working directory and the signing identity installed in the default keychain. *The app is not expected to run after codesigning since there is no provisioned device, and it is intended only for submission to iTunes Connect.*\n  For distribution outside the Mac App Store: Have the signing identity for distribution installed in the default keychain and optionally place the provisioning profile in the current working directory. By default App Sandbox is not enabled. *The app should run on all devices.*\n\n- To sign development version:\n  ```sh\n  electron-osx-sign path/to/my.app --type=development\n  ```\n  For testing Mac App Store builds: Have the provisioning profile for development placed in the current working directory and the signing identity installed in the default keychain. *The app will only run on provisioned devices.*\n  For testing apps for distribution outside the Mac App Store, have the signing identity for development installed in the default keychain and optionally the provisioning profile placed in the current working directory. *The app will only run on provisioned devices.* However, you may prefer to just go with signing a distribution version because the app is expected to launch properly after codesigned.\n\n- It is recommended to place the provisioning profile(s) under the working directory for `electron-osx-sign` to pick up automatically; however, to specify provisioning profile to be embedded explicitly:\n  ```sh\n  electron-osx-sign path/to/my.app --provisioning-profile=path/to/my.provisionprofile\n  ```\n\n- To specify the entitlements file:\n  ```sh\n  electron-osx-sign path/to/my.app --entitlements=path/to/my.entitlements\n  ```\n\n- It is recommended to make use of `--version` while signing legacy versions of Electron:\n  ```sh\n  electron-osx-sign path/to/my.app --version=0.34.0\n  ```\n\nRun `electron-osx-sign --help` or see [electron-osx-sign-usage.txt](https://github.com/electron-userland/electron-osx-sign/blob/master/bin/electron-osx-sign-usage.txt) for CLI-specific options.\n\n#### From the API\n\n```javascript\nvar sign = require('electron-osx-sign')\nsign(opts[, function done (err) {}])\n```\n\nExample:\n\n```javascript\nvar sign = require('electron-osx-sign')\nsign({\n  app: 'path/to/my.app'\n}, function done (err) {\n  if (err) {\n    // Handle the error\n    return;\n  }\n  // Application signed\n})\n```\n\nFrom release v0.4.0-beta, [Bluebird] promises are introduced for better async method calls; the following is also available for use.\n\n```javascript\nvar signAsync = require('electron-osx-sign').signAsync\nsignAsync(opts)\n  [.then(function () {})]\n  [.catch(function (err) {})]\n```\n\nExample:\n\n```javascript\nvar signAsync = require('electron-osx-sign').signAsync\nsignAsync({\n  app: 'path/to/my.app'\n})\n  .then(function () {\n    // Application signed\n  })\n  .catch(function (err) {\n    // Handle the error\n  })\n```\n\n###### opts - Options\n\n**Required**\n\n`app` - *String*\n\nPath to the application package.\nNeeds file extension `.app`.\n\n**Optional**\n\n`binaries` - *Array*\n\nPath to additional binaries that will be signed along with built-ins of Electron.\nDefault to `undefined`.\n\n`entitlements` - *String*\n\nPath to entitlements file for signing the app.\nDefault to built-in entitlements file, Sandbox enabled for Mac App Store platform.\nSee [default.entitlements.mas.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist) or [default.entitlements.darwin.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.plist) with respect to your platform.\n\n`entitlements-inherit` - *String*\n\nPath to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. *This option only applies when signing with entitlements.*\nSee [default.entitlements.mas.inherit.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist) or [default.entitlements.darwin.inherit.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist) with respect to your platform.\n\n`entitlements-loginhelper` - *String*\n\nPath to login helper entitlement file. When using App Sandbox, the inherited entitlement should not be used since this is a standalone executable. *This option only applies when signing with entitlements.*\nDefault to the same entitlements file used for signing the app bundle.\n\n`entitlementsForFile` - *Function*\n\nFunction that receives the path to a file and the current codesign arguments as parameters.  If you wish to override the entitlements used for this file path this function should return the absolute path to a different entitlements file.\n\n**Note:** Only available via the JS API\n\n`gatekeeper-assess` - *Boolean*\n\nFlag to enable/disable Gatekeeper assessment after signing the app. Disabling it is useful for signing with self-signed certificates.\nGatekeeper assessment is enabled by default on `darwin` platform.\nDefault to `true`.\n\n`hardenedRuntime` or `hardened-runtime` - *Boolean*\n\nFlag to enable the Mojave hardened runtime when signing the app.  Disabled by default, requires Xcode >= 10 and\nmacOS >= 10.13.6.\n\n`identity` - *String*\n\nName of certificate to use when signing.\nDefault to be selected with respect to `provisioning-profile` and `platform` from `keychain` or keychain by system default.\n\nSigning platform `mas` will look for `3rd Party Mac Developer Application: * (*)`, and platform `darwin` will look for `Developer ID Application: * (*)` by default.\n\n`identity-validation` - *Boolean*\n\nFlag to enable/disable validation for the signing identity. If enabled, the `identity` provided will be validated in the `keychain` specified.\nDefault to `true`.\n\n`keychain` - *String*\n\nThe keychain name.\nDefault to system default keychain.\n\n`ignore` - *RegExp|Function|Array.<(RegExp|Function)>*\n\nRegex, function or an array of regex's and functions that signal skipping signing a file.\nElements of other types are treated as `RegExp`.\nDefault to `undefined`.\n\n`platform` - *String*\n\nBuild platform of Electron.\nAllowed values: `darwin`, `mas`.\nDefault to auto detect by presence of `Squirrel.framework` within the application bundle.\n\n`pre-auto-entitlements` - *Boolean*\n\nFlag to enable/disable automation of `com.apple.security.application-groups` in entitlements file and update `Info.plist` with `ElectronTeamID`.\nDefault to `true`.\n\n`pre-embed-provisioning-profile` - *Boolean*\n\nFlag to enable/disable embedding of provisioning profile in the current working directory.\nDefault to `true`.\n\n`provisioning-profile` - *String*\n\nPath to provisioning profile.\n\n`requirements` - *String*\n\nSpecify the criteria that you recommend to be used to evaluate the code signature.\nSee more info from https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html\nDefault to `undefined`.\n\n`restrict` - *Boolean*\n\n**To be deprecated, see `signature-flags`.**\nRestrict dyld loading. See doc about this [code signature flag](https://developer.apple.com/documentation/security/seccodesignatureflags/kseccodesignaturerestrict?language=objc) for more details. Disabled by default.\n\n`signature-flags` - *String*\nComma separated string or array for [code signature flag](https://developer.apple.com/documentation/security/seccodesignatureflags?language=objc). Default to `undefined`.\n\n`signature-size` - *Number*\nProvide a value to be passed to `codesign` along with the `--signature-size` flag, to work around the *signature too large to embed* issue. A value of `12000` should do it - see the [FAQ](https://github.com/electron/electron-osx-sign/wiki/FAQ) for details. Default to `undefined`.\n\n`strict-verify` - *Boolean|String|Array.<String>*\n\nFlag to enable/disable `--strict` flag when verifying the signed application bundle.\nIf provided as a string, each component should be separated with comma (`,`).\nIf provided as an array, each item should be a string corresponding to a component.\nDefault to `true`.\n\n`timestamp` - *String*\n\nSpecify the URL of the timestamp authority server, default to server provided by Apple. Please note that this default server may not support signatures not furnished by Apple.\nDisable the timestamp service with `none`.\n\n`type` - *String*\n\nSpecify whether to sign app for development or for distribution.\nAllowed values: `development`, `distribution`.\nDefault to `distribution`.\n\n`version` - *String*\n\nBuild version of Electron.\nValues may be like: `1.1.1`, `1.2.0`.\nDefault to latest Electron version.\n\nIt is recommended to utilize this option for best support of specific Electron versions. This may trigger pre/post operations for signing: For example, automation of setting `com.apple.security.application-groups` in entitlements file and of updating `Info.plist` with `ElectronTeamID` is enabled for all versions starting from `1.1.1`; set `pre-auto-entitlements` option to `false` to disable this feature.\n\n###### cb - Callback\n\n`err` - *Error*\n\n### electron-osx-flat\n\n#### From the Command Line\n\n```sh\nelectron-osx-flat app [options ...]\n```\n\nExample:\n\n```sh\nelectron-osx-flat path/to/my.app\n```\n\nRun `electron-osx-flat --help` or see [electron-osx-flat-usage.txt](https://github.com/electron-userland/electron-osx-sign/blob/master/bin/electron-osx-flat-usage.txt) for CLI-specific options.\n\n#### From the API\n\n```javascript\nvar flat = require('electron-osx-sign').flat\nflat(opts[, function done (err) {}])\n```\n\nExample:\n\n```javascript\nvar flat = require('electron-osx-sign').flat\nflat({\n  app: 'path/to/my.app'\n}, function done (err) {\n  if (err) {\n    // Handle the error\n    return;\n  }\n  // Application flattened\n})\n```\n\nFrom release v0.4.0-beta, [Bluebird] promises are introduced for better async method calls; the following is also available for use.\n\n```javascript\nvar flatAsync = require('electron-osx-sign').flatAsync\nflatAsync(opts)\n  [.then(function () {})]\n  [.catch(function (err) {})]\n```\n\nExample:\n\n```javascript\nvar flatAsync = require('electron-osx-sign').flatAsync\nflatAsync({\n  app: 'path/to/my.app'\n})\n  .then(function () {\n    // Application flattened\n  })\n  .catch(function (err) {\n    // Handle the error\n  })\n```\n\n###### opts - Options\n\n**Required**\n\n`app` - *String*\n\nPath to the application bundle.\nNeeds file extension `.app`.\n\n**Optional**\n\n`identity` - *String*\n\nName of certificate to use when signing.\nDefault to be selected with respect to `platform` from `keychain` or keychain by system default.\n\nFlattening platform `mas` will look for `3rd Party Mac Developer Installer: * (*)`, and platform `darwin` will look for `Developer ID Installer: * (*)` by default.\n\n`identity-validation` - *Boolean*\n\nFlag to enable/disable validation for signing identity. If enabled, the `identity` provided will be validated in the `keychain` specified.\nDefault to `true`.\n\n`install` - *String*\n\nPath to install the bundle.\nDefault to `/Applications`.\n\n`keychain` - *String*\n\nThe keychain name.\nDefault to system default keychain.\n\n`platform` - *String*\n\nBuild platform of Electron. Allowed values: `darwin`, `mas`.\nDefault to auto detect by presence of `Squirrel.framework` within the application bundle.\n\n`pkg` - *String*\n\nPath to the output the flattened package.\nNeeds file extension `.pkg`.\n\n`scripts` - *String*\nPath to a directory containing pre and/or post install scripts.\n\n###### cb - Callback\n\n`err` - *Error*\n\n## Debug\n\nAs of release v0.3.1, external module `debug` is used to display logs and messages; remember to `export DEBUG=electron-osx-sign*` when necessary.\n\n## Test\n\nThe project's configured to run automated tests on CircleCI.\n\nIf you wish to manually test the module, first comment out `opts.identity` in `test/basic.js` to enable auto discovery. Then run the command `npm test` from the dev directory.\n\nWhen this command is run for the first time: `electron-download` will download macOS Electron releases defined in `test/config.json`, and save to `~/.electron/`, which might take up less than 1GB of disk space.\n\nA successful testing should look something like:\n\n```\n$ npm test\n\n> electron-osx-sign@0.4.17 pretest electron-osx-sign\n> rimraf test/work\n\n> electron-osx-sign@0.4.17 test electron-osx-sign\n> standard && tape test\n\nCalling electron-download before running tests...\nRunning tests...\nTAP version 13\n# setup\n# defaults-test:v7.0.0-beta.3-darwin-x64\nok 1 app signed\n# defaults-test:v7.0.0-beta.3-mas-x64\nok 2 app signed\n# defaults-test:v6.0.3-darwin-x64\nok 3 app signed\n# defaults-test:v6.0.3-mas-x64\nok 4 app signed\n# defaults-test:v5.0.10-darwin-x64\nok 5 app signed\n# defaults-test:v5.0.10-mas-x64\nok 6 app signed\n# defaults-test:v4.2.9-darwin-x64\nok 7 app signed\n# defaults-test:v4.2.9-mas-x64\nok 8 app signed\n# defaults-test:v3.1.2-darwin-x64\nok 9 app signed\n# defaults-test:v3.1.2-mas-x64\nok 10 app signed\n# teardown\n\n1..10\n# tests 10\n# pass  10\n\n# ok\n```\n\n## Related\n\n- [electron-packager] - Package your electron app in OS executables (.app, .exe, etc) via JS or CLI\n- [electron-builder] - A complete solution to package and build a ready for distribution Electron app with “auto update” support out of the box\n\n[Bluebird]: https://github.com/petkaantonov/bluebird\n[Electron]: https://github.com/electron/electron\n[electron-builder]: https://github.com/electron-userland/electron-builder\n[electron-packager]: https://github.com/electron-userland/electron-packager\n[electron-osx-sign]: https://github.com/electron-userland/electron-osx-sign\n[npm_img]: https://img.shields.io/npm/v/electron-osx-sign.svg\n[npm_url]: https://npmjs.org/package/electron-osx-sign\n[circleci_img]: https://img.shields.io/circleci/build/github/electron/electron-osx-sign\n[circleci_url]: https://circleci.com/gh/electron/electron-osx-sign\n",
    "licenseText": "Copyright (c) 2015-2016 Zhuo Lu, Jason Hinkle, et al.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-osx-sign/-/electron-osx-sign-0.5.0.tgz#fc258c5e896859904bbe3d01da06902c04b51c3a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-osx-sign/-/electron-osx-sign-0.5.0.tgz",
    "hash": "fc258c5e896859904bbe3d01da06902c04b51c3a",
    "integrity": "sha512-icoRLHzFz/qxzDh/N4Pi2z4yVHurlsCAYQvsCSG7fCedJ4UJXBS6PoQyGH71IfcqKupcKeK7HX/NkyfG+v6vlQ==",
    "registry": "npm",
    "packageName": "electron-osx-sign",
    "cacheIntegrity": "sha512-icoRLHzFz/qxzDh/N4Pi2z4yVHurlsCAYQvsCSG7fCedJ4UJXBS6PoQyGH71IfcqKupcKeK7HX/NkyfG+v6vlQ== sha1-/CWMXoloWZBLvj0B2gaQLAS1HDo="
  },
  "registry": "npm",
  "hash": "fc258c5e896859904bbe3d01da06902c04b51c3a"
}