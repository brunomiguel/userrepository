{
  "manifest": {
    "name": "http2-wrapper",
    "version": "1.0.3",
    "description": "HTTP2 client, just with the familiar `https` API",
    "main": "source",
    "engines": {
      "node": ">=10.19.0"
    },
    "scripts": {
      "test": "xo && nyc --reporter=lcovonly --reporter=text --reporter=html ava"
    },
    "files": [
      "source"
    ],
    "keywords": [
      "http2",
      "https",
      "http",
      "request"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/szmarczak/http2-wrapper.git"
    },
    "author": {
      "name": "Szymon Marczak"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/szmarczak/http2-wrapper/issues"
    },
    "homepage": "https://github.com/szmarczak/http2-wrapper#readme",
    "dependencies": {
      "quick-lru": "^5.1.1",
      "resolve-alpn": "^1.0.0"
    },
    "devDependencies": {
      "@sindresorhus/is": "^3.0.0",
      "ava": "^3.10.1",
      "benchmark": "^2.1.4",
      "get-stream": "^5.1.0",
      "got": "^11.5.0",
      "http2-proxy": "^5.0.51",
      "lolex": "^6.0.0",
      "many-keys-map": "^1.0.2",
      "nyc": "^15.1.0",
      "p-event": "^4.2.0",
      "tempy": "^0.5.0",
      "to-readable-stream": "^2.1.0",
      "tsd": "^0.13.1",
      "xo": "^0.32.1"
    },
    "ava": {
      "timeout": "2m"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-http2-wrapper-1.0.3-b8f55e0c1f25d4ebd08b3b0c2c079f9590800b3d-integrity/node_modules/http2-wrapper/package.json",
    "readmeFilename": "README.md",
    "readme": "# http2-wrapper\n> HTTP/2 client, just with the familiar `https` API\n\n[![Node CI](https://github.com/szmarczak/http2-wrapper/workflows/Node%20CI/badge.svg)](https://github.com/szmarczak/http2-wrapper/actions)\n[![codecov](https://codecov.io/gh/szmarczak/http2-wrapper/branch/master/graph/badge.svg)](https://codecov.io/gh/szmarczak/http2-wrapper)\n[![npm](https://img.shields.io/npm/dm/http2-wrapper.svg)](https://www.npmjs.com/package/http2-wrapper)\n[![install size](https://packagephobia.now.sh/badge?p=http2-wrapper)](https://packagephobia.now.sh/result?p=http2-wrapper)\n\nThis package was created to support HTTP/2 without the need to rewrite your code.<br>\nI recommend adapting to the [`http2`](https://nodejs.org/api/http2.html) module if possible - it's much simpler to use and has many cool features!\n\n**Tip**: `http2-wrapper` is very useful when you rely on other modules that use the HTTP/1 API and you want to support HTTP/2.\n\n**Pro Tip**: While the native `http2` doesn't have agents yet, you can use `http2-wrapper` Agents and still operate on the native HTTP/2 streams.\n\n## Installation\n\n> `$ npm install http2-wrapper`<br>\n> `$ yarn add http2-wrapper`\n\n## Usage\n```js\nconst http2 = require('http2-wrapper');\n\nconst options = {\n\thostname: 'nghttp2.org',\n\tprotocol: 'https:',\n\tpath: '/httpbin/post',\n\tmethod: 'POST',\n\theaders: {\n\t\t'content-length': 6\n\t}\n};\n\nconst request = http2.request(options, response => {\n\tconsole.log('statusCode:', response.statusCode);\n\tconsole.log('headers:', response.headers);\n\n\tconst body = [];\n\tresponse.on('data', chunk => {\n\t\tbody.push(chunk);\n\t});\n\tresponse.on('end', () => {\n\t\tconsole.log('body:', Buffer.concat(body).toString());\n\t});\n});\n\nrequest.on('error', console.error);\n\nrequest.write('123');\nrequest.end('456');\n\n// statusCode: 200\n// headers: [Object: null prototype] {\n//   ':status': 200,\n//   date: 'Fri, 27 Sep 2019 19:45:46 GMT',\n//   'content-type': 'application/json',\n//   'access-control-allow-origin': '*',\n//   'access-control-allow-credentials': 'true',\n//   'content-length': '239',\n//   'x-backend-header-rtt': '0.002516',\n//   'strict-transport-security': 'max-age=31536000',\n//   server: 'nghttpx',\n//   via: '1.1 nghttpx',\n//   'alt-svc': 'h3-23=\":4433\"; ma=3600',\n//   'x-frame-options': 'SAMEORIGIN',\n//   'x-xss-protection': '1; mode=block',\n//   'x-content-type-options': 'nosniff'\n// }\n// body: {\n//   \"args\": {},\n//   \"data\": \"123456\",\n//   \"files\": {},\n//   \"form\": {},\n//   \"headers\": {\n//     \"Content-Length\": \"6\",\n//     \"Host\": \"nghttp2.org\"\n//   },\n//   \"json\": 123456,\n//   \"origin\": \"xxx.xxx.xxx.xxx\",\n//   \"url\": \"https://nghttp2.org/httpbin/post\"\n// }\n```\n\n## API\n\n**Note:** The `session` option was renamed to `tlsSession` for better readability.\n\n### http2.auto(url, options, callback)\n\nPerforms [ALPN](https://nodejs.org/api/tls.html#tls_alpn_and_sni) negotiation.\nReturns a Promise giving proper `ClientRequest` instance (depending on the ALPN).\n\n**Note**: The `agent` option represents an object with `http`, `https` and `http2` properties.\n\n```js\nconst http2 = require('http2-wrapper');\n\nconst options = {\n\thostname: 'httpbin.org',\n\tprotocol: 'http:', // Note the `http:` protocol here\n\tpath: '/post',\n\tmethod: 'POST',\n\theaders: {\n\t\t'content-length': 6\n\t}\n};\n\n(async () => {\n\ttry {\n\t\tconst request = await http2.auto(options, response => {\n\t\t\tconsole.log('statusCode:', response.statusCode);\n\t\t\tconsole.log('headers:', response.headers);\n\n\t\t\tconst body = [];\n\t\t\tresponse.on('data', chunk => body.push(chunk));\n\t\t\tresponse.on('end', () => {\n\t\t\t\tconsole.log('body:', Buffer.concat(body).toString());\n\t\t\t});\n\t\t});\n\n\t\trequest.on('error', console.error);\n\n\t\trequest.write('123');\n\t\trequest.end('456');\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n})();\n\n// statusCode: 200\n// headers: { connection: 'close',\n//   server: 'gunicorn/19.9.0',\n//   date: 'Sat, 15 Dec 2018 18:19:32 GMT',\n//   'content-type': 'application/json',\n//   'content-length': '259',\n//   'access-control-allow-origin': '*',\n//   'access-control-allow-credentials': 'true',\n//   via: '1.1 vegur' }\n// body: {\n//   \"args\": {},\n//   \"data\": \"123456\",\n//   \"files\": {},\n//   \"form\": {},\n//   \"headers\": {\n//     \"Connection\": \"close\",\n//     \"Content-Length\": \"6\",\n//     \"Host\": \"httpbin.org\"\n//   },\n//   \"json\": 123456,\n//   \"origin\": \"xxx.xxx.xxx.xxx\",\n//   \"url\": \"http://httpbin.org/post\"\n// }\n```\n\n### http2.auto.protocolCache\n\nAn instance of [`quick-lru`](https://github.com/sindresorhus/quick-lru) used for ALPN cache.\n\nThere is a maximum of 100 entries. You can modify the limit through `protocolCache.maxSize` - note that the change will be visible globally.\n\n### http2.request(url, options, callback)\n\nSame as [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback).\n\n##### options.h2session\n\nType: `Http2Session`<br>\n\nThe session used to make the actual request. If none provided, it will use `options.agent`.\n\n### http2.get(url, options, callback)\n\nSame as [`https.get`](https://nodejs.org/api/https.html#https_https_get_options_callback).\n\n### new http2.ClientRequest(url, options, callback)\n\nSame as [`https.ClientRequest`](https://nodejs.org/api/https.html#https_class_https_clientrequest).\n\n### new http2.IncomingMessage(socket)\n\nSame as [`https.IncomingMessage`](https://nodejs.org/api/https.html#https_class_https_incomingmessage).\n\n### new http2.Agent(options)\n\n**Note:** this is **not** compatible with the classic `http.Agent`.\n\nUsage example:\n\n```js\nconst http2 = require('http2-wrapper');\n\nclass MyAgent extends http2.Agent {\n\tcreateConnection(origin, options) {\n\t\tconsole.log(`Connecting to ${http2.Agent.normalizeOrigin(origin)}`);\n\t\treturn http2.Agent.connect(origin, options);\n\t}\n}\n\nhttp2.get({\n\thostname: 'google.com',\n\tagent: new MyAgent()\n}, res => {\n\tres.on('data', chunk => console.log(`Received chunk of ${chunk.length} bytes`));\n});\n```\n\n#### options\n\nEach option is assigned to each `Agent` instance and can be changed later.\n\n##### timeout\n\nType: `number`<br>\nDefault: `60000`\n\nIf there's no activity after `timeout` milliseconds, the session will be closed.\n\n##### maxSessions\n\nType: `number`<br>\nDefault: `Infinity`\n\nThe maximum amount of sessions in total.\n\n##### maxFreeSessions\n\nType: `number`<br>\nDefault: `10`\n\nThe maximum amount of free sessions in total. This only applies to sessions with no pending requests.\n\n**Note:** It is possible that the amount will be exceeded when sessions have at least 1 pending request.\n\n##### maxCachedTlsSessions\n\nType: `number`<br>\nDefault: `100`\n\nThe maximum amount of cached TLS sessions.\n\n#### Agent.normalizeOrigin(url)\n\nReturns a string representing the origin of the URL.\n\n#### agent.settings\n\nType: `object`<br>\nDefault: `{enablePush: false}`\n\n[Settings](https://nodejs.org/api/http2.html#http2_settings_object) used by the current agent instance.\n\n#### agent.normalizeOptions([options](https://github.com/szmarczak/http2-wrapper/blob/master/source/agent.js))\n\nReturns a string representing normalized options.\n\n```js\nAgent.normalizeOptions({servername: 'example.com'});\n// => ':example.com'\n```\n\n#### agent.getSession(origin, options)\n\n##### [origin](https://nodejs.org/api/http2.html#http2_http2_connect_authority_options_listener)\n\nType: `string` `URL` `object`\n\nAn origin used to create new session.\n\n##### [options](https://nodejs.org/api/http2.html#http2_http2_connect_authority_options_listener)\n\nType: `object`\n\nThe options used to create new session.\n\nReturns a Promise giving free `Http2Session`. If no free sessions are found, a new one is created.\n\n#### agent.getSession([origin](#origin), [options](options-1), listener)\n\n##### listener\n\nType: `object`\n\n```\n{\n\treject: error => void,\n\tresolve: session => void\n}\n```\n\nIf the `listener` argument is present, the Promise will resolve immediately. It will use the `resolve` function to pass the session.\n\n#### agent.request([origin](#origin), [options](#options-1), [headers](https://nodejs.org/api/http2.html#http2_headers_object), [streamOptions](https://nodejs.org/api/http2.html#http2_clienthttp2session_request_headers_options))\n\nReturns a Promise giving `Http2Stream`.\n\n#### agent.createConnection([origin](#origin), [options](#options-1))\n\nReturns a new `TLSSocket`. It defaults to `Agent.connect(origin, options)`.\n\n#### agent.closeFreeSessions()\n\nMakes an attempt to close free sessions. Only sessions with 0 concurrent streams will be closed.\n\n#### agent.destroy(reason)\n\nDestroys **all** sessions.\n\n#### Event: 'session'\n\n```js\nagent.on('session', session => {\n\t// A new session has been created by the Agent.\n});\n```\n\n## Proxy support\n\nAn example of a full-featured proxy server can be found [here](examples/proxy/server.js). It supports **mirroring, custom authorities and the CONNECT protocol**.\n\n### Mirroring\n\nTo mirror another server we need to use only [`http2-proxy`](https://github.com/nxtedition/node-http2-proxy). We don't need the CONNECT protocol or custom authorities.\n\nTo see the result, just navigate to the server's address.\n\n### HTTP/1 over HTTP/2\n\nSince we don't care about mirroring, the server needs to support the CONNECT protocol in this case.\n\nThe client looks like this:\n\n```js\nconst https = require('https');\nconst http2 = require('http2');\n\nconst session = http2.connect('https://localhost:8000', {\n\t// For demo purposes only!\n\trejectUnauthorized: false\n});\n\nsession.ref();\n\nhttps.request('https://httpbin.org/anything', {\n\tcreateConnection: options => {\n\t\treturn session.request({\n\t\t\t':method': 'CONNECT',\n\t\t\t':authority': `${options.host}:${options.port}`\n\t\t});\n\t}\n}, response => {\n\tconsole.log('statusCode:', response.statusCode);\n\tconsole.log('headers:', response.headers);\n\n\tconst body = [];\n\tresponse.on('data', chunk => {\n\t\tbody.push(chunk);\n\t});\n\tresponse.on('end', () => {\n\t\tconsole.log('body:', Buffer.concat(body).toString());\n\n\t\tsession.unref();\n\t});\n}).end();\n```\n\n### HTTP/2 over HTTP/2\n\nIt's a tricky one! We cannot create an HTTP/2 session on top of an HTTP/2 stream. But... we can still specify the `:authority` header, no need to use the CONNECT protocol here.\n\nThe client looks like this:\n\n```js\nconst http2 = require('../../source');\nconst {Agent} = http2;\n\nclass ProxyAgent extends Agent {\n\tconstructor(url, options) {\n\t\tsuper(options);\n\n\t\tthis.origin = url;\n\t}\n\n\trequest(origin, sessionOptions, headers, streamOptions) {\n\t\treturn super.request(this.origin, sessionOptions, {\n\t\t\t...headers,\n\t\t\t':authority': (new URL(origin)).host\n\t\t}, streamOptions);\n\t}\n}\n\nconst request = http2.request({\n\thostname: 'httpbin.org',\n\tprotocol: 'https:',\n\tpath: '/anything',\n\tagent: new ProxyAgent('https://localhost:8000'),\n\t// For demo purposes only!\n\trejectUnauthorized: false\n}, response => {\n\tconsole.log('statusCode:', response.statusCode);\n\tconsole.log('headers:', response.headers);\n\n\tconst body = [];\n\tresponse.on('data', chunk => {\n\t\tbody.push(chunk);\n\t});\n\tresponse.on('end', () => {\n\t\tconsole.log('body:', Buffer.concat(body).toString());\n\t});\n});\n\nrequest.on('error', console.error);\n\nrequest.end();\n```\n\n## Notes\n\n - If you're interested in [WebSockets over HTTP/2](https://tools.ietf.org/html/rfc8441), then [check out this discussion](https://github.com/websockets/ws/issues/1458).\n - [HTTP/2 sockets cannot be malformed](https://github.com/nodejs/node/blob/cc8250fab86486632fdeb63892be735d7628cd13/lib/internal/http2/core.js#L725), therefore modifying the socket will have no effect.\n - You can make [a custom Agent](examples/push-stream/index.js) to support push streams.\n\n## Benchmarks\n\nCPU: Intel i7-7700k (governor: performance)<br>\nServer: H2O v2.2.5 [`h2o.conf`](h2o.conf)<br>\nNode: v14.5.0\nLinux: 5.6.18-156.current\n\n`auto` means `http2wrapper.auto`.\n\n```\nhttp2-wrapper                         x 12,181 ops/sec ±3.39% (75 runs sampled)\nhttp2-wrapper - preconfigured session x 13,140 ops/sec ±2.51% (79 runs sampled)\nhttp2-wrapper - auto                  x 11,412 ops/sec ±2.55% (78 runs sampled)\nhttp2                                 x 16,050 ops/sec ±1.39% (86 runs sampled)\nhttps         - auto - keepalive      x 12,288 ops/sec ±2.69% (79 runs sampled)\nhttps                - keepalive      x 12,155 ops/sec ±3.32% (78 runs sampled)\nhttps                                 x 1,604 ops/sec  ±2.03% (77 runs sampled)\nhttp                                  x 6,041 ops/sec  ±3.82% (76 runs sampled)\nFastest is http2\n```\n\n`http2-wrapper`:\n- 32% **less** performant than `http2`\n- as performant as `https - keepalive`\n- 100% **more** performant than `http`\n\n`http2-wrapper - preconfigured session`:\n- 22% **less** performant than `http2`\n- 8% **more** performant than `https - keepalive`\n- 118% **more** performant than `http`\n\n`http2-wrapper - auto`:\n- 41% **less** performant than `http2`\n- 8% **less** performant than `https - keepalive`\n- 89% **more** performant than `http`\n\n`https - auto - keepalive`:\n- 31% **less** performant than `http2`\n- as performant as `https - keepalive`\n- 103% **more** performant than `http`\n\n## Related\n\n - [`got`](https://github.com/sindresorhus/got) - Simplified HTTP requests\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Szymon Marczak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/http2-wrapper/-/http2-wrapper-1.0.3.tgz#b8f55e0c1f25d4ebd08b3b0c2c079f9590800b3d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
    "hash": "b8f55e0c1f25d4ebd08b3b0c2c079f9590800b3d",
    "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
    "registry": "npm",
    "packageName": "http2-wrapper",
    "cacheIntegrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg== sha1-uPVeDB8l1OvQizsMLAeflZCACz0="
  },
  "registry": "npm",
  "hash": "b8f55e0c1f25d4ebd08b3b0c2c079f9590800b3d"
}