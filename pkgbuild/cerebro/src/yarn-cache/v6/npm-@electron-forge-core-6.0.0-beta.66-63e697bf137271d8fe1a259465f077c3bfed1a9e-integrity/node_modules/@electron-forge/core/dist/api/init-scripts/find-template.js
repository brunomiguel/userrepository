"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _debug = _interopRequireDefault(require("debug"));
var _resolvePackage = _interopRequireDefault(require("resolve-package"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:init:find-template');
var _default = async (dir, template)=>{
    let templateModulePath;
    await (0, _asyncOra).asyncOra(`Locating custom template: "${template}"`, async ()=>{
        const resolveTemplateTypes = [
            [
                'global',
                `electron-forge-template-${template}`
            ],
            [
                'global',
                `@electron-forge/template-${template}`
            ],
            [
                'local',
                `electron-forge-template-${template}`
            ],
            [
                'local',
                `@electron-forge/template-${template}`
            ],
            [
                'local',
                template
            ], 
        ];
        let foundTemplate = false;
        for (const [templateType, moduleName] of resolveTemplateTypes){
            try {
                d(`Trying ${templateType} template: ${moduleName}`);
                if (templateType === 'global') {
                    templateModulePath = await (0, _resolvePackage).default(moduleName);
                } else {
                    // local
                    templateModulePath = require.resolve(moduleName);
                }
                foundTemplate = true;
                break;
            } catch (err) {
                d(`Error: ${err instanceof Error ? err.message : err}`);
            }
        }
        if (!foundTemplate) {
            throw new Error(`Failed to locate custom template: "${template}"\n\nTry \`npm install -g electron-forge-template-${template}\``);
        }
    });
    // eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-dynamic-require, global-require
    const templateModule = require(templateModulePath);
    return templateModule.default || templateModule;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2ZpbmQtdGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcmVzb2x2ZVBhY2thZ2UgZnJvbSAncmVzb2x2ZS1wYWNrYWdlJztcblxuaW1wb3J0IHsgRm9yZ2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgUG9zc2libGVNb2R1bGUgfSBmcm9tICcuLi8uLi91dGlsL3JlcXVpcmUtc2VhcmNoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmZpbmQtdGVtcGxhdGUnKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGRpcjogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nKTogUHJvbWlzZTxGb3JnZVRlbXBsYXRlPiA9PiB7XG4gIGxldCB0ZW1wbGF0ZU1vZHVsZVBhdGghOiBzdHJpbmc7XG4gIGF3YWl0IGFzeW5jT3JhKGBMb2NhdGluZyBjdXN0b20gdGVtcGxhdGU6IFwiJHt0ZW1wbGF0ZX1cImAsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNvbHZlVGVtcGxhdGVUeXBlcyA9IFtcbiAgICAgIFsnZ2xvYmFsJywgYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2dsb2JhbCcsIGBAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gXSxcbiAgICAgIFsnbG9jYWwnLCBgZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gXSxcbiAgICAgIFsnbG9jYWwnLCBgQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLSR7dGVtcGxhdGV9YF0sXG4gICAgICBbJ2xvY2FsJywgdGVtcGxhdGVdLFxuICAgIF07XG4gICAgbGV0IGZvdW5kVGVtcGxhdGUgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IFt0ZW1wbGF0ZVR5cGUsIG1vZHVsZU5hbWVdIG9mIHJlc29sdmVUZW1wbGF0ZVR5cGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkKGBUcnlpbmcgJHt0ZW1wbGF0ZVR5cGV9IHRlbXBsYXRlOiAke21vZHVsZU5hbWV9YCk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgICAgdGVtcGxhdGVNb2R1bGVQYXRoID0gYXdhaXQgcmVzb2x2ZVBhY2thZ2UobW9kdWxlTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbG9jYWxcbiAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUobW9kdWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm91bmRUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGQoYEVycm9yOiAke2VyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnJ9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmRUZW1wbGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9jYXRlIGN1c3RvbSB0ZW1wbGF0ZTogXCIke3RlbXBsYXRlfVwiXFxuXFxuVHJ5IFxcYG5wbSBpbnN0YWxsIC1nIGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9XFxgYCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcywgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSwgZ2xvYmFsLXJlcXVpcmVcbiAgY29uc3QgdGVtcGxhdGVNb2R1bGU6IFBvc3NpYmxlTW9kdWxlPEZvcmdlVGVtcGxhdGU+ID0gcmVxdWlyZSh0ZW1wbGF0ZU1vZHVsZVBhdGgpO1xuXG4gIHJldHVybiB0ZW1wbGF0ZU1vZHVsZS5kZWZhdWx0IHx8IHRlbXBsYXRlTW9kdWxlO1xufTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVidWciLCJkaXIiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlTW9kdWxlUGF0aCIsImFzeW5jT3JhIiwicmVzb2x2ZVRlbXBsYXRlVHlwZXMiLCJmb3VuZFRlbXBsYXRlIiwidGVtcGxhdGVUeXBlIiwibW9kdWxlTmFtZSIsInJlc29sdmVQYWNrYWdlIiwicmVxdWlyZSIsInJlc29sdmUiLCJlcnIiLCJFcnJvciIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZU1vZHVsZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLEdBQTJCLENBQTNCLFNBQTJCO0FBQ2xDLEdBQU8sQ0FBUCxNQUFPO0FBQ0UsR0FBaUIsQ0FBakIsZUFBaUI7Ozs7OztBQUs1QyxLQUFLLENBQUNBLENBQUMsT0FBR0MsTUFBSyxVQUFDLENBQW1DO3NCQUU3QkMsR0FBVyxFQUFFQyxRQUFnQixHQUE2QixDQUFDO0lBQy9FLEdBQUcsQ0FBQ0Msa0JBQWtCO0lBQ3RCLEtBQUssS0FBQ0MsU0FBUSxZQUFFLDJCQUEyQixFQUFFRixRQUFRLENBQUMsQ0FBQyxhQUFlLENBQUM7UUFDckUsS0FBSyxDQUFDRyxvQkFBb0IsR0FBRyxDQUFDO1lBQzVCLENBQUM7Z0JBQUEsQ0FBUTtpQkFBRyx3QkFBd0IsRUFBRUgsUUFBUTtZQUFFLENBQUM7WUFDakQsQ0FBQztnQkFBQSxDQUFRO2lCQUFHLHlCQUF5QixFQUFFQSxRQUFRO1lBQUUsQ0FBQztZQUNsRCxDQUFDO2dCQUFBLENBQU87aUJBQUcsd0JBQXdCLEVBQUVBLFFBQVE7WUFBRSxDQUFDO1lBQ2hELENBQUM7Z0JBQUEsQ0FBTztpQkFBRyx5QkFBeUIsRUFBRUEsUUFBUTtZQUFFLENBQUM7WUFDakQsQ0FBQztnQkFBQSxDQUFPO2dCQUFFQSxRQUFRO1lBQUEsQ0FBQztRQUNyQixDQUFDO1FBQ0QsR0FBRyxDQUFDSSxhQUFhLEdBQUcsS0FBSztRQUN6QixHQUFHLEVBQUUsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLFVBQVUsS0FBS0gsb0JBQW9CLENBQUUsQ0FBQztZQUM5RCxHQUFHLENBQUMsQ0FBQztnQkFDSE4sQ0FBQyxFQUFFLE9BQU8sRUFBRVEsWUFBWSxDQUFDLFdBQVcsRUFBRUMsVUFBVTtnQkFDaEQsRUFBRSxFQUFFRCxZQUFZLEtBQUssQ0FBUSxTQUFFLENBQUM7b0JBQzlCSixrQkFBa0IsR0FBRyxLQUFLLEtBQUNNLGVBQWMsVUFBQ0QsVUFBVTtnQkFDdEQsQ0FBQyxNQUFNLENBQUM7b0JBQ04sRUFBUSxBQUFSLE1BQVE7b0JBQ1JMLGtCQUFrQixHQUFHTyxPQUFPLENBQUNDLE9BQU8sQ0FBQ0gsVUFBVTtnQkFDakQsQ0FBQztnQkFDREYsYUFBYSxHQUFHLElBQUk7Z0JBQ3BCLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxFQUFFTSxHQUFHLEVBQUUsQ0FBQztnQkFDYmIsQ0FBQyxFQUFFLE9BQU8sRUFBRWEsR0FBRyxZQUFZQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0UsT0FBTyxHQUFHRixHQUFHO1lBQ3RELENBQUM7UUFDSCxDQUFDO1FBQ0QsRUFBRSxHQUFHTixhQUFhLEVBQUUsQ0FBQztZQUNuQixLQUFLLENBQUMsR0FBRyxDQUFDTyxLQUFLLEVBQUUsbUNBQW1DLEVBQUVYLFFBQVEsQ0FBQyxrREFBa0QsRUFBRUEsUUFBUSxDQUFDLEVBQUU7UUFDaEksQ0FBQztJQUNILENBQUM7SUFFRCxFQUF5RyxBQUF6Ryx1R0FBeUc7SUFDekcsS0FBSyxDQUFDYSxjQUFjLEdBQWtDTCxPQUFPLENBQUNQLGtCQUFrQjtJQUVoRixNQUFNLENBQUNZLGNBQWMsQ0FBQ0MsT0FBTyxJQUFJRCxjQUFjO0FBQ2pELENBQUMifQ==