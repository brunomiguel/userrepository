"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ElectronProcess", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ElectronProcess;
    }
});
Object.defineProperty(exports, "ForgeMakeResult", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ForgeMakeResult;
    }
});
Object.defineProperty(exports, "ImportOptions", {
    enumerable: true,
    get: function() {
        return _import.ImportOptions;
    }
});
Object.defineProperty(exports, "InitOptions", {
    enumerable: true,
    get: function() {
        return _init.InitOptions;
    }
});
Object.defineProperty(exports, "InstallOptions", {
    enumerable: true,
    get: function() {
        return _install.InstallOptions;
    }
});
Object.defineProperty(exports, "InstallAsset", {
    enumerable: true,
    get: function() {
        return _install.Asset;
    }
});
Object.defineProperty(exports, "LintOptions", {
    enumerable: true,
    get: function() {
        return _lint.LintOptions;
    }
});
Object.defineProperty(exports, "MakeOptions", {
    enumerable: true,
    get: function() {
        return _make.MakeOptions;
    }
});
Object.defineProperty(exports, "PackageOptions", {
    enumerable: true,
    get: function() {
        return _package.PackageOptions;
    }
});
Object.defineProperty(exports, "PublishOptions", {
    enumerable: true,
    get: function() {
        return _publish.PublishOptions;
    }
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _start.StartOptions;
    }
});
Object.defineProperty(exports, "ForgeUtils", {
    enumerable: true,
    get: function() {
        return _util.default;
    }
});
exports.utils = exports.api = void 0;
var _sharedTypes = require("@electron-forge/shared-types");
var _import = _interopRequireWildcard(require("./import"));
var _init = _interopRequireWildcard(require("./init"));
var _install = _interopRequireWildcard(require("./install"));
var _lint = _interopRequireWildcard(require("./lint"));
var _make = _interopRequireWildcard(require("./make"));
var _package = _interopRequireWildcard(require("./package"));
var _publish = _interopRequireWildcard(require("./publish"));
var _start = _interopRequireWildcard(require("./start"));
var _util = _interopRequireDefault(require("../util"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class ForgeAPI {
    /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */ import(opts) {
        return (0, _import).default(opts);
    }
    /**
   * Initialize a new Electron Forge template project in the given directory.
   */ init(opts) {
        return (0, _init).default(opts);
    }
    /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */ install(opts) {
        return (0, _install).default(opts);
    }
    /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */ lint(opts) {
        return (0, _lint).default(opts);
    }
    /**
   * Make distributables for an Electron application
   */ make(opts) {
        return (0, _make).default(opts);
    }
    /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */ package(opts) {
        return (0, _package).default(opts);
    }
    /**
   * Publish an Electron application into the given target service
   */ publish(opts) {
        return (0, _publish).default(opts);
    }
    /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */ start(opts) {
        return (0, _start).default(opts);
    }
}
exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlY3Ryb25Qcm9jZXNzLCBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IF9pbXBvcnQsIHsgSW1wb3J0T3B0aW9ucyB9IGZyb20gJy4vaW1wb3J0JztcbmltcG9ydCBpbml0LCB7IEluaXRPcHRpb25zIH0gZnJvbSAnLi9pbml0JztcbmltcG9ydCBpbnN0YWxsLCB7IEluc3RhbGxPcHRpb25zLCBBc3NldCBhcyBJbnN0YWxsQXNzZXQgfSBmcm9tICcuL2luc3RhbGwnO1xuaW1wb3J0IGxpbnQsIHsgTGludE9wdGlvbnMgfSBmcm9tICcuL2xpbnQnO1xuaW1wb3J0IG1ha2UsIHsgTWFrZU9wdGlvbnMgfSBmcm9tICcuL21ha2UnO1xuaW1wb3J0IF9wYWNrYWdlLCB7IFBhY2thZ2VPcHRpb25zIH0gZnJvbSAnLi9wYWNrYWdlJztcbmltcG9ydCBwdWJsaXNoLCB7IFB1Ymxpc2hPcHRpb25zIH0gZnJvbSAnLi9wdWJsaXNoJztcbmltcG9ydCBzdGFydCwgeyBTdGFydE9wdGlvbnMgfSBmcm9tICcuL3N0YXJ0JztcblxuaW1wb3J0IEZvcmdlVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBGb3JnZUFQSSB7XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGltcG9ydCBhIGdpdmVuIG1vZHVsZSBkaXJlY3RvcnkgdG8gdGhlIEVsZWN0cm9uIEZvcmdlIHN0YW5kYXJkLlxuICAgKlxuICAgKiAqIFNldHMgdXAgYGdpdGAgYW5kIHRoZSBjb3JyZWN0IE5QTSBkZXBlbmRlbmNpZXNcbiAgICogKiBBZGRzIGEgdGVtcGxhdGUgZm9yZ2UgY29uZmlnIHRvIGBwYWNrYWdlLmpzb25gXG4gICAqL1xuICBpbXBvcnQob3B0czogSW1wb3J0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBfaW1wb3J0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgRWxlY3Ryb24gRm9yZ2UgdGVtcGxhdGUgcHJvamVjdCBpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICAgKi9cbiAgaW5pdChvcHRzOiBJbml0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBpbml0KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGwgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gZnJvbSBHaXRIdWIuXG4gICAqXG4gICAqIFdvcmtzIG9uIGFsbCB0aHJlZSBwbGF0Zm9ybXMgZm9yIGFsbCBtYWpvciBkaXN0cmlidXRhYmxlIHR5cGVzLlxuICAgKi9cbiAgaW5zdGFsbChvcHRzOiBJbnN0YWxsT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBpbnN0YWxsKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbnQgYSBsb2NhbCBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzdGRvdXQrc3RkZXJyIG9mIHRoZSBsaW50aW5nIHByb2Nlc3NcbiAgICogaWYgbGludGluZyBmYWlscyBvciB3aWxsIGJlIHJlc29sdmVkIGlmIGl0IHN1Y2NlZWRzLlxuICAgKi9cbiAgbGludChvcHRzOiBMaW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBsaW50KG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgZGlzdHJpYnV0YWJsZXMgZm9yIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uXG4gICAqL1xuICBtYWtlKG9wdHM6IE1ha2VPcHRpb25zKTogUHJvbWlzZTxGb3JnZU1ha2VSZXN1bHRbXT4ge1xuICAgIHJldHVybiBtYWtlKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGhvb2tzIGlmIHRoZXkgYXJlIGEgcGF0aCB0byBhIGZpbGUgKGluc3RlYWQgb2YgYSBgRnVuY3Rpb25gKVxuICAgKi9cbiAgcGFja2FnZShvcHRzOiBQYWNrYWdlT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBfcGFja2FnZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGludG8gdGhlIGdpdmVuIHRhcmdldCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaXNoKG9wdHM6IFB1Ymxpc2hPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEhhbmRsZXMgdGhpbmdzIGxpa2UgbmF0aXZlIG1vZHVsZSByZWJ1aWxkaW5nIGZvciB5b3Ugb24gdGhlIGZseVxuICAgKi9cbiAgc3RhcnQob3B0czogU3RhcnRPcHRpb25zKTogUHJvbWlzZTxFbGVjdHJvblByb2Nlc3M+IHtcbiAgICByZXR1cm4gc3RhcnQob3B0cyk7XG4gIH1cbn1cblxuY29uc3QgYXBpID0gbmV3IEZvcmdlQVBJKCk7XG5jb25zdCB1dGlscyA9IG5ldyBGb3JnZVV0aWxzKCk7XG5cbmV4cG9ydCB7XG4gIEZvcmdlTWFrZVJlc3VsdCxcbiAgRWxlY3Ryb25Qcm9jZXNzLFxuICBGb3JnZVV0aWxzLFxuICBJbXBvcnRPcHRpb25zLFxuICBJbml0T3B0aW9ucyxcbiAgSW5zdGFsbEFzc2V0LFxuICBJbnN0YWxsT3B0aW9ucyxcbiAgTGludE9wdGlvbnMsXG4gIE1ha2VPcHRpb25zLFxuICBQYWNrYWdlT3B0aW9ucyxcbiAgUHVibGlzaE9wdGlvbnMsXG4gIFN0YXJ0T3B0aW9ucyxcbiAgYXBpLFxuICB1dGlscyxcbn07XG4iXSwibmFtZXMiOlsiRWxlY3Ryb25Qcm9jZXNzIiwiRm9yZ2VNYWtlUmVzdWx0IiwiSW1wb3J0T3B0aW9ucyIsIkluaXRPcHRpb25zIiwiSW5zdGFsbE9wdGlvbnMiLCJJbnN0YWxsQXNzZXQiLCJMaW50T3B0aW9ucyIsIk1ha2VPcHRpb25zIiwiUGFja2FnZU9wdGlvbnMiLCJQdWJsaXNoT3B0aW9ucyIsIlN0YXJ0T3B0aW9ucyIsIkZvcmdlVXRpbHMiLCJGb3JnZUFQSSIsImltcG9ydCIsIm9wdHMiLCJfaW1wb3J0IiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJfcGFja2FnZSIsInB1Ymxpc2giLCJzdGFydCIsImFwaSIsInV0aWxzIl0sIm1hcHBpbmdzIjoiOzs7OytCQXNGRUEsQ0FBZTs7O2VBQWZBLFlBQWU7OzsrQkFEZkMsQ0FBZTs7O2VBQWZBLFlBQWU7OzsrQkFHZkMsQ0FBYTs7O2VBQWJBLE9BQWE7OzsrQkFDYkMsQ0FBVzs7O2VBQVhBLEtBQVc7OzsrQkFFWEMsQ0FBYzs7O2VBQWRBLFFBQWM7OzsrQkFEZEMsQ0FBWTs7O2VBQVpBLFFBQVk7OzsrQkFFWkMsQ0FBVzs7O2VBQVhBLEtBQVc7OzsrQkFDWEMsQ0FBVzs7O2VBQVhBLEtBQVc7OzsrQkFDWEMsQ0FBYzs7O2VBQWRBLFFBQWM7OzsrQkFDZEMsQ0FBYzs7O2VBQWRBLFFBQWM7OzsrQkFDZEMsQ0FBWTs7O2VBQVpBLE1BQVk7OzsrQkFUWkMsQ0FBVTs7O2VBQVZBLEtBQVU7Ozs7QUF2RnFDLEdBQThCLENBQTlCLFlBQThCO0FBRXhDLEdBQVUsQ0FBVixPQUFVO0FBQ2YsR0FBUSxDQUFSLEtBQVE7QUFDcUIsR0FBVyxDQUFYLFFBQVc7QUFDeEMsR0FBUSxDQUFSLEtBQVE7QUFDUixHQUFRLENBQVIsS0FBUTtBQUNELEdBQVcsQ0FBWCxRQUFXO0FBQ1osR0FBVyxDQUFYLFFBQVc7QUFDZixHQUFTLENBQVQsTUFBUztBQUV0QixHQUFTLENBQVQsS0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BRW5CQyxRQUFRO0lBQ25CLEVBS0csQUFMSDs7Ozs7R0FLRyxBQUxILEVBS0csQ0FDSEMsTUFBTSxDQUFDQyxJQUFtQixFQUFpQixDQUFDO1FBQzFDLE1BQU0sS0FBQ0MsT0FBTyxVQUFDRCxJQUFJO0lBQ3JCLENBQUM7SUFFRCxFQUVHLEFBRkg7O0dBRUcsQUFGSCxFQUVHLENBQ0hFLElBQUksQ0FBQ0YsSUFBaUIsRUFBaUIsQ0FBQztRQUN0QyxNQUFNLEtBQUNFLEtBQUksVUFBQ0YsSUFBSTtJQUNsQixDQUFDO0lBRUQsRUFJRyxBQUpIOzs7O0dBSUcsQUFKSCxFQUlHLENBQ0hHLE9BQU8sQ0FBQ0gsSUFBb0IsRUFBaUIsQ0FBQztRQUM1QyxNQUFNLEtBQUNHLFFBQU8sVUFBQ0gsSUFBSTtJQUNyQixDQUFDO0lBRUQsRUFLRyxBQUxIOzs7OztHQUtHLEFBTEgsRUFLRyxDQUNISSxJQUFJLENBQUNKLElBQWlCLEVBQWlCLENBQUM7UUFDdEMsTUFBTSxLQUFDSSxLQUFJLFVBQUNKLElBQUk7SUFDbEIsQ0FBQztJQUVELEVBRUcsQUFGSDs7R0FFRyxBQUZILEVBRUcsQ0FDSEssSUFBSSxDQUFDTCxJQUFpQixFQUE4QixDQUFDO1FBQ25ELE1BQU0sS0FBQ0ssS0FBSSxVQUFDTCxJQUFJO0lBQ2xCLENBQUM7SUFFRCxFQUVHLEFBRkg7O0dBRUcsQUFGSCxFQUVHLENBQ0hNLE9BQU8sQ0FBQ04sSUFBb0IsRUFBaUIsQ0FBQztRQUM1QyxNQUFNLEtBQUNPLFFBQVEsVUFBQ1AsSUFBSTtJQUN0QixDQUFDO0lBRUQsRUFFRyxBQUZIOztHQUVHLEFBRkgsRUFFRyxDQUNIUSxPQUFPLENBQUNSLElBQW9CLEVBQWlCLENBQUM7UUFDNUMsTUFBTSxLQUFDUSxRQUFPLFVBQUNSLElBQUk7SUFDckIsQ0FBQztJQUVELEVBSUcsQUFKSDs7OztHQUlHLEFBSkgsRUFJRyxDQUNIUyxLQUFLLENBQUNULElBQWtCLEVBQTRCLENBQUM7UUFDbkQsTUFBTSxLQUFDUyxNQUFLLFVBQUNULElBQUk7SUFDbkIsQ0FBQzs7UUFqRVVGLFFBQVEsR0FBUkEsUUFBUTtBQW9FckIsS0FBSyxDQUFDWSxHQUFHLEdBQUcsR0FBRyxDQUFDWixRQUFRO1FBZ0J0QlksR0FBRyxHQUFIQSxHQUFHO0FBZkwsS0FBSyxDQUFDQyxLQUFLLEdBQUcsR0FBRyxDQUFDZCxLQUFVO1FBZ0IxQmMsS0FBSyxHQUFMQSxLQUFLIn0=