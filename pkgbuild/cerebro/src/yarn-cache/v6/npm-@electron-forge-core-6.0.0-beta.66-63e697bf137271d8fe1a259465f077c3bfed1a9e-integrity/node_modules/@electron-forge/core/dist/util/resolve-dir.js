"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _readPackageJson = require("./read-package-json");
var _electronVersion = require("./electron-version");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:project-resolver');
var _default = async (dir)=>{
    let mDir = dir;
    let bestGuessDir = null;
    let lastError = null;
    let prevDir;
    while(prevDir !== mDir){
        prevDir = mDir;
        const testPath = _path.default.resolve(mDir, 'package.json');
        d('searching for project in:', mDir);
        if (await _fsExtra.default.pathExists(testPath)) {
            const packageJSON = await (0, _readPackageJson).readRawPackageJson(mDir);
            // TODO: Move this check to inside the forge config resolver and use
            //       mutatedPackageJson reader
            try {
                await (0, _electronVersion).getElectronVersion(mDir, packageJSON);
            } catch (err) {
                if (err instanceof Error) {
                    lastError = err.message;
                }
            }
            if (packageJSON.config && packageJSON.config.forge) {
                d('electron-forge compatible package.json found in', testPath);
                return mDir;
            }
            bestGuessDir = mDir;
        }
        mDir = _path.default.dirname(mDir);
    }
    if (bestGuessDir) {
        d('guessing on the best electron-forge package.json found in', bestGuessDir);
        return bestGuessDir;
    }
    if (lastError) {
        throw lastError;
    }
    return null;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3Jlc29sdmUtZGlyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZWFkUmF3UGFja2FnZUpzb24gfSBmcm9tICcuL3JlYWQtcGFja2FnZS1qc29uJztcbmltcG9ydCB7IGdldEVsZWN0cm9uVmVyc2lvbiB9IGZyb20gJy4vZWxlY3Ryb24tdmVyc2lvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cHJvamVjdC1yZXNvbHZlcicpO1xuXG4vLyBGSVhNRTogSWYgd2Ugd2FudCBnZXRFbGVjdHJvblZlcnNpb24gdG8gYmUgb3ZlcnJpZGFibGUgYnkgcGx1Z2luc1xuLy8gICAgICAgIGFuZCAvIG9yIGZvcmdlIGNvbmZpZyB0aGVuIHdlIG5lZWQgdG8gYmUgYWJsZSB0byByZXNvbHZlXG4vLyAgICAgICAgdGhlIGRpciB3aXRob3V0IGNhbGxpbmcgZ2V0RWxlY3Ryb25WZXJzaW9uXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+ID0+IHtcbiAgbGV0IG1EaXIgPSBkaXI7XG4gIGxldCBiZXN0R3Vlc3NEaXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBsZXQgbGFzdEVycm9yOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBsZXQgcHJldkRpcjtcbiAgd2hpbGUgKHByZXZEaXIgIT09IG1EaXIpIHtcbiAgICBwcmV2RGlyID0gbURpcjtcbiAgICBjb25zdCB0ZXN0UGF0aCA9IHBhdGgucmVzb2x2ZShtRGlyLCAncGFja2FnZS5qc29uJyk7XG4gICAgZCgnc2VhcmNoaW5nIGZvciBwcm9qZWN0IGluOicsIG1EaXIpO1xuICAgIGlmIChhd2FpdCBmcy5wYXRoRXhpc3RzKHRlc3RQYXRoKSkge1xuICAgICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24obURpcik7XG5cbiAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBjaGVjayB0byBpbnNpZGUgdGhlIGZvcmdlIGNvbmZpZyByZXNvbHZlciBhbmQgdXNlXG4gICAgICAvLyAgICAgICBtdXRhdGVkUGFja2FnZUpzb24gcmVhZGVyXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBnZXRFbGVjdHJvblZlcnNpb24obURpciwgcGFja2FnZUpTT04pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGxhc3RFcnJvciA9IGVyci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYWNrYWdlSlNPTi5jb25maWcgJiYgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlKSB7XG4gICAgICAgIGQoJ2VsZWN0cm9uLWZvcmdlIGNvbXBhdGlibGUgcGFja2FnZS5qc29uIGZvdW5kIGluJywgdGVzdFBhdGgpO1xuICAgICAgICByZXR1cm4gbURpcjtcbiAgICAgIH1cblxuICAgICAgYmVzdEd1ZXNzRGlyID0gbURpcjtcbiAgICB9XG4gICAgbURpciA9IHBhdGguZGlybmFtZShtRGlyKTtcbiAgfVxuICBpZiAoYmVzdEd1ZXNzRGlyKSB7XG4gICAgZCgnZ3Vlc3Npbmcgb24gdGhlIGJlc3QgZWxlY3Ryb24tZm9yZ2UgcGFja2FnZS5qc29uIGZvdW5kIGluJywgYmVzdEd1ZXNzRGlyKTtcbiAgICByZXR1cm4gYmVzdEd1ZXNzRGlyO1xuICB9XG4gIGlmIChsYXN0RXJyb3IpIHtcbiAgICB0aHJvdyBsYXN0RXJyb3I7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuIl0sIm5hbWVzIjpbImQiLCJkZWJ1ZyIsImRpciIsIm1EaXIiLCJiZXN0R3Vlc3NEaXIiLCJsYXN0RXJyb3IiLCJwcmV2RGlyIiwidGVzdFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImZzIiwicGF0aEV4aXN0cyIsInBhY2thZ2VKU09OIiwicmVhZFJhd1BhY2thZ2VKc29uIiwiZ2V0RWxlY3Ryb25WZXJzaW9uIiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiY29uZmlnIiwiZm9yZ2UiLCJkaXJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFrQixHQUFPLENBQVAsTUFBTztBQUNWLEdBQVUsQ0FBVixRQUFVO0FBQ1IsR0FBTSxDQUFOLEtBQU07QUFDWSxHQUFxQixDQUFyQixnQkFBcUI7QUFDckIsR0FBb0IsQ0FBcEIsZ0JBQW9COzs7Ozs7QUFFdkQsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFpQztzQkFLM0JDLEdBQVcsR0FBNkIsQ0FBQztJQUM3RCxHQUFHLENBQUNDLElBQUksR0FBR0QsR0FBRztJQUNkLEdBQUcsQ0FBQ0UsWUFBWSxHQUFrQixJQUFJO0lBQ3RDLEdBQUcsQ0FBQ0MsU0FBUyxHQUFrQixJQUFJO0lBRW5DLEdBQUcsQ0FBQ0MsT0FBTztVQUNKQSxPQUFPLEtBQUtILElBQUksQ0FBRSxDQUFDO1FBQ3hCRyxPQUFPLEdBQUdILElBQUk7UUFDZCxLQUFLLENBQUNJLFFBQVEsR0FBR0MsS0FBSSxTQUFDQyxPQUFPLENBQUNOLElBQUksRUFBRSxDQUFjO1FBQ2xESCxDQUFDLENBQUMsQ0FBMkIsNEJBQUVHLElBQUk7UUFDbkMsRUFBRSxFQUFFLEtBQUssQ0FBQ08sUUFBRSxTQUFDQyxVQUFVLENBQUNKLFFBQVEsR0FBRyxDQUFDO1lBQ2xDLEtBQUssQ0FBQ0ssV0FBVyxHQUFHLEtBQUssS0FBQ0MsZ0JBQWtCLHFCQUFDVixJQUFJO1lBRWpELEVBQW9FLEFBQXBFLGtFQUFvRTtZQUNwRSxFQUFrQyxBQUFsQyxnQ0FBa0M7WUFDbEMsR0FBRyxDQUFDLENBQUM7Z0JBQ0gsS0FBSyxLQUFDVyxnQkFBa0IscUJBQUNYLElBQUksRUFBRVMsV0FBVztZQUM1QyxDQUFDLENBQUMsS0FBSyxFQUFFRyxHQUFHLEVBQUUsQ0FBQztnQkFDYixFQUFFLEVBQUVBLEdBQUcsWUFBWUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCWCxTQUFTLEdBQUdVLEdBQUcsQ0FBQ0UsT0FBTztnQkFDekIsQ0FBQztZQUNILENBQUM7WUFFRCxFQUFFLEVBQUVMLFdBQVcsQ0FBQ00sTUFBTSxJQUFJTixXQUFXLENBQUNNLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7Z0JBQ25EbkIsQ0FBQyxDQUFDLENBQWlELGtEQUFFTyxRQUFRO2dCQUM3RCxNQUFNLENBQUNKLElBQUk7WUFDYixDQUFDO1lBRURDLFlBQVksR0FBR0QsSUFBSTtRQUNyQixDQUFDO1FBQ0RBLElBQUksR0FBR0ssS0FBSSxTQUFDWSxPQUFPLENBQUNqQixJQUFJO0lBQzFCLENBQUM7SUFDRCxFQUFFLEVBQUVDLFlBQVksRUFBRSxDQUFDO1FBQ2pCSixDQUFDLENBQUMsQ0FBMkQsNERBQUVJLFlBQVk7UUFDM0UsTUFBTSxDQUFDQSxZQUFZO0lBQ3JCLENBQUM7SUFDRCxFQUFFLEVBQUVDLFNBQVMsRUFBRSxDQUFDO1FBQ2QsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSTtBQUNiLENBQUMifQ==