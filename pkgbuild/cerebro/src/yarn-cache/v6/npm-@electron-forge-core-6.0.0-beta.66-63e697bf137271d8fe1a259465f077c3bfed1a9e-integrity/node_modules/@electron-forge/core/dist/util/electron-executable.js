"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = locateElectronExecutable;
exports.pluginCompileExists = pluginCompileExists;
var _chalk = _interopRequireDefault(require("chalk"));
var _logSymbols = _interopRequireDefault(require("log-symbols"));
var _path = _interopRequireDefault(require("path"));
var _electronVersion = require("./electron-version");
async function locateElectronExecutable(dir, packageJSON) {
    let electronModulePath = await (0, _electronVersion).getElectronModulePath(dir, packageJSON);
    if ((electronModulePath === null || electronModulePath === void 0 ? void 0 : electronModulePath.endsWith('electron-prebuilt-compile')) && !pluginCompileExists(packageJSON)) {
        // eslint-disable-next-line no-console
        console.warn(_logSymbols.default.warning, _chalk.default.yellow('WARNING: found electron-prebuilt-compile without the Electron Forge compile plugin. Please remove the deprecated electron-prebuilt-compile from your devDependencies.'));
        electronModulePath = undefined;
    }
    // eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-dynamic-require, global-require
    let electronExecPath = require(electronModulePath || _path.default.resolve(dir, 'node_modules/electron'));
    if (typeof electronExecPath !== 'string') {
        // eslint-disable-next-line no-console
        console.warn(_logSymbols.default.warning, 'Returned Electron executable path is not a string, defaulting to a hardcoded location. Value:', electronExecPath);
        // eslint-disable-next-line import/no-dynamic-require, global-require
        electronExecPath = require(_path.default.resolve(dir, 'node_modules/electron'));
    }
    return electronExecPath;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function pluginCompileExists(packageJSON) {
    if (!packageJSON.devDependencies) {
        return false;
    }
    const pluginCompileName = '@electron-forge/plugin-compile';
    const findPluginCompile = (packageName)=>packageName === pluginCompileName
    ;
    if (Object.keys(packageJSON.devDependencies).find(findPluginCompile)) {
        return true;
    }
    if (Object.keys(packageJSON.dependencies || {}).find(findPluginCompile)) {
        // eslint-disable-next-line no-console
        console.warn(_logSymbols.default.warning, _chalk.default.yellow(`${pluginCompileName} was detected in dependencies, it should be in devDependencies`));
        return true;
    }
    return false;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2VsZWN0cm9uLWV4ZWN1dGFibGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBsb2dTeW1ib2xzIGZyb20gJ2xvZy1zeW1ib2xzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBnZXRFbGVjdHJvbk1vZHVsZVBhdGggfSBmcm9tICcuL2VsZWN0cm9uLXZlcnNpb24nO1xuXG50eXBlIFBhY2thZ2VKU09OID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG50eXBlIERlcGVuZGVuY2llcyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbmV4cG9ydCBmdW5jdGlvbiBwbHVnaW5Db21waWxlRXhpc3RzKHBhY2thZ2VKU09OOiBQYWNrYWdlSlNPTik6IGJvb2xlYW4ge1xuICBpZiAoIXBhY2thZ2VKU09OLmRldkRlcGVuZGVuY2llcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHBsdWdpbkNvbXBpbGVOYW1lID0gJ0BlbGVjdHJvbi1mb3JnZS9wbHVnaW4tY29tcGlsZSc7XG4gIGNvbnN0IGZpbmRQbHVnaW5Db21waWxlID0gKHBhY2thZ2VOYW1lOiBzdHJpbmcpOiBib29sZWFuID0+IHBhY2thZ2VOYW1lID09PSBwbHVnaW5Db21waWxlTmFtZTtcblxuICBpZiAoT2JqZWN0LmtleXMocGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzIGFzIERlcGVuZGVuY2llcykuZmluZChmaW5kUGx1Z2luQ29tcGlsZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cygocGFja2FnZUpTT04uZGVwZW5kZW5jaWVzIGFzIERlcGVuZGVuY2llcykgfHwge30pLmZpbmQoZmluZFBsdWdpbkNvbXBpbGUpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4obG9nU3ltYm9scy53YXJuaW5nLCBjaGFsay55ZWxsb3coYCR7cGx1Z2luQ29tcGlsZU5hbWV9IHdhcyBkZXRlY3RlZCBpbiBkZXBlbmRlbmNpZXMsIGl0IHNob3VsZCBiZSBpbiBkZXZEZXBlbmRlbmNpZXNgKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGxvY2F0ZUVsZWN0cm9uRXhlY3V0YWJsZShkaXI6IHN0cmluZywgcGFja2FnZUpTT046IFBhY2thZ2VKU09OKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbGV0IGVsZWN0cm9uTW9kdWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXdhaXQgZ2V0RWxlY3Ryb25Nb2R1bGVQYXRoKGRpciwgcGFja2FnZUpTT04pO1xuICBpZiAoZWxlY3Ryb25Nb2R1bGVQYXRoPy5lbmRzV2l0aCgnZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZScpICYmICFwbHVnaW5Db21waWxlRXhpc3RzKHBhY2thZ2VKU09OKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgbG9nU3ltYm9scy53YXJuaW5nLFxuICAgICAgY2hhbGsueWVsbG93KFxuICAgICAgICAnV0FSTklORzogZm91bmQgZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZSB3aXRob3V0IHRoZSBFbGVjdHJvbiBGb3JnZSBjb21waWxlIHBsdWdpbi4gUGxlYXNlIHJlbW92ZSB0aGUgZGVwcmVjYXRlZCBlbGVjdHJvbi1wcmVidWlsdC1jb21waWxlIGZyb20geW91ciBkZXZEZXBlbmRlbmNpZXMuJ1xuICAgICAgKVxuICAgICk7XG4gICAgZWxlY3Ryb25Nb2R1bGVQYXRoID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMsIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmUsIGdsb2JhbC1yZXF1aXJlXG4gIGxldCBlbGVjdHJvbkV4ZWNQYXRoID0gcmVxdWlyZShlbGVjdHJvbk1vZHVsZVBhdGggfHwgcGF0aC5yZXNvbHZlKGRpciwgJ25vZGVfbW9kdWxlcy9lbGVjdHJvbicpKTtcblxuICBpZiAodHlwZW9mIGVsZWN0cm9uRXhlY1BhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4obG9nU3ltYm9scy53YXJuaW5nLCAnUmV0dXJuZWQgRWxlY3Ryb24gZXhlY3V0YWJsZSBwYXRoIGlzIG5vdCBhIHN0cmluZywgZGVmYXVsdGluZyB0byBhIGhhcmRjb2RlZCBsb2NhdGlvbi4gVmFsdWU6JywgZWxlY3Ryb25FeGVjUGF0aCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmUsIGdsb2JhbC1yZXF1aXJlXG4gICAgZWxlY3Ryb25FeGVjUGF0aCA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKGRpciwgJ25vZGVfbW9kdWxlcy9lbGVjdHJvbicpKTtcbiAgfVxuXG4gIHJldHVybiBlbGVjdHJvbkV4ZWNQYXRoO1xufVxuIl0sIm5hbWVzIjpbImxvY2F0ZUVsZWN0cm9uRXhlY3V0YWJsZSIsInBsdWdpbkNvbXBpbGVFeGlzdHMiLCJkaXIiLCJwYWNrYWdlSlNPTiIsImVsZWN0cm9uTW9kdWxlUGF0aCIsImdldEVsZWN0cm9uTW9kdWxlUGF0aCIsImVuZHNXaXRoIiwiY29uc29sZSIsIndhcm4iLCJsb2dTeW1ib2xzIiwid2FybmluZyIsImNoYWxrIiwieWVsbG93IiwidW5kZWZpbmVkIiwiZWxlY3Ryb25FeGVjUGF0aCIsInJlcXVpcmUiLCJwYXRoIiwicmVzb2x2ZSIsImRldkRlcGVuZGVuY2llcyIsInBsdWdpbkNvbXBpbGVOYW1lIiwiZmluZFBsdWdpbkNvbXBpbGUiLCJw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