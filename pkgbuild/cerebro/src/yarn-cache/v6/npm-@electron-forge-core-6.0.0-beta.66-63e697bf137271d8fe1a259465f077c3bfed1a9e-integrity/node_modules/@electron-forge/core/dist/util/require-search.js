"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.requireSearchRaw = requireSearchRaw;
exports.default = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:require-search');
function requireSearchRaw(relativeTo, paths) {
    const testPaths = paths.concat(paths.map((mapPath)=>_path.default.resolve(relativeTo, mapPath)
    )).concat(paths.map((mapPath)=>_path.default.resolve(relativeTo, 'node_modules', mapPath)
    ));
    d('searching', testPaths, 'relative to', relativeTo);
    for (const testPath of testPaths){
        try {
            d('testing', testPath);
            // eslint-disable-next-line global-require, import/no-dynamic-require
            return require(testPath);
        } catch (err) {
            if (err instanceof Error) {
                const requireErr = err;
                // Ignore require-related errors
                if (requireErr.code !== 'MODULE_NOT_FOUND' || ![
                    undefined,
                    testPath
                ].includes(requireErr.requestPath)) {
                    throw err;
                }
            }
        }
    }
    d('failed to find a module in', testPaths);
    return null;
}
var _default = (relativeTo, paths)=>{
    const result = requireSearchRaw(relativeTo, paths);
    return typeof result === 'object' && result && result.default ? result.default : result;
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3JlcXVpcmUtc2VhcmNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpyZXF1aXJlLXNlYXJjaCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9kYTBlZGUxYWQ1NWE1MDJhMjViNDEzOWY1OGFhYjNmYjFlZTNiZjNmL2xpYi9pbnRlcm5hbC9tb2R1bGVzL2Nqcy9sb2FkZXIuanMjTDM1My1MMzU5XG50eXBlIFJlcXVpcmVFcnJvciA9IEVycm9yICYge1xuICBjb2RlOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgcmVxdWVzdFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlU2VhcmNoUmF3PFQ+KHJlbGF0aXZlVG86IHN0cmluZywgcGF0aHM6IHN0cmluZ1tdKTogVCB8IG51bGwge1xuICBjb25zdCB0ZXN0UGF0aHMgPSBwYXRoc1xuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgbWFwUGF0aCkpKVxuICAgIC5jb25jYXQocGF0aHMubWFwKChtYXBQYXRoKSA9PiBwYXRoLnJlc29sdmUocmVsYXRpdmVUbywgJ25vZGVfbW9kdWxlcycsIG1hcFBhdGgpKSk7XG4gIGQoJ3NlYXJjaGluZycsIHRlc3RQYXRocywgJ3JlbGF0aXZlIHRvJywgcmVsYXRpdmVUbyk7XG4gIGZvciAoY29uc3QgdGVzdFBhdGggb2YgdGVzdFBhdGhzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGQoJ3Rlc3RpbmcnLCB0ZXN0UGF0aCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmUsIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmVcbiAgICAgIHJldHVybiByZXF1aXJlKHRlc3RQYXRoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBjb25zdCByZXF1aXJlRXJyID0gZXJyIGFzIFJlcXVpcmVFcnJvcjtcbiAgICAgICAgLy8gSWdub3JlIHJlcXVpcmUtcmVsYXRlZCBlcnJvcnNcbiAgICAgICAgaWYgKHJlcXVpcmVFcnIuY29kZSAhPT0gJ01PRFVMRV9OT1RfRk9VTkQnIHx8ICFbdW5kZWZpbmVkLCB0ZXN0UGF0aF0uaW5jbHVkZXMocmVxdWlyZUVyci5yZXF1ZXN0UGF0aCkpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZCgnZmFpbGVkIHRvIGZpbmQgYSBtb2R1bGUgaW4nLCB0ZXN0UGF0aHMpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgUG9zc2libGVNb2R1bGU8VD4gPSB7XG4gIGRlZmF1bHQ/OiBUO1xufSAmIFQ7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1wYXJlbnNcbmV4cG9ydCBkZWZhdWx0IDxUPihyZWxhdGl2ZVRvOiBzdHJpbmcsIHBhdGhzOiBzdHJpbmdbXSk6IFQgfCBudWxsID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gcmVxdWlyZVNlYXJjaFJhdzxQb3NzaWJsZU1vZHVsZTxUPj4ocmVsYXRpdmVUbywgcGF0aHMpO1xuICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdC5kZWZhdWx0ID8gcmVzdWx0LmRlZmF1bHQgOiAocmVzdWx0IGFzIFQgfCBudWxsKTtcbn07XG4iXSwibmFtZXMiOlsicmVxdWlyZVNlYXJjaFJhdyIsImQiLCJkZWJ1ZyIsInJlbGF0aXZlVG8iLCJwYXRocyIsInRlc3RQYXRocyIsImNvbmNhdCIsIm1hcCIsIm1hcFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsInRlc3RQYXRoIiwicmVxdWlyZSIsImVyciIsIkVycm9yIiwicmVxdWlyZUVyciIsImNvZGUiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsInJlcXVlc3RQYXRoIiwicmVzdWx0IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7OztRQVlnQkEsZ0JBQWdCLEdBQWhCQSxnQkFBZ0I7O0FBWmQsR0FBTyxDQUFQLE1BQU87QUFDUixHQUFNLENBQU4sS0FBTTs7Ozs7O0FBRXZCLEtBQUssQ0FBQ0MsQ0FBQyxPQUFHQyxNQUFLLFVBQUMsQ0FBK0I7U0FTL0JGLGdCQUFnQixDQUFJRyxVQUFrQixFQUFFQyxLQUFlLEVBQVksQ0FBQztJQUNsRixLQUFLLENBQUNDLFNBQVMsR0FBR0QsS0FBSyxDQUNwQkUsTUFBTSxDQUFDRixLQUFLLENBQUNHLEdBQUcsRUFBRUMsT0FBTyxHQUFLQyxLQUFJLFNBQUNDLE9BQU8sQ0FBQ1AsVUFBVSxFQUFFSyxPQUFPO09BQzlERixNQUFNLENBQUNGLEtBQUssQ0FBQ0csR0FBRyxFQUFFQyxPQUFPLEdBQUtDLEtBQUksU0FBQ0MsT0FBTyxDQUFDUCxVQUFVLEVBQUUsQ0FBYyxlQUFFSyxPQUFPOztJQUNqRlAsQ0FBQyxDQUFDLENBQVcsWUFBRUksU0FBUyxFQUFFLENBQWEsY0FBRUYsVUFBVTtJQUNuRCxHQUFHLEVBQUUsS0FBSyxDQUFDUSxRQUFRLElBQUlOLFNBQVMsQ0FBRSxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxDQUFDO1lBQ0hKLENBQUMsQ0FBQyxDQUFTLFVBQUVVLFFBQVE7WUFDckIsRUFBcUUsQUFBckUsbUVBQXFFO1lBQ3JFLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDRCxRQUFRO1FBQ3pCLENBQUMsQ0FBQyxLQUFLLEVBQUVFLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxFQUFFQSxHQUFHLFlBQVlDLEtBQUssRUFBRSxDQUFDO2dCQUN6QixLQUFLLENBQUNDLFVBQVUsR0FBR0YsR0FBRztnQkFDdEIsRUFBZ0MsQUFBaEMsOEJBQWdDO2dCQUNoQyxFQUFFLEVBQUVFLFVBQVUsQ0FBQ0MsSUFBSSxLQUFLLENBQWtCLHNCQUFLLENBQUNDO29CQUFBQSxTQUFTO29CQUFFTixRQUFRO2dCQUFBLENBQUMsQ0FBQ08sUUFBUSxDQUFDSCxVQUFVLENBQUNJLFdBQVcsR0FBRyxDQUFDO29CQUN0RyxLQUFLLENBQUNOLEdBQUc7Z0JBQ1gsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNEWixDQUFDLENBQUMsQ0FBNEIsNkJBQUVJLFNBQVM7SUFDekMsTUFBTSxDQUFDLElBQUk7QUFDYixDQUFDO2dCQU9rQkYsVUFBa0IsRUFBRUMsS0FBZSxHQUFlLENBQUM7SUFDcEUsS0FBSyxDQUFDZ0IsTUFBTSxHQUFHcEIsZ0JBQWdCLENBQW9CRyxVQUFVLEVBQUVDLEtBQUs7SUFDcEUsTUFBTSxDQUFDLE1BQU0sQ0FBQ2dCLE1BQU0sS0FBSyxDQUFRLFdBQUlBLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxPQUFPLEdBQUdELE1BQU0sQ0FBQ0MsT0FBTyxHQUFJRCxNQUFNO0FBQzFGLENBQUMifQ==