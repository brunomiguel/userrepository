"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.downloadToFile = downloadToFile;
var fs = _interopRequireWildcard(require("fs-extra"));
var _got = _interopRequireWildcard(require("got"));
var path = _interopRequireWildcard(require("path"));
var _progress = _interopRequireDefault(require("progress"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const PROGRESS_BAR_DELAY_IN_SECONDS = 30;
async function downloadToFile(targetFilePath, url) {
    let downloadCompleted = false;
    let bar;
    let progressPercent;
    await fs.mkdirp(path.dirname(targetFilePath));
    const writeStream = fs.createWriteStream(targetFilePath);
    const start = new Date();
    const timeout = setTimeout(()=>{
        if (!downloadCompleted) {
            bar = new _progress.default(`Downloading ${path.basename(url)}: [:bar] :percent ETA: :eta seconds `, {
                curr: progressPercent,
                total: 100
            });
            // https://github.com/visionmedia/node-progress/issues/159
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (bar).start = start;
        }
    }, PROGRESS_BAR_DELAY_IN_SECONDS * 1000);
    await new Promise((resolve, reject)=>{
        const downloadStream = _got.default.stream(url);
        downloadStream.on('downloadProgress', async (progress)=>{
            progressPercent = progress.percent;
            if (bar) {
                bar.update(progress.percent);
            }
        });
        downloadStream.on('error', (error)=>{
            if (error instanceof _got.HTTPError && error.response.statusCode === 404) {
                error.message += ` for ${error.response.url}`;
            }
            if (writeStream.destroy) {
                writeStream.destroy(error);
            }
            reject(error);
        });
        writeStream.on('error', (error)=>reject(error)
        );
        writeStream.on('close', ()=>resolve()
        );
        downloadStream.pipe(writeStream);
    });
    downloadCompleted = true;
    if (timeout) {
        clearTimeout(timeout);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rvd25sb2FkLXRvLWZpbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGdvdCwgeyBIVFRQRXJyb3IgfSBmcm9tICdnb3QnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBQcm9ncmVzc0JhciBmcm9tICdwcm9ncmVzcyc7XG5cbmNvbnN0IFBST0dSRVNTX0JBUl9ERUxBWV9JTl9TRUNPTkRTID0gMzA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb3dubG9hZFRvRmlsZSh0YXJnZXRGaWxlUGF0aDogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBsZXQgZG93bmxvYWRDb21wbGV0ZWQgPSBmYWxzZTtcbiAgbGV0IGJhcjogUHJvZ3Jlc3NCYXIgfCB1bmRlZmluZWQ7XG4gIGxldCBwcm9ncmVzc1BlcmNlbnQ6IG51bWJlcjtcbiAgYXdhaXQgZnMubWtkaXJwKHBhdGguZGlybmFtZSh0YXJnZXRGaWxlUGF0aCkpO1xuICBjb25zdCB3cml0ZVN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHRhcmdldEZpbGVQYXRoKTtcblxuICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWRvd25sb2FkQ29tcGxldGVkKSB7XG4gICAgICBiYXIgPSBuZXcgUHJvZ3Jlc3NCYXIoYERvd25sb2FkaW5nICR7cGF0aC5iYXNlbmFtZSh1cmwpfTogWzpiYXJdIDpwZXJjZW50IEVUQTogOmV0YSBzZWNvbmRzIGAsIHtcbiAgICAgICAgY3VycjogcHJvZ3Jlc3NQZXJjZW50LFxuICAgICAgICB0b3RhbDogMTAwLFxuICAgICAgfSk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmlzaW9ubWVkaWEvbm9kZS1wcm9ncmVzcy9pc3N1ZXMvMTU5XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgKGJhciBhcyBhbnkpLnN0YXJ0ID0gc3RhcnQ7XG4gICAgfVxuICB9LCBQUk9HUkVTU19CQVJfREVMQVlfSU5fU0VDT05EUyAqIDEwMDApO1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBkb3dubG9hZFN0cmVhbSA9IGdvdC5zdHJlYW0odXJsKTtcbiAgICBkb3dubG9hZFN0cmVhbS5vbignZG93bmxvYWRQcm9ncmVzcycsIGFzeW5jIChwcm9ncmVzcykgPT4ge1xuICAgICAgcHJvZ3Jlc3NQZXJjZW50ID0gcHJvZ3Jlc3MucGVyY2VudDtcbiAgICAgIGlmIChiYXIpIHtcbiAgICAgICAgYmFyLnVwZGF0ZShwcm9ncmVzcy5wZXJjZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkb3dubG9hZFN0cmVhbS5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEhUVFBFcnJvciAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSBgIGZvciAke2Vycm9yLnJlc3BvbnNlLnVybH1gO1xuICAgICAgfVxuICAgICAgaWYgKHdyaXRlU3RyZWFtLmRlc3Ryb3kpIHtcbiAgICAgICAgd3JpdGVTdHJlYW0uZGVzdHJveShlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gICAgd3JpdGVTdHJlYW0ub24oJ2Vycm9yJywgKGVycm9yKSA9PiByZWplY3QoZXJyb3IpKTtcbiAgICB3cml0ZVN0cmVhbS5vbignY2xvc2UnLCAoKSA9PiByZXNvbHZlKCkpO1xuXG4gICAgZG93bmxvYWRTdHJlYW0ucGlwZSh3cml0ZVN0cmVhbSk7XG4gIH0pO1xuXG4gIGRvd25sb2FkQ29tcGxldGVkID0gdHJ1ZTtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkb3dubG9hZFRvRmlsZSIsImZzIiwicGF0aCIsIlBST0dSRVNTX0JBUl9ERUxBWV9JTl9TRUNPTkRTIiwidGFyZ2V0RmlsZVBhdGgiLCJ1cmwiLCJkb3dubG9hZENvbXBsZXRlZCIsImJhciIsInByb2dyZXNzUGVyY2VudCIsIm1rZGlycCIsImRpcm5hbWUiLCJ3cml0ZVN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwic3RhcnQiLCJEYXRlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJQcm9ncmVzc0JhciIsImJhc2VuYW1lIiwiY3VyciIsInRvdGFsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkb3dubG9hZFN0cmVhbSIsImdvdCIsInN0cmVhbSIsIm9uIiwicHJvZ3Jlc3MiLCJwZXJjZW50IiwidXBkYXRlIiwiZXJyb3IiLCJIVFRQRXJyb3IiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwiZGVzdHJveSIsInBpcGUiLCJjbGVhclRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7UUFPc0JBLGNBQWMsR0FBZEEsY0FBYztBQVB4QkMsR0FBRSxDQUFGQSxFQUFFO0FBQ2lCLEdBQUssQ0FBTCxJQUFLO0FBQ3hCQyxHQUFJLENBQUpBLElBQUk7QUFDUSxHQUFVLENBQVYsU0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWxDLEtBQUssQ0FBQ0MsNkJBQTZCLEdBQUcsRUFBRTtlQUVsQkgsY0FBYyxDQUFDSSxjQUFzQixFQUFFQyxHQUFXLEVBQWlCLENBQUM7SUFDeEYsR0FBRyxDQUFDQyxpQkFBaUIsR0FBRyxLQUFLO0lBQzdCLEdBQUcsQ0FBQ0MsR0FBRztJQUNQLEdBQUcsQ0FBQ0MsZUFBZTtJQUNuQixLQUFLLENBQUNQLEVBQUUsQ0FBQ1EsTUFBTSxDQUFDUCxJQUFJLENBQUNRLE9BQU8sQ0FBQ04sY0FBYztJQUMzQyxLQUFLLENBQUNPLFdBQVcsR0FBR1YsRUFBRSxDQUFDVyxpQkFBaUIsQ0FBQ1IsY0FBYztJQUV2RCxLQUFLLENBQUNTLEtBQUssR0FBRyxHQUFHLENBQUNDLElBQUk7SUFDdEIsS0FBSyxDQUFDQyxPQUFPLEdBQUdDLFVBQVUsS0FBTyxDQUFDO1FBQ2hDLEVBQUUsR0FBR1YsaUJBQWlCLEVBQUUsQ0FBQztZQUN2QkMsR0FBRyxHQUFHLEdBQUcsQ0FBQ1UsU0FBVyxVQUFFLFlBQVksRUFBRWYsSUFBSSxDQUFDZ0IsUUFBUSxDQUFDYixHQUFHLEVBQUUsb0NBQW9DLEdBQUcsQ0FBQztnQkFDOUZjLElBQUksRUFBRVgsZUFBZTtnQkFDckJZLEtBQUssRUFBRSxHQUFHO1lBQ1osQ0FBQztZQUNELEVBQTBELEFBQTFELHdEQUEwRDtZQUMxRCxFQUE4RCxBQUE5RCw0REFBOEQ7YUFDN0RiLEdBQUcsRUFBU00sS0FBSyxHQUFHQSxLQUFLO1FBQzVCLENBQUM7SUFDSCxDQUFDLEVBQUVWLDZCQUE2QixHQUFHLElBQUk7SUFFdkMsS0FBSyxDQUFDLEdBQUcsQ0FBQ2tCLE9BQU8sRUFBUUMsT0FBTyxFQUFFQyxNQUFNLEdBQUssQ0FBQztRQUM1QyxLQUFLLENBQUNDLGNBQWMsR0FBR0MsSUFBRyxTQUFDQyxNQUFNLENBQUNyQixHQUFHO1FBQ3JDbUIsY0FBYyxDQUFDRyxFQUFFLENBQUMsQ0FBa0IsMEJBQVNDLFFBQVEsR0FBSyxDQUFDO1lBQ3pEcEIsZUFBZSxHQUFHb0IsUUFBUSxDQUFDQyxPQUFPO1lBQ2xDLEVBQUUsRUFBRXRCLEdBQUcsRUFBRSxDQUFDO2dCQUNSQSxHQUFHLENBQUN1QixNQUFNLENBQUNGLFFBQVEsQ0FBQ0MsT0FBTztZQUM3QixDQUFDO1FBQ0gsQ0FBQztRQUNETCxjQUFjLENBQUNHLEVBQUUsQ0FBQyxDQUFPLFNBQUdJLEtBQUssR0FBSyxDQUFDO1lBQ3JDLEVBQUUsRUFBRUEsS0FBSyxZQUFZQyxJQUFTLGNBQUlELEtBQUssQ0FBQ0UsUUFBUSxDQUFDQyxVQUFVLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ3BFSCxLQUFLLENBQUNJLE9BQU8sS0FBSyxLQUFLLEVBQUVKLEtBQUssQ0FBQ0UsUUFBUSxDQUFDNUIsR0FBRztZQUM3QyxDQUFDO1lBQ0QsRUFBRSxFQUFFTSxXQUFXLENBQUN5QixPQUFPLEVBQUUsQ0FBQztnQkFDeEJ6QixXQUFXLENBQUN5QixPQUFPLENBQUNMLEtBQUs7WUFDM0IsQ0FBQztZQUVEUixNQUFNLENBQUNRLEtBQUs7UUFDZCxDQUFDO1FBQ0RwQixXQUFXLENBQUNnQixFQUFFLENBQUMsQ0FBTyxTQUFHSSxLQUFLLEdBQUtSLE1BQU0sQ0FBQ1EsS0FBSzs7UUFDL0NwQixXQUFXLENBQUNnQixFQUFFLENBQUMsQ0FBTyxZQUFRTCxPQUFPOztRQUVyQ0UsY0FBYyxDQUFDYSxJQUFJLENBQUMxQixXQUFXO0lBQ2pDLENBQUM7SUFFREwsaUJBQWlCLEdBQUcsSUFBSTtJQUN4QixFQUFFLEVBQUVTLE9BQU8sRUFBRSxDQUFDO1FBQ1p1QixZQUFZLENBQUN2QixPQUFPO0lBQ3RCLENBQUM7QUFDSCxDQUFDIn0=