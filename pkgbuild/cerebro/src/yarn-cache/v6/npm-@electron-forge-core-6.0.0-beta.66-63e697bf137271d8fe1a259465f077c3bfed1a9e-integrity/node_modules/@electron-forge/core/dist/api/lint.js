"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _debug = _interopRequireDefault(require("debug"));
var _yarnOrNpm = require("../util/yarn-or-npm");
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:lint');
var _default = async ({ dir =process.cwd() , interactive =false  })=>{
    _asyncOra.asyncOra.interactive = interactive;
    let success = true;
    let result = null;
    await (0, _asyncOra).asyncOra('Linting Application', async (lintSpinner)=>{
        const resolvedDir = await (0, _resolveDir).default(dir);
        if (!resolvedDir) {
            throw new Error('Failed to locate lintable Electron application');
        }
        dir = resolvedDir;
        d('executing "run lint" in dir:', dir);
        try {
            await (0, _yarnOrNpm).yarnOrNpmSpawn([
                'run',
                'lint'
            ], {
                stdio: process.platform === 'win32' ? 'inherit' : 'pipe',
                cwd: dir
            });
        } catch (err) {
            lintSpinner.fail();
            success = false;
            result = err;
        }
    });
    if (!success) {
        throw result;
    }
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbGludC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IHlhcm5Pck5wbVNwYXduIH0gZnJvbSAnLi4vdXRpbC95YXJuLW9yLW5wbSc7XG5cbmltcG9ydCByZXNvbHZlRGlyIGZyb20gJy4uL3V0aWwvcmVzb2x2ZS1kaXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmxpbnQnKTtcblxuZXhwb3J0IGludGVyZmFjZSBMaW50T3B0aW9ucyB7XG4gIGRpcj86IHN0cmluZztcbiAgaW50ZXJhY3RpdmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBkaXIgPSBwcm9jZXNzLmN3ZCgpLCBpbnRlcmFjdGl2ZSA9IGZhbHNlIH06IExpbnRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGFzeW5jT3JhLmludGVyYWN0aXZlID0gaW50ZXJhY3RpdmU7XG5cbiAgbGV0IHN1Y2Nlc3MgPSB0cnVlO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICBhd2FpdCBhc3luY09yYSgnTGludGluZyBBcHBsaWNhdGlvbicsIGFzeW5jIChsaW50U3Bpbm5lcikgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVkRGlyID0gYXdhaXQgcmVzb2x2ZURpcihkaXIpO1xuICAgIGlmICghcmVzb2x2ZWREaXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvY2F0ZSBsaW50YWJsZSBFbGVjdHJvbiBhcHBsaWNhdGlvbicpO1xuICAgIH1cblxuICAgIGRpciA9IHJlc29sdmVkRGlyO1xuXG4gICAgZCgnZXhlY3V0aW5nIFwicnVuIGxpbnRcIiBpbiBkaXI6JywgZGlyKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oWydydW4nLCAnbGludCddLCB7XG4gICAgICAgIHN0ZGlvOiBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gJ2luaGVyaXQnIDogJ3BpcGUnLFxuICAgICAgICBjd2Q6IGRpcixcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGludFNwaW5uZXIuZmFpbCgpO1xuICAgICAgc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgcmVzdWx0ID0gZXJyO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFzdWNjZXNzKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImQiLCJkZWJ1ZyIsImRpciIsInByb2Nlc3MiLCJjd2QiLCJpbnRlcmFjdGl2ZSIsImFzeW5jT3JhIiwic3VjY2VzcyIsInJlc3VsdCIsImxpbnRTcGlubmVyIiwicmVzb2x2ZWREaXIiLCJyZXNvbHZlRGlyIiwiRXJyb3IiLCJ5YXJuT3JOcG1TcGF3biIsInN0ZGlvIiwicGxhdGZvcm0iLCJlcnIiLCJmYWlsIl0sIm1hcHBpbmdzIjoiOzs7OztBQUF5QixHQUEyQixDQUEzQixTQUEyQjtBQUNsQyxHQUFPLENBQVAsTUFBTztBQUNNLEdBQXFCLENBQXJCLFVBQXFCO0FBRTdCLEdBQXFCLENBQXJCLFdBQXFCOzs7Ozs7QUFFNUMsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFxQjtzQkFPZixDQUFDLENBQUNDLEdBQUcsRUFBR0MsT0FBTyxDQUFDQyxHQUFHLEtBQUlDLFdBQVcsRUFBRyxLQUFLLEVBQWMsQ0FBQyxHQUFvQixDQUFDO0lBQ2xHQyxTQUFRLFVBQUNELFdBQVcsR0FBR0EsV0FBVztJQUVsQyxHQUFHLENBQUNFLE9BQU8sR0FBRyxJQUFJO0lBQ2xCLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLElBQUk7SUFFakIsS0FBSyxLQUFDRixTQUFRLFdBQUMsQ0FBcUIsNkJBQVNHLFdBQVcsR0FBSyxDQUFDO1FBQzVELEtBQUssQ0FBQ0MsV0FBVyxHQUFHLEtBQUssS0FBQ0MsV0FBVSxVQUFDVCxHQUFHO1FBQ3hDLEVBQUUsR0FBR1EsV0FBVyxFQUFFLENBQUM7WUFDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDLENBQWdEO1FBQ2xFLENBQUM7UUFFRFYsR0FBRyxHQUFHUSxXQUFXO1FBRWpCVixDQUFDLENBQUMsQ0FBOEIsK0JBQUVFLEdBQUc7UUFDckMsR0FBRyxDQUFDLENBQUM7WUFDSCxLQUFLLEtBQUNXLFVBQWMsaUJBQUMsQ0FBQztnQkFBQSxDQUFLO2dCQUFFLENBQU07WUFBQSxDQUFDLEVBQUUsQ0FBQztnQkFDckNDLEtBQUssRUFBRVgsT0FBTyxDQUFDWSxRQUFRLEtBQUssQ0FBTyxTQUFHLENBQVMsV0FBRyxDQUFNO2dCQUN4RFgsR0FBRyxFQUFFRixHQUFHO1lBQ1YsQ0FBQztRQUNILENBQUMsQ0FBQyxLQUFLLEVBQUVjLEdBQUcsRUFBRSxDQUFDO1lBQ2JQLFdBQVcsQ0FBQ1EsSUFBSTtZQUNoQlYsT0FBTyxHQUFHLEtBQUs7WUFDZkMsTUFBTSxHQUFHUSxHQUFHO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFFRCxFQUFFLEdBQUdULE9BQU8sRUFBRSxDQUFDO1FBQ2IsS0FBSyxDQUFDQyxNQUFNO0lBQ2QsQ0FBQztBQUNILENBQUMifQ==