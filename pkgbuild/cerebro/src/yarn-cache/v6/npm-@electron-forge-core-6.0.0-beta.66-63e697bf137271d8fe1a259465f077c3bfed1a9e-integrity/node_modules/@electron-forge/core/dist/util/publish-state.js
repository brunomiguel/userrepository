"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const EXTENSION = '.forge.publish';
class PublishState {
    static async loadFromDirectory(directory, rootDir) {
        if (!await _fsExtra.default.pathExists(directory)) {
            throw new Error(`Attempted to load publish state from a missing directory: ${directory}`);
        }
        const publishes = [];
        for (const dirName of (await _fsExtra.default.readdir(directory))){
            const subDir = _path.default.resolve(directory, dirName);
            const states = [];
            if ((await _fsExtra.default.stat(subDir)).isDirectory()) {
                const filePaths = (await _fsExtra.default.readdir(subDir)).filter((fileName)=>fileName.endsWith(EXTENSION)
                ).map((fileName)=>_path.default.resolve(subDir, fileName)
                );
                for (const filePath of filePaths){
                    const state = new PublishState(filePath);
                    await state.load();
                    state.state.artifacts = state.state.artifacts.map((artifactPath)=>_path.default.resolve(rootDir, artifactPath)
                    );
                    states.push(state);
                }
            }
            publishes.push(states);
        }
        return publishes;
    }
    static async saveToDirectory(directory, artifacts, rootDir) {
        const id = _crypto.default.createHash('SHA256').update(JSON.stringify(artifacts)).digest('hex');
        for (const artifact of artifacts){
            artifact.artifacts = artifact.artifacts.map((artifactPath)=>_path.default.relative(rootDir, artifactPath)
            );
            const publishState = new PublishState(_path.default.resolve(directory, id, 'null'), false);
            publishState.state = artifact;
            await publishState.saveToDisk();
        }
    }
    constructor(filePath, hasHash = true){
        this.state = {};
        this.dir = _path.default.dirname(filePath);
        this.path = filePath;
        this.hasHash = hasHash;
    }
    generateHash() {
        const content = JSON.stringify(this.state || {});
        return _crypto.default.createHash('SHA256').update(content).digest('hex');
    }
    async load() {
        this.state = await _fsExtra.default.readJson(this.path);
    }
    async saveToDisk() {
        if (!this.hasHash) {
            this.path = _path.default.resolve(this.dir, `${this.generateHash()}${EXTENSION}`);
            this.hasHash = true;
        }
        await _fsExtra.default.mkdirs(_path.default.dirname(this.path));
        await _fsExtra.default.writeJson(this.path, this.state);
    }
}
exports.default = PublishState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3B1Ymxpc2gtc3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VNYWtlUmVzdWx0IH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IEVYVEVOU0lPTiA9ICcuZm9yZ2UucHVibGlzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1Ymxpc2hTdGF0ZSB7XG4gIHN0YXRpYyBhc3luYyBsb2FkRnJvbURpcmVjdG9yeShkaXJlY3Rvcnk6IHN0cmluZywgcm9vdERpcjogc3RyaW5nKTogUHJvbWlzZTxQdWJsaXNoU3RhdGVbXVtdPiB7XG4gICAgaWYgKCEoYXdhaXQgZnMucGF0aEV4aXN0cyhkaXJlY3RvcnkpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gbG9hZCBwdWJsaXNoIHN0YXRlIGZyb20gYSBtaXNzaW5nIGRpcmVjdG9yeTogJHtkaXJlY3Rvcnl9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHVibGlzaGVzOiBQdWJsaXNoU3RhdGVbXVtdID0gW107XG4gICAgZm9yIChjb25zdCBkaXJOYW1lIG9mIGF3YWl0IGZzLnJlYWRkaXIoZGlyZWN0b3J5KSkge1xuICAgICAgY29uc3Qgc3ViRGlyID0gcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgZGlyTmFtZSk7XG4gICAgICBjb25zdCBzdGF0ZXM6IFB1Ymxpc2hTdGF0ZVtdID0gW107XG5cbiAgICAgIGlmICgoYXdhaXQgZnMuc3RhdChzdWJEaXIpKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRocyA9IChhd2FpdCBmcy5yZWFkZGlyKHN1YkRpcikpLmZpbHRlcigoZmlsZU5hbWUpID0+IGZpbGVOYW1lLmVuZHNXaXRoKEVYVEVOU0lPTikpLm1hcCgoZmlsZU5hbWUpID0+IHBhdGgucmVzb2x2ZShzdWJEaXIsIGZpbGVOYW1lKSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBmaWxlUGF0aCBvZiBmaWxlUGF0aHMpIHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IG5ldyBQdWJsaXNoU3RhdGUoZmlsZVBhdGgpO1xuICAgICAgICAgIGF3YWl0IHN0YXRlLmxvYWQoKTtcbiAgICAgICAgICBzdGF0ZS5zdGF0ZS5hcnRpZmFjdHMgPSBzdGF0ZS5zdGF0ZS5hcnRpZmFjdHMubWFwKChhcnRpZmFjdFBhdGgpID0+IHBhdGgucmVzb2x2ZShyb290RGlyLCBhcnRpZmFjdFBhdGgpKTtcbiAgICAgICAgICBzdGF0ZXMucHVzaChzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1Ymxpc2hlcy5wdXNoKHN0YXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBwdWJsaXNoZXM7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgc2F2ZVRvRGlyZWN0b3J5KGRpcmVjdG9yeTogc3RyaW5nLCBhcnRpZmFjdHM6IEZvcmdlTWFrZVJlc3VsdFtdLCByb290RGlyOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpZCA9IGNyeXB0by5jcmVhdGVIYXNoKCdTSEEyNTYnKS51cGRhdGUoSlNPTi5zdHJpbmdpZnkoYXJ0aWZhY3RzKSkuZGlnZXN0KCdoZXgnKTtcbiAgICBmb3IgKGNvbnN0IGFydGlmYWN0IG9mIGFydGlmYWN0cykge1xuICAgICAgYXJ0aWZhY3QuYXJ0aWZhY3RzID0gYXJ0aWZhY3QuYXJ0aWZhY3RzLm1hcCgoYXJ0aWZhY3RQYXRoKSA9PiBwYXRoLnJlbGF0aXZlKHJvb3REaXIsIGFydGlmYWN0UGF0aCkpO1xuICAgICAgY29uc3QgcHVibGlzaFN0YXRlID0gbmV3IFB1Ymxpc2hTdGF0ZShwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBpZCwgJ251bGwnKSwgZmFsc2UpO1xuICAgICAgcHVibGlzaFN0YXRlLnN0YXRlID0gYXJ0aWZhY3Q7XG4gICAgICBhd2FpdCBwdWJsaXNoU3RhdGUuc2F2ZVRvRGlzaygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGlyOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBwYXRoOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBoYXNIYXNoOiBib29sZWFuO1xuXG4gIHB1YmxpYyBzdGF0ZTogRm9yZ2VNYWtlUmVzdWx0ID0ge30gYXMgRm9yZ2VNYWtlUmVzdWx0O1xuXG4gIGNvbnN0cnVjdG9yKGZpbGVQYXRoOiBzdHJpbmcsIGhhc0hhc2ggPSB0cnVlKSB7XG4gICAgdGhpcy5kaXIgPSBwYXRoLmRpcm5hbWUoZmlsZVBhdGgpO1xuICAgIHRoaXMucGF0aCA9IGZpbGVQYXRoO1xuICAgIHRoaXMuaGFzSGFzaCA9IGhhc0hhc2g7XG4gIH1cblxuICBnZW5lcmF0ZUhhc2goKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSB8fCB7fSk7XG4gICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdTSEEyNTYnKS51cGRhdGUoY29udGVudCkuZGlnZXN0KCdoZXgnKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zdGF0ZSA9IGF3YWl0IGZzLnJlYWRKc29uKHRoaXMucGF0aCk7XG4gIH1cblxuICBhc3luYyBzYXZlVG9EaXNrKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5oYXNIYXNoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5kaXIsIGAke3RoaXMuZ2VuZXJhdGVIYXNoKCl9JHtFWFRFTlNJT059YCk7XG4gICAgICB0aGlzLmhhc0hhc2ggPSB0cnVlO1xuICAgIH1cblxuICAgIGF3YWl0IGZzLm1rZGlycyhwYXRoLmRpcm5hbWUodGhpcy5wYXRoKSk7XG4gICAgYXdhaXQgZnMud3JpdGVKc29uKHRoaXMucGF0aCwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJFWFRFTlNJT04iLCJQdWJsaXNoU3RhdGUiLCJsb2FkRnJvbURpcmVjdG9yeSIsImRpcmVjdG9yeSIsInJvb3REaXIiLCJmcyIsInBhdGhFeGlzdHMiLCJFcnJvciIsInB1Ymxpc2hlcyIsImRpck5hbWUiLCJyZWFkZGlyIiwic3ViRGlyIiwicGF0aCIsInJlc29sdmUiLCJzdGF0ZXMiLCJzdGF0IiwiaXNEaXJlY3RvcnkiLCJmaWxlUGF0aHMiLCJmaWx0ZXIiLCJmaWxlTmFtZSIsImVuZHNXaXRoIiwibWFwIiwiZmlsZVBhdGgiLCJzdGF0ZSIsImxvYWQiLCJhcnRpZmFjdHMiLCJhcnRpZmFjdFBhdGgiLCJwdXNoIiwic2F2ZVRvRGlyZWN0b3J5IiwiaWQiLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRpZ2VzdCIsImFydGlmYWN0IiwicmVsYXRpdmUiLCJwdWJsaXNoU3RhdGUiLCJzYXZlVG9EaXNrIiwiaGFzSGFzaCIsImRpciIsImRpcm5hbWUiLCJnZW5lcmF0ZUhhc2giLCJjb250ZW50IiwicmVhZEpzb24iLCJta2RpcnMiLCJ3cml0ZUpzb24iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ21CLEdBQVEsQ0FBUixPQUFRO0FBQ1osR0FBVSxDQUFWLFFBQVU7QUFDUixHQUFNLENBQU4sS0FBTTs7Ozs7O0FBRXZCLEtBQUssQ0FBQ0EsU0FBUyxHQUFHLENBQWdCO01BRWJDLFlBQVk7aUJBQ2xCQyxpQkFBaUIsQ0FBQ0MsU0FBaUIsRUFBRUMsT0FBZSxFQUE2QixDQUFDO1FBQzdGLEVBQUUsR0FBSSxLQUFLLENBQUNDLFFBQUUsU0FBQ0MsVUFBVSxDQUFDSCxTQUFTLEdBQUksQ0FBQztZQUN0QyxLQUFLLENBQUMsR0FBRyxDQUFDSSxLQUFLLEVBQUUsMERBQTBELEVBQUVKLFNBQVM7UUFDeEYsQ0FBQztRQUVELEtBQUssQ0FBQ0ssU0FBUyxHQUFxQixDQUFDLENBQUM7UUFDdEMsR0FBRyxFQUFFLEtBQUssQ0FBQ0MsT0FB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