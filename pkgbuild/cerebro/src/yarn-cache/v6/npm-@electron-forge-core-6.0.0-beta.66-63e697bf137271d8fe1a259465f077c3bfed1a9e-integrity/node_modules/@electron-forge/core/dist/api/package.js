"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _get = require("@electron/get");
var _fastGlob = _interopRequireDefault(require("fast-glob"));
var _electronPackager = _interopRequireDefault(require("electron-packager"));
var _path = _interopRequireDefault(require("path"));
var _util = require("util");
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _hook = require("../util/hook");
var _messages = require("../util/messages");
var _readPackageJson = require("../util/read-package-json");
var _rebuild = _interopRequireDefault(require("../util/rebuild"));
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _electronVersion = require("../util/electron-version");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:packager');
/**
 * Resolves hooks if they are a path to a file (instead of a `Function`).
 */ function resolveHooks(hooks, dir) {
    if (hooks) {
        return hooks.map((hook)=>typeof hook === 'string' ? (0, _requireSearch).default(dir, [
                hook
            ]) : hook
        );
    }
    return [];
}
/**
 * Runs given hooks sequentially by mapping them to promises and iterating
 * through while awaiting
 */ function sequentialHooks(hooks) {
    return [
        async (buildPath, electronVersion, platform, arch, done)=>{
            for (const hook of hooks){
                await (0, _util).promisify(hook)(buildPath, electronVersion, platform, arch);
            }
            done();
        }, 
    ];
}
var _default = async ({ dir =process.cwd() , interactive =false , arch =(0, _get).getHostArch() , platform =process.platform , outDir  })=>{
    const ora = interactive ? _asyncOra.ora : _asyncOra.fakeOra;
    let prepareSpinner = ora(`Preparing to Package Application for arch: ${_chalk.default.cyan(arch === 'all' ? 'ia32' : arch)}`).start();
    let prepareCounter = 0;
    const resolvedDir = await (0, _resolveDir).default(dir);
    if (!resolvedDir) {
        throw new Error('Failed to locate compilable Electron application');
    }
    dir = resolvedDir;
    const forgeConfig = await (0, _forgeConfig).default(dir);
    const packageJSON = await (0, _readPackageJson).readMutatedPackageJson(dir, forgeConfig);
    if (!packageJSON.main) {
        throw new Error('packageJSON.main must be set to a valid entry point for your Electron app');
    }
    const calculatedOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
    let packagerSpinner;
    const pruneEnabled = !('prune' in forgeConfig.packagerConfig) || forgeConfig.packagerConfig.prune;
    const afterCopyHooks = [
        async (buildPath, electronVersion, pPlatform, pArch, done)=>{
            if (packagerSpinner) {
                packagerSpinner.succeed();
                prepareCounter += 1;
                prepareSpinner = ora(`Preparing to Package Application for arch: ${_chalk.default.cyan(prepareCounter === 2 ? 'armv7l' : 'x64')}`).start();
            }
            const bins = await (0, _fastGlob).default(_path.default.join(buildPath, '**/.bin/**/*'));
            for (const bin of bins){
                await _fsExtra.default.remove(bin);
            }
            done();
        },
        async (buildPath, electronVersion, pPlatform, pArch, done)=>{
            prepareSpinner.succeed();
            await (0, _hook).runHook(forgeConfig, 'packageAfterCopy', buildPath, electronVersion, pPlatform, pArch);
            done();
        },
        async (buildPath, electronVersion, pPlatform, pArch, done)=>{
            await (0, _rebuild).default(buildPath, electronVersion, pPlatform, pArch, forgeConfig.electronRebuildConfig);
            packagerSpinner = ora('Packaging Application').start();
            done();
        }, 
    ];
    afterCopyHooks.push(async (buildPath, electronVersion, pPlatform, pArch, done)=>{
        const copiedPackageJSON = await (0, _readPackageJson).readMutatedPackageJson(buildPath, forgeConfig);
        if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {
            delete copiedPackageJSON.config.forge;
        }
        await _fsExtra.default.writeJson(_path.default.resolve(buildPath, 'package.json'), copiedPackageJSON, {
            spaces: 2
        });
        done();
    });
    afterCopyHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterCopy, dir));
    const afterPruneHooks = [];
    if (pruneEnabled) {
        afterPruneHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterPrune, dir));
    }
    afterPruneHooks.push(async (buildPath, electronVersion, pPlatform, pArch, done)=>{
        await (0, _hook).runHook(forgeConfig, 'packageAfterPrune', buildPath, electronVersion, pPlatform, pArch);
        done();
    });
    const afterExtractHooks = [
        async (buildPath, electronVersion, pPlatform, pArch, done)=>{
            await (0, _hook).runHook(forgeConfig, 'packageAfterExtract', buildPath, electronVersion, pPlatform, pArch);
            done();
        }, 
    ];
    afterExtractHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterExtract, dir));
    const packageOpts = {
        asar: false,
        overwrite: true,
        ...forgeConfig.packagerConfig,
        dir,
        arch: arch,
        platform,
        afterCopy: sequentialHooks(afterCopyHooks),
        afterExtract: sequentialHooks(afterExtractHooks),
        afterPrune: sequentialHooks(afterPruneHooks),
        out: calculatedOutDir,
        electronVersion: await (0, _electronVersion).getElectronVersion(dir, packageJSON)
    };
    packageOpts.quiet = true;
    if (packageOpts.all) {
        throw new Error('config.forge.packagerConfig.all is not supported by Electron Forge');
    }
    if (!packageJSON.version && !packageOpts.appVersion) {
        // eslint-disable-next-line max-len
        (0, _messages).warn(interactive, _chalk.default.yellow('Please set "version" or "config.forge.packagerConfig.appVersion" in your application\'s package.json so auto-updates work properly'));
    }
    if (packageOpts.prebuiltAsar) {
        throw new Error('config.forge.packagerConfig.prebuiltAsar is not supported by Electron Forge');
    }
    await (0, _hook).runHook(forgeConfig, 'generateAssets', platform, arch);
    await (0, _hook).runHook(forgeConfig, 'prePackage', platform, arch);
    d('packaging with options', packageOpts);
    const outputPaths = await (0, _electronPackager).default(packageOpts);
    await (0, _hook).runHook(forgeConfig, 'postPackage', {
        arch,
        outputPaths,
        platform,
        spinner: packagerSpinner
    });
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    if (packagerSpinner) packagerSpinner.succeed();
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,