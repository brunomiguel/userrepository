"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _templateBase = _interopRequireDefault(require("@electron-forge/template-base"));
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _lodash = require("lodash");
var _path = _interopRequireDefault(require("path"));
var _initGit = _interopRequireDefault(require("./init-scripts/init-git"));
var _initNpm = require("./init-scripts/init-npm");
var _electronVersion = require("../util/electron-version");
var _forgeConfig = require("../util/forge-config");
var _messages = require("../util/messages");
var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));
var _readPackageJson = require("../util/read-package-json");
var _upgradeForgeConfig = _interopRequireWildcard(require("../util/upgrade-forge-config"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const d = (0, _debug).default('electron-forge:import');
var _default = async ({ dir =process.cwd() , interactive =false , confirmImport , shouldContinueOnExisting , shouldRemoveDependency , shouldUpdateScript , outDir  })=>{
    const calculatedOutDir = outDir || 'out';
    _asyncOra.asyncOra.interactive = interactive;
    d(`Attempting to import project in: ${dir}`);
    if (!await _fsExtra.default.pathExists(dir) || !await _fsExtra.default.pathExists(_path.default.resolve(dir, 'package.json'))) {
        throw new Error(`We couldn't find a project in: ${dir}`);
    }
    // eslint-disable-next-line max-len
    if (typeof confirmImport === 'function') {
        if (!await confirmImport()) {
            // TODO: figure out if we can just return early here
            // eslint-disable-next-line no-process-exit
            process.exit(0);
        }
    }
    await (0, _initGit).default(dir);
    const importDeps = [].concat(_initNpm.deps);
    let importDevDeps = [].concat(_initNpm.devDeps);
    let importExactDevDeps = [].concat(_initNpm.exactDevDeps);
    let packageJSON = await (0, _readPackageJson).readRawPackageJson(dir);
    if (packageJSON.config && packageJSON.config.forge) {
        if (packageJSON.config.forge.makers) {
            (0, _messages).warn(interactive, _chalk.default.green('It looks like this project is already configured for Electron Forge'));
            if (typeof shouldContinueOnExisting === 'function') {
                if (!await shouldContinueOnExisting()) {
                    // TODO: figure out if we can just return early here
                    // eslint-disable-next-line no-process-exit
                    process.exit(0);
                }
            }
        } else if (typeof packageJSON.config.forge === 'string') {
            (0, _messages).warn(interactive, _chalk.default.yellow("We can't tell if the Electron Forge config is compatible because it's in an external JavaScript file, not trying to convert it and continuing anyway"));
        } else {
            d('Upgrading an Electron Forge < 6 project');
            packageJSON.config.forge = (0, _upgradeForgeConfig).default(packageJSON.config.forge);
            importDevDeps = (0, _upgradeForgeConfig).updateUpgradedForgeDevDeps(packageJSON, importDevDeps);
        }
    }
    packageJSON.dependencies = packageJSON.dependencies || {};
    packageJSON.devDependencies = packageJSON.devDependencies || {};
    [importDevDeps, importExactDevDeps] = (0, _electronVersion).updateElectronDependency(packageJSON, importDevDeps, importExactDevDeps);
    const keys = Object.keys(packageJSON.dependencies).concat(Object.keys(packageJSON.devDependencies));
    const buildToolPackages = {
        '@electron/get': 'already uses this module as a transitive dependency',
        'electron-builder': 'provides mostly equivalent functionality',
        'electron-download': 'already uses this module as a transitive dependency',
        'electron-forge': 'replaced with @electron-forge/cli',
        'electron-installer-debian': 'already uses this module as a transitive dependency',
        'electron-installer-dmg': 'already uses this module as a transitive dependency',
        'electron-installer-flatpak': 'already uses this module as a transitive dependency',
        'electron-installer-redhat': 'already uses this module as a transitive dependency',
        'electron-osx-sign': 'already uses this module as a transitive dependency',
        'electron-packager': 'already uses this module as a transitive dependency',
        'electron-winstaller': 'already uses this module as a transitive dependency'
    };
    for (const key of keys){
        if (buildToolPackages[key]) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const explanation = buildToolPackages[key];
            // eslint-disable-next-line max-len
            let remove = true;
            if (typeof shouldRemoveDependency === 'function') {
                remove = await shouldRemoveDependency(key, explanation);
            }
            if (remove) {
                delete packageJSON.dependencies[key];
                delete packageJSON.devDependencies[key];
            }
        }
    }
    packageJSON.scripts = packageJSON.scripts || {};
    d('reading current scripts object:', packageJSON.scripts);
    const updatePackageScript = async (scriptName, newValue)=>{
        if (packageJSON.scripts[scriptName] !== newValue) {
            // eslint-disable-next-line max-len
            let update = true;
            if (typeof shouldUpdateScript === 'function') {
                update = await shouldUpdateScript(scriptName, newValue);
            }
            if (update) {
                packageJSON.scripts[scriptName] = newValue;
            }
        }
    };
    await updatePackageScript('start', 'electron-forge start');
    await updatePackageScript('package', 'electron-forge package');
    await updatePackageScript('make', 'electron-forge make');
    d('forgified scripts object:', packageJSON.scripts);
    const writeChanges = async ()=>{
        await (0, _asyncOra).asyncOra('Writing modified package.json file', async ()=>{
            await _fsExtra.default.writeJson(_path.default.resolve(dir, 'package.json'), packageJSON, {
                spaces: 2
            });
        });
    };
    await writeChanges();
    await (0, _asyncOra).asyncOra('Installing dependencies', async ()=>{
        d('deleting old dependencies forcefully');
        await _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron'));
        await _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron.cmd'));
        d('installing dependencies');
        await (0, _installDependencies).default(dir, importDeps);
        d('installing devDependencies');
        await (0, _installDependencies).default(dir, importDevDeps, _installDependencies.DepType.DEV);
        d('installing exactDevDependencies');
        await (0, _installDependencies).default(dir, importExactDevDeps, _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    });
    packageJSON = await (0, _readPackageJson).readRawPackageJson(dir);
    if (!packageJSON.version) {
        (0, _messages).warn(interactive, _chalk.default.yellow('Please set the "version" in your application\'s package.json'));
    }
    packageJSON.config = packageJSON.config || {};
    const templatePackageJSON = await (0, _readPackageJson).readRawPackageJson(_templateBase.default.templateDir);
    if (packageJSON.config.forge) {
        if (typeof packageJSON.config.forge !== 'string') {
            packageJSON.config.forge = (0, _lodash).merge(templatePackageJSON.config.forge, packageJSON.config.forge);
        }
    } else {
        packageJSON.config.forge = templatePackageJSON.config.forge;
    }
    if (typeof packageJSON.config.forge !== 'string') {
        (0, _forgeConfig).setInitialForgeConfig(packageJSON);
    }
    await writeChanges();
    await (0, _asyncOra).asyncOra('Fixing .gitignore', async ()=>{
        if (await _fsExtra.default.pathExists(_path.default.resolve(dir, '.gitignore'))) {
            const gitignore = await _fsExtra.default.readFile(_path.default.resolve(dir, '.gitignore'));
            if (!gitignore.includes(calculatedOutDir)) {
                await _fsExtra.default.writeFile(_path.default.resolve(dir, '.gitignore'), `${gitignore}\n${calculatedOutDir}/`);
            }
        }
    });
    (0, _messages).info(interactive, `

We have ATTEMPTED to convert your app to be in a format that electron-forge understands.

Thanks for using ${_chalk.default.green('Electron Forge')}!!!`);
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW1wb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgYmFzZVRlbXBsYXRlIGZyb20gJ0BlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS1iYXNlJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgaW5pdEdpdCBmcm9tICcuL2luaXQtc2NyaXB0cy9pbml0LWdpdCc7XG5pbXBvcnQgeyBkZXBzLCBkZXZEZXBzLCBleGFjdERldkRlcHMgfSBmcm9tICcuL2luaXQtc2NyaXB0cy9pbml0LW5wbSc7XG5cbmltcG9ydCB7IHVwZGF0ZUVsZWN0cm9uRGVwZW5kZW5jeSB9IGZyb20gJy4uL3V0aWwvZWxlY3Ryb24tdmVyc2lvbic7XG5pbXBvcnQgeyBzZXRJbml0aWFsRm9yZ2VDb25maWcgfSBmcm9tICcuLi91dGlsL2ZvcmdlLWNvbmZpZyc7XG5pbXBvcnQgeyBpbmZvLCB3YXJuIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlcyc7XG5pbXBvcnQgaW5zdGFsbERlcExpc3QsIHsgRGVwVHlwZSwgRGVwVmVyc2lvblJlc3RyaWN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pbnN0YWxsLWRlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyByZWFkUmF3UGFja2FnZUpzb24gfSBmcm9tICcuLi91dGlsL3JlYWQtcGFja2FnZS1qc29uJztcbmltcG9ydCB1cGdyYWRlRm9yZ2VDb25maWcsIHsgdXBkYXRlVXBncmFkZWRGb3JnZURldkRlcHMgfSBmcm9tICcuLi91dGlsL3VwZ3JhZGUtZm9yZ2UtY29uZmlnJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbXBvcnQnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJbXBvcnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBhcHAgdG8gYmUgaW1wb3J0ZWRcbiAgICovXG4gIGRpcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHNlbnNpYmxlIGRlZmF1bHRzIG9yIHByb21wdCB0aGUgdXNlciB2aXN1YWxseVxuICAgKi9cbiAgaW50ZXJhY3RpdmU/OiBib29sZWFuO1xuICAvKipcbiAgICogQW4gYXN5bmMgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgb3IgZmFsc2UgaW4gb3JkZXIgdG8gY29uZmlybSB0aGUgc3RhcnRcbiAgICogb2YgaW1wb3J0aW5nXG4gICAqL1xuICBjb25maXJtSW1wb3J0PzogKCkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgLyoqXG4gICAqIEFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB3aGV0aGVyIHRoZSBpbXBvcnQgc2hvdWxkIGNvbnRpbnVlIGlmIGl0XG4gICAqIGxvb2tzIGxpa2UgYSBmb3JnZSBwcm9qZWN0IGFscmVhZHlcbiAgICovXG4gIHNob3VsZENvbnRpbnVlT25FeGlzdGluZz86ICgpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIC8qKlxuICAgKiBBbiBhc3luYyBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gZGVwZW5kZW5jeSBzaG91bGQgYmUgcmVtb3ZlZFxuICAgKi9cbiAgc2hvdWxkUmVtb3ZlRGVwZW5kZW5jeT86IChkZXBlbmRlbmN5OiBzdHJpbmcsIGV4cGxhbmF0aW9uOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIC8qKlxuICAgKiBBbiBhc3luYyBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gc2NyaXB0IHNob3VsZCBiZSBvdmVycmlkZGVuIHdpdGggYSBmb3JnZSBvbmVcbiAgICovXG4gIHNob3VsZFVwZGF0ZVNjcmlwdD86IChzY3JpcHROYW1lOiBzdHJpbmcsIG5ld1ZhbHVlOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgZGlyZWN0b3J5IGNvbnRhaW5pbmcgZ2VuZXJhdGVkIGRpc3RyaWJ1dGFibGVzXG4gICAqL1xuICBvdXREaXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7XG4gIGRpciA9IHByb2Nlc3MuY3dkKCksXG4gIGludGVyYWN0aXZlID0gZmFsc2UsXG4gIGNvbmZpcm1JbXBvcnQsXG4gIHNob3VsZENvbnRpbnVlT25FeGlzdGluZyxcbiAgc2hvdWxkUmVtb3ZlRGVwZW5kZW5jeSxcbiAgc2hvdWxkVXBkYXRlU2NyaXB0LFxuICBvdXREaXIsXG59OiBJbXBvcnRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IGNhbGN1bGF0ZWRPdXREaXIgPSBvdXREaXIgfHwgJ291dCc7XG4gIGFzeW5jT3JhLmludGVyYWN0aXZlID0gaW50ZXJhY3RpdmU7XG5cbiAgZChgQXR0ZW1wdGluZyB0byBpbXBvcnQgcHJvamVjdCBpbjogJHtkaXJ9YCk7XG4gIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoZGlyKSkgfHwgIShhd2FpdCBmcy5wYXRoRXhpc3RzKHBhdGgucmVzb2x2ZShkaXIsICdwYWNrYWdlLmpzb24nKSkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBXZSBjb3VsZG4ndCBmaW5kIGEgcHJvamVjdCBpbjogJHtkaXJ9YCk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICBpZiAodHlwZW9mIGNvbmZpcm1JbXBvcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoIShhd2FpdCBjb25maXJtSW1wb3J0KCkpKSB7XG4gICAgICAvLyBUT0RPOiBmaWd1cmUgb3V0IGlmIHdlIGNhbiBqdXN0IHJldHVybiBlYXJseSBoZXJlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1leGl0XG4gICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgaW5pdEdpdChkaXIpO1xuXG4gIGNvbnN0IGltcG9ydERlcHMgPSAoW10gYXMgc3RyaW5nW10pLmNvbmNhdChkZXBzKTtcbiAgbGV0IGltcG9ydERldkRlcHMgPSAoW10gYXMgc3RyaW5nW10pLmNvbmNhdChkZXZEZXBzKTtcbiAgbGV0IGltcG9ydEV4YWN0RGV2RGVwcyA9IChbXSBhcyBzdHJpbmdbXSkuY29uY2F0KGV4YWN0RGV2RGVwcyk7XG5cbiAgbGV0IHBhY2thZ2VKU09OID0gYXdhaXQgcmVhZFJhd1BhY2thZ2VKc29uKGRpcik7XG4gIGlmIChwYWNrYWdlSlNPTi5jb25maWcgJiYgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlKSB7XG4gICAgaWYgKHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZS5tYWtlcnMpIHtcbiAgICAgIHdhcm4oaW50ZXJhY3RpdmUsIGNoYWxrLmdyZWVuKCdJdCBsb29rcyBsaWtlIHRoaXMgcHJvamVjdCBpcyBhbHJlYWR5IGNvbmZpZ3VyZWQgZm9yIEVsZWN0cm9uIEZvcmdlJykpO1xuICAgICAgaWYgKHR5cGVvZiBzaG91bGRDb250aW51ZU9uRXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKCEoYXdhaXQgc2hvdWxkQ29udGludWVPbkV4aXN0aW5nKCkpKSB7XG4gICAgICAgICAgLy8gVE9ETzogZmlndXJlIG91dCBpZiB3ZSBjYW4ganVzdCByZXR1cm4gZWFybHkgaGVyZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9jZXNzLWV4aXRcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBpbnRlcmFjdGl2ZSxcbiAgICAgICAgY2hhbGsueWVsbG93KFxuICAgICAgICAgIFwiV2UgY2FuJ3QgdGVsbCBpZiB0aGUgRWxlY3Ryb24gRm9yZ2UgY29uZmlnIGlzIGNvbXBhdGlibGUgYmVjYXVzZSBpdCdzIGluIGFuIGV4dGVybmFsIEphdmFTY3JpcHQgZmlsZSwgbm90IHRyeWluZyB0byBjb252ZXJ0IGl0IGFuZCBjb250aW51aW5nIGFueXdheVwiXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQoJ1VwZ3JhZGluZyBhbiBFbGVjdHJvbiBGb3JnZSA8IDYgcHJvamVjdCcpO1xuICAgICAgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlID0gdXBncmFkZUZvcmdlQ29uZmlnKHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZSk7XG4gICAgICBpbXBvcnREZXZEZXBzID0gdXBkYXRlVXBncmFkZWRGb3JnZURldkRlcHMocGFja2FnZUpTT04sIGltcG9ydERldkRlcHMpO1xuICAgIH1cbiAgfVxuXG4gIHBhY2thZ2VKU09OLmRlcGVuZGVuY2llcyA9IHBhY2thZ2VKU09OLmRlcGVuZGVuY2llcyB8fCB7fTtcbiAgcGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzID0gcGFja2FnZUpTT04uZGV2RGVwZW5kZW5jaWVzIHx8IHt9O1xuXG4gIFtpbXBvcnREZXZEZXBzLCBpbXBvcnRFeGFjdERldkRlcHNdID0gdXBkYXRlRWxlY3Ryb25EZXBlbmRlbmN5KHBhY2thZ2VKU09OLCBpbXBvcnREZXZEZXBzLCBpbXBvcnRFeGFjdERldkRlcHMpO1xuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwYWNrYWdlSlNPTi5kZXBlbmRlbmNpZXMpLmNvbmNhdChPYmplY3Qua2V5cyhwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXMpKTtcbiAgY29uc3QgYnVpbGRUb29sUGFja2FnZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSB7XG4gICAgJ0BlbGVjdHJvbi9nZXQnOiAnYWxyZWFkeSB1c2VzIHRoaXMgbW9kdWxlIGFzIGEgdHJhbnNpdGl2ZSBkZXBlbmRlbmN5JyxcbiAgICAnZWxlY3Ryb24tYnVpbGRlcic6ICdwcm92aWRlcyBtb3N0bHkgZXF1aXZhbGVudCBmdW5jdGlvbmFsaXR5JyxcbiAgICAnZWxlY3Ryb24tZG93bmxvYWQnOiAnYWxyZWFkeSB1c2VzIHRoaXMgbW9kdWxlIGFzIGEgdHJhbnNpdGl2ZSBkZXBlbmRlbmN5JyxcbiAgICAnZWxlY3Ryb24tZm9yZ2UnOiAncmVwbGFjZWQgd2l0aCBAZWxlY3Ryb24tZm9yZ2UvY2xpJyxcbiAgICAnZWxlY3Ryb24taW5zdGFsbGVyLWRlYmlhbic6ICdhbHJlYWR5IHVzZXMgdGhpcyBtb2R1bGUgYXMgYSB0cmFuc2l0aXZlIGRlcGVuZGVuY3knLFxuICAgICdlbGVjdHJvbi1pbnN0YWxsZXItZG1nJzogJ2FscmVhZHkgdXNlcyB0aGlzIG1vZHVsZSBhcyBhIHRyYW5zaXRpdmUgZGVwZW5kZW5jeScsXG4gICAgJ2VsZWN0cm9uLWluc3RhbGxlci1mbGF0cGFrJzogJ2FscmVhZHkgdXNlcyB0aGlzIG1vZHVsZSBhcyBhIHRyYW5zaXRpdmUgZGVwZW5kZW5jeScsXG4gICAgJ2VsZWN0cm9uLWluc3RhbGxlci1yZWRoYXQnOiAnYWxyZWFkeSB1c2VzIHRoaXMgbW9kdWxlIGFzIGEgdHJhbnNpdGl2ZSBkZXBlbmRlbmN5JyxcbiAgICAnZWxlY3Ryb24tb3N4LXNpZ24nOiAnYWxyZWFkeSB1c2VzIHRoaXMgbW9kdWxlIGFzIGEgdHJhbnNpdGl2ZSBkZXBlbmRlbmN5JyxcbiAgICAnZWxlY3Ryb24tcGFja2FnZXInOiAnYWxyZWFkeSB1c2VzIHRoaXMgbW9kdWxlIGFzIGEgdHJhbnNpdGl2ZSBkZXBlbmRlbmN5JyxcbiAgICAnZWxlY3Ryb24td2luc3RhbGxlcic6ICdhbHJlYWR5IHVzZXMgdGhpcyBtb2R1bGUgYXMgYSB0cmFuc2l0aXZlIGRlcGVuZGVuY3knLFxuICB9O1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoYnVpbGRUb29sUGFja2FnZXNba2V5XSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgIGNvbnN0IGV4cGxhbmF0aW9uID0gYnVpbGRUb29sUGFja2FnZXNba2V5XSE7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgbGV0IHJlbW92ZSA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIHNob3VsZFJlbW92ZURlcGVuZGVuY3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVtb3ZlID0gYXdhaXQgc2hvdWxkUmVtb3ZlRGVwZW5kZW5jeShrZXksIGV4cGxhbmF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICBkZWxldGUgcGFja2FnZUpTT04uZGVwZW5kZW5jaWVzW2tleV07XG4gICAgICAgIGRlbGV0ZSBwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwYWNrYWdlSlNPTi5zY3JpcHRzID0gcGFja2FnZUpTT04uc2NyaXB0cyB8fCB7fTtcbiAgZCgncmVhZGluZyBjdXJyZW50IHNjcmlwdHMgb2JqZWN0OicsIHBhY2thZ2VKU09OLnNjcmlwdHMpO1xuXG4gIGNvbnN0IHVwZGF0ZVBhY2thZ2VTY3JpcHQgPSBhc3luYyAoc2NyaXB0TmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHBhY2thZ2VKU09OLnNjcmlwdHNbc2NyaXB0TmFtZV0gIT09IG5ld1ZhbHVlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgbGV0IHVwZGF0ZSA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIHNob3VsZFVwZGF0ZVNjcmlwdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1cGRhdGUgPSBhd2FpdCBzaG91bGRVcGRhdGVTY3JpcHQoc2NyaXB0TmFtZSwgbmV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHVwZGF0ZSkge1xuICAgICAgICBwYWNrYWdlSlNPTi5zY3JpcHRzW3NjcmlwdE5hbWVdID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGF3YWl0IHVwZGF0ZVBhY2thZ2VTY3JpcHQoJ3N0YXJ0JywgJ2VsZWN0cm9uLWZvcmdlIHN0YXJ0Jyk7XG4gIGF3YWl0IHVwZGF0ZVBhY2thZ2VTY3JpcHQoJ3BhY2thZ2UnLCAnZWxlY3Ryb24tZm9yZ2UgcGFja2FnZScpO1xuICBhd2FpdCB1cGRhdGVQYWNrYWdlU2NyaXB0KCdtYWtlJywgJ2VsZWN0cm9uLWZvcmdlIG1ha2UnKTtcblxuICBkKCdmb3JnaWZpZWQgc2NyaXB0cyBvYmplY3Q6JywgcGFja2FnZUpTT04uc2NyaXB0cyk7XG5cbiAgY29uc3Qgd3JpdGVDaGFuZ2VzID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFzeW5jT3JhKCdXcml0aW5nIG1vZGlmaWVkIHBhY2thZ2UuanNvbiBmaWxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGgucmVzb2x2ZShkaXIsICdwYWNrYWdlLmpzb24nKSwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGF3YWl0IHdyaXRlQ2hhbmdlcygpO1xuXG4gIGF3YWl0IGFzeW5jT3JhKCdJbnN0YWxsaW5nIGRlcGVuZGVuY2llcycsIGFzeW5jICgpID0+IHtcbiAgICBkKCdkZWxldGluZyBvbGQgZGVwZW5kZW5jaWVzIGZvcmNlZnVsbHknKTtcbiAgICBhd2FpdCBmcy5yZW1vdmUocGF0aC5yZXNvbHZlKGRpciwgJ25vZGVfbW9kdWxlcy8uYmluL2VsZWN0cm9uJykpO1xuICAgIGF3YWl0IGZzLnJlbW92ZShwYXRoLnJlc29sdmUoZGlyLCAnbm9kZV9tb2R1bGVzLy5iaW4vZWxlY3Ryb24uY21kJykpO1xuXG4gICAgZCgnaW5zdGFsbGluZyBkZXBlbmRlbmNpZXMnKTtcbiAgICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGltcG9ydERlcHMpO1xuXG4gICAgZCgnaW5zdGFsbGluZyBkZXZEZXBlbmRlbmNpZXMnKTtcbiAgICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGltcG9ydERldkRlcHMsIERlcFR5cGUuREVWKTtcblxuICAgIGQoJ2luc3RhbGxpbmcgZXhhY3REZXZEZXBlbmRlbmNpZXMnKTtcbiAgICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGltcG9ydEV4YWN0RGV2RGVwcywgRGVwVHlwZS5ERVYsIERlcFZlcnNpb25SZXN0cmljdGlvbi5FWEFDVCk7XG4gIH0pO1xuXG4gIHBhY2thZ2VKU09OID0gYXdhaXQgcmVhZFJhd1BhY2thZ2VKc29uKGRpcik7XG5cbiAgaWYgKCFwYWNrYWdlSlNPTi52ZXJzaW9uKSB7XG4gICAgd2FybihpbnRlcmFjdGl2ZSwgY2hhbGsueWVsbG93KCdQbGVhc2Ugc2V0IHRoZSBcInZlcnNpb25cIiBpbiB5b3VyIGFwcGxpY2F0aW9uXFwncyBwYWNrYWdlLmpzb24nKSk7XG4gIH1cblxuICBwYWNrYWdlSlNPTi5jb25maWcgPSBwYWNrYWdlSlNPTi5jb25maWcgfHwge307XG4gIGNvbnN0IHRlbXBsYXRlUGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24oYmFzZVRlbXBsYXRlLnRlbXBsYXRlRGlyKTtcbiAgaWYgKHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZSkge1xuICAgIGlmICh0eXBlb2YgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlICE9PSAnc3RyaW5nJykge1xuICAgICAgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlID0gbWVyZ2UodGVtcGxhdGVQYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UsIHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZSA9IHRlbXBsYXRlUGFja2FnZUpTT04uY29uZmlnLmZvcmdlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgc2V0SW5pdGlhbEZvcmdlQ29uZmlnKHBhY2thZ2VKU09OKTtcbiAgfVxuXG4gIGF3YWl0IHdyaXRlQ2hhbmdlcygpO1xuXG4gIGF3YWl0IGFzeW5jT3JhKCdGaXhpbmcgLmdpdGlnbm9yZScsIGFzeW5jICgpID0+IHtcbiAgICBpZiAoYXdhaXQgZnMucGF0aEV4aXN0cyhwYXRoLnJlc29sdmUoZGlyLCAnLmdpdGlnbm9yZScpKSkge1xuICAgICAgY29uc3QgZ2l0aWdub3JlID0gYXdhaXQgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKGRpciwgJy5naXRpZ25vcmUnKSk7XG4gICAgICBpZiAoIWdpdGlnbm9yZS5pbmNsdWRlcyhjYWxjdWxhdGVkT3V0RGlyKSkge1xuICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUocGF0aC5yZXNvbHZlKGRpciwgJy5naXRpZ25vcmUnKSwgYCR7Z2l0aWdub3JlfVxcbiR7Y2FsY3VsYXRlZE91dERpcn0vYCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpbmZvKFxuICAgIGludGVyYWN0aXZlLFxuICAgIGBcblxuV2UgaGF2ZSBBVFRFTVBURUQgdG8gY29udmVydCB5b3VyIGFwcCB0byBiZSBpbiBhIGZvcm1hdCB0aGF0IGVsZWN0cm9uLWZvcmdlIHVuZGVyc3RhbmRzLlxuXG5UaGFua3MgZm9yIHVzaW5nICR7Y2hhbGsuZ3JlZW4oJ0VsZWN0cm9uIEZvcmdlJyl9ISEhYFxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVidWciLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwiaW50ZXJhY3RpdmUiLCJjb25maXJtSW1wb3J0Iiwic2hvdWxkQ29udGludWVPbkV4aXN0aW5nIiwic2hvdWxkUmVtb3ZlRGVwZW5kZW5jeSIsInNob3VsZFVwZGF0ZVNjcmlwdCIsIm91dERpciIsImNhbGN1bGF0ZWRPdXREaXIiLCJhc3luY09yYSIsImZzIiwicGF0aEV4aXN0cyIsInBhdGgiLCJyZXNvbHZlIiwiRXJyb3IiLCJleGl0IiwiaW5pdEdpdCIsImltcG9ydERlcHMiLCJjb25jYXQiLCJkZXBzIiwiaW1wb3J0RGV2RGVwcyIsImRldkRlcHMiLCJpbXBvcnRFeGFjdERldkRlcHMiLCJleGFjdERldkRlcHMiLCJwYWNrYWdlSlNPTiIsInJlYWRSYXdQYWNrYWdlSnNvbiIsImNvbmZpZyIsImZvcmdlIiwibWFrZXJzIiwid2FybiIsImNoYWxrIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJ1cGdyYWRlRm9yZ2VDb25maWciLCJ1cGRhdGVVcGdyYWRlZEZvcmdlRGV2RGVwcyIsImRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsInVwZGF0ZUVsZWN0cm9uRGVwZW5kZW5jeSIsImtleXMiLCJPYmplY3QiLCJidWlsZFRvb2xQYWNrYWdlcyIsImtleSIsImV4cGxhbmF0aW9uIiwicmVtb3ZlIiwic2NyaXB0cyIsInVwZGF0ZVBhY2thZ2VTY3JpcHQiLCJzY3JpcHROYW1lIiwibmV3VmFsdWUiLCJ1cGRhdGUiLCJ3cml0ZUNoYW5nZXMiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJpbnN0YWxsRGVwTGlzdCIsIkRlcFR5cGUiLCJERVYiLCJEZXBWZXJzaW9uUmVzdHJpY3Rpb24iLCJFWEFDVCIsInZlcnNpb24iLCJ0ZW1wbGF0ZVBhY2thZ2VKU09OIiwiYmFzZVRlbXBsYXRlIiwidGVtcGxhdGVEaXIiLCJtZXJnZSIsInNldEluaXRpYWxGb3JnZUNvbmZpZyIsImdpdGlnbm9yZSIsInJlYWRGaWxlIiwiaW5jbHVkZXMiLCJ3cml0ZUZpbGUiLCJpbmZvIl0sIm1hcHBpbmdzIjoiOzs7OztBQUF5QixHQUEyQixDQUEzQixTQUEyQjtBQUMzQixHQUErQixDQUEvQixhQUErQjtBQUN0QyxHQUFPLENBQVAsTUFBTztBQUNQLEdBQU8sQ0FBUCxNQUFPO0FBQ1YsR0FBVSxD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