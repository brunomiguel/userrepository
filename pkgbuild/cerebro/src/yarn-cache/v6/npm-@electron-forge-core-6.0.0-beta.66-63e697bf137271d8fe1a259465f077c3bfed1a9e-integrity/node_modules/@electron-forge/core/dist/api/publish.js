"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _publishState = _interopRequireDefault(require("../util/publish-state"));
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _make = _interopRequireDefault(require("./make"));
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:publish');
const publish = async ({ dir =process.cwd() , interactive =false , makeOptions ={} , publishTargets =undefined , dryRun =false , dryRunResume =false , makeResults =undefined , outDir  })=>{
    _asyncOra.asyncOra.interactive = interactive;
    if (dryRun && dryRunResume) {
        throw new Error("Can't dry run and resume a dry run at the same time");
    }
    if (dryRunResume && makeResults) {
        throw new Error("Can't resume a dry run and use the provided makeResults at the same time");
    }
    const forgeConfig = await (0, _forgeConfig).default(dir);
    const calculatedOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
    const dryRunDir = _path.default.resolve(calculatedOutDir, 'publish-dry-run');
    if (dryRunResume) {
        d('attempting to resume from dry run');
        const publishes = await _publishState.default.loadFromDirectory(dryRunDir, dir);
        for (const publishStates of publishes){
            d('publishing for given state set');
            await publish({
                dir,
                interactive,
                publishTargets,
                makeOptions,
                dryRun: false,
                dryRunResume: false,
                makeResults: publishStates.map(({ state  })=>state
                )
            });
        }
        return;
    }
    if (!makeResults) {
        d('triggering make');
        makeResults = await (0, _make).default({
            dir,
            interactive,
            ...makeOptions
        });
    } else {
        // Restore values from dry run
        d('restoring publish settings from dry run');
        for (const makeResult of makeResults){
            makeOptions.platform = makeResult.platform;
            makeOptions.arch = makeResult.arch;
            for (const makePath of makeResult.artifacts){
                if (!await _fsExtra.default.pathExists(makePath)) {
                    throw new Error(`Attempted to resume a dry run but an artifact (${makePath}) could not be found`);
                }
            }
        }
    }
    if (dryRun) {
        d('saving results of make in dry run state', makeResults);
        await _fsExtra.default.remove(dryRunDir);
        await _publishState.default.saveToDirectory(dryRunDir, makeResults, dir);
        return;
    }
    const resolvedDir = await (0, _resolveDir).default(dir);
    if (!resolvedDir) {
        throw new Error('Failed to locate publishable Electron application');
    }
    dir = resolvedDir;
    // const testPlatform = makeOptions.platform || process.platform as ForgePlatform;
    if (!publishTargets) {
        publishTargets = forgeConfig.publishers || [];
    // .filter(publisher => (typeof publisher !== 'string' && publisher.platforms)
    //   ? publisher.platforms.includes(testPlatform) : true);
    }
    publishTargets = publishTargets.map((target)=>{
        if (typeof target === 'string') {
            return (forgeConfig.publishers || []).find((p)=>{
                if (typeof p === 'string') return false;
                // eslint-disable-next-line no-underscore-dangle
                if (p.__isElectronForgePublisher) return false;
                return p.name === target;
            }) || {
                name: target
            };
        }
        return target;
    });
    for (const publishTarget of publishTargets){
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let publisher;
        // eslint-disable-next-line no-underscore-dangle
        if (publishTarget.__isElectronForgePublisher) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            publisher = publishTarget;
        } else {
            const resolvablePublishTarget = publishTarget;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let PublisherClass;
            await (0, _asyncOra).asyncOra(`Resolving publish target: ${_chalk.default.cyan(resolvablePublishTarget.name)}`, async ()=>{
                // eslint-disable-line no-loop-func
                PublisherClass = (0, _requireSearch).default(dir, [
                    resolvablePublishTarget.name
                ]);
                if (!PublisherClass) {
                    throw new Error(`Could not find a publish target with the name: ${resolvablePublishTarget.name}. Make sure it's listed in the devDependencies of your package.json`);
                }
            });
            publisher = new PublisherClass(resolvablePublishTarget.config || {}, resolvablePublishTarget.platforms);
        }
        await publisher.publish({
            dir,
            makeResults,
            forgeConfig
        });
    }
};
var _default = publish;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,