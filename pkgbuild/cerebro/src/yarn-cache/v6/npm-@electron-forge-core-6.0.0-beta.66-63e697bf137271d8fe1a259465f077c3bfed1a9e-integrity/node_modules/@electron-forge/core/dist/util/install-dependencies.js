"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.DepVersionRestriction = exports.DepType = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _crossSpawnPromise = require("@malept/cross-spawn-promise");
var _yarnOrNpm = require("./yarn-or-npm");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:dependency-installer');
var DepType;
exports.DepType = DepType;
(function(DepType) {
    DepType["PROD"] = "PROD";
    DepType["DEV"] = "DEV";
})(DepType || (exports.DepType = DepType = {}));
var DepVersionRestriction;
exports.DepVersionRestriction = DepVersionRestriction;
(function(DepVersionRestriction) {
    DepVersionRestriction["EXACT"] = "EXACT";
    DepVersionRestriction["RANGE"] = "RANGE";
})(DepVersionRestriction || (exports.DepVersionRestriction = DepVersionRestriction = {}));
var _default = async (dir, deps, depType = DepType.PROD, versionRestriction = DepVersionRestriction.RANGE)=>{
    d('installing', JSON.stringify(deps), 'in:', dir, `depType=${depType},versionRestriction=${versionRestriction},withYarn=${(0, _yarnOrNpm).hasYarn()}`);
    if (deps.length === 0) {
        d('nothing to install, stopping immediately');
        return Promise.resolve();
    }
    let cmd = [
        'install'
    ].concat(deps);
    if ((0, _yarnOrNpm).hasYarn()) {
        cmd = [
            'add'
        ].concat(deps);
        if (depType === DepType.DEV) cmd.push('--dev');
        if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--exact');
    } else {
        if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--save-exact');
        if (depType === DepType.DEV) cmd.push('--save-dev');
        if (depType === DepType.PROD) cmd.push('--save');
    }
    d('executing', JSON.stringify(cmd), 'in:', dir);
    try {
        await (0, _yarnOrNpm).yarnOrNpmSpawn(cmd, {
            cwd: dir,
            stdio: 'pipe'
        });
    } catch (err) {
        if (err instanceof _crossSpawnPromise.ExitError) {
            throw new Error(`Failed to install modules: ${JSON.stringify(deps)}\n\nWith output: ${err.message}\n${err.stderr ? err.stderr.toString() : ''}`);
        } else {
            throw err;
        }
    }
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBFeGl0RXJyb3IgfSBmcm9tICdAbWFsZXB0L2Nyb3NzLXNwYXduLXByb21pc2UnO1xuaW1wb3J0IHsgeWFybk9yTnBtU3Bhd24sIGhhc1lhcm4gfSBmcm9tICcuL3lhcm4tb3ItbnBtJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpkZXBlbmRlbmN5LWluc3RhbGxlcicpO1xuXG5leHBvcnQgZW51bSBEZXBUeXBlIHtcbiAgUFJPRCA9ICdQUk9EJyxcbiAgREVWID0gJ0RFVicsXG59XG5cbmV4cG9ydCBlbnVtIERlcFZlcnNpb25SZXN0cmljdGlvbiB7XG4gIEVYQUNUID0gJ0VYQUNUJyxcbiAgUkFOR0UgPSAnUkFOR0UnLFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcsIGRlcHM6IHN0cmluZ1tdLCBkZXBUeXBlID0gRGVwVHlwZS5QUk9ELCB2ZXJzaW9uUmVzdHJpY3Rpb24gPSBEZXBWZXJzaW9uUmVzdHJpY3Rpb24uUkFOR0UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgZCgnaW5zdGFsbGluZycsIEpTT04uc3RyaW5naWZ5KGRlcHMpLCAnaW46JywgZGlyLCBgZGVwVHlwZT0ke2RlcFR5cGV9LHZlcnNpb25SZXN0cmljdGlvbj0ke3ZlcnNpb25SZXN0cmljdGlvbn0sd2l0aFlhcm49JHtoYXNZYXJuKCl9YCk7XG4gIGlmIChkZXBzLmxlbmd0aCA9PT0gMCkge1xuICAgIGQoJ25vdGhpbmcgdG8gaW5zdGFsbCwgc3RvcHBpbmcgaW1tZWRpYXRlbHknKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgbGV0IGNtZCA9IFsnaW5zdGFsbCddLmNvbmNhdChkZXBzKTtcbiAgaWYgKGhhc1lhcm4oKSkge1xuICAgIGNtZCA9IFsnYWRkJ10uY29uY2F0KGRlcHMpO1xuICAgIGlmIChkZXBUeXBlID09PSBEZXBUeXBlLkRFVikgY21kLnB1c2goJy0tZGV2Jyk7XG4gICAgaWYgKHZlcnNpb25SZXN0cmljdGlvbiA9PT0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKSBjbWQucHVzaCgnLS1leGFjdCcpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2ZXJzaW9uUmVzdHJpY3Rpb24gPT09IERlcFZlcnNpb25SZXN0cmljdGlvbi5FWEFDVCkgY21kLnB1c2goJy0tc2F2ZS1leGFjdCcpO1xuICAgIGlmIChkZXBUeXBlID09PSBEZXBUeXBlLkRFVikgY21kLnB1c2goJy0tc2F2ZS1kZXYnKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5QUk9EKSBjbWQucHVzaCgnLS1zYXZlJyk7XG4gIH1cbiAgZCgnZXhlY3V0aW5nJywgSlNPTi5zdHJpbmdpZnkoY21kKSwgJ2luOicsIGRpcik7XG4gIHRyeSB7XG4gICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oY21kLCB7XG4gICAgICBjd2Q6IGRpcixcbiAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFeGl0RXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluc3RhbGwgbW9kdWxlczogJHtKU09OLnN0cmluZ2lmeShkZXBzKX1cXG5cXG5XaXRoIG91dHB1dDogJHtlcnIubWVzc2FnZX1cXG4ke2Vyci5zdGRlcnIgPyBlcnIuc3RkZXJyLnRvU3RyaW5nKCkgOiAnJ31gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVidWciLCJEZXBUeXBlIiwiUFJPRCIsIkRFViIsIkRlcFZlcnNpb25SZXN0cmljdGlvbiIsIkVYQUNUIiwiUkFOR0UiLCJkaXIiLCJkZXBzIiwiZGVwVHlwZSIsInZlcnNpb25SZXN0cmljdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNZYXJuIiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjbWQiLCJjb25jYXQiLCJwdXNoIiwieWFybk9yTnBtU3Bhd24iLCJjd2QiLCJzdGRpbyIsImVyciIsIkV4aXRFcnJvciIsIkVycm9yIiwibWVzc2FnZSIsInN0ZGVyciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFrQixHQUFPLENBQVAsTUFBTztBQUNDLEdBQTZCLENBQTdCLGtCQUE2QjtBQUNmLEdBQWUsQ0FBZixVQUFlOzs7Ozs7QUFFdkQsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFxQzs7O1VBRXpDQyxPQUFPO0lBQVBBLE9BQU8sQ0FDakJDLENBQUksU0FBSkEsQ0FBSTtJQURNRCxPQUFPLENBRWpCRSxDQUFHLFFBQUhBLENBQUc7R0FGT0YsT0FBTyx1QkFBUEEsT0FBTzs7O1VBS1BHLHFCQUFxQjtJQUFyQkEscUJBQXFCLENBQy9CQyxDQUFLLFVBQUxBLENBQUs7SUFES0QscUJBQXFCLENBRS9CRSxDQUFLLFVBQUxBLENBQUs7R0FGS0YscUJBQXFCLHFDQUFyQkEscUJBQXFCO3NCQUtYRyxHQUFXLEVBQUVDLElBQWMsRUFBRUMsT0FBTyxHQUFHUixPQUFPLENBQUNDLElBQUksRUFBRVEsa0JBQWtCLEdBQUdOLHFCQUFxQixDQUFDRSxLQUFLLEdBQW9CLENBQUM7SUFDOUlQLENBQUMsQ0FBQyxDQUFZLGFBQUVZLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLEdBQUcsQ0FBSyxNQUFFRCxHQUFHLEdBQUcsUUFBUSxFQUFFRSxPQUFPLENBQUMsb0JBQW9CLEVBQUVDLGtCQUFrQixDQUFDLFVBQVUsTUFBRUcsVUFBTztJQUNqSSxFQUFFLEVBQUVMLElBQUksQ0FBQ00sTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3RCZixDQUFDLENBQUMsQ0FBMEM7UUFDNUMsTUFBTSxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPO0lBQ3hCLENBQUM7SUFDRCxHQUFHLENBQUNDLEdBQUcsR0FBRyxDQUFDO1FBQUEsQ0FBUztJQUFBLENBQUMsQ0FBQ0MsTUFBTSxDQUFDVixJQUFJO0lBQ2pDLEVBQUUsTUFBRUssVUFBTyxhQUFJLENBQUM7UUFDZEksR0FBRyxHQUFHLENBQUM7WUFBQSxDQUFLO1FBQUEsQ0FBQyxDQUFDQyxNQUFNLENBQUNWLElBQUk7UUFDekIsRUFBRSxFQUFFQyxPQUFPLEtBQUtSLE9BQU8sQ0FBQ0UsR0FBRyxFQUFFYyxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFPO1FBQzdDLEVBQUUsRUFBRVQsa0JBQWtCLEtBQUtOLHFCQUFxQixDQUFDQyxLQUFLLEVBQUVZLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLENBQVM7SUFDNUUsQ0FBQyxNQUFNLENBQUM7UUFDTixFQUFFLEVBQUVULGtCQUFrQixLQUFLTixxQkFBcUIsQ0FBQ0MsS0FBSyxFQUFFWSxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFjO1FBQy9FLEVBQUUsRUFBRVYsT0FBTyxLQUFLUixPQUFPLENBQUNFLEdBQUcsRUFBRWMsR0FBRyxDQUFDRSxJQUFJLENBQUMsQ0FBWTtRQUNsRCxFQUFFLEVBQUVWLE9BQU8sS0FBS1IsT0FBTyxDQUFDQyxJQUFJLEVBQUVlLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLENBQVE7SUFDakQsQ0FBQztJQUNEcEIsQ0FBQyxDQUFDLENBQVcsWUFBRVksSUFBSSxDQUFDQyxTQUFTLENBQUNLLEdBQUcsR0FBRyxDQUFLLE1BQUVWLEdBQUc7SUFDOUMsR0FBRyxDQUFDLENBQUM7UUFDSCxLQUFLLEtBQUNhLFVBQWMsaUJBQUNILEdBQUcsRUFBRSxDQUFDO1lBQ3pCSSxHQUFHLEVBQUVkLEdBQUc7WUFDUmUsS0FBSyxFQUFFLENBQU07UUFDZixDQUFDO0lBQ0gsQ0FBQyxDQUFDLEtBQUssRUFBRUMsR0FBRyxFQUFFLENBQUM7UUFDYixFQUFFLEVBQUVBLEdBQUcsWUFBWUMsa0JBQVMsWUFBRSxDQUFDO1lBQzdCLEtBQUssQ0FBQyxHQUFHLENBQUNDLEtBQUssRUFBRSwyQkFBMkIsRUFBRWQsSUFBSSxDQUFDQyxTQUFTLENBQUNKLElBQUksRUFBRSxpQkFBaUIsRUFBRWUsR0FBRyxDQUFDRyxPQUFPLENBQUMsRUFBRSxFQUFFSCxHQUFHLENBQUNJLE1BQU0sR0FBR0osR0FBRyxDQUFDSSxNQUFNLENBQUNDLFFBQVEsS0FBSyxDQUFFO1FBQy9JLENBQUMsTUFBTSxDQUFDO1lBQ04sS0FBSyxDQUFDTCxHQUFHO1FBQ1gsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDIn0=