{
  "manifest": {
    "name": "dateformat",
    "description": "A node.js package for Steven Levithan's excellent dateFormat() function.",
    "maintainers": "Felix Geisendörfer <felix@debuggable.com>",
    "homepage": "https://github.com/felixge/node-dateformat",
    "author": {
      "name": "Steven Levithan"
    },
    "contributors": [
      {
        "name": "Steven Levithan"
      },
      {
        "name": "Felix Geisendörfer",
        "email": "felix@debuggable.com"
      },
      {
        "name": "Christoph Tavan",
        "email": "dev@tavan.de"
      },
      {
        "name": "Jon Schlinkert",
        "url": "https://github.com/jonschlinkert"
      }
    ],
    "version": "2.2.0",
    "license": "MIT",
    "main": "lib/dateformat",
    "devDependencies": {
      "underscore": "1.7.0",
      "mocha": "2.0.1"
    },
    "engines": {
      "node": "*"
    },
    "scripts": {
      "test": "mocha"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/felixge/node-dateformat.git"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-dateformat-2.2.0-integrity/node_modules/dateformat/package.json",
    "readmeFilename": "Readme.md",
    "readme": "# dateformat\n\nA node.js package for Steven Levithan's excellent [dateFormat()][dateformat] function.\n\n[![Build Status](https://travis-ci.org/felixge/node-dateformat.svg)](https://travis-ci.org/felixge/node-dateformat)\n\n## Modifications\n\n* Removed the `Date.prototype.format` method. Sorry folks, but extending native prototypes is for suckers.\n* Added a `module.exports = dateFormat;` statement at the bottom\n* Added the placeholder `N` to get the ISO 8601 numeric representation of the day of the week\n\n## Installation\n\n```bash\n$ npm install dateformat\n$ dateformat --help\n```\n\n## Usage\n\nAs taken from Steven's post, modified to match the Modifications listed above:\n```js\nvar dateFormat = require('dateformat');\nvar now = new Date();\n\n// Basic usage\ndateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\");\n// Saturday, June 9th, 2007, 5:46:21 PM\n\n// You can use one of several named masks\ndateFormat(now, \"isoDateTime\");\n// 2007-06-09T17:46:21\n\n// ...Or add your own\ndateFormat.masks.hammerTime = 'HH:MM! \"Can\\'t touch this!\"';\ndateFormat(now, \"hammerTime\");\n// 17:46! Can't touch this!\n\n// You can also provide the date as a string\ndateFormat(\"Jun 9 2007\", \"fullDate\");\n// Saturday, June 9, 2007\n\n// Note that if you don't include the mask argument,\n// dateFormat.masks.default is used\ndateFormat(now);\n// Sat Jun 09 2007 17:46:21\n\n// And if you don't include the date argument,\n// the current date and time is used\ndateFormat();\n// Sat Jun 09 2007 17:46:22\n\n// You can also skip the date argument (as long as your mask doesn't\n// contain any numbers), in which case the current date/time is used\ndateFormat(\"longTime\");\n// 5:46:22 PM EST\n\n// And finally, you can convert local time to UTC time. Simply pass in\n// true as an additional argument (no argument skipping allowed in this case):\ndateFormat(now, \"longTime\", true);\n// 10:46:21 PM UTC\n\n// ...Or add the prefix \"UTC:\" or \"GMT:\" to your mask.\ndateFormat(now, \"UTC:h:MM:ss TT Z\");\n// 10:46:21 PM UTC\n\n// You can also get the ISO 8601 week of the year:\ndateFormat(now, \"W\");\n// 42\n\n// and also get the ISO 8601 numeric representation of the day of the week:\ndateFormat(now,\"N\");\n// 6\n```\n\n### Mask options\n\nMask | Description\n---- | -----------\n`d` | Day of the month as digits; no leading zero for single-digit days.\n`dd` | Day of the month as digits; leading zero for single-digit days.\n`ddd` | Day of the week as a three-letter abbreviation.\n`dddd` | Day of the week as its full name.\n`m` | Month as digits; no leading zero for single-digit months.\n`mm` | Month as digits; leading zero for single-digit months.\n`mmm` | Month as a three-letter abbreviation.\n`mmmm` | Month as its full name.\n`yy` | Year as last two digits; leading zero for years less than 10.\n`yyyy` | Year represented by four digits.\n`h` | Hours; no leading zero for single-digit hours (12-hour clock).\n`hh` | Hours; leading zero for single-digit hours (12-hour clock).\n`H` | Hours; no leading zero for single-digit hours (24-hour clock).\n`HH` | Hours; leading zero for single-digit hours (24-hour clock).\n`M` | Minutes; no leading zero for single-digit minutes.\n`MM` | Minutes; leading zero for single-digit minutes.\n`N` | ISO 8601 numeric representation of the day of the week.\n`o` | GMT/UTC timezone offset, e.g. -0500 or +0230.\n`s` | Seconds; no leading zero for single-digit seconds.\n`ss` | Seconds; leading zero for single-digit seconds.\n`S` | The date's ordinal suffix (st, nd, rd, or th). Works well with `d`.\n`l` |  Milliseconds; gives 3 digits.\n`L` | Milliseconds; gives 2 digits.\n`t`\t| Lowercase, single-character time marker string: a or p.\n`tt` | Lowercase, two-character time marker string: am or pm.\n`T` | Uppercase, single-character time marker string: A or P.\n`TT` | Uppercase, two-character time marker string: AM or PM.\n`W` | ISO 8601 week number of the year, e.g. 42\n`Z` | US timezone abbreviation, e.g. EST or MDT. With non-US timezones or in the\n`'...'`, `\"...\"` | Literal character sequence. Surrounding quotes are removed.\n`UTC:` |\tMust be the first four characters of the mask. Converts the date from local time to UTC/GMT/Zulu time before applying the mask. The \"UTC:\" prefix is removed.\n\n### Named Formats\n\nName | Mask | Example\n---- | ---- | -------\n`default` | `ddd mmm dd yyyy HH:MM:ss` | Sat Jun 09 2007 17:46:21\n`shortDate` | `m/d/yy` | 6/9/07\n`mediumDate` | `mmm d, yyyy` | Jun 9, 2007\n`longDate` | `mmmm d, yyyy` | June 9, 2007\n`fullDate` | `dddd, mmmm d, yyyy` | Saturday, June 9, 2007\n`shortTime` | `h:MM TT` | 5:46 PM\n`mediumTime` | `h:MM:ss TT` | 5:46:21 PM\n`longTime` | `h:MM:ss TT Z` | 5:46:21 PM EST\n`isoDate` | `yyyy-mm-dd` | 2007-06-09\n`isoTime` | `HH:MM:ss` | 17:46:21\n`isoDateTime` | `yyyy-mm-dd'T'HH:MM:ss` | 2007-06-09T17:46:21\n`isoUtcDateTime` | `UTC:yyyy-mm-dd'T'HH:MM:ss'Z'` | 2007-06-09T22:46:21Z\n## License\n\n(c) 2007-2009 Steven Levithan [stevenlevithan.com][stevenlevithan], MIT license.\n\n[dateformat]: http://blog.stevenlevithan.com/archives/date-time-format\n[stevenlevithan]: http://stevenlevithan.com/\n",
    "licenseText": "(c) 2007-2009 Steven Levithan <stevenlevithan.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/dateformat/-/dateformat-2.2.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/dateformat/-/dateformat-2.2.0.tgz",
    "hash": "",
    "integrity": "sha1-QGXiATz5+5Ft39gu+1Bq1MZ2kGI=",
    "registry": "npm",
    "packageName": "dateformat",
    "cacheIntegrity": "sha512-GODcnWq3YGoTnygPfi02ygEiRxqUxpJwuRHjdhJYuxpcZmDq4rjBiXYmbCCzStxo176ixfLT6i4NPwQooRySnw== sha1-QGXiATz5+5Ft39gu+1Bq1MZ2kGI="
  },
  "registry": "npm",
  "hash": "18e0dc9d6ab7606a139f280f7e2d36ca0122471a94c69270b911e3761258bb1a5c6660eae2b8c18976266c20b34adc68d7bea2c5f2d3ea2e0d3f0428a11c929f"
}