{
  "manifest": {
    "name": "intl-pluralrules",
    "version": "1.3.1",
    "description": "Intl.PluralRules polyfill",
    "keywords": [
      "unicode",
      "cldr",
      "i18n",
      "internationalization",
      "pluralization"
    ],
    "author": {
      "name": "Eemeli Aro",
      "email": "eemeli@gmail.com"
    },
    "license": "ISC",
    "homepage": "https://github.com/eemeli/intl-pluralrules#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/eemeli/intl-pluralrules.git"
    },
    "files": [
      "factory.*",
      "plural-rules.*",
      "pseudo-number-format.*",
      "polyfill.*"
    ],
    "type": "commonjs",
    "main": "./polyfill.js",
    "exports": {
      ".": "./polyfill.js",
      "./factory": [
        {
          "import": "./factory.mjs",
          "require": "./factory.js"
        },
        "./factory.js"
      ],
      "./plural-rules": "./plural-rules.js",
      "./polyfill": "./polyfill.js",
      "./pseudo-number-format": "./pseudo-number-format.js",
      "./package.json": "./package.json"
    },
    "browser": {
      "./factory.js": "./factory.mjs"
    },
    "react-native": {
      "./factory": "./factory.js"
    },
    "jest": {
      "collectCoverage": true,
      "moduleFileExtensions": [
        "mjs",
        "js",
        "json"
      ],
      "testMatch": [
        "**/*.test.mjs"
      ],
      "transform": {
        "\\.mjs$": "babel-jest"
      },
      "transformIgnorePatterns": []
    },
    "prettier": {
      "arrowParens": "avoid",
      "semi": false,
      "singleQuote": true,
      "trailingComma": "none"
    },
    "devDependencies": {
      "@babel/core": "^7.11.4",
      "@babel/preset-env": "^7.11.0",
      "@rollup/plugin-babel": "^5.3.0",
      "@rollup/plugin-commonjs": "^20.0.0",
      "@rollup/plugin-node-resolve": "^9.0.0",
      "babel-jest": "^27.0.6",
      "jest": "^27.0.6",
      "make-plural": "^7.0.0",
      "rollup": "^2.26.5",
      "rollup-plugin-terser": "^7.0.0"
    },
    "scripts": {
      "build": "rollup -c",
      "clean": "git clean -fdxe node_modules -e examples/node_modules",
      "prepublishOnly": "npm test && npm run build",
      "test": "jest"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-intl-pluralrules-1.3.1-304ec4038a597894f6616633cbf5e66fb3dbee04-integrity/node_modules/intl-pluralrules/package.json",
    "readmeFilename": "README.md",
    "readme": "# intl-pluralrules\n\nA spec-compliant implementation & polyfill for [Intl.PluralRules]. Particularly\nuseful if you need proper support for [`minimumFractionDigits`], which are only\nsupported in Chrome 77 & later.\n\n[intl.pluralrules]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules\n[`minimumfractiondigits`]: https://bugs.chromium.org/p/v8/issues/detail?id=8866\n\n## Installation\n\n```\nnpm install intl-pluralrules\n```\n\n## Polyfill\n\nTo use as a polyfill, just import it to ensure that `Intl.PluralRules` is\navailable in your environment:\n\n```js\nimport 'intl-pluralrules'\n```\n\nIf `Intl.PluralRules` already exists and supports\n[multiple locales](https://nodejs.org/api/intl.html), the polyfill will not be\nloaded. Full support for `minimumFractionDigits` is not checked.\n\n## Ponyfill\n\nA complete implementation of PluralRules is available as\n`intl-pluralrules/plural-rules`, if you'd prefer using it without modifying your\n`Intl` object, or if you wish to use it rather than your environment's own:\n\n```js\nimport PluralRules from 'intl-pluralrules/plural-rules'\n\nnew PluralRules('en').select(1) // 'one'\nnew PluralRules('en', { minimumSignificantDigits: 3 }).select(1) // 'other'\n```\n\n## Factory\n\nIn order to support all available locales, their data needs to be included in\nthe package. This means that when minified and gzipped, the above-documented\nusage adds about 7kB to your application's production size. If this is a\nconcern, you can use `intl-pluralrules/factory` and [make-plural] to build a\nPluralRules class with locale support limited to only what you actually use.\n\n[make-plural]: https://www.npmjs.com/package/make-plural\n\nThanks to tree-shaking, this example that only supports English and French\nminifies & gzips to 1619 bytes. Do note that this size difference is only\napparent with minified production builds.\n\n```js\nimport getPluralRules from 'intl-pluralrules/factory'\nimport { en, fr } from 'make-plural/plurals'\nimport { en as enCat, fr as frCat } from 'make-plural/pluralCategories'\n\nconst sel = { en, fr }\nconst getSelector = lc => sel[lc]\n\nconst cat = { en: enCat, fr: frCat }\nconst getCategories = (lc, ord) => cat[lc][ord ? 'ordinal' : 'cardinal']\n\nconst PluralRules = getPluralRules(\n  Intl.NumberFormat, // Not available in IE 10\n  getSelector,\n  getCategories\n)\nexport default PluralRules\n```\n\nAll arguments of `getPluralRules(NumberFormat, getSelector, getCategories)` are\nrequired.\n\n- `NumberFormat` should be `Intl.NumberFormat`, or a minimal implementation\n  such as the one available at `intl-pluralrules/pseudo-number-format`. It\n  should at least support the `\"en\"` locale and all of the min/max digit count\n  options.\n- `getSelector(lc)` should return a `function(n, ord)` returning the plural\n  category of `n`, using cardinal plural rules (by default), or ordinal rules if\n  `ord` is true. `n` may be a number, or the formatted string representation of\n  a number. This may be called with any user-provided string `lc`, and should\n  return `undefined` for invalid or unsupported locales.\n- `getCategories(lc, ord)` should return the set of available plural categories\n  for the locale, either for cardinals (by default), or ordinals if `ord` is\n  true. This function will be called only with values for which `getSelector`\n  returns a function.\n",
    "licenseText": "Copyright 2015-2018 by Eemeli Aro <eemeli@gmail.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/intl-pluralrules/-/intl-pluralrules-1.3.1.tgz#304ec4038a597894f6616633cbf5e66fb3dbee04",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/intl-pluralrules/-/intl-pluralrules-1.3.1.tgz",
    "hash": "304ec4038a597894f6616633cbf5e66fb3dbee04",
    "integrity": "sha512-sNYPls1Q4fyN0EGLFVJ7TIuaMWln01LupLozfIBt69rHK0DHehghMSz6ejfnSklgRddnyQSEaQPIU6d9TCKH3w==",
    "registry": "npm",
    "packageName": "intl-pluralrules",
    "cacheIntegrity": "sha512-sNYPls1Q4fyN0EGLFVJ7TIuaMWln01LupLozfIBt69rHK0DHehghMSz6ejfnSklgRddnyQSEaQPIU6d9TCKH3w== sha1-ME7EA4pZeJT2YWYzy/Xmb7Pb7gQ="
  },
  "registry": "npm",
  "hash": "304ec4038a597894f6616633cbf5e66fb3dbee04"
}