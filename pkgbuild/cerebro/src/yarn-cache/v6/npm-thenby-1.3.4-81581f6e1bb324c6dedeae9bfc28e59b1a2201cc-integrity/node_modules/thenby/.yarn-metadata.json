{
  "manifest": {
    "name": "thenby",
    "version": "1.3.4",
    "description": "Micro library for sorting arrays using the firstBy().thenBy().thenBy() syntax",
    "main": "thenBy.module.js",
    "types": "thenBy.module.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/Teun/thenBy.js.git"
    },
    "keywords": [
      "sort",
      "order",
      "sorting",
      "arrays",
      "multiple"
    ],
    "files": [
      "thenBy.module.js",
      "thenBy.module.d.ts",
      "thenBy.min.js"
    ],
    "scripts": {
      "test": "gulp",
      "build": "gulp build"
    },
    "author": {
      "name": "Teun Duynstee"
    },
    "license": "Apache-2.0",
    "bugs": {
      "url": "https://github.com/Teun/thenBy.js/issues"
    },
    "homepage": "https://github.com/Teun/thenBy.js",
    "devDependencies": {
      "chai": "^3.5.0",
      "gulp": "^4.0.2",
      "gulp-insert": "^0.5.0",
      "gulp-mocha": "^7.0.2",
      "gulp-rename": "^1.2.2",
      "gulp-replace": "^0.5.4",
      "gulp-uglify": "^2.1.2",
      "gulp-umd": "^2.0.0",
      "performance-now": "^0.2.0"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-thenby-1.3.4-81581f6e1bb324c6dedeae9bfc28e59b1a2201cc-integrity/node_modules/thenby/package.json",
    "readmeFilename": "README.md",
    "readme": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [thenBy.js usage](#thenbyjs-usage)\n    - [Sort by property names](#sort-by-property-names)\n    - [Sort by unary functions](#sort-by-unary-functions)\n  - [Extra options](#extra-options)\n    - [Sort descending](#sort-descending)\n    - [Case insensitive sorting](#case-insensitive-sorting)\n    - [Custom compare function](#custom-compare-function)\n    - [Internationalization: Using javascripts native `Intl.Collator`](#internationalization-using-javascripts-native-intlcollator)\n  - [A word on performance](#a-word-on-performance)\n  - [Installing](#installing)\n    - [Install in your HTML](#install-in-your-html)\n    - [Install using npm or yarn](#install-using-npm-or-yarn)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# thenBy.js usage\n\n  [![NPM Version][npm-image]][npm-url]\n  [![NPM Downloads][downloads-image]][downloads-url]\n\n`thenBy` is a javascript micro library that helps sorting arrays on multiple keys. It allows you to use the [native Array::sort() method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) of javascript, but pass in multiple functions to sort that are composed with `firstBy().thenBy().thenBy()` style.\n\nExample:\n```javascript\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; })\n    .thenBy(function (v1, v2) { return v1.population - v2.population; })\n    .thenBy(function (v1, v2) { return v1.id - v2.id; })\n);\n```\n`thenBy` also offers some nice shortcuts that make the most common ways of sorting even easier and more readable.\n\n### Sort by property names\nJavascript sorting relies heavily on passing discriminator functions that return -1, 0 or 1 for a pair of items. While this is very flexible, often you want to sort on the value of a simple property. As a convenience, thenBy.js builds the appropriate compare function for you if you pass in a property name (instead of a function). The example above would then look like this:\n```javascript\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; })\n    .thenBy(\"population\")\n    .thenBy(\"id\")\n);\n```\n\nIf an element doesn't have the property defined, it will sort like the empty string (\"\"). Typically, this will be at the top.\n\n### Sort by unary functions\nYou can also pass a function that takes a single item and returns its sorting key. This turns the above expression into:\n```javascript\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v) { return v.name.length; })\n    .thenBy(\"population\")\n    .thenBy(\"id\")\n);\n```\n\nNote that javascript contains a number of standard functions that can be passed in here as well. The Number() function will make your sorting sort on numeric values instead of lexical values:\n```javascript\nvar values = [\"2\", \"20\", \"03\", \"-2\", \"0\", 200, \"2\"];\nvar sorted = values.sort(firstBy(Number));\n```\n## Extra options\n### Sort descending\nthenBy.js allows you to pass in a second parameter for `direction`. If you pass in 'desc' or -1, the sorting will be reversed. So:\n```javascript\n// first by length of name descending, then by population descending, then by ID ascending\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; }, -1)\n    .thenBy(\"population\", \"desc\")\n    .thenBy(\"id\")\n);\n```\n\n### Case insensitive sorting\n(as of v1.2.0) All of the shortcut methods allow you to sort case insensitive as well. The second parameter expects an options object (if it is a number, it is interpreted as `direction` as above). The ignoreCase property can be set to true, like this:\n```javascript\n// first by name, case insensitive, then by population\ndata.sort(\n    firstBy(\"name\", {ignoreCase:true})\n    .thenBy(\"population\")\n);\n```\nIf you want to use both descending and ignoreCase, you have to use the options syntax for direction as well:\n```javascript\n// sort by name, case insensitive and descending\ndata.sort(firstBy(\"name\", {ignoreCase:true, direction:\"desc\"}));\n```\n### Custom compare function\nIf you have more specific wishes for the exact sort order, but still want to use the convenience of unary functions or sorting on property names, you can pass in you own compare function in the options. Here we use a compare function that known about the relative values of playing cards::\n\n```javascript\nconst cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nvar cardCompare = (c1, c2) =>{\n    return cards.indexOf(c1) - cards.indexOf(c2);\n}\nvar handOfCards =  [\n        { id: 7, suit:\"c\", card:\"A\" },\n        { id: 8, suit:\"d\", card:\"10\" },\n        // etc\n    ];\nhandOfCards.sort(firstBy(\"card\", {cmp: cardCompare, direction: \"desc\"}));\n\n```\nYou can use the `cmp` function together with `direction`, but not with `ignoreCase` (for obvious reasons). \n\n### Internationalization: Using javascripts native `Intl.Collator`\nOne of the more interesting custom compare functions you may want to pass in is the native `compare` function that is exposed by `Intl.Collator`. This compare function knows about the different sorting rules in different cultures. Many browsers have these implemented, but in NodeJS, the API is implemented, but only for the English culture. You would use it with thenBy like this:\n\n```javascript\n// in German, ä sorts with a\nvar germanCompare = new Intl.Collator('de').compare;\n// in Swedish, ä sorts after z\nvar swedishCompare = new Intl.Collator('sv').compare;\ndata.sort(\n    firstBy(\"name\", {cmp: swedishCompare})\n);\n```\nCheck the [details on using Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator).\n\n## A word on performance\nthenBy constructs a comparer function for you. It does this by combining the functions you pass in with a number of small utility functions that perform tasks like \"reverting\", \"combining the current sort order with the previous one\", etc. Also, these operations try to work correctly, no matter what content is in the sorted array. There are two steps here that cost time: constructing the über-function and running it. The construction time should always be negligible. The run time however can be slower than when you carefully handcraft the compare function. Still, *normally you shouldn't worry about this*, but if you're sorting very large sets, it could matter. For example, there is some overhead in making several small functions call each other instead of creating one piece of code. Also, if you know your data well, and know that a specific field is *alwways present* and is *always a number*, you could code a significantly faster compare function then thenBy's results. The unit tests contain an extreme example.\n\nIf you use thenBy to combine multiple compare functions into one (where each function expects two parameters), the difference is small. Using unary functions adds some overhead, using direction:desc adds some, using only a property name adds a little, but will check for missing values, which could be optimized. Ignoring case will slow down, but not more so than when handcoded.   \n\n## Installing\n### Install in your HTML\nTo include it into your page/project, just paste the minified code from https://raw.github.com/Teun/thenBy.js/master/thenBy.min.js into yours (699 characters). If you don't want the `firstBy` function in your global namespace, you can assign it to a local variable (see sample.htm).\n\n### Install using npm or yarn\n```npm install thenby```\n\nor\n\n```yarn add thenby```\n\nthen in your app:\n\n```var firstBy = require('thenby');```\n\nor in TypeScript/ES6:\n\n```import {firstBy} from \"thenby\";```\n\nFor a small demo of how TypeScript support looks in a good editor (i.e. VS Code), [check this short video](https://youtu.be/mKJovFLyxro).\n\n\nThanks a lot to [bergus](https://github.com/bergus), [hagabaka](https://github.com/hagabaka), [infolyzer](https://github.com/infolyzer) and [Foxhoundn](https://github.com/Foxhoundn) for their improvements.\nThanks to [jsgoupil](https://github.com/jsgoupil) and [HonoluluHenk](https://github.com/HonoluluHenk) for their help on the TypeScript declaration.\n\n\n[npm-image]: https://img.shields.io/npm/v/thenby.svg\n[npm-url]: https://npmjs.org/package/thenby\n[downloads-image]: https://img.shields.io/npm/dm/thenby.svg\n[downloads-url]: https://npmjs.org/package/thenby\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/thenby/-/thenby-1.3.4.tgz#81581f6e1bb324c6dedeae9bfc28e59b1a2201cc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/thenby/-/thenby-1.3.4.tgz",
    "hash": "81581f6e1bb324c6dedeae9bfc28e59b1a2201cc",
    "integrity": "sha512-89Gi5raiWA3QZ4b2ePcEwswC3me9JIg+ToSgtE0JWeCynLnLxNr/f9G+xfo9K+Oj4AFdom8YNJjibIARTJmapQ==",
    "registry": "npm",
    "packageName": "thenby",
    "cacheIntegrity": "sha512-89Gi5raiWA3QZ4b2ePcEwswC3me9JIg+ToSgtE0JWeCynLnLxNr/f9G+xfo9K+Oj4AFdom8YNJjibIARTJmapQ== sha1-gVgfbhuzJMbe3q6b/CjlmxoiAcw="
  },
  "registry": "npm",
  "hash": "81581f6e1bb324c6dedeae9bfc28e59b1a2201cc"
}