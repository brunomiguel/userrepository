{
  "manifest": {
    "name": "eslint-plugin-svelte3",
    "version": "3.4.1",
    "description": "An ESLint plugin for Svelte v3 components.",
    "keywords": [
      "eslint",
      "eslintplugin",
      "svelte",
      "sveltejs"
    ],
    "files": [
      "index.js"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=10"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/sveltejs/eslint-plugin-svelte3.git"
    },
    "author": {
      "name": "Conduitry"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/sveltejs/eslint-plugin-svelte3/issues"
    },
    "peerDependencies": {
      "eslint": ">=6.0.0",
      "svelte": "^3.2.0"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^11.2.0",
      "@typescript-eslint/eslint-plugin": "^5.8.1",
      "@typescript-eslint/parser": "^5.8.1",
      "eslint": ">=7.0.0 < 8",
      "rollup": "^2",
      "sourcemap-codec": "1.4.8",
      "svelte": "^3.2.0",
      "typescript": "^4.5.4"
    },
    "scripts": {
      "build": "rollup -c",
      "dev": "rollup -cw",
      "test": "npm run build && node test"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-eslint-plugin-svelte3-3.4.1-3618700333c8f8f12e28aec93bf18440d44a61fd-integrity/node_modules/eslint-plugin-svelte3/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-plugin-svelte3\n\nAn ESLint plugin for Svelte v3 components.\n\n## Features\n\n- Compiler errors and warnings are displayed through ESLint\n- Script blocks and template expression tags are linted with existing ESLint rules\n- Svelte scope and stores are respected by unused variable and undefined variable rules\n- Idioms like self-assignment and `$:` labels are always allowed, regardless of configuration\n\n## Requirements\n\n- Svelte 3.2+\n- ESLint 6+\n\n## Installation\n\nInstall the plugin package:\n\n```\nnpm install --save-dev eslint-plugin-svelte3\n```\n\nThen add `svelte3` to the `plugins` array in your `.eslintrc.*`, and set `svelte3/svelte3` as the `processor` for your Svelte components.\n\nFor example:\n\n```javascript\nmodule.exports = {\n  parserOptions: {\n    ecmaVersion: 2019,\n    sourceType: 'module'\n  },\n  env: {\n    es6: true,\n    browser: true\n  },\n  plugins: [\n    'svelte3'\n  ],\n  overrides: [\n    {\n      files: ['*.svelte'],\n      processor: 'svelte3/svelte3'\n    }\n  ],\n  rules: {\n    // ...\n  },\n  settings: {\n    // ...\n  }\n};\n```\n\nBy default, this plugin needs to be able to `require('svelte/compiler')`. If ESLint, this plugin, and Svelte are all installed locally in your project, this should not be a problem.\n\n### Installation with TypeScript\n\nIf you want to use TypeScript, you'll need a different ESLint configuration. In addition to the Svelte plugin, you also need the ESLint TypeScript parser and plugin. Install `typescript`, `@typescript-eslint/parser` and `@typescript-eslint/eslint-plugin` from npm and then adjust your config like this:\n\n```javascript\nmodule.exports = {\n  parser: '@typescript-eslint/parser', // add the TypeScript parser\n  plugins: [\n    'svelte3',\n    '@typescript-eslint' // add the TypeScript plugin\n  ],\n  overrides: [ // this stays the same\n    {\n      files: ['*.svelte'],\n      processor: 'svelte3/svelte3'\n    }\n  ],\n  rules: {\n    // ...\n  },\n  settings: {\n    'svelte3/typescript': () => require('typescript'), // pass the TypeScript package to the Svelte plugin\n    // OR\n    'svelte3/typescript': true, // load TypeScript as peer dependency\n    // ...\n  }\n};\n```\n\nIf you also want to be able to use type-aware linting rules (which will result in slower linting, because the whole program needs to be compiled and type-checked), then you also need to add some `parserOptions` configuration. The values below assume that your ESLint config is at the root of your project next to your `tsconfig.json`. For more information, see [here](https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/TYPED_LINTING.md).\n\n```javascript\nmodule.exports = {\n  // ...\n  parserOptions: { // add these parser options\n    tsconfigRootDir: __dirname,\n    project: ['./tsconfig.json'],\n    extraFileExtensions: ['.svelte'],\n  },\n  extends: [ // then, enable whichever type-aware rules you want to use\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking'\n  ],\n  // ...\n};\n```\n\nThere are some limitations to these type-aware rules currently. Specifically, checks in the context of reactive assignments and store subscriptions will report false positives or false negatives, depending on the rule. In the case of reactive assignments, you can work around this by explicitly typing the reactive variable. An example with the `no-unsafe-member-access` rule:\n\n```svelte\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n\n  const store = writable([]);\n  $store.length; // incorrect no-unsafe-member-access error\n\n  $: assignment = [];\n  assignment.length; // incorrect no-unsafe-member-access error\n  // You can work around this by doing\n  let another_assignment: string[];\n  $: another_assignment = [];\n  another_assignment.length; // OK\n</script>\n```\n\n## Interactions with other plugins\n\nCare needs to be taken when using this plugin alongside others. Take a look at [this list of things you need to watch out for](OTHER_PLUGINS.md).\n\n## Configuration\n\nThere are a few settings you can use to adjust this plugin's behavior. These go in the `settings` object in your ESLint configuration.\n\nPassing a function as a value for a setting (which some of the settings below require) is only possible when using a CommonJS `.eslintrc.js` file, and not a JSON or YAML configuration file.\n\n### `svelte3/ignore-warnings`\n\nThis setting can be given a function that indicates whether to ignore a warning in the linting. The function will be passed a warning object and should return a boolean. Only warnings from the Svelte compiler itself can be filtered out through this function. Regular ESLint rules are configured/disabled through the corresponding ESLint settings.\n\nThe default is to not ignore any warnings.\n\n### `svelte3/compiler-options`\n\nMost compiler options do not affect the validity of compiled components, but a couple of them can. If you are compiling to custom elements, or for some other reason need to control how the plugin compiles the components it's linting, you can use this setting.\n\nThis setting can be given an object of compiler options.\n\nThe default is to compile with `{ generate: false }`.\n\n### `svelte3/ignore-styles`\n\nIf you're using some sort of preprocessor on the component styles, then it's likely that when this plugin calls the Svelte compiler on your component, it will throw an exception. In a perfect world, this plugin would be able to apply the preprocessor to the component and then use source maps to translate any warnings back to the original source. In the current reality, however, you can instead simply disregard styles written in anything other than standard CSS. You won't get warnings about the styles from the linter, but your application will still use them (of course) and compiler warnings will still appear in your build logs.\n\nThis setting can be given a function that accepts an object of attributes on a `<style>` tag (like that passed to a Svelte preprocessor) and returns whether to ignore the style block for the purposes of linting.\n\nThe default is to ignore styles when the `<style>` tag has a `lang=` or `type=` attribute.\n\n### `svelte3/named-blocks`\n\nWhen an [ESLint processor](https://eslint.org/docs/user-guide/configuring/plugins#specifying-processor) processes a file, it is able to output named code blocks, which can each have their own linting configuration. When this setting is enabled, the code extracted from `<script context='module'>` tag, the `<script>` tag, and the template are respectively given the block names `module.js`, `instance.js`, and `template.js`.\n\nThis means that to override linting rules in Svelte components, you'd instead have to target `**/*.svelte/*.js`. But it also means that you can define an override targeting `**/*.svelte/*_template.js` for example, and that configuration will only apply to linting done on the templates in Svelte components.\n\nThe default is to not use named code blocks.\n\n### `svelte3/typescript`\n\nIf you use TypeScript inside your Svelte components and want ESLint support, you need to set this option. It expects a function returning an instance of the TypeScript package. This probably means doing `'svelte3/typescript': () => require('typescript')`.\n\nTo support ESLint configuration files that are not written in CommonJS, this can also be set to `true`, which behaves the same as `() => require('typescript')`.\n\nFor backwards compatibility, it also supports being passed the TypeScript package directly, but this is not generally recommended as it unnecessarily loads the package in some situations.\n\nThe default is to not enable TypeScript support.\n\n### `svelte3/compiler`\n\nIn some esoteric setups, this plugin might not be able to find the correct instance of the Svelte compiler to use.\n\nThis setting can be given the result of `require('.../path/to/svelte/compiler')` to indicate which instance should be used in linting the components.\n\nThe default is `require('svelte/compiler')` from wherever the plugin is installed to.\n\n## Using the CLI\n\nIt's probably a good idea to make sure you can lint from the command line before proceeding with configuring your editor.\n\nUsing this with the command line `eslint` tool shouldn't require any special actions. Just remember that if you are running `eslint` on a directory, you need to pass it the `--ext` flag to tell it which nonstandard file extensions you want to lint.\n\n## Integrations\n\nSee [INTEGRATIONS.md](INTEGRATIONS.md) for how to use this plugin with your text editor.\n\n## License\n\n[MIT](LICENSE)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Conduitry\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-svelte3/-/eslint-plugin-svelte3-3.4.1.tgz#3618700333c8f8f12e28aec93bf18440d44a61fd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-svelte3/-/eslint-plugin-svelte3-3.4.1.tgz",
    "hash": "3618700333c8f8f12e28aec93bf18440d44a61fd",
    "integrity": "sha512-7p59WG8qV8L6wLdl4d/c3mdjkgVglQCdv5XOTk/iNPBKXuuV+Q0eFP5Wa6iJd/G2M1qR3BkLPEzaANOqKAZczw==",
    "registry": "npm",
    "packageName": "eslint-plugin-svelte3",
    "cacheIntegrity": "sha512-7p59WG8qV8L6wLdl4d/c3mdjkgVglQCdv5XOTk/iNPBKXuuV+Q0eFP5Wa6iJd/G2M1qR3BkLPEzaANOqKAZczw== sha1-NhhwAzPI+PEuKK7JO/GEQNRKYf0="
  },
  "registry": "npm",
  "hash": "3618700333c8f8f12e28aec93bf18440d44a61fd"
}