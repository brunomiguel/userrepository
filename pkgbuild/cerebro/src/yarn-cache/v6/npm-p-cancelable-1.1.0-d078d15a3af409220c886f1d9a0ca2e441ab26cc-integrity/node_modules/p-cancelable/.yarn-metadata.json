{
  "manifest": {
    "name": "p-cancelable",
    "version": "1.1.0",
    "description": "Create a promise that can be canceled",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-cancelable.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "test": "xo && ava && tsd-check"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "promise",
      "cancelable",
      "cancel",
      "canceled",
      "canceling",
      "cancellable",
      "cancellation",
      "abort",
      "abortable",
      "aborting",
      "cleanup",
      "task",
      "token",
      "async",
      "function",
      "await",
      "promises",
      "bluebird"
    ],
    "devDependencies": {
      "ava": "^1.3.1",
      "delay": "^4.1.0",
      "promise.prototype.finally": "^3.1.0",
      "tsd-check": "^0.3.0",
      "xo": "^0.24.0"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-p-cancelable-1.1.0-d078d15a3af409220c886f1d9a0ca2e441ab26cc-integrity/node_modules/p-cancelable/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-cancelable [![Build Status](https://travis-ci.org/sindresorhus/p-cancelable.svg?branch=master)](https://travis-ci.org/sindresorhus/p-cancelable)\n\n> Create a promise that can be canceled\n\nUseful for animation, loading resources, long-running async computations, async iteration, etc.\n\n\n## Install\n\n```\n$ npm install p-cancelable\n```\n\n\n## Usage\n\n```js\nconst PCancelable = require('p-cancelable');\n\nconst cancelablePromise = new PCancelable((resolve, reject, onCancel) => {\n\tconst worker = new SomeLongRunningOperation();\n\n\tonCancel(() => {\n\t\tworker.close();\n\t});\n\n\tworker.on('finish', resolve);\n\tworker.on('error', reject);\n});\n\n(async () => {\n\ttry {\n\t\tconsole.log('Operation finished successfully:', await cancelablePromise);\n\t} catch (error) {\n\t\tif (cancelablePromise.isCanceled) {\n\t\t\t// Handle the cancelation here\n\t\t\tconsole.log('Operation was canceled');\n\t\t\treturn;\n\t\t}\n\n\t\tthrow error;\n\t}\n})();\n\n// Cancel the operation after 10 seconds\nsetTimeout(() => {\n\tcancelablePromise.cancel('Unicorn has changed its color');\n}, 10000);\n```\n\n\n## API\n\n### new PCancelable(executor)\n\nSame as the [`Promise` constructor](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise), but with an appended `onCancel` parameter in `executor`.<br>\nCancelling will reject the promise with `PCancelable.CancelError`. To avoid that, set `onCancel.shouldReject` to `false`.\n\n```js\nconst PCancelable = require('p-cancelable');\n\nconst cancelablePromise = new PCancelable((resolve, reject, onCancel) => {\n\tconst job = new Job();\n\n\tonCancel.shouldReject = false;\n\tonCancel(() => {\n\t\tjob.stop();\n\t});\n\n\tjob.on('finish', resolve);\n});\n\ncancelablePromise.cancel(); // Doesn't throw an error\n```\n\n`PCancelable` is a subclass of `Promise`.\n\n#### onCanceled(fn)\n\nType: `Function`\n\nAccepts a function that is called when the promise is canceled.\n\nYou're not required to call this function. You can call this function multiple times to add multiple cancel handlers.\n\n### PCancelable#cancel([reason])\n\nType: `Function`\n\nCancel the promise and optionally provide a reason.\n\nThe cancellation is synchronous. Calling it after the promise has settled or multiple times does nothing.\n\n### PCancelable#isCanceled\n\nType: `boolean`\n\nWhether the promise is canceled.\n\n### PCancelable.CancelError\n\nType: `Error`\n\nRejection reason when `.cancel()` is called.\n\nIt includes a `.isCanceled` property for convenience.\n\n### PCancelable.fn(fn)\n\nConvenience method to make your promise-returning or async function cancelable.\n\nThe function you specify will have `onCancel` appended to its parameters.\n\n```js\nconst PCancelable = require('p-cancelable');\n\nconst fn = PCancelable.fn((input, onCancel) => {\n\tconst job = new Job();\n\n\tonCancel(() => {\n\t\tjob.cleanup();\n\t});\n\n\treturn job.start(); //=> Promise\n});\n\nconst cancelablePromise = fn('input'); //=> PCancelable\n\n// …\n\ncancelablePromise.cancel();\n```\n\n\n## FAQ\n\n### Cancelable vs. Cancellable\n\n[In American English, the verb cancel is usually inflected canceled and canceling—with one l.](http://grammarist.com/spelling/cancel/)<br>Both a [browser API](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable) and the [Cancelable Promises proposal](https://github.com/tc39/proposal-cancelable-promises) use this spelling.\n\n### What about the official [Cancelable Promises proposal](https://github.com/tc39/proposal-cancelable-promises)?\n\n~~It's still an early draft and I don't really like its current direction. It complicates everything and will require deep changes in the ecosystem to adapt to it. And the way you have to use cancel tokens is verbose and convoluted. I much prefer the more pragmatic and less invasive approach in this module.~~ The proposal was withdrawn.\n\n\n## Related\n\n- [p-progress](https://github.com/sindresorhus/p-progress) - Create a promise that reports progress\n- [p-lazy](https://github.com/sindresorhus/p-lazy) - Create a lazy promise that defers execution until `.then()` or `.catch()` is called\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-1.1.0.tgz#d078d15a3af409220c886f1d9a0ca2e441ab26cc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-1.1.0.tgz",
    "hash": "d078d15a3af409220c886f1d9a0ca2e441ab26cc",
    "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
    "registry": "npm",
    "packageName": "p-cancelable",
    "cacheIntegrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw== sha1-0HjRWjr0CSIMiG8dmgyi5EGrJsw="
  },
  "registry": "npm",
  "hash": "d078d15a3af409220c886f1d9a0ca2e441ab26cc"
}