{
  "manifest": {
    "name": "electron-dl",
    "version": "3.2.1",
    "description": "Simplified file downloads for your Electron app",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/electron-dl.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "scripts": {
      "//": "Enable tsd again when the Electron issue is fixed",
      "start": "electron run.js",
      "test": "xo && ava"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "electron",
      "app",
      "file",
      "download",
      "downloader",
      "progress"
    ],
    "dependencies": {
      "ext-name": "^5.0.0",
      "pupa": "^2.0.1",
      "unused-filename": "^2.1.0"
    },
    "devDependencies": {
      "@types/node": "^13.1.4",
      "ava": "^2.4.0",
      "cp-file": "^7.0.0",
      "electron": "^7.1.7",
      "minimist": "^1.2.0",
      "node-static": "^0.7.11",
      "pify": "^4.0.1",
      "spectron": "^9.0.0",
      "tsd": "^0.11.0",
      "uuid": "^3.3.2",
      "xo": "^0.25.3"
    },
    "xo": {
      "envs": [
        "node",
        "browser"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-electron-dl-3.2.1-244a1316c663691f70e8aa4515cd1a401b4b5690-integrity/node_modules/electron-dl/package.json",
    "readmeFilename": "readme.md",
    "readme": "# electron-dl\n\n> Simplified file downloads for your [Electron](https://electronjs.org) app\n\n## Why?\n\n- One function call instead of having to manually implement a lot of [boilerplate](index.js).\n- Saves the file to the users Downloads directory instead of prompting.\n- Bounces the Downloads directory in the dock when done. *(macOS)*\n- Handles multiple downloads.\n- Support for `BrowserWindow` and `BrowserView`.\n- Shows badge count *(macOS & Linux only)* and download progress. Example on macOS:\n\n<img src=\"screenshot.png\" width=\"82\">\n\n## Install\n\n```\n$ npm install electron-dl\n```\n\nRequires Electron 7 or later.\n\n## Usage\n\n### Register it for all windows\n\nThis is probably what you want for your app.\n\n```js\nconst {app, BrowserWindow} = require('electron');\nconst electronDl = require('electron-dl');\n\nelectronDl();\n\nlet win;\n(async () => {\n\tawait app.whenReady();\n\twin = new BrowserWindow();\n})();\n```\n\n### Use it manually\n\nThis can be useful if you need download functionality in a reusable module.\n\n```js\nconst {BrowserWindow, ipcMain} = require('electron');\nconst {download} = require('electron-dl');\n\nipcMain.on('download-button', async (event, {url}) => {\n \tconst win = BrowserWindow.getFocusedWindow();\n \tconsole.log(await download(win, url));\n});\n```\n\n## API\n\nIt can only be used in the [main](https://electronjs.org/docs/glossary/#main-process) process.\n\n### electronDl(options?)\n\n### electronDl.download(window, url, options?): Promise<[DownloadItem](https://electronjs.org/docs/api/download-item)>\n\n### window\n\nType: `BrowserWindow | BrowserView`\n\nWindow to register the behavior on. Alternatively, a `BrowserView` can be passed.\n\n### url\n\nType: `string`\n\nURL to download.\n\n### options\n\nType: `object`\n\n#### saveAs\n\nType: `boolean`\\\nDefault: `false`\n\nShow a `Save Asâ€¦` dialog instead of downloading immediately.\n\nNote: Only use this option when strictly necessary. Downloading directly without a prompt is a much better user experience.\n\n#### directory\n\nType: `string`\\\nDefault: [User's downloads directory](https://electronjs.org/docs/api/app/#appgetpathname)\n\nDirectory to save the file in.\n\n#### filename\n\nType: `string`\\\nDefault: [`downloadItem.getFilename()`](https://electronjs.org/docs/api/download-item/#downloaditemgetfilename)\n\nName of the saved file.\n\nThis option only makes sense for `electronDl.download()`.\n\n#### errorTitle\n\nType: `string`\\\nDefault: `'Download Error'`\n\nTitle of the error dialog. Can be customized for localization.\n\nNote: Error dialog will not be shown in `electronDl.download()`. Please handle error manually.\n\n#### errorMessage\n\nType: `string`\\\nDefault: `'The download of {filename} was interrupted'`\n\nMessage of the error dialog. `{filename}` is replaced with the name of the actual file. Can be customized for localization.\n\nNote: Error dialog will not be shown in `electronDl.download()`. Please handle error manually.\n\n#### onStarted\n\nType: `Function`\n\nOptional callback that receives the [download item](https://electronjs.org/docs/api/download-item).\nYou can use this for advanced handling such as canceling the item like `item.cancel()`.\n\n#### onProgress\n\nType: `Function`\n\nOptional callback that receives an object containing information about the progress of the current download item.\n\n```js\n{\n\tpercent: 0.1,\n\ttransferredBytes: 100,\n\ttotalBytes: 1000\n}\n```\n\n#### onTotalProgress\n\nType: `Function`\n\nOptional callback that receives an object containing information about the combined progress of all download items done within any registered window.\n\nEach time a new download is started, the next callback will include it. The progress percentage could therefore become smaller again.\nThis callback provides the same data that is used for the progress bar on the app icon.\n\n```js\n{\n\tpercent: 0.1,\n\ttransferredBytes: 100,\n\ttotalBytes: 1000\n}\n```\n\n#### onCancel\n\nType: `Function`\n\nOptional callback that receives the [download item](https://electronjs.org/docs/api/download-item) for which the download has been cancelled.\n\n#### onCompleted\n\nType: `Function`\n\nOptional callback that receives an object with information about an item that has been completed. It is called for each completed item.\n\n```js\n{\n\tfilename: 'file.zip',\n\tpath: '/path/file.zip',\n\tfileSize: 503320,\n\tmimeType: 'application/zip',\n\turl: 'https://example.com/file.zip'\n}\n```\n\n#### openFolderWhenDone\n\nType: `boolean`\\\nDefault: `false`\n\nReveal the downloaded file in the system file manager, and if possible, select the file.\n\n#### showBadge\n\nType: `boolean`\\\nDefault: `true`\n\nShows the file count badge on macOS/Linux dock icons when download is in progress.\n\n## Development\n\nAfter making changes, run the automated tests:\n\n```\n$ npm test\n```\n\nAnd before submitting a pull request, run the manual tests to manually verify that everything works:\n\n```\nnpm start\n```\n\n## Related\n\n- [electron-debug](https://github.com/sindresorhus/electron-debug) - Adds useful debug features to your Electron app\n- [electron-context-menu](https://github.com/sindresorhus/electron-context-menu) - Context menu for your Electron app\n- [electron-store](https://github.com/sindresorhus/electron-store) - Save and load data like user preferences, app state, cache, etc\n- [electron-unhandled](https://github.com/sindresorhus/electron-unhandled) - Catch unhandled errors and promise rejections in your Electron app\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/electron-dl/-/electron-dl-3.2.1.tgz#244a1316c663691f70e8aa4515cd1a401b4b5690",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/electron-dl/-/electron-dl-3.2.1.tgz",
    "hash": "244a1316c663691f70e8aa4515cd1a401b4b5690",
    "integrity": "sha512-k5DFjocJlXbrjshO1zeWe/Gz7HkGwCgnehHPemiyzN2B/LfLlnbIX7sCj5F+huTwZ2l+nQehTI4IR37xvCn6FQ==",
    "registry": "npm",
    "packageName": "electron-dl",
    "cacheIntegrity": "sha512-k5DFjocJlXbrjshO1zeWe/Gz7HkGwCgnehHPemiyzN2B/LfLlnbIX7sCj5F+huTwZ2l+nQehTI4IR37xvCn6FQ== sha1-JEoTFsZjaR9w6KpFFc0aQBtLVpA="
  },
  "registry": "npm",
  "hash": "244a1316c663691f70e8aa4515cd1a401b4b5690"
}