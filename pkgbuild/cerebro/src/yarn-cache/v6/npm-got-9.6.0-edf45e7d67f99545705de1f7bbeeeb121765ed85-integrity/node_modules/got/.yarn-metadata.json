{
  "manifest": {
    "name": "got",
    "version": "9.6.0",
    "description": "Simplified HTTP requests",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/got.git"
    },
    "main": "source",
    "engines": {
      "node": ">=8.6"
    },
    "scripts": {
      "test": "xo && nyc ava",
      "release": "np"
    },
    "files": [
      "source"
    ],
    "keywords": [
      "http",
      "https",
      "get",
      "got",
      "url",
      "uri",
      "request",
      "util",
      "utility",
      "simple",
      "curl",
      "wget",
      "fetch",
      "net",
      "network",
      "electron"
    ],
    "dependencies": {
      "@sindresorhus/is": "^0.14.0",
      "@szmarczak/http-timer": "^1.1.2",
      "cacheable-request": "^6.0.0",
      "decompress-response": "^3.3.0",
      "duplexer3": "^0.1.4",
      "get-stream": "^4.1.0",
      "lowercase-keys": "^1.0.1",
      "mimic-response": "^1.0.1",
      "p-cancelable": "^1.0.0",
      "to-readable-stream": "^1.0.0",
      "url-parse-lax": "^3.0.0"
    },
    "devDependencies": {
      "ava": "^1.1.0",
      "coveralls": "^3.0.0",
      "delay": "^4.1.0",
      "form-data": "^2.3.3",
      "get-port": "^4.0.0",
      "np": "^3.1.0",
      "nyc": "^13.1.0",
      "p-event": "^2.1.0",
      "pem": "^1.13.2",
      "proxyquire": "^2.0.1",
      "sinon": "^7.2.2",
      "slow-stream": "0.0.4",
      "tempfile": "^2.0.0",
      "tempy": "^0.2.1",
      "tough-cookie": "^3.0.0",
      "xo": "^0.24.0"
    },
    "ava": {
      "concurrency": 4
    },
    "browser": {
      "decompress-response": false,
      "electron": false
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-got-9.6.0-edf45e7d67f99545705de1f7bbeeeb121765ed85-integrity/node_modules/got/package.json",
    "readmeFilename": "readme.md",
    "readme": "<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring me!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master) [![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got) [![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](advanced-creation.md#merging-instances)\n- [Electron support](#useelectronnet)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n<a href=\"https://www.patreon.com/sindresorhus\">\n\t<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\n</a>\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst fs = require('fs');\nconst got = require('got');\n\ngot.stream('sindresorhus.com').pipe(fs.createWriteStream('index.html'));\n\n// For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\nfs.createReadStream('index.html').pipe(got.stream.post('sindresorhus.com'));\n```\n\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or in the `options`.\n\n#### got(url, [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string` `Object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will default to `https`.\n\n##### options\n\nType: `Object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### baseUrl\n\nType: `string` `Object`\n\nWhen specified, `url` will be prepended by `baseUrl`.<br>\nIf you specify an absolute URL, it will skip the `baseUrl`.\n\nVery useful when used with `got.extend()` to create niche-specific Got instances.\n\nCan be a string or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nSlash at the end of `baseUrl` and at the beginning of the `url` argument is optional:\n\n```js\nawait got('hello', {baseUrl: 'https://example.com/v1'});\n//=> 'https://example.com/v1/hello'\n\nawait got('/hello', {baseUrl: 'https://example.com/v1/'});\n//=> 'https://example.com/v1/hello'\n\nawait got('/hello', {baseUrl: 'https://example.com/v1'});\n//=> 'https://example.com/v1/hello'\n```\n\n###### headers\n\nType: `Object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string` `Buffer` `stream.Readable` [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe body that will be sent with a `POST` request.\n\nIf present in `options` and `options.method` is not set, `options.method` will be set to `POST`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### encoding\n\nType: `string` `null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `boolean`<br>\nDefault: `false`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n**Note:** `body` must be a plain object. It will be converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### json\n\nType: `boolean`<br>\nDefault: `false`\n\n**Note:** If you use `got.stream()`, this option will be ignored.\n**Note:** `body` must be a plain object or array and will be stringified.\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/json`.\n\nParse response body with `JSON.parse` and set `accept` header to `application/json`. If used in conjunction with the `form` option, the `body` will the stringified as querystring and the response parsed as JSON.\n\n###### query\n\nType: `string` `Object<string, string|number>` [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst query = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {query});\n\nconsole.log(query.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst query = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {query});\n\nconsole.log(query);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number` `Object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number` `Object`<br>\nDefault:\n- retries: `2`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `retries`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for the time until retry, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `retries` property can be a `number` or a `function` with `retry` and `error` arguments. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate` unless you set it yourself.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `Object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `Object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](migration-guides.md#breaking-changes) for an example.\n\n**Note**: This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.js) [request options](#options). Got will make no further changes to the request before it is sent. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n**Note:** If you modify the `body` you will need to modify the `content-length` header too, because it has already been computed and assigned.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.js) [request options](#options). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\toptions => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.js) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot('example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note**: Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\t\nconst got = require('got');\t\n\ngot('api.github.com/some-endpoint', {\t\n\thooks: {\t\n\t\tonError: [\t\n\t\t\terror => {\t\n\t\t\t\tconst {response} = error;\t\n \t\t\t\tif (response && response.body) {\t\n\t\t\t\t\terror.name = 'GitHubError';\t\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\t\n\t\t\t\t}\n\n \t\t\t\treturn error;\t\n\t\t\t}\t\n\t\t]\t\n\t}\t\n});\t\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `Object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `gotOptions` - The options that were set on this request.\n\n##### body\n\nType: `string` `Object` *(depending on `options.json`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `Object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### fromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `Array`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend([options])\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tbaseUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tbaseUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = (await client.get('/headers', {json: true})).body;\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tjson: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = (await jsonClient.get('/headers')).body;\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](advanced-creation.md).\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `Object`:\n\t- If the parent property is a plain `Object` too, both values are merged recursively into a new `Object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `Object`\n\nThe default Got options.\n\n## Errors\n\nEach error contains `host`, `hostname`, `method`, `path`, `protocol`, `url` and `gotOptions` properties to make debugging easier.\n\nIn Promise mode, the `response` is attached to the error.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen `json` option is enabled, server response code is 2xx, and `JSON.parse` fails. Includes `statusCode` and `statusMessage` properties.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes `body`, `statusCode`, `statusMessage`, and `redirectUrls` properties.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `statusCode`, `statusMessage`, and `redirectUrls` property which is an array of the URLs Got was redirected to before giving up.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('sindresorhus.com', {cache: map});\n\t\tconsole.log(response.fromCache);\n\t\t//=> false\n\n\t\tresponse = await got('sindresorhus.com', {cache: map});\n\t\tconsole.log(response.fromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nCheck out [`global-tunnel`](https://github.com/np-maintain/global-tunnel) if you want to configure proxy support for all HTTP/HTTPS traffic in your app.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\nconst cookieJar = new CookieJar();\ncookieJar.setCookie('foo=bar', 'https://www.google.com');\n\ngot('google.com', {cookieJar});\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('google.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tjson: true\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\nconst got = require('got');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tbaseUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nIf you need real integration tests you can use [`create-test-server`](https://github.com/lukechilds/create-test-server):\n\n```js\nconst got = require('got');\nconst createTestServer = require('create-test-server');\n\n(async () => {\n\tconst server = await createTestServer();\n\tserver.get('/', 'Hello world!');\n\n\tconst response = await got(server.url);\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n\n\tawait server.close();\n})();\n```\n\n\n## Tips\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `baseUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tbaseUrl: 'example.com',\n\tjson: true,\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n**Tip:** Need to merge some instances into a single one? Check out [`got.mergeInstances()`](advanced-creation.md#merging-instances).\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |      `got`     | [`request`][r0] | [`node-fetch`][n0] |  [`axios`][a0]  |  [`superagent`][s0]  |\n|-----------------------|:--------------:|:---------------:|:------------------:|:---------------:|:--------------------:|\n| HTTP/2 support        |        ❔       |        ✖       |          ✖         |        ✖       |          ✔\\*\\*      |\n| Browser support       |        ✖       |        ✖       |          ✔\\*       |        ✔       |          ✔          |\n| Electron support      |        ✔       |        ✖       |          ✖         |        ✖       |          ✖          |\n| Promise API           |        ✔       |        ✔       |          ✔         |        ✔       |          ✔          |\n| Stream API            |        ✔       |        ✔       |    Node.js only    |        ✖       |          ✔          |\n| Request cancelation   |        ✔       |        ✖       |          ✔         |        ✔       |          ✔          |\n| RFC compliant caching |        ✔       |        ✖       |          ✖         |        ✖       |          ✖          |\n| Cookies (out-of-box)  |        ✔       |        ✔       |          ✖         |        ✖       |          ✖          |\n| Follows redirects     |        ✔       |        ✔       |          ✔         |        ✔       |          ✔          |\n| Retries on failure    |        ✔       |        ✖       |          ✖         |        ✖       |          ✔          |\n| Progress events       |        ✔       |        ✖       |          ✖         |  Browser only  |          ✔          |\n| Handles gzip/deflate  |        ✔       |        ✔       |          ✔         |        ✔       |          ✔          |\n| Advanced timeouts     |        ✔       |        ✖       |          ✖         |        ✖       |          ✖          |\n| Timings               |        ✔       |        ✔       |          ✖         |        ✖       |          ✖          |\n| Errors with metadata  |        ✔       |        ✖       |          ✖         |        ✔       |          ✖          |\n| JSON mode             |        ✔       |        ✔       |          ✖         |        ✔       |          ✔          |\n| Custom defaults       |        ✔       |        ✔       |          ✖         |        ✔       |          ✖          |\n| Composable            |        ✔       |        ✖       |          ✖         |        ✖       |          ✔          |\n| Hooks                 |        ✔       |        ✖       |          ✖         |        ✔       |          ✖          |\n| Issues open           | [![][gio]][g1] | [![][rio]][r1]  |   [![][nio]][n1]   |  [![][aio]][a1] |   [![][sio]][s1]    |\n| Issues closed         | [![][gic]][g2] | [![][ric]][r2]  |   [![][nic]][n2]   |  [![][aic]][a2] |   [![][sic]][s2]    |\n| Downloads             | [![][gd]][g3]  |  [![][rd]][r3]  |   [![][nd]][n3]    |  [![][ad]][a3]  |   [![][sd]][s3]     |\n| Coverage              | [![][gc]][g4]  |  [![][rc]][r4]  |   [![][nc]][n4]    |  [![][ac]][a4]  |       unknown       |\n| Build                 | [![][gb]][g5]  |  [![][rb]][r5]  |   [![][nb]][n5]    |  [![][ab]][a5]  |   [![][sb]][s5]     |\n| Bugs                  | [![][gbg]][g6] | [![][rbg]][r6]  |   [![][nbg]][n6]   |  [![][abg]][a6] |   [![][sbg]][s6]    |\n| Dependents            | [![][gdp]][g7] | [![][rdp]][r7]  |   [![][ndp]][n7]   |  [![][adp]][a7] |   [![][sdp]][s7]    |\n| Install size          | [![][gis]][g8] | [![][ris]][r8]  |   [![][nis]][n8]   |  [![][ais]][a8] |   [![][sis]][s8]    |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Vsevolod Strukchinsky](https://github.com/floatdrop.png?size=100)](https://github.com/floatdrop) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s)\n---|---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Vsevolod Strukchinsky](https://github.com/floatdrop) | [Alexander Tesfamichael](https://alextes.me) | [Luke Childs](https://github.com/lukechilds) | [Szymon Marczak](https://github.com/szmarczak) | [Brandon Smith](https://github.com/brandon93s)\n\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/got/-/got-9.6.0.tgz#edf45e7d67f99545705de1f7bbeeeb121765ed85",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/got/-/got-9.6.0.tgz",
    "hash": "edf45e7d67f99545705de1f7bbeeeb121765ed85",
    "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
    "registry": "npm",
    "packageName": "got",
    "cacheIntegrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q== sha1-7fRefWf5lUVwXeH3u+7rEhdl7YU="
  },
  "registry": "npm",
  "hash": "edf45e7d67f99545705de1f7bbeeeb121765ed85"
}