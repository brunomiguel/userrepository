{
  "manifest": {
    "name": "@actions/github",
    "version": "5.0.0",
    "description": "Actions github lib",
    "keywords": [
      "github",
      "actions"
    ],
    "homepage": "https://github.com/actions/toolkit/tree/main/packages/github",
    "license": "MIT",
    "main": "lib/github.js",
    "types": "lib/github.d.ts",
    "files": [
      "lib",
      "!.DS_Store"
    ],
    "publishConfig": {
      "access": "public"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/actions/toolkit.git",
      "directory": "packages/github"
    },
    "scripts": {
      "audit-moderate": "npm install && npm audit --json --audit-level=moderate > audit.json",
      "test": "jest",
      "build": "tsc",
      "format": "prettier --write **/*.ts",
      "format-check": "prettier --check **/*.ts",
      "tsc": "tsc"
    },
    "bugs": {
      "url": "https://github.com/actions/toolkit/issues"
    },
    "dependencies": {
      "@actions/http-client": "^1.0.11",
      "@octokit/core": "^3.4.0",
      "@octokit/plugin-paginate-rest": "^2.13.3",
      "@octokit/plugin-rest-endpoint-methods": "^5.1.1"
    },
    "devDependencies": {
      "jest": "^26.6.3",
      "proxy": "^1.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/brunomiguel/userrepository/pkgbuild/cerebro/src/yarn-cache/v6/npm-@actions-github-5.0.0-integrity/node_modules/@actions/github/package.json",
    "readmeFilename": "README.md",
    "readme": "# `@actions/github`\n\n> A hydrated Octokit client.\n\n## Usage\n\nReturns an authenticated Octokit client that follows the machine [proxy settings](https://help.github.com/en/actions/hosting-your-own-runners/using-a-proxy-server-with-self-hosted-runners) and correctly sets GHES base urls. See https://octokit.github.io/rest.js for the API.\n\n```js\nconst github = require('@actions/github');\nconst core = require('@actions/core');\n\nasync function run() {\n    // This should be a token with access to your repository scoped in as a secret.\n    // The YML workflow will need to set myToken with the GitHub Secret Token\n    // myToken: ${{ secrets.GITHUB_TOKEN }}\n    // https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#about-the-github_token-secret\n    const myToken = core.getInput('myToken');\n\n    const octokit = github.getOctokit(myToken)\n\n    // You can also pass in additional options as a second parameter to getOctokit\n    // const octokit = github.getOctokit(myToken, {userAgent: \"MyActionVersion1\"});\n\n    const { data: pullRequest } = await octokit.rest.pulls.get({\n        owner: 'octokit',\n        repo: 'rest.js',\n        pull_number: 123,\n        mediaType: {\n          format: 'diff'\n        }\n    });\n\n    console.log(pullRequest);\n}\n\nrun();\n```\n\nYou can also make GraphQL requests. See https://github.com/octokit/graphql.js for the API.\n\n```js\nconst result = await octokit.graphql(query, variables);\n```\n\nFinally, you can get the context of the current action:\n\n```js\nconst github = require('@actions/github');\n\nconst context = github.context;\n\nconst newIssue = await octokit.rest.issues.create({\n  ...context.repo,\n  title: 'New issue!',\n  body: 'Hello Universe!'\n});\n```\n\n## Webhook payload typescript definitions\n\nThe npm module `@octokit/webhooks` provides type definitions for the response payloads. You can cast the payload to these types for better type information.\n\nFirst, install the npm module `npm install @octokit/webhooks`\n\nThen, assert the type based on the eventName\n```ts\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport * as Webhooks from '@octokit/webhooks'\nif (github.context.eventName === 'push') {\n  const pushPayload = github.context.payload as Webhooks.WebhookPayloadPush\n  core.info(`The head commit is: ${pushPayload.head}`)\n}\n```\n\n## Extending the Octokit instance\n`@octokit/core` now supports the [plugin architecture](https://github.com/octokit/core.js#plugins). You can extend the GitHub instance using plugins. \n\nFor example, using the `@octokit/plugin-enterprise-server` you can now access enterprise admin apis on GHES instances.\n\n```ts\nimport { GitHub, getOctokitOptions } from '@actions/github/lib/utils'\nimport { enterpriseServer220Admin } from '@octokit/plugin-enterprise-server'\n\nconst octokit = GitHub.plugin(enterpriseServer220Admin)\n// or override some of the default values as well \n// const octokit = GitHub.plugin(enterpriseServer220Admin).defaults({userAgent: \"MyNewUserAgent\"})\n\nconst myToken = core.getInput('myToken');\nconst myOctokit = new octokit(getOctokitOptions(token))\n// Create a new user\nmyOctokit.rest.enterpriseAdmin.createUser({\n  login: \"testuser\",\n  email: \"testuser@test.com\",\n});\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright 2019 GitHub\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@actions/github/-/github-5.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@actions/github/-/github-5.0.0.tgz",
    "hash": "",
    "integrity": "sha512-QvE9eAAfEsS+yOOk0cylLBIO/d6WyWIOvsxxzdrPFaud39G6BOkUwScXZn1iBzQzHyu9SBkkLSWlohDWdsasAQ==",
    "registry": "npm",
    "packageName": "@actions/github",
    "cacheIntegrity": "sha512-QvE9eAAfEsS+yOOk0cylLBIO/d6WyWIOvsxxzdrPFaud39G6BOkUwScXZn1iBzQzHyu9SBkkLSWlohDWdsasAQ== sha1-F1QSeXbFC9iLLpBfENIE120Ucvg="
  },
  "registry": "npm",
  "hash": "42f13d78001f12c4bec8e3a4d1cca52c120efdde96c9620ebecc71cddacf15ab9ddfd1ba04e914c12717667d620734331f2bbd4819242d25a5a210d676c6ac01"
}